//
// File generated by HDevelop for HALCON/.NET (C#) Version 13.0.2.2
//

using HalconDotNet;

public partial class HDevelopExport
{
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
  public HDevelopExport()
  {
    // Default settings used in HDevelop 
    HOperatorSet.SetSystem("width", 512);
    HOperatorSet.SetSystem("height", 512);
    if (HalconAPI.isWindows)
      HOperatorSet.SetSystem("use_window_thread","true");
    action();
  }
#endif

#if !NO_EXPORT_MAIN
  // Main procedure 
  private void action()
  {

    HSystem sys = new HSystem();

    // Local iconic variables 

    // Local control variables 
    HTuple  hv_Error = null;

    HTuple hv_Protocol = null, hv_Timeout = null;
    HTuple hv_AcceptingSocket = null, hv_BaseProtocol = null;
    HTuple hv_OpenStatus = new HTuple(), hv_Socket = new HTuple();
    HTuple hv_Address = null, hv_Answer = null, hv_From = new HTuple();
    HTuple hv_Data = new HTuple(), hv_To = new HTuple(), hv_Format = new HTuple();
    // Initialize local and output iconic variables 
    //***********************************************************************
    //This example program shows how to use the HALCON generic socket
    //functionality to send and receive arbitrary data via sockets. In this
    //example, a TCP socket is created and then used to listen for connection
    //requests. To see how it works, please start another HDevelop with the
    //program 'generic_socket_send.hdev' after starting this example.
    //***********************************************************************
    //Initialize program
    hv_Protocol = "TCP4";
    hv_Timeout = 3.0;
    //
    //Open a listening socket
    HOperatorSet.OpenSocketAccept(4660, (new HTuple("protocol")).TupleConcat("timeout"), 
        hv_Protocol.TupleConcat(hv_Timeout), out hv_AcceptingSocket);
    //Strip AddressFamily from Protocl
    HOperatorSet.TupleRegexpMatch(hv_Protocol, "TCP|HALCON", out hv_BaseProtocol);
    if ((int)((new HTuple(hv_BaseProtocol.TupleEqual("TCP"))).TupleOr(new HTuple(hv_BaseProtocol.TupleEqual(
        "HALCON")))) != 0)
    {
      //
      //Wait for an incoming connection, use the timeout of the
      //AcceptingSocket
      // Error variable 'hv_Error' activated
      hv_Error = 2;
      // (dev_)set_check ("~give_error")
      hv_OpenStatus = 5;
      while ((int)(new HTuple(hv_OpenStatus.TupleNotEqual(2))) != 0)
      {
        try
        {
          hv_Error = 2;
          HOperatorSet.SocketAcceptConnect(hv_AcceptingSocket, "auto", out hv_Socket);
        }
        catch(HalconException e)
        {
          hv_Error = e.GetErrorCode();
          if ((int)hv_Error < 0)
            throw e;
        }
        hv_OpenStatus = hv_Error.Clone();
      }
      // (dev_)set_check ("give_error")
      //
      //Set the same timeout on the newly created socket
      HOperatorSet.SetSocketParam(hv_Socket, "timeout", hv_Timeout);
    }
    else
    {
      //
      //UDP sockets do not need an accept()
      hv_Socket = hv_AcceptingSocket.Clone();
    }
    HOperatorSet.GetSocketParam(hv_Socket, "address_info", out hv_Address);
    //
    hv_Answer = new HTuple();
    while ((int)(new HTuple(hv_Answer.TupleNotEqual("End"))) != 0)
    {
      HOperatorSet.ReceiveData(hv_Socket, (new HTuple("cz-csi")).TupleConcat("A3"), 
          out hv_Answer, out hv_From);
      if ((int)(new HTuple(((hv_From.TupleSelect(2))).TupleEqual(0))) != 0)
      {
        hv_Data = "Received:"+(hv_Answer.TupleSelect(1));
      }
      else
      {
        hv_Data = "Received:"+hv_Answer;
      }
      hv_To = new HTuple();
      hv_To = hv_To.TupleConcat(hv_From.TupleSelect(0));
      hv_To = hv_To.TupleConcat(hv_From.TupleSelect(
          1));
      hv_Format = "z";
      HOperatorSet.SendData(hv_Socket, hv_Format, hv_Data, hv_To);
    }
    // stop(...); only in hdevelop
    HOperatorSet.CloseSocket(hv_Socket);
    HOperatorSet.CloseSocket(hv_AcceptingSocket);

  }

#endif


}
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
public class HDevelopExportApp
{
  static void Main(string[] args)
  {
    new HDevelopExport();
  }
}
#endif

