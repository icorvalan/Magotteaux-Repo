<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="13.0.2.2">
<procedure name="main">
<interface/>
<body>
<l>Parametros_Visualizacion:=['colored','disp_pose','point_size']</l>
<l>Valores_Visualizacion:= [  12  ,'true',1]</l>
<c></c>
<l>open_serial ('COM2', SerialHandle)</l>
<l>set_serial_param (SerialHandle, 115200, 8, 'none', 'none', 1, 30, 'unchanged')</l>
<c></c>
<l>Get_Vector_Estados (Vector_Estado_Fx)</l>
<c></c>
<c></c>
<l>* # FUNCIONES EXTERNAS A LOS BLOQUES  </l>
<c></c>
<c>******************************************</c>
<c>* 0.CAPTURO EL MODELO 3D  DE LA CAMRA 1</c>
<c>******************************************</c>
<c></c>
<c></c>
<l>*FALSEO_ADQ_FOTO (ReferenciaEsquina, ObjectSelected, X, Y, Z, SerialHandle, Escena3D_RAW)</l>
<c></c>
<l>* Parametros_Visualizacion:=['colored','disp_pose','point_size']</l>
<l>* Valores_Visualizacion:= [  12  ,'true',1]</l>
<l>* Altura_Pallet:= 500</l>
<l>* Ditancia_camara_Piso_Pallet:=2117</l>
<l>* Rango_Seguridad:=200</l>
<l>* Rango_posible_borde_pallet:=Ditancia_camara_Piso_Pallet-Altura_Pallet</l>
<c></c>
<l>* Set_SFM_Esquina_Pallet (Z, X, Y, Rango_posible_borde_pallet, Rango_Seguridad, Parametros_Visualizacion, Valores_Visualizacion)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c>***********************************************************</c>
<c>* 1.1- Conexion de Ensenso</c>
<c>***********************************************************</c>
<c></c>
<l>Conectar_Ensenso_N35 (24001, NxLib, Camera_1, Conexion_Camara)</l>
<c></c>
<l>* #########################################################################</l>
<c>* Configuracion de Parametros</c>
<l>MinimumDisparity_Cam1:=-64</l>
<l>NumberOfDisparities_Cam1:= 128</l>
<l>Projector:='true'</l>
<l>FrontLigth:='true'</l>
<l>AutoExposure:='true'</l>
<l>AutoGain:='true'</l>
<l>Exposure := 8</l>
<l>Gain:=1</l>
<l>Config_Parametros_Cam_R1 (NxLib, Camera_1, NumberOfDisparities_Cam1, MinimumDisparity_Cam1, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure, TempCam)</l>
<c></c>
<l>* ############################################################################</l>
<c></c>
<l>* ################ Capturo la Imagen ########################################</l>
<l>Get_Img_Camera_R1 (ModelImage, Xm, Ym, Zm, ImgLeftCamera_1, NxLib, Camera_1, Escena3D_RAW)</l>
<c></c>
<l>* ################ Capturo la Posicion del Robot #########################</l>
<l>Get_Robot_Pose (SerialHandle, ToolInBasePose)</l>
<c></c>
<c></c>
<c>******************************************************************************************************************************</c>
<l>Debug_View:=true</l>
<l>Visualizar_3D (Escena3D_RAW, Parametros_Visualizacion, Valores_Visualizacion, Debug_View, [], [], [], PoseOut1)</l>
<c>******************************************************************************************************************************</c>
<c></c>
<c></c>
<c></c>
<c></c>
<c>***********************************************************</c>
<c>* 1.2- Conexion de Procilica GT</c>
<c>***********************************************************</c>
<c></c>
<c>*Funcion que configura la camara Procilica</c>
<l>Set_Config_Cam (AcqHandle_Cam_0, Camera0_Parameters, Camera0_Pose, Conexion_Camara_0, CalTabFile)</l>
<c></c>
<c>***********************************************************</c>
<c>* Funciones de adquisicion</c>
<c>***********************************************************</c>
<l>Time:=200000</l>
<l>Gain:=10.0</l>
<l>Set_exposure_Time_cam_0 (AcqHandle_Cam_0, Time, Gain)</l>
<l>Get_Image (Image, AcqHandle_Cam_0)</l>
<c>***********************************************************</c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c>****************************************************************************</c>
<c>*                         CONSULTA A BD</c>
<c>* FUNCION QUE LEE DESDE LA BD LA RUTA DE LOS ARCHIVOS SFM PARA CADA SEGMENTO</c>
<c>*</c>
<c>*</c>
<c>*****************************************************************************</c>
<c>* 1.- Se debera extraer el codigo de core que debe ir en cada segmento</c>
<c>* 2.- se debera buscar ese codigo en la BD</c>
<c>* 3. se extraera la ruta del SFM de cada core</c>
<c>* 4.- Entrega en un vector el codigo del Core y la ruta donde esta el SFM</c>
<c>******************************************************************************</c>
<l>* ############################################################################</l>
<l>Get_Cores_BD (Path_CORE_ID, Path_SFM_Segmentos, Path_3D_Segmentos)           </l>
<l>* ############################################################################</l>
<c></c>
<c>*******************************************************************</c>
<c>* 0.1Leo los archivos de referencia de la esquina del pallets</c>
<c>*******************************************************************</c>
<l>Get_SFM_3D_Pallet (SFM_Pallet, Pallet_3D_Esquina)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c>*******************************************************************</c>
<c>*                       FIN DE INICIALIZACIONES</c>
<c>*******************************************************************</c>
<c></c>
<l>* #### Envio data de estado ########################</l>
<l>Estado:=0</l>
<l>Resultado:=0</l>
<l>Procesando:=0</l>
<l>Send_Data_Proceso (Vector_Estado_Fx, SerialHandle, Estado, Resultado, Procesando)</l>
<l>* ##################################################</l>
<c></c>
<c>    </c>
<l>while(true)</l>
<c>    </c>
<c>    </c>
<c>    *Variable a leer para activar la adquisicion del robot</c>
<l>    Tag_Lectura:='_EV01_O_CmdDatos'         </l>
<l>    Read_EthernetIP_Data (Tag_Lectura, SerialHandle, _EV1_O_CmdDatos)</l>
<c>    </c>
<l>* ######################################################################################</l>
<l>* ##################### BLOQUE 1########################################################</l>
<l>* #################Identificación de elementos en el pallet#############################</l>
<l>* ##### Input -&gt; RV_CmdFotogen #########################################################</l>
<l>* #####       -&gt; Imagen</l>
<l>* #####       -&gt; 'PV_Pallet_to_Scan'</l>
<l>* #####       -&gt; BD Cores</l>
<l>* #######################################################################################</l>
<c>    </c>
<c>  </c>
<l>    if (_EV1_O_CmdDatos &gt;= 11 and _EV1_O_CmdDatos &lt;= 16 )</l>
<c>        </c>
<l>* #######################################################################################</l>
<c>        *1. *Si el pallet en 11, sigmifica que leo pallet 1</c>
<l>* #######################################################################################</l>
<c>        </c>
<l>        N_Pallet_to_Scan:=_EV1_O_CmdDatos-10</l>
<c></c>
<c></c>
<c></c>
<l>* #################################################################</l>
<l>* ##### Base Datos#################################################</l>
<c>        * Vector que indica como esta distribuido los CORES en el pallet</c>
<c>        * -&gt; Esto debe estar ingresado por el operador. &lt;-</c>
<c>        * valor 0 es seccion A, 1B,2C...etc</c>
<l>* #################################################################</l>
<l>        BD_Dinamica (SerialHandle, Vector_ID_Core_by_Segment_Pallet_1, Vector_ID_Core_by_Segment_Pallet_2, Vector_ID_Core_by_Segment_Pallet_3, \
                     Vector_ID_Core_by_Segment_Pallet_4, Vector_ID_Core_by_Segment_Pallet_5, Vector_ID_Core_by_Segment_Pallet_6)</l>
<c>        </c>
<l>        Get_Core_Presence (SerialHandle, Vector_Estado_Fx, Vector_ID_Core_by_Segment_Pallet_1, Vector_ID_Core_by_Segment_Pallet_2, \
                           Vector_ID_Core_by_Segment_Pallet_3, Vector_ID_Core_by_Segment_Pallet_4,\
                           Path_SFM_Segmentos, Path_3D_Segmentos, Path_CORE_ID, N_Pallet_to_Scan, SFM_Pallet, Pallet_3D_Esquina, \
                           NxLib, Camera_1, Vector_ID_Core_by_Segment_Pallet_5, Vector_ID_Core_by_Segment_Pallet_6)</l>
<c>        </c>
<l>    endif</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>* ##############################FIN BLOQUE 1##############################################</l>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<l>* ######################################################################################</l>
<l>* ##################### BLOQUE 2########################################################</l>
<l>* #################Identificación de elementos en el pallet#############################</l>
<l>* ##### Input -&gt; RV_CmdFotogen #########################################################</l>
<l>* #####       -&gt; Imagen</l>
<l>* #####       -&gt; 'PV_Pallet_to_Scan'</l>
<l>* #####       -&gt; BD Cores</l>
<l>* ######################################################################################</l>
<l>    if (_EV1_O_CmdDatos = 20 or _EV1_O_CmdDatos = 21 )</l>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<l>        Get_Patron_Pose (SerialHandle, Vector_Estado_Fx,\
                         AcqHandle_Cam_0,\
                         Camera0_Parameters, Camera0_Pose, Estado_SubProceso,\
                         PoseForCalibrationPlate,\
                         ToolInCamPose, ToolInBasePose,\
                         ObjInBasePose)</l>
<c>        </c>
<c>        </c>
<c>        </c>
<l>    endif</l>
<l>* ##############################FIN BLOQUE 2########################################################</l>
<c>    </c>
<c></c>
<c>    </c>
<c>    </c>
<l>* ######################################################################################</l>
<l>* ##################### BLOQUE 3########################################################</l>
<l>* #################        Tomar Cores e insertarlos       #############################</l>
<l>* ##### Input -&gt; RV_CmdFotogen #########################################################</l>
<l>* #####       -&gt; RAM Base Datos</l>
<l>* #####       -&gt; 'PV_Pallet_to_Scan'</l>
<l>* #####       -&gt; BD Cores</l>
<l>* ######################################################################################    </l>
<c>    </c>
<l>    if (_EV1_O_CmdDatos &gt; 21 and _EV1_O_CmdDatos &lt;= 26 )</l>
<c>        </c>
<c>        * </c>
<l>* #### Envio data de estado ########################</l>
<l>        Procesando := 1</l>
<l>        Estado := 0</l>
<l>        Resultado := 0</l>
<l>        Send_Data_Proceso (Vector_Estado_Fx, SerialHandle, Estado, Resultado, Procesando)</l>
<l>* # ################################################# </l>
<c>        </c>
<l>*         Get_Vector_Entidades (Vector_ID_Core_by_Segment_Pallet_1, Vector_Entidades_Segmento)</l>
<c>        </c>
<l>* ###########adquisicion de foto#######################################################################################################################    </l>
<c>        * Configuracion de Parametros</c>
<l>        MinimumDisparity_Cam1:=-47</l>
<l>        NumberOfDisparities_Cam1:= 96</l>
<l>        Projector:='true'</l>
<l>        FrontLigth:='true'</l>
<l>        AutoExposure:='false'</l>
<l>        AutoGain:='false'</l>
<l>        Exposure := 5.49</l>
<l>        Gain:=1</l>
<l>        Config_Parametros_Cam_R1 (NxLib, Camera_1, NumberOfDisparities_Cam1, MinimumDisparity_Cam1, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure, TempCam)</l>
<l>        Get_Img_Camera_R1 (ModelImage, X, Y, Z, ImgLeftCamera_1, NxLib, Camera_1, Escena3D_RAW)</l>
<c>        </c>
<c>        </c>
<c>        </c>
<l>* ###################################################################</l>
<l>* #### para saber que Core debo utilizar debo consultar a la RAM BD</l>
<l>* ###################################################################</l>
<c>        </c>
<l>        Get_Core_ToUse_From_BDD (SerialHandle, \
                                 Cod_Core_ToUse, Pallet_To_Scan, Segmento_To_Scan)</l>
<l>        tuple_strrstr (Cod_Core_ToUse, 'PIN', Position)</l>
<l>        if (Position&lt;0)</l>
<c>            </c>
<l>* ####################################################################    </l>
<l>* ##############################PENDIENTE#############################</l>
<l>* ##### Paso la pose a CamInBasePose para virtualizar el ROI respecto#</l>
<l>* ##### al robot             #########################################</l>
<l>* ####################################################################   </l>
<c>            *Leo la pose de la esquina del pallet N</c>
<l>            NamePose:='Pallet_'+Pallet_To_Scan</l>
<l>            read_pose ('C:/Users/Usuario/Dropbox (MIRS)/1.-Servidor Desarrollo Software/7.-Magotteaux/5.-Ing Software/0 Identificacion de Pallet/'+NamePose+'.dat',\
                       Esquina_Pallet_Pose)</l>
<c>            </c>
<l>* ###################################################################    </l>
<l>* ######## Realizo el reconocimiento del patron #####################</l>
<l>* ################################################################### </l>
<c>            </c>
<l>            Vector_ID_Core_by_Segment_Palle_tofind:=Cod_Core_ToUse</l>
<l>            N_Pallet_to_Scan:=Pallet_To_Scan</l>
<l>            SegmentoPallet:=Segmento_To_Scan</l>
<l>            Pose_Esquina:=Esquina_Pallet_Pose</l>
<c>            </c>
<l>            Visualizar3D:=true</l>
<l>            Take_Core_In_Pallet (Z, X, Y, Escena3D_RAW, N_Pallet_to_Scan,\
                                 Path_SFM_Segmentos, Path_3D_Segmentos, \
                                 Vector_ID_Core_by_Segment_Palle_tofind, Path_CORE_ID, \
                                 SerialHandle, Vector_Estado_Fx, Visualizar3D, SegmentoPallet, \
                                 Pose_Esquina, Estado_SubProceso_Get_Core_Presence_In_Pallet)</l>
<c>            </c>
<c>            </c>
<l>        endif</l>
<c>        </c>
<l>    endif</l>
<c>    </c>
<c></c>
<l>endwhile</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l> Close_Camera_1 (Camera_1, NxLib)</l>
<c></c>
<c></c>
<l>Close_All_Cameras (AcqHandle_Cam_0, Camera_1, NxLib, Exception)</l>
<c></c>
<l>clear_surface_model(SFM_Pallet)</l>
<l>clear_object_model_3d(Pallet_3D_Esquina)</l>
<l>close_serial (SerialHandle)</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="Set_Config_Cam">
<interface>
<oc>
<par name="AcqHandle" base_type="ctrl" dimension="0"/>
<par name="CameraParameters" base_type="ctrl" dimension="0"/>
<par name="CameraPose" base_type="ctrl" dimension="0"/>
<par name="Conexion_Camara_0" base_type="ctrl" dimension="0"/>
<par name="CalTabFile" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<c></c>
<c>*Parametros de calibracion de la camara</c>
<l>CameraParameters := ['area_scan_polynomial',0.019089,226.612,-547494,2.17334e+007,0.023374,-0.0333038,5.50091e-006,5.5e-006,2472.03,1594.77,4896,3264]</l>
<l>CameraPose := [-0.330897,-0.213789,0.455639,3.05118,359.888,268.927,0]</l>
<c></c>
<c></c>
<l>Conexion_Camara_0:=false</l>
<c></c>
<l>try</l>
<c>    </c>
<c>    *Apertura  y conexion de la camara</c>
<l>    open_framegrabber ('GigEVision', 0, 0, 0, 0, 0, 0, 'default', -1, 'default', -1, 'false', 'default', '000f310262c0_AlliedVisionTechnologies_GT4905C02', 0, -1, AcqHandle)</l>
<l>    set_framegrabber_param (AcqHandle, 'ExposureMode', 'Timed')</l>
<c>    </c>
<l>    set_framegrabber_param (AcqHandle, 'ExposureAuto', 'Off')</l>
<l>    set_framegrabber_param (AcqHandle, 'AcquisitionMode', 'SingleFrame')</l>
<c>    </c>
<l>    grab_image_start (AcqHandle, -1)</l>
<c>    </c>
<l>    set_framegrabber_param (AcqHandle, 'ExposureTimeAbs', 5000.0)</l>
<l>    set_framegrabber_param (AcqHandle, 'Gain', 21.0)</l>
<c>    </c>
<l>    Conexion_Camara_0:=true</l>
<c>    </c>
<c>    * Cargo el Caltab que se debera buscar</c>
<l>    CalTabFile := 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/13.- Ensenso N35/Caltab/Caltab7x7_5.descr'</l>
<c>    </c>
<c>    *************************************************************************************************************</c>
<c>    * Lectura de Pose herramienta respecto a la camara</c>
<c>    *************************************************************************************************************</c>
<c>    </c>
<c>    </c>
<l>    read_pose ('C:/Users/Usuario/Dropbox (MIRS)/1.-Servidor Desarrollo Software/7.-Magotteaux/7.-HandEye/2. procilica/ToolInCamPose_Procilica.dat', \
               ToolInCamPose)</l>
<c>    **************************************************************************************************************</c>
<l>    return () </l>
<c>    </c>
<l>catch (Exception)</l>
<c>    </c>
<l>    Conexion_Camara_0:=false</l>
<c>    </c>
<l>endtry</l>
<l>return () </l>
</body>
<docu id="Set_Config_Cam">
<parameters>
<parameter id="AcqHandle"/>
<parameter id="CalTabFile"/>
<parameter id="CameraParameters"/>
<parameter id="CameraPose"/>
<parameter id="Conexion_Camara_0"/>
</parameters>
</docu>
</procedure>
<procedure name="Conectar_Ensenso_N35">
<interface>
<ic>
<par name="Puerto" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="Conexion_Camara" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* </c>
<l>Conexion_Camara_1 := false</l>
<l>try</l>
<c>    * </c>
<l> *   info_framegrabber ('Ensenso-NxLib', 'device', Information, ValueList)</l>
<l> *   info_framegrabber ('Ensenso-NxLib', 'info_boards', Information, Estado)</l>
<c>    </c>
<c>    * Inicializacion de Arbol y camara estereo</c>
<l>    open_framegrabber ('Ensenso-NxLib', 0, 0, 0, 0, 0, 0, 'default', 0, 'Raw', 'auto_grab_data=0', 'false', 'Item', '/', 0, 0, NxLib)</l>
<l>    open_framegrabber ('Ensenso-NxLib', 0, 0, 0, 0, 0, 0, 'default', 0, 'Raw', 'auto_grab_data=0', 'false', 'Stereo','193216', 0, 0, Camera_1)</l>
<c>    </c>
<c>    * Abro puerto TCP del Arbol</c>
<l>    set_framegrabber_param(NxLib, 'do_open_tcp_port', Puerto)</l>
<l>    Conexion_Camara_1 := true</l>
<c>    * </c>
<l>    return ()</l>
<l>catch (Exception)</l>
<l>    Conexion_Camara_1 := false</l>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="Conectar_Ensenso_N35">
<parameters>
<parameter id="Camera_1"/>
<parameter id="Conexion_Camara"/>
<parameter id="NxLib"/>
<parameter id="Puerto"/>
</parameters>
</docu>
</procedure>
<procedure name="Close_Camera_1">
<interface>
<ic>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="NxLib_1" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>close_framegrabber (Camera_1)</l>
<l>close_framegrabber (NxLib_1)</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Close_Camera_1">
<parameters>
<parameter id="Camera_1"/>
<parameter id="NxLib_1"/>
</parameters>
</docu>
</procedure>
<procedure name="Adq_Imagen">
<interface>
<oo>
<par name="ModelImage" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>set_framegrabber_param (NxLib, 'do_execute', 'Capture')</l>
<l>set_framegrabber_param (NxLib, 'do_execute', 'ComputeDisparityMap')</l>
<l>set_framegrabber_param (NxLib, 'do_execute', 'ComputePointMap')</l>
<c>* </c>
<c>* </c>
<l>grab_data (ModelImage, Regions, Contours, Camera, Data)</l>
<l>return ()</l>
</body>
<docu id="Adq_Imagen">
<parameters>
<parameter id="Camera"/>
<parameter id="ModelImage"/>
<parameter id="NxLib"/>
</parameters>
</docu>
</procedure>
<procedure name="Adq_XYZ_Img">
<interface>
<io>
<par name="ModelImage" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Xm" base_type="iconic" dimension="0"/>
<par name="Ym" base_type="iconic" dimension="0"/>
<par name="Zm" base_type="iconic" dimension="0"/>
</oo>
</interface>
<body>
<l>select_obj (ModelImage, XYZMAP, 3)</l>
<c>* </c>
<c>* Separate the X, Y and Z images</c>
<l>access_channel (XYZMAP, Xm, 1)</l>
<l>access_channel (XYZMAP, Ym, 2)</l>
<l>access_channel (XYZMAP, Zm, 3)</l>
<l>return ()</l>
</body>
<docu id="Adq_XYZ_Img">
<parameters>
<parameter id="ModelImage"/>
<parameter id="Xm"/>
<parameter id="Ym"/>
<parameter id="Zm"/>
</parameters>
</docu>
</procedure>
<procedure name="Close_Camera_0">
<interface>
<ic>
<par name="AcqHandle_Cam_0" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c></c>
<c></c>
<l>Process_Ok:=false</l>
<l>try</l>
<c>    </c>
<l>    close_framegrabber (AcqHandle_Cam_0)     </l>
<l>    Process_Ok:=true</l>
<l>catch (Exception)</l>
<l>endtry</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Close_Camera_0">
<parameters>
<parameter id="AcqHandle_Cam_0"/>
</parameters>
</docu>
</procedure>
<procedure name="Close_All_Cameras">
<interface>
<ic>
<par name="AcqHandle_Cam_0" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="NxLib_1" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Exception" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>try   </l>
<l>    Close_Camera_0 (AcqHandle_Cam_0) </l>
<l>catch (Exception)</l>
<l>endtry</l>
<c></c>
<l>try    </l>
<l>    Close_Camera_1 (Camera_1, NxLib_1)</l>
<l>catch (Exception)</l>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="Close_All_Cameras">
<parameters>
<parameter id="AcqHandle_Cam_0"/>
<parameter id="Camera_1"/>
<parameter id="Exception"/>
<parameter id="NxLib_1"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Image">
<interface>
<oo>
<par name="Image" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="AcqHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>grab_image_async (Image, AcqHandle, -1)</l>
<l>grab_image_async (Image, AcqHandle, -1)</l>
<l>return ()</l>
</body>
<docu id="Get_Image">
<parameters>
<parameter id="AcqHandle"/>
<parameter id="Image"/>
</parameters>
</docu>
</procedure>
<procedure name="Set_exposure_Time_cam_0">
<interface>
<ic>
<par name="AcqHandle_Cam_0" base_type="ctrl" dimension="0"/>
<par name="Time" base_type="ctrl" dimension="0"/>
<par name="Gain" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>    set_framegrabber_param (AcqHandle_Cam_0, 'ExposureTimeAbs', Time)</l>
<l>    set_framegrabber_param (AcqHandle_Cam_0, 'Gain', Gain)</l>
<l>return ()</l>
</body>
<docu id="Set_exposure_Time_cam_0">
<parameters>
<parameter id="AcqHandle_Cam_0"/>
<parameter id="Gain"/>
<parameter id="Time"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_ROI3D_Pallet">
<interface>
<oc>
<par name="ROI3D_NullFrame" base_type="ctrl" dimension="0"/>
<par name="ROI3D_rotate" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Parametros_Visualizacion:=['colored','disp_pose','point_size']</l>
<l>Valores_Visualizacion:= [  12  ,'true',25]</l>
<c></c>
<c></c>
<c></c>
<c>*Creo Plano</c>
<c>*****************************************************</c>
<c>*Dimenciones del cubo/2 en XY en mm</c>
<l>VisualizationPlaneSize:=1000.0/2</l>
<l>Z_alt:=3000</l>
<c>*****************************************************</c>
<c></c>
<l>create_pose (0, 0, 0, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose)</l>
<l>gen_plane_object_model_3d (Pose, [-1,-1,1,1] * VisualizationPlaneSize, [-1,1,1,-1] * VisualizationPlaneSize, Plano)</l>
<l>create_pose (VisualizationPlaneSize, VisualizationPlaneSize, 0, 0, 0, 0, 'Rp+T', 'gba', 'point', PoseEsquina)</l>
<l>rigid_trans_object_model_3d (Plano, PoseEsquina, Plano)</l>
<l>* visualize_object_model_3d (200000, [Plano], [], [], Parametros_Visualizacion, Valores_Visualizacion, [], [], [], PoseOut1)</l>
<c></c>
<c></c>
<l>Trans_X:=[]</l>
<l>Trans_Y:=[]</l>
<l>Ncuadrantes:=3.0</l>
<l> Trans_X[0]:=0</l>
<l>  Trans_Y[0]:=0</l>
<l>for Index := 1 to Ncuadrantes by 1</l>
<l>    Trans_X[Index]:=(VisualizationPlaneSize/(Ncuadrantes))*Index </l>
<l>    Trans_Y[Index]:=(VisualizationPlaneSize/Ncuadrantes)*Index</l>
<l>endfor</l>
<c></c>
<l>Alto_Sector:=VisualizationPlaneSize*2/(Ncuadrantes)</l>
<c></c>
<c></c>
<l>create_pose (0, 0, -1, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose)</l>
<c></c>
<l>create_pose (-Trans_X[1],-Trans_Y[1], Z_alt*0.5, 0, 0, 0, 'Rp+T', 'gba', 'point', PoseEsquina)</l>
<l>gen_box_object_model_3d (Pose, Alto_Sector, Alto_Sector, Z_alt, Plano_1)</l>
<l>rigid_trans_object_model_3d (Plano_1, PoseEsquina, Plano_1)</l>
<c></c>
<c></c>
<l>*visualize_object_model_3d (200000, [ Plano_1,Plano], [], [], Parametros_Visualizacion, Valores_Visualizacion, [], [], [], PoseOut1)</l>
<c></c>
<c></c>
<l>ThreshDistance:=1500</l>
<l>Modelos3d:=[Plano_1]</l>
<l>ROI3D_NullFrame:=[]</l>
<l>Vector_Segmento:=['A','B','C','D','E','F','G','H','I']</l>
<l>for Index_X := 1 to Ncuadrantes by 1</l>
<c>    </c>
<l>    for Index_Y := 1 to Ncuadrantes by 1</l>
<l>        create_pose (2*Trans_X[Index_X], 2*Trans_Y[Index_Y], -ThreshDistance, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose_Trans)       </l>
<l>        rigid_trans_object_model_3d (Modelos3d, Pose_Trans, ObjectModel3DRigidTrans1)</l>
<l>        ROI3D_NullFrame:=[ROI3D_NullFrame,ObjectModel3DRigidTrans1]</l>
<l>        *visualize_object_model_3d (200000, [ ROI3D_NullFrame,Plano], [], [], Parametros_Visualizacion, Valores_Visualizacion, [], [], [], PoseOut1)</l>
<c>        </c>
<l>    endfor</l>
<c>    </c>
<l>endfor</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>ROI3D_rotate:=[]</l>
<l>clear_object_model_3d (ROI3D_rotate)</l>
<c></c>
<l>for Index := 0 to |ROI3D_NullFrame|-1 by 1</l>
<c>    </c>
<l>    copy_object_model_3d (ROI3D_NullFrame[Index], 'all', ROI3D_rotate_Aux)</l>
<l>    ROI3D_rotate:=[ROI3D_rotate,ROI3D_rotate_Aux]</l>
<l>    ROI3D_rotate_Aux:=[]</l>
<c>   </c>
<l>endfor</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>clear_object_model_3d (Modelos3d)</l>
<l>clear_object_model_3d (Plano)</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_ROI3D_Pallet">
<parameters>
<parameter id="ROI3D_NullFrame"/>
<parameter id="ROI3D_rotate"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_ROI_3D">
<interface>
<ic>
<par name="ROI3D" base_type="ctrl" dimension="0"/>
<par name="ObjectModel3D" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Modelo_3D_RED" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>Modelo_3D_RED:=[]</l>
<c></c>
<l>for N_ROI := 0 to |ROI3D|-1 by 1</l>
<l>    get_object_model_3d_params (ROI3D[N_ROI], 'bounding_box1', GenParamValue)</l>
<c>    </c>
<l>    x_min:=GenParamValue[0]</l>
<l>    y_min:=GenParamValue[1]</l>
<l>    z_min:=GenParamValue[2]</l>
<l>    x_max:=GenParamValue[3]</l>
<l>    y_max:=GenParamValue[4]</l>
<l>    z_max:=GenParamValue[5]</l>
<c>    </c>
<l>    select_points_object_model_3d (ObjectModel3D, 'point_coord_z',\
                                   z_min, z_max, ObjectModel3DThresholded)</l>
<l>    select_points_object_model_3d (ObjectModel3DThresholded, 'point_coord_y',\
                                   y_min, y_max, ObjectModel3DThresholded)</l>
<l>    select_points_object_model_3d (ObjectModel3DThresholded, 'point_coord_x',\
                                   x_min, x_max, ObjectModel3DThresholded)</l>
<c>    </c>
<l>    Modelo_3D_RED:=[Modelo_3D_RED,ObjectModel3DThresholded]</l>
<c>    </c>
<l>endfor</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_ROI_3D">
<parameters>
<parameter id="Modelo_3D_RED"/>
<parameter id="ObjectModel3D"/>
<parameter id="ROI3D"/>
</parameters>
</docu>
</procedure>
<procedure name="Set_Max_Altura_Model3D">
<interface>
<ic>
<par name="Modelo_3D_ROI" base_type="ctrl" dimension="0"/>
<par name="Delta_Altura" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Modelo_3D_ROI_Thres" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>try</l>
<c>    </c>
<c>    * Delta altura limita  el Z que necesito</c>
<l>    get_object_model_3d_params (Modelo_3D_ROI, 'bounding_box1', GenParamValue)</l>
<c>    </c>
<l>    x_min:=GenParamValue[0]</l>
<l>    y_min:=GenParamValue[1]</l>
<l>    z_min:=GenParamValue[2]</l>
<l>    x_max:=GenParamValue[3]</l>
<l>    y_max:=GenParamValue[4]</l>
<l>    z_max:=GenParamValue[5]</l>
<c>    </c>
<c>    </c>
<l>*     if (z_max-Delta_Altura &lt;= 0)</l>
<c>        </c>
<l>*         dev_get_exception_data (Exception, 'error_msg', ErrorMsg)</l>
<l>*         return ()</l>
<l>*     endif</l>
<c>    </c>
<l>    select_points_object_model_3d (Modelo_3D_ROI, 'point_coord_z',\
                                   z_min, Delta_Altura, Modelo_3D_ROI_Thres)</l>
<c>    </c>
<c>    </c>
<l>catch (Exception)</l>
<l>    dev_get_exception_data (Exception, 'error_msg', ErrorMsg0)</l>
<l>    dev_get_exception_data (Exception, 'procedure', ErrorMsg1)</l>
<l>    dev_get_exception_data (Exception, 'operator', ErrorMsg2)</l>
<l>    dev_get_exception_data (Exception, 'program_line', ErrorMsg3)</l>
<c>    </c>
<l>    MensajeError:=ErrorMsg0+' IN '+ErrorMsg1+' IN FUNTION '+ErrorMsg2+' IN LINE '+ErrorMsg3</l>
<l>    throw (MensajeError)</l>
<l>endtry</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Set_Max_Altura_Model3D">
<parameters>
<parameter id="Delta_Altura"/>
<parameter id="Modelo_3D_ROI"/>
<parameter id="Modelo_3D_ROI_Thres"/>
</parameters>
</docu>
</procedure>
<procedure name="Find_Entity_3D">
<interface>
<ic>
<par name="N_matches" base_type="ctrl" dimension="0"/>
<par name="SFM" base_type="ctrl" dimension="0"/>
<par name="Modelo_imagen_3d" base_type="ctrl" dimension="0"/>
<par name="Sampling_Find" base_type="ctrl" dimension="0"/>
<par name="Keypoint" base_type="ctrl" dimension="0"/>
<par name="MinScore" base_type="ctrl" dimension="0"/>
<par name="Perno_Ref_Cam0" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="PoseMLS" base_type="ctrl" dimension="0"/>
<par name="ScoreMLS" base_type="ctrl" dimension="0"/>
<par name="PoseREFIN" base_type="ctrl" dimension="0"/>
<par name="ScoreREFIN" base_type="ctrl" dimension="0"/>
<par name="SurfaceMatchingResultID1" base_type="ctrl" dimension="0"/>
<par name="ObjectModel3DResultMLS" base_type="ctrl" dimension="0"/>
<par name="ObjectModel3DResultMLS_REFIN" base_type="ctrl" dimension="0"/>
<par name="Estado_Funcion" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* </c>
<l>Estado_Funcion := true</l>
<l>try</l>
<c>    * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = "Buscando Objeto";</c>
<c>    * </c>
<c>    * ***************************************</c>
<c>    * 1.Parametros de control</c>
<c>    * ***************************************</c>
<l>    GenParamName := ['num_matches','scene_normal_computation','pose_ref_scoring_dist_rel']</l>
<l>    GenParamValue := [N_matches   ,          'mls'           ,              0.03         ]</l>
<c>    * </c>
<c>    * </c>
<c>    * ***************************************</c>
<c>    * 2.Busqueda de entidad</c>
<c>    * ***************************************</c>
<l>    find_surface_model (SFM, Modelo_imagen_3d, Sampling_Find, Keypoint, MinScore, 'true', GenParamName, GenParamValue, PoseMLS, ScoreMLS, SurfaceMatchingResultIDMLS)</l>
<c>    * ***************************************</c>
<l>    if (|PoseMLS|)</l>
<c>        </c>
<c>        </c>
<c>        * 3.Refinar busqueda</c>
<c>        * ***************************************</c>
<l>        refine_surface_model_pose (SFM, Modelo_imagen_3d, PoseMLS, 0, 'false', 'pose_ref_sub_sampling', 2, PoseREFIN, ScoreREFIN, SurfaceMatchingResultID1)</l>
<c>        * ***************************************</c>
<c>        * 4.Translacion de objeto</c>
<c>        * ***************************************</c>
<c></c>
<l>        rigid_trans_object_model_3d (Perno_Ref_Cam0, PoseMLS, ObjectModel3DResultMLS)</l>
<l>        rigid_trans_object_model_3d (Perno_Ref_Cam0, PoseREFIN, ObjectModel3DResultMLS_REFIN)</l>
<c>        * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = "Objeto encontrado con una PROBABILIDAD de " + hv_ScoreMLS*100.ToString() ;</c>
<l>        Estado_Funcion := true</l>
<l>        return()</l>
<c>        </c>
<l>    endif</l>
<c>    </c>
<l>    Estado_Funcion := false</l>
<l>catch (Exception)</l>
<l>    Estado_Funcion := false</l>
<c>    * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = Fx_Aux.ErrorCatch(HDevExpDefaultException1);</c>
<c>    * </c>
<l>endtry</l>
<c>* </c>
<c>* </c>
<l>return ()</l>
</body>
<docu id="Find_Entity_3D">
<parameters>
<parameter id="Estado_Funcion"/>
<parameter id="Keypoint"/>
<parameter id="MinScore"/>
<parameter id="Modelo_imagen_3d"/>
<parameter id="N_matches"/>
<parameter id="ObjectModel3DResultMLS"/>
<parameter id="ObjectModel3DResultMLS_REFIN"/>
<parameter id="Perno_Ref_Cam0"/>
<parameter id="PoseMLS"/>
<parameter id="PoseREFIN"/>
<parameter id="SFM"/>
<parameter id="Sampling_Find"/>
<parameter id="ScoreMLS"/>
<parameter id="ScoreREFIN"/>
<parameter id="SurfaceMatchingResultID1"/>
</parameters>
</docu>
</procedure>
<procedure name="FALSEO_ADQ_FOTO">
<interface>
<oo>
<par name="ReferenciaEsquina" base_type="iconic" dimension="0"/>
<par name="ObjectSelected" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
<par name="Z" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ObjectModel3D1" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<c></c>
<l>read_object (ReferenciaEsquina, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/18.- Imagenes_IngSoft/0 Ensenso/Pallet_011.hobj')</l>
<c></c>
<l>select_obj (ReferenciaEsquina, ObjectSelected, 3)</l>
<l>decompose3 (ObjectSelected, X, Y, Z)</l>
<l>xyz_to_object_model_3d (X, Y, Z, ObjectModel3D1)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="FALSEO_ADQ_FOTO">
<parameters>
<parameter id="ObjectModel3D1"/>
<parameter id="ObjectSelected"/>
<parameter id="ReferenciaEsquina"/>
<parameter id="SerialHandle"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Esquina">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Cross" base_type="iconic" dimension="0"/>
<par name="ImageOut" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="phi" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Row" base_type="ctrl" dimension="0"/>
<par name="Col" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>ImageOut := Image</l>
<l>Estado_Funcion:=0</l>
<l>Rango_Seguridad_Ditancia_puntos:=500</l>
<c></c>
<c></c>
<l>get_image_size (ImageOut, Width, Height)</l>
<l>hom_mat2d_identity (HomMat2DIdentity)</l>
<l>hom_mat2d_rotate (HomMat2DIdentity, rad(phi), Width/2, Height/2, HomMat2DRotate)</l>
<c>* Apply an arbitrary affine transformation to an image</c>
<l>affine_trans_image (Image, Image, HomMat2DRotate, 'constant', 'false')</l>
<c>* </c>
<c></c>
<c>* *************************************</c>
<c>* Segmentacion de esquina</c>
<c>* *************************************</c>
<l>Altura_Pallet:= 1000</l>
<l>Ditancia_camara_Piso:=1700</l>
<l>Rango_Seg:=50</l>
<l>Rango_posible_borde_pallet:=Ditancia_camara_Piso-Altura_Pallet</l>
<c></c>
<l>threshold (Image, ROI_0, Rango_posible_borde_pallet-Rango_Seg, Rango_posible_borde_pallet+Rango_Seg)</l>
<c></c>
<l>reduce_domain (Image, ROI_0, ImageReduced1)</l>
<c></c>
<c></c>
<c>* *************************************</c>
<c>* detecction de bordes</c>
<c>* *************************************</c>
<l>connection (ROI_0, ConnectedRegions)</l>
<l>fill_up (ConnectedRegions, ConnectedRegions)</l>
<l>select_shape (ConnectedRegions, SelectedRegions, 'area', 'and', 60000, 99912+1000)</l>
<c>* </c>
<c>* *********************************************</c>
<c>* contabilizo el numero de objetos encontrados</c>
<l>count_obj (SelectedRegions, Number)</l>
<c>* **********************************************</c>
<c></c>
<l>erosion_circle (SelectedRegions, RegionErosion, 3.5)</l>
<c></c>
<l>dilation_circle (SelectedRegions, RegionDilation1, 15)</l>
<l>reduce_domain (Image, RegionDilation1, ImageReduced2)</l>
<c>* </c>
<l>reduce_domain (Image, RegionErosion, ImageReduced3)</l>
<c>* </c>
<l>dev_set_color ('blue')</l>
<c>* </c>
<l>get_region_polygon (SelectedRegions, 2, Row, Col)</l>
<l>gen_region_polygon (Pol, Row, Col)</l>
<c></c>
<c></c>
<c>* **********************************************</c>
<c>* Generacion de poligono</c>
<c>* *********************************************</c>
<l>gen_region_polygon_filled (Pol, Row, Col)</l>
<c>* </c>
<c>* </c>
<l>reduce_domain (Image, Pol, Esquina)</l>
<c>* </c>
<l>gen_image_proto (Image, ImageCleared, 255)</l>
<l>gen_image_proto (Image, ImageCleared2, 128)</l>
<c>* </c>
<l>threshold (ImageCleared, IMG, 0, 255)</l>
<l>difference (IMG, Esquina, RegionDifference)</l>
<c>* </c>
<l>reduce_domain (ImageCleared, RegionDifference, Esquina)</l>
<c>* </c>
<c>* </c>
<l>paint_region (RegionDifference, ImageCleared, EsquinaIMG, 10, 'fill')</l>
<c>* </c>
<c>* </c>
<c>* **********************************************</c>
<c>* Harrys</c>
<c>* **********************************************</c>
<c>* </c>
<l>derivate_gauss (EsquinaIMG, DerivGauss, 1, 'yyy')</l>
<l>gauss_filter (DerivGauss, DerivGauss2, 11)</l>
<c></c>
<l>SigmaGrad := 1</l>
<l>SigmaSmooth :=5</l>
<l>Threshold := 1000</l>
<l>* dev_display (Image)</l>
<l>points_harris (DerivGauss, SigmaGrad, SigmaSmooth, 0.04, Threshold, Row, Col)</l>
<l>gen_cross_contour_xld (Cross, Row, Col, 30, rad(45))</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>* dev_set_line_width (2)</l>
<l>* dev_display (EsquinaIMG)</l>
<l>* dev_set_color ('red')</l>
<l> dev_display (Cross)</l>
<l>* dev_set_color ('red')</l>
<c></c>
<c> </c>
<l> for Index1 := 0 to |Row-1| by 1</l>
<c>     </c>
<l>    * disp_line (200000, Row[Index1], Col[Index1],Row[Index1+1], Col[Index1+1])</l>
<c>    </c>
<c>     </c>
<l> endfor</l>
<c></c>
<l>if (|Row|)</l>
<c>    *BUSCO LA FILA Y COL MAS PEQUEÑA</c>
<c>    </c>
<l>    Puntero_Menor:=0</l>
<l>    Puntero_Mayor:=0</l>
<l>    Puntero_Menor_Col:=0</l>
<l>    Puntero_Menor_Row:=0</l>
<l>    for Index := 0 to |Row|-1 by 1</l>
<c>        </c>
<c></c>
<l>        if((Col[Puntero_Menor]  &gt;  Col[Index]) )</l>
<l>            Puntero_Menor:=Index</l>
<l>        endif</l>
<c>        </c>
<l>         if((Row[Puntero_Mayor]  &lt;  Row[Index]) )</l>
<l>            Puntero_Mayor:=Index</l>
<l>        endif         </l>
<c>        </c>
<c>        </c>
<l>    endfor</l>
<c>    </c>
<l>    gen_cross_contour_xld (Crossw1, Row[Puntero_Menor], Col[Puntero_Menor], 80, rad(45))</l>
<l>    gen_cross_contour_xld (Crossw2, Row[Puntero_Mayor], Col[Puntero_Mayor], 80, rad(45))    </l>
<c>    </c>
<l>    distance_pp ( Row[Puntero_Menor], Col[Puntero_Menor],  Row[Puntero_Mayor], Col[Puntero_Mayor], Distance)</l>
<c>    </c>
<c> </c>
<l>    dev_clear_window()</l>
<l>    gen_cross_contour_xld (Cross, Row, Col, 30, rad(45))</l>
<l>    gen_cross_contour_xld (Crossw1,  Row[Puntero_Menor], Col[Puntero_Menor], 80, rad(45))</l>
<l>    gen_cross_contour_xld (Crossw2, Row[Puntero_Mayor], Col[Puntero_Mayor], 80, rad(45))</l>
<l>    dev_display (EsquinaIMG)</l>
<l>    dev_set_color ('red')</l>
<l>    dev_display (Crossw1)</l>
<l>    dev_display (Crossw2)</l>
<c>    </c>
<c>    </c>
<l>    disp_line (200000, Row[Puntero_Menor], Col[Puntero_Menor],Row[Puntero_Mayor], Col[Puntero_Mayor])</l>
<c>   </c>
<l>    disp_line (200000, Row[Puntero_Mayor], 0,Row[Puntero_Mayor], Col[Puntero_Mayor])</l>
<l>    disp_line (200000, Row[Puntero_Menor], Col[Puntero_Menor],Height,  Col[Puntero_Menor])</l>
<c>    </c>
<c> </c>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    Estado_Funcion:=1</l>
<l>else</l>
<c>    </c>
<c>    </c>
<l>    Estado_Funcion:=0  </l>
<l>endif</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Esquina">
<parameters>
<parameter id="Col"/>
<parameter id="Cross"/>
<parameter id="Image"/>
<parameter id="ImageOut"/>
<parameter id="Row"/>
<parameter id="phi"/>
</parameters>
</docu>
</procedure>
<procedure name="Set_SFM_Esquina_Pallet">
<interface>
<io>
<par name="Z" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="Rango_posible_borde_pallet" base_type="ctrl" dimension="0"/>
<par name="Rango_Seg" base_type="ctrl" dimension="0"/>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>threshold (Z, Regions, Rango_posible_borde_pallet-Rango_Seg, Rango_posible_borde_pallet+Rango_Seg)</l>
<l>reduce_domain (Z, Regions, ImageReduced)</l>
<c></c>
<l>gen_rectangle1 (ROI_0, 62.5246, 134.286, 222.187, 1067.42)</l>
<c></c>
<l>reduce_domain (ImageReduced, ROI_0, ImageReduced_Z)</l>
<l>xyz_to_object_model_3d (X, Y, ImageReduced_Z, Esquina_Ref)</l>
<l>compose3 (X, Y, ImageReduced_Z, MultiChannelImage)</l>
<c></c>
<l>create_pose (-486, 573, -1590, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose)</l>
<l>rigid_trans_object_model_3d (Esquina_Ref, Pose, ObjectModel3DRigidTrans)</l>
<l>visualize_object_model_3d (200000, [ObjectModel3DRigidTrans], [], [], Parametros_Visualizacion, Valores_Visualizacion, [], [], [], PoseOut1)</l>
<c></c>
<l>create_pose (0, 0, 0, 0, 0, -90, 'Rp+T', 'gba', 'point', Pose)</l>
<l>rigid_trans_object_model_3d (ObjectModel3DRigidTrans, Pose, ObjectModel3DRigidTrans)</l>
<l>visualize_object_model_3d (200000, [ObjectModel3DRigidTrans], [], [], Parametros_Visualizacion, Valores_Visualizacion, [], [], [], PoseOut1)</l>
<c></c>
<l>create_pose (0, 0, 0, 180, 0, 0, 'Rp+T', 'gba', 'point', Pose)</l>
<l>rigid_trans_object_model_3d (ObjectModel3DRigidTrans, Pose, ObjectModel3DRigidTrans)</l>
<l>visualize_object_model_3d (200000, [ObjectModel3DRigidTrans], [], [], Parametros_Visualizacion, Valores_Visualizacion, [], [], [], PoseOut1)</l>
<c></c>
<l>create_pose (0, 950, 0, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose)</l>
<l>rigid_trans_object_model_3d (ObjectModel3DRigidTrans, Pose, ObjectModel3DRigidTrans)</l>
<l>visualize_object_model_3d (200000, [ObjectModel3DRigidTrans], [], [], Parametros_Visualizacion, Valores_Visualizacion, [], [], [], PoseOut1)</l>
<c></c>
<l>create_pose (-50, 0, 0, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose)</l>
<l>rigid_trans_object_model_3d (ObjectModel3DRigidTrans, Pose, ObjectModel3DRigidTrans)</l>
<l>visualize_object_model_3d (200000, [ObjectModel3DRigidTrans], [], [], Parametros_Visualizacion, Valores_Visualizacion, [], [], [], PoseOut1)</l>
<c></c>
<l>create_pose (0, 0, 0, 0, 0, -3, 'Rp+T', 'gba', 'point', Pose)</l>
<l>rigid_trans_object_model_3d (ObjectModel3DRigidTrans, Pose, ObjectModel3DRigidTrans)</l>
<l>visualize_object_model_3d (200000, [ObjectModel3DRigidTrans], [], [], Parametros_Visualizacion, Valores_Visualizacion, [], [], [], PoseOut1)</l>
<c></c>
<c></c>
<c>*****************************************</c>
<l>Sampling:=0.03</l>
<l>surface_normals_object_model_3d (ObjectModel3DRigidTrans, 'mls', [], [], ObjectModel3DNormals)</l>
<l>triangulate_object_model_3d (ObjectModel3DNormals, 'greedy', [], [], ObjectModel3DNormals, Information)</l>
<l>visualize_object_model_3d (200000, [ObjectModel3DNormals], [], [], Parametros_Visualizacion, Valores_Visualizacion, [], [], [], PoseOut1)</l>
<c></c>
<l>create_surface_model (ObjectModel3DNormals, Sampling, 'train_3d_edges', 'true', SurfaceModelID)</l>
<c></c>
<l>visualize_object_model_3d (200000,[ObjectModel3DNormals], [], [], Parametros_Visualizacion, Valores_Visualizacion, [], [], [], PoseOut1)</l>
<c></c>
<l>write_surface_model (SurfaceModelID, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/SFM_PALLET/SFM_Pallet.sfm')</l>
<l>write_object_model_3d (ObjectModel3DNormals, 'om3', 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/SFM_PALLET/3D_Pallet.om3', [], [])</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Set_SFM_Esquina_Pallet">
<parameters>
<parameter id="Parametros_Visualizacion"/>
<parameter id="Rango_Seg"/>
<parameter id="Rango_posible_borde_pallet"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_SFM_3D_Pallet">
<interface>
<oc>
<par name="SFM_Pallet" base_type="ctrl" dimension="0"/>
<par name="Pallet_3D_Esquina" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>read_surface_model ('D:/AI/Vision Artificial/4.-MAGOTTEAUX/SFM_PALLET/SFM_Pallet_beta.sfm', SFM_Pallet)</l>
<l>read_object_model_3d ('D:/AI/Vision Artificial/4.-MAGOTTEAUX/SFM_PALLET/3D_Pallet_beta.om3', 1, [], [], Pallet_3D_Esquina, Status)</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_SFM_3D_Pallet">
<parameters>
<parameter id="Pallet_3D_Esquina"/>
<parameter id="SFM_Pallet"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_ObjectModel3D_Util">
<interface>
<io>
<par name="Z" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
<par name="ImgLeftCamera_Esq" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="Rango_posible_borde_pallet" base_type="ctrl" dimension="0"/>
<par name="Rango_Seg" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ObjectModel3D" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Parametros_Visualizacion:=['colored','disp_pose','point_size']</l>
<l>Valores_Visualizacion:= [  12  ,'true',1]</l>
<c></c>
<c></c>
<l>threshold (ImgLeftCamera_Esq, Esquina, 90, 255)</l>
<l>reduce_domain (Z, Esquina, ImageReduced)</l>
<c></c>
<l>connection (Esquina, ConnectedRegions)</l>
<l>select_shape (ConnectedRegions, SelectedRegions, 'area', 'and', 8000, 99999)</l>
<l>reduce_domain (Z, SelectedRegions, ImageReduced)</l>
<c></c>
<l>*#################################################</l>
<c>**Funcion para  hacer la sfm de la esquina</c>
<l>*MakeSFM_Palletr (Esquina, Z, X, Y, ConnectedRegions, SelectedRegions, ImageReduced, MultiChannelImage, Parametros_Visualizacion, Valores_Visualizacion, Esquina3D, Pose, Esquina3D_Trans, Pose1, PoseOut1, Sampling, SurfaceModelID, ObjectModel3DNormals, Esquina_Tri, Information)</l>
<l>*#################################################</l>
<c></c>
<c></c>
<l>xyz_to_object_model_3d (X, Y, ImageReduced, ObjectModel3D)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_ObjectModel3D_Util">
<parameters>
<parameter id="ImgLeftCamera_Esq"/>
<parameter id="ObjectModel3D"/>
<parameter id="Rango_Seg"/>
<parameter id="Rango_posible_borde_pallet"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Rotate_ROI3D">
<interface>
<ic>
<par name="Pose_Refinada" base_type="ctrl" dimension="0"/>
<par name="ROI3D_rotate" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Pose_Segmentos" base_type="ctrl" dimension="0"/>
<par name="ROI3D_rotateOut" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<c></c>
<c></c>
<l>ROI3D_rotateOut := ROI3D_rotate</l>
<c>* Variable para asegurarme que tome lo sque existe por sobre el pallet</c>
<c></c>
<l>Z_Seguridad:=800</l>
<c></c>
<c></c>
<l>create_pose (Pose_Refinada[0], Pose_Refinada[1], Pose_Refinada[2]-Z_Seguridad,\
             Pose_Refinada[3], Pose_Refinada[4], Pose_Refinada[5], 'Rp+T', 'gba', 'point', Pose_Segmentos)</l>
<c></c>
<l>rigid_trans_object_model_3d (ROI3D_rotateOut, Pose_Segmentos, ROI3D_rotateOut)</l>
<l>return ()</l>
</body>
<docu id="Get_Rotate_ROI3D">
<parameters>
<parameter id="Pose_Refinada"/>
<parameter id="Pose_Segmentos"/>
<parameter id="ROI3D_rotate"/>
<parameter id="ROI3D_rotateOut"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Core_Presence_In_Pallet">
<interface>
<io>
<par name="Z" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
<par name="ImgLeftCamera_Esq" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
<par name="Pose_Robot" base_type="ctrl" dimension="2"/>
<par name="N_Pallet_to_Scan" base_type="ctrl" dimension="0"/>
<par name="Path_SFM_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_3D_Segmentos" base_type="ctrl" dimension="0"/>
<par name="SFM_Pallet" base_type="ctrl" dimension="0"/>
<par name="Pallet_3D_Esquina" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet" base_type="ctrl" dimension="0"/>
<par name="Path_CORE_ID" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="Visualizar3D" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Estado_SubProceso" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Parametros_Visualizacion:=['colored','disp_pose','point_size']</l>
<l>Valores_Visualizacion:= [  12  ,'true',1]</l>
<c></c>
<c>******************************************</c>
<c>*1.- Obtengo el ROI3D del PALLET</c>
<c>******************************************</c>
<l>Vector_Segmento:=['A','B','C','D','E','F','G','H','I']</l>
<c></c>
<l>try</l>
<l>    Get_ROI3D_Pallet (ROI3D_NullFrame, ROI3D_rotate)  </l>
<c>    </c>
<l>catch (Exception)</l>
<l>    dev_get_exception_data (Exception, 'error_msg', ErrorMsg0)</l>
<l>    dev_get_exception_data (Exception, 'procedure', ErrorMsg1)</l>
<l>    dev_get_exception_data (Exception, 'operator', ErrorMsg2)</l>
<l>    dev_get_exception_data (Exception, 'program_line', ErrorMsg3)</l>
<c>    </c>
<l>    MensajeError:=ErrorMsg0+' IN '+ErrorMsg1+' IN FUNTION '+ErrorMsg2+' IN LINE '+ErrorMsg3</l>
<l>*     throw (MensajeError)</l>
<c>    </c>
<l>* #### Envio data de estado ########################</l>
<l>    Procesando:=0</l>
<l>    Estado:=5</l>
<l>    Resultado:=2</l>
<l>    Send_Data_Proceso (Vector_Estado_Fx, SerialHandle, Estado, Resultado, Procesando)</l>
<l>* ################################################## </l>
<c>    </c>
<l>    Msg_Sub_Proceso:='#Error# '+MensajeError</l>
<l>    return()</l>
<l>endtry</l>
<c></c>
<c></c>
<l>* ########################################################</l>
<c>*                    constantes </c>
<c>******************************************</c>
<c>*2.- Busco la esquina de la caja con cores</c>
<c>******************************************</c>
<c>* Filtro para buscar solo el borde en [mm]</c>
<c>* Variables de  valor constante</c>
<l>Altura_Pallet:= 600</l>
<l>Distancia_camara_Piso_Pallet:=2440</l>
<l>Rango_Seguridad:=200</l>
<l>Rango_posible_borde_pallet:=Distancia_camara_Piso_Pallet-Altura_Pallet</l>
<l>* ########################################################</l>
<l>try   </l>
<l>    Get_ObjectModel3D_Util (Z, X, Y, ImgLeftCamera_Esq, Rango_posible_borde_pallet, Rango_Seguridad, ObjectModel3D_Borde_Pallet)</l>
<l>catch (Exception)</l>
<l>    dev_get_exception_data (Exception, 'error_msg', ErrorMsg0)</l>
<l>    dev_get_exception_data (Exception, 'procedure', ErrorMsg1)</l>
<l>    dev_get_exception_data (Exception, 'operator', ErrorMsg2)</l>
<l>    dev_get_exception_data (Exception, 'program_line', ErrorMsg3)</l>
<c>    </c>
<l>    MensajeError:=ErrorMsg0+' IN '+ErrorMsg1+' IN FUNTION '+ErrorMsg2+' IN LINE '+ErrorMsg3</l>
<l>*     throw (MensajeError)</l>
<c>    </c>
<l>* #### Envio data de estado ###############################</l>
<l>    Procesando:=0</l>
<l>    Estado:=5</l>
<l>    Resultado:=2</l>
<l>    Send_Data_Proceso (Vector_Estado_Fx, SerialHandle, Estado, Resultado, Procesando)</l>
<l>* ########################################################    </l>
<l>    return()</l>
<l>endtry</l>
<c></c>
<c>******************************************************************************************************************************</c>
<l>Visualizar_3D ([ObjectModel3D_Borde_Pallet,Pallet_3D_Esquina,Escena3D_RAW], Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, [], [], [], PoseOut1)</l>
<c>******************************************************************************************************************************</c>
<c></c>
<c></c>
<c>***************************************************</c>
<c>* 2.2 Busco la esquina del palelt con SFM</c>
<c>*</c>
<c>* Parametros de control</c>
<c>***************************************************</c>
<l>Sampling:=0.05</l>
<l>Sampling_Find := Sampling</l>
<l>Keypoint := 1</l>
<l>MinScore := 0.1</l>
<l>N_matches := 1</l>
<l>SFM:=SFM_Pallet</l>
<l>Escena3D:=ObjectModel3D_Borde_Pallet</l>
<l>Objeto3D:=Pallet_3D_Esquina</l>
<c>**************************************************</c>
<l>* #### Envio data de estado #####################################</l>
<l>Procesando:=1</l>
<l>Estado:=6</l>
<l>Resultado:=1</l>
<l>Send_Data_Proceso (Vector_Estado_Fx, SerialHandle, Estado, Resultado, Procesando)</l>
<l>* ############################################################### </l>
<c></c>
<c></c>
<l>Find_Entity_3D (N_matches, SFM, Escena3D, Sampling_Find, Keypoint, MinScore,Objeto3D, \
                PoseMLS, ScoreMLS, \
                Pose_Refinada, Score_Refinado, SurfaceMatchingResultID1, \
                Posicion3D_Objeto, Posicion3D_Objeto_REFIN, Obj_Detectado_EsquinaPallets)</l>
<c></c>
<c>*******************************************************</c>
<c>* Envio informacion de la esquina encontrada al Robot</c>
<c>*******************************************************</c>
<l>if (Obj_Detectado_EsquinaPallets)</l>
<l>    Visualizar_3D ( [ObjectModel3D_Borde_Pallet,Posicion3D_Objeto_REFIN,Escena3D_RAW], Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, [], [], [], PoseOut1)</l>
<c>    </c>
<c>    </c>
<c>*******************************************************  </c>
<c> </c>
<c>    </c>
<c>    </c>
<l>* ############### GUARDAR  POSICION ESQUINA REFERENTE A LA BASE ####################################</l>
<l>* ### Debo conocer la transformada</l>
<l>* ### Guardar la posicion de la camara al NULLFRAME del robot.</l>
<l>* ###################################################################################################   </l>
<c>   </c>
<c>********  ----&gt; Pendiente &lt;------ ********************    </c>
<c></c>
<l>    Save_Pose_Palle (SerialHandle, Pose_Refinada, N_Pallet_to_Scan, Pose_Robot)</l>
<c></c>
<l>* ###################################################################################################    </l>
<c>    </c>
<c>    * Enviar datos al Robot de Posicion de la esquia del pallet respecto a la brida</c>
<c>    * Es necesario convertir la coordenada  </c>
<l>    Send_Data_To_Robot (Pose_Refinada, SerialHandle)  </l>
<l>    Get_ObjInBasePose (Pose_Refinada, Pose_Robot, ObjInBasePose)</l>
<c>    </c>
<l>* ###################################################################################################    </l>
<c>    </c>
<c>   </c>
<l>else</l>
<c>    ********************************</c>
<c>    * Enviar por ETHERNETIP</c>
<c>    ********************************</c>
<c>    </c>
<l>* #### Envio data de estado ############################################################################</l>
<l>    Procesando:=0</l>
<l>    Estado:=7</l>
<l>    Resultado:=2</l>
<l>    Send_Data_Proceso (Vector_Estado_Fx, SerialHandle, Estado, Resultado, Procesando)</l>
<l>* #######################################################################################################</l>
<c>    </c>
<c>    </c>
<l>    return()</l>
<c>    </c>
<l>endif</l>
<c></c>
<c></c>
<l>* ####################################################</l>
<l>* ##### ROTO EL ROI 3D ###############################</l>
<l>* ####################################################</l>
<l>Rototate_ROI (Pose_Refinada, ROI3D_rotate, Escena3D_RAW, Parametros_Visualizacion, Valores_Visualizacion, \
              Visualizar3D, Vector_Segmento, Pose_Segmentos, ROI3D_rotate)</l>
<l>* ####################################################</l>
<c></c>
<c></c>
<l>* ####################################################################</l>
<l>* ####################################################################</l>
<l>* ################# BUSQUEDA DE CORES EN EL PALLET ###################</l>
<l>* ####################################################################</l>
<l>* ####################################################################</l>
<c>* 3.- Encuentro el orden y los segementos en que estan distribuidos los cores en el applet</c>
<c> </c>
<l>Get_Vector_Entidades (Vector_ID_Core_by_Segment_Pallet, Vector_Entidades_Segmento)</l>
<c></c>
<c></c>
<l>try</l>
<c>    </c>
<c>    </c>
<c>    *********************************************************</c>
<c>    * ROI 3D sectorizado de cada elemento</c>
<c>    * Busco de manera sectorizada cara core en el pallet</c>
<c>    *********************************************************</c>
<c>    * Estructura de vector</c>
<l>* ############################</l>
<l>* ### CORE ## Existencia #####</l>
<l>* ############################</l>
<l>    Vector_Existencia_Core:={{[]}}</l>
<l>    Vector_Existencia_Core.at(0).at(0):='CORE'</l>
<l>    Vector_Existencia_Core.at(0).at(1):='Existencia'</l>
<c>    </c>
<l>* #### Envio data de estado ########################</l>
<l>    Procesando:=1</l>
<l>    Estado:=8</l>
<l>    Resultado:=1</l>
<l>    Send_Data_Proceso (Vector_Estado_Fx, SerialHandle, Estado, Resultado, Procesando)</l>
<l>* ################################################## </l>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    Find_Sector_Core (Vector_ID_Core_by_Segment_Pallet, \
                      Vector_Entidades_Segmento, Path_CORE_ID, Path_3D_Segmentos, Path_SFM_Segmentos, \
                      ROI3D_rotate, Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D,\
                      Vector_Segmento, Escena3D_RAW, Sampling, SerialHandle, Vector_Existencia_Core, \
                      Vector_Estado_Fx, Vector_Existencia_Core_New)</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>* #### Envio data de estado ########################</l>
<l>    Procesando:=1</l>
<l>    Estado:=13</l>
<l>    Resultado:=0</l>
<l>    Send_Data_Proceso (Vector_Estado_Fx, SerialHandle, Estado, Resultado, Procesando)</l>
<l>* ################################################## </l>
<c>    </c>
<c>    </c>
<c>    *Escritura de Vector_Existencia_Core_New</c>
<c></c>
<l>    Variable_PLC_Existencia:='_EV1_I_Pallet'+N_Pallet_to_Scan+'ZValid.'</l>
<c>    </c>
<l>    for j := 1 to Vector_Existencia_Core_New.length()-1 by 1</l>
<l>        Estado_SubProceso:=false</l>
<l>        Tag_Destino:=Variable_PLC_Existencia+(j)</l>
<l>        Valor_Variable:=Vector_Existencia_Core_New.at(j).at(1)</l>
<l>        Send_EthernetIP_Data (Tag_Destino, Valor_Variable, SerialHandle)</l>
<c>        </c>
<l>    endfor</l>
<c>    </c>
<c>  * #### Envio data de estado ########################</c>
<l>    Procesando:=0</l>
<l>    Estado:=13</l>
<l>    Resultado:=1</l>
<l>    Send_Data_Proceso (Vector_Estado_Fx, SerialHandle, Estado, Resultado, Procesando)</l>
<l>* ################################################## </l>
<c></c>
<c>    </c>
<l>catch (Exception)</l>
<l>    dev_get_exception_data (Exception, 'error_msg',    ErrorMsg0)</l>
<l>    dev_get_exception_data (Exception, 'procedure',    ErrorMsg1)</l>
<l>    dev_get_exception_data (Exception, 'operator',     ErrorMsg2)</l>
<l>    dev_get_exception_data (Exception, 'program_line', ErrorMsg3)</l>
<c>    </c>
<l>    MensajeError:=ErrorMsg0 + ' IN '+ErrorMsg1+' IN FUNTION '+ErrorMsg2+' IN LINE '+ErrorMsg3</l>
<l>    throw (MensajeError)</l>
<l>    Estado_SubProceso:=false</l>
<c>    </c>
<c>    </c>
<l>* #### Envio data de estado ########################</l>
<l>    Procesando:=1</l>
<l>    Estado:=6</l>
<l>    Resultado:=1</l>
<l>    Send_Data_Proceso (Vector_Estado_Fx, SerialHandle, Estado, Resultado, Procesando)</l>
<l>* ################################################## </l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    return()</l>
<l>endtry</l>
<c></c>
<c></c>
<c></c>
<c>*****************************************</c>
<c>*Borrar 3D</c>
<l>clear_object_model_3d ([ROI3D_rotate,ROI3D_NullFrame,Escena3D_RAW,ObjectModel3D_Borde_Pallet])</l>
<l>return ()</l>
</body>
<docu id="Get_Core_Presence_In_Pallet">
<parameters>
<parameter id="Escena3D_RAW"/>
<parameter id="Estado_SubProceso"/>
<parameter id="ImgLeftCamera_Esq"/>
<parameter id="N_Pallet_to_Scan"/>
<parameter id="Pallet_3D_Esquina"/>
<parameter id="Path_3D_Segmentos"/>
<parameter id="Path_CORE_ID"/>
<parameter id="Path_SFM_Segmentos"/>
<parameter id="Pose_Robot"/>
<parameter id="SFM_Pallet"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet"/>
<parameter id="Visualizar3D"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Cores_BD">
<interface>
<oc>
<par name="Path_CORE_ID" base_type="ctrl" dimension="0"/>
<par name="Path_SFM_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_3D_Segmentos" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c>* Cores en BD</c>
<c></c>
<c></c>
<c></c>
<l>Path_CORE_ID:=['BNT',\
               'CLR',\
               'HWEA',\
               'BUF']</l>
<c></c>
<c>** FALSEANDO ENTREGA DE INFO **</c>
<l>Path:='D:/AI/Vision Artificial/4.-MAGOTTEAUX/SFM_CORES/'</l>
<c></c>
<l>list_files ('D:/AI/Vision Artificial/4.-MAGOTTEAUX/SFM_CORES', 'files', Files)</l>
<c></c>
<l>for j := 0 to |Path_CORE_ID|-1 by 1</l>
<l> Path_SFM_Segmentos[j]:=Path+Path_CORE_ID[j]+'/'+Path_CORE_ID[j]+'_SFM.sfm'</l>
<l> Path_3D_Segmentos[j]:=Path+Path_CORE_ID[j]+'/'+Path_CORE_ID[j]+'_3D.stl'</l>
<l>endfor</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Cores_BD">
<parameters>
<parameter id="Path_3D_Segmentos"/>
<parameter id="Path_CORE_ID"/>
<parameter id="Path_SFM_Segmentos"/>
</parameters>
</docu>
</procedure>
<procedure name="Visualizar_3D">
<interface>
<ic>
<par name="Modelo3D" base_type="ctrl" dimension="0"/>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Visualizar" base_type="ctrl" dimension="0"/>
<par name="PoseIn" base_type="ctrl" dimension="0"/>
<par name="Title" base_type="ctrl" dimension="0"/>
<par name="Label" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Pose" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>if (Visualizar)</l>
<l>    visualize_object_model_3d (200000, [Modelo3D], [], [], Parametros_Visualizacion, Valores_Visualizacion, Title, Label, [], Pose)</l>
<l>endif</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Visualizar_3D">
<parameters>
<parameter id="Label"/>
<parameter id="Modelo3D"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="Pose"/>
<parameter id="PoseIn"/>
<parameter id="Title"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="Visualizar"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_EthernetIP_Data">
<interface>
<ic>
<par name="Tag_Destino" base_type="ctrl" dimension="0"/>
<par name="Variable" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c></c>
<c></c>
<c></c>
<l>Peticion     := 'Escritura'</l>
<l>Variable_OPC := Tag_Destino</l>
<c></c>
<l>Data:=Peticion+';'+Variable_OPC+';'+Variable</l>
<c></c>
<l>write_serial (SerialHandle, ords(Data))</l>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Send_EthernetIP_Data">
<parameters>
<parameter id="SerialHandle"/>
<parameter id="Tag_Destino"/>
<parameter id="Variable"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_SFM_STL">
<interface>
<ic>
<par name="Vector_ID_Core_by_Segment_Pallet" base_type="ctrl" dimension="0"/>
<par name="Path_CORE_ID" base_type="ctrl" dimension="0"/>
<par name="Path_3D_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_SFM_Segmentos" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ObjectModel3D_Core_Pallet" base_type="ctrl" dimension="0"/>
<par name="SFM_Core_Pallet" base_type="ctrl" dimension="0"/>
<par name="Estado_Get_SFM_STL" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Estado_Get_SFM_STL:=false</l>
<l>try</l>
<c>    </c>
<l>    Core_Find_by_User := Vector_ID_Core_by_Segment_Pallet</l>
<c></c>
<l>if (Core_Find_by_User='')</l>
<l>    Estado_Get_SFM_STL:=false</l>
<l>    return()</l>
<l>endif</l>
<c></c>
<l>Index_Core:=[]</l>
<l>Core_Get:=false</l>
<c></c>
<l>for Index_Core_find := 0 to |Path_CORE_ID|-1 by 1</l>
<c>    </c>
<l>    if (Path_CORE_ID[Index_Core_find] = Core_Find_by_User)</l>
<l>        Index_Core :=  Index_Core_find  </l>
<l>        Core_Get:=true</l>
<l>    endif</l>
<l>endfor</l>
<c></c>
<l>if (not Core_Get)</l>
<c>    </c>
<l>    throw ('CORE NO EXISTE EN BD')</l>
<c>    </c>
<c></c>
<c>    </c>
<l>    return()</l>
<c>    </c>
<l>endif</l>
<c></c>
<c></c>
<c>    </c>
<l>    read_object_model_3d (Path_3D_Segmentos[Index_Core], 1, [], [], ObjectModel3D_Core_Pallet, Status)</l>
<l>    read_surface_model (Path_SFM_Segmentos[Index_Core], SFM_Core_Pallet)</l>
<c>    </c>
<l>    Estado_Get_SFM_STL:=true</l>
<c>    </c>
<l>catch (Exception)</l>
<c></c>
<c>    </c>
<l>    throw ('NO se pudo leer el modelo 3D o el SFM de ' + Core_Find_by_User)</l>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="Get_SFM_STL">
<parameters>
<parameter id="Estado_Get_SFM_STL"/>
<parameter id="ObjectModel3D_Core_Pallet"/>
<parameter id="Path_3D_Segmentos"/>
<parameter id="Path_CORE_ID"/>
<parameter id="Path_SFM_Segmentos"/>
<parameter id="SFM_Core_Pallet"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet"/>
</parameters>
</docu>
</procedure>
<procedure name="Read_EthernetIP_Data">
<interface>
<ic>
<par name="Tag_Lectura" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Variable" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<c></c>
<l>Peticion     := 'Lectura'</l>
<l>Variable_OPC := Tag_Lectura</l>
<c></c>
<l>Data:=Peticion+';'+Variable_OPC</l>
<c></c>
<l>write_serial (SerialHandle, ords(Data))</l>
<c></c>
<c>*Numero de caracteres a leer</c>
<l>read_serial (SerialHandle, 20, Nchar)</l>
<l>Nchar:= chrt(Nchar)</l>
<l>tuple_number (Nchar, Variable)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Read_EthernetIP_Data">
<parameters>
<parameter id="SerialHandle"/>
<parameter id="Tag_Lectura"/>
<parameter id="Variable"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Vector_Info_Cores_byUser">
<interface>
<ic>
<par name="N_pallet" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_1" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_2" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_3" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_4" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_5" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_6" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Vector_ID_Core_by_Segment_Pallet" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>switch (N_pallet)</l>
<l>case 1:</l>
<l>    Vector_ID_Core_by_Segment_Pallet:=Vector_ID_Core_by_Segment_Pallet_1</l>
<l>    break</l>
<l>case 2:</l>
<l>    Vector_ID_Core_by_Segment_Pallet:=Vector_ID_Core_by_Segment_Pallet_2</l>
<l>    break</l>
<l>case 3:</l>
<l>    Vector_ID_Core_by_Segment_Pallet:=Vector_ID_Core_by_Segment_Pallet_3</l>
<l>    break</l>
<l>case 4:</l>
<l>    Vector_ID_Core_by_Segment_Pallet:=Vector_ID_Core_by_Segment_Pallet_4</l>
<l>    break</l>
<l>case 5:</l>
<l>    Vector_ID_Core_by_Segment_Pallet:=Vector_ID_Core_by_Segment_Pallet_5</l>
<l>    break</l>
<c>    </c>
<l>case 6:</l>
<l>    Vector_ID_Core_by_Segment_Pallet:=Vector_ID_Core_by_Segment_Pallet_6</l>
<l>    break    </l>
<l>endswitch</l>
<l>return ()</l>
</body>
<docu id="Get_Vector_Info_Cores_byUser">
<parameters>
<parameter id="N_pallet"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_1"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_2"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_3"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_4"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_5"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_6"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Vector_Entidades">
<interface>
<ic>
<par name="Vector_ID_Core_by_Segment_Pallet" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Vector_Entidades_Segmento" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c>*0.1.- identifico cuantos Cores existen por segmento</c>
<c></c>
<c></c>
<l>N_Cores_Segmento:=[]</l>
<l>Vector_N_Elementos:=[]</l>
<l>idx_aux:=0</l>
<l>for Index_Core_Seg := 0 to |Vector_ID_Core_by_Segment_Pallet|-1 by 1</l>
<c>    </c>
<l>    Core_Find_by_User := Vector_ID_Core_by_Segment_Pallet[Index_Core_Seg]</l>
<c>    </c>
<l>    tuple_split (Core_Find_by_User, ';', Aux)</l>
<l>    N_Cores_Segmento[Index_Core_Seg]:=|Aux|</l>
<c>    </c>
<c>    </c>
<l>    for Index_temp := 0 to |Aux|-1 by 1</l>
<c>        </c>
<l>        Vector_N_Elementos[idx_aux]:=Aux[Index_temp]</l>
<l>        idx_aux:=idx_aux+1</l>
<l>    endfor</l>
<c>    </c>
<l>endfor</l>
<c></c>
<c></c>
<c>*0.2.- identifico cuantos Cores existen y cuantas veces se repiten</c>
<l>Vector_Entidades:=[]</l>
<l>idx_Vector_Entidades:=0</l>
<l>for Index_temp := 0 to |Vector_N_Elementos|-1 by 1</l>
<l>    if(Vector_N_Elementos[Index_temp]='')</l>
<l>        continue</l>
<l>    endif</l>
<l>    N_core:=1</l>
<l>    Core_To_Find:=Vector_N_Elementos[Index_temp]</l>
<l>    Vector_N_Elementos[Index_temp]:=''</l>
<c>    </c>
<l>    for Index_temp_b := 0 to |Vector_N_Elementos|-1 by 1</l>
<l>        if (Core_To_Find=Vector_N_Elementos[Index_temp_b])</l>
<l>            N_core:=N_core+1  </l>
<l>            Vector_N_Elementos[Index_temp_b]:=''</l>
<l>        endif</l>
<l>    endfor</l>
<c>    </c>
<c>    </c>
<l>    Vector_Entidades[idx_Vector_Entidades]:=Core_To_Find+';'+N_core</l>
<l>    idx_Vector_Entidades:=idx_Vector_Entidades+1</l>
<l>endfor</l>
<c></c>
<c>*0.3 Busco los cores y en que segmento se encuentran</c>
<c></c>
<l>Vector_Entidades_Segmento:=[]</l>
<l>for Index_temp := 0 to |Vector_Entidades|-1 by 1</l>
<c>    </c>
<l>    Aux:=Vector_Entidades[Index_temp]</l>
<l>    tuple_split (Aux, ';', Aux)</l>
<l>    Entidad:=Aux[0]</l>
<c>    </c>
<l>    Puntero_segmentos:=''</l>
<l>    for Index_temp_b := 0 to |Vector_ID_Core_by_Segment_Pallet|-1 by 1      </l>
<l>        tuple_strrstr (Vector_ID_Core_by_Segment_Pallet[Index_temp_b], Entidad, CoreExist)</l>
<l>        if (CoreExist &gt;=0)</l>
<l>            Puntero_segmentos:=Puntero_segmentos+';'+Index_temp_b</l>
<l>        endif</l>
<c>        </c>
<l>    endfor</l>
<c>    </c>
<l>    Vector_Entidades_Segmento[Index_temp]:=Entidad+Puntero_segmentos</l>
<l>    tuple_split (Vector_Entidades_Segmento[Index_temp], ';', Aux)</l>
<l>endfor</l>
<l>return ()</l>
</body>
<docu id="Get_Vector_Entidades">
<parameters>
<parameter id="Vector_Entidades_Segmento"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet"/>
</parameters>
</docu>
</procedure>
<procedure name="Find_Sector_Core">
<interface>
<ic>
<par name="Vector_ID_Core_by_Segment_Pallet" base_type="ctrl" dimension="0"/>
<par name="Vector_Entidades_Segmento" base_type="ctrl" dimension="0"/>
<par name="Path_CORE_ID" base_type="ctrl" dimension="0"/>
<par name="Path_3D_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_SFM_Segmentos" base_type="ctrl" dimension="0"/>
<par name="ROI3D_rotate" base_type="ctrl" dimension="0"/>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Visualizar3D" base_type="ctrl" dimension="0"/>
<par name="Vector_Segmento" base_type="ctrl" dimension="0"/>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
<par name="Sampling" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Vector_Existencia_Core" base_type="ctrl" dimension="2"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
</ic>
<oc>
<par name="Vector_Existencia_Core_New" base_type="ctrl" dimension="2"/>
</oc>
</interface>
<body>
<l>N_divisiones_Pallet:=9</l>
<l>N_divisiones_Pallet:=|Vector_ID_Core_by_Segment_Pallet|</l>
<c></c>
<l>dev_inspect_ctrl(Vector_Existencia_Core)</l>
<l>for Index := 0 to N_divisiones_Pallet-1 by 1</l>
<l>    Vector_Existencia_Core.at(Index+1).at(0):=''</l>
<l>    Vector_Existencia_Core.at(Index+1).at(1):=false</l>
<c>    </c>
<l>endfor</l>
<c></c>
<c></c>
<c></c>
<l>* #########################################</l>
<c>**##### REVISAR #########################</c>
<l>* ## Si Vector_Entidades_Segmento funciona bien como limite del for</l>
<c></c>
<l>Largo:=|Vector_Entidades_Segmento|</l>
<c></c>
<c></c>
<l>try</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    for N_Entidad := 0 to N_divisiones_Pallet-1 by 1</l>
<c>        </c>
<c>        </c>
<l>        tuple_split (Vector_Entidades_Segmento[N_Entidad], ';', Aux)</l>
<l>        Entidad_To_Find:=Aux[0]</l>
<l>        N_Sectores_To_Find:=|Aux|</l>
<l>        ROI3D:=[]</l>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        ********************************************</c>
<c>        * Leo el SFM y STL del Core</c>
<c>        ********************************************</c>
<c>        </c>
<l>* #### Envio data de estado ########################</l>
<l>        Procesando:=1</l>
<l>        Estado:=9</l>
<l>        Resultado:=1</l>
<l>        Send_Data_Proceso (Vector_Estado_Fx, SerialHandle, Estado, Resultado, Procesando)</l>
<l>* ################################################## </l>
<c>        </c>
<c>        </c>
<l>        if (Entidad_To_Find ==' ')</l>
<l>            Vector_Existencia_Core.at(N_Entidad+1).at(0):=Entidad_To_Find</l>
<l>            Vector_Existencia_Core.at(N_Entidad+1).at(1):=false</l>
<c>            </c>
<l>        else</l>
<c>            </c>
<l>            Get_SFM_STL (Entidad_To_Find, Path_CORE_ID, Path_3D_Segmentos, Path_SFM_Segmentos, ObjectModel3D_Core_Pallet, SFM_Core_Pallet,\
                         Estado_Get_SFM_STL)</l>
<c>            </c>
<c>            </c>
<l>            for j := 1 to N_Sectores_To_Find-1 by 1</l>
<l>                N_Roi:=Aux[j]</l>
<l>                tuple_number (Aux[j], N_Roi)</l>
<l>                copy_object_model_3d (ROI3D_rotate[N_Roi], 'all', ROI3D_aux)</l>
<l>                ROI3D:=[ROI3D,ROI3D_aux]</l>
<c>                </c>
<l>            endfor</l>
<l>            Get_ROI_3D (ROI3D, Escena3D_RAW, Modelo_3D_ROI)</l>
<c>            </c>
<c>            </c>
<l>            Visualizar_3D ( [ ROI3D,Escena3D_RAW], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Visualizar3D, [], [],[], PoseOut1)</l>
<l>            Visualizar_3D ( [Modelo_3D_ROI], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Visualizar3D, [], [], [], PoseOut1)</l>
<c>            </c>
<c>            ***************************************************************</c>
<c>            *Filtro la altura maxima</c>
<c>            * Utilizo esto para elminar el piso de la escena y evitar errores</c>
<l>            Altura_Maxima_camara_Piso_Pallet:=2400</l>
<c>            ***************************************************************</c>
<l>            Set_Max_Altura_Model3D (Modelo_3D_ROI, Altura_Maxima_camara_Piso_Pallet, Modelo_3D_ROI_Thres)</l>
<c>            </c>
<c>            </c>
<l>            Visualizar_3D ([Modelo_3D_ROI_Thres], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Visualizar3D, [], [], [], PoseOut1)      </l>
<l>            Visualizar_3D ([ObjectModel3D_Core_Pallet], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Visualizar3D, [], [], [], PoseOut1)</l>
<c>            </c>
<l>            N_Model_To_Find:=|Modelo_3D_ROI_Thres|</l>
<l>            if (|Modelo_3D_ROI_Thres|&gt;1)</l>
<c>                </c>
<l>                union_object_model_3d (Modelo_3D_ROI_Thres, 'points_surface', Modelo_3D_ROI_Thres)</l>
<l>                Visualizar_3D ([Modelo_3D_ROI_Thres], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Visualizar3D, [], [], [], PoseOut1)</l>
<c>                </c>
<l>            endif</l>
<c>            </c>
<c>            </c>
<c>            </c>
<c>            </c>
<c>            </c>
<c>            </c>
<c>            </c>
<c>            ****************************</c>
<c>            * Parametros de control</c>
<c>            ****************************</c>
<l>            Sampling_Find := 0.05</l>
<l>            Keypoint := 1</l>
<l>            MinScore := 0.01</l>
<l>            N_matches := N_Model_To_Find</l>
<l>            SFM:=SFM_Core_Pallet</l>
<l>            Escena3D:=Modelo_3D_ROI_Thres</l>
<l>            Mod_3D_Objeto:=ObjectModel3D_Core_Pallet</l>
<c>            </c>
<l>            Visualizar_3D ([Escena3D,Mod_3D_Objeto], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Visualizar3D, [], [], [], PoseOut1)</l>
<c>            </c>
<c>            ****************************</c>
<l>* #### Envio data de estado ########################</l>
<l>            Procesando:=1</l>
<l>            Estado:=10</l>
<l>            Resultado:=1</l>
<l>            Send_Data_Proceso (Vector_Estado_Fx, SerialHandle, Estado, Resultado, Procesando)</l>
<l>* ################################################## </l>
<c>            </c>
<c>            </c>
<l>            Find_Entity_3D (N_matches, SFM, Escena3D, Sampling_Find, Keypoint, MinScore,Mod_3D_Objeto, \
                            PoseMLS, ScoreMLS, \
                            Pose_Refinada, Score_Refinado, SurfaceMatchingResultID1, \
                            Posicion3D_Objeto, Posicion3D_Objeto_REFIN, Obj_Detectado)</l>
<c>            </c>
<c>            </c>
<l>            if ( Obj_Detectado)</l>
<c>                </c>
<l>* #### Envio data de estado ########################</l>
<l>                Procesando:=1</l>
<l>                Estado:=11</l>
<l>                Resultado:=1</l>
<l>                Send_Data_Proceso (Vector_Estado_Fx, SerialHandle, Estado, Resultado, Procesando)</l>
<l>* ################################################## </l>
<c>                </c>
<c>                </c>
<l>                Visualizar_3D ([Modelo_3D_ROI,Posicion3D_Objeto,Escena3D_RAW], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Visualizar3D, [], [], [], PoseOut1)</l>
<c>                </c>
<l>                Vector_Existencia_Core.at(N_Entidad+1).at(0):=Entidad_To_Find</l>
<l>                Vector_Existencia_Core.at(N_Entidad+1).at(1):=true</l>
<l>            else</l>
<c>                </c>
<l>* #### Envio data de estado ########################</l>
<l>                Procesando:=1</l>
<l>                Estado:=12</l>
<l>                Resultado:=1</l>
<l>                Send_Data_Proceso (Vector_Estado_Fx, SerialHandle, Estado, Resultado, Procesando)</l>
<l>* ################################################## </l>
<l>                Vector_Existencia_Core.at(N_Entidad+1).at(0):=Entidad_To_Find</l>
<l>                Vector_Existencia_Core.at(N_Entidad+1).at(1):=false</l>
<l>            endif</l>
<l>            clear_object_model_3d([ROI3D,Modelo_3D_ROI,ObjectModel3D_Core_Pallet])</l>
<l>        endif</l>
<c>          </c>
<l>    endfor</l>
<l>catch (Exception)</l>
<l>  sdf:=123  </l>
<c>    </c>
<l>endtry</l>
<l>Vector_Existencia_Core_New:=Vector_Existencia_Core</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Find_Sector_Core">
<parameters>
<parameter id="Escena3D_RAW"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="Path_3D_Segmentos"/>
<parameter id="Path_CORE_ID"/>
<parameter id="Path_SFM_Segmentos"/>
<parameter id="ROI3D_rotate"/>
<parameter id="Sampling"/>
<parameter id="SerialHandle"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="Vector_Entidades_Segmento"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="Vector_Existencia_Core"/>
<parameter id="Vector_Existencia_Core_New"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet"/>
<parameter id="Vector_Segmento"/>
<parameter id="Visualizar3D"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_Pulse_EthernetIp_Data">
<interface>
<ic>
<par name="Tag_Destino" base_type="ctrl" dimension="0"/>
<par name="Variable_On" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Variable_Off" base_type="ctrl" dimension="0"/>
<par name="Time" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>    Send_EthernetIP_Data (Tag_Destino, Variable_On, SerialHandle)</l>
<l>    wait_seconds(Time)</l>
<l>   Send_EthernetIP_Data (Tag_Destino, Variable_Off, SerialHandle)</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Send_Pulse_EthernetIp_Data">
<parameters>
<parameter id="SerialHandle"/>
<parameter id="Tag_Destino"/>
<parameter id="Time"/>
<parameter id="Variable_Off"/>
<parameter id="Variable_On"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Vector_Estados">
<interface>
<oc>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
</oc>
</interface>
<body>
<l>Vector_Estado_Fx := { {[]}}</l>
<l>Vector_Estado_Fx.at(0).at(0) := 'Valor Estado'</l>
<l>Vector_Estado_Fx.at(0).at(1) := 'Codificacion'</l>
<c>* </c>
<l>Nestado := 1</l>
<c>* ESTADO 1</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'Adquiriendo fotografia'</l>
<c>* </c>
<c>* </c>
<l>Nestado := 2</l>
<c>* ESTADO 2</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'Adquiriendo informacion del usuario donde se indica la distribucion de cada core en los pallets'</l>
<c>* </c>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 3</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'Analizando Pallet'</l>
<c>* </c>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 4</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'Fallo en adquisición de imagen'</l>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 5</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'Fallo en ROI Pallet'</l>
<c>* </c>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 6</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'Buscando esquina del pallet'</l>
<l>Nestado := Nestado+1</l>
<c>* </c>
<c>* ESTADO 7</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'No se detecto Esquina de Pallet'</l>
<c>* </c>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 8</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' Busco de manera sectorizada cada core en el pallet'</l>
<c>* </c>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 9</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'Leyendo STl del Core'</l>
<c>* </c>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 10</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'Buscando core en el segmento del pallet'</l>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 11</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'Core en el segmento del pallet Detectado'</l>
<c>* </c>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 12</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'No se detecto Core en el segmento del pallet'</l>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 13</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'Escritura de existencia de cores de Pallet solicitado'</l>
<c>* </c>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 14</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'Detección de patrón Exitoso'</l>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 15</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'No se a logrado extraer el patrón'</l>
<c>* </c>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 16</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'Buscando Patrón'</l>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 17</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'Enviando coordenadas de patrón al Robot'</l>
<c>* </c>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 18</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'Fin GET_PATRON_POSE'</l>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 19</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ''</l>
<c>* </c>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 20</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'null'</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 21</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ''</l>
<c>* </c>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 22</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ''</l>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 23</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ''</l>
<c>* </c>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 24</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ''</l>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 25</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ''</l>
<c>* </c>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 26</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'null'</l>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 27</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ''</l>
<c>* </c>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 28</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'null'</l>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 29</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ''</l>
<c>* </c>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 30</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'null'</l>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Vector_Estados">
<parameters>
<parameter id="Vector_Estado_Fx"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_Estado_Subproceso">
<interface>
<ic>
<par name="Variable_On" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Tag_Destino" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c> </c>
<c>    *Tiempo en segundos</c>
<l>    Time:=0.8</l>
<l>    Variable_Off:=0</l>
<l>    Send_Pulse_EthernetIp_Data (Tag_Destino, Variable_On, SerialHandle, Variable_Off, Time)</l>
<l>return ()</l>
</body>
<docu id="Send_Estado_Subproceso">
<parameters>
<parameter id="SerialHandle"/>
<parameter id="Tag_Destino"/>
<parameter id="Variable_On"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Core_Presence">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="Vector_ID_Core_by_Segment_Pallet_1" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_2" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_3" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_4" base_type="ctrl" dimension="0"/>
<par name="Path_SFM_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_3D_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_CORE_ID" base_type="ctrl" dimension="0"/>
<par name="N_Pallet_to_Scan" base_type="ctrl" dimension="0"/>
<par name="SFM_Pallet" base_type="ctrl" dimension="0"/>
<par name="Pallet_3D_Esquina" base_type="ctrl" dimension="0"/>
<par name="NxLib_1" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_5" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_6" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>Parametros_Visualizacion:=['colored','disp_pose','point_size']</l>
<l>Valores_Visualizacion:= [  12  ,'true',1]</l>
<c></c>
<l>Parametros_Visualizacion:=['disp_pose','color_attrib','lut','disp_lines','point_size']</l>
<l>Valores_Visualizacion:= ['true','coord_z','rainbow','true',1]</l>
<c></c>
<c></c>
<c>* Reseteo las variable de resultado</c>
<l>* #### Envio data de estado ########################</l>
<l>Estado:=1</l>
<l>Resultado:=0</l>
<l>Procesando:=1</l>
<l>Send_Data_Proceso (Vector_Estado_Fx, SerialHandle, Estado, Resultado, Procesando)</l>
<l>* ##################################################</l>
<c></c>
<c></c>
<c></c>
<c>**** -&gt; </c>
<l>* FALSEO_ADQ_FOTO (ReferenciaEsquina, ObjectSelected, X, Y, Z, SerialHandle, Escena3D_RAW)</l>
<c></c>
<c></c>
<c></c>
<c>*****************************************************************************************************************************</c>
<c>************  Capturo Imagenes **********************************************************************************************</c>
<l>Get_Pallet_Model (Objeto_0, Objeto_1, Objeto_2, Objeto_3, Zobj1, Xobj1, Yobj1, Img_Left_Esquina, NxLib_1, Camera_1, Vector_Estado_Fx, SerialHandle, N_Pallet_to_Scan, Pose_Robot, Escena3D_RAW)</l>
<c></c>
<l>Visualizar_3D ([Escena3D_RAW], Parametros_Visualizacion, Valores_Visualizacion, 1, [], [], [], PoseOut1)</l>
<c>******************************************************************************************************************************</c>
<c></c>
<c>*********************************************************************   </c>
<c></c>
<l>Vector_ID_Core_by_Segment_Pallet:=[]</l>
<c></c>
<l>* ################################################################################</l>
<c>*2. Adquiero informacion del usuario quien indica donde ira cada core en el pallet</c>
<l>* ################################################################################</l>
<c></c>
<l>* #### Envio data de estado ######################################################</l>
<l>Estado:=2</l>
<l>Resultado:=0</l>
<l>Procesando:=1</l>
<l>Send_Data_Proceso (Vector_Estado_Fx, SerialHandle, Estado, Resultado, Procesando)</l>
<l>* #################################################################################</l>
<c>* Selecciono el pallet del usuario</c>
<l>* #################################################################################</l>
<l>Get_Vector_Info_Cores_byUser (N_Pallet_to_Scan,\
                              Vector_ID_Core_by_Segment_Pallet_1, Vector_ID_Core_by_Segment_Pallet_2, Vector_ID_Core_by_Segment_Pallet_3, Vector_ID_Core_by_Segment_Pallet_4, Vector_ID_Core_by_Segment_Pallet_5, Vector_ID_Core_by_Segment_Pallet_6,\
                              Vector_ID_Core_by_Segment_Pallet)</l>
<c></c>
<c></c>
<l>* ###############################################################################</l>
<c>*3. Busco los cores del usuario Vector_ID_Core_by_Segment_Pallet en el pallet N_Pallet_to_Scan</c>
<l>* ###############################################################################</l>
<c></c>
<l>* #### Envio data de estado ########################</l>
<l>Estado:=3</l>
<l>Resultado:=0</l>
<l>Procesando:=1</l>
<l>Send_Data_Proceso (Vector_Estado_Fx, SerialHandle, Estado, Resultado, Procesando)</l>
<l>* ################################################## </l>
<c></c>
<c>* Creo el vector de existencia del bloque</c>
<c></c>
<c></c>
<c></c>
<l>Vector_Existencia_Core:={ { [] } }</l>
<l>Vector_Existencia_Core.at(0).at(0):='CORE'</l>
<l>Vector_Existencia_Core.at(0).at(1):='Existencia'</l>
<l>Visualizar3D:=true</l>
<l>Get_Core_Presence_In_Pallet (Zobj1, Xobj1, Yobj1, Img_Left_Esquina, Escena3D_RAW, Pose_Robot, N_Pallet_to_Scan, Path_SFM_Segmentos, Path_3D_Segmentos, SFM_Pallet, Pallet_3D_Esquina, Vector_ID_Core_by_Segment_Pallet, Path_CORE_ID, SerialHandle, Vector_Estado_Fx, Visualizar3D, Estado_SubProceso_Get_Core_Presence_In_Pallet)</l>
<c></c>
<c></c>
<c></c>
<l>* ######################################################################################</l>
<l>* #################### Fin Bloque 1 ####################################################</l>
<l>* ######################################################################################</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>* clear_object_model_3d([Escena3D_RAW])</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Core_Presence">
<parameters>
<parameter id="Camera_1"/>
<parameter id="N_Pallet_to_Scan"/>
<parameter id="NxLib_1"/>
<parameter id="Pallet_3D_Esquina"/>
<parameter id="Path_3D_Segmentos"/>
<parameter id="Path_CORE_ID"/>
<parameter id="Path_SFM_Segmentos"/>
<parameter id="SFM_Pallet"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_1"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_2"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_3"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_4"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_5"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_6"/>
</parameters>
</docu>
</procedure>
<procedure name="BD_Dinamica">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Vector_ID_Core_by_Segment_Pallet_1" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_2" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_3" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_4" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_5" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_6" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<l>Variable_BD := 'pallet_1'</l>
<l>Get_Pallet_BD (Variable_BD, SerialHandle, DataBD)</l>
<l>for Index := 0 to |DataBD|-1 by 1  </l>
<l>    Vector_ID_Core_by_Segment_Pallet_1[Index]:=DataBD[Index]</l>
<l>endfor</l>
<c></c>
<l>Variable_BD := 'pallet_2'</l>
<l>Get_Pallet_BD (Variable_BD, SerialHandle, DataBD)</l>
<l>for Index := 0 to |DataBD|-1 by 1  </l>
<l>    Vector_ID_Core_by_Segment_Pallet_2[Index]:=DataBD[Index]</l>
<l>endfor</l>
<c></c>
<l>Variable_BD := 'pallet_3'</l>
<l>Get_Pallet_BD (Variable_BD, SerialHandle, DataBD)</l>
<l>for Index := 0 to |DataBD|-1 by 1  </l>
<l>    Vector_ID_Core_by_Segment_Pallet_3[Index]:=DataBD[Index]</l>
<l>endfor</l>
<c></c>
<l>Variable_BD := 'pallet_4'</l>
<l>Get_Pallet_BD (Variable_BD, SerialHandle, DataBD)</l>
<l>for Index := 0 to |DataBD|-1 by 1  </l>
<l>    Vector_ID_Core_by_Segment_Pallet_4[Index]:=DataBD[Index]</l>
<l>endfor</l>
<c></c>
<l>Variable_BD := 'pallet_5'</l>
<l>Get_Pallet_BD (Variable_BD, SerialHandle, DataBD)</l>
<l>for Index := 0 to |DataBD|-1 by 1  </l>
<l>    Vector_ID_Core_by_Segment_Pallet_5[Index]:=DataBD[Index]</l>
<l>endfor</l>
<c></c>
<c></c>
<l>Variable_BD := 'pallet_6'</l>
<l>Get_Pallet_BD (Variable_BD, SerialHandle, DataBD)</l>
<l>for Index := 0 to |DataBD|-1 by 1  </l>
<l>    Vector_ID_Core_by_Segment_Pallet_6[Index]:=DataBD[Index]</l>
<l>endfor</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c>'</c>
<l>return ()</l>
</body>
<docu id="BD_Dinamica">
<parameters>
<parameter id="SerialHandle"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_1"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_2"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_3"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_4"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_5"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_6"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_Data_Proceso">
<interface>
<ic>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Estado" base_type="ctrl" dimension="0"/>
<par name="Resultado" base_type="ctrl" dimension="0"/>
<par name="Procesando" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c></c>
<l>* ##### Envio de Procesando  #######################</l>
<l>Estado_SubProceso:=Procesando </l>
<l>Tag_Destino:='_EV01_I_Procesando'</l>
<l>Valor_Variable:=Estado_SubProceso</l>
<l>Send_EthernetIP_Data (Tag_Destino, Valor_Variable, SerialHandle)</l>
<l>* #### Fin envio de Resultado ######################  </l>
<l>wait_seconds(0.1)</l>
<c></c>
<l>* ##### Envio de estado  #######################</l>
<l>Valor_Variable:=Vector_Estado_Fx.at(Estado).at(0)</l>
<l>Tag_Destino:='_EV01_I_Estado'</l>
<l>Send_Estado_Subproceso (Valor_Variable, SerialHandle, Tag_Destino)</l>
<l>* #### Fin envio de estado ######################  </l>
<l>wait_seconds(0.1)</l>
<c></c>
<l>* ##### Envio de Resultado  #######################</l>
<l>* # [1] = Bien [2] = falla</l>
<l>Tag_Destino:='_EV01_I_Resultado'</l>
<l>Variable_On:=Resultado</l>
<l>Send_Estado_Subproceso (Variable_On, SerialHandle, Tag_Destino)</l>
<l>* #### Fin envio de Resultado ######################  </l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Send_Data_Proceso">
<parameters>
<parameter id="Estado"/>
<parameter id="Procesando"/>
<parameter id="Resultado"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_Estado_Subproceso_COPY_1">
<interface>
<ic>
<par name="Variable_On" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Tag_Destino" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* </c>
<c>* Tiempo en segundos</c>
<l>Time := 0.5</l>
<l>Variable_Off := 0</l>
<l>Send_Pulse_EthernetIp_Data (Tag_Destino, Variable_On, SerialHandle, Variable_Off, Time)</l>
<l>return ()</l>
</body>
<docu id="Send_Estado_Subproceso_COPY_1">
<parameters>
<parameter id="SerialHandle"/>
<parameter id="Tag_Destino"/>
<parameter id="Variable_On"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Rectif_Image">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="ImageMapped" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="CameraParameters" base_type="ctrl" dimension="0"/>
<par name="CameraPose" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ScaleForCenteredImage" base_type="ctrl" dimension="0"/>
<par name="PoseForCenteredImage" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>ImageOut := Image</l>
<l>get_image_size (ImageOut, Width, Height)</l>
<l>CenterRow := Width/2</l>
<l>CenterCol := Height/2</l>
<l>WidthMappedImage := Width</l>
<l>HeightMappedImage := Height</l>
<l>parameters_image_to_world_plane_centered (CameraParameters, CameraPose, CenterRow, CenterCol, WidthMappedImage, HeightMappedImage, ScaleForCenteredImage, PoseForCenteredImage)</l>
<c>* </c>
<c>* </c>
<l>gen_image_to_world_plane_map (Map, CameraParameters, PoseForCenteredImage, Width, Height, WidthMappedImage, HeightMappedImage, ScaleForCenteredImage, 'bilinear')</l>
<l>map_image (ImageOut, Map, ImageMapped)</l>
<c>* </c>
<l>return ()</l>
</body>
<docu id="Get_Rectif_Image">
<parameters>
<parameter id="CameraParameters"/>
<parameter id="CameraPose"/>
<parameter id="Image"/>
<parameter id="ImageMapped"/>
<parameter id="PoseForCenteredImage"/>
<parameter id="ScaleForCenteredImage"/>
</parameters>
</docu>
</procedure>
<procedure name="calc_calplate_pose_movingcam">
<interface>
<ic>
<par name="CalibObjInBasePose" base_type="ctrl" dimension="0"/>
<par name="ToolInCamPose" base_type="ctrl" dimension="0"/>
<par name="ToolInBasePose" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="CalibObjInCamPose" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* CalibObjInCamPose = cam_H_calplate</c>
<c>*                   = cam_H_tool * tool_H_base * base_H_calplate</c>
<c>*                   = ToolInCamPose * BaseInToolPose * CalibrationPose</c>
<l>pose_invert (ToolInBasePose, BaseInToolPose)</l>
<l>pose_compose (ToolInCamPose, BaseInToolPose, BaseInCamPose)</l>
<l>pose_compose (BaseInCamPose, CalibObjInBasePose, CalibObjInCamPose)</l>
<c>* </c>
<c>* </c>
<c>* </c>
<c>* </c>
<l>return ()</l>
</body>
<docu id="calc_calplate_pose_movingcam">
<short lang="en_US">compute cam_H_calplate from hand-eye calibration results</short>
<short lang="es_ES">compute cam_H_calplate from hand-eye calibration results</short>
<parameters>
<parameter id="CalibObjInBasePose"/>
<parameter id="CalibObjInCamPose"/>
<parameter id="ToolInBasePose"/>
<parameter id="ToolInCamPose"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Pose_Caltab">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="CameraParameters" base_type="ctrl" dimension="0"/>
<par name="CameraPose" base_type="ctrl" dimension="0"/>
<par name="CalTabFile" base_type="ctrl" dimension="0"/>
<par name="CamParam" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="PoseForCalibrationPlate" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>ImageOut := Image</l>
<l>* read_cam_par ('C:/Users/Ignacio Corvalan/Dropbox (MIRS)/1.-Servidor Desarrollo Software/7.-Magotteaux/4.-Optica/CamParamError.dat', StartCamParam)</l>
<c></c>
<l>* Get_Rectif_Image (ImageOut, ImageOut, CameraParameters, CameraPose, ScaleForCenteredImage, PoseForCenteredImage)</l>
<c>* </c>
<l>create_calib_data ('hand_eye_moving_cam', 1, 1, CalibDataID)</l>
<l>set_calib_data_cam_param (CalibDataID, 0, [], CamParam)</l>
<l>set_calib_data_calib_object (CalibDataID, 0, CalTabFile)</l>
<l>set_calib_data (CalibDataID, 'model', 'general', 'optimization_method', 'nonlinear')</l>
<c>* </c>
<l>find_calib_object (ImageOut, CalibDataID, 0, 0, 0, [], [])</l>
<c>* </c>
<c>* </c>
<l>* find_caltab (Image, CalPlate, CalTabFile, 3, 100, 20)</l>
<l>* find_marks_and_pose (Image, CalPlate, CalTabFile, CamParam, 128, 10, 18, 0.9, 15, 100, RCoord1, CCoord1, StartPose)</l>
<l>* dev_set_color ('blue')</l>
<l>* disp_cross (200000, RCoord1, CCoord1, 40, StartPose[5])</l>
<c>* </c>
<l>get_calib_data_observ_contours (Caltab, CalibDataID, 'caltab', 0, 0, 0)</l>
<l>get_calib_data_observ_points (CalibDataID, 0, 0, 0, RCoord, CCoord, Index, PoseForCalibrationPlate)</l>
<c>* </c>
<c>* *****************************************************************</c>
<c>* Si quiero [mm]</c>
<l>PoseForCalibrationPlate[0:2] := PoseForCalibrationPlate[0:2]*1000</l>
<l>dev_inspect_ctrl(PoseForCalibrationPlate)</l>
<c></c>
<l>disp_3d_coord_system (200000, CamParam, PoseForCalibrationPlate, 50)</l>
<c></c>
<c>* ****************************************************************</c>
<c>* </c>
<l>* dev_inspect_ctrl (PoseForCalibrationPlate)</l>
<c>* </c>
<c>* </c>
<l>dev_set_color ('green')</l>
<l>dev_display (ImageOut)</l>
<l>dev_display (Caltab)</l>
<l>dev_set_color ('yellow')</l>
<l>disp_cross (200000, RCoord, CCoord, 6, 0)</l>
<l>dev_set_colored (3)</l>
<l>disp_3d_coord_system (200000, CamParam, PoseForCalibrationPlate, 50)</l>
<c>* </c>
<l>Length := |RCoord|</l>
<l>texto[0] := 'Org X: '</l>
<l>texto[1] := 'Org Y: '</l>
<l>texto[2] := 'Org Z: '</l>
<l>texto[3] := 'Org C: '</l>
<l>texto[4] := 'Org B: '</l>
<l>texto[5] := 'Org A: '</l>
<l>texto[6] := ' '</l>
<c>* </c>
<l>N_ossf := 13</l>
<l>dev_disp_text (texto+PoseForCalibrationPlate, 'image', RCoord[Length-N_ossf], CCoord[Length-N_ossf], 'black', 'box_color', '#ffffff77')</l>
<c></c>
<l>clear_calib_data (CalibDataID)</l>
<c>* </c>
<l>return ()</l>
<c>* </c>
<c>* </c>
</body>
<docu id="Get_Pose_Caltab">
<parameters>
<parameter id="CalTabFile"/>
<parameter id="CamParam"/>
<parameter id="CameraParameters"/>
<parameter id="CameraPose"/>
<parameter id="Image"/>
<parameter id="PoseForCalibrationPlate"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Cam_Parameters">
<interface>
<oc>
<par name="StartCamParam" base_type="ctrl" dimension="0"/>
<par name="CameraPose" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* </c>
<l>read_cam_par ('C:/Users/Usuario/Dropbox (MIRS)/1.-Servidor Desarrollo Software/7.-Magotteaux/7.-HandEye/2. procilica/CamParamHandEye_Procilica.dat', StartCamParam)</l>
<c>* </c>
<l>CameraPose := [0.0423359,0.00119515,0.380453,0.570757,1.68038,269.373,0]</l>
<l>return ()</l>
</body>
<docu id="Get_Cam_Parameters">
<parameters>
<parameter id="CameraPose"/>
<parameter id="StartCamParam"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Patron_Pose">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="AcqHandle" base_type="ctrl" dimension="0"/>
<par name="CameraParameters" base_type="ctrl" dimension="0"/>
<par name="CameraPose" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Estado_SubProceso" base_type="ctrl" dimension="0"/>
<par name="PoseForCalibrationPlate" base_type="ctrl" dimension="0"/>
<par name="ToolInCamPose" base_type="ctrl" dimension="0"/>
<par name="ToolInBasePose" base_type="ctrl" dimension="0"/>
<par name="ObjInBasePoseOut" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>CameraPoseOut := CameraPose</l>
<l>* ObjInBasePoseOut := ObjInBasePose</l>
<c>* </c>
<l>try</l>
<c>    * Reseteo las variable de resultado</c>
<l>* # ### Envio data de estado ########################</l>
<l>    Estado := 1</l>
<l>    Resultado := 0</l>
<l>    Procesando := 1</l>
<l>    Send_Data_Proceso (Vector_Estado_Fx, SerialHandle, Estado, Resultado, Procesando)</l>
<l>* # #################################################</l>
<c>    </c>
<c>    </c>
<l>    Time:=25000</l>
<l>    Gain:=1.0</l>
<l>    Set_exposure_Time_cam_0 (AcqHandle, Time, Gain)  </l>
<l>    Get_Image (Image, AcqHandle)</l>
<l>*     Get_Rectif_Image (Image, ImageMapped, CameraParameters, CameraPoseOut, ScaleForCenteredImage, PoseForCenteredImage)</l>
<l>*     Image := ImageMapped</l>
<c>    * </c>
<c>    * **************************************************</c>
<c>    * Hand Eye Apunto al Descriptor</c>
<c>    * **************************************************</c>
<c>    * </c>
<l>    CalTabFile := 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/13.- Ensenso N35/Caltab/Caltab5x5_10.descr'</l>
<l>    Get_Cam_Parameters (StartCamParam, CameraPoseOut)</l>
<c>    * </c>
<c>    * </c>
<c>    * **************************************************</c>
<l>* # ### Envio data de estado ########################</l>
<l>    Estado := 16</l>
<l>    Resultado := 0</l>
<l>    Procesando := 1</l>
<l>    Send_Data_Proceso (Vector_Estado_Fx, SerialHandle, Estado, Resultado, Procesando)</l>
<l>* # #################################################</l>
<c>    * </c>
<l>    Get_Pose_Caltab (Image, StartCamParam, CameraPoseOut, CalTabFile, StartCamParam, PoseForCalibrationPlate)</l>
<c>    * *******************************</c>
<c>    * Enviar por ETHERNETIP</c>
<c>    * *******************************</c>
<c>    </c>
<l>    dev_inspect_ctrl (PoseForCalibrationPlate)</l>
<c>    </c>
<c>    ********************************************</c>
<l>    if (PoseForCalibrationPlate[3]&gt;270)</l>
<l>        PoseForCalibrationPlate[3]:= PoseForCalibrationPlate[3]-360</l>
<l>    endif</l>
<l>    if (PoseForCalibrationPlate[4]&gt;270)</l>
<l>        PoseForCalibrationPlate[4]:= PoseForCalibrationPlate[4]-360</l>
<l>    endif</l>
<c>    ********************************************</c>
<c>    </c>
<l>    Variable_Pos := ['X','Y','Z','C','B','A']</l>
<l>    for Index_Var := 0 to 5 by 1</l>
<l>        Tag_Destino:='_EV01_I_Eje'+Variable_Pos[Index_Var]</l>
<l>        Variable := PoseForCalibrationPlate[Index_Var]</l>
<l>        Send_EthernetIP_Data (Tag_Destino, Variable, SerialHandle)</l>
<l>        wait_seconds (0.2)</l>
<l>    endfor</l>
<c>    </c>
<c>    * ************************************************************************************************************</c>
<c>    * Lectura de Pose herramienta respecto a la cámara</c>
<c>    * ************************************************************************************************************</c>
<c>    * </c>
<l>    read_pose ('C:/Users/Usuario/Dropbox (MIRS)/1.-Servidor Desarrollo Software/7.-Magotteaux/7.-HandEye/2. procilica/ToolInCamPose_Procilica.dat', \
               ToolInCamPose)</l>
<c>    * </c>
<l>    pose_invert (ToolInCamPose, CamInToolPoseIN)</l>
<l>    CamInToolPoseIN[0:2]:=CamInToolPoseIN[0:2]*1e3</l>
<l>    CamInToolPoseIN[4]:=CamInToolPoseIN[4]-360</l>
<l>    pose_invert (CamInToolPoseIN, ToolInCamPose)</l>
<l>    dev_inspect_ctrl (ToolInCamPose)</l>
<c>    * </c>
<c>    * ************************************************************************************************************</c>
<c>    * Lectura de Posicion de la herramienta del robot. Deberar ser por etehrnetIP</c>
<c>    * ************************************************************************************************************</c>
<l>    Get_Pose_Tool (SerialHandle, ToolInBasePose)</l>
<l>      dev_inspect_ctrl (ToolInBasePose)</l>
<c>    * ************************************************************************************************************</c>
<c>    * Oriento el robot a como este la placa</c>
<c>    * ************************************************************************************************************</c>
<c>    </c>
<l>*     ToolInCamPose[0:2]:=ToolInCamPose[0:2]*1e3</l>
<l>    ObjInCamPose := PoseForCalibrationPlate</l>
<c>    </c>
<l>    pose_invert (ToolInCamPose, CamInToolPose)</l>
<l>    pose_compose (ToolInBasePose, CamInToolPose, CamInBasePose)</l>
<l>    pose_compose (CamInBasePose, ObjInCamPose, ObjInBasePose)</l>
<l>    convert_pose_type (ObjInBasePose, 'Rp+T', 'abg', 'point', ObjInBasePose)</l>
<l>    dev_inspect_ctrl (ObjInBasePose)</l>
<c>    </c>
<c></c>
<c>    * *************************************************************************************************************</c>
<c>    * Obtengo la posicion del objetpo a insertar, relativo a la herramienta.</c>
<c>    * ************************************************************************************************************</c>
<c>    </c>
<l>* # ### Envio data de estado ########################</l>
<l>    Estado := 17</l>
<l>    Resultado := 0</l>
<l>    Procesando := 1</l>
<l>    Send_Data_Proceso (Vector_Estado_Fx, SerialHandle, Estado, Resultado, Procesando)</l>
<l>* # #################################################</l>
<c>    </c>
<l>  *  Get_Pose_Punto_Insercion (PoseForCalibrationPlate, ToolInCamPose, ToolInBasePose, SerialHandle, ObjInBasePoseOut)</l>
<c>    </c>
<l>    Altura_Objetivo := 850</l>
<l>    Altura_Actual := PoseForCalibrationPlate[2]</l>
<l>    DeltaAltura := Altura_Actual-Altura_Objetivo</l>
<c>    </c>
<l>* # ### Envio data de estado ########################</l>
<l>    Estado := 14</l>
<l>    Resultado := 1</l>
<l>    Procesando := 0</l>
<l>    Send_Data_Proceso (Vector_Estado_Fx, SerialHandle, Estado, Resultado, Procesando)</l>
<l>* # #################################################</l>
<c>  </c>
<l>catch (Exception)</l>
<c>    </c>
<l>* # ### Envio data de estado ########################</l>
<l>    Estado := 15</l>
<l>    Resultado := 2</l>
<l>    Procesando := 0</l>
<l>    Send_Data_Proceso (Vector_Estado_Fx, SerialHandle, Estado, Resultado, Procesando)</l>
<l>* # #################################################</l>
<c>    </c>
<l>endtry</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Patron_Pose">
<parameters>
<parameter id="AcqHandle"/>
<parameter id="CameraParameters"/>
<parameter id="CameraPose"/>
<parameter id="Estado_SubProceso"/>
<parameter id="ObjInBasePoseOut"/>
<parameter id="PoseForCalibrationPlate"/>
<parameter id="SerialHandle"/>
<parameter id="ToolInBasePose"/>
<parameter id="ToolInCamPose"/>
<parameter id="Vector_Estado_Fx"/>
</parameters>
</docu>
</procedure>
<procedure name="parameters_image_to_world_plane_centered">
<interface>
<ic>
<par name="CamParam" base_type="ctrl" dimension="0"/>
<par name="Pose" base_type="ctrl" dimension="0"/>
<par name="CenterRow" base_type="ctrl" dimension="0"/>
<par name="CenterCol" base_type="ctrl" dimension="0"/>
<par name="WidthMappedImage" base_type="ctrl" dimension="0"/>
<par name="HeightMappedImage" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ScaleForCenteredImage" base_type="ctrl" dimension="0"/>
<par name="PoseForCenteredImage" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* Determine the scale for the mapping</c>
<c>* (here, the scale is determined such that in the</c>
<c>*   surroundings of the given point  the image scale of the</c>
<c>*   mapped image is similar to the image scale of the original image)</c>
<l>Dist_ICS := 1</l>
<l>image_points_to_world_plane (CamParam, Pose, CenterRow, CenterCol, 1, CenterX, CenterY)</l>
<l>image_points_to_world_plane (CamParam, Pose, CenterRow + Dist_ICS, CenterCol, 1, BelowCenterX, BelowCenterY)</l>
<l>image_points_to_world_plane (CamParam, Pose, CenterRow, CenterCol + Dist_ICS, 1, RightOfCenterX, RightOfCenterY)</l>
<l>distance_pp (CenterY, CenterX, BelowCenterY, BelowCenterX, Dist_WCS_Vertical)</l>
<l>distance_pp (CenterY, CenterX, RightOfCenterY, RightOfCenterX, Dist_WCS_Horizontal)</l>
<l>ScaleVertical := Dist_WCS_Vertical / Dist_ICS</l>
<l>ScaleHorizontal := Dist_WCS_Horizontal / Dist_ICS</l>
<l>ScaleForCenteredImage := (ScaleVertical + ScaleHorizontal) / 2.0</l>
<c>* Determine the parameters for set_origin_pose such</c>
<c>* that the point given via get_mbutton will be in the center of the</c>
<c>* mapped image</c>
<l>DX := CenterX - ScaleForCenteredImage * WidthMappedImage / 2.0</l>
<l>DY := CenterY - ScaleForCenteredImage * HeightMappedImage / 2.0</l>
<l>DZ := 0</l>
<l>set_origin_pose (Pose, DX, DY, DZ, PoseForCenteredImage)</l>
<l>return ()</l>
</body>
<docu id="parameters_image_to_world_plane_centered">
<short lang="en_US">Determines scale and pose for the operator image_to_world_plane such that a given point appears in the center and that the scale of the rectified image is similar to the scale of the original image.</short>
<short lang="es_ES">Determines scale and pose for the operator image_to_world_plane such that a given point appears in the center and that the scale of the rectified image is similar to the scale of the original image.</short>
<parameters>
<parameter id="CamParam"/>
<parameter id="CenterCol"/>
<parameter id="CenterRow"/>
<parameter id="HeightMappedImage"/>
<parameter id="Pose"/>
<parameter id="PoseForCenteredImage"/>
<parameter id="ScaleForCenteredImage"/>
<parameter id="WidthMappedImage"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Pose_Punto_Insercion">
<interface>
<ic>
<par name="PoseForCalibrationPlate" base_type="ctrl" dimension="0"/>
<par name="ToolInCamPose" base_type="ctrl" dimension="0"/>
<par name="ToolInBasePose" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ObjInBasePose" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* </c>
<l>ObjInCamPose := PoseForCalibrationPlate</l>
<c>* </c>
<l>ToolInCamPose_Aux := ToolInCamPose</l>
<c>* </c>
<l>pose_invert (ToolInCamPose, CamInToolPose)</l>
<l>pose_compose (ToolInBasePose, CamInToolPose, CamInBasePose)</l>
<l>pose_compose (CamInBasePose, ObjInCamPose, ObjInBasePose)</l>
<c>* </c>
<l>dev_inspect_ctrl (ObjInBasePose)</l>
<c>* </c>
<l>osffetX := 0</l>
<l>osffetY := 0</l>
<l>osffetZ := 0</l>
<c>* </c>
<l>pto1 := ObjInBasePose[0]+osffetX</l>
<l>pto2 := ObjInBasePose[1]+osffetY</l>
<l>pto3 := ObjInBasePose[2]+osffetZ</l>
<c>* </c>
<l>ObjInBasePose[0] := pto1</l>
<l>ObjInBasePose[1] := pto2</l>
<l>ObjInBasePose[2] := pto3</l>
<c>* </c>
<c>* </c>
<l>Get_Pose_Tool (SerialHandle, LapizInBasePose)</l>
<l>DinOssfet[0] := LapizInBasePose[0]-ObjInBasePose[0]</l>
<l>DinOssfet[1] := LapizInBasePose[1]-ObjInBasePose[1]</l>
<l>DinOssfet[2] := LapizInBasePose[2]-ObjInBasePose[2]</l>
<c>* </c>
<l>Get_Pose_Tool (SerialHandle, LapizInBasePose_Estimado)</l>
<l>DinOssfet[0] := LapizInBasePose[0]-LapizInBasePose_Estimado[0]</l>
<l>DinOssfet[1] := LapizInBasePose[1]-LapizInBasePose_Estimado[1]</l>
<l>DinOssfet[2] := LapizInBasePose[2]-LapizInBasePose_Estimado[2]</l>
<c>* </c>
<c>* </c>
<c>* </c>
<c>* </c>
<l>stop ()</l>
<c>* </c>
<c>* </c>
<l>return ()</l>
</body>
<docu id="Get_Pose_Punto_Insercion">
<parameters>
<parameter id="ObjInBasePose"/>
<parameter id="PoseForCalibrationPlate"/>
<parameter id="SerialHandle"/>
<parameter id="ToolInBasePose"/>
<parameter id="ToolInCamPose"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Pose_Tool">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ToolInBasePose" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<l>try</l>
<c>  </c>
<l>I := 0</l>
<c>* Leo Posicion del robot</c>
<l>disp_message (200000, 'NO MOVER ROBOT', 'window', 30, 12, 'black', 'true')</l>
<c>* </c>
<l>Tag_Lectura := '_EV01_O_EjeX'</l>
<l>Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>tuple_real (RV_CmdFotogen, Number)</l>
<l>Number := (Number)/10000.0 - 4000.0</l>
<c>* </c>
<l>posx[I] := Number</l>
<c>* </c>
<l>Tag_Lectura := '_EV01_O_EjeY'</l>
<l>Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>tuple_real (RV_CmdFotogen, Number)</l>
<l>Number := (Number)/10000.0 - 4000.0</l>
<l>posy[I] := Number</l>
<c>* </c>
<l>Tag_Lectura := '_EV01_O_EjeZ'</l>
<l>Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>tuple_real (RV_CmdFotogen, Number)</l>
<l>Number := (Number)/10000.0 - 4000.0</l>
<l>posz[I] := Number</l>
<c>* </c>
<l>Tag_Lectura := '_EV01_O_EjeC'</l>
<l>Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>tuple_real (RV_CmdFotogen, Number)</l>
<l>Number := (Number)/10000.0 - 4000.0</l>
<l>Roll[I] := Number</l>
<c>* </c>
<l>Tag_Lectura := '_EV01_O_EjeB'</l>
<l>Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<c>* </c>
<l>tuple_real (RV_CmdFotogen, Number)</l>
<l>Number := (Number)/10000.0 - 4000</l>
<l>Pitch[I] := Number</l>
<c>* </c>
<l>Tag_Lectura := '_EV01_O_EjeA'</l>
<l>Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>tuple_real (RV_CmdFotogen, Number)</l>
<c>* </c>
<l>Number := (Number)/10000 - 4000</l>
<l>Yaw[I] := Number</l>
<c>* </c>
<c>* Read pose of tool in robot base coordinates (ToolInBasePose)</c>
<l>create_pose (posx[I], posy[I], posz[I], Roll[I], Pitch[I], Yaw[I], 'Rp+T', 'abg', 'point', ToolInBasePose)</l>
<c>*   </c>
<l>catch (Exception)</l>
<c>    </c>
<l>    ToolInBasePose:=[]</l>
<l>    create_pose (-1, -1, -1, -1, -1, -1, 'Rp+T', 'abg', 'point', ToolInBasePose)</l>
<c>* </c>
<l>endtry</l>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Pose_Tool">
<parameters>
<parameter id="SerialHandle"/>
<parameter id="ToolInBasePose"/>
</parameters>
</docu>
</procedure>
<procedure name="Config_Parametros_Cam_R1">
<interface>
<ic>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera" base_type="ctrl" dimension="0"/>
<par name="NumberOfDisparities" base_type="ctrl" dimension="0"/>
<par name="MinimumDisparity" base_type="ctrl" dimension="0"/>
<par name="Projector" base_type="ctrl" dimension="0"/>
<par name="FrontLigth" base_type="ctrl" dimension="0"/>
<par name="AutoExposure" base_type="ctrl" dimension="0"/>
<par name="AutoGain" base_type="ctrl" dimension="0"/>
<par name="Gain" base_type="ctrl" dimension="0"/>
<par name="Exposure" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="TempCam" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* </c>
<c>* Configuracion de parametros.</c>
<l>set_framegrabber_param (Camera, 'grab_data_items', ['Images/Rectified/Left', 'Images/Rectified/Right', 'Images/PointMap','Images/DisparityMap'])</l>
<c>* </c>
<c>* </c>
<c>* Parametros para habilitar funciones directas de la camara</c>
<l>set_framegrabber_param (NxLib, 'Execute/Parameters/InitialTrigger', 'All')</l>
<c>* Proyector random de texturas</c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/Projector', Projector)</l>
<c>* Iluminacion</c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/FrontLight', FrontLigth)</l>
<c>* </c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/AutoExposure', AutoExposure)</l>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/AutoGain', AutoGain)</l>
<c></c>
<c></c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/Exposure', Exposure)</l>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/Gain', Gain)</l>
<c></c>
<c></c>
<c></c>
<c>* </c>
<c>* ******************************************************************************************************</c>
<c></c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/DisparityMap/StereoMatching/NumberOfDisparities', NumberOfDisparities)</l>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/DisparityMap/StereoMatching/MinimumDisparity', MinimumDisparity)</l>
<c>* N° de imagenes de captura</c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/FlexView', 1)</l>
<c>* Temperatura de camara</c>
<l>get_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Sensor/Temperature', TempCam)</l>
<c>* </c>
<l>return ()</l>
</body>
<docu id="Config_Parametros_Cam_R1">
<parameters>
<parameter id="AutoExposure"/>
<parameter id="AutoGain"/>
<parameter id="Camera"/>
<parameter id="Exposure"/>
<parameter id="FrontLigth"/>
<parameter id="Gain"/>
<parameter id="MinimumDisparity"/>
<parameter id="NumberOfDisparities"/>
<parameter id="NxLib"/>
<parameter id="Projector"/>
<parameter id="TempCam"/>
</parameters>
</docu>
</procedure>
<procedure name="Conectar_Ensenso_N35_COPY_1">
<interface>
<oc>
<par name="NxLib_1" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="Conexion_Camara_1" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* </c>
<l>Conexion_Camara_1 := false</l>
<l>try</l>
<c>    * </c>
<c>    * </c>
<c>    * Inicializacion de Arbol y camara estereo</c>
<l>    open_framegrabber ('Ensenso-NxLib', 0, 0, 0, 0, 0, 0, 'default', 0, 'Raw', 'auto_grab_data=0', 'false', 'Item', '/', 0, 0, NxLib_1)</l>
<l>    open_framegrabber ('Ensenso-NxLib', 0, 0, 0, 0, 0, 0, 'default', 0, 'Raw', 'auto_grab_data=0', 'false', 'Stereo', '', 0, 0, Camera_1)</l>
<c>    * </c>
<c>    * Abro puerto TCP del Arbol</c>
<l>    set_framegrabber_param (NxLib_1, 'do_open_tcp_port', 24002)</l>
<l>    Conexion_Camara_1 := true</l>
<c>    * </c>
<l>    return ()</l>
<l>catch (Exception)</l>
<l>    Conexion_Camara_1 := false</l>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="Conectar_Ensenso_N35_COPY_1">
<parameters>
<parameter id="Camera_1"/>
<parameter id="Conexion_Camara_1"/>
<parameter id="NxLib_1"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Img_Camera_R1">
<interface>
<oo>
<par name="ModelImage" base_type="iconic" dimension="0"/>
<par name="Xm" base_type="iconic" dimension="0"/>
<par name="Ym" base_type="iconic" dimension="0"/>
<par name="Zm" base_type="iconic" dimension="0"/>
<par name="ImgLeftCamera" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib_1" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Adq_Imagen (ModelImage, NxLib_1, Camera_1)</l>
<l>Adq_XYZ_Img (ModelImage, Xm, Ym, Zm)</l>
<l>select_obj(ModelImage, ImgLeftCamera, 1)</l>
<l>xyz_to_object_model_3d (Xm, Ym, Zm, Escena3D_RAW)</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Img_Camera_R1">
<parameters>
<parameter id="Camera_1"/>
<parameter id="Escena3D_RAW"/>
<parameter id="ImgLeftCamera"/>
<parameter id="ModelImage"/>
<parameter id="NxLib_1"/>
<parameter id="Xm"/>
<parameter id="Ym"/>
<parameter id="Zm"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Pallet_BD">
<interface>
<ic>
<par name="Variable_BD" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="DataBD" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* </c>
<c>* </c>
<c>* </c>
<l>try</l>
<c>    * </c>
<l>    Peticion := 'BaseDatos'</l>
<l>    Data := Peticion+';'+Variable_BD</l>
<c>    * </c>
<l>    write_serial (SerialHandle, ords(Data))</l>
<c>    * </c>
<l>    wait_seconds (0.5)</l>
<c>    * </c>
<c>    * Numero de caracteres a leer</c>
<l>    read_serial (SerialHandle, 200, Nchar)</l>
<l>    Nchar := chrt(Nchar)</l>
<c>    * </c>
<c>    * </c>
<c>    * </c>
<l>    tuple_split (Nchar, '#', Substrings)</l>
<l>    tuple_split (Substrings, '||', DataBD)</l>
<c>    * </c>
<l>catch (Exception)</l>
<l>endtry</l>
<c>* </c>
<c>* </c>
<c>* </c>
<c>* </c>
<l>return ()</l>
</body>
<docu id="Get_Pallet_BD">
<parameters>
<parameter id="DataBD"/>
<parameter id="SerialHandle"/>
<parameter id="Variable_BD"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Robot_Pose">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ToolInBasePose" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>try</l>
<c></c>
<l>    Escalamiento := 1</l>
<l>    Tag_Lectura := '_EV01_O_EjeX'    </l>
<l>    Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>    tuple_real (RV_CmdFotogen, Number)</l>
<l>    Number := (Number)/10000.0 - 4000.0</l>
<l>*     dev_inspect_ctrl (Number)</l>
<l>    posx := Number</l>
<c>     </c>
<l>    Tag_Lectura := '_EV01_O_EjeY'    </l>
<l>    Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>    tuple_real (RV_CmdFotogen, Number)</l>
<l>    Number := (Number)/10000.0 - 4000.0</l>
<l>    posy := Number</l>
<c>    * </c>
<l>    Tag_Lectura := '_EV01_O_EjeZ'    </l>
<l>    Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>    tuple_real (RV_CmdFotogen, Number)</l>
<l>    Number := (Number)/10000.0 - 4000.0</l>
<l>    posz := Number</l>
<c>    * </c>
<l>    Tag_Lectura := '_EV01_O_EjeC'    </l>
<l>    Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>    tuple_real (RV_CmdFotogen, Number)</l>
<l>    Number := (Number)/10000.0 - 4000.0</l>
<l>    Roll := Number</l>
<c>    * </c>
<l>    Tag_Lectura := '_EV01_O_EjeB'    </l>
<l>    Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<c>    * </c>
<l>    tuple_real (RV_CmdFotogen, Number)</l>
<l>    Number := (Number)/10000.0 - 4000</l>
<l>    Pitch := Number</l>
<c>    * </c>
<l>    Tag_Lectura := '_EV01_O_EjeA'    </l>
<l>    Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>    tuple_real (RV_CmdFotogen, Number)</l>
<c>    * </c>
<l>    Number := (Number)/10000 - 4000</l>
<l>    Yaw := Number</l>
<c>    * </c>
<c>    * Read pose of tool in robot base coordinates (ToolInBasePose)</c>
<l>    create_pose (posx, posy, posz, Roll, Pitch, Yaw, 'Rp+T', 'abg', 'point', ToolInBasePose)</l>
<c>    * </c>
<l>    ToolInBasePose[0:2] := ToolInBasePose[0:2]</l>
<l>    return ()   </l>
<c>    </c>
<l>catch (Exception)</l>
<c>    </c>
<c>    </c>
<l>endtry</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
</body>
<docu id="Get_Robot_Pose">
<parameters>
<parameter id="SerialHandle"/>
<parameter id="ToolInBasePose"/>
</parameters>
</docu>
</procedure>
<procedure name="Take_Core_In_Pallet">
<interface>
<io>
<par name="Z" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
<par name="N_Pallet_to_Scan" base_type="ctrl" dimension="0"/>
<par name="Path_SFM_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_3D_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_Tofind" base_type="ctrl" dimension="0"/>
<par name="Path_CORE_ID" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="Visualizar3D" base_type="ctrl" dimension="0"/>
<par name="SegmentoPallet" base_type="ctrl" dimension="0"/>
<par name="Pose_Esquina" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Estado_SubProceso" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Parametros_Visualizacion := ['colored','disp_pose','point_size']</l>
<l>Valores_Visualizacion := [  12  ,'true',1]</l>
<c></c>
<l>* # ### Envio data de estado ########################</l>
<l>Procesando := 1</l>
<l>Estado := 0</l>
<l>Resultado := 0</l>
<l>Send_Data_Proceso (Vector_Estado_Fx, SerialHandle, Estado, Resultado, Procesando)</l>
<l>* # ################################################# </l>
<c> </c>
<c>* *****************************************</c>
<c>* 1.- Obtengo el ROI3D del PALLET</c>
<c>* *****************************************</c>
<l>Vector_Segmento := ['A','B','C','D','E','F','G','H','I']</l>
<c></c>
<c></c>
<l>try</l>
<l>    Get_ROI3D_Pallet (ROI3D_NullFrame, ROI3D_rotate)</l>
<l>catch (Exception)</l>
<l>    dev_get_exception_data (Exception, 'error_msg', ErrorMsg0)</l>
<l>    dev_get_exception_data (Exception, 'procedure', ErrorMsg1)</l>
<l>    dev_get_exception_data (Exception, 'operator', ErrorMsg2)</l>
<l>    dev_get_exception_data (Exception, 'program_line', ErrorMsg3)</l>
<c>    * </c>
<l>    MensajeError := ErrorMsg0+' IN '+ErrorMsg1+' IN FUNTION '+ErrorMsg2+' IN LINE '+ErrorMsg3</l>
<l>*     throw (MensajeError)</l>
<c>    * </c>
<l>* # ### Envio data de estado ########################</l>
<l>    Procesando := 0</l>
<l>    Estado := 5</l>
<l>    Resultado := 2</l>
<l>    Send_Data_Proceso (Vector_Estado_Fx, SerialHandle, Estado, Resultado, Procesando)</l>
<l>* # ################################################# </l>
<c>    * </c>
<l>    Msg_Sub_Proceso := '#Error# '+MensajeError</l>
<l>    return ()</l>
<l>endtry</l>
<c>* </c>
<c>* </c>
<c>* </c>
<c>* </c>
<l>* # #### ROTO EL ROI 3D ######</l>
<c>* </c>
<l>try</l>
<c>    * #####################################################################################</c>
<c>    * Funcion que Lee la pose guardada en el Bloque 0, y que referencia la orientacion de la camara</c>
<c>    * #####################################################################################</c>
<l>    Get_Rotate_ROI3D (Pose_Esquina, ROI3D_rotate, Pose_Segmentos, ROI3D_rotate)</l>
<l>    Visualizar_3D ([ROI3D_rotate,Escena3D_RAW], Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, [], [], [Vector_Segmento,'Modelo'], PoseOut1)</l>
<c>    * </c>
<l>catch (Exception)</l>
<l>    dev_get_exception_data (Exception, 'error_msg', ErrorMsg0)</l>
<l>    dev_get_exception_data (Exception, 'procedure', ErrorMsg1)</l>
<l>    dev_get_exception_data (Exception, 'operator', ErrorMsg2)</l>
<l>    dev_get_exception_data (Exception, 'program_line', ErrorMsg3)</l>
<c>    * </c>
<l>    MensajeError := ErrorMsg0+' IN '+ErrorMsg1+' IN FUNTION '+ErrorMsg2+' IN LINE '+ErrorMsg3</l>
<l>*     throw (MensajeError)</l>
<l>    Msg_Sub_Proceso := '#Error# '+MensajeError</l>
<l>    Estado_SubProceso := false</l>
<l>    return ()</l>
<l>endtry</l>
<c>* </c>
<c>* </c>
<l>* # ###################################################################</l>
<l>* # ###################################################################</l>
<l>* # ################ BUSQUEDA DE CORES EN EL PALLET ###################</l>
<l>* # ###################################################################</l>
<l>* # ###################################################################</l>
<c>* 3.- Encuentro el orden y los segementos en que estan distribuidos los cores en el applet</c>
<c>* </c>
<c>* </c>
<l>Vector_Entidades_Segmento := Vector_ID_Core_by_Segment_Pallet_Tofind+';'+SegmentoPallet</l>
<c>* </c>
<c>* </c>
<l>try</l>
<c>    * </c>
<c>    * ********************************************************</c>
<c>    * ROI 3D sectorizado de cada elemento</c>
<c>    * Busco de manera sectorizada cara core en el pallet</c>
<c>    * ********************************************************</c>
<c>    * Estructura de vector</c>
<l>* # ###########################</l>
<l>* # ## CORE ## Existencia #####</l>
<l>* # ###########################</l>
<l>    Vector_Existencia_Core := {{[]}}</l>
<l>    Vector_Existencia_Core.at(0).at(0) := 'CORE'</l>
<l>    Vector_Existencia_Core.at(0).at(1) := 'Existencia'</l>
<c>    * </c>
<l>* # ### Envio data de estado ########################</l>
<l>    Procesando := 1</l>
<l>    Estado := 8</l>
<l>    Resultado := 0</l>
<l>    Send_Data_Proceso (Vector_Estado_Fx, SerialHandle, Estado, Resultado, Procesando)</l>
<l>* # ################################################# </l>
<c>    * </c>
<l>    Sampling := 0.02</l>
<l>    Find_Sector_Core (Vector_ID_Core_by_Segment_Pallet_Tofind, Vector_Entidades_Segmento, Path_CORE_ID, Path_3D_Segmentos, Path_SFM_Segmentos, ROI3D_rotate, Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, Vector_Segmento, Escena3D_RAW, Sampling, SerialHandle, Vector_Existencia_Core, Vector_Estado_Fx, Vector_Existencia_Core_New)</l>
<c>    * </c>
<c>    </c>
<c>    * </c>
<c>    * </c>
<l>* # ### Envio data de estado ########################</l>
<l>    Procesando := 1</l>
<l>    Estado := 13</l>
<l>    Resultado := 0</l>
<l>    Send_Data_Proceso (Vector_Estado_Fx, SerialHandle, Estado, Resultado, Procesando)</l>
<l>* # ################################################# </l>
<c>    * </c>
<l>catch (Exception)</l>
<l>    dev_get_exception_data (Exception, 'error_msg', ErrorMsg0)</l>
<l>    dev_get_exception_data (Exception, 'procedure', ErrorMsg1)</l>
<l>    dev_get_exception_data (Exception, 'operator', ErrorMsg2)</l>
<l>    dev_get_exception_data (Exception, 'program_line', ErrorMsg3)</l>
<c>    * </c>
<l>    MensajeError := ErrorMsg0 + ' IN '+ErrorMsg1+' IN FUNTION '+ErrorMsg2+' IN LINE '+ErrorMsg3</l>
<l>* #### Envio data de estado ########################</l>
<l>    Procesando := 0</l>
<l>    Estado := 999</l>
<l>    Resultado := 2</l>
<l>    Send_Data_Proceso (Vector_Estado_Fx, SerialHandle, Estado, Resultado, Procesando)</l>
<l>* ################################################## </l>
<l>    return ()</l>
<l>endtry</l>
<c>* </c>
<c>* ****************************************</c>
<c>* Borrar 3D</c>
<l>clear_object_model_3d ([ROI3D_rotate,ROI3D_NullFrame,Escena3D_RAW])</l>
<c>* </c>
<l>* # ### Envio data de estado ########################</l>
<l>Procesando := 0</l>
<l>Estado := 13</l>
<l>Resultado := 1</l>
<l>Send_Data_Proceso (Vector_Estado_Fx, SerialHandle, Estado, Resultado, Procesando)</l>
<l>* # ################################################# </l>
<l>return ()</l>
</body>
<docu id="Take_Core_In_Pallet">
<parameters>
<parameter id="Escena3D_RAW"/>
<parameter id="Estado_SubProceso"/>
<parameter id="N_Pallet_to_Scan"/>
<parameter id="Path_3D_Segmentos"/>
<parameter id="Path_CORE_ID"/>
<parameter id="Path_SFM_Segmentos"/>
<parameter id="Pose_Esquina"/>
<parameter id="SegmentoPallet"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_Tofind"/>
<parameter id="Visualizar3D"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Core_ToUse_From_BDD">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Cod_Core_ToUse" base_type="ctrl" dimension="0"/>
<par name="Pallet_To_Scan" base_type="ctrl" dimension="0"/>
<par name="Segmento_To_Scan" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Variable_BD := 'ram_actualproduction'</l>
<l>Get_Pallet_BD (Variable_BD, SerialHandle, DataBD)</l>
<c>* </c>
<l>Cod_Core_ToUse := DataBD[3]</l>
<l>Pallet_To_Scan := DataBD[14]</l>
<l>Segmento_To_Scan := DataBD[15]</l>
<c>* </c>
<l>return ()</l>
</body>
<docu id="Get_Core_ToUse_From_BDD">
<parameters>
<parameter id="Cod_Core_ToUse"/>
<parameter id="Pallet_To_Scan"/>
<parameter id="Segmento_To_Scan"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Config_Parametros_Cam_R2">
<interface>
<ic>
<par name="Camera" base_type="ctrl" dimension="0"/>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="NumberOfDisparities" base_type="ctrl" dimension="0"/>
<par name="MinimumDisparity" base_type="ctrl" dimension="0"/>
<par name="Proyector" base_type="ctrl" dimension="0"/>
<par name="Iluminacion" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="TempCam" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* </c>
<c>* Configuracion de parametros.</c>
<l>set_framegrabber_param (Camera, 'grab_data_items', ['Images/Rectified/Left', 'Images/Rectified/Right', 'Images/PointMap','Images/DisparityMap'])</l>
<c>* </c>
<c>* </c>
<c>* Parametros para habilitar funciones directas de la camara</c>
<l>*set_framegrabber_param (NxLib, 'Execute/Parameters/InitialTrigger', 'All')</l>
<c>* Proyector random de texturas</c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/Projector', 'false')</l>
<c>* Iluminacion</c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/FrontLight', 'false')</l>
<c>* </c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/AutoExposure', 'true')</l>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/AutoGain', 'true')</l>
<c>* </c>
<c>* </c>
<c>* ******************************************************************************************************</c>
<c></c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/DisparityMap/StereoMatching/NumberOfDisparities', NumberOfDisparities)</l>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/DisparityMap/StereoMatching/MinimumDisparity', MinimumDisparity)</l>
<c>* </c>
<c>* </c>
<c>* </c>
<c>* N° de imagenes de captura</c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/FlexView', 1)</l>
<c>* </c>
<c>* Temperatura de camara</c>
<l>get_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Sensor/Temperature', TempCam)</l>
<c>* </c>
<l>return ()</l>
</body>
<docu id="Config_Parametros_Cam_R2">
<parameters>
<parameter id="Camera"/>
<parameter id="Iluminacion"/>
<parameter id="MinimumDisparity"/>
<parameter id="NumberOfDisparities"/>
<parameter id="NxLib"/>
<parameter id="Proyector"/>
<parameter id="TempCam"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Img_Camera_2">
<interface>
<oo>
<par name="ModelImage" base_type="iconic" dimension="0"/>
<par name="Xm" base_type="iconic" dimension="0"/>
<par name="Ym" base_type="iconic" dimension="0"/>
<par name="Zm" base_type="iconic" dimension="0"/>
<par name="ImgLeftCamera" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib_1" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Adq_Imagen (ModelImage, NxLib_1, Camera_1)</l>
<l>Adq_XYZ_Img (ModelImage, Xm, Ym, Zm)</l>
<l>select_obj(ModelImage, ImgLeftCamera, 1)</l>
<l>xyz_to_object_model_3d (Xm, Ym, Zm, Escena3D_RAW)</l>
<l>return ()</l>
</body>
<docu id="Get_Img_Camera_2">
<parameters>
<parameter id="Camera_1"/>
<parameter id="Escena3D_RAW"/>
<parameter id="ImgLeftCamera"/>
<parameter id="ModelImage"/>
<parameter id="NxLib_1"/>
<parameter id="Xm"/>
<parameter id="Ym"/>
<parameter id="Zm"/>
</parameters>
</docu>
</procedure>
<procedure name="Save_Pose_Palle">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Pose_Refinada" base_type="ctrl" dimension="0"/>
<par name="N_Pallet_to_Scan" base_type="ctrl" dimension="0"/>
<par name="Pose_Robot" base_type="ctrl" dimension="2"/>
</ic>
</interface>
<body>
<c>   </c>
<l>    ToolInBasePose:=Pose_Robot.at(0).at(0)</l>
<c>    </c>
<l>    Path:='C:/Users/Usuario/Dropbox (MIRS)/1.-Servidor Desarrollo Software/7.-Magotteaux/7.-HandEye/1.- Ensenso R1/ToolInCamPose_R1.dat'   </l>
<l>    read_pose (Path, ToolInCamPose)</l>
<c>    </c>
<l>    ToolInCamPose[0:2]:=ToolInCamPose[0:2]*1e3</l>
<c>   </c>
<l>    ObjInCamPose:=Pose_Refinada</l>
<c>    </c>
<l>    pose_invert (ToolInCamPose, CamInToolPose)</l>
<l>    pose_compose (ToolInBasePose, CamInToolPose, CamInBasePose)</l>
<l>    pose_compose (CamInBasePose, ObjInCamPose, ObjInBasePose)</l>
<c>    </c>
<l>    NamePose:='Pallet_'+N_Pallet_to_Scan</l>
<l>    Path_Save_Pose_PalletN:='C:/Users/Usuario/Dropbox (MIRS)/1.-Servidor Desarrollo Software/7.-Magotteaux/5.-Ing Software/0 Identificacion de Pallet/'+NamePose+'.dat'</l>
<c>    </c>
<l>    write_pose (CamInBasePose, Path_Save_Pose_PalletN)</l>
<l>    Path_Save_Pose_PalletN:='C:/Users/Usuario/Dropbox (MIRS)/1.-Servidor Desarrollo Software/7.-Magotteaux/5.-Ing Software/0 Identificacion de Pallet/'+NamePose+'ObjInBase.dat'</l>
<l>    write_pose (ObjInBasePose, Path_Save_Pose_PalletN)</l>
<l>    Path_Save_Pose_PalletN:='C:/Users/Usuario/Dropbox (MIRS)/1.-Servidor Desarrollo Software/7.-Magotteaux/5.-Ing Software/0 Identificacion de Pallet/'+NamePose+'ToolInBase.dat'</l>
<l>    write_pose (ToolInBasePose, Path_Save_Pose_PalletN)    </l>
<l>    Path_Save_Pose_PalletN:='C:/Users/Usuario/Dropbox (MIRS)/1.-Servidor Desarrollo Software/7.-Magotteaux/5.-Ing Software/0 Identificacion de Pallet/'+NamePose+'ObjInCam.dat'</l>
<l>    write_pose (ObjInCamPose, Path_Save_Pose_PalletN) </l>
<c>    </c>
<c>    </c>
<l>return ()</l>
</body>
<docu id="Save_Pose_Palle">
<parameters>
<parameter id="N_Pallet_to_Scan"/>
<parameter id="Pose_Refinada"/>
<parameter id="Pose_Robot"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_Data_To_Robot">
<interface>
<ic>
<par name="Pose_Refinada" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>    convert_pose_type (Pose_Refinada, 'Rp+T', 'abg', 'point', Pose_Refinada_Tp2)</l>
<l>    for Index := 0 to |Pose_Refinada|-2 by 1</l>
<l>        VR_PosicionEsquinaPallet[Index]:=Pose_Refinada_Tp2[Index]      </l>
<l>    endfor</l>
<c>   </c>
<c>    ********************************</c>
<c>    * Enviar por ETHERNETIP</c>
<c>    ********************************</c>
<l>    Variable_Pos:=['X','Y','Z','C','B','A']</l>
<l>    for Index_Var:= 0 to |VR_PosicionEsquinaPallet|-1 by 1</l>
<l>        Tag_Destino:='_EV01_I_Eje'+Variable_Pos[Index_Var]</l>
<l>        Variable:=VR_PosicionEsquinaPallet[Index_Var]</l>
<l>        Send_EthernetIP_Data (Tag_Destino, Variable, SerialHandle)</l>
<l>        wait_seconds(0.1)</l>
<l>    endfor</l>
<l>return ()</l>
<c></c>
<c></c>
</body>
<docu id="Send_Data_To_Robot">
<parameters>
<parameter id="Pose_Refinada"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Rototate_ROI">
<interface>
<ic>
<par name="Pose_Refinada" base_type="ctrl" dimension="0"/>
<par name="ROI3D_rotate" base_type="ctrl" dimension="0"/>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Visualizar3D" base_type="ctrl" dimension="0"/>
<par name="Vector_Segmento" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Pose_Segmentos" base_type="ctrl" dimension="0"/>
<par name="ROI3D_rotateOut" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>ROI3D_rotateOut := ROI3D_rotate</l>
<l>try</l>
<c>    </c>
<c>    * Roto el ROI 3D respecto a la esquina encontrada</c>
<l>    Get_Rotate_ROI3D (Pose_Refinada, ROI3D_rotateOut, Pose_Segmentos, ROI3D_rotateOut)</l>
<c>    </c>
<l>    Visualizar_3D ([ROI3D_rotateOut,Escena3D_RAW], Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, [], [], [Vector_Segmento,'Modelo'], PoseOut1)</l>
<c>    </c>
<c>    </c>
<l>catch (Exception)</l>
<l>    dev_get_exception_data (Exception, 'error_msg', ErrorMsg0)</l>
<l>    dev_get_exception_data (Exception, 'procedure', ErrorMsg1)</l>
<l>    dev_get_exception_data (Exception, 'operator', ErrorMsg2)</l>
<l>    dev_get_exception_data (Exception, 'program_line', ErrorMsg3)</l>
<c>    </c>
<l>    MensajeError:=ErrorMsg0+' IN '+ErrorMsg1+' IN FUNTION '+ErrorMsg2+' IN LINE '+ErrorMsg3</l>
<l>*     throw (MensajeError)</l>
<l>    Msg_Sub_Proceso:='#Error# '+MensajeError</l>
<l>    Estado_SubProceso:=false</l>
<l>    return()</l>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="Rototate_ROI">
<parameters>
<parameter id="Escena3D_RAW"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="Pose_Refinada"/>
<parameter id="Pose_Segmentos"/>
<parameter id="ROI3D_rotate"/>
<parameter id="ROI3D_rotateOut"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="Vector_Segmento"/>
<parameter id="Visualizar3D"/>
</parameters>
</docu>
</procedure>
<procedure name="Set_Exposure_Estereo">
<interface>
<ic>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Exposure" base_type="ctrl" dimension="0"/>
<par name="Gain" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/AutoExposure', 'false')</l>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/AutoGain', 'false')</l>
<c></c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/Exposure', Exposure)</l>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/Gain', Gain)</l>
<l>return ()</l>
</body>
<docu id="Set_Exposure_Estereo">
<parameters>
<parameter id="Exposure"/>
<parameter id="Gain"/>
<parameter id="NxLib"/>
</parameters>
</docu>
</procedure>
<procedure name="MakeSFM_Palletr">
<interface>
<io>
<par name="Esquina" base_type="iconic" dimension="0"/>
<par name="Z" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="ConnectedRegions" base_type="iconic" dimension="0"/>
<par name="SelectedRegions" base_type="iconic" dimension="0"/>
<par name="ImageReduced" base_type="iconic" dimension="0"/>
<par name="MultiChannelImage" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Esquina3D" base_type="ctrl" dimension="0"/>
<par name="Pose" base_type="ctrl" dimension="0"/>
<par name="Esquina3D_Trans" base_type="ctrl" dimension="0"/>
<par name="Pose1" base_type="ctrl" dimension="0"/>
<par name="PoseOut1" base_type="ctrl" dimension="0"/>
<par name="Sampling" base_type="ctrl" dimension="0"/>
<par name="SurfaceModelID" base_type="ctrl" dimension="0"/>
<par name="ObjectModel3DNormals" base_type="ctrl" dimension="0"/>
<par name="Esquina_Tri" base_type="ctrl" dimension="0"/>
<par name="Information" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>connection (Esquina, ConnectedRegions)</l>
<l>select_shape (ConnectedRegions, SelectedRegions, 'area', 'and', 10000, 99999)</l>
<l>reduce_domain (Z, SelectedRegions, ImageReduced)</l>
<c></c>
<l>compose3 (X, Y, ImageReduced, MultiChannelImage)</l>
<c></c>
<c></c>
<l>xyz_to_object_model_3d (X, Y, ImageReduced, Esquina3D)</l>
<l>create_pose (421, 292, -2035, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose)</l>
<l>rigid_trans_object_model_3d (Esquina3D, Pose, Esquina3D_Trans)</l>
<c></c>
<l>* create_pose (0, 0, 0, 0, 180, 0, 'Rp+T', 'gba', 'point', Pose1)</l>
<l>* rigid_trans_object_model_3d (Esquina3D_Trans, Pose1, Esquina3D_Trans)</l>
<c></c>
<l>* create_pose (0, 0, 0, 0, 0, -90, 'Rp+T', 'gba', 'point', Pose1)</l>
<l>* rigid_trans_object_model_3d (Esquina3D_Trans, Pose1, Esquina3D_Trans)</l>
<c></c>
<c></c>
<c>******************************************************************************************************************************</c>
<l>Visualizar_3D (Esquina3D_Trans, Parametros_Visualizacion, Valores_Visualizacion, 1, [], [], [], PoseOut1)</l>
<c>******************************************************************************************************************************</c>
<c></c>
<c></c>
<l>Sampling:=0.02</l>
<c></c>
<c>* ***************************************************************************************************</c>
<c>* 5.- Creo Surface Model</c>
<c>* ***************************************************************************************************</c>
<c>* Si es necesario samplear el objeto</c>
<l>surface_normals_object_model_3d (Esquina3D_Trans, 'mls', [], [], Esquina3D_Trans)</l>
<l>triangulate_object_model_3d (Esquina3D_Trans, 'greedy', [], [], Esquina_Tri, Information)</l>
<c></c>
<l>create_surface_model (Esquina_Tri, Sampling, 'train_3d_edges', 'true', SurfaceModelID)</l>
<c></c>
<c></c>
<c>* ***************************************************************************************************</c>
<c>* 6.- Guardo Surface Model y Modelo 3D</c>
<c>* ***************************************************************************************************</c>
<c>* </c>
<c></c>
<l>write_surface_model (SurfaceModelID, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/SFM_PALLET/SFM_Pallet_beta.sfm')</l>
<l>write_object_model_3d (Esquina_Tri, 'om3', 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/SFM_PALLET/3D_Pallet_beta.om3', [], [])</l>
<c></c>
<l>return ()</l>
</body>
<docu id="MakeSFM_Palletr">
<parameters>
<parameter id="ConnectedRegions"/>
<parameter id="Esquina"/>
<parameter id="Esquina3D"/>
<parameter id="Esquina3D_Trans"/>
<parameter id="Esquina_Tri"/>
<parameter id="ImageReduced"/>
<parameter id="Information"/>
<parameter id="MultiChannelImage"/>
<parameter id="ObjectModel3DNormals"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="Pose"/>
<parameter id="Pose1"/>
<parameter id="PoseOut1"/>
<parameter id="Sampling"/>
<parameter id="SelectedRegions"/>
<parameter id="SurfaceModelID"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_objeto_0_and_1">
<interface>
<io>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
<par name="Z" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Objeto_0" base_type="iconic" dimension="0"/>
<par name="Objeto_1" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib_1" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="NumberOfDisparities_Cam1" base_type="ctrl" dimension="0"/>
<par name="MinimumDisparity_Cam1" base_type="ctrl" dimension="0"/>
<par name="Projector" base_type="ctrl" dimension="0"/>
<par name="FrontLigth" base_type="ctrl" dimension="0"/>
<par name="AutoExposure" base_type="ctrl" dimension="0"/>
<par name="AutoGain" base_type="ctrl" dimension="0"/>
<par name="Gain" base_type="ctrl" dimension="0"/>
<par name="Exposure" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Escena3D_RAW_Esq" base_type="ctrl" dimension="0"/>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>XOut := X</l>
<l>YOut := Y</l>
<l>ZOut := Z</l>
<l>AutoExposureOut := AutoExposure</l>
<l>AutoGainOut := AutoGain</l>
<l>ExposureOut := Exposure</l>
<l>FrontLigthOut := FrontLigth</l>
<l>GainOut := Gain</l>
<l>MinimumDisparity_Cam1Out := MinimumDisparity_Cam1</l>
<l>NumberOfDisparities_Cam1Out := NumberOfDisparities_Cam1</l>
<l>ProjectorOut := Projector</l>
<l>    Config_Parametros_Cam_R1 (NxLib_1, Camera_1, NumberOfDisparities_Cam1Out, MinimumDisparity_Cam1Out, ProjectorOut, FrontLigthOut, AutoExposureOut, AutoGainOut, GainOut, ExposureOut, TempCam)</l>
<l>Get_Img_Camera_R1 (ModelImage, X_Esq, Y_Esq, Z_Esq, ImgLeftCamera_Esq, NxLib_1, Camera_1, Escena3D_RAW_Esq)</l>
<c></c>
<l>    compose3 (XOut, YOut, ZOut, Objeto_0)</l>
<l>* ############################################################################</l>
<c></c>
<l>* #########################################################################</l>
<c>* Configuracion de Parametros</c>
<l>    MinimumDisparity_Cam1Out := -97</l>
<l>    NumberOfDisparities_Cam1Out := 32</l>
<l>    ProjectorOut := 'true'</l>
<l>    FrontLigthOut := 'true'</l>
<l>    AutoExposureOut := 'true'</l>
<l>    AutoGainOut := 'true'</l>
<l>    ExposureOut := 4.9</l>
<l>    GainOut := 1</l>
<l>    Config_Parametros_Cam_R1 (NxLib_1, Camera_1, NumberOfDisparities_Cam1Out, MinimumDisparity_Cam1Out, ProjectorOut, FrontLigthOut, AutoExposureOut, AutoGainOut, GainOut, ExposureOut, TempCam)</l>
<l>    Get_Img_Camera_R1 (ModelImage, XOut, YOut, ZOut, ImgLeftCamera, NxLib_1, Camera_1, Escena3D_RAW)</l>
<c></c>
<l>    compose3 (XOut, YOut, ZOut, Objeto_1)</l>
<l>* ############################################################################</l>
<l>Estado:=3</l>
<c>*[3] -&gt; Sacar otr foto</c>
<l>Resultado:=3</l>
<l>Procesando:=1</l>
<l>Send_Data_Proceso (Vector_Estado_Fx, SerialHandle, Estado, Resultado, Procesando)</l>
<l>* ################################################################################</l>
<c>    </c>
<c>    </c>
<l>return ()</l>
</body>
<docu id="Get_objeto_0_and_1">
<parameters>
<parameter id="AutoExposure"/>
<parameter id="AutoGain"/>
<parameter id="Camera_1"/>
<parameter id="Escena3D_RAW"/>
<parameter id="Escena3D_RAW_Esq"/>
<parameter id="Exposure"/>
<parameter id="FrontLigth"/>
<parameter id="Gain"/>
<parameter id="MinimumDisparity_Cam1"/>
<parameter id="NumberOfDisparities_Cam1"/>
<parameter id="NxLib_1"/>
<parameter id="Objeto_0"/>
<parameter id="Objeto_1"/>
<parameter id="Projector"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Objeto_2">
<interface>
<oo>
<par name="Objeto_2" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib_1" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Pose_Robot" base_type="ctrl" dimension="2"/>
<par name="MinimumDisparity_Cam1" base_type="ctrl" dimension="0"/>
<par name="NumberOfDisparities_Cam1" base_type="ctrl" dimension="0"/>
<par name="Exposure" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Pose_Robot_New" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>    * #########################################################################</c>
<c>* Configuracion de Parametros</c>
<c></c>
<l>Projector:='true'</l>
<l>FrontLigth:='true'</l>
<l>AutoExposure:='true'</l>
<l>AutoGain:='true'</l>
<c></c>
<l>Gain:=1</l>
<l>    Config_Parametros_Cam_R1 (NxLib_1, Camera_1, NumberOfDisparities_Cam1, MinimumDisparity_Cam1, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure, TempCam)</l>
<l>    Get_Img_Camera_R1 (ModelImage, XOut, YOut, ZOut, ImgLeftCamera, NxLib_1, Camera_1, Escena3D_RAW)</l>
<c></c>
<l>    compose3 (XOut, YOut, ZOut, Objeto_2)</l>
<c></c>
<l>* ############################################################################</l>
<l>Get_Pose_Tool (SerialHandle, ToolInBasePose)</l>
<l>Pose_Robot_New:=ToolInBasePose</l>
<l>* #########################################################################</l>
<c></c>
<c></c>
<l>* ############################################################################</l>
<l>Estado:=3</l>
<c>*[3] -&gt; Sacar otr foto</c>
<l>Resultado:=3</l>
<l>Procesando:=1</l>
<l>Send_Data_Proceso (Vector_Estado_Fx, SerialHandle, Estado, Resultado, Procesando)</l>
<l>* ################################################################################</l>
<c> </c>
<c>    </c>
<l>return ()</l>
</body>
<docu id="Get_Objeto_2">
<parameters>
<parameter id="Camera_1"/>
<parameter id="Exposure"/>
<parameter id="MinimumDisparity_Cam1"/>
<parameter id="NumberOfDisparities_Cam1"/>
<parameter id="NxLib_1"/>
<parameter id="Objeto_2"/>
<parameter id="Pose_Robot"/>
<parameter id="Pose_Robot_New"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Objeto_3">
<interface>
<oo>
<par name="Objeto_3" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib_1" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="MinimumDisparity_Cam1" base_type="ctrl" dimension="0"/>
<par name="NumberOfDisparities_Cam1" base_type="ctrl" dimension="0"/>
<par name="Exposure" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Pose_Robot_New" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>    * #########################################################################</c>
<c>* Configuracion de Parametros</c>
<c></c>
<l>Projector:='true'</l>
<l>FrontLigth:='true'</l>
<l>AutoExposure:='true'</l>
<l>AutoGain:='true'</l>
<c></c>
<l>Gain:=1</l>
<l>    Config_Parametros_Cam_R1 (NxLib_1, Camera_1, NumberOfDisparities_Cam1, MinimumDisparity_Cam1, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure, TempCam)</l>
<l>    Get_Img_Camera_R1 (ModelImage, XOut, YOut, ZOut, ImgLeftCamera, NxLib_1, Camera_1, Escena3D_RAW)</l>
<c></c>
<l>    compose3 (XOut, YOut, ZOut, Objeto_3)</l>
<c>    </c>
<l>* ############################################################################</l>
<l>Get_Pose_Tool (SerialHandle, ToolInBasePose)</l>
<l>Pose_Robot_New:=ToolInBasePose</l>
<l>* #########################################################################</l>
<c></c>
<c></c>
<c></c>
<l>* ############################################################################</l>
<l>Estado:=3</l>
<c>*[3] -&gt; Sacar otr foto</c>
<l>Resultado:=3</l>
<l>Procesando:=1</l>
<l>Send_Data_Proceso (Vector_Estado_Fx, SerialHandle, Estado, Resultado, Procesando)</l>
<l>* ################################################################################</l>
<c> </c>
<l>return ()</l>
</body>
<docu id="Get_Objeto_3">
<parameters>
<parameter id="Camera_1"/>
<parameter id="Exposure"/>
<parameter id="MinimumDisparity_Cam1"/>
<parameter id="NumberOfDisparities_Cam1"/>
<parameter id="NxLib_1"/>
<parameter id="Objeto_3"/>
<parameter id="Pose_Robot_New"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Objeto_0_and_1">
<interface>
<oo>
<par name="Objeto_0" base_type="iconic" dimension="0"/>
<par name="Objeto_1" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib_1" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Pose_Robot" base_type="ctrl" dimension="2"/>
<par name="MinimumDisparity_Cam1" base_type="ctrl" dimension="0"/>
<par name="NumberOfDisparities_Cam1" base_type="ctrl" dimension="0"/>
<par name="Exposure" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Pose_Robot_New" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>* #########################################################################</l>
<c>* Configuracion de Parametros</c>
<c></c>
<l>Projector:='false'</l>
<l>FrontLigth:='true'</l>
<l>AutoExposure:='false'</l>
<l>AutoGain:='false'</l>
<c></c>
<l>Gain:=1</l>
<l>Config_Parametros_Cam_R1 (NxLib_1, Camera_1, NumberOfDisparities_Cam1, MinimumDisparity_Cam1, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure, TempCam)</l>
<l>Get_Img_Camera_R1 (ModelImage, X_Esq, Y_Esq, Z_Esq, ImgLeftCamera_Esq, NxLib_1, Camera_1, Escena3D_RAW_Esq)</l>
<c></c>
<l>compose4 (X_Esq, Y_Esq, Z_Esq, ImgLeftCamera_Esq,Objeto_0)</l>
<l>* ############################################################################</l>
<l>Get_Pose_Tool (SerialHandle, ToolInBasePose)</l>
<l>Pose_Robot_New:=ToolInBasePose</l>
<l>* #########################################################################</l>
<c>* Configuracion de Parametros</c>
<l>MinimumDisparity_Cam1OutOut := -97</l>
<l>NumberOfDisparities_Cam1OutOut := 32</l>
<l>Projector:='true'</l>
<l>FrontLigth:='true'</l>
<l>AutoExposure:='true'</l>
<l>AutoGain:='true'</l>
<l>Exposure := 4.9</l>
<l>Gain:=1</l>
<l>Config_Parametros_Cam_R1 (NxLib_1, Camera_1, NumberOfDisparities_Cam1OutOut, MinimumDisparity_Cam1OutOut, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure, TempCam)</l>
<l>Get_Img_Camera_R1 (ModelImage, X, Y, Z, ImgLeftCamera, NxLib_1, Camera_1, Escena3D_RAW)</l>
<c></c>
<l>compose3 (X, Y, Z, Objeto_1)</l>
<c></c>
<c></c>
<l>* ############################################################################</l>
<l>Estado:=3</l>
<c>*[3] -&gt; Sacar otra foto</c>
<l>Resultado:=3</l>
<l>Procesando:=1</l>
<l>Send_Data_Proceso (Vector_Estado_Fx, SerialHandle, Estado, Resultado, Procesando)</l>
<l>* ################################################################################</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Objeto_0_and_1">
<parameters>
<parameter id="Camera_1"/>
<parameter id="Exposure"/>
<parameter id="MinimumDisparity_Cam1"/>
<parameter id="NumberOfDisparities_Cam1"/>
<parameter id="NxLib_1"/>
<parameter id="Objeto_0"/>
<parameter id="Objeto_1"/>
<parameter id="Pose_Robot"/>
<parameter id="Pose_Robot_New"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Pallet_Model">
<interface>
<oo>
<par name="Objeto_0" base_type="iconic" dimension="0"/>
<par name="Objeto_1" base_type="iconic" dimension="0"/>
<par name="Objeto_2" base_type="iconic" dimension="0"/>
<par name="Objeto_3" base_type="iconic" dimension="0"/>
<par name="Zobj1" base_type="iconic" dimension="0"/>
<par name="Xobj1" base_type="iconic" dimension="0"/>
<par name="Yobj1" base_type="iconic" dimension="0"/>
<par name="Img_Left_Esquina" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib_1" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="N_Pallet_to_Scan" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Pose_Robot" base_type="ctrl" dimension="2"/>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<l>Pose_Robot:={ { [] } }</l>
<l>Pose_Robot.at(0).at(0):='CORE'</l>
<l>Contador_foto:=0</l>
<c></c>
<l>Escuhar_Robot:=true</l>
<l>Contador_foto:=0</l>
<c></c>
<l>*#####################################################</l>
<l>MinimumDisparity_Cam1 := -97</l>
<l>NumberOfDisparities_Cam1 := 32</l>
<l>Exposure:=8</l>
<l>*#####################################################</l>
<l>Get_Objeto_0_and_1 (Objeto_0, Objeto_1, NxLib_1, Camera_1, Vector_Estado_Fx, SerialHandle, Pose_Robot, MinimumDisparity_Cam1, NumberOfDisparities_Cam1, Exposure, Pose_Robot_New)</l>
<l>Pose_Robot.at(0).at(0):=Pose_Robot_New</l>
<l>Contador_foto:=Contador_foto+1</l>
<l>*#####################################################</l>
<c></c>
<l>while (Escuhar_Robot)</l>
<c>    </c>
<c>    </c>
<l>    Tag_Lectura:='_EV01_O_CmdDatos'         </l>
<l>    Read_EthernetIP_Data (Tag_Lectura, SerialHandle, _EV1_O_CmdDatos)</l>
<c>    </c>
<l>    _EV1_O_CmdDatos:=_EV1_O_CmdDatos-10</l>
<l>    if (_EV1_O_CmdDatos == N_Pallet_to_Scan)</l>
<c>        </c>
<c>        </c>
<l>        switch (Contador_foto)</l>
<c>            </c>
<c>            </c>
<l>        case 1:</l>
<l>            Get_Objeto_2 (Objeto_2, NxLib_1, Camera_1, Vector_Estado_Fx, SerialHandle, Pose_Robot, MinimumDisparity_Cam1, NumberOfDisparities_Cam1, Exposure, Pose_Robot_New)</l>
<l>            Pose_Robot.at(1).at(0):=Pose_Robot_New</l>
<l>            Contador_foto:=Contador_foto+1</l>
<l>            break</l>
<c>            </c>
<l>        case 2:</l>
<c>            </c>
<l>            Get_Objeto_3 (Objeto_3, NxLib_1, Camera_1, Vector_Estado_Fx, SerialHandle, MinimumDisparity_Cam1, NumberOfDisparities_Cam1, Exposure, Pose_Robot_New)</l>
<l>            Pose_Robot.at(2).at(0):=Pose_Robot_New</l>
<l>            Contador_foto:=0</l>
<l>            Escuhar_Robot:=false</l>
<l>            break   </l>
<c>            </c>
<l>        endswitch</l>
<l>    endif</l>
<l>endwhile</l>
<c></c>
<c></c>
<c>        ***** Genero la Imagen.  ******</c>
<c>**### Translado la imagen segun lo que se movio #####</c>
<l>decompose4 (Objeto_0, X, Y, Z,Img_Left_Esquina)</l>
<l>decompose3 (Objeto_1, Xobj1, Yobj1, Zobj1)</l>
<l>decompose3 (Objeto_2, Xobj2, Yobj2, Zobj2)</l>
<l>decompose3 (Objeto_3, Xobj3, Yobj3, Zobj3)</l>
<c></c>
<l>xyz_to_object_model_3d (Xobj1, Yobj1, Zobj1, ObjectModel3D_1)</l>
<l>xyz_to_object_model_3d (Xobj2, Yobj2, Zobj2, ObjectModel3D_2)</l>
<l>xyz_to_object_model_3d (Xobj3, Yobj3, Zobj3, ObjectModel3D_3)</l>
<c></c>
<c></c>
<l>Pose_1:=Pose_Robot.at(0).at(0)</l>
<l>Pose_2:=Pose_Robot.at(1).at(0)</l>
<l>Pose_3:=Pose_Robot.at(2).at(0)</l>
<c></c>
<l>deltaTranslado:=Pose_2[0]-Pose_1[0]</l>
<c></c>
<l>create_pose(0, -deltaTranslado, 0, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose_Translado)</l>
<l>rigid_trans_object_model_3d (ObjectModel3D_2, Pose_Translado, ObjectModel3D_2_New)</l>
<c></c>
<c></c>
<l>deltaTranslado:=Pose_3[0]-Pose_1[0]</l>
<l>create_pose(0, -deltaTranslado, 0, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose_Translado)</l>
<l>rigid_trans_object_model_3d (ObjectModel3D_3, Pose_Translado, ObjectModel3D_3_New)</l>
<c></c>
<l>union_object_model_3d ([ObjectModel3D_1,ObjectModel3D_2_New,ObjectModel3D_3_New], 'points_surface', Escena3D_RAW)</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Pallet_Model">
<parameters>
<parameter id="Camera_1"/>
<parameter id="Escena3D_RAW"/>
<parameter id="Img_Left_Esquina"/>
<parameter id="N_Pallet_to_Scan"/>
<parameter id="NxLib_1"/>
<parameter id="Objeto_0"/>
<parameter id="Objeto_1"/>
<parameter id="Objeto_2"/>
<parameter id="Objeto_3"/>
<parameter id="Pose_Robot"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="Xobj1"/>
<parameter id="Yobj1"/>
<parameter id="Zobj1"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_ToolInCamPose">
<interface>
<oc>
<par name="ToolInCamPose" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>    read_pose ('C:/Users/Usuario/Dropbox (MIRS)/1.-Servidor Desarrollo Software/7.-Magotteaux/7.-HandEye/1.- Ensenso R1/ToolInCamPose_R1.dat', ToolInCamPose)</l>
<c>  </c>
<l>return ()</l>
</body>
<docu id="Get_ToolInCamPose">
<parameters>
<parameter id="ToolInCamPose"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_ObjInBasePose">
<interface>
<ic>
<par name="Pose_Refinada" base_type="ctrl" dimension="0"/>
<par name="Pose_Robot" base_type="ctrl" dimension="2"/>
</ic>
<oc>
<par name="ObjInBasePose" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>    ObjInCamPose := Pose_Refinada</l>
<c></c>
<l>    ToolInBasePose:=Pose_Robot.at(0).at(0)</l>
<l>       Get_ToolInCamPose (ToolInCamPose)</l>
<c>       </c>
<l>    ToolInCamPose[0:2]:=ToolInCamPose[0:2]*1e3</l>
<c>    </c>
<c>    </c>
<l>pose_invert (ToolInCamPose, CamInToolPose)</l>
<l>pose_compose (ToolInBasePose, CamInToolPose, CamInBasePose)</l>
<l>pose_compose (CamInBasePose, ObjInCamPose, ObjInBasePose)</l>
<c>    </c>
<l>dev_inspect_ctrl(ObjInBasePose)</l>
<l>return ()</l>
</body>
<docu id="Get_ObjInBasePose">
<parameters>
<parameter id="ObjInBasePose"/>
<parameter id="Pose_Refinada"/>
<parameter id="Pose_Robot"/>
</parameters>
</docu>
</procedure>
</hdevelop>
