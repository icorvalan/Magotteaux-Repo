<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.1.1">
<procedure name="main">
<interface/>
<body>
<l>Parametros_Visualizacion:=['colored','disp_pose','point_size']</l>
<l>Valores_Visualizacion:= [  12  ,'true',1]</l>
<c></c>
<l>open_serial ('COM120', SerialHandle)</l>
<l>set_serial_param (SerialHandle, 256000, 8, 'none', 'none', 1, 100, 'unchanged')</l>
<c></c>
<l>Get_Vector_Estados (Vector_Estado_Fx)</l>
<c></c>
<l>* # FUNCIONES EXTERNAS A LOS BLOQUES  </l>
<c></c>
<c>******************************************</c>
<c>* 0.CAPTURO EL MODELO 3D  DE LA CAMRA 1</c>
<c>******************************************</c>
<c></c>
<c></c>
<c>***********************************************************</c>
<c>* 1.1- Conexion de Ensenso</c>
<c>***********************************************************</c>
<c></c>
<l>Conectar_Ensenso_N35_R2 (24005, NxLib, Camera_3, Conexion_Camara)</l>
<c></c>
<l>* ############################################################################</l>
<l>Get_Cores_BD (Path_CORE_ID, Path_SFM_Segmentos, Path_3D_Segmentos)           </l>
<l>* ############################################################################</l>
<c></c>
<l>* get_framegrabber_param (NxLib, 'Cameras/BySerialNo/182681/Calibration/Monocular/Left/Distortion/K1', K1)</l>
<l>* get_framegrabber_param (NxLib, 'Cameras/BySerialNo/182681/Calibration/Monocular/Left/Distortion/K2', K2)</l>
<l>* get_framegrabber_param (NxLib, 'Cameras/BySerialNo/182681/Calibration/Monocular/Left/Distortion/K3', K3)</l>
<l>* get_framegrabber_param (NxLib, 'Cameras/BySerialNo/182681/Calibration/Monocular/Left/Distortion/T1', T1)</l>
<l>* get_framegrabber_param (NxLib, 'Cameras/BySerialNo/182681/Calibration/Monocular/Left/Distortion/T2', T2)</l>
<l>* gen_cam_par_area_scan_polynomial (6/1000.0, K1, K2, K3, T1, T2, 5.3e-006, 5.3e-006, 1280.2/2.0, 1024.0/2.0, 1280, 1024,\
StartCamParam)</l>
<c></c>
<l>* write_cam_par (StartCamParam, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/13.- Ensenso N35/R2/handEye/CamParR2')</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>* #########################################################################</l>
<c>* alternativa 1</c>
<l>* #########################################################################</l>
<l>Resultado:=0</l>
<l>Procesando:=0</l>
<l>Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<c></c>
<c></c>
<l>while(true)</l>
<l>    Tag_Lectura:='_EV02_O_CmdDatos'         </l>
<l>    Read_EthernetIP_Data (Tag_Lectura, SerialHandle, _EV2_O_CmdDatos)</l>
<l>    Read_EthernetIP_Data (Tag_Lectura, SerialHandle, _EV2_O_CmdDatos)</l>
<c>    </c>
<c>    ***************************************</c>
<c>    ***************************************</c>
<c>    *             BLOQUE 0</c>
<c>    * Capturo la ubicacion  relativa de </c>
<c>    * mangas, sprue, y dimenciones pattern</c>
<c>    ***************************************</c>
<c>    ***************************************</c>
<c>    </c>
<c>    </c>
<l>    if(_EV2_O_CmdDatos=11)       </l>
<c>        </c>
<l>        Bloque_0 (SerialHandle, NxLib, Camera_3, Vector_Estado_Fx, Vector_BD_Core)     </l>
<l>        dev_inspect_ctrl (Vector_BD_Core)        </l>
<l>    endif</l>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    ***************************************</c>
<c>    ***************************************</c>
<c>    *            Consulta BD</c>
<c>    * Envio posicion de elementos del </c>
<c>    * bloque 0, segun pidan</c>
<c>    ***************************************</c>
<c>    ***************************************</c>
<c>    </c>
<l>    if (_EV2_O_CmdDatos&gt;100 and _EV2_O_CmdDatos&lt;=120)</l>
<c>        </c>
<l>        Get_Entidad_To_Go (SerialHandle, Vector_BD_Core, _EV2_O_CmdDatos, TipoSleeve, TipoLoc, TipoLid, Entidad, DiametroSleeve)</l>
<c>        </c>
<l>    endif</l>
<c>    </c>
<c>    </c>
<c>    ***************************************</c>
<c>    ***************************************</c>
<c>    *        Acercamiento a la Manga</c>
<c>    ***************************************</c>
<c>    ***************************************</c>
<l>    if (_EV2_O_CmdDatos=12)</l>
<c>        </c>
<l>*         DiametroSleeve:=100</l>
<l>*         TipoSleeve:='manga'</l>
<l>*         TipoLoc:='LOC02'</l>
<l>         TipoLid:='LID07'</l>
<l>*         Entidad:='manga'</l>
<l>        Get_mangaPituto (NxLib, Camera_3, DiametroSleeve, Parametros_Visualizacion, Valores_Visualizacion, SerialHandle, TipoLoc, TipoLid, Entidad, Vector_BD_Core, PuntoManga, PuntoPituto)</l>
<c>        </c>
<c>        </c>
<c>        </c>
<l>    endif</l>
<c>    </c>
<c>    ***************************************</c>
<c>    ***************************************</c>
<c>    *        Bloque 1 </c>
<c>    *        Rack Tapas</c>
<c>    * Cmd = 220 -&gt; rack 1</c>
<c>    ***************************************</c>
<c>    ***************************************</c>
<l>    if (_EV2_O_CmdDatos=20  )</l>
<l>        Send_Altura_Tapas (SerialHandle, NxLib, Camera_3, _EV2_O_CmdDatos, TipoLid)</l>
<l>    endif</l>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    wait_seconds (0.1)</l>
<c>    </c>
<l>endwhile</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>Visualizar_3D ([Escena3D_RAW], Parametros_Visualizacion, Valores_Visualizacion,1, [], [], [], PoseOut1)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c>*******************************************</c>
<c>* envio los datos a la BD</c>
<c>*******************************************</c>
<c>** genero la Base de datos Mangas</c>
<c>*******************************************</c>
<c></c>
<c></c>
<c></c>
<c></c>
<c>*******************************************</c>
<c></c>
<c></c>
<l>* ########################################</l>
<l>* ###### CORRIMIENTO #####################</l>
<l>* # X-&gt;-2</l>
<l>* # Z-&gt;2</l>
<l>* ########################################</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c>*** ENVIAR DATOS de BASE, Alto largo y ancho ***</c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>CALIBRACIONdeCAMARAfina (NxLib, Camera_3, Vector_Estado_Fx, SerialHandle, Parametros_Visualizacion, Valores_Visualizacion)</l>
<c></c>
<l>* ####################################################################### </l>
<l>* ####################################################################### </l>
<c></c>
<l>Close_Camera_2 (Camera_3, NxLib)</l>
<c></c>
<l>close_serial (SerialHandle)</l>
<l>* ####################################################################### </l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c>****************************************************************************</c>
<c>*                         CONSULTA A BD</c>
<c>* FUNCION QUE LEE DESDE LA BD LA RUTA DE LOS ARCHIVOS SFM PARA CADA SEGMENTO</c>
<c>*</c>
<c>*</c>
<c>*****************************************************************************</c>
<c>* 1.- Se debera extraer el codigo de core que debe ir en cada segmento</c>
<c>* 2.- se debera buscar ese codigo en la BD</c>
<c>* 3. se extraera la ruta del SFM de cada core</c>
<c>* 4.- Entrega en un vector el codigo del Core y la ruta donde esta el SFM</c>
<c>******************************************************************************</c>
<l>* ############################################################################</l>
<l>Get_Cores_BD (Path_CORE_ID, Path_SFM_Segmentos, Path_3D_Segmentos)           </l>
<l>* ############################################################################</l>
<c></c>
<c>*******************************************************************</c>
<c>* 0.1Leo los archivos de referencia de la esquina del pallets</c>
<c>*******************************************************************</c>
<l>* Get_SFM_3D_Pallet (SFM_Pallet, Pallet_3D_Esquina)</l>
<c>*******************************************************************</c>
<c>*                       FIN DE INICIALIZACIONES</c>
<c>*******************************************************************</c>
<c></c>
<c>***********************************************************</c>
<c>*Verifico si SreialBridge esta activo para poder continuar</c>
<c>***********************************************************</c>
<l>Find_SerialBridge (SerialHandle)</l>
<c>***********************************************************</c>
<c></c>
<c></c>
<l>* #### Envio data de estado ########################</l>
<l>Resultado:=0</l>
<l>Procesando:=0</l>
<l>Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<c>*****************************************************</c>
<c></c>
<c></c>
<c>**********************</c>
<l>Consolidado_Vision_R1 (SerialHandle, Vector_Estado_Fx, Path_SFM_Segmentos, Path_3D_Segmentos, Path_CORE_ID, NxLib, Camera_1, AcqHandle_Cam_0, Camera0_Parameters, Camera0_Pose, Parametros_Visualizacion, Valores_Visualizacion)</l>
<c></c>
<l>Close_Camera_2 (Camera_3, NxLib)</l>
<c></c>
<c></c>
<l>close_serial (SerialHandle)</l>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="Set_Config_Cam">
<interface>
<oc>
<par name="AcqHandle" base_type="ctrl" dimension="0"/>
<par name="CameraParameters" base_type="ctrl" dimension="0"/>
<par name="CameraPose" base_type="ctrl" dimension="0"/>
<par name="Conexion_Camara_0" base_type="ctrl" dimension="0"/>
<par name="CalTabFile" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<c></c>
<c>*Parametros de calibracion de la camara</c>
<l>CameraParameters := ['area_scan_polynomial',0.019089,226.612,-547494,2.17334e+007,0.023374,-0.0333038,5.50091e-006,5.5e-006,2472.03,1594.77,4896,3264]</l>
<l>CameraPose := [-0.330897,-0.213789,0.455639,3.05118,359.888,268.927,0]</l>
<c></c>
<c></c>
<l>Conexion_Camara_0:=false</l>
<c></c>
<l>try</l>
<c>    </c>
<c>    *Apertura  y conexion de la camara</c>
<l>    open_framegrabber ('GigEVision', 0, 0, 0, 0, 0, 0, 'default', -1, 'default', -1, 'false', 'default', '000f310262c0_AlliedVisionTechnologies_GT4905C02', 0, -1, AcqHandle)</l>
<l>    set_framegrabber_param (AcqHandle, 'ExposureMode', 'Timed')</l>
<c>    </c>
<l>    set_framegrabber_param (AcqHandle, 'ExposureAuto', 'Off')</l>
<l>    set_framegrabber_param (AcqHandle, 'AcquisitionMode', 'SingleFrame')</l>
<c>    </c>
<l>    grab_image_start (AcqHandle, -1)</l>
<c>    </c>
<l>    set_framegrabber_param (AcqHandle, 'ExposureTimeAbs', 5000.0)</l>
<l>    set_framegrabber_param (AcqHandle, 'Gain', 21.0)</l>
<c>    </c>
<l>    Conexion_Camara_0:=true</l>
<c>    </c>
<c>    * Cargo el Caltab que se debera buscar</c>
<l>    CalTabFile := 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/13.- Ensenso N35/Caltab/Caltab7x7_5.descr'</l>
<c>    </c>
<c>    *************************************************************************************************************</c>
<c>    * Lectura de Pose herramienta respecto a la camara</c>
<c>    *************************************************************************************************************</c>
<c>    </c>
<c>    </c>
<l>    read_pose ('C:/Users/Usuario/Dropbox (MIRS)/1.-Servidor Desarrollo Software/7.-Magotteaux/7.-HandEye/2. procilica/ToolInCamPose_Procilica.dat', \
               ToolInCamPose)</l>
<c>    **************************************************************************************************************</c>
<l>    return () </l>
<c>    </c>
<l>catch (Exception)</l>
<c>    </c>
<l>    Conexion_Camara_0:=false</l>
<c>    </c>
<l>endtry</l>
<l>return () </l>
</body>
<docu id="Set_Config_Cam">
<parameters>
<parameter id="AcqHandle"/>
<parameter id="CalTabFile"/>
<parameter id="CameraParameters"/>
<parameter id="CameraPose"/>
<parameter id="Conexion_Camara_0"/>
</parameters>
</docu>
</procedure>
<procedure name="Conectar_Ensenso_N35_R2">
<interface>
<ic>
<par name="Puerto" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="Conexion_Camara" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* </c>
<l>Conexion_Camara_1 := false</l>
<l>try</l>
<c>    * </c>
<l> *   info_framegrabber ('Ensenso-NxLib', 'device', Information, ValueList)</l>
<l> *   info_framegrabber ('Ensenso-NxLib', 'info_boards', Information, Estado)</l>
<c>    </c>
<c>    * Inicializacion de Arbol y camara estereo</c>
<l>    open_framegrabber ('Ensenso-NxLib', 0, 0, 0, 0, 0, 0, 'default', 0, 'Raw', 'auto_grab_data=0', 'false', 'Item', '/', 0, 0, NxLib)</l>
<l>    open_framegrabber ('Ensenso-NxLib', 0, 0, 0, 0, 0, 0, 'default', 0, 'Raw', 'auto_grab_data=0', 'false', 'Stereo','182681', 0, 0, Camera_1)</l>
<c>    </c>
<l>*    open_framegrabber ('Ensenso-NxLib', 0, 0, 0, 0, 0, 0, 'default', -1, 'default', -1, 'default', 'stereo', '193216', 0, 0, Camera_1)</l>
<c>*</c>
<c>    </c>
<c>    * Abro puerto TCP del Arbol</c>
<l>    set_framegrabber_param(NxLib, 'do_open_tcp_port', Puerto)</l>
<l>    Conexion_Camara_1 := true</l>
<c>    * </c>
<l>    return ()</l>
<l>catch (Exception)</l>
<l>    Conexion_Camara_1 := false</l>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="Conectar_Ensenso_N35_R2">
<parameters>
<parameter id="Camera_1"/>
<parameter id="Conexion_Camara"/>
<parameter id="NxLib"/>
<parameter id="Puerto"/>
</parameters>
</docu>
</procedure>
<procedure name="Close_Camera_2">
<interface>
<ic>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="NxLib_1" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>close_framegrabber (Camera_1)</l>
<l>close_framegrabber (NxLib_1)</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Close_Camera_2">
<parameters>
<parameter id="Camera_1"/>
<parameter id="NxLib_1"/>
</parameters>
</docu>
</procedure>
<procedure name="Adq_Imagen">
<interface>
<oo>
<par name="ModelImage" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>set_framegrabber_param (NxLib, 'do_execute', 'Capture')</l>
<l>set_framegrabber_param (NxLib, 'do_execute', 'ComputeDisparityMap')</l>
<l>set_framegrabber_param (NxLib, 'do_execute', 'ComputePointMap')</l>
<c></c>
<l>*set_framegrabber_param (Camera, 'grab_data_items', ['Images/Rectified/Left','Images/Rectified/Right','Images/PointMap'])</l>
<c>* </c>
<l>grab_data (ModelImage, Regions, Contours, Camera, Data)</l>
<l>return ()</l>
</body>
<docu id="Adq_Imagen">
<parameters>
<parameter id="Camera"/>
<parameter id="ModelImage"/>
<parameter id="NxLib"/>
</parameters>
</docu>
</procedure>
<procedure name="Adq_XYZ_Img">
<interface>
<io>
<par name="ModelImage" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Xm" base_type="iconic" dimension="0"/>
<par name="Ym" base_type="iconic" dimension="0"/>
<par name="Zm" base_type="iconic" dimension="0"/>
</oo>
</interface>
<body>
<l>select_obj (ModelImage, XYZMAP, 3)</l>
<c>* </c>
<c>* Separate the X, Y and Z images</c>
<l>access_channel (XYZMAP, Xm, 1)</l>
<l>access_channel (XYZMAP, Ym, 2)</l>
<l>access_channel (XYZMAP, Zm, 3)</l>
<l>return ()</l>
</body>
<docu id="Adq_XYZ_Img">
<parameters>
<parameter id="ModelImage"/>
<parameter id="Xm"/>
<parameter id="Ym"/>
<parameter id="Zm"/>
</parameters>
</docu>
</procedure>
<procedure name="Close_Camera_0">
<interface>
<ic>
<par name="AcqHandle_Cam_0" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c></c>
<c></c>
<l>Process_Ok:=false</l>
<l>try</l>
<c>    </c>
<l>    close_framegrabber (AcqHandle_Cam_0)     </l>
<l>    Process_Ok:=true</l>
<l>catch (Exception)</l>
<l>endtry</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Close_Camera_0">
<parameters>
<parameter id="AcqHandle_Cam_0"/>
</parameters>
</docu>
</procedure>
<procedure name="Close_All_Cameras">
<interface>
<ic>
<par name="AcqHandle_Cam_0" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="NxLib_1" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Exception" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>try   </l>
<l>    Close_Camera_0 (AcqHandle_Cam_0) </l>
<l>catch (Exception)</l>
<l>endtry</l>
<c></c>
<l>try    </l>
<l>    Close_Camera_2 (Camera_1, NxLib_1)</l>
<l>catch (Exception)</l>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="Close_All_Cameras">
<parameters>
<parameter id="AcqHandle_Cam_0"/>
<parameter id="Camera_1"/>
<parameter id="Exception"/>
<parameter id="NxLib_1"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Image">
<interface>
<oo>
<par name="Image" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="AcqHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>grab_image_async (Image, AcqHandle, -1)</l>
<l>grab_image_async (Image, AcqHandle, -1)</l>
<l>return ()</l>
</body>
<docu id="Get_Image">
<parameters>
<parameter id="AcqHandle"/>
<parameter id="Image"/>
</parameters>
</docu>
</procedure>
<procedure name="Set_exposure_Time_cam_0">
<interface>
<ic>
<par name="AcqHandle_Cam_0" base_type="ctrl" dimension="0"/>
<par name="Time" base_type="ctrl" dimension="0"/>
<par name="Gain" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>    set_framegrabber_param (AcqHandle_Cam_0, 'ExposureTimeAbs', Time)</l>
<l>    set_framegrabber_param (AcqHandle_Cam_0, 'Gain', Gain)</l>
<l>return ()</l>
</body>
<docu id="Set_exposure_Time_cam_0">
<parameters>
<parameter id="AcqHandle_Cam_0"/>
<parameter id="Gain"/>
<parameter id="Time"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_ROI3D_Pallet">
<interface>
<oc>
<par name="ROI3D_NullFrame" base_type="ctrl" dimension="0"/>
<par name="ROI3D_rotate" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Parametros_Visualizacion:=['colored','disp_pose','point_size']</l>
<l>Valores_Visualizacion:= [  12  ,'true',25]</l>
<c></c>
<c></c>
<c></c>
<c>*Creo Plano</c>
<c>*****************************************************</c>
<c>*Dimenciones del cubo/2 en XY en mm</c>
<l>VisualizationPlaneSize:=1000.0/2</l>
<l>Z_alt:=3000</l>
<c>*****************************************************</c>
<c></c>
<l>create_pose (0, 0, 0, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose)</l>
<l>gen_plane_object_model_3d (Pose, [-1,-1,1,1] * VisualizationPlaneSize, [-1,1,1,-1] * VisualizationPlaneSize, Plano)</l>
<l>create_pose (VisualizationPlaneSize, VisualizationPlaneSize, 0, 0, 0, 0, 'Rp+T', 'gba', 'point', PoseEsquina)</l>
<l>rigid_trans_object_model_3d (Plano, PoseEsquina, Plano)</l>
<l>* visualize_object_model_3d (200000, [Plano], [], [], Parametros_Visualizacion, Valores_Visualizacion, [], [], [], PoseOut1)</l>
<c></c>
<c></c>
<l>Trans_X:=[]</l>
<l>Trans_Y:=[]</l>
<l>Ncuadrantes:=3.0</l>
<l> Trans_X[0]:=0</l>
<l>  Trans_Y[0]:=0</l>
<l>for Index := 1 to Ncuadrantes by 1</l>
<l>    Trans_X[Index]:=(VisualizationPlaneSize/(Ncuadrantes))*Index </l>
<l>    Trans_Y[Index]:=(VisualizationPlaneSize/Ncuadrantes)*Index</l>
<l>endfor</l>
<c></c>
<l>Alto_Sector:=VisualizationPlaneSize*2/(Ncuadrantes)</l>
<c></c>
<c></c>
<l>create_pose (0, 0, -1, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose)</l>
<c></c>
<l>create_pose (-Trans_X[1],-Trans_Y[1], Z_alt*0.5, 0, 0, 0, 'Rp+T', 'gba', 'point', PoseEsquina)</l>
<l>gen_box_object_model_3d (Pose, Alto_Sector, Alto_Sector, Z_alt, Plano_1)</l>
<l>rigid_trans_object_model_3d (Plano_1, PoseEsquina, Plano_1)</l>
<c></c>
<c></c>
<l>*visualize_object_model_3d (200000, [ Plano_1,Plano], [], [], Parametros_Visualizacion, Valores_Visualizacion, [], [], [], PoseOut1)</l>
<c></c>
<c></c>
<l>ThreshDistance:=1500</l>
<l>Modelos3d:=[Plano_1]</l>
<l>ROI3D_NullFrame:=[]</l>
<l>Vector_Segmento:=['A','B','C','D','E','F','G','H','I']</l>
<l>for Index_X := 1 to Ncuadrantes by 1</l>
<c>    </c>
<l>    for Index_Y := 1 to Ncuadrantes by 1</l>
<l>        create_pose (2*Trans_X[Index_X], 2*Trans_Y[Index_Y], -ThreshDistance, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose_Trans)       </l>
<l>        rigid_trans_object_model_3d (Modelos3d, Pose_Trans, ObjectModel3DRigidTrans1)</l>
<l>        ROI3D_NullFrame:=[ROI3D_NullFrame,ObjectModel3DRigidTrans1]</l>
<l>        *visualize_object_model_3d (200000, [ ROI3D_NullFrame,Plano], [], [], Parametros_Visualizacion, Valores_Visualizacion, [], [], [], PoseOut1)</l>
<c>        </c>
<l>    endfor</l>
<c>    </c>
<l>endfor</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>ROI3D_rotate:=[]</l>
<l>clear_object_model_3d (ROI3D_rotate)</l>
<c></c>
<l>for Index := 0 to |ROI3D_NullFrame|-1 by 1</l>
<c>    </c>
<l>    copy_object_model_3d (ROI3D_NullFrame[Index], 'all', ROI3D_rotate_Aux)</l>
<l>    ROI3D_rotate:=[ROI3D_rotate,ROI3D_rotate_Aux]</l>
<l>    ROI3D_rotate_Aux:=[]</l>
<c>   </c>
<l>endfor</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>clear_object_model_3d (Modelos3d)</l>
<l>clear_object_model_3d (Plano)</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_ROI3D_Pallet">
<parameters>
<parameter id="ROI3D_NullFrame"/>
<parameter id="ROI3D_rotate"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_ROI_3D">
<interface>
<ic>
<par name="ROI3D" base_type="ctrl" dimension="0"/>
<par name="ObjectModel3D" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Modelo_3D_RED" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>Modelo_3D_RED:=[]</l>
<c></c>
<l>for N_ROI := 0 to |ROI3D|-1 by 1</l>
<l>    get_object_model_3d_params (ROI3D[N_ROI], 'bounding_box1', GenParamValue)</l>
<c>    </c>
<l>    x_min:=GenParamValue[0]</l>
<l>    y_min:=GenParamValue[1]</l>
<l>    z_min:=GenParamValue[2]</l>
<l>    x_max:=GenParamValue[3]</l>
<l>    y_max:=GenParamValue[4]</l>
<l>    z_max:=GenParamValue[5]</l>
<c>    </c>
<l>    select_points_object_model_3d (ObjectModel3D, 'point_coord_z',\
                                   z_min, z_max, ObjectModel3DThresholded)</l>
<l>    select_points_object_model_3d (ObjectModel3DThresholded, 'point_coord_y',\
                                   y_min, y_max, ObjectModel3DThresholded)</l>
<l>    select_points_object_model_3d (ObjectModel3DThresholded, 'point_coord_x',\
                                   x_min, x_max, ObjectModel3DThresholded)</l>
<c>    </c>
<l>    Modelo_3D_RED:=[Modelo_3D_RED,ObjectModel3DThresholded]</l>
<c>    </c>
<l>endfor</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_ROI_3D">
<parameters>
<parameter id="Modelo_3D_RED"/>
<parameter id="ObjectModel3D"/>
<parameter id="ROI3D"/>
</parameters>
</docu>
</procedure>
<procedure name="Set_Max_Altura_Model3D">
<interface>
<ic>
<par name="Modelo_3D_ROI" base_type="ctrl" dimension="0"/>
<par name="Delta_Altura" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Modelo_3D_ROI_Thres" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>try</l>
<c>    </c>
<c>    * Delta altura limita  el Z que necesito</c>
<l>    get_object_model_3d_params (Modelo_3D_ROI, 'bounding_box1', GenParamValue)</l>
<c>    </c>
<l>    x_min:=GenParamValue[0]</l>
<l>    y_min:=GenParamValue[1]</l>
<l>    z_min:=GenParamValue[2]</l>
<l>    x_max:=GenParamValue[3]</l>
<l>    y_max:=GenParamValue[4]</l>
<l>    z_max:=GenParamValue[5]</l>
<c>    </c>
<c>    </c>
<l>*     if (z_max-Delta_Altura &lt;= 0)</l>
<c>        </c>
<l>*         dev_get_exception_data (Exception, 'error_msg', ErrorMsg)</l>
<l>*         return ()</l>
<l>*     endif</l>
<c>    </c>
<l>    select_points_object_model_3d (Modelo_3D_ROI, 'point_coord_z',\
                                   z_min-200, Delta_Altura, Modelo_3D_ROI_Thres)</l>
<c>    </c>
<c>    </c>
<l>catch (Exception)</l>
<l>    dev_get_exception_data (Exception, 'error_msg', ErrorMsg0)</l>
<l>    dev_get_exception_data (Exception, 'procedure', ErrorMsg1)</l>
<l>    dev_get_exception_data (Exception, 'operator', ErrorMsg2)</l>
<l>    dev_get_exception_data (Exception, 'program_line', ErrorMsg3)</l>
<c>    </c>
<l>    MensajeError:=ErrorMsg0+' IN '+ErrorMsg1+' IN FUNTION '+ErrorMsg2+' IN LINE '+ErrorMsg3</l>
<l>    throw (MensajeError)</l>
<l>endtry</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Set_Max_Altura_Model3D">
<parameters>
<parameter id="Delta_Altura"/>
<parameter id="Modelo_3D_ROI"/>
<parameter id="Modelo_3D_ROI_Thres"/>
</parameters>
</docu>
</procedure>
<procedure name="Find_Entity_3D">
<interface>
<ic>
<par name="N_matches" base_type="ctrl" dimension="0"/>
<par name="SFM" base_type="ctrl" dimension="0"/>
<par name="Modelo_imagen_3d" base_type="ctrl" dimension="0"/>
<par name="Sampling_Find" base_type="ctrl" dimension="0"/>
<par name="Keypoint" base_type="ctrl" dimension="0"/>
<par name="MinScore" base_type="ctrl" dimension="0"/>
<par name="Perno_Ref_Cam0" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="PoseMLS" base_type="ctrl" dimension="0"/>
<par name="ScoreMLS" base_type="ctrl" dimension="0"/>
<par name="PoseREFIN" base_type="ctrl" dimension="0"/>
<par name="ScoreREFIN" base_type="ctrl" dimension="0"/>
<par name="SurfaceMatchingResultID1" base_type="ctrl" dimension="0"/>
<par name="ObjectModel3DResultMLS" base_type="ctrl" dimension="0"/>
<par name="ObjectModel3DResultMLS_REFIN" base_type="ctrl" dimension="0"/>
<par name="Estado_Funcion" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* </c>
<l>Estado_Funcion := true</l>
<l>try</l>
<c>    * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = "Buscando Objeto";</c>
<c>    * </c>
<c>    * ***************************************</c>
<c>    * 1.Parametros de control</c>
<c>    * ***************************************</c>
<l>    GenParamName := ['num_matches','scene_normal_computation','pose_ref_scoring_dist_rel']</l>
<l>    GenParamValue := [N_matches   ,          'mls'           ,              0.01         ]</l>
<c>    </c>
<c>    </c>
<l>   GenParamName := ['num_matches']</l>
<l>    GenParamValue := [N_matches     ]</l>
<c>    * </c>
<c>    </c>
<c>    * </c>
<c>    * ***************************************</c>
<c>    * 2.Busqueda de entidad</c>
<c>    * ***************************************</c>
<l>    find_surface_model (SFM, Modelo_imagen_3d, Sampling_Find, Keypoint, MinScore, 'true', GenParamName, GenParamValue, PoseMLS, ScoreMLS, SurfaceMatchingResultIDMLS)</l>
<c>    * ***************************************</c>
<l>    if (|PoseMLS|)</l>
<c>        </c>
<c>        </c>
<c>        * 3.Refinar busqueda</c>
<c>        * ***************************************</c>
<l>        refine_surface_model_pose (SFM, Modelo_imagen_3d, PoseMLS, 0, 'false', 'pose_ref_sub_sampling', 2, PoseREFIN, ScoreREFIN, SurfaceMatchingResultID1)</l>
<c>        * ***************************************</c>
<c>        * 4.Translacion de objeto</c>
<c>        * ***************************************</c>
<c></c>
<l>        rigid_trans_object_model_3d (Perno_Ref_Cam0, PoseMLS, ObjectModel3DResultMLS)</l>
<l>        rigid_trans_object_model_3d (Perno_Ref_Cam0, PoseREFIN, ObjectModel3DResultMLS_REFIN)</l>
<c>        * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = "Objeto encontrado con una PROBABILIDAD de " + hv_ScoreMLS*100.ToString() ;</c>
<l>        Estado_Funcion := true</l>
<l>        return()</l>
<c>        </c>
<l>    endif</l>
<c>    </c>
<l>    Estado_Funcion := false</l>
<l>catch (Exception)</l>
<l>    Estado_Funcion := false</l>
<c>    * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = Fx_Aux.ErrorCatch(HDevExpDefaultException1);</c>
<c>    * </c>
<l>endtry</l>
<c>* </c>
<c>* </c>
<l>return ()</l>
</body>
<docu id="Find_Entity_3D">
<parameters>
<parameter id="Estado_Funcion"/>
<parameter id="Keypoint"/>
<parameter id="MinScore"/>
<parameter id="Modelo_imagen_3d"/>
<parameter id="N_matches"/>
<parameter id="ObjectModel3DResultMLS"/>
<parameter id="ObjectModel3DResultMLS_REFIN"/>
<parameter id="Perno_Ref_Cam0"/>
<parameter id="PoseMLS"/>
<parameter id="PoseREFIN"/>
<parameter id="SFM"/>
<parameter id="Sampling_Find"/>
<parameter id="ScoreMLS"/>
<parameter id="ScoreREFIN"/>
<parameter id="SurfaceMatchingResultID1"/>
</parameters>
</docu>
</procedure>
<procedure name="FALSEO_ADQ_FOTO">
<interface>
<oo>
<par name="ReferenciaEsquina" base_type="iconic" dimension="0"/>
<par name="ObjectSelected" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
<par name="Z" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ObjectModel3D1" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<c></c>
<l>read_object (ReferenciaEsquina, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/18.- Imagenes_IngSoft/0 Ensenso/Pallet_011.hobj')</l>
<c></c>
<l>select_obj (ReferenciaEsquina, ObjectSelected, 3)</l>
<l>decompose3 (ObjectSelected, X, Y, Z)</l>
<l>xyz_to_object_model_3d (X, Y, Z, ObjectModel3D1)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="FALSEO_ADQ_FOTO">
<parameters>
<parameter id="ObjectModel3D1"/>
<parameter id="ObjectSelected"/>
<parameter id="ReferenciaEsquina"/>
<parameter id="SerialHandle"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Esquina">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Cross" base_type="iconic" dimension="0"/>
<par name="ImageOut" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="phi" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Row" base_type="ctrl" dimension="0"/>
<par name="Col" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>ImageOut := Image</l>
<l>Estado_Funcion:=0</l>
<l>Rango_Seguridad_Ditancia_puntos:=500</l>
<c></c>
<c></c>
<l>get_image_size (ImageOut, Width, Height)</l>
<l>hom_mat2d_identity (HomMat2DIdentity)</l>
<l>hom_mat2d_rotate (HomMat2DIdentity, rad(phi), Width/2, Height/2, HomMat2DRotate)</l>
<c>* Apply an arbitrary affine transformation to an image</c>
<l>affine_trans_image (Image, Image, HomMat2DRotate, 'constant', 'false')</l>
<c>* </c>
<c></c>
<c>* *************************************</c>
<c>* Segmentacion de esquina</c>
<c>* *************************************</c>
<l>Altura_Pallet:= 1000</l>
<l>Ditancia_camara_Piso:=1700</l>
<l>Rango_Seg:=50</l>
<l>Rango_posible_borde_pallet:=Ditancia_camara_Piso-Altura_Pallet</l>
<c></c>
<l>threshold (Image, ROI_0, Rango_posible_borde_pallet-Rango_Seg, Rango_posible_borde_pallet+Rango_Seg)</l>
<c></c>
<l>reduce_domain (Image, ROI_0, ImageReduced1)</l>
<c></c>
<c></c>
<c>* *************************************</c>
<c>* detecction de bordes</c>
<c>* *************************************</c>
<l>connection (ROI_0, ConnectedRegions)</l>
<l>fill_up (ConnectedRegions, ConnectedRegions)</l>
<l>select_shape (ConnectedRegions, SelectedRegions, 'area', 'and', 60000, 99912+1000)</l>
<c>* </c>
<c>* *********************************************</c>
<c>* contabilizo el numero de objetos encontrados</c>
<l>count_obj (SelectedRegions, Number)</l>
<c>* **********************************************</c>
<c></c>
<l>erosion_circle (SelectedRegions, RegionErosion, 3.5)</l>
<c></c>
<l>dilation_circle (SelectedRegions, RegionDilation1, 15)</l>
<l>reduce_domain (Image, RegionDilation1, ImageReduced2)</l>
<c>* </c>
<l>reduce_domain (Image, RegionErosion, ImageReduced3)</l>
<c>* </c>
<l>dev_set_color ('blue')</l>
<c>* </c>
<l>get_region_polygon (SelectedRegions, 2, Row, Col)</l>
<l>gen_region_polygon (Pol, Row, Col)</l>
<c></c>
<c></c>
<c>* **********************************************</c>
<c>* Generacion de poligono</c>
<c>* *********************************************</c>
<l>gen_region_polygon_filled (Pol, Row, Col)</l>
<c>* </c>
<c>* </c>
<l>reduce_domain (Image, Pol, Esquina)</l>
<c>* </c>
<l>gen_image_proto (Image, ImageCleared, 255)</l>
<l>gen_image_proto (Image, ImageCleared2, 128)</l>
<c>* </c>
<l>threshold (ImageCleared, IMG, 0, 255)</l>
<l>difference (IMG, Esquina, RegionDifference)</l>
<c>* </c>
<l>reduce_domain (ImageCleared, RegionDifference, Esquina)</l>
<c>* </c>
<c>* </c>
<l>paint_region (RegionDifference, ImageCleared, EsquinaIMG, 10, 'fill')</l>
<c>* </c>
<c>* </c>
<c>* **********************************************</c>
<c>* Harrys</c>
<c>* **********************************************</c>
<c>* </c>
<l>derivate_gauss (EsquinaIMG, DerivGauss, 1, 'yyy')</l>
<l>gauss_filter (DerivGauss, DerivGauss2, 11)</l>
<c></c>
<l>SigmaGrad := 1</l>
<l>SigmaSmooth :=5</l>
<l>Threshold := 1000</l>
<l>* dev_display (Image)</l>
<l>points_harris (DerivGauss, SigmaGrad, SigmaSmooth, 0.04, Threshold, Row, Col)</l>
<l>gen_cross_contour_xld (Cross, Row, Col, 30, rad(45))</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>* dev_set_line_width (2)</l>
<l>* dev_display (EsquinaIMG)</l>
<l>* dev_set_color ('red')</l>
<l> dev_display (Cross)</l>
<l>* dev_set_color ('red')</l>
<c></c>
<c> </c>
<l> for Index1 := 0 to |Row-1| by 1</l>
<c>     </c>
<l>    * disp_line (200000, Row[Index1], Col[Index1],Row[Index1+1], Col[Index1+1])</l>
<c>    </c>
<c>     </c>
<l> endfor</l>
<c></c>
<l>if (|Row|)</l>
<c>    *BUSCO LA FILA Y COL MAS PEQUEÑA</c>
<c>    </c>
<l>    Puntero_Menor:=0</l>
<l>    Puntero_Mayor:=0</l>
<l>    Puntero_Menor_Col:=0</l>
<l>    Puntero_Menor_Row:=0</l>
<l>    for Index := 0 to |Row|-1 by 1</l>
<c>        </c>
<c></c>
<l>        if((Col[Puntero_Menor]  &gt;  Col[Index]) )</l>
<l>            Puntero_Menor:=Index</l>
<l>        endif</l>
<c>        </c>
<l>         if((Row[Puntero_Mayor]  &lt;  Row[Index]) )</l>
<l>            Puntero_Mayor:=Index</l>
<l>        endif         </l>
<c>        </c>
<c>        </c>
<l>    endfor</l>
<c>    </c>
<l>    gen_cross_contour_xld (Crossw1, Row[Puntero_Menor], Col[Puntero_Menor], 80, rad(45))</l>
<l>    gen_cross_contour_xld (Crossw2, Row[Puntero_Mayor], Col[Puntero_Mayor], 80, rad(45))    </l>
<c>    </c>
<l>    distance_pp ( Row[Puntero_Menor], Col[Puntero_Menor],  Row[Puntero_Mayor], Col[Puntero_Mayor], Distance)</l>
<c>    </c>
<c> </c>
<l>    dev_clear_window()</l>
<l>    gen_cross_contour_xld (Cross, Row, Col, 30, rad(45))</l>
<l>    gen_cross_contour_xld (Crossw1,  Row[Puntero_Menor], Col[Puntero_Menor], 80, rad(45))</l>
<l>    gen_cross_contour_xld (Crossw2, Row[Puntero_Mayor], Col[Puntero_Mayor], 80, rad(45))</l>
<l>    dev_display (EsquinaIMG)</l>
<l>    dev_set_color ('red')</l>
<l>    dev_display (Crossw1)</l>
<l>    dev_display (Crossw2)</l>
<c>    </c>
<c>    </c>
<l>    disp_line (200000, Row[Puntero_Menor], Col[Puntero_Menor],Row[Puntero_Mayor], Col[Puntero_Mayor])</l>
<c>   </c>
<l>    disp_line (200000, Row[Puntero_Mayor], 0,Row[Puntero_Mayor], Col[Puntero_Mayor])</l>
<l>    disp_line (200000, Row[Puntero_Menor], Col[Puntero_Menor],Height,  Col[Puntero_Menor])</l>
<c>    </c>
<c> </c>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    Estado_Funcion:=1</l>
<l>else</l>
<c>    </c>
<c>    </c>
<l>    Estado_Funcion:=0  </l>
<l>endif</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Esquina">
<parameters>
<parameter id="Col"/>
<parameter id="Cross"/>
<parameter id="Image"/>
<parameter id="ImageOut"/>
<parameter id="Row"/>
<parameter id="phi"/>
</parameters>
</docu>
</procedure>
<procedure name="Set_SFM_Esquina_Pallet">
<interface>
<io>
<par name="Z" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="Rango_posible_borde_pallet" base_type="ctrl" dimension="0"/>
<par name="Rango_Seg" base_type="ctrl" dimension="0"/>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>threshold (Z, Regions, Rango_posible_borde_pallet-Rango_Seg, Rango_posible_borde_pallet+Rango_Seg)</l>
<l>reduce_domain (Z, Regions, ImageReduced)</l>
<c></c>
<l>gen_rectangle1 (ROI_0, 62.5246, 134.286, 222.187, 1067.42)</l>
<c></c>
<l>reduce_domain (ImageReduced, ROI_0, ImageReduced_Z)</l>
<l>xyz_to_object_model_3d (X, Y, ImageReduced_Z, Esquina_Ref)</l>
<l>compose3 (X, Y, ImageReduced_Z, MultiChannelImage)</l>
<c></c>
<l>create_pose (-486, 573, -1590, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose)</l>
<l>rigid_trans_object_model_3d (Esquina_Ref, Pose, ObjectModel3DRigidTrans)</l>
<l>visualize_object_model_3d (200000, [ObjectModel3DRigidTrans], [], [], Parametros_Visualizacion, Valores_Visualizacion, [], [], [], PoseOut1)</l>
<c></c>
<l>create_pose (0, 0, 0, 0, 0, -90, 'Rp+T', 'gba', 'point', Pose)</l>
<l>rigid_trans_object_model_3d (ObjectModel3DRigidTrans, Pose, ObjectModel3DRigidTrans)</l>
<l>visualize_object_model_3d (200000, [ObjectModel3DRigidTrans], [], [], Parametros_Visualizacion, Valores_Visualizacion, [], [], [], PoseOut1)</l>
<c></c>
<l>create_pose (0, 0, 0, 180, 0, 0, 'Rp+T', 'gba', 'point', Pose)</l>
<l>rigid_trans_object_model_3d (ObjectModel3DRigidTrans, Pose, ObjectModel3DRigidTrans)</l>
<l>visualize_object_model_3d (200000, [ObjectModel3DRigidTrans], [], [], Parametros_Visualizacion, Valores_Visualizacion, [], [], [], PoseOut1)</l>
<c></c>
<l>create_pose (0, 950, 0, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose)</l>
<l>rigid_trans_object_model_3d (ObjectModel3DRigidTrans, Pose, ObjectModel3DRigidTrans)</l>
<l>visualize_object_model_3d (200000, [ObjectModel3DRigidTrans], [], [], Parametros_Visualizacion, Valores_Visualizacion, [], [], [], PoseOut1)</l>
<c></c>
<l>create_pose (-50, 0, 0, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose)</l>
<l>rigid_trans_object_model_3d (ObjectModel3DRigidTrans, Pose, ObjectModel3DRigidTrans)</l>
<l>visualize_object_model_3d (200000, [ObjectModel3DRigidTrans], [], [], Parametros_Visualizacion, Valores_Visualizacion, [], [], [], PoseOut1)</l>
<c></c>
<l>create_pose (0, 0, 0, 0, 0, -3, 'Rp+T', 'gba', 'point', Pose)</l>
<l>rigid_trans_object_model_3d (ObjectModel3DRigidTrans, Pose, ObjectModel3DRigidTrans)</l>
<l>visualize_object_model_3d (200000, [ObjectModel3DRigidTrans], [], [], Parametros_Visualizacion, Valores_Visualizacion, [], [], [], PoseOut1)</l>
<c></c>
<c></c>
<c>*****************************************</c>
<l>Sampling:=0.03</l>
<l>surface_normals_object_model_3d (ObjectModel3DRigidTrans, 'mls', [], [], ObjectModel3DNormals)</l>
<l>triangulate_object_model_3d (ObjectModel3DNormals, 'greedy', [], [], ObjectModel3DNormals, Information)</l>
<l>visualize_object_model_3d (200000, [ObjectModel3DNormals], [], [], Parametros_Visualizacion, Valores_Visualizacion, [], [], [], PoseOut1)</l>
<c></c>
<l>create_surface_model (ObjectModel3DNormals, Sampling, 'train_3d_edges', 'true', SurfaceModelID)</l>
<c></c>
<l>visualize_object_model_3d (200000,[ObjectModel3DNormals], [], [], Parametros_Visualizacion, Valores_Visualizacion, [], [], [], PoseOut1)</l>
<c></c>
<l>write_surface_model (SurfaceModelID, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/SFM_PALLET/SFM_Pallet.sfm')</l>
<l>write_object_model_3d (ObjectModel3DNormals, 'om3', 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/SFM_PALLET/3D_Pallet.om3', [], [])</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Set_SFM_Esquina_Pallet">
<parameters>
<parameter id="Parametros_Visualizacion"/>
<parameter id="Rango_Seg"/>
<parameter id="Rango_posible_borde_pallet"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_SFM_3D_Pallet">
<interface>
<oc>
<par name="SFM_Pallet" base_type="ctrl" dimension="0"/>
<par name="Pallet_3D_Esquina" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>read_surface_model ('D:/AI/Vision Artificial/4.-MAGOTTEAUX/SFM_PALLET/SFM_Pallet_beta.sfm', SFM_Pallet)</l>
<l>read_object_model_3d ('D:/AI/Vision Artificial/4.-MAGOTTEAUX/SFM_PALLET/3D_Pallet_beta.om3', 1, [], [], Pallet_3D_Esquina, Status)</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_SFM_3D_Pallet">
<parameters>
<parameter id="Pallet_3D_Esquina"/>
<parameter id="SFM_Pallet"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_ObjectModel3D_Util">
<interface>
<io>
<par name="Z" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
<par name="ImgLeftCamera_Esq" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="Rango_posible_borde_pallet" base_type="ctrl" dimension="0"/>
<par name="Rango_Seg" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ObjectModel3D" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Parametros_Visualizacion:=['colored','disp_pose','point_size']</l>
<l>Valores_Visualizacion:= [  12  ,'true',1]</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>threshold (ImgLeftCamera_Esq, Esquina, 180, 255)</l>
<c></c>
<l>connection (Esquina, ConnectedRegions)</l>
<l>select_shape_std (ConnectedRegions, SelectedRegions, 'max_area', 90)</l>
<c></c>
<c></c>
<l>reduce_domain (Z, Esquina, ImageReduced)</l>
<c></c>
<c></c>
<l>reduce_domain (Z, SelectedRegions, Zred)</l>
<c></c>
<l>*#################################################</l>
<c>**Funcion para  hacer la sfm de la esquina</c>
<l>*MakeSFM_Palletr (Esquina, Z, X, Y, ConnectedRegions, SelectedRegions, ImageReduced,\
                 MultiChannelImage, Parametros_Visualizacion, Valores_Visualizacion, Esquina3D, Pose, \
                 Esquina3D_Trans, Pose1, PoseOut1, Sampling, SurfaceModelID, ObjectModel3DNormals, Esquina_Tri, Information)</l>
<l>*#################################################</l>
<c></c>
<c></c>
<l>xyz_to_object_model_3d (X, Y, ImageReduced, ObjectModel3D)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_ObjectModel3D_Util">
<parameters>
<parameter id="ImgLeftCamera_Esq"/>
<parameter id="ObjectModel3D"/>
<parameter id="Rango_Seg"/>
<parameter id="Rango_posible_borde_pallet"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Rotate_ROI3D">
<interface>
<ic>
<par name="Pose_Refinada" base_type="ctrl" dimension="0"/>
<par name="ROI3D_rotate" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Pose_Segmentos" base_type="ctrl" dimension="0"/>
<par name="ROI3D_rotateOut" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<c></c>
<c></c>
<l>ROI3D_rotateOut := ROI3D_rotate</l>
<c>* Variable para asegurarme que tome lo sque existe por sobre el pallet</c>
<c></c>
<l>Z_Seguridad:=800</l>
<c></c>
<c></c>
<l>create_pose (Pose_Refinada[0], Pose_Refinada[1], Pose_Refinada[2]-Z_Seguridad,\
             Pose_Refinada[3], Pose_Refinada[4], Pose_Refinada[5], 'Rp+T', 'gba', 'point', Pose_Segmentos)</l>
<c></c>
<l>rigid_trans_object_model_3d (ROI3D_rotateOut, Pose_Segmentos, ROI3D_rotateOut)</l>
<l>return ()</l>
</body>
<docu id="Get_Rotate_ROI3D">
<parameters>
<parameter id="Pose_Refinada"/>
<parameter id="Pose_Segmentos"/>
<parameter id="ROI3D_rotate"/>
<parameter id="ROI3D_rotateOut"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Core_Presence_In_Pallet">
<interface>
<io>
<par name="Z" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
<par name="ImgLeftCamera_Esq" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
<par name="Pose_Robot" base_type="ctrl" dimension="2"/>
<par name="N_Pallet_to_Scan" base_type="ctrl" dimension="0"/>
<par name="Path_SFM_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_3D_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet" base_type="ctrl" dimension="0"/>
<par name="Path_CORE_ID" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="Base_esquina" base_type="ctrl" dimension="0"/>
<par name="Visualizar3D" base_type="ctrl" dimension="0"/>
<par name="Estado_Fx" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Estado_SubProceso" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Parametros_Visualizacion:=['colored','disp_pose','point_size']</l>
<l>Valores_Visualizacion:= [  12  ,'true',1]</l>
<c></c>
<c></c>
<c>******************************************</c>
<c>*1.- Obtengo el ROI3D del PALLET</c>
<c>******************************************</c>
<l>Vector_Segmento:=['A','B','C','D','E','F','G','H','I']</l>
<c></c>
<l>try</l>
<l>    Get_ROI3D_Pallet (ROI3D_NullFrame, ROI3D_rotate)  </l>
<c>    </c>
<l>catch (Exception)</l>
<l>    dev_get_exception_data (Exception, 'error_msg', ErrorMsg0)</l>
<l>    dev_get_exception_data (Exception, 'procedure', ErrorMsg1)</l>
<l>    dev_get_exception_data (Exception, 'operator', ErrorMsg2)</l>
<l>    dev_get_exception_data (Exception, 'program_line', ErrorMsg3)</l>
<c>    </c>
<l>    MensajeError:=ErrorMsg0+' IN '+ErrorMsg1+' IN FUNTION '+ErrorMsg2+' IN LINE '+ErrorMsg3</l>
<l>    Mensaje:=MensajeError</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<c>    </c>
<l>* #### Envio data de estado ########################</l>
<l>    Procesando:=0</l>
<l>    Estado:=5</l>
<l>    Resultado:=2</l>
<l>    Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* ################################################## </l>
<c>    </c>
<l>    Msg_Sub_Proceso:='#Error# '+MensajeError</l>
<l>    return()</l>
<l>endtry</l>
<c></c>
<c></c>
<l>* ########################################################</l>
<c>*                    constantes </c>
<c>******************************************</c>
<c>*2.- Busco la esquina de la caja con cores</c>
<c>******************************************</c>
<c>* Filtro para buscar solo el borde en [mm]</c>
<c>* Variables de  valor constante</c>
<l>Altura_Pallet:= 600</l>
<l>Distancia_camara_Piso_Pallet:=2340</l>
<l>Rango_Seguridad:=200</l>
<l>Rango_posible_borde_pallet:=Distancia_camara_Piso_Pallet-Altura_Pallet</l>
<l>* ########################################################</l>
<l>try   </l>
<l>    Get_ObjectModel3D_Util (Z, X, Y, ImgLeftCamera_Esq, Rango_posible_borde_pallet, Rango_Seguridad, ObjectModel3D_Borde_Pallet)</l>
<l>catch (Exception)</l>
<l>    dev_get_exception_data (Exception, 'error_msg', ErrorMsg0)</l>
<l>    dev_get_exception_data (Exception, 'procedure', ErrorMsg1)</l>
<l>    dev_get_exception_data (Exception, 'operator', ErrorMsg2)</l>
<l>    dev_get_exception_data (Exception, 'program_line', ErrorMsg3)</l>
<c>    </c>
<l>    MensajeError:=ErrorMsg0+' IN '+ErrorMsg1+' IN FUNTION '+ErrorMsg2+' IN LINE '+ErrorMsg3</l>
<l>*     throw (MensajeError)</l>
<c>    </c>
<l>* #### Envio data de estado ###############################</l>
<l>    Procesando:=0</l>
<l>    Estado:=5</l>
<l>    Resultado:=2</l>
<l>    Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* ########################################################    </l>
<l>    return()</l>
<l>endtry</l>
<c></c>
<c>******************************************************************************************************************************</c>
<l>Visualizar_3D ([ObjectModel3D_Borde_Pallet,Escena3D_RAW], Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, [], [], [], PoseOut1)</l>
<c>******************************************************************************************************************************</c>
<c></c>
<c></c>
<c>***************************************************</c>
<c>*       -&gt; OLD CODE &lt;-</c>
<c>* SE BUSCA CON PROCESAMIENTO DE IMAGENES</c>
<c>* SE MANTIENE POR COMPATIBILIDAD</c>
<c>* 2.2 Busco la esquina del palelt con SFM</c>
<c>*</c>
<c>* Parametros de control</c>
<c>***************************************************</c>
<l>*OldCode (Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, ObjectModel3D_Borde_Pallet, Vector_Estado_Fx, SerialHandle, SurfaceModelID, ObjectModel3D, Status, PoseOut1, Sampling, Sampling_Find, Keypoint, MinScore, N_matches, SFM, Escena3D, Objeto3D, Estado, PoseMLS, ScoreMLS, Pose_Refinada, Score_Refinado, SurfaceMatchingResultID1, Posicion3D_Objeto, Posicion3D_Objeto_REFIN, Obj_Detectado_EsquinaPallets)</l>
<c></c>
<c></c>
<c></c>
<c>*******************************************************</c>
<c>* Envio informacion de la esquina encontrada al Robot</c>
<c>*******************************************************</c>
<l>if (Estado_Fx)</l>
<l>   *  Visualizar_3D ( [ObjectModel3D_Borde_Pallet,Posicion3D_Objeto_REFIN,Escena3D_RAW], Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, [], [], [], PoseOut1)</l>
<c>    </c>
<c>    </c>
<c>    *******************************************************  </c>
<c>    </c>
<c>    </c>
<c>    </c>
<l>* ############### GUARDAR  POSICION ESQUINA REFERENTE A LA BASE ####################################</l>
<l>* ### Debo conocer la transformada</l>
<l>* ### Guardar la posicion de la camara al NULLFRAME del robot.</l>
<l>* ###################################################################################################   </l>
<c>    </c>
<c></c>
<l>    Save_Pose_Palle (SerialHandle, Base_esquina, N_Pallet_to_Scan, Pose_Robot)</l>
<c>    </c>
<l>* ###################################################################################################    </l>
<c>    </c>
<c>    * Enviar datos al Robot de Posicion de la esquia del pallet respecto a la brida</c>
<c>    * Es necesario convertir la coordenada  </c>
<l>*    Send_Data_To_Robot (Base_esquina, SerialHandle)  </l>
<l>    Get_ObjInBasePose (Base_esquina, Pose_Robot, ObjInBasePose)</l>
<c>    </c>
<l>* ###################################################################################################    </l>
<c>    </c>
<c>    </c>
<l>else</l>
<c>    ********************************</c>
<c>    * Enviar por ETHERNETIP</c>
<c>    ********************************</c>
<c>    </c>
<l>* #### Envio data de estado ############################################################################</l>
<c>    </c>
<l>    Estado:=7</l>
<l>    Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* #######################################################################################################</l>
<c>    </c>
<c>    </c>
<l>    return()</l>
<c>    </c>
<l>endif</l>
<c></c>
<c></c>
<l>* ####################################################</l>
<l>* ##### ROTO EL ROI 3D ###############################</l>
<l>* ####################################################</l>
<l>Mensaje:='Rotando ROI'</l>
<l>Send_Data_Info (Mensaje, SerialHandle)</l>
<l>Rototate_ROI (Base_esquina, ROI3D_rotate, Escena3D_RAW, Parametros_Visualizacion, Valores_Visualizacion, \
              Visualizar3D, Vector_Segmento, Pose_Segmentos, ROI3D_rotate)</l>
<l>* ####################################################</l>
<c></c>
<c></c>
<l>* ####################################################################</l>
<l>* ####################################################################</l>
<l>* ################# BUSQUEDA DE CORES EN EL PALLET ###################</l>
<l>* ####################################################################</l>
<l>* ####################################################################</l>
<c>* 3.- Encuentro el orden y los segementos en que estan distribuidos los cores en el applet</c>
<c></c>
<l>Get_Vector_Entidades (Vector_ID_Core_by_Segment_Pallet, Vector_Entidades_Segmento)</l>
<c></c>
<c></c>
<l>try</l>
<c>    </c>
<c>    </c>
<c>    *********************************************************</c>
<c>    * ROI 3D sectorizado de cada elemento</c>
<c>    * Busco de manera sectorizada cara core en el pallet</c>
<c>    *********************************************************</c>
<c>    * Estructura de vector</c>
<l>* ############################</l>
<l>* ### CORE ## Existencia #####</l>
<l>* ############################</l>
<l>    Vector_Existencia_Core:={{[]}}</l>
<l>    Vector_Existencia_Core.at(0).at(0):='CORE'</l>
<l>    Vector_Existencia_Core.at(0).at(1):='Existencia'</l>
<c>    </c>
<l>* #### Envio data de estado ########################</l>
<l>    Estado:=8</l>
<l>    Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* ################################################## </l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    Sampling:=0.05</l>
<l>    Find_Sector_Core (Vector_ID_Core_by_Segment_Pallet, \
                      Vector_Entidades_Segmento, Path_CORE_ID, Path_3D_Segmentos, Path_SFM_Segmentos, \
                      ROI3D_rotate, Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D,\
                      Vector_Segmento, Escena3D_RAW, Sampling, SerialHandle, Vector_Existencia_Core, \
                      Vector_Estado_Fx, Vector_Existencia_Core_New)</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>* #### Envio data de estado ########################</l>
<l>    Procesando:=1</l>
<l>    Estado:=13</l>
<l>    Resultado:=0</l>
<c></c>
<l>* ################################################## </l>
<c>    </c>
<c>    </c>
<c>    *Escritura de Vector_Existencia_Core_New</c>
<c>    </c>
<l>    Variable_PLC_Existencia:='_EV01_I_Pallet'+N_Pallet_to_Scan+'ZValid.'</l>
<c>    </c>
<l>    for j := 1 to Vector_Existencia_Core_New.length()-1 by 1</l>
<l>        Estado_SubProceso:=false</l>
<l>        Tag_Destino:=Variable_PLC_Existencia+(j)</l>
<l>        Valor_Variable:=Vector_Existencia_Core_New.at(j).at(1)</l>
<l>        Send_EthernetIP_Data (Tag_Destino, Valor_Variable, SerialHandle)</l>
<l>        wait_seconds (0.05)</l>
<l>    endfor</l>
<c>    </c>
<l>    ValorVector:=Vector_Existencia_Core_New.length()-1</l>
<l>    if (ValorVector &gt;1)</l>
<l>        Mensaje:='Elementos encontrados en Pallet  '+N_Pallet_to_Scan</l>
<l>        Send_Data_Info (Mensaje, SerialHandle)</l>
<l>* #### Envio data de estado ########################</l>
<l>        Procesando:=0</l>
<l>        Resultado:=1</l>
<l>        Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* ################################################## </l>
<l>    else</l>
<c>        </c>
<l>* #### Envio data de estado ########################</l>
<l>         Mensaje:='### ERROR ### No se encontro nada que validar en pallet '+N_Pallet_to_Scan</l>
<l>        Send_Data_Info (Mensaje, SerialHandle)</l>
<l>        Procesando:=0</l>
<l>        Resultado:=2</l>
<l>        Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>        Mensaje:='### ERROR ###'</l>
<l>        Send_Data_Info (Mensaje, SerialHandle)</l>
<l>* ################################################## </l>
<l>    endif</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>catch (Exception)</l>
<l>    Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<c>    </c>
<c>    </c>
<l>* #### Envio data de estado ########################</l>
<l>    Procesando:=0</l>
<l>    Estado:=6</l>
<l>    Resultado:=2</l>
<l>    Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>    Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<c>    </c>
<l>* ################################################## </l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    return()</l>
<l>endtry</l>
<c></c>
<c></c>
<c></c>
<c>*****************************************</c>
<c>*Borrar 3D</c>
<l>clear_object_model_3d ([ROI3D_rotate,ROI3D_NullFrame,Escena3D_RAW,ObjectModel3D_Borde_Pallet])</l>
<l>return ()</l>
</body>
<docu id="Get_Core_Presence_In_Pallet">
<parameters>
<parameter id="Base_esquina"/>
<parameter id="Escena3D_RAW"/>
<parameter id="Estado_Fx"/>
<parameter id="Estado_SubProceso"/>
<parameter id="ImgLeftCamera_Esq"/>
<parameter id="N_Pallet_to_Scan"/>
<parameter id="Path_3D_Segmentos"/>
<parameter id="Path_CORE_ID"/>
<parameter id="Path_SFM_Segmentos"/>
<parameter id="Pose_Robot"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet"/>
<parameter id="Visualizar3D"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Cores_BD">
<interface>
<oc>
<par name="Path_CORE_ID" base_type="ctrl" dimension="0"/>
<par name="Path_SFM_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_3D_Segmentos" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c>* Cores en BD</c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>list_files ('D:/AI/Vision Artificial/4.-MAGOTTEAUX/SFM_CORES', 'directories', Archivos)</l>
<c>* </c>
<l>Cores := ''</l>
<l>for Index1 := 0 to |Archivos|-1 by 1</l>
<c>    * </c>
<l>    tuple_split (Archivos[Index1], '\\', CoreAux)</l>
<l>    largo_CoreAux := |CoreAux|</l>
<l>    Cores[Index1] := CoreAux[largo_CoreAux-1]</l>
<c>    * </c>
<l>endfor</l>
<c></c>
<l>Path_CORE_ID:=Cores</l>
<c></c>
<c>** FALSEANDO ENTREGA DE INFO **</c>
<l>Path:='D:/AI/Vision Artificial/4.-MAGOTTEAUX/SFM_CORES/'</l>
<c></c>
<l>list_files ('D:/AI/Vision Artificial/4.-MAGOTTEAUX/SFM_CORES', 'files', Files)</l>
<c></c>
<l>for j := 0 to |Path_CORE_ID|-1 by 1</l>
<l> Path_SFM_Segmentos[j]:=Path+Path_CORE_ID[j]+'/'+Path_CORE_ID[j]+'_SFM.sfm'</l>
<l> Path_3D_Segmentos[j]:=Path+Path_CORE_ID[j]+'/'+Path_CORE_ID[j]+'_3D.stl'</l>
<l>endfor</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Cores_BD">
<parameters>
<parameter id="Path_3D_Segmentos"/>
<parameter id="Path_CORE_ID"/>
<parameter id="Path_SFM_Segmentos"/>
</parameters>
</docu>
</procedure>
<procedure name="Visualizar_3D">
<interface>
<ic>
<par name="Modelo3D" base_type="ctrl" dimension="0"/>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Visualizar" base_type="ctrl" dimension="0"/>
<par name="PoseIn" base_type="ctrl" dimension="0"/>
<par name="Title" base_type="ctrl" dimension="0"/>
<par name="Label" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Pose" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>if (Visualizar)</l>
<l>    dev_get_window (WindowHandle)</l>
<l>    visualize_object_model_3d (WindowHandle, [Modelo3D], [], [], Parametros_Visualizacion, Valores_Visualizacion, Title, Label, [], Pose)</l>
<l>endif</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Visualizar_3D">
<parameters>
<parameter id="Label"/>
<parameter id="Modelo3D"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="Pose"/>
<parameter id="PoseIn"/>
<parameter id="Title"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="Visualizar"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_EthernetIP_Data">
<interface>
<ic>
<par name="Tag_Destino" base_type="ctrl" dimension="0"/>
<par name="Variable" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c></c>
<c></c>
<c></c>
<l>wait_seconds(0.01)</l>
<c></c>
<c></c>
<l>Peticion     := 'Escritura'</l>
<l>Variable_OPC := Tag_Destino </l>
<c></c>
<l>Data:=Peticion+';'+Variable_OPC+';'+Variable</l>
<c></c>
<l>write_serial (SerialHandle, ords(Data))</l>
<l>Conteo_Espera:=0</l>
<l>VarSerial:=0</l>
<l>while(VarSerial&lt;1 and Conteo_Espera&lt;10)    </l>
<l>    read_serial (SerialHandle, 20, Nchar)</l>
<l>    Nchar:= chrt(Nchar)</l>
<l>    tuple_number (Nchar, Variable)</l>
<l>    VarSerial:=|Nchar|</l>
<l>    Conteo_Espera:=Conteo_Espera+1</l>
<l>endwhile</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Send_EthernetIP_Data">
<parameters>
<parameter id="SerialHandle"/>
<parameter id="Tag_Destino"/>
<parameter id="Variable"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_SFM_STL">
<interface>
<ic>
<par name="Vector_ID_Core_by_Segment_Pallet" base_type="ctrl" dimension="0"/>
<par name="Path_CORE_ID" base_type="ctrl" dimension="0"/>
<par name="Path_3D_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_SFM_Segmentos" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ObjectModel3D_Core_Pallet" base_type="ctrl" dimension="0"/>
<par name="SFM_Core_Pallet" base_type="ctrl" dimension="0"/>
<par name="Estado_Get_SFM_STL" base_type="ctrl" dimension="0"/>
<par name="Modelo3D_Select" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Estado_Get_SFM_STL:=false</l>
<l>try</l>
<c>    </c>
<l>    Core_Find_by_User := Vector_ID_Core_by_Segment_Pallet</l>
<c></c>
<l>if (Core_Find_by_User='')</l>
<l>    Estado_Get_SFM_STL:=false</l>
<l>    return()</l>
<l>endif</l>
<c></c>
<l>Index_Core:=[]</l>
<l>Core_Get:=false</l>
<c></c>
<l>for Index_Core_find := 0 to |Path_CORE_ID|-1 by 1</l>
<c>    </c>
<l>    if (Path_CORE_ID[Index_Core_find] = Core_Find_by_User)</l>
<l>        Index_Core :=  Index_Core_find  </l>
<l>        Core_Get:=true</l>
<l>    endif</l>
<l>endfor</l>
<c></c>
<l>if (not Core_Get)</l>
<c>    </c>
<l>    throw ('CORE NO EXISTE EN BD')</l>
<c>    </c>
<c></c>
<c>    </c>
<l>    return()</l>
<c>    </c>
<l>endif</l>
<c></c>
<c></c>
<c>    </c>
<l>    read_object_model_3d (Path_3D_Segmentos[Index_Core], 1, [], [], ObjectModel3D_Core_Pallet, Status)</l>
<l>    read_surface_model (Path_SFM_Segmentos[Index_Core], SFM_Core_Pallet)</l>
<c>    </c>
<l>    Modelo3D_Select:=Path_3D_Segmentos[Index_Core]</l>
<c>    </c>
<c>    </c>
<l>    Estado_Get_SFM_STL:=true</l>
<c>    </c>
<l>catch (Exception)</l>
<c></c>
<c>    </c>
<l>    throw ('NO se pudo leer el modelo 3D o el SFM de ' + Core_Find_by_User)</l>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="Get_SFM_STL">
<parameters>
<parameter id="Estado_Get_SFM_STL"/>
<parameter id="Modelo3D_Select"/>
<parameter id="ObjectModel3D_Core_Pallet"/>
<parameter id="Path_3D_Segmentos"/>
<parameter id="Path_CORE_ID"/>
<parameter id="Path_SFM_Segmentos"/>
<parameter id="SFM_Core_Pallet"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet"/>
</parameters>
</docu>
</procedure>
<procedure name="Read_EthernetIP_Data">
<interface>
<ic>
<par name="Tag_Lectura" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Variable" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<l>Limite:=50</l>
<l>Conteo:=Limite+1</l>
<l>Peticion     := 'Lectura'</l>
<l>Variable_OPC := Tag_Lectura</l>
<c></c>
<l>Data:=Peticion+';'+Variable_OPC</l>
<c></c>
<l>while (Conteo&gt;Limite)</l>
<l>    Conteo:=0  </l>
<c> </c>
<l>    write_serial (SerialHandle, ords(Data))</l>
<c></c>
<l>    VarSerial:=0</l>
<c>    </c>
<l>    while(VarSerial&lt;1 and Conteo&lt;Limite)</l>
<c>        </c>
<c>        *Numero de caracteres a leer</c>
<l>        read_serial (SerialHandle, 20, Nchar)</l>
<l>        Nchar:= chrt(Nchar)</l>
<l>        tuple_number (Nchar, Variable)</l>
<l>        VarSerial:=|Nchar|</l>
<c>        </c>
<l>        Conteo:=Conteo+1</l>
<l>    endwhile</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>endwhile</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Read_EthernetIP_Data">
<parameters>
<parameter id="SerialHandle"/>
<parameter id="Tag_Lectura"/>
<parameter id="Variable"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Vector_Info_Cores_byUser">
<interface>
<ic>
<par name="N_pallet" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_1" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_2" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_3" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_4" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_5" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_6" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Vector_ID_Core_by_Segment_Pallet" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>switch (N_pallet)</l>
<l>case 1:</l>
<l>    Vector_ID_Core_by_Segment_Pallet:=Vector_ID_Core_by_Segment_Pallet_1</l>
<l>    break</l>
<l>case 2:</l>
<l>    Vector_ID_Core_by_Segment_Pallet:=Vector_ID_Core_by_Segment_Pallet_2</l>
<l>    break</l>
<l>case 3:</l>
<l>    Vector_ID_Core_by_Segment_Pallet:=Vector_ID_Core_by_Segment_Pallet_3</l>
<l>    break</l>
<l>case 4:</l>
<l>    Vector_ID_Core_by_Segment_Pallet:=Vector_ID_Core_by_Segment_Pallet_4</l>
<l>    break</l>
<l>case 5:</l>
<l>    Vector_ID_Core_by_Segment_Pallet:=Vector_ID_Core_by_Segment_Pallet_5</l>
<l>    break</l>
<c>    </c>
<l>case 6:</l>
<l>    Vector_ID_Core_by_Segment_Pallet:=Vector_ID_Core_by_Segment_Pallet_6</l>
<l>    break    </l>
<l>endswitch</l>
<l>return ()</l>
</body>
<docu id="Get_Vector_Info_Cores_byUser">
<parameters>
<parameter id="N_pallet"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_1"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_2"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_3"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_4"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_5"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_6"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Vector_Entidades">
<interface>
<ic>
<par name="Vector_ID_Core_by_Segment_Pallet" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Vector_Entidades_Segmento" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c>*0.1.- identifico cuantos Cores existen por segmento</c>
<c></c>
<c></c>
<l>N_Cores_Segmento:=[]</l>
<l>Vector_N_Elementos:=[]</l>
<l>idx_aux:=0</l>
<l>for Index_Core_Seg := 0 to |Vector_ID_Core_by_Segment_Pallet|-1 by 1</l>
<c>    </c>
<l>    Core_Find_by_User := Vector_ID_Core_by_Segment_Pallet[Index_Core_Seg]</l>
<c>    </c>
<l>    tuple_split (Core_Find_by_User, ';', Aux)</l>
<l>    N_Cores_Segmento[Index_Core_Seg]:=|Aux|</l>
<c>    </c>
<c>    </c>
<l>    for Index_temp := 0 to |Aux|-1 by 1</l>
<c>        </c>
<l>        Vector_N_Elementos[idx_aux]:=Aux[Index_temp]</l>
<l>        idx_aux:=idx_aux+1</l>
<l>    endfor</l>
<c>    </c>
<l>endfor</l>
<c></c>
<c></c>
<c>*0.2.- identifico cuantos Cores existen y cuantas veces se repiten</c>
<l>Vector_Entidades:=[]</l>
<l>idx_Vector_Entidades:=0</l>
<l>for Index_temp := 0 to |Vector_N_Elementos|-1 by 1</l>
<l>    if(Vector_N_Elementos[Index_temp]='')</l>
<l>        continue</l>
<l>    endif</l>
<l>    N_core:=1</l>
<l>    Core_To_Find:=Vector_N_Elementos[Index_temp]</l>
<l>    if (Core_To_Find=' ' )</l>
<l>        continue       </l>
<l>    endif</l>
<l>    Vector_N_Elementos[Index_temp]:=' '</l>
<c>    </c>
<l>    for Index_temp_b := 0 to |Vector_N_Elementos|-1 by 1</l>
<l>        if (Core_To_Find=Vector_N_Elementos[Index_temp_b])</l>
<l>            N_core:=N_core+1  </l>
<l>            Vector_N_Elementos[Index_temp_b]:=' '</l>
<l>        endif</l>
<l>    endfor</l>
<c>    </c>
<c>    </c>
<l>    Vector_Entidades[idx_Vector_Entidades]:=Core_To_Find+';'+N_core</l>
<l>    idx_Vector_Entidades:=idx_Vector_Entidades+1</l>
<l>endfor</l>
<c></c>
<c>*0.3 Busco los cores y en que segmento se encuentran</c>
<c></c>
<l>Vector_Entidades_Segmento:=[]</l>
<l>for Index_temp := 0 to |Vector_Entidades|-1 by 1</l>
<c>    </c>
<l>    Aux:=Vector_Entidades[Index_temp]</l>
<l>    tuple_split (Aux, ';', Aux)</l>
<l>    Entidad:=Aux[0]</l>
<c>    </c>
<l>    Puntero_segmentos:=''</l>
<l>    for Index_temp_b := 0 to |Vector_ID_Core_by_Segment_Pallet|-1 by 1      </l>
<l>        tuple_strrstr (Vector_ID_Core_by_Segment_Pallet[Index_temp_b], Entidad, CoreExist)</l>
<l>        if (CoreExist &gt;=0)</l>
<l>            Puntero_segmentos:=Puntero_segmentos+';'+Index_temp_b</l>
<l>        endif</l>
<c>        </c>
<l>    endfor</l>
<c>    </c>
<l>    Vector_Entidades_Segmento[Index_temp]:=Entidad+Puntero_segmentos</l>
<l>    tuple_split (Vector_Entidades_Segmento[Index_temp], ';', Aux)</l>
<l>endfor</l>
<l>return ()</l>
</body>
<docu id="Get_Vector_Entidades">
<parameters>
<parameter id="Vector_Entidades_Segmento"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet"/>
</parameters>
</docu>
</procedure>
<procedure name="Find_Sector_Core">
<interface>
<ic>
<par name="Vector_ID_Core_by_Segment_Pallet" base_type="ctrl" dimension="0"/>
<par name="Vector_Entidades_Segmento" base_type="ctrl" dimension="0"/>
<par name="Path_CORE_ID" base_type="ctrl" dimension="0"/>
<par name="Path_3D_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_SFM_Segmentos" base_type="ctrl" dimension="0"/>
<par name="ROI3D_rotate" base_type="ctrl" dimension="0"/>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Visualizar3D" base_type="ctrl" dimension="0"/>
<par name="Vector_Segmento" base_type="ctrl" dimension="0"/>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
<par name="Sampling" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Vector_Existencia_Core" base_type="ctrl" dimension="2"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
</ic>
<oc>
<par name="Vector_Existencia_Core_New" base_type="ctrl" dimension="2"/>
</oc>
</interface>
<body>
<l>N_divisiones_Pallet:=9</l>
<l>N_divisiones_Pallet:=|Vector_ID_Core_by_Segment_Pallet|</l>
<c></c>
<l>dev_inspect_ctrl(Vector_Existencia_Core)</l>
<l>for Index := 0 to N_divisiones_Pallet-1 by 1</l>
<l>    Vector_Existencia_Core.at(Index+1).at(0):=''</l>
<l>    Vector_Existencia_Core.at(Index+1).at(1):=false</l>
<c>    </c>
<l>endfor</l>
<c></c>
<c></c>
<l>* #########################################</l>
<c>**##### REVISAR #########################</c>
<l>* ## Si Vector_Entidades_Segmento funciona bien como limite del for</l>
<c></c>
<l>NEntidades:=|Vector_Entidades_Segmento|</l>
<c></c>
<c></c>
<l>try</l>
<c>    </c>
<l>    for N_Entidad := 0 to NEntidades-1 by 1</l>
<c>        </c>
<l>        tuple_split (Vector_Entidades_Segmento[N_Entidad], ';', Aux)</l>
<l>        Entidad_To_Find:=Aux[0]</l>
<l>        N_Sectores_To_Find:=|Aux|</l>
<l>        ROI3D:=[]</l>
<l>        dev_inspect_ctrl (Entidad_To_Find)</l>
<l>        dev_inspect_ctrl (Vector_Entidades_Segmento)</l>
<c>        </c>
<c>        </c>
<c>        ********************************************</c>
<c>        * Leo el SFM y STL del Core</c>
<c>        ********************************************</c>
<c>        </c>
<l>* #### Envio data de estado ########################      </l>
<l>        Estado:=9</l>
<l>        Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)     </l>
<l>* ################################################## </l>
<c>        </c>
<l>        if (Entidad_To_Find ==' ')</l>
<l>            Vector_Existencia_Core.at(N_Entidad+1).at(0):=Entidad_To_Find</l>
<l>            Vector_Existencia_Core.at(N_Entidad+1).at(1):=false</l>
<c>            </c>
<l>        else</l>
<c>            </c>
<l>            Get_SFM_STL (Entidad_To_Find, Path_CORE_ID, Path_3D_Segmentos, Path_SFM_Segmentos, ObjectModel3D_Core_Pallet, SFM_Core_Pallet, Estado_Get_SFM_STL, Modelo3D_Select)</l>
<c>            </c>
<c>            </c>
<l>            for j := 1 to N_Sectores_To_Find-1 by 1</l>
<l>                N_Roi:=Aux[j]</l>
<l>                tuple_number (Aux[j], N_Roi)</l>
<l>                copy_object_model_3d (ROI3D_rotate[N_Roi], 'all', ROI3D_aux)</l>
<l>                ROI3D:=[ROI3D,ROI3D_aux]              </l>
<l>            endfor</l>
<l>            Get_ROI_3D (ROI3D, Escena3D_RAW, Modelo_3D_ROI)</l>
<c>            </c>
<c>            </c>
<l>            Visualizar_3D ( [ ROI3D,Escena3D_RAW], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Visualizar3D, [], [],[], PoseOut1)</l>
<l>            Visualizar_3D ( [Modelo_3D_ROI], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Visualizar3D, [], [], [], PoseOut1)</l>
<c>            </c>
<c>            ***************************************************************</c>
<c>            *Filtro la altura maxima</c>
<c>            * Utilizo esto para elminar el piso de la escena y evitar errores</c>
<l>            Altura_Maxima_camara_Piso_Pallet:=2400</l>
<c>            ***************************************************************</c>
<l>            Set_Max_Altura_Model3D (Modelo_3D_ROI, Altura_Maxima_camara_Piso_Pallet, Modelo_3D_ROI_Thres)</l>
<c>            </c>
<c>            </c>
<l>            Visualizar_3D ([Modelo_3D_ROI_Thres], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Visualizar3D, [], [], [], PoseOut1)      </l>
<l>            Visualizar_3D ([ObjectModel3D_Core_Pallet], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Visualizar3D, [], [], [], PoseOut1)</l>
<c>            </c>
<l>            N_Model_To_Find:=|Modelo_3D_ROI_Thres|</l>
<l>            if (|Modelo_3D_ROI_Thres|&gt;1)</l>
<c>                </c>
<l>                union_object_model_3d (Modelo_3D_ROI_Thres, 'points_surface', Modelo_3D_ROI_Thres)</l>
<l>                Visualizar_3D ([Modelo_3D_ROI_Thres], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Visualizar3D, [], [], [], PoseOut1)</l>
<c>                </c>
<l>            endif</l>
<c>                      </c>
<c>            ****************************</c>
<c>            * Parametros de control</c>
<c>            ****************************</c>
<l>            Sampling_Find := 0.05</l>
<l>            Keypoint := 1</l>
<l>            MinScore := 0.01</l>
<l>            N_matches := N_Model_To_Find</l>
<l>            SFM:=SFM_Core_Pallet</l>
<l>            Escena3D:=Modelo_3D_ROI_Thres</l>
<l>            Mod_3D_Objeto:=ObjectModel3D_Core_Pallet</l>
<c>            </c>
<l>            Visualizar_3D ([Escena3D,Mod_3D_Objeto], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Visualizar3D, [], [], [], PoseOut1)</l>
<c>            </c>
<c>            ****************************</c>
<l>* #### Envio data de estado ###############################################</l>
<l>            Estado:=10</l>
<l>            Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)            </l>
<l>* ######################################################################### </l>
<c>            </c>
<c>            </c>
<l>            Find_Entity_3D (N_matches, SFM, Escena3D, Sampling_Find, Keypoint, MinScore,Mod_3D_Objeto, \
                            PoseMLS, ScoreMLS, \
                            Pose_Refinada, Score_Refinado, SurfaceMatchingResultID1, \
                            Posicion3D_Objeto, Posicion3D_Objeto_REFIN, Obj_Detectado)</l>
<c>            </c>
<c>   </c>
<l>            if ( Obj_Detectado)               </l>
<l>* #### Envio data de estado ###############################################               </l>
<l>                Estado:=11</l>
<l>                Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)             </l>
<l>* ######################################################################### </l>
<c>                </c>
<l>                Visualizar_3D ([Modelo_3D_ROI,Posicion3D_Objeto,Escena3D_RAW], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Visualizar3D, [], [], [], PoseOut1)</l>
<c>                </c>
<l>                Vector_Existencia_Core.at(N_Entidad+1).at(0):=Entidad_To_Find</l>
<l>                Vector_Existencia_Core.at(N_Entidad+1).at(1):=true</l>
<l>            else</l>
<c>                </c>
<l>                Vector_Existencia_Core.at(N_Entidad+1).at(0):=Entidad_To_Find</l>
<l>                Vector_Existencia_Core.at(N_Entidad+1).at(1):=false</l>
<l>            endif</l>
<l>            clear_object_model_3d([ROI3D,Modelo_3D_ROI,ObjectModel3D_Core_Pallet])</l>
<l>            clear_surface_model (SFM_Core_Pallet)</l>
<l>        endif</l>
<c>        </c>
<l>    endfor</l>
<l>catch (Exception)</l>
<l>    Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<c>    </c>
<l>endtry</l>
<l>Vector_Existencia_Core_New:=Vector_Existencia_Core</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Find_Sector_Core">
<parameters>
<parameter id="Escena3D_RAW"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="Path_3D_Segmentos"/>
<parameter id="Path_CORE_ID"/>
<parameter id="Path_SFM_Segmentos"/>
<parameter id="ROI3D_rotate"/>
<parameter id="Sampling"/>
<parameter id="SerialHandle"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="Vector_Entidades_Segmento"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="Vector_Existencia_Core"/>
<parameter id="Vector_Existencia_Core_New"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet"/>
<parameter id="Vector_Segmento"/>
<parameter id="Visualizar3D"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_Pulse_EthernetIp_Data">
<interface>
<ic>
<par name="Tag_Destino" base_type="ctrl" dimension="0"/>
<par name="Variable_On" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Variable_Off" base_type="ctrl" dimension="0"/>
<par name="Time" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>    Send_EthernetIP_Data (Tag_Destino, Variable_On, SerialHandle)</l>
<l>    wait_seconds(Time)</l>
<l>   Send_EthernetIP_Data (Tag_Destino, Variable_Off, SerialHandle)</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Send_Pulse_EthernetIp_Data">
<parameters>
<parameter id="SerialHandle"/>
<parameter id="Tag_Destino"/>
<parameter id="Time"/>
<parameter id="Variable_Off"/>
<parameter id="Variable_On"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Vector_Estados">
<interface>
<oc>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
</oc>
</interface>
<body>
<l>Vector_Estado_Fx := { {[]}}</l>
<l>Vector_Estado_Fx.at(0).at(0) := 'Valor Estado'</l>
<l>Vector_Estado_Fx.at(0).at(1) := 'Codificacion'</l>
<c>* </c>
<l>Nestado := 1</l>
<c>* ESTADO 1</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'Adquiriendo fotografia'</l>
<c>* </c>
<c>* </c>
<l>Nestado := 2</l>
<c>* ESTADO 2</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'Adquiriendo informacion del usuario donde se indica la distribucion de cada core en los pallets'</l>
<c>* </c>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 3</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'Analizando Pallet'</l>
<c>* </c>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 4</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'Fallo en adquisición de imagen'</l>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 5</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'Fallo en ROI Pallet'</l>
<c>* </c>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 6</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'Buscando esquina del pallet'</l>
<l>Nestado := Nestado+1</l>
<c>* </c>
<c>* ESTADO 7</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'No se detecto Esquina de Pallet'</l>
<c>* </c>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 8</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' Busco de manera sectorizada cada core en el pallet'</l>
<c>* </c>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 9</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'Leyendo STl del Core'</l>
<c>* </c>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 10</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'Buscando core en el segmento del pallet'</l>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 11</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'Core en el segmento del pallet Detectado'</l>
<c>* </c>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 12</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'No se detecto Core en el segmento del pallet'</l>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 13</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'Escritura de existencia de cores de Pallet solicitado'</l>
<c>* </c>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 14</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'Detección de patrón Exitoso'</l>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 15</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'No se a logrado extraer el patrón'</l>
<c>* </c>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 16</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'Buscando Patrón'</l>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 17</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'Enviando coordenadas de patrón al Robot'</l>
<c>* </c>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 18</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'Fin GET_PATRON_POSE'</l>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 19</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' BLOQUE DE BUSQUEDA 0 INICIADO '</l>
<c>* </c>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 20</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'Adquiriendo Multifoto'</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 21</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ''</l>
<c>* </c>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 22</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ''</l>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 23</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ''</l>
<c>* </c>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 24</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ''</l>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 25</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ''</l>
<c>* </c>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 26</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'null'</l>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 27</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ''</l>
<c>* </c>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 28</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'null'</l>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 29</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ''</l>
<c>* </c>
<c>* </c>
<l>Nestado := Nestado+1</l>
<c>* ESTADO 30</c>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'null'</l>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Vector_Estados">
<parameters>
<parameter id="Vector_Estado_Fx"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_Estado_Subproceso">
<interface>
<ic>
<par name="Variable_On" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Tag_Destino" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c> </c>
<c>    *Tiempo en segundos</c>
<l>    Time:=0.8</l>
<l>    Variable_Off:=0</l>
<l>    Send_Pulse_EthernetIp_Data (Tag_Destino, Variable_On, SerialHandle, Variable_Off, Time)</l>
<c>    </c>
<c>    </c>
<l>return ()</l>
</body>
<docu id="Send_Estado_Subproceso">
<parameters>
<parameter id="SerialHandle"/>
<parameter id="Tag_Destino"/>
<parameter id="Variable_On"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Core_Presence">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="Vector_ID_Core_by_Segment_Pallet_1" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_2" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_3" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_4" base_type="ctrl" dimension="0"/>
<par name="Path_SFM_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_3D_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_CORE_ID" base_type="ctrl" dimension="0"/>
<par name="N_Pallet_to_Scan" base_type="ctrl" dimension="0"/>
<par name="NxLib_1" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_5" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_6" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>Parametros_Visualizacion:=['colored','disp_pose','point_size']</l>
<l>Valores_Visualizacion:= [  12  ,'true',1]</l>
<c></c>
<l>Parametros_Visualizacion:=['disp_pose','color_attrib','lut','disp_lines','point_size']</l>
<l>Valores_Visualizacion:= ['true','coord_z','rainbow','true',1]</l>
<c></c>
<c></c>
<c></c>
<c>*****************************************************</c>
<l>Estado:=1</l>
<l>Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* ###################################################</l>
<c></c>
<c></c>
<c>*****************************************************************************************************************************</c>
<c>************  Capturo Imagenes **********************************************************************************************</c>
<l>Get_Pallet_Model (Objeto_0, Objeto_1, Objeto_2, Objeto_3, Zobj1, Xobj1, Yobj1, Img_Left_Esquina, NxLib_1, Camera_1, Vector_Estado_Fx, SerialHandle, Pose_Robot, Escena3D_RAW, Base_esquina, Estado_Fx)</l>
<c></c>
<c></c>
<c></c>
<l>Visualizar_3D ([Escena3D_RAW], Parametros_Visualizacion, Valores_Visualizacion, false, [], [], [], PoseOut1)</l>
<c>******************************************************************************************************************************</c>
<l>if (Estado_Fx=false)</l>
<l>    Mensaje:='##ERROR## Bloque 0'</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<l>    return()</l>
<c>    </c>
<l>endif</l>
<c>*********************************************************************   </c>
<c></c>
<l>Vector_ID_Core_by_Segment_Pallet:=[]</l>
<c></c>
<l>* ################################################################################</l>
<c>*2. Adquiero informacion del usuario quien indica donde ira cada core en el pallet</c>
<l>* ################################################################################</l>
<c></c>
<l>* #### Envio data de estado ######################################################</l>
<l>Estado:=2</l>
<l>Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* #################################################################################</l>
<c>* Selecciono el pallet del usuario</c>
<l>* #################################################################################</l>
<l>Get_Vector_Info_Cores_byUser (N_Pallet_to_Scan,\
                              Vector_ID_Core_by_Segment_Pallet_1, Vector_ID_Core_by_Segment_Pallet_2, Vector_ID_Core_by_Segment_Pallet_3, Vector_ID_Core_by_Segment_Pallet_4, Vector_ID_Core_by_Segment_Pallet_5, Vector_ID_Core_by_Segment_Pallet_6,\
                              Vector_ID_Core_by_Segment_Pallet)</l>
<c></c>
<c></c>
<l>* ###############################################################################</l>
<c>*3. Busco los cores del usuario Vector_ID_Core_by_Segment_Pallet en el pallet N_Pallet_to_Scan</c>
<l>* ###############################################################################</l>
<c></c>
<l>* #### Envio data de estado ########################</l>
<l>Estado:=3</l>
<l>Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* ################################################## </l>
<c></c>
<c>* Creo el vector de existencia del bloque</c>
<c></c>
<c></c>
<l>*create_pose (0, 0, 0, 0, 0, 0, 'Rp+T', 'gba', 'point', Base_esquina)</l>
<c></c>
<l>Vector_Existencia_Core:={ { [] } }</l>
<l>Vector_Existencia_Core.at(0).at(0):='CORE'</l>
<l>Vector_Existencia_Core.at(0).at(1):='Existencia'</l>
<l>Visualizar3D:=false</l>
<c></c>
<l>Get_Core_Presence_In_Pallet (Zobj1, Xobj1, Yobj1, Img_Left_Esquina, Escena3D_RAW, Pose_Robot, N_Pallet_to_Scan, Path_SFM_Segmentos, Path_3D_Segmentos, Vector_ID_Core_by_Segment_Pallet, Path_CORE_ID, SerialHandle, Vector_Estado_Fx, Base_esquina, Visualizar3D, Estado_Fx, Estado_SubProceso_Get_Core_Presence_In_Pallet)</l>
<c></c>
<c></c>
<c></c>
<l>* ######################################################################################</l>
<l>* #################### Fin Bloque 1 ####################################################</l>
<l>* ######################################################################################</l>
<c></c>
<l>* clear_object_model_3d([Escena3D_RAW])</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Core_Presence">
<parameters>
<parameter id="Camera_1"/>
<parameter id="N_Pallet_to_Scan"/>
<parameter id="NxLib_1"/>
<parameter id="Path_3D_Segmentos"/>
<parameter id="Path_CORE_ID"/>
<parameter id="Path_SFM_Segmentos"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_1"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_2"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_3"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_4"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_5"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_6"/>
</parameters>
</docu>
</procedure>
<procedure name="BD_Dinamica">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Estado" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
</ic>
<oc>
<par name="Vector_ID_Core_by_Segment_Pallet_1" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_2" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_3" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_4" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_5" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_6" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>wait_seconds(0.1)</l>
<c></c>
<l>Estado:=2</l>
<l>Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<c></c>
<c></c>
<l>Variable_BD := 'pallet_1'</l>
<l>Get_Pallet_BD (Variable_BD, SerialHandle, DataBD)</l>
<l>for Index := 0 to |DataBD|-1 by 1  </l>
<l>    Vector_ID_Core_by_Segment_Pallet_1[Index]:=DataBD[Index]</l>
<l>endfor</l>
<c></c>
<l>Variable_BD := 'pallet_2'</l>
<l>Get_Pallet_BD (Variable_BD, SerialHandle, DataBD)</l>
<l>for Index := 0 to |DataBD|-1 by 1  </l>
<l>    Vector_ID_Core_by_Segment_Pallet_2[Index]:=DataBD[Index]</l>
<l>endfor</l>
<c></c>
<l>Variable_BD := 'pallet_3'</l>
<l>Get_Pallet_BD (Variable_BD, SerialHandle, DataBD)</l>
<l>for Index := 0 to |DataBD|-1 by 1  </l>
<l>    Vector_ID_Core_by_Segment_Pallet_3[Index]:=DataBD[Index]</l>
<l>endfor</l>
<c></c>
<l>Variable_BD := 'pallet_4'</l>
<l>Get_Pallet_BD (Variable_BD, SerialHandle, DataBD)</l>
<l>for Index := 0 to |DataBD|-1 by 1  </l>
<l>    Vector_ID_Core_by_Segment_Pallet_4[Index]:=DataBD[Index]</l>
<l>endfor</l>
<c></c>
<l>Variable_BD := 'pallet_5'</l>
<l>Get_Pallet_BD (Variable_BD, SerialHandle, DataBD)</l>
<l>for Index := 0 to |DataBD|-1 by 1  </l>
<l>    Vector_ID_Core_by_Segment_Pallet_5[Index]:=DataBD[Index]</l>
<l>endfor</l>
<c></c>
<c></c>
<l>Variable_BD := 'pallet_6'</l>
<l>Get_Pallet_BD (Variable_BD, SerialHandle, DataBD)</l>
<l>for Index := 0 to |DataBD|-1 by 1  </l>
<l>    Vector_ID_Core_by_Segment_Pallet_6[Index]:=DataBD[Index]</l>
<l>endfor</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="BD_Dinamica">
<parameters>
<parameter id="Estado"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_1"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_2"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_3"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_4"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_5"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_6"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_Data_Proceso">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Resultado" base_type="ctrl" dimension="0"/>
<par name="Procesando" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c></c>
<l>* ##### Envio de Procesando  #######################</l>
<l>wait_seconds(0.1)</l>
<l>Estado_SubProceso:=Procesando </l>
<l>Tag_Destino:='_EV02_I_Procesando'</l>
<l>Valor_Variable:=Estado_SubProceso</l>
<l>Send_EthernetIP_Data (Tag_Destino, Valor_Variable, SerialHandle)</l>
<l>* #### Fin envio de Resultado ######################  </l>
<l>wait_seconds(0.1)</l>
<c></c>
<c></c>
<c></c>
<l>* ##### Envio de Resultado  #######################</l>
<l>* # [1] = Bien [2] = falla</l>
<l>Tag_Destino:='_EV02_I_Resultado'</l>
<l>Variable_On:=Resultado</l>
<l>Send_Estado_Subproceso (Variable_On, SerialHandle, Tag_Destino)</l>
<l>* #### Fin envio de Resultado ######################  </l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Send_Data_Proceso">
<parameters>
<parameter id="Procesando"/>
<parameter id="Resultado"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_Estado_Subproceso_COPY_1">
<interface>
<ic>
<par name="Variable_On" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Tag_Destino" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* </c>
<c>* Tiempo en segundos</c>
<l>Time := 0.5</l>
<l>Variable_Off := 0</l>
<l>Send_Pulse_EthernetIp_Data (Tag_Destino, Variable_On, SerialHandle, Variable_Off, Time)</l>
<l>return ()</l>
</body>
<docu id="Send_Estado_Subproceso_COPY_1">
<parameters>
<parameter id="SerialHandle"/>
<parameter id="Tag_Destino"/>
<parameter id="Variable_On"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Rectif_Image">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="ImageMapped" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="CameraParameters" base_type="ctrl" dimension="0"/>
<par name="CameraPose" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ScaleForCenteredImage" base_type="ctrl" dimension="0"/>
<par name="PoseForCenteredImage" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>ImageOut := Image</l>
<l>get_image_size (ImageOut, Width, Height)</l>
<l>CenterRow := Width/2</l>
<l>CenterCol := Height/2</l>
<l>WidthMappedImage := Width</l>
<l>HeightMappedImage := Height</l>
<l>parameters_image_to_world_plane_centered (CameraParameters, CameraPose, CenterRow, CenterCol, WidthMappedImage, HeightMappedImage, ScaleForCenteredImage, PoseForCenteredImage)</l>
<c>* </c>
<c>* </c>
<l>gen_image_to_world_plane_map (Map, CameraParameters, PoseForCenteredImage, Width, Height, WidthMappedImage, HeightMappedImage, ScaleForCenteredImage, 'bilinear')</l>
<l>map_image (ImageOut, Map, ImageMapped)</l>
<c>* </c>
<l>return ()</l>
</body>
<docu id="Get_Rectif_Image">
<parameters>
<parameter id="CameraParameters"/>
<parameter id="CameraPose"/>
<parameter id="Image"/>
<parameter id="ImageMapped"/>
<parameter id="PoseForCenteredImage"/>
<parameter id="ScaleForCenteredImage"/>
</parameters>
</docu>
</procedure>
<procedure name="calc_calplate_pose_movingcam">
<interface>
<ic>
<par name="CalibObjInBasePose" base_type="ctrl" dimension="0"/>
<par name="ToolInCamPose" base_type="ctrl" dimension="0"/>
<par name="ToolInBasePose" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="CalibObjInCamPose" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* CalibObjInCamPose = cam_H_calplate</c>
<c>*                   = cam_H_tool * tool_H_base * base_H_calplate</c>
<c>*                   = ToolInCamPose * BaseInToolPose * CalibrationPose</c>
<l>pose_invert (ToolInBasePose, BaseInToolPose)</l>
<l>pose_compose (ToolInCamPose, BaseInToolPose, BaseInCamPose)</l>
<l>pose_compose (BaseInCamPose, CalibObjInBasePose, CalibObjInCamPose)</l>
<c>* </c>
<c>* </c>
<c>* </c>
<c>* </c>
<l>return ()</l>
</body>
<docu id="calc_calplate_pose_movingcam">
<short lang="en_US">compute cam_H_calplate from hand-eye calibration results</short>
<short lang="es_ES">compute cam_H_calplate from hand-eye calibration results</short>
<parameters>
<parameter id="CalibObjInBasePose"/>
<parameter id="CalibObjInCamPose"/>
<parameter id="ToolInBasePose"/>
<parameter id="ToolInCamPose"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Pose_Caltab">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="CameraParameters" base_type="ctrl" dimension="0"/>
<par name="CameraPose" base_type="ctrl" dimension="0"/>
<par name="CalTabFile" base_type="ctrl" dimension="0"/>
<par name="CamParam" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="PoseForCalibrationPlate" base_type="ctrl" dimension="0"/>
<par name="EstadoFx" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>try</l>
<l>ImageOut := Image</l>
<c></c>
<c></c>
<c></c>
<l>* read_cam_par ('C:/Users/Ignacio Corvalan/Dropbox (MIRS)/1.-Servidor Desarrollo Software/7.-Magotteaux/4.-Optica/CamParamError.dat', StartCamParam)</l>
<c></c>
<l>* Get_Rectif_Image (ImageOut, ImageOut, CameraParameters, CameraPose, ScaleForCenteredImage, PoseForCenteredImage)</l>
<c>* </c>
<l>create_calib_data ('hand_eye_moving_cam', 1, 1, CalibDataID)</l>
<l>set_calib_data_cam_param (CalibDataID, 0, [], CamParam)</l>
<l>set_calib_data_calib_object (CalibDataID, 0, CalTabFile)</l>
<l>set_calib_data (CalibDataID, 'model', 'general', 'optimization_method', 'nonlinear')</l>
<c>* </c>
<l>find_calib_object (ImageOut, CalibDataID, 0, 0, 0, [], [])</l>
<c>* </c>
<c>* </c>
<l>* find_caltab (Image, CalPlate, CalTabFile, 3, 100, 20)</l>
<l>* find_marks_and_pose (Image, CalPlate, CalTabFile, CamParam, 128, 10, 18, 0.9, 15, 100, RCoord1, CCoord1, StartPose)</l>
<l>* dev_set_color ('blue')</l>
<l>* disp_cross (200000, RCoord1, CCoord1, 40, StartPose[5])</l>
<c>* </c>
<l>get_calib_data_observ_contours (Caltab, CalibDataID, 'caltab', 0, 0, 0)</l>
<l>get_calib_data_observ_points (CalibDataID, 0, 0, 0, RCoord, CCoord, Index, PoseForCalibrationPlate)</l>
<c>* </c>
<c>* *****************************************************************</c>
<c>* Si quiero [mm]</c>
<l>PoseForCalibrationPlate[0:2] := PoseForCalibrationPlate[0:2]*1000</l>
<l>    PoseForCalibrationPlate[3]:= PoseForCalibrationPlate[3]*0</l>
<l> PoseForCalibrationPlate[4]:=PoseForCalibrationPlate[4]*0</l>
<c> </c>
<l> if ( PoseForCalibrationPlate[3]&gt;360)</l>
<l>      PoseForCalibrationPlate[3]:= PoseForCalibrationPlate[3]-360</l>
<l> endif</l>
<l> if ( PoseForCalibrationPlate[4]&gt;360)</l>
<l>      PoseForCalibrationPlate[4]:= PoseForCalibrationPlate[4]-360</l>
<l> endif</l>
<c> </c>
<l> dev_inspect_ctrl(PoseForCalibrationPlate)</l>
<c></c>
<l>disp_3d_coord_system (200000, CamParam, PoseForCalibrationPlate, 50)</l>
<c></c>
<c>* ****************************************************************</c>
<c>* </c>
<l>* dev_inspect_ctrl (PoseForCalibrationPlate)</l>
<c>* </c>
<c>* </c>
<l>dev_set_color ('green')</l>
<l>dev_display (ImageOut)</l>
<l>dev_display (Caltab)</l>
<l>dev_set_color ('yellow')</l>
<l>disp_cross (200000, RCoord, CCoord, 6, 0)</l>
<l>dev_set_colored (3)</l>
<l>disp_3d_coord_system (200000, CamParam, PoseForCalibrationPlate, 50)</l>
<c>* </c>
<l>Length := |RCoord|</l>
<l>texto[0] := 'Org X: '</l>
<l>texto[1] := 'Org Y: '</l>
<l>texto[2] := 'Org Z: '</l>
<l>texto[3] := 'Org C: '</l>
<l>texto[4] := 'Org B: '</l>
<l>texto[5] := 'Org A: '</l>
<l>texto[6] := ' '</l>
<c>* </c>
<l>N_ossf := 13</l>
<l>dev_disp_text (texto+PoseForCalibrationPlate, 'image', RCoord[Length-N_ossf], CCoord[Length-N_ossf], 'black', 'box_color', '#ffffff77')</l>
<c></c>
<l>clear_calib_data (CalibDataID)</l>
<c></c>
<c></c>
<l>    EstadoFx:=true</l>
<l>catch (Exception)</l>
<c>  </c>
<l>    Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<c>    </c>
<c>    </c>
<c></c>
<l>endtry</l>
<c>* </c>
<l>return ()</l>
<c>* </c>
<c>* </c>
</body>
<docu id="Get_Pose_Caltab">
<parameters>
<parameter id="CalTabFile"/>
<parameter id="CamParam"/>
<parameter id="CameraParameters"/>
<parameter id="CameraPose"/>
<parameter id="EstadoFx"/>
<parameter id="Image"/>
<parameter id="PoseForCalibrationPlate"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Cam_Parameters">
<interface>
<oc>
<par name="StartCamParam" base_type="ctrl" dimension="0"/>
<par name="CameraPose" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* </c>
<l>*  read_cam_par ('C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/7.-HandEye/2. procilica/CamParamHandEye_Procilica.dat', StartCamParam)</l>
<l>* read_cam_par ('C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/7.-HandEye/2. procilica/CamParamProcilica.dat', StartCamParam)</l>
<c></c>
<l>*  read_cam_par ('C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/7.-HandEye/2. procilica/OldParam/CamParamProcilica.dat', StartCamParam)</l>
<c></c>
<c></c>
<c as_id="calibration" as_name="Calibration 01" as_grp="[1,1]" as_ord="1">* Calibration 01: Code generated by Calibration 01</c>
<l as_id="calibration" as_name="Calibration 01" as_grp="[2,1]" as_ord="1">*  StartCamParam := ['area_scan_polynomial',0.0179894,259.999,-610461,1.41677e+008,0.130341,0.0241108,5.50664e-006,5.5e-006,2497.08,1638.81,4896,3264]</l>
<l as_id="calibration" as_name="Calibration 01" as_grp="[2,2]" as_ord="1">* StartCamParam := ['area_scan_polynomial',0.01835,259.999,-610461,1.41677e+008,0.130341,0.0241108,5.50664e-006,5.5e-006,2497.08,1638.81,4896,3264]</l>
<l>* CameraPose := [-0.663567,-0.435754,0.850547,359.689,0.839897,358.489,0]</l>
<l as_id="calibration" as_name="Calibration 01" as_grp="[4,1]" as_ord="1">*stop ()</l>
<c></c>
<l>* StartCamParam := ['area_scan_polynomial',0.01835,262.327,-651185,2.91549e+008,0.123579,0.0221396,5.50733e-006,5.5e-006,2488.72,1654.19,4896,3264]</l>
<l>* CameraPose := [0.104144,-0.0943174,0.755429,359.77,0.850164,358.49,0]</l>
<c></c>
<c>*****************************</c>
<l>   StartCamParam := ['area_scan_polynomial',0.01805,272.457,-680091,3.32014e+008,0.0290104,0.136334,5.49285e-006,5.5e-006,2487.1,1615.27,4896,3264]</l>
<l>   CameraPose := [0.0920832,-0.0275879,0.791785,358.714,1.19796,90.4632,0]</l>
<c>*************************  </c>
<c>  </c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Cam_Parameters">
<parameters>
<parameter id="CameraPose"/>
<parameter id="StartCamParam"/>
</parameters>
</docu>
</procedure>
<procedure name="Bloque_2">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="AcqHandle" base_type="ctrl" dimension="0"/>
<par name="CameraParameters" base_type="ctrl" dimension="0"/>
<par name="CameraPose" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Estado_SubProceso" base_type="ctrl" dimension="0"/>
<par name="PoseForCalibrationPlate" base_type="ctrl" dimension="0"/>
<par name="ToolInCamPose" base_type="ctrl" dimension="0"/>
<par name="ToolInBasePose" base_type="ctrl" dimension="0"/>
<par name="ObjInBasePoseOut" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<c></c>
<l>CameraPoseOut := CameraPose</l>
<l>Mensaje:='Inicio BLOQUE 1. Busqueda de patron en Pattern'</l>
<l>Send_Data_Info (Mensaje, SerialHandle)</l>
<l>try</l>
<c>    * Reseteo las variable de resultado</c>
<l>* # ### Envio data de estado ########################</l>
<l>    Estado := 1</l>
<l>    Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>    Resultado := 0</l>
<l>    Procesando := 1</l>
<l>    Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* # #################################################</l>
<c>    </c>
<c>    </c>
<l>    Time:=15000</l>
<l>    Gain:=5.0</l>
<l>    Set_exposure_Time_cam_0 (AcqHandle, Time, Gain) </l>
<c>    </c>
<c>    </c>
<l>    Get_Image (Image, AcqHandle)</l>
<l>    get_image_size (Image, Width, Height)</l>
<c>    </c>
<l>    disp_cross (200000,  Height/2,Width/2, 1500, 0)</l>
<c>    </c>
<l>*     Get_Rectif_Image (Image, ImageMapped, CameraParameters, CameraPoseOut, ScaleForCenteredImage, PoseForCenteredImage)</l>
<l>*     Image := ImageMapped</l>
<c>    </c>
<c>    </c>
<c>    * **************************************************</c>
<c>    * Hand Eye Apunto al Descriptor</c>
<c>    * **************************************************</c>
<l>    Mensaje:='Cargando descriptores de distorcion y de patron'</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<c>    </c>
<l>    CalTabFile := 'C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/6.- Caltab Din3/Caltab5x5_10.descr'</l>
<l>    Get_Cam_Parameters (StartCamParam, CameraPoseOut)</l>
<c>    </c>
<l>    disp_cross (200000, 2474, 1612, 500, 0)</l>
<c>    </c>
<c>    * **************************************************</c>
<l>* # ### Envio data de estado ########################</l>
<l>    Estado := 16</l>
<l>    Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* # #################################################</l>
<c>    * </c>
<l>    Get_Pose_Caltab (Image, StartCamParam, CameraPoseOut, CalTabFile, StartCamParam, SerialHandle, PoseForCalibrationPlate, EstadoFx)</l>
<c>    </c>
<c>    </c>
<l>    if (EstadoFx)</l>
<l>        Estado := 14</l>
<l>        Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<c>        * *******************************</c>
<c>        * Enviar por ETHERNETIP</c>
<c>        * *******************************</c>
<c>        </c>
<c>        </c>
<l>* # ### Envio data de estado ########################</l>
<l>        Estado := 17</l>
<l>        Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* # #################################################</l>
<c>        </c>
<c>        </c>
<l>        Send_Data_To_Robot(PoseForCalibrationPlate, SerialHandle)</l>
<c>        </c>
<l>        Resultado := 1</l>
<l>        Procesando := 0</l>
<l>        Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* # #################################################</l>
<c>        </c>
<c>        </c>
<c>        </c>
<l>    endif</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>catch (Exception)</l>
<c>    </c>
<l>* # ### Envio data de estado ########################</l>
<l>    Estado := 15</l>
<l>    Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>    Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<c>    </c>
<l>* # #################################################</l>
<c>    </c>
<l>endtry</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Bloque_2">
<parameters>
<parameter id="AcqHandle"/>
<parameter id="CameraParameters"/>
<parameter id="CameraPose"/>
<parameter id="Estado_SubProceso"/>
<parameter id="ObjInBasePoseOut"/>
<parameter id="PoseForCalibrationPlate"/>
<parameter id="SerialHandle"/>
<parameter id="ToolInBasePose"/>
<parameter id="ToolInCamPose"/>
<parameter id="Vector_Estado_Fx"/>
</parameters>
</docu>
</procedure>
<procedure name="parameters_image_to_world_plane_centered">
<interface>
<ic>
<par name="CamParam" base_type="ctrl" dimension="0"/>
<par name="Pose" base_type="ctrl" dimension="0"/>
<par name="CenterRow" base_type="ctrl" dimension="0"/>
<par name="CenterCol" base_type="ctrl" dimension="0"/>
<par name="WidthMappedImage" base_type="ctrl" dimension="0"/>
<par name="HeightMappedImage" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ScaleForCenteredImage" base_type="ctrl" dimension="0"/>
<par name="PoseForCenteredImage" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* Determine the scale for the mapping</c>
<c>* (here, the scale is determined such that in the</c>
<c>*   surroundings of the given point  the image scale of the</c>
<c>*   mapped image is similar to the image scale of the original image)</c>
<l>Dist_ICS := 1</l>
<l>image_points_to_world_plane (CamParam, Pose, CenterRow, CenterCol, 1, CenterX, CenterY)</l>
<l>image_points_to_world_plane (CamParam, Pose, CenterRow + Dist_ICS, CenterCol, 1, BelowCenterX, BelowCenterY)</l>
<l>image_points_to_world_plane (CamParam, Pose, CenterRow, CenterCol + Dist_ICS, 1, RightOfCenterX, RightOfCenterY)</l>
<l>distance_pp (CenterY, CenterX, BelowCenterY, BelowCenterX, Dist_WCS_Vertical)</l>
<l>distance_pp (CenterY, CenterX, RightOfCenterY, RightOfCenterX, Dist_WCS_Horizontal)</l>
<l>ScaleVertical := Dist_WCS_Vertical / Dist_ICS</l>
<l>ScaleHorizontal := Dist_WCS_Horizontal / Dist_ICS</l>
<l>ScaleForCenteredImage := (ScaleVertical + ScaleHorizontal) / 2.0</l>
<c>* Determine the parameters for set_origin_pose such</c>
<c>* that the point given via get_mbutton will be in the center of the</c>
<c>* mapped image</c>
<l>DX := CenterX - ScaleForCenteredImage * WidthMappedImage / 2.0</l>
<l>DY := CenterY - ScaleForCenteredImage * HeightMappedImage / 2.0</l>
<l>DZ := 0</l>
<l>set_origin_pose (Pose, DX, DY, DZ, PoseForCenteredImage)</l>
<l>return ()</l>
</body>
<docu id="parameters_image_to_world_plane_centered">
<short lang="en_US">Determines scale and pose for the operator image_to_world_plane such that a given point appears in the center and that the scale of the rectified image is similar to the scale of the original image.</short>
<short lang="es_ES">Determines scale and pose for the operator image_to_world_plane such that a given point appears in the center and that the scale of the rectified image is similar to the scale of the original image.</short>
<parameters>
<parameter id="CamParam"/>
<parameter id="CenterCol"/>
<parameter id="CenterRow"/>
<parameter id="HeightMappedImage"/>
<parameter id="Pose"/>
<parameter id="PoseForCenteredImage"/>
<parameter id="ScaleForCenteredImage"/>
<parameter id="WidthMappedImage"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Pose_Punto_Insercion">
<interface>
<ic>
<par name="PoseForCalibrationPlate" base_type="ctrl" dimension="0"/>
<par name="ToolInCamPose" base_type="ctrl" dimension="0"/>
<par name="ToolInBasePose" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ObjInBasePose" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* </c>
<l>ObjInCamPose := PoseForCalibrationPlate</l>
<c>* </c>
<l>ToolInCamPose_Aux := ToolInCamPose</l>
<c>* </c>
<l>pose_invert (ToolInCamPose, CamInToolPose)</l>
<l>pose_compose (ToolInBasePose, CamInToolPose, CamInBasePose)</l>
<l>pose_compose (CamInBasePose, ObjInCamPose, ObjInBasePose)</l>
<c>* </c>
<l>dev_inspect_ctrl (ObjInBasePose)</l>
<c>* </c>
<l>osffetX := 0</l>
<l>osffetY := 0</l>
<l>osffetZ := 0</l>
<c>* </c>
<l>pto1 := ObjInBasePose[0]+osffetX</l>
<l>pto2 := ObjInBasePose[1]+osffetY</l>
<l>pto3 := ObjInBasePose[2]+osffetZ</l>
<c>* </c>
<l>ObjInBasePose[0] := pto1</l>
<l>ObjInBasePose[1] := pto2</l>
<l>ObjInBasePose[2] := pto3</l>
<c>* </c>
<c>* </c>
<l>Get_Pose_Tool (SerialHandle, LapizInBasePose)</l>
<l>DinOssfet[0] := LapizInBasePose[0]-ObjInBasePose[0]</l>
<l>DinOssfet[1] := LapizInBasePose[1]-ObjInBasePose[1]</l>
<l>DinOssfet[2] := LapizInBasePose[2]-ObjInBasePose[2]</l>
<c>* </c>
<l>Get_Pose_Tool (SerialHandle, LapizInBasePose_Estimado)</l>
<l>DinOssfet[0] := LapizInBasePose[0]-LapizInBasePose_Estimado[0]</l>
<l>DinOssfet[1] := LapizInBasePose[1]-LapizInBasePose_Estimado[1]</l>
<l>DinOssfet[2] := LapizInBasePose[2]-LapizInBasePose_Estimado[2]</l>
<c>* </c>
<c>* </c>
<c>* </c>
<c>* </c>
<l>stop ()</l>
<c>* </c>
<c>* </c>
<l>return ()</l>
</body>
<docu id="Get_Pose_Punto_Insercion">
<parameters>
<parameter id="ObjInBasePose"/>
<parameter id="PoseForCalibrationPlate"/>
<parameter id="SerialHandle"/>
<parameter id="ToolInBasePose"/>
<parameter id="ToolInCamPose"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Pose_Tool">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ToolInBasePose" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>wait_seconds(0.1)</l>
<c></c>
<l>try</l>
<c>  </c>
<l>I := 0</l>
<c>* Leo Posicion del robot</c>
<l>dev_get_window (WindowHandle)</l>
<l>disp_message (WindowHandle, 'NO MOVER ROBOT', 'window', 30, 12, 'black', 'true')</l>
<c></c>
<l>for Index := 1 to 3 by 1</l>
<c>    **Limpio buffer</c>
<l>    Read_EthernetIP_Data ('_EV02_O_EjeX', SerialHandle, RV_CmdFotogen)</l>
<l>endfor</l>
<c></c>
<c></c>
<l>Tag_Lectura := '_EV02_O_EjeX'</l>
<l>Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>tuple_real (RV_CmdFotogen, Number)</l>
<l>Number := (Number)/10000.0 - 4000.0</l>
<l>posx[I] := Number</l>
<c></c>
<c></c>
<l>Tag_Lectura := '_EV02_O_EjeY'</l>
<l>Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>tuple_real (RV_CmdFotogen, Number)</l>
<l>Number := (Number)/10000.0 - 4000.0</l>
<l>posy[I] := Number</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>Tag_Lectura := '_EV02_O_EjeZ'</l>
<l>Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>tuple_real (RV_CmdFotogen, Number)</l>
<l>Number := (Number)/10000.0 - 4000.0</l>
<l>posz[I] := Number</l>
<c></c>
<l>Tag_Lectura := '_EV02_O_EjeC'</l>
<l>Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>tuple_real (RV_CmdFotogen, Number)</l>
<l>Number := (Number)/10000.0 - 4000.0</l>
<l>Roll[I] := Number</l>
<c></c>
<l>Tag_Lectura := '_EV02_O_EjeB'</l>
<l>Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<c></c>
<l>tuple_real (RV_CmdFotogen, Number)</l>
<l>Number := (Number)/10000.0 - 4000</l>
<l>Pitch[I] := Number</l>
<c></c>
<l>Tag_Lectura := '_EV02_O_EjeA'</l>
<l>Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>tuple_real (RV_CmdFotogen, Number)</l>
<c></c>
<l>Number := (Number)/10000 - 4000</l>
<l>Yaw[I] := Number</l>
<c>* </c>
<c>* Read pose of tool in robot base coordinates (ToolInBasePose)</c>
<l>create_pose (posx[I], posy[I], posz[I], Roll[I], Pitch[I], Yaw[I], 'Rp+T', 'abg', 'point', ToolInBasePose)</l>
<c>*   </c>
<l>catch (Exception)</l>
<c>    </c>
<l>    ToolInBasePose:=[]</l>
<l>    create_pose (-1, -1, -1, -1, -1, -1, 'Rp+T', 'abg', 'point', ToolInBasePose)</l>
<c>* </c>
<l>endtry</l>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Pose_Tool">
<parameters>
<parameter id="SerialHandle"/>
<parameter id="ToolInBasePose"/>
</parameters>
</docu>
</procedure>
<procedure name="Config_Parametros_Cam_R1">
<interface>
<ic>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera" base_type="ctrl" dimension="0"/>
<par name="NumberOfDisparities" base_type="ctrl" dimension="0"/>
<par name="MinimumDisparity" base_type="ctrl" dimension="0"/>
<par name="Projector" base_type="ctrl" dimension="0"/>
<par name="FrontLigth" base_type="ctrl" dimension="0"/>
<par name="AutoExposure" base_type="ctrl" dimension="0"/>
<par name="AutoGain" base_type="ctrl" dimension="0"/>
<par name="Gain" base_type="ctrl" dimension="0"/>
<par name="Exposure" base_type="ctrl" dimension="0"/>
<par name="FlexView" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="TempCam" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* </c>
<c>* Configuracion de parametros.</c>
<l>set_framegrabber_param (Camera, 'grab_data_items', ['Images/Rectified/Left', 'Images/Raw/Left', 'Images/PointMap'])</l>
<c>* </c>
<c>* </c>
<c>* Parametros para habilitar funciones directas de la camara</c>
<l>set_framegrabber_param (NxLib, 'Execute/Parameters/InitialTrigger', 'All')</l>
<c>* Proyector random de texturas</c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/182681/Parameters/Capture/Projector', Projector)</l>
<c>* Iluminacion</c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/182681/Parameters/Capture/FrontLight', FrontLigth)</l>
<c>* </c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/182681/Parameters/Capture/AutoExposure', AutoExposure)</l>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/182681/Parameters/Capture/AutoGain', AutoGain)</l>
<c></c>
<c></c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/182681/Parameters/Capture/Exposure', Exposure)</l>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/182681/Parameters/Capture/Gain', Gain)</l>
<c> </c>
<c>* ******************************************************************************************************</c>
<c></c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/182681/Parameters/DisparityMap/StereoMatching/NumberOfDisparities', NumberOfDisparities)</l>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/182681/Parameters/DisparityMap/StereoMatching/MinimumDisparity', MinimumDisparity)</l>
<c>* N° de imagenes de captura</c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/182681/Parameters/Capture/FlexView',FlexView)</l>
<c>* Temperatura de camara</c>
<l>get_framegrabber_param (NxLib, '//Cameras/BySerialNo/182681/Sensor/Temperature', TempCam)</l>
<c>* </c>
<l>return ()</l>
</body>
<docu id="Config_Parametros_Cam_R1">
<parameters>
<parameter id="AutoExposure"/>
<parameter id="AutoGain"/>
<parameter id="Camera"/>
<parameter id="Exposure"/>
<parameter id="FlexView"/>
<parameter id="FrontLigth"/>
<parameter id="Gain"/>
<parameter id="MinimumDisparity"/>
<parameter id="NumberOfDisparities"/>
<parameter id="NxLib"/>
<parameter id="Projector"/>
<parameter id="TempCam"/>
</parameters>
</docu>
</procedure>
<procedure name="Conectar_Ensenso_N35_COPY_1">
<interface>
<oc>
<par name="NxLib_1" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="Conexion_Camara_1" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* </c>
<l>Conexion_Camara_1 := false</l>
<l>try</l>
<c>    * </c>
<c>    * </c>
<c>    * Inicializacion de Arbol y camara estereo</c>
<l>    open_framegrabber ('Ensenso-NxLib', 0, 0, 0, 0, 0, 0, 'default', 0, 'Raw', 'auto_grab_data=0', 'false', 'Item', '/', 0, 0, NxLib_1)</l>
<l>    open_framegrabber ('Ensenso-NxLib', 0, 0, 0, 0, 0, 0, 'default', 0, 'Raw', 'auto_grab_data=0', 'false', 'Stereo', '', 0, 0, Camera_1)</l>
<c>    * </c>
<c>    * Abro puerto TCP del Arbol</c>
<l>    set_framegrabber_param (NxLib_1, 'do_open_tcp_port', 24002)</l>
<l>    Conexion_Camara_1 := true</l>
<c>    * </c>
<l>    return ()</l>
<l>catch (Exception)</l>
<l>    Conexion_Camara_1 := false</l>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="Conectar_Ensenso_N35_COPY_1">
<parameters>
<parameter id="Camera_1"/>
<parameter id="Conexion_Camara_1"/>
<parameter id="NxLib_1"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Img_Camera_R2">
<interface>
<oo>
<par name="ModelImage" base_type="iconic" dimension="0"/>
<par name="Xm" base_type="iconic" dimension="0"/>
<par name="Ym" base_type="iconic" dimension="0"/>
<par name="Zm" base_type="iconic" dimension="0"/>
<par name="ImgLeftCamera" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib_1" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Adq_Imagen (ModelImage, NxLib_1, Camera_1)</l>
<l>Adq_XYZ_Img (ModelImage, Xm, Ym, Zm)</l>
<c></c>
<c>***********************************************************************</c>
<c>****** Guardo las Imagenes ********************************************</c>
<l>get_system_time (MSecond, Second, Minute, Hour, Day, YDay, Month, Year)</l>
<l>write_object (ModelImage, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/R2/Pattern/ModelImage'+Month+Day+Hour+Second)</l>
<c>***********************************************************************</c>
<c></c>
<l>select_obj(ModelImage, ImgLeftCamera, 1)</l>
<l>xyz_to_object_model_3d (Xm, Ym, Zm, Escena3D_RAW)</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Img_Camera_R2">
<parameters>
<parameter id="Camera_1"/>
<parameter id="Escena3D_RAW"/>
<parameter id="ImgLeftCamera"/>
<parameter id="ModelImage"/>
<parameter id="NxLib_1"/>
<parameter id="Xm"/>
<parameter id="Ym"/>
<parameter id="Zm"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Pallet_BD">
<interface>
<ic>
<par name="Variable_BD" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="DataBD" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<l>wait_seconds(0.01)</l>
<l>try</l>
<c>    * </c>
<l>    Peticion := 'BaseDatos'</l>
<l>    Data := Peticion+';'+Variable_BD</l>
<c>    * </c>
<l>    write_serial (SerialHandle, ords(Data))</l>
<c>    * </c>
<l>    wait_seconds (0.1)</l>
<c>    * </c>
<c>    * Numero de caracteres a leer</c>
<l>    read_serial (SerialHandle, 120, Nchar)</l>
<l>    Nchar := chrt(Nchar)</l>
<c>    * </c>
<c>    * </c>
<c>    * </c>
<l>    tuple_split (Nchar, '#', Substrings)</l>
<l>    tuple_split (Substrings, '||', DataBD)</l>
<c>    * </c>
<l>catch (Exception)</l>
<l>endtry</l>
<c>* </c>
<c>* </c>
<c>* </c>
<c>* </c>
<l>return ()</l>
</body>
<docu id="Get_Pallet_BD">
<parameters>
<parameter id="DataBD"/>
<parameter id="SerialHandle"/>
<parameter id="Variable_BD"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Robot_Pose">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ToolInBasePose" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>try</l>
<c></c>
<l>    Escalamiento := 1</l>
<l>    Tag_Lectura := '_EV01_O_EjeX'    </l>
<l>    Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>    tuple_real (RV_CmdFotogen, Number)</l>
<l>    Number := (Number)/10000.0 - 4000.0</l>
<l>*     dev_inspect_ctrl (Number)</l>
<l>    posx := Number</l>
<c>     </c>
<l>    Tag_Lectura := '_EV01_O_EjeY'    </l>
<l>    Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>    tuple_real (RV_CmdFotogen, Number)</l>
<l>    Number := (Number)/10000.0 - 4000.0</l>
<l>    posy := Number</l>
<c>    * </c>
<l>    Tag_Lectura := '_EV01_O_EjeZ'    </l>
<l>    Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>    tuple_real (RV_CmdFotogen, Number)</l>
<l>    Number := (Number)/10000.0 - 4000.0</l>
<l>    posz := Number</l>
<c>    * </c>
<l>    Tag_Lectura := '_EV01_O_EjeC'    </l>
<l>    Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>    tuple_real (RV_CmdFotogen, Number)</l>
<l>    Number := (Number)/10000.0 - 4000.0</l>
<l>    Roll := Number</l>
<c>    * </c>
<l>    Tag_Lectura := '_EV01_O_EjeB'    </l>
<l>    Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<c>    * </c>
<l>    tuple_real (RV_CmdFotogen, Number)</l>
<l>    Number := (Number)/10000.0 - 4000</l>
<l>    Pitch := Number</l>
<c>    * </c>
<l>    Tag_Lectura := '_EV01_O_EjeA'    </l>
<l>    Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>    tuple_real (RV_CmdFotogen, Number)</l>
<c>    * </c>
<l>    Number := (Number)/10000 - 4000</l>
<l>    Yaw := Number</l>
<c>    * </c>
<c>    * Read pose of tool in robot base coordinates (ToolInBasePose)</c>
<l>    create_pose (posx, posy, posz, Roll, Pitch, Yaw, 'Rp+T', 'abg', 'point', ToolInBasePose)</l>
<c>    * </c>
<c>  </c>
<l>    return ()   </l>
<c>    </c>
<l>catch (Exception)</l>
<c>    </c>
<c>    </c>
<l>endtry</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
</body>
<docu id="Get_Robot_Pose">
<parameters>
<parameter id="SerialHandle"/>
<parameter id="ToolInBasePose"/>
</parameters>
</docu>
</procedure>
<procedure name="Take_Core_In_Pallet">
<interface>
<io>
<par name="Z" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
<par name="N_Pallet_to_Scan" base_type="ctrl" dimension="0"/>
<par name="Path_SFM_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_3D_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_Tofind" base_type="ctrl" dimension="0"/>
<par name="Path_CORE_ID" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="Visualizar3D" base_type="ctrl" dimension="0"/>
<par name="SegmentoPallet" base_type="ctrl" dimension="0"/>
<par name="Pose_Esquina" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Estado_SubProceso" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Parametros_Visualizacion := ['colored','disp_pose','point_size']</l>
<l>Valores_Visualizacion := [  12  ,'true',1]</l>
<c></c>
<c></c>
<c>* *****************************************</c>
<c>* 1.- Obtengo el ROI3D del PALLET</c>
<c>* *****************************************</c>
<l>Vector_Segmento := ['A','B','C','D','E','F','G','H','I']</l>
<c></c>
<c></c>
<l>try</l>
<l>    Get_ROI3D_Pallet (ROI3D_NullFrame, ROI3D_rotate)</l>
<l>catch (Exception)</l>
<c>    </c>
<l>    Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<l>*     throw (MensajeError)</l>
<c>    * </c>
<l>* # ### Envio data de estado ########################</l>
<c>    </c>
<l>    Estado := 5</l>
<l>    Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<c>    </c>
<l>* # ################################################# </l>
<c>    </c>
<l>    return ()</l>
<l>endtry</l>
<c>* </c>
<c></c>
<c></c>
<c>* </c>
<c>* </c>
<l>* # #### ROTO EL ROI 3D ######</l>
<c>* </c>
<l>try</l>
<l>* #####################################################################################</l>
<c>    * Funcion que Lee la pose guardada en el Bloque 0, y que referencia la orientacion de la camara</c>
<l>* #####################################################################################</l>
<l>    Get_Rotate_ROI3D (Pose_Esquina, ROI3D_rotate, Pose_Segmentos, ROI3D_rotate)</l>
<l>    Visualizar_3D ([Escena3D_RAW], Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, [], [], ['Modelo'], PoseOut1)</l>
<c>    * </c>
<l>catch (Exception)</l>
<c>    </c>
<l>    Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<l>    return ()</l>
<l>endtry</l>
<c>* </c>
<c>* </c>
<l>* # ###################################################################</l>
<l>* # ###################################################################</l>
<l>* # ################ BUSQUEDA DE CORES EN EL PALLET ###################</l>
<l>* # ###################################################################</l>
<l>* # ###################################################################</l>
<c>* 3.- Encuentro el orden y los segementos en que estan distribuidos los cores en el applet</c>
<c>* </c>
<c>* </c>
<l>Vector_Entidades_Segmento := Vector_ID_Core_by_Segment_Pallet_Tofind+';'+SegmentoPallet</l>
<c>* </c>
<c>* </c>
<l>try</l>
<c>    * </c>
<c>    * ********************************************************</c>
<c>    * ROI 3D sectorizado de cada elemento</c>
<c>    * Busco de manera sectorizada cara core en el pallet</c>
<c>    * ********************************************************</c>
<c>    * Estructura de vector</c>
<l>* # ###########################</l>
<l>* # ## CORE ## Existencia #####</l>
<l>* # ###########################</l>
<l>    Vector_Existencia_Core := {{[]}}</l>
<l>    Vector_Existencia_Core.at(0).at(0) := 'CORE'</l>
<l>    Vector_Existencia_Core.at(0).at(1) := 'Existencia'</l>
<c>    * </c>
<c>   </c>
<c>    </c>
<c>    </c>
<c>    ********************</c>
<c></c>
<l>    threshold (Z, Regions, 1000, 1293)</l>
<c></c>
<l>    reduce_domain (Z, Regions, Zred)    </l>
<l>    xyz_to_object_model_3d (X, Y, Zred, Escena3D_RAW)</l>
<c>    </c>
<c>    ********************</c>
<l>    Sampling := 0.02 </l>
<l>    Find_Sector_Core_Bloque3(Vector_ID_Core_by_Segment_Pallet_Tofind, Vector_Entidades_Segmento, Path_CORE_ID, Path_3D_Segmentos, Path_SFM_Segmentos, ROI3D_rotate, Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, Vector_Segmento, Escena3D_RAW, Sampling, SerialHandle, Vector_Existencia_Core, Vector_Estado_Fx, Vector_Existencia_Core_New)</l>
<c>    </c>
<c>    * </c>
<c>    * </c>
<l>* # ### Envio data de estado ########################</l>
<c>    </c>
<l>    Estado := 13</l>
<l>    Procesando := 0</l>
<l>    Resultado := 1</l>
<l>    Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>    Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<c>    * Borrar 3D</c>
<l>clear_object_model_3d ([ROI3D_rotate,ROI3D_NullFrame,Escena3D_RAW])</l>
<c>*</c>
<l>* # ################################################# </l>
<c>    * </c>
<l>catch (Exception)</l>
<l>    Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<c>    </c>
<l>    return ()</l>
<l>endtry</l>
<c>* </c>
<c>* ****************************************</c>
<c></c>
<l>return ()</l>
</body>
<docu id="Take_Core_In_Pallet">
<parameters>
<parameter id="Escena3D_RAW"/>
<parameter id="Estado_SubProceso"/>
<parameter id="N_Pallet_to_Scan"/>
<parameter id="Path_3D_Segmentos"/>
<parameter id="Path_CORE_ID"/>
<parameter id="Path_SFM_Segmentos"/>
<parameter id="Pose_Esquina"/>
<parameter id="SegmentoPallet"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_Tofind"/>
<parameter id="Visualizar3D"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Core_ToUse_From_BDD">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Cod_Core_ToUse" base_type="ctrl" dimension="0"/>
<par name="Pallet_To_Scan" base_type="ctrl" dimension="0"/>
<par name="Segmento_To_Scan" base_type="ctrl" dimension="0"/>
<par name="FXcheck" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>FXcheck:=false</l>
<l>try</l>
<l>    Variable_BD := 'ram_actualproduction'</l>
<l>    Get_Pallet_BD (Variable_BD, SerialHandle, DataBD)</l>
<c>    * </c>
<l>    Cod_Core_ToUse := DataBD[3]</l>
<l>    Cod_Core_ToUseAux := DataBD[3]</l>
<l>    Pallet_To_Scan := DataBD[15]</l>
<l>    Segmento_To_Scan := DataBD[16]</l>
<c>    </c>
<l>    wait_seconds(0.11)</l>
<c>    </c>
<l>*     Set_Core_Minus (Cod_Core_ToUse, SerialHandle, DataBdFull)</l>
<l>*     Cod_Core_ToUse   := DataBdFull[0]</l>
<l>*     Pallet_To_Scan   := DataBdFull[1]</l>
<l>*     Segmento_To_Scan := DataBdFull[2]</l>
<l>*     CantidadCore := DataBdFull[3]</l>
<l>    FXcheck:=true</l>
<c>    </c>
<l>    if (Cod_Core_ToUse='-1' and Cod_Core_ToUse='-1' and Pallet_To_Scan='-1' and Segmento_To_Scan='-1' )</l>
<l>        FXcheck:=false</l>
<l>        Mensaje:='### ERROR ### -&gt; Entidad Requerida -&gt; '+Cod_Core_ToUseAux+'con 0 &lt;- RAM base DATOS no CARGADA.'</l>
<l>        Send_Data_Info (Mensaje, SerialHandle)</l>
<l>    endif</l>
<c>    </c>
<l>catch (Exception)</l>
<c>    </c>
<l>    Mensaje:='### ERROR ### -&gt; Entidad Requerida -&gt; '+Cod_Core_ToUse+' &lt;- RAM base DATOS no CARGADA.'</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<l>    Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<l>    FXcheck:=false</l>
<l>endtry</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Core_ToUse_From_BDD">
<parameters>
<parameter id="Cod_Core_ToUse"/>
<parameter id="FXcheck"/>
<parameter id="Pallet_To_Scan"/>
<parameter id="Segmento_To_Scan"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Config_Parametros_Cam_R2">
<interface>
<ic>
<par name="Camera" base_type="ctrl" dimension="0"/>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="NumberOfDisparities" base_type="ctrl" dimension="0"/>
<par name="MinimumDisparity" base_type="ctrl" dimension="0"/>
<par name="Proyector" base_type="ctrl" dimension="0"/>
<par name="Iluminacion" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="TempCam" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* </c>
<c>* Configuracion de parametros.</c>
<l>set_framegrabber_param (Camera, 'grab_data_items', ['Images/Rectified/Left', 'Images/Rectified/Right', 'Images/PointMap','Images/DisparityMap'])</l>
<c>* </c>
<c>* </c>
<c>* Parametros para habilitar funciones directas de la camara</c>
<l>*set_framegrabber_param (NxLib, 'Execute/Parameters/InitialTrigger', 'All')</l>
<c>* Proyector random de texturas</c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/Projector', 'false')</l>
<c>* Iluminacion</c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/FrontLight', 'false')</l>
<c>* </c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/AutoExposure', 'true')</l>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/AutoGain', 'true')</l>
<c>* </c>
<c>* </c>
<c>* ******************************************************************************************************</c>
<c></c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/DisparityMap/StereoMatching/NumberOfDisparities', NumberOfDisparities)</l>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/DisparityMap/StereoMatching/MinimumDisparity', MinimumDisparity)</l>
<c>* </c>
<c>* </c>
<c>* </c>
<c>* N° de imagenes de captura</c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/FlexView', 1)</l>
<c>* </c>
<c>* Temperatura de camara</c>
<l>get_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Sensor/Temperature', TempCam)</l>
<c>* </c>
<l>return ()</l>
</body>
<docu id="Config_Parametros_Cam_R2">
<parameters>
<parameter id="Camera"/>
<parameter id="Iluminacion"/>
<parameter id="MinimumDisparity"/>
<parameter id="NumberOfDisparities"/>
<parameter id="NxLib"/>
<parameter id="Proyector"/>
<parameter id="TempCam"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Img_Camera_2">
<interface>
<oo>
<par name="ModelImage" base_type="iconic" dimension="0"/>
<par name="Xm" base_type="iconic" dimension="0"/>
<par name="Ym" base_type="iconic" dimension="0"/>
<par name="Zm" base_type="iconic" dimension="0"/>
<par name="ImgLeftCamera" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib_1" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Adq_Imagen (ModelImage, NxLib_1, Camera_1)</l>
<l>Adq_XYZ_Img (ModelImage, Xm, Ym, Zm)</l>
<l>select_obj(ModelImage, ImgLeftCamera, 1)</l>
<l>xyz_to_object_model_3d (Xm, Ym, Zm, Escena3D_RAW)</l>
<l>return ()</l>
</body>
<docu id="Get_Img_Camera_2">
<parameters>
<parameter id="Camera_1"/>
<parameter id="Escena3D_RAW"/>
<parameter id="ImgLeftCamera"/>
<parameter id="ModelImage"/>
<parameter id="NxLib_1"/>
<parameter id="Xm"/>
<parameter id="Ym"/>
<parameter id="Zm"/>
</parameters>
</docu>
</procedure>
<procedure name="Save_Pose_Palle">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Pose_Refinada" base_type="ctrl" dimension="0"/>
<par name="N_Pallet_to_Scan" base_type="ctrl" dimension="0"/>
<par name="Pose_Robot" base_type="ctrl" dimension="2"/>
</ic>
</interface>
<body>
<c>   </c>
<l>    ToolInBasePose:=Pose_Robot.at(0).at(0)</l>
<c>    </c>
<l>    Path:='C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/7.-HandEye/1.- Ensenso R1/ToolInCamPose_R1.dat'   </l>
<l>    read_pose (Path, ToolInCamPose)</l>
<c>    </c>
<l>    ToolInCamPose[0:2]:=ToolInCamPose[0:2]*1e3</l>
<c>   </c>
<l>    ObjInCamPose:=Pose_Refinada</l>
<c>    </c>
<l>    pose_invert (ToolInCamPose, CamInToolPose)</l>
<l>    pose_compose (ToolInBasePose, CamInToolPose, CamInBasePose)</l>
<l>    pose_compose (CamInBasePose, ObjInCamPose, ObjInBasePose)</l>
<c>    </c>
<l>    NamePose:='Pallet_'+N_Pallet_to_Scan</l>
<l>    Path_Save_Pose_PalletN:='C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/5.-Ing Software/0 Identificacion de Pallet/'+NamePose+'.dat'</l>
<c>    </c>
<l>    write_pose (CamInBasePose, Path_Save_Pose_PalletN)</l>
<l>    Path_Save_Pose_PalletN:='C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/5.-Ing Software/0 Identificacion de Pallet/'+NamePose+'ObjInBase.dat'</l>
<l>    write_pose (ObjInBasePose, Path_Save_Pose_PalletN)</l>
<l>    Path_Save_Pose_PalletN:='C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/5.-Ing Software/0 Identificacion de Pallet/'+NamePose+'ToolInBase.dat'</l>
<l>    write_pose (ToolInBasePose, Path_Save_Pose_PalletN)    </l>
<l>    Path_Save_Pose_PalletN:='C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/5.-Ing Software/0 Identificacion de Pallet/'+NamePose+'ObjInCam.dat'</l>
<l>    write_pose (ObjInCamPose, Path_Save_Pose_PalletN) </l>
<c>    </c>
<c>    </c>
<l>return ()</l>
</body>
<docu id="Save_Pose_Palle">
<parameters>
<parameter id="N_Pallet_to_Scan"/>
<parameter id="Pose_Refinada"/>
<parameter id="Pose_Robot"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_Data_To_Robot">
<interface>
<ic>
<par name="Pose_Refinada" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>    convert_pose_type (Pose_Refinada, 'Rp+T', 'abg', 'point', Pose_Refinada_Tp2)</l>
<l>    for Index := 0 to |Pose_Refinada|-2 by 1</l>
<l>        VR_PosicionEsquinaPallet[Index]:=Pose_Refinada[Index]      </l>
<l>    endfor</l>
<c>   </c>
<c>   </c>
<c>    ********************************</c>
<c>    * Enviar por ETHERNETIP</c>
<c>    ********************************</c>
<l>    Variable_Pos:=['X','Y','Z','C','B','A']</l>
<l>    for Index_Var:= 0 to |VR_PosicionEsquinaPallet|-1 by 1</l>
<l>        Tag_Destino:='_EV02_I_Eje'+Variable_Pos[Index_Var]</l>
<l>        Variable:=VR_PosicionEsquinaPallet[Index_Var]</l>
<l>        Send_EthernetIP_Data (Tag_Destino, Variable, SerialHandle)</l>
<l>  *wait_seconds (0.1)</l>
<l>    endfor</l>
<l>return ()</l>
<c></c>
<c></c>
</body>
<docu id="Send_Data_To_Robot">
<parameters>
<parameter id="Pose_Refinada"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Rototate_ROI">
<interface>
<ic>
<par name="Pose_Refinada" base_type="ctrl" dimension="0"/>
<par name="ROI3D_rotate" base_type="ctrl" dimension="0"/>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Visualizar3D" base_type="ctrl" dimension="0"/>
<par name="Vector_Segmento" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Pose_Segmentos" base_type="ctrl" dimension="0"/>
<par name="ROI3D_rotateOut" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>ROI3D_rotateOut := ROI3D_rotate</l>
<l>try</l>
<c>    </c>
<c>    * Roto el ROI 3D respecto a la esquina encontrada</c>
<l>    Get_Rotate_ROI3D (Pose_Refinada, ROI3D_rotateOut, Pose_Segmentos, ROI3D_rotateOut)</l>
<c>    </c>
<l>    Visualizar_3D ([ROI3D_rotateOut,Escena3D_RAW], Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, [], [], [Vector_Segmento,'Modelo'], PoseOut1)</l>
<c>    </c>
<c>    </c>
<l>catch (Exception)</l>
<l>    dev_get_exception_data (Exception, 'error_msg', ErrorMsg0)</l>
<l>    dev_get_exception_data (Exception, 'procedure', ErrorMsg1)</l>
<l>    dev_get_exception_data (Exception, 'operator', ErrorMsg2)</l>
<l>    dev_get_exception_data (Exception, 'program_line', ErrorMsg3)</l>
<c>    </c>
<l>    MensajeError:=ErrorMsg0+' IN '+ErrorMsg1+' IN FUNTION '+ErrorMsg2+' IN LINE '+ErrorMsg3</l>
<l>*     throw (MensajeError)</l>
<l>    Msg_Sub_Proceso:='#Error# '+MensajeError</l>
<l>    Estado_SubProceso:=false</l>
<l>    return()</l>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="Rototate_ROI">
<parameters>
<parameter id="Escena3D_RAW"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="Pose_Refinada"/>
<parameter id="Pose_Segmentos"/>
<parameter id="ROI3D_rotate"/>
<parameter id="ROI3D_rotateOut"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="Vector_Segmento"/>
<parameter id="Visualizar3D"/>
</parameters>
</docu>
</procedure>
<procedure name="Set_Exposure_Estereo">
<interface>
<ic>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Exposure" base_type="ctrl" dimension="0"/>
<par name="Gain" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/AutoExposure', 'false')</l>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/AutoGain', 'false')</l>
<c></c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/Exposure', Exposure)</l>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/Gain', Gain)</l>
<l>return ()</l>
</body>
<docu id="Set_Exposure_Estereo">
<parameters>
<parameter id="Exposure"/>
<parameter id="Gain"/>
<parameter id="NxLib"/>
</parameters>
</docu>
</procedure>
<procedure name="MakeSFM_Palletr">
<interface>
<io>
<par name="Esquina" base_type="iconic" dimension="0"/>
<par name="Z" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="ConnectedRegions" base_type="iconic" dimension="0"/>
<par name="SelectedRegions" base_type="iconic" dimension="0"/>
<par name="ImageReduced" base_type="iconic" dimension="0"/>
<par name="MultiChannelImage" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Esquina3D" base_type="ctrl" dimension="0"/>
<par name="Pose" base_type="ctrl" dimension="0"/>
<par name="Esquina3D_Trans" base_type="ctrl" dimension="0"/>
<par name="Pose1" base_type="ctrl" dimension="0"/>
<par name="PoseOut1" base_type="ctrl" dimension="0"/>
<par name="Sampling" base_type="ctrl" dimension="0"/>
<par name="SurfaceModelID" base_type="ctrl" dimension="0"/>
<par name="ObjectModel3DNormals" base_type="ctrl" dimension="0"/>
<par name="Esquina_Tri" base_type="ctrl" dimension="0"/>
<par name="Information" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>connection (Esquina, ConnectedRegions)</l>
<l>select_shape_std (ConnectedRegions, SelectedRegions, 'max_area', 90)</l>
<l>dilation_rectangle1 (SelectedRegions, RegionDilation, 19, 19)</l>
<l>reduce_domain (Z, RegionDilation, ImageReduced)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>compose3 (X, Y, ImageReduced, MultiChannelImage)</l>
<c></c>
<l>area_center (SelectedRegions, Area, Row, Column)</l>
<l>get_grayval (X, Row, Column, X1)</l>
<l>get_grayval (Y, Row, Column, Y1)</l>
<l>get_grayval (Z, Row, Column, Z1)</l>
<c></c>
<c></c>
<l>xyz_to_object_model_3d (X, Y, ImageReduced, Esquina3D)</l>
<l>create_pose (-X1, -Y1, -Z1, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose)</l>
<l>rigid_trans_object_model_3d (Esquina3D, Pose, Esquina3D_Trans)</l>
<c></c>
<l>Visualizar_3D (Esquina3D_Trans, Parametros_Visualizacion, Valores_Visualizacion, 1, [], [], [], PoseOut1)</l>
<c></c>
<l>* create_pose (0, 0, 0, 0, 180, 0, 'Rp+T', 'gba', 'point', Pose1)</l>
<l>* rigid_trans_object_model_3d (Esquina3D_Trans, Pose1, Esquina3D_Trans)</l>
<c></c>
<l>* create_pose (0, 0, 0, 0, 0, -90, 'Rp+T', 'gba', 'point', Pose1)</l>
<l>* rigid_trans_object_model_3d (Esquina3D_Trans, Pose1, Esquina3D_Trans)</l>
<c></c>
<c></c>
<c>******************************************************************************************************************************</c>
<l>Visualizar_3D (Esquina3D_Trans, Parametros_Visualizacion, Valores_Visualizacion, 1, [], [], [], PoseOut1)</l>
<c>******************************************************************************************************************************</c>
<c></c>
<c></c>
<l>Sampling:=0.01</l>
<c></c>
<c>* ***************************************************************************************************</c>
<c>* 5.- Creo Surface Model</c>
<c>* ***************************************************************************************************</c>
<c>* Si es necesario samplear el objeto</c>
<l>*surface_normals_object_model_3d (Esquina3D_Trans, 'mls', [], [], Esquina3D_Trans2)</l>
<l>*triangulate_object_model_3d (Esquina3D_Trans, 'greedy', [], [], Esquina_Tri, Information)</l>
<c></c>
<l>create_surface_model (Esquina3D_Trans, Sampling, [], [], SurfaceModelID)</l>
<c></c>
<c></c>
<c>* ***************************************************************************************************</c>
<c>* 6.- Guardo Surface Model y Modelo 3D</c>
<c>* ***************************************************************************************************</c>
<c>* </c>
<c></c>
<l>write_surface_model (SurfaceModelID, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/SFM_PALLET/SFM_Pallet_beta.sfm')</l>
<l>write_object_model_3d (Esquina3D_Trans, 'om3', 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/SFM_PALLET/3D_Pallet_beta.om3', [], [])</l>
<c></c>
<l>return ()</l>
</body>
<docu id="MakeSFM_Palletr">
<parameters>
<parameter id="ConnectedRegions"/>
<parameter id="Esquina"/>
<parameter id="Esquina3D"/>
<parameter id="Esquina3D_Trans"/>
<parameter id="Esquina_Tri"/>
<parameter id="ImageReduced"/>
<parameter id="Information"/>
<parameter id="MultiChannelImage"/>
<parameter id="ObjectModel3DNormals"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="Pose"/>
<parameter id="Pose1"/>
<parameter id="PoseOut1"/>
<parameter id="Sampling"/>
<parameter id="SelectedRegions"/>
<parameter id="SurfaceModelID"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_objeto_0_and_1">
<interface>
<io>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
<par name="Z" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Objeto_0" base_type="iconic" dimension="0"/>
<par name="Objeto_1" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib_1" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="NumberOfDisparities_Cam1" base_type="ctrl" dimension="0"/>
<par name="MinimumDisparity_Cam1" base_type="ctrl" dimension="0"/>
<par name="Projector" base_type="ctrl" dimension="0"/>
<par name="FrontLigth" base_type="ctrl" dimension="0"/>
<par name="AutoExposure" base_type="ctrl" dimension="0"/>
<par name="AutoGain" base_type="ctrl" dimension="0"/>
<par name="Gain" base_type="ctrl" dimension="0"/>
<par name="Exposure" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Escena3D_RAW_Esq" base_type="ctrl" dimension="0"/>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>XOut := X</l>
<l>YOut := Y</l>
<l>ZOut := Z</l>
<l>AutoExposureOut := AutoExposure</l>
<l>AutoGainOut := AutoGain</l>
<l>ExposureOut := Exposure</l>
<l>FrontLigthOut := FrontLigth</l>
<l>GainOut := Gain</l>
<l>MinimumDisparity_Cam1Out := MinimumDisparity_Cam1</l>
<l>NumberOfDisparities_Cam1Out := NumberOfDisparities_Cam1</l>
<l>ProjectorOut := Projector</l>
<l>Config_Parametros_Cam_R1 (NxLib_1, Camera_1, NumberOfDisparities_Cam1Out, MinimumDisparity_Cam1Out, ProjectorOut, FrontLigthOut, AutoExposureOut, AutoGainOut, GainOut, ExposureOut, FlexView, TempCam)</l>
<l>Get_Img_Camera_R2 (ModelImage, X_Esq, Y_Esq, Z_Esq, ImgLeftCamera_Esq, NxLib_1, Camera_1, Escena3D_RAW_Esq)</l>
<c></c>
<l>    compose3 (XOut, YOut, ZOut, Objeto_0)</l>
<l>* ############################################################################</l>
<c></c>
<l>* #########################################################################</l>
<c>* Configuracion de Parametros</c>
<l>    MinimumDisparity_Cam1Out := -97</l>
<l>    NumberOfDisparities_Cam1Out := 32</l>
<l>    ProjectorOut := 'true'</l>
<l>    FrontLigthOut := 'true'</l>
<l>    AutoExposureOut := 'true'</l>
<l>    AutoGainOut := 'true'</l>
<l>    ExposureOut := 4.9</l>
<l>    GainOut := 1</l>
<l>Config_Parametros_Cam_R1 (NxLib_1, Camera_1, NumberOfDisparities_Cam1Out, MinimumDisparity_Cam1Out, ProjectorOut, FrontLigthOut, AutoExposureOut, AutoGainOut, GainOut, ExposureOut, FlexView1, TempCam)</l>
<l>Get_Img_Camera_R2 (ModelImage, XOut, YOut, ZOut, ImgLeftCamera, NxLib_1, Camera_1, Escena3D_RAW)</l>
<c></c>
<l>    compose3 (XOut, YOut, ZOut, Objeto_1)</l>
<l>* ############################################################################</l>
<l>Estado:=3</l>
<c>*[3] -&gt; Sacar otr foto</c>
<l>Resultado:=3</l>
<l>Procesando:=1</l>
<l>Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* ################################################################################</l>
<c>    </c>
<c>    </c>
<l>return ()</l>
</body>
<docu id="Get_objeto_0_and_1">
<parameters>
<parameter id="AutoExposure"/>
<parameter id="AutoGain"/>
<parameter id="Camera_1"/>
<parameter id="Escena3D_RAW"/>
<parameter id="Escena3D_RAW_Esq"/>
<parameter id="Exposure"/>
<parameter id="FrontLigth"/>
<parameter id="Gain"/>
<parameter id="MinimumDisparity_Cam1"/>
<parameter id="NumberOfDisparities_Cam1"/>
<parameter id="NxLib_1"/>
<parameter id="Objeto_0"/>
<parameter id="Objeto_1"/>
<parameter id="Projector"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Objeto_2">
<interface>
<oo>
<par name="Objeto_2" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib_1" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Pose_Robot" base_type="ctrl" dimension="2"/>
<par name="MinimumDisparity_Cam1" base_type="ctrl" dimension="0"/>
<par name="NumberOfDisparities_Cam1" base_type="ctrl" dimension="0"/>
<par name="Exposure" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Pose_Robot_New" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>    * #########################################################################</c>
<c>* Configuracion de Parametros</c>
<c></c>
<l>Projector:='true'</l>
<l>FrontLigth:='true'</l>
<l>AutoExposure:='true'</l>
<l>AutoGain:='true'</l>
<l>Gain:=1</l>
<l>FlexView:=4</l>
<l>get_dinamic_Image (ModelImage, X, Y, Z, ImgLeftCamera, Gris, NxLib_1, Camera_1, NumberOfDisparities_Cam1, MinimumDisparity_Cam1, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure)</l>
<l>dev_display (Gris)</l>
<c></c>
<c></c>
<l>    compose3 (X, Y, Z, Objeto_2)</l>
<c></c>
<l>* ############################################################################</l>
<l>Get_Pose_Tool (SerialHandle, ToolInBasePose)</l>
<l>Pose_Robot_New:=ToolInBasePose</l>
<l>* #########################################################################</l>
<c></c>
<c></c>
<l>* ############################################################################</l>
<l>* Estado:=3</l>
<c>*[3] -&gt; Sacar otr foto</c>
<l>* Resultado:=3</l>
<l>* Procesando:=1</l>
<l>* Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<c></c>
<l>TagDestino:='_EV02_I_Resultado'</l>
<l>Send_Pulse_EthernetIp_Data (TagDestino, 3, SerialHandle, 0, 0.5)</l>
<l>* ################################################################################</l>
<c> </c>
<c>    </c>
<l>return ()</l>
</body>
<docu id="Get_Objeto_2">
<parameters>
<parameter id="Camera_1"/>
<parameter id="Exposure"/>
<parameter id="MinimumDisparity_Cam1"/>
<parameter id="NumberOfDisparities_Cam1"/>
<parameter id="NxLib_1"/>
<parameter id="Objeto_2"/>
<parameter id="Pose_Robot"/>
<parameter id="Pose_Robot_New"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Objeto_3">
<interface>
<oo>
<par name="Objeto_3" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib_1" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="MinimumDisparity_Cam1" base_type="ctrl" dimension="0"/>
<par name="NumberOfDisparities_Cam1" base_type="ctrl" dimension="0"/>
<par name="Exposure" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Pose_Robot_New" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>    * #########################################################################</c>
<c>* Configuracion de Parametros</c>
<c></c>
<l>Projector:='true'</l>
<l>FrontLigth:='true'</l>
<l>AutoExposure:='true'</l>
<l>AutoGain:='true'</l>
<c></c>
<l>Gain:=1</l>
<l>FlexView:=8</l>
<l>Config_Parametros_Cam_R1 (NxLib_1, Camera_1, NumberOfDisparities_Cam1, MinimumDisparity_Cam1, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure, FlexView, TempCam)</l>
<c></c>
<c></c>
<l>get_dinamic_Image (ModelImage, X, Y, Z, ImgLeftCamera, Gris, NxLib_1, Camera_1, NumberOfDisparities_Cam1, MinimumDisparity_Cam1, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure)</l>
<c></c>
<l>dev_display (Gris)</l>
<c></c>
<l>    compose3 (X, Y, Z, Objeto_3)</l>
<c>    </c>
<l>* ############################################################################</l>
<l>Get_Pose_Tool (SerialHandle, ToolInBasePose)</l>
<l>Pose_Robot_New:=ToolInBasePose</l>
<l>* #########################################################################</l>
<c></c>
<c></c>
<c></c>
<l>* ############################################################################</l>
<l>* Estado:=3</l>
<c>*[3] -&gt; Sacar otr foto</c>
<l>* Resultado:=3</l>
<l>* Procesando:=1</l>
<l>* Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<c></c>
<l>TagDestino:='_EV02_I_Resultado'</l>
<l>Send_Pulse_EthernetIp_Data (TagDestino, 3, SerialHandle, 0, 0.5)</l>
<l>* ################################################################################</l>
<c> </c>
<l>return ()</l>
</body>
<docu id="Get_Objeto_3">
<parameters>
<parameter id="Camera_1"/>
<parameter id="Exposure"/>
<parameter id="MinimumDisparity_Cam1"/>
<parameter id="NumberOfDisparities_Cam1"/>
<parameter id="NxLib_1"/>
<parameter id="Objeto_3"/>
<parameter id="Pose_Robot_New"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Objeto_0_and_1">
<interface>
<oo>
<par name="Objeto_0" base_type="iconic" dimension="0"/>
<par name="Objeto_1" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib_1" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Pose_Robot" base_type="ctrl" dimension="2"/>
<par name="MinimumDisparity_Cam1" base_type="ctrl" dimension="0"/>
<par name="NumberOfDisparities_Cam1" base_type="ctrl" dimension="0"/>
<par name="Exposure" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Pose_Robot_New" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>* #########################################################################</l>
<c>* Configuracion de Parametros</c>
<c></c>
<l>Projector:='false'</l>
<l>FrontLigth:='true'</l>
<l>AutoExposure:='false'</l>
<l>AutoGain:='false'</l>
<l>Exposure := 5</l>
<l>Gain:=8</l>
<l>Gain:=2</l>
<l>FlexView:=1</l>
<l>Config_Parametros_Cam_R1 (NxLib_1, Camera_1, NumberOfDisparities_Cam1, MinimumDisparity_Cam1, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure, FlexView, TempCam)</l>
<l>Get_Img_Camera_R2 (ModelImage, X_Esq, Y_Esq, Z_Esq, ImgLeftCamera_Esq, NxLib_1, Camera_1, Escena3D_RAW_Esq)</l>
<c></c>
<l>compose4 (X_Esq, Y_Esq, Z_Esq, ImgLeftCamera_Esq,Objeto_0)</l>
<l>* ############################################################################</l>
<c></c>
<l>Get_Pose_Tool (SerialHandle, ToolInBasePose)</l>
<l>Pose_Robot_New:=ToolInBasePose</l>
<l>* #########################################################################</l>
<c>* Configuracion de Parametros</c>
<c></c>
<l>Projector:='true'</l>
<l>Exposure:=1.8</l>
<l>AutoExposure:='true'</l>
<l>AutoGain:='true'</l>
<l>Config_Parametros_Cam_R1 (NxLib_1, Camera_1, NumberOfDisparities_Cam1, MinimumDisparity_Cam1, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure, FlexView, TempCam)</l>
<c></c>
<l>get_dinamic_Image (ModelImage, X, Y, Z, ImgLeftCamera, Gris, NxLib_1, Camera_1, NumberOfDisparities_Cam1, MinimumDisparity_Cam1, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure)</l>
<c></c>
<l>dev_display (Gris)</l>
<c></c>
<l>compose3 (X, Y, Z, Objeto_1)</l>
<c></c>
<c></c>
<l>* ############################################################################</l>
<l>* Estado:=3</l>
<c>*[3] -&gt; Sacar otr foto</c>
<l>* Resultado:=3</l>
<l>* Procesando:=1</l>
<l>* Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<c></c>
<l>TagDestino:='_EV02_I_Resultado'</l>
<l>Send_Pulse_EthernetIp_Data (TagDestino, 3, SerialHandle, 0, 0.5)</l>
<c></c>
<l>* ################################################################################</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Objeto_0_and_1">
<parameters>
<parameter id="Camera_1"/>
<parameter id="Exposure"/>
<parameter id="MinimumDisparity_Cam1"/>
<parameter id="NumberOfDisparities_Cam1"/>
<parameter id="NxLib_1"/>
<parameter id="Objeto_0"/>
<parameter id="Objeto_1"/>
<parameter id="Pose_Robot"/>
<parameter id="Pose_Robot_New"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Pallet_Model">
<interface>
<oo>
<par name="Objeto_0" base_type="iconic" dimension="0"/>
<par name="Objeto_1" base_type="iconic" dimension="0"/>
<par name="Objeto_2" base_type="iconic" dimension="0"/>
<par name="Objeto_3" base_type="iconic" dimension="0"/>
<par name="Zobj1" base_type="iconic" dimension="0"/>
<par name="Xobj1" base_type="iconic" dimension="0"/>
<par name="Yobj1" base_type="iconic" dimension="0"/>
<par name="Img_Left_Esquina" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib_1" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Pose_Robot" base_type="ctrl" dimension="2"/>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
<par name="Base_esquina" base_type="ctrl" dimension="0"/>
<par name="Estado_Fx" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>* ####################################################</l>
<l>Estado:=20</l>
<l>Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>Mensaje:='Inicio de captura Imagenes'</l>
<l>Send_Data_Info (Mensaje, SerialHandle)</l>
<l>* ###################################################</l>
<c></c>
<l>Pose_Robot:={ { [] } }</l>
<l>Pose_Robot.at(0).at(0):='CORE'</l>
<l>Contador_foto:=0</l>
<c></c>
<l>Escuhar_Robot:=true</l>
<l>Contador_foto:=0</l>
<c></c>
<l>* #####################################################</l>
<l>MinimumDisparity_Cam1 := -32</l>
<l>NumberOfDisparities_Cam1 := 32</l>
<l>Exposure:=9</l>
<l>* #####################################################</l>
<l>Get_Objeto_0_and_1 (Objeto_0, Objeto_1, NxLib_1, Camera_1, Vector_Estado_Fx, SerialHandle, Pose_Robot, MinimumDisparity_Cam1, NumberOfDisparities_Cam1, Exposure, Pose_Robot_New)</l>
<l>Pose_Robot.at(0).at(0):=Pose_Robot_New</l>
<l>Contador_foto:=Contador_foto+1</l>
<l>* #####################################################</l>
<c></c>
<l>Mensaje:='Imagen 1 capturada'</l>
<l>Send_Data_Info (Mensaje, SerialHandle)</l>
<c></c>
<l>while (Escuhar_Robot)</l>
<c>    </c>
<l>    Tag_Lectura:='_EV02_O_CmdDatos'         </l>
<l>    Read_EthernetIP_Data (Tag_Lectura, SerialHandle, _EV2_O_CmdDatos)</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    if (_EV2_O_CmdDatos = 11)</l>
<c>        </c>
<l>        switch (Contador_foto)</l>
<c>            </c>
<c>            </c>
<l>        case 1:</l>
<l>            Get_Objeto_2 (Objeto_2, NxLib_1, Camera_1, Vector_Estado_Fx, SerialHandle, Pose_Robot, MinimumDisparity_Cam1, NumberOfDisparities_Cam1, Exposure, Pose_Robot_New)</l>
<l>            Pose_Robot.at(1).at(0):=Pose_Robot_New</l>
<l>            Contador_foto:=Contador_foto+1</l>
<l>            Mensaje:='Imagen 2 capturada'</l>
<l>            Send_Data_Info (Mensaje, SerialHandle)</l>
<c>            </c>
<l>            break</l>
<c>            </c>
<l>        case 2:</l>
<c>            </c>
<l>            Get_Objeto_3 (Objeto_3, NxLib_1, Camera_1, Vector_Estado_Fx, SerialHandle, MinimumDisparity_Cam1, NumberOfDisparities_Cam1, Exposure, Pose_Robot_New)</l>
<l>            Pose_Robot.at(2).at(0):=Pose_Robot_New</l>
<l>            Contador_foto:=0</l>
<l>            Escuhar_Robot:=false</l>
<l>            Mensaje:='Imagen 3 capturada. FIN Adquisicion'</l>
<l>            Send_Data_Info (Mensaje, SerialHandle)</l>
<c>            </c>
<l>            break   </l>
<c>            </c>
<l>        endswitch</l>
<c>        </c>
<c>        </c>
<l>    endif</l>
<c>    </c>
<l>endwhile</l>
<c></c>
<c></c>
<l>get_system_time (MSecond, Second, Minute, Hour, Day, YDay, Month, Year)</l>
<c></c>
<l>Fecha:=Year+'_'+Month+'_'+Day+'_'+Hour+'_'+Minute+'_'+Second+'_'+MSecond</l>
<c></c>
<l>write_object (Objeto_0, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/R2/Pattern_F0_'+Fecha)</l>
<l>write_object (Objeto_1, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/R2/Pattern_F1_'+Fecha)</l>
<l>write_object (Objeto_2, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/R2/Pattern_F2_'+Fecha)</l>
<l>write_object (Objeto_3, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/R2/Pattern_F3_'+Fecha)</l>
<c></c>
<l> read_object (Objeto_0, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/R2/Pattern_F0_2019_8_5_15_48_41_857')</l>
<l> read_object (Objeto_1, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/R2/Pattern_F1_2019_8_5_15_48_41_857')</l>
<l> read_object (Objeto_2, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/R2/Pattern_F2_2019_8_5_15_48_41_857')</l>
<l> read_object (Objeto_3, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/R2/Pattern_F3_2019_8_5_15_48_41_857')</l>
<c></c>
<c>***** Genero la Imagen.  ******</c>
<c>**### Translado la imagen segun lo que se movio #####</c>
<l>decompose4 (Objeto_0, X, Y, Z,Img_Left_Esquina)</l>
<l>decompose3 (Objeto_1, Xobj1, Yobj1, Zobj1)</l>
<l>decompose3 (Objeto_2, Xobj2, Yobj2, Zobj2)</l>
<l>decompose3 (Objeto_3, Xobj3, Yobj3, Zobj3)</l>
<c></c>
<l>xyz_to_object_model_3d (Xobj1, Yobj1, Zobj1, ObjectModel3D_1)</l>
<l>xyz_to_object_model_3d (Xobj2, Yobj2, Zobj2, ObjectModel3D_2)</l>
<l>xyz_to_object_model_3d (Xobj3, Yobj3, Zobj3, ObjectModel3D_3)</l>
<c></c>
<c></c>
<l>Pose_1:=Pose_Robot.at(0).at(0)</l>
<l>Pose_2:=Pose_Robot.at(1).at(0)</l>
<l>Pose_3:=Pose_Robot.at(2).at(0)</l>
<c></c>
<l>deltaTranslado:=Pose_2[1]-Pose_1[1]</l>
<l>* deltaTranslado:=500</l>
<l>create_pose(-deltaTranslado, 0, 0, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose_Translado)</l>
<l>rigid_trans_object_model_3d (ObjectModel3D_2, Pose_Translado, ObjectModel3D_2_New)</l>
<c></c>
<c></c>
<l>deltaTranslado:=Pose_3[1]-Pose_1[1]</l>
<l>* deltaTranslado:=1000</l>
<l>create_pose(-deltaTranslado, 0, 0, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose_Translado)</l>
<l>rigid_trans_object_model_3d (ObjectModel3D_3, Pose_Translado, ObjectModel3D_3_New)</l>
<c></c>
<l>union_object_model_3d ([ObjectModel3D_1,ObjectModel3D_2_New,ObjectModel3D_3_New], 'points_surface', Escena3D_RAW)</l>
<c></c>
<l>Parametros_Visualizacion:=['disp_pose','color_attrib','lut','disp_lines','point_size']</l>
<l>Valores_Visualizacion:= ['false','coord_z','rainbow','true',1]</l>
<c></c>
<l>DebugView:=1</l>
<l>* Visualizar_3D ([Escena3D_RAW], Parametros_Visualizacion, Valores_Visualizacion,DebugView, [], [], [], PoseOut1)</l>
<c></c>
<l>create_pose (0, 200, 8500, 0, 0, 0, 'Rp+T', 'gba', 'point', PoseView)</l>
<c></c>
<l>dev_get_window (WindowHandle)</l>
<l>disp_object_model_3d (WindowHandle, Escena3D_RAW, [], PoseView, Parametros_Visualizacion, Valores_Visualizacion)</l>
<c></c>
<c></c>
<l>Estado_Fx:=true</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Pallet_Model">
<parameters>
<parameter id="Base_esquina"/>
<parameter id="Camera_1"/>
<parameter id="Escena3D_RAW"/>
<parameter id="Estado_Fx"/>
<parameter id="Img_Left_Esquina"/>
<parameter id="NxLib_1"/>
<parameter id="Objeto_0"/>
<parameter id="Objeto_1"/>
<parameter id="Objeto_2"/>
<parameter id="Objeto_3"/>
<parameter id="Pose_Robot"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="Xobj1"/>
<parameter id="Yobj1"/>
<parameter id="Zobj1"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_ToolInCamPose">
<interface>
<oc>
<par name="ToolInCamPose" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>    read_pose ('C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/7.-HandEye/1.- Ensenso R1/ToolInCamPose_R1.dat', ToolInCamPose)</l>
<c>  </c>
<l>return ()</l>
</body>
<docu id="Get_ToolInCamPose">
<parameters>
<parameter id="ToolInCamPose"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_ObjInBasePose">
<interface>
<ic>
<par name="Pose_Refinada" base_type="ctrl" dimension="0"/>
<par name="Pose_Robot" base_type="ctrl" dimension="2"/>
</ic>
<oc>
<par name="ObjInBasePose" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>    ObjInCamPose := Pose_Refinada</l>
<c></c>
<l>    ToolInBasePose:=Pose_Robot.at(0).at(0)</l>
<l>       Get_ToolInCamPose (ToolInCamPose)</l>
<c>       </c>
<c>   </c>
<c>    </c>
<l>pose_invert (ToolInCamPose, CamInToolPose)</l>
<l>pose_compose (ToolInBasePose, CamInToolPose, CamInBasePose)</l>
<l>pose_compose (CamInBasePose, ObjInCamPose, ObjInBasePose)</l>
<c>    </c>
<l>dev_inspect_ctrl(ObjInBasePose)</l>
<l>return ()</l>
</body>
<docu id="Get_ObjInBasePose">
<parameters>
<parameter id="ObjInBasePose"/>
<parameter id="Pose_Refinada"/>
<parameter id="Pose_Robot"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_ImgWhitROI_Camera_1">
<interface>
<oo>
<par name="ModelImage" base_type="iconic" dimension="0"/>
<par name="Xm" base_type="iconic" dimension="0"/>
<par name="Ym" base_type="iconic" dimension="0"/>
<par name="Zm" base_type="iconic" dimension="0"/>
<par name="ImgLeftCamera" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Adq_Imagen (ModelImage, NxLib, Camera_1)</l>
<l>Adq_XYZ_Img (ModelImage, Xm, Ym, Zm)</l>
<l>select_obj(ModelImage, ImgLeftCamera, 1)</l>
<l>xyz_to_object_model_3d (Xm, Ym, Zm, Escena3D_RAW)</l>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_ImgWhitROI_Camera_1">
<parameters>
<parameter id="Camera_1"/>
<parameter id="Escena3D_RAW"/>
<parameter id="ImgLeftCamera"/>
<parameter id="ModelImage"/>
<parameter id="NxLib"/>
<parameter id="Xm"/>
<parameter id="Ym"/>
<parameter id="Zm"/>
</parameters>
</docu>
</procedure>
<procedure name="Bloque3">
<interface>
<ic>
<par name="Vector_ID_Core_by_Segment_Pallet" base_type="ctrl" dimension="0"/>
<par name="Vector_Entidades_Segmento" base_type="ctrl" dimension="0"/>
<par name="Path_CORE_ID" base_type="ctrl" dimension="0"/>
<par name="Path_3D_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_SFM_Segmentos" base_type="ctrl" dimension="0"/>
<par name="ROI3D_rotate" base_type="ctrl" dimension="0"/>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Visualizar3D" base_type="ctrl" dimension="0"/>
<par name="Vector_Segmento" base_type="ctrl" dimension="0"/>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
<par name="Sampling" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Vector_Existencia_Core" base_type="ctrl" dimension="2"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
</ic>
<oc>
<par name="Vector_Existencia_Core_New" base_type="ctrl" dimension="2"/>
</oc>
</interface>
<body>
<l>N_divisiones_Pallet:=9</l>
<l>N_divisiones_Pallet:=|Vector_ID_Core_by_Segment_Pallet|</l>
<c></c>
<l>dev_inspect_ctrl(Vector_Existencia_Core)</l>
<l>for Index := 0 to N_divisiones_Pallet-1 by 1</l>
<l>    Vector_Existencia_Core.at(Index+1).at(0):=''</l>
<l>    Vector_Existencia_Core.at(Index+1).at(1):=false</l>
<c>    </c>
<l>endfor</l>
<c></c>
<c></c>
<c></c>
<l>* #########################################</l>
<c>**##### REVISAR #########################</c>
<l>* ## Si Vector_Entidades_Segmento funciona bien como limite del for</l>
<c></c>
<l>Largo:=|Vector_Entidades_Segmento|</l>
<c></c>
<c></c>
<l>try</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    for N_Entidad := 0 to N_divisiones_Pallet-1 by 1</l>
<c>        </c>
<c>        </c>
<l>        tuple_split (Vector_Entidades_Segmento[N_Entidad], ';', Aux)</l>
<l>        Entidad_To_Find:=Aux[0]</l>
<l>        N_Sectores_To_Find:=|Aux|</l>
<l>        ROI3D:=[]</l>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        ********************************************</c>
<c>        * Leo el SFM y STL del Core</c>
<c>        ********************************************</c>
<c>        </c>
<l>* #### Envio data de estado ########################</l>
<l>        Procesando:=1</l>
<l>        Estado:=9</l>
<l>        Resultado:=1</l>
<l>        Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* ################################################## </l>
<c>        </c>
<c>        </c>
<l>        if (Entidad_To_Find ==' ')</l>
<l>            Vector_Existencia_Core.at(N_Entidad+1).at(0):=Entidad_To_Find</l>
<l>            Vector_Existencia_Core.at(N_Entidad+1).at(1):=false</l>
<c>            </c>
<l>        else</l>
<c>            </c>
<l>            Get_SFM_STL (Entidad_To_Find, Path_CORE_ID, Path_3D_Segmentos, Path_SFM_Segmentos, ObjectModel3D_Core_Pallet, SFM_Core_Pallet, Estado_Get_SFM_STL, Modelo3D_Select)</l>
<c>            </c>
<c>            </c>
<l>            for j := 1 to N_Sectores_To_Find-1 by 1</l>
<l>                N_Roi:=Aux[j]</l>
<l>                tuple_number (Aux[j], N_Roi)</l>
<l>                copy_object_model_3d (ROI3D_rotate[N_Roi], 'all', ROI3D_aux)</l>
<l>                ROI3D:=[ROI3D,ROI3D_aux]</l>
<c>                </c>
<l>            endfor</l>
<l>            Get_ROI_3D (ROI3D, Escena3D_RAW, Modelo_3D_ROI)</l>
<c>            </c>
<c>            </c>
<l>            Visualizar_3D ( [ ROI3D,Escena3D_RAW], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Visualizar3D, [], [],[], PoseOut1)</l>
<l>            Visualizar_3D ( [Modelo_3D_ROI], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Visualizar3D, [], [], [], PoseOut1)</l>
<c>            </c>
<c>            ***************************************************************</c>
<c>            *Filtro la altura maxima</c>
<c>            * Utilizo esto para elminar el piso de la escena y evitar errores</c>
<l>            Altura_Maxima_camara_Piso_Pallet:=2400</l>
<c>            ***************************************************************</c>
<l>            Set_Max_Altura_Model3D (Modelo_3D_ROI, Altura_Maxima_camara_Piso_Pallet, Modelo_3D_ROI_Thres)</l>
<c>            </c>
<c>            </c>
<l>            Visualizar_3D ([Modelo_3D_ROI_Thres], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Visualizar3D, [], [], [], PoseOut1)      </l>
<l>            Visualizar_3D ([ObjectModel3D_Core_Pallet], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Visualizar3D, [], [], [], PoseOut1)</l>
<c>            </c>
<l>            N_Model_To_Find:=|Modelo_3D_ROI_Thres|</l>
<l>            if (|Modelo_3D_ROI_Thres|&gt;1)</l>
<c>                </c>
<l>                union_object_model_3d (Modelo_3D_ROI_Thres, 'points_surface', Modelo_3D_ROI_Thres)</l>
<l>                Visualizar_3D ([Modelo_3D_ROI_Thres], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Visualizar3D, [], [], [], PoseOut1)</l>
<c>                </c>
<l>            endif</l>
<c>            </c>
<c>            </c>
<c>            </c>
<c>            </c>
<c>            </c>
<c>            </c>
<c>            </c>
<c>            ****************************</c>
<c>            * Parametros de control</c>
<c>            ****************************</c>
<l>            Sampling_Find := 0.05</l>
<l>            Keypoint := 1</l>
<l>            MinScore := 0.01</l>
<l>            N_matches := N_Model_To_Find</l>
<l>            SFM:=SFM_Core_Pallet</l>
<l>            Escena3D:=Modelo_3D_ROI_Thres</l>
<l>            Mod_3D_Objeto:=ObjectModel3D_Core_Pallet</l>
<c>            </c>
<l>            Visualizar_3D ([Escena3D,Mod_3D_Objeto], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Visualizar3D, [], [], [], PoseOut1)</l>
<c>            </c>
<c>            ****************************</c>
<l>* #### Envio data de estado ########################</l>
<l>            Procesando:=1</l>
<l>            Estado:=10</l>
<l>            Resultado:=1</l>
<l>            Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* ################################################## </l>
<c>            </c>
<c>            </c>
<l>            Find_Entity_3D (N_matches, SFM, Escena3D, Sampling_Find, Keypoint, MinScore,Mod_3D_Objeto, \
                            PoseMLS, ScoreMLS, \
                            Pose_Refinada, Score_Refinado, SurfaceMatchingResultID1, \
                            Posicion3D_Objeto, Posicion3D_Objeto_REFIN, Obj_Detectado)</l>
<c>            </c>
<c>            </c>
<l>            if ( Obj_Detectado)</l>
<c>                </c>
<l>* #### Envio data de estado ########################</l>
<l>                Procesando:=1</l>
<l>                Estado:=11</l>
<l>                Resultado:=1</l>
<l>                Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* ################################################## </l>
<c>                </c>
<c>                </c>
<l>                Visualizar_3D ([Modelo_3D_ROI,Posicion3D_Objeto,Escena3D_RAW], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Visualizar3D, [], [], [], PoseOut1)</l>
<c>                </c>
<l>                Vector_Existencia_Core.at(N_Entidad+1).at(0):=Entidad_To_Find</l>
<l>                Vector_Existencia_Core.at(N_Entidad+1).at(1):=true</l>
<l>            else</l>
<c>                </c>
<l>* #### Envio data de estado ########################</l>
<l>                Procesando:=1</l>
<l>                Estado:=12</l>
<l>                Resultado:=1</l>
<l>                Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* ################################################## </l>
<l>                Vector_Existencia_Core.at(N_Entidad+1).at(0):=Entidad_To_Find</l>
<l>                Vector_Existencia_Core.at(N_Entidad+1).at(1):=false</l>
<l>            endif</l>
<l>            clear_object_model_3d([ROI3D,Modelo_3D_ROI,ObjectModel3D_Core_Pallet])</l>
<l>        endif</l>
<c>          </c>
<l>    endfor</l>
<l>catch (Exception)</l>
<l>  sdf:=123  </l>
<c>    </c>
<l>endtry</l>
<l>Vector_Existencia_Core_New:=Vector_Existencia_Core</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Bloque3">
<parameters>
<parameter id="Escena3D_RAW"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="Path_3D_Segmentos"/>
<parameter id="Path_CORE_ID"/>
<parameter id="Path_SFM_Segmentos"/>
<parameter id="ROI3D_rotate"/>
<parameter id="Sampling"/>
<parameter id="SerialHandle"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="Vector_Entidades_Segmento"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="Vector_Existencia_Core"/>
<parameter id="Vector_Existencia_Core_New"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet"/>
<parameter id="Vector_Segmento"/>
<parameter id="Visualizar3D"/>
</parameters>
</docu>
</procedure>
<procedure name="Find_Sector_Core_Bloque3">
<interface>
<ic>
<par name="Vector_ID_Core_by_Segment_Pallet" base_type="ctrl" dimension="0"/>
<par name="Vector_Entidades_Segmento" base_type="ctrl" dimension="0"/>
<par name="Path_CORE_ID" base_type="ctrl" dimension="0"/>
<par name="Path_3D_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_SFM_Segmentos" base_type="ctrl" dimension="0"/>
<par name="ROI3D_rotate" base_type="ctrl" dimension="0"/>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Visualizar3D" base_type="ctrl" dimension="0"/>
<par name="Vector_Segmento" base_type="ctrl" dimension="0"/>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
<par name="Sampling" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Vector_Existencia_Core" base_type="ctrl" dimension="2"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
</ic>
<oc>
<par name="Vector_Existencia_Core_New" base_type="ctrl" dimension="2"/>
</oc>
</interface>
<body>
<l>N_divisiones_Pallet:=9</l>
<l>N_divisiones_Pallet:=|Vector_ID_Core_by_Segment_Pallet|</l>
<c></c>
<c></c>
<l>dev_inspect_ctrl(Vector_Existencia_Core)</l>
<l>for Index := 0 to N_divisiones_Pallet-1 by 1</l>
<l>    Vector_Existencia_Core.at(Index+1).at(0):=''</l>
<l>    Vector_Existencia_Core.at(Index+1).at(1):=false</l>
<c>    </c>
<l>endfor</l>
<c></c>
<c></c>
<l>* #########################################</l>
<c>**##### REVISAR #########################</c>
<l>* ## Si Vector_Entidades_Segmento funciona bien como limite del for</l>
<c></c>
<l>NElementos:=|Vector_Entidades_Segmento|</l>
<c></c>
<c></c>
<l>try</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    for N_Entidad := 0 to NElementos-1 by 1</l>
<c>        </c>
<c>        </c>
<l>        tuple_split (Vector_Entidades_Segmento[N_Entidad], ';', Aux)</l>
<l>        Entidad_To_Find:=Aux[0]</l>
<l>        N_Sectores_To_Find:=|Aux|</l>
<l>        ROI3D:=[]</l>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        ********************************************</c>
<c>        * Leo el SFM y STL del Core</c>
<c>        ********************************************</c>
<c>        </c>
<l>* #### Envio data de estado ########################</l>
<c>        </c>
<l>        Estado:=9</l>
<l>        Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<c>        </c>
<l>* ################################################## </l>
<c>        </c>
<c>        </c>
<l>        if (Entidad_To_Find ==' ')</l>
<l>            Vector_Existencia_Core.at(N_Entidad+1).at(0):=Entidad_To_Find</l>
<l>            Vector_Existencia_Core.at(N_Entidad+1).at(1):=false</l>
<c>            </c>
<l>        else</l>
<c>            </c>
<l>            Get_SFM_STL (Entidad_To_Find, Path_CORE_ID, Path_3D_Segmentos, Path_SFM_Segmentos, ObjectModel3D_Core_Pallet, SFM_Core_Pallet, Estado_Get_SFM_STL, Modelo3D_Select)</l>
<c>            </c>
<c>            </c>
<c>            ***************************************************************</c>
<c>            *Filtro la altura maxima</c>
<c>            * Utilizo esto para elminar el piso de la escena y evitar errores</c>
<l>            Altura_Maxima_camara_Piso_Pallet:=2200</l>
<c>            ***************************************************************</c>
<c>            </c>
<l>            Set_Max_Altura_Model3D (Escena3D_RAW, Altura_Maxima_camara_Piso_Pallet, Modelo_3D_ROI_Thres)</l>
<c>                        *** Calculo los bordes 3D ***</c>
<l>            edges_object_model_3d (Modelo_3D_ROI_Thres, 0.02, [], [], Modelo_3D_ROI_ThresEdges)</l>
<l>            Visualizar_3D ([Modelo_3D_ROI_ThresEdges], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Visualizar3D, [], [], [], PoseOut1)</l>
<c>            </c>
<c>            </c>
<l>            Visualizar_3D ([Escena3D_RAW], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Visualizar3D, [], [], [], PoseOut1)      </l>
<c>            </c>
<l>            N_Model_To_Find:=|Modelo_3D_ROI_Thres|</l>
<l>            if (|Modelo_3D_ROI_Thres|&gt;1)</l>
<c>                </c>
<l>                union_object_model_3d (Modelo_3D_ROI_Thres, 'points_surface', Modelo_3D_ROI_Thres)</l>
<l>                Visualizar_3D ([Modelo_3D_ROI_Thres], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Visualizar3D, [], [], [], PoseOut1)</l>
<c>                </c>
<l>            endif</l>
<c>            </c>
<c>            </c>
<c>            </c>
<c>            ****************************</c>
<c>            * Parametros de control</c>
<c>            ****************************</c>
<l>            Sampling_Find := 0.02</l>
<l>            Keypoint := 1</l>
<l>            MinScore := 0.05</l>
<l>            N_matches := N_Model_To_Find</l>
<l>            SFM:=SFM_Core_Pallet</l>
<c></c>
<l>            Mod_3D_Objeto:=ObjectModel3D_Core_Pallet</l>
<c>             ****************************</c>
<c>            * Si lo que busco es una Manga, Busco el objeto por Bordes</c>
<c>            ****************************  </c>
<l>            tuple_strrstr (Modelo3D_Select, 'MANGA',  Manga)</l>
<l>            if (Manga&gt;0)</l>
<l>              Escena3D:=  Modelo_3D_ROI_ThresEdges</l>
<l>            else</l>
<l>              Escena3D:=Modelo_3D_ROI_Thres   </l>
<l>            endif</l>
<c>             </c>
<c>            </c>
<l>            Visualizar_3D ([Escena3D,Mod_3D_Objeto], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Visualizar3D, [], [], [], PoseOut1)</l>
<c>            </c>
<c>            ****************************</c>
<l>* #### Envio data de estado ########################          </l>
<l>            Estado:=10</l>
<l>            Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* ################################################## </l>
<c>            </c>
<c>          </c>
<l>            Find_Entity_3D (N_matches, SFM, Escena3D, Sampling_Find, Keypoint, MinScore,Mod_3D_Objeto, \
                            PoseMLS, ScoreMLS, \
                            Pose_Refinada, Score_Refinado, SurfaceMatchingResultID1, \
                            Posicion3D_Objeto, Posicion3D_Objeto_REFIN, Obj_Detectado)</l>
<c>            </c>
<c>            </c>
<l>            if ( Obj_Detectado)</l>
<c>                </c>
<l>* #### Envio data de estado ########################</l>
<c>                </c>
<l>                Estado:=11</l>
<l>                Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* ####################################################### </l>
<l>* ### Verifico si los datos corresponden a lo calculado</l>
<l>* ### Modo Debug ###               </l>
<l>*                 Verificate_Pose_RobotVision (SerialHandle, Pose_Refinada)</l>
<l>* #######################################################    </l>
<c>                </c>
<c>                </c>
<l>                Visualizar_3D ([Posicion3D_Objeto_REFIN,Escena3D_RAW], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Visualizar3D, [], [], [], PoseOut1)</l>
<c>                </c>
<l>                Vector_Existencia_Core.at(N_Entidad+1).at(0):=Entidad_To_Find</l>
<l>                Vector_Existencia_Core.at(N_Entidad+1).at(1):=true</l>
<c>                ***************************************                </c>
<c>                *  Envio la informacino al Robot         </c>
<l>                Send_Data_To_Robot(Pose_Refinada,SerialHandle)</l>
<c>                ***************************************</c>
<c>                </c>
<l>                *dev_inspect_ctrl (Pose_Refinada)</l>
<c>                </c>
<l>                clear_object_model_3d([ ObjectModel3D_Core_Pallet, Posicion3D_Objeto, Posicion3D_Objeto_REFIN,Modelo_3D_ROI_ThresEdges])</l>
<l>                clear_surface_model (SFM_Core_Pallet)</l>
<l>            else</l>
<c>                </c>
<c>                </c>
<l>                Procesando:=1</l>
<l>                Estado:=11</l>
<l>                Resultado:=1</l>
<l>                Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>                Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<c>                </c>
<l>            endif</l>
<l>            clear_object_model_3d([ObjectModel3D_Core_Pallet])</l>
<l>*             clear_surface_model (SFM_Core_Pallet)</l>
<l>        endif</l>
<c>        </c>
<l>    endfor</l>
<l>catch (Exception)</l>
<l>    sdf:=123  </l>
<c>    </c>
<l>endtry</l>
<l>Vector_Existencia_Core_New:=Vector_Existencia_Core</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Find_Sector_Core_Bloque3">
<parameters>
<parameter id="Escena3D_RAW"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="Path_3D_Segmentos"/>
<parameter id="Path_CORE_ID"/>
<parameter id="Path_SFM_Segmentos"/>
<parameter id="ROI3D_rotate"/>
<parameter id="Sampling"/>
<parameter id="SerialHandle"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="Vector_Entidades_Segmento"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="Vector_Existencia_Core"/>
<parameter id="Vector_Existencia_Core_New"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet"/>
<parameter id="Vector_Segmento"/>
<parameter id="Visualizar3D"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Centro_and_Esquina">
<interface>
<io>
<par name="Esquina_Left" base_type="iconic" dimension="0"/>
<par name="Xobj1" base_type="iconic" dimension="0"/>
<par name="Yobj1" base_type="iconic" dimension="0"/>
<par name="Zobj1" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Esquina_LeftOut" base_type="iconic" dimension="0"/>
</oo>
<oc>
<par name="row1" base_type="ctrl" dimension="0"/>
<par name="col1" base_type="ctrl" dimension="0"/>
<par name="CentroX" base_type="ctrl" dimension="0"/>
<par name="CentroY" base_type="ctrl" dimension="0"/>
<par name="CentroZ" base_type="ctrl" dimension="0"/>
<par name="Nelementos" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Esquina_LeftOut := Esquina_Left</l>
<l>shape_trans (Esquina_LeftOut, Esquina_LeftOut, 'rectangle2')</l>
<l>orientation_region (Esquina_LeftOut, Phi)</l>
<l>* Angulo:=Phi*180/3.1415 -90</l>
<l>* Phi:=0</l>
<l>area_center (Esquina_LeftOut, Area, Row, Column)</l>
<l>Nelementos:=|Area|</l>
<l>* dev_set_line_width (7)</l>
<l>* Length := 80</l>
<l>* disp_arrow (200000, Row, Column, Row + cos(Phi ) * Length, Column + sin(Phi  ) * Length, 3)</l>
<c></c>
<c></c>
<l>region_features (Esquina_LeftOut, 'row1', row1)</l>
<l>region_features (Esquina_LeftOut, 'column1', col1)</l>
<c></c>
<l>region_features (Esquina_LeftOut, 'row2', row2)</l>
<l>region_features (Esquina_LeftOut, 'column2', col2)</l>
<l>dev_set_line_width (7)</l>
<l>disp_cross (200000, row1, col1, 6, 0)</l>
<l>disp_cross (200000, row2, col2, 6, 0)</l>
<c></c>
<c></c>
<l>get_grayval (Xobj1, Row, Column, CentroX)</l>
<l>get_grayval (Yobj1, Row, Column, CentroY)</l>
<l>get_grayval (Zobj1, Row, Column, CentroZ)</l>
<l>return ()</l>
</body>
<docu id="Get_Centro_and_Esquina">
<parameters>
<parameter id="CentroX"/>
<parameter id="CentroY"/>
<parameter id="CentroZ"/>
<parameter id="Esquina_Left"/>
<parameter id="Esquina_LeftOut"/>
<parameter id="Nelementos"/>
<parameter id="Xobj1"/>
<parameter id="Yobj1"/>
<parameter id="Zobj1"/>
<parameter id="col1"/>
<parameter id="row1"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Esquina_LeftRight">
<interface>
<io>
<par name="Img_Left_Esquina" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Esquina_Left" base_type="iconic" dimension="0"/>
<par name="Esquina_Right" base_type="iconic" dimension="0"/>
</oo>
</interface>
<body>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>gen_rectangle1 (ROI_0, 2.34444, 1.68182, 252.656, 269)</l>
<c></c>
<l>gen_rectangle1 (ROI_1, 2.34444, 1066.41, 252.656, 1281.68)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>reduce_domain (Img_Left_Esquina, ROI_0, ImageReduced)</l>
<l>reduce_domain (Img_Left_Esquina, ROI_1, ImageReduced_rigth)</l>
<l>threshold (ImageReduced, Esquina, 140, 255)</l>
<l>threshold (ImageReduced_rigth, Esquina_rigth, 140, 255)</l>
<c></c>
<c></c>
<l>erosion_rectangle1 (Esquina, RegionErosion, 3, 3)</l>
<c></c>
<l>connection (RegionErosion, ConnectedRegions)</l>
<l>select_shape_std (ConnectedRegions, Esquina_Left, 'max_area',90)</l>
<c></c>
<c></c>
<l>erosion_rectangle1 (Esquina_rigth, RegionErosion, 3, 3)</l>
<c></c>
<l>connection (RegionErosion, ConnectedRegions)</l>
<l>select_shape_std (ConnectedRegions, Esquina_Right, 'max_area',90)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Esquina_LeftRight">
<parameters>
<parameter id="Esquina_Left"/>
<parameter id="Esquina_Right"/>
<parameter id="Img_Left_Esquina"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_Data_Estado">
<interface>
<ic>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="Estado" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>* ##### Envio de estado  #######################</l>
<l>*wait_seconds (0.2)</l>
<l>Valor_Variable:=Vector_Estado_Fx.at(Estado).at(0)</l>
<l>Tag_Destino:='_EV01_I_Estado'</l>
<c></c>
<l>Peticion     := 'HalconEstado'</l>
<l>Variable_OPC := Tag_Destino</l>
<l>Variable:=Vector_Estado_Fx.at(Estado).at(1)</l>
<l>Data:=Peticion+';'+Variable_OPC+';'+Variable</l>
<c></c>
<l>write_serial (SerialHandle, ords(Data))</l>
<c></c>
<l>* #### Fin envio de estado ######################  </l>
<c></c>
<l>return ()</l>
</body>
<docu id="Send_Data_Estado">
<parameters>
<parameter id="Estado"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_Data_Info">
<interface>
<ic>
<par name="Mensaje" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>* ##### Envio de estado  #######################</l>
<l>wait_seconds(0.1)</l>
<l>Valor_Variable:=Mensaje</l>
<l>Tag_Destino:='_EV01_I_Estado'</l>
<c></c>
<l>Peticion     := 'HalconEstado'</l>
<l>Variable_OPC := Tag_Destino</l>
<l>Variable:=Mensaje</l>
<l>Data:=Peticion+';'+Variable_OPC+';'+Variable</l>
<c></c>
<l>write_serial (SerialHandle, ords(Data))</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>* #### Fin envio de estado ######################  </l>
<c></c>
<l>return ()</l>
</body>
<docu id="Send_Data_Info">
<parameters>
<parameter id="Mensaje"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_Data_Error">
<interface>
<ic>
<par name="Exception" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="EstadoFx" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>    dev_get_exception_data (Exception, 'error_msg',    ErrorMsg0)</l>
<l>    dev_get_exception_data (Exception, 'procedure',    ErrorMsg1)</l>
<l>    dev_get_exception_data (Exception, 'operator',     ErrorMsg2)</l>
<l>    dev_get_exception_data (Exception, 'program_line', ErrorMsg3)</l>
<c>  </c>
<c>    </c>
<l>    MensajeError:=ErrorMsg0 + ' IN '+ErrorMsg1+' IN FUNTION '+ErrorMsg2+' IN LINE '+ErrorMsg3</l>
<l>    Mensaje:=MensajeError</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<l>    EstadoFx:=false</l>
<l>    wait_seconds (0.1)</l>
<c>    * #### Envio data de estado ########################</c>
<l>    Procesando:=0</l>
<l>    Resultado:=2</l>
<l>    Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<c>    </c>
<l>* ################################################## </l>
<l>return ()</l>
</body>
<docu id="Send_Data_Error">
<parameters>
<parameter id="EstadoFx"/>
<parameter id="Exception"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_PatronToRobot">
<interface>
<ic>
<par name="PoseForCalibrationPlate" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>        Variable_Pos := ['X','Y','Z','C','B','A']</l>
<l>        for Index_Var := 0 to 5 by 1</l>
<l>            Tag_Destino:='_EV01_I_Eje'+Variable_Pos[Index_Var]</l>
<l>            Variable := PoseForCalibrationPlate[Index_Var]</l>
<l>            Send_EthernetIP_Data (Tag_Destino, Variable, SerialHandle)</l>
<l>            wait_seconds (0.2)</l>
<l>        endfor</l>
<l>return ()</l>
</body>
<docu id="Send_PatronToRobot">
<parameters>
<parameter id="PoseForCalibrationPlate"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_SFM">
<interface>
<oc>
<par name="Modelo3D" base_type="ctrl" dimension="0"/>
<par name="SFM" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>read_object_model_3d ('D:/AI/Vision Artificial/4.-MAGOTTEAUX/21.-HandEye/3DBUFhandeye.om3', 1, [], [], Modelo3D, Status)</l>
<l>read_surface_model ('D:/AI/Vision Artificial/4.-MAGOTTEAUX/21.-HandEye/SFMBUFhandeye.sfm', SFM)</l>
<l>return ()</l>
</body>
<docu id="Get_SFM">
<parameters>
<parameter id="Modelo3D"/>
<parameter id="SFM"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_ObjInBasePose_COPY_1">
<interface>
<ic>
<par name="Pose_Refinada" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ObjInBasePose" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>ObjInCamPose := Pose_Refinada</l>
<c>* </c>
<l>read_pose ('C:/Users/Usuario/Dropbox (MIRS)/1.-Servidor Desarrollo Software/7.-Magotteaux/7.-HandEye/1.- Ensenso R1/ToolInCamPose_R1.dat', ToolInCamPose)</l>
<c>* </c>
<c>* </c>
<l>Get_Robot_Pose (SerialHandle, ToolInBasePose)</l>
<c>* </c>
<l>pose_invert (ToolInCamPose, CamInToolPose)</l>
<l>pose_compose (ToolInBasePose, CamInToolPose, CamInBasePose)</l>
<l>pose_compose (CamInBasePose, ObjInCamPose, ObjInBasePose)</l>
<l>return ()</l>
</body>
<docu id="Get_ObjInBasePose_COPY_1">
<parameters>
<parameter id="ObjInBasePose">
<description lang="es_ES">Objeto relativo a la base del robot</description>
</parameter>
<parameter id="Pose_Refinada">
<description lang="es_ES">Pose del objeto relativo a la camra</description>
</parameter>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Consolidado_Vision_R1">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="Path_SFM_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_3D_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_CORE_ID" base_type="ctrl" dimension="0"/>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="AcqHandle_Cam_0" base_type="ctrl" dimension="0"/>
<par name="Camera0_Parameters" base_type="ctrl" dimension="0"/>
<par name="Camera0_Pose" base_type="ctrl" dimension="0"/>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>Parametros_VisualizacionOut := Parametros_Visualizacion</l>
<l>Valores_VisualizacionOut := Valores_Visualizacion</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>Get_EstadoSerialBridge (EstadoSerialBridge)</l>
<c></c>
<c></c>
<l>while(EstadoSerialBridge)</l>
<c> </c>
<c>    *Variable a leer para activar la adquisicion del robot</c>
<l>    Tag_Lectura:='_EV01_O_CmdDatos'         </l>
<l>    Read_EthernetIP_Data (Tag_Lectura, SerialHandle, _EV1_O_CmdDatos)</l>
<c>    </c>
<l>* ######################################################################################</l>
<l>* ##################### BLOQUE 1########################################################</l>
<l>* #################Identificación de elementos en el pallet#############################</l>
<l>* ##### Input -&gt; RV_CmdFotogen #########################################################</l>
<l>* #####       -&gt; Imagen</l>
<l>* #####       -&gt; 'PV_Pallet_to_Scan'</l>
<l>* #####       -&gt; BD Cores</l>
<l>* #######################################################################################</l>
<c>    </c>
<c>    </c>
<l>    if (_EV1_O_CmdDatos &gt;= 11 and _EV1_O_CmdDatos &lt;= 16 )</l>
<c> </c>
<l>        Bloque_1 (Vector_Estado_Fx, SerialHandle, _EV1_O_CmdDatos, Path_SFM_Segmentos, Path_3D_Segmentos, Path_CORE_ID, NxLib, Camera_1)</l>
<c> </c>
<l>    endif</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>* ##############################FIN BLOQUE 0##############################################</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>* ######################################################################################</l>
<l>* ##################### BLOQUE 2########################################################</l>
<l>* #################Identificación de elementos en el pallet#############################</l>
<l>* ##### Input -&gt; RV_CmdFotogen #########################################################</l>
<l>* #####       -&gt; Imagen</l>
<l>* #####       -&gt; 'PV_Pallet_to_Scan'</l>
<l>* #####       -&gt; BD Cores</l>
<l>* ######################################################################################</l>
<l>    if (_EV1_O_CmdDatos = 20 or _EV1_O_CmdDatos = 21 )</l>
<c>        </c>
<c>        </c>
<c></c>
<l>        Bloque_2 (SerialHandle, Vector_Estado_Fx, AcqHandle_Cam_0, Camera0_Parameters, Camera0_Pose, Estado_SubProceso, PoseForCalibrationPlate, ToolInCamPose, ToolInBasePose, ObjInBasePose)</l>
<c>        </c>
<c>  </c>
<c>        </c>
<l>    endif</l>
<l>* ##############################FIN BLOQUE 2########################################################</l>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<l>* ######################################################################################</l>
<l>* ##################### BLOQUE 3########################################################</l>
<l>* #################        Tomar Cores e insertarlos       #############################</l>
<l>* ##### Input -&gt; RV_CmdFotogen #########################################################</l>
<l>* #####       -&gt; RAM Base Datos</l>
<l>* #####       -&gt; 'PV_Pallet_to_Scan'</l>
<l>* #####       -&gt; BD Cores</l>
<l>* ######################################################################################    </l>
<c>   </c>
<c>  </c>
<c>  </c>
<l>    if (_EV1_O_CmdDatos &gt; 21 and _EV1_O_CmdDatos &lt;= 26 )</l>
<c>  </c>
<c>        </c>
<l>        Bloque_3 (ModelImage, X, Y, Z, ImgLeftCamera, SerialHandle, NxLib, Camera_1, Parametros_Visualizacion, Valores_Visualizacion, Path_SFM_Segmentos, Path_3D_Segmentos, Path_CORE_ID, Vector_Estado_Fx, Mensaje, Procesando, Resultado, Escena3D_RAW, Cod_Core_ToUse, Pallet_To_Scan, Segmento_To_Scan, FXcheck, Position, NamePose, Esquina_Pallet_Pose, Vector_ID_Core_by_Segment_Palle_tofind, N_Pallet_to_Scan, SegmentoPallet, Pose_Esquina, Visualizar3D, Estado_SubProceso_Get_Core_Presence_In_Pallet)</l>
<c>   </c>
<c>    </c>
<l>    endif</l>
<l>* ##############################FIN BLOQUE 3########################################################</l>
<c>       </c>
<c>    </c>
<c>    </c>
<l>* ######################################################################################</l>
<l>* ##################### BLOQUE Extraccion Localizadores    #############################</l>
<l>* #################        Tomar Cores e insertarlos       #############################</l>
<l>* ##### Input -&gt; RV_CmdFotogen #########################################################</l>
<l>* #####       -&gt; PatternActual (BD)    </l>
<l>* ######################################################################################</l>
<l>    if (_EV1_O_CmdDatos &gt;= 30 and _EV1_O_CmdDatos &lt;= 49 )</l>
<c>        </c>
<l>        Bloque_Localizadores (SerialHandle, NxLib, Camera_1)</l>
<c>       </c>
<l>    endif</l>
<c>    </c>
<l>* ##############################FIN BLOQUE Extraccion Localizadores ####################</l>
<c>      </c>
<c></c>
<c>    </c>
<l>* ######################################################################################</l>
<l>* ##################### BLOQUE Extraccion Sprues           #############################</l>
<l>* #################        Tomar e insertarlos             #############################</l>
<l>* ##### Input -&gt; RV_CmdFotogen #########################################################</l>
<l>* #####       -&gt; PatternActual (BD)    </l>
<l>* ######################################################################################</l>
<l>    if (_EV1_O_CmdDatos &gt;= 50 and _EV1_O_CmdDatos &lt;= 59 )</l>
<c>        </c>
<l>        Bloque_Sprues (_EV1_O_CmdDatos, SerialHandle)</l>
<c>        </c>
<l>    endif  </l>
<l>* ##############################FIN BLOQUE Extraccion Sprues############################</l>
<c>   </c>
<c>    </c>
<l>    Get_EstadoSerialBridge (EstadoSerialBridge)</l>
<l>endwhile</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Consolidado_Vision_R1">
<parameters>
<parameter id="AcqHandle_Cam_0"/>
<parameter id="Camera0_Parameters"/>
<parameter id="Camera0_Pose"/>
<parameter id="Camera_1"/>
<parameter id="NxLib"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="Path_3D_Segmentos"/>
<parameter id="Path_CORE_ID"/>
<parameter id="Path_SFM_Segmentos"/>
<parameter id="SerialHandle"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="Vector_Estado_Fx"/>
</parameters>
</docu>
</procedure>
<procedure name="Find_SerialBridge">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>Bucle:=true</l>
<l>pathFile:='C:/DaFunk/InitFile.txt'</l>
<l>while (Bucle)</l>
<l>    try</l>
<l>        open_file(pathFile,'input',FileHandle)</l>
<l>*         fwrite_string(FileHandle,'Para escribir weas')</l>
<l>        fread_string(FileHandle,String,IsEOF) </l>
<l>*         fnew_line(FileHandle)</l>
<l>        close_file(FileHandle)</l>
<l>        if (String='True')</l>
<l>            Mensaje:='SerialBridge Detectado............'</l>
<l>            Send_Data_Info (Mensaje, SerialHandle)</l>
<l>            Bucle:=false</l>
<l>        endif</l>
<l>    catch (Exception )</l>
<c>        </c>
<l>    endtry</l>
<c>    </c>
<l>endwhile</l>
<l>return ()</l>
</body>
<docu id="Find_SerialBridge">
<parameters>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_EstadoSerialBridge">
<interface>
<oc>
<par name="EstadoSerialBridge" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>pathFile:='C:/DaFunk/InitFile.txt'</l>
<c></c>
<l>try</l>
<l>    open_file(pathFile,'input',FileHandle)</l>
<l>*     fwrite_string(FileHandle,'Para escribir weas')</l>
<l>    fread_string(FileHandle,EstadoSerialBridge,IsEOF) </l>
<l>*     fnew_line(FileHandle)</l>
<l>    close_file(FileHandle)</l>
<l>    if (EstadoSerialBridge='True')</l>
<l>        EstadoSerialBridge:=true</l>
<c>        </c>
<l>    else</l>
<l>        EstadoSerialBridge:=false</l>
<l>    endif</l>
<l>catch (Exception )</l>
<l>    EstadoSerialBridge:=false</l>
<c>   </c>
<l>endtry</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_EstadoSerialBridge">
<parameters>
<parameter id="EstadoSerialBridge"/>
</parameters>
</docu>
</procedure>
<procedure name="Verificate_Pose_RobotVision">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Pose_Refinada" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>                 Get_Pose_Tool (SerialHandle, realPoss)</l>
<l>                dev_inspect_ctrl (realPoss)</l>
<l>                Get_Pose_Tool (SerialHandle, ToolInBasePose)</l>
<l>                dev_inspect_ctrl (ToolInBasePose)</l>
<c>         </c>
<c>                * ************************************************************************************************************</c>
<c>                * Oriento el robot a como este la placa</c>
<c>                * ************************************************************************************************************</c>
<l>                read_pose ('C:/Users/Usuario/Dropbox (MIRS)/1.-Servidor Desarrollo Software/7.-Magotteaux/7.-HandEye/1.- Ensenso R1/ToolInCamPose_R1.dat', \
                           ToolInCamPose)</l>
<l>                pose_invert (ToolInCamPose, PoseInvert)</l>
<l>                dev_inspect_ctrl (PoseInvert)</l>
<l>                  pose_invert (PoseInvert, ToolInCamPose)</l>
<l>                dev_inspect_ctrl (ToolInCamPose)</l>
<l>               ObjInCamPose := Pose_Refinada</l>
<c>                </c>
<l>                pose_invert (ToolInCamPose, CamInToolPose)</l>
<l>                pose_compose (ToolInBasePose, CamInToolPose, CamInBasePose)</l>
<l>                pose_compose (CamInBasePose, ObjInCamPose, ObjInBasePose)</l>
<l>                convert_pose_type (ObjInBasePose, 'Rp+T', 'abg', 'point', ObjInBasePose)</l>
<l>                dev_inspect_ctrl (ObjInBasePose)</l>
<c>                </c>
<l>return ()</l>
</body>
<docu id="Verificate_Pose_RobotVision">
<parameters>
<parameter id="Pose_Refinada"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="OldCode">
<interface>
<ic>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Visualizar3D" base_type="ctrl" dimension="0"/>
<par name="ObjectModel3D_Borde_Pallet" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="SurfaceModelID" base_type="ctrl" dimension="0"/>
<par name="ObjectModel3D" base_type="ctrl" dimension="0"/>
<par name="Status" base_type="ctrl" dimension="0"/>
<par name="PoseOut1" base_type="ctrl" dimension="0"/>
<par name="Sampling" base_type="ctrl" dimension="0"/>
<par name="Sampling_Find" base_type="ctrl" dimension="0"/>
<par name="Keypoint" base_type="ctrl" dimension="0"/>
<par name="MinScore" base_type="ctrl" dimension="0"/>
<par name="N_matches" base_type="ctrl" dimension="0"/>
<par name="SFM" base_type="ctrl" dimension="0"/>
<par name="Escena3D" base_type="ctrl" dimension="0"/>
<par name="Objeto3D" base_type="ctrl" dimension="0"/>
<par name="Estado" base_type="ctrl" dimension="0"/>
<par name="PoseMLS" base_type="ctrl" dimension="0"/>
<par name="ScoreMLS" base_type="ctrl" dimension="0"/>
<par name="Pose_Refinada" base_type="ctrl" dimension="0"/>
<par name="Score_Refinado" base_type="ctrl" dimension="0"/>
<par name="SurfaceMatchingResultID1" base_type="ctrl" dimension="0"/>
<par name="Posicion3D_Objeto" base_type="ctrl" dimension="0"/>
<par name="Posicion3D_Objeto_REFIN" base_type="ctrl" dimension="0"/>
<par name="Obj_Detectado_EsquinaPallets" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>if (false)</l>
<c>    </c>
<c>    </c>
<l>read_surface_model ('D:/AI/Vision Artificial/4.-MAGOTTEAUX/SFM_PALLET/SFM_Pallet_beta.sfm', SurfaceModelID)</l>
<l>read_object_model_3d ('D:/AI/Vision Artificial/4.-MAGOTTEAUX/SFM_PALLET/3D_Pallet_beta.om3', 1, [], [], ObjectModel3D, Status)</l>
<c></c>
<l>Visualizar_3D ([ObjectModel3D], Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, [], [], [], PoseOut1)</l>
<c></c>
<c></c>
<l>    Sampling:=0.01</l>
<l>    Sampling_Find := Sampling</l>
<l>    Keypoint := 1</l>
<l>    MinScore := 0.01</l>
<l>    N_matches := 1</l>
<l>    SFM:=SurfaceModelID</l>
<l>    Escena3D:=ObjectModel3D_Borde_Pallet</l>
<l>    Objeto3D:=ObjectModel3D</l>
<c>    **************************************************</c>
<c>    ******************************************************************************************************************************</c>
<l>Visualizar_3D ([Escena3D,Objeto3D], Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, [], [], [], PoseOut1)</l>
<c></c>
<l>* #### Envio data de estado #####################################</l>
<l>    Estado:=6</l>
<l>    Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* ############################################################### </l>
<c>    </c>
<c>    </c>
<l>    Find_Entity_3D (N_matches, SFM, Escena3D, Sampling_Find, Keypoint, MinScore,Objeto3D, \
                    PoseMLS, ScoreMLS, \
                    Pose_Refinada, Score_Refinado, SurfaceMatchingResultID1, \
                    Posicion3D_Objeto, Posicion3D_Objeto_REFIN, Obj_Detectado_EsquinaPallets)</l>
<l>    dev_inspect_ctrl (Pose_Refinada)</l>
<l>Send_Data_To_Robot (Pose_Refinada, SerialHandle)  </l>
<c></c>
<l>endif</l>
<l>return ()</l>
</body>
<docu id="OldCode">
<parameters>
<parameter id="Escena3D"/>
<parameter id="Estado"/>
<parameter id="Keypoint"/>
<parameter id="MinScore"/>
<parameter id="N_matches"/>
<parameter id="Obj_Detectado_EsquinaPallets"/>
<parameter id="ObjectModel3D"/>
<parameter id="ObjectModel3D_Borde_Pallet"/>
<parameter id="Objeto3D"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="PoseMLS"/>
<parameter id="PoseOut1"/>
<parameter id="Pose_Refinada"/>
<parameter id="Posicion3D_Objeto"/>
<parameter id="Posicion3D_Objeto_REFIN"/>
<parameter id="SFM"/>
<parameter id="Sampling"/>
<parameter id="Sampling_Find"/>
<parameter id="ScoreMLS"/>
<parameter id="Score_Refinado"/>
<parameter id="SerialHandle"/>
<parameter id="Status"/>
<parameter id="SurfaceMatchingResultID1"/>
<parameter id="SurfaceModelID"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="Visualizar3D"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Image_Bloque3">
<interface>
<oo>
<par name="ModelImage" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
<par name="Z" base_type="iconic" dimension="0"/>
<par name="ImgLeftCamera" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>        * Configuracion de Parametros</c>
<l>        MinimumDisparity_Cam1:=-35</l>
<l>        NumberOfDisparities_Cam1:= 128</l>
<c>   </c>
<l>        Projector:='true'</l>
<l>        FrontLigth:='true'</l>
<l>        AutoExposure:='false'</l>
<l>        AutoGain:='false'</l>
<l>        Exposure := 4.49</l>
<l>        Gain:=1</l>
<l>        FlexView:=16</l>
<l>        Config_Parametros_Cam_R1 (NxLib, Camera_1, NumberOfDisparities_Cam1, MinimumDisparity_Cam1, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure, FlexView, TempCam)</l>
<c>        </c>
<c></c>
<c>       </c>
<l>Adq_Imagen (ModelImage, NxLib, Camera_1)</l>
<l>Adq_XYZ_Img (ModelImage, X, Y, Z)</l>
<c> </c>
<l>gen_rectangle1 (ROI_0, 248.795, 247.209, 1016.8, 989.326)</l>
<c></c>
<l>*gen_rectangle1 (ROI_0, 400.435, 160.381, 868.325, 1217.26)</l>
<c></c>
<c></c>
<l>reduce_domain (Z, ROI_0, Z)</l>
<l>select_obj(ModelImage, ImgLeftCamera, 1)</l>
<l>xyz_to_object_model_3d (X, Y, Z, Escena3D_RAW)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c>        ******************************************************************************************************************************</c>
<l>        Debug_View:=false</l>
<l>        Visualizar_3D ( [ Escena3D_RAW], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Debug_View, [], [],[], PoseOut1)</l>
<c>           </c>
<l>        Parametros_VisualizacionOut := ['disp_pose','color_attrib','lut','disp_lines','point_size']</l>
<l>        Valores_VisualizacionOut := ['true','coord_z','rainbow','true',1]</l>
<l>        create_pose (0, 200, 5000, 0, 0, 0, 'Rp+T', 'gba', 'point', PoseView)</l>
<l>        disp_object_model_3d (200000, Escena3D_RAW, [], PoseView, Parametros_VisualizacionOut, Valores_VisualizacionOut)</l>
<c>        ******************************************************************************************************************************</c>
<c>        </c>
<l>return ()</l>
</body>
<docu id="Get_Image_Bloque3">
<parameters>
<parameter id="Camera_1"/>
<parameter id="Escena3D_RAW"/>
<parameter id="ImgLeftCamera"/>
<parameter id="ModelImage"/>
<parameter id="NxLib"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_SprueExistence">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Pattern" base_type="ctrl" dimension="0"/>
<par name="PosicionRack" base_type="ctrl" dimension="0"/>
<par name="ExisteEnRack" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Tag_Lectura:='_EBD_I_PatternList'         </l>
<l>Read_EthernetIP_Data (Tag_Lectura, SerialHandle, Pattern)</l>
<c></c>
<c>********************************************</c>
<c>* Peticion de RamSprue</c>
<c>*********************************************</c>
<c></c>
<l>Peticion     := 'RamSprue'</l>
<l>Variable_OPC := Pattern</l>
<c></c>
<l>Data:=Peticion+';'+Variable_OPC</l>
<c></c>
<l>write_serial (SerialHandle, ords(Data))</l>
<c></c>
<l>wait_seconds (0.08)</l>
<c>*Numero de caracteres a leer</c>
<l>read_serial (SerialHandle, 20, Nchar)</l>
<l>Variable:= chrt(Nchar)</l>
<l>tuple_split (Variable, ';', Data)</l>
<c></c>
<l>Pattern:=Data[0]</l>
<l>PosicionRack:=Data[1]</l>
<l>if (Data[2]='O')</l>
<l>    ExisteEnRack:=true</l>
<l>elseif (Data[2]='X')</l>
<l>    ExisteEnRack:=false</l>
<l>endif</l>
<l>return ()</l>
</body>
<docu id="Get_SprueExistence">
<parameters>
<parameter id="ExisteEnRack"/>
<parameter id="Pattern"/>
<parameter id="PosicionRack"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Set_SprueExistence">
<interface>
<ic>
<par name="PatternName" base_type="ctrl" dimension="0"/>
<par name="Data" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>DataOut := Data</l>
<l>Peticion     := 'RamSprue'</l>
<l>Instruccion := 'Set_Sprue'</l>
<c></c>
<l>DataOut := Peticion+';'+Instruccion+';'+PatternName+';'+DataOut</l>
<c></c>
<l>write_serial (SerialHandle, ords(DataOut))</l>
<l>return ()</l>
</body>
<docu id="Set_SprueExistence">
<parameters>
<parameter id="Data"/>
<parameter id="PatternName"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_AlturaLocalizador">
<interface>
<io>
<par name="Zmred" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Minimo" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>try</l>
<c>       </c>
<l>    threshold (Zmred, Localizadores, 1000, 1500)   </l>
<l>    erosion_circle (Localizadores, Localizadores, 5)</l>
<l>    reduce_domain (Zmred, Localizadores, posibles_Localizadores)</l>
<c>    </c>
<l>*     gauss_filter (posibles_Localizadores, posibles_Localizadores, 5)</l>
<l>    local_min (posibles_Localizadores, LocalMinima)        </l>
<l>    connection (LocalMinima, ConnectedRegions)       </l>
<l>    area_center (ConnectedRegions, Area, Row, Column)        </l>
<l>    get_grayval (posibles_Localizadores, Row, Column, AlturaLocalizadores)        </l>
<l>    tuple_min (AlturaLocalizadores, Minimo)</l>
<c>    </c>
<c></c>
<l>catch (Exception)</l>
<c>    </c>
<l>      Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<c>    </c>
<l>endtry</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_AlturaLocalizador">
<parameters>
<parameter id="Minimo"/>
<parameter id="SerialHandle"/>
<parameter id="Zmred"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Zona_ROI">
<interface>
<io>
<par name="Zm" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Zmred" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="N_Localizador" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>        </c>
<l>        switch (N_Localizador)</l>
<l>        case 1:</l>
<c>            * ROI Zona 1</c>
<l>            gen_rectangle2 (ROI_0_V, 344.418, 1191.16, rad(-162.331), 98.6985, 22.4178)</l>
<l>            gen_rectangle1 (ROI_0, 208.196, 1030.52, 477.181, 1280.46)</l>
<l>            difference (ROI_0, ROI_0_V, Zona1) </l>
<l>             reduce_domain (Zm, Zona1, Zmred)</l>
<l>            break</l>
<c>            </c>
<l>        case 2:</l>
<c>            * ROI Zona 2   </c>
<l>            gen_rectangle2 (ROI_1_V, 345.722, 919.371, rad(-155.784), 139.038, 15.6904)</l>
<l>            gen_rectangle1 (ROI_1, 206.5, 777.629, 484.5, 1041)</l>
<l>            difference (ROI_1, ROI_1_V, Zona2)</l>
<l>             reduce_domain (Zm, Zona2, Zmred)</l>
<l>            break</l>
<c>            </c>
<l>        case 3:</l>
<c>            * ROI Zona 3   </c>
<l>            gen_rectangle2 (ROI_2_V, 345.015, 586.084, rad(-120.334), 45.0368, 17.6733)</l>
<l>            gen_rectangle1 (ROI_2, 227.5, 470.061, 465.5, 694.752)</l>
<l>            difference (ROI_2, ROI_2_V, Zona3)  </l>
<l>             reduce_domain (Zm, Zona3, Zmred)</l>
<l>            break</l>
<l>        case 4:</l>
<c>            * ROI Zona 4   </c>
<l>            gen_rectangle2 (ROI_3_V, 336.458, 225.659, rad(143.458), 52.5794, 14.0765)</l>
<l>            gen_rectangle1 (ROI_3, 238.5, 105.399, 460.5, 379.817)</l>
<l>            difference (ROI_3, ROI_3_V, Zona4)   </l>
<l>             reduce_domain (Zm, Zona4, Zmred)</l>
<l>            break</l>
<l>        case 5:</l>
<c>            * ROI Zona 5 </c>
<l>            gen_rectangle2 (ROI_4_V, 569.222, 1103.15, rad(175.834), 74.0691, 13.4783)       </l>
<l>            gen_rectangle1 (ROI_4, 460.5, 923.126, 668.5, 1208.59)</l>
<l>            difference (ROI_4, ROI_4_V, Zona5)      </l>
<l>             reduce_domain (Zm, Zona5, Zmred)</l>
<c>            </c>
<l>            break</l>
<l>        case 6:</l>
<c>            * ROI Zona 6       </c>
<l>            gen_rectangle2 (ROI_5_V, 564.034, 780.839, rad(-2.45367), 40.7856, 13.6907)       </l>
<l>            gen_rectangle1 (ROI_5, 452.286, 626.071, 664.7, 880.626)</l>
<l>            difference (ROI_5, ROI_5_V, Zona6)  </l>
<l>             reduce_domain (Zm, Zona6, Zmred)</l>
<l>            break</l>
<l>        case 7:</l>
<c>            </c>
<c>            * ROI Zona 7          </c>
<l>            gen_rectangle1 (ROI_6_V, 551.923, 394.417, 574.522, 436.446)</l>
<l>            gen_rectangle1 (ROI_6, 464.198, 304.585, 662.233, 530.565)</l>
<l>            difference (ROI_6, ROI_6_V, Zona7)</l>
<l>             reduce_domain (Zm, Zona7, Zmred)</l>
<l>            break</l>
<c>            </c>
<l>        case 8:</l>
<c>            </c>
<c>            * ROI Zona 8 </c>
<l>            gen_rectangle2 (ROI_7_V, 793.95, 1198.74, rad(-21.5997), 91.0931, 14.6335) </l>
<l>            gen_rectangle1 (ROI_7, 654.5, 1024.42, 900.5, 1278.58)</l>
<l>            difference (ROI_7, ROI_7_V, Zona8)    </l>
<l>             reduce_domain (Zm, Zona8, Zmred)</l>
<l>            break</l>
<c>            </c>
<c>            </c>
<l>        case 9:</l>
<c>            * ROI Zona 9</c>
<l>            gen_rectangle2 (ROI_8_V, 794.157, 930.719, rad(-34.4631), 72.4092, 13.1398)       </l>
<l>            gen_rectangle1 (ROI_8, 704.5, 823.673, 906.5, 1031.79)</l>
<l>            difference (ROI_8, ROI_8_V, Zona9)             </l>
<l>             reduce_domain (Zm, Zona9, Zmred)</l>
<l>            break</l>
<c>            </c>
<l>        case 10:</l>
<c>            * ROI Zona 10</c>
<l>            gen_rectangle2 (ROI_9_V, 792.944, 589.309, rad(105.6), 43.5091, 13.774)        </l>
<l>            gen_rectangle1 (ROI_9, 652.5, 462.694, 890.5, 687.385)</l>
<l>            difference (ROI_9, ROI_9_V, Zona10)    </l>
<l>             reduce_domain (Zm, Zona10, Zmred)</l>
<l>            break</l>
<c>            </c>
<l>        case 11:</l>
<c>            * ROI Zona 11</c>
<c>            </c>
<l>            gen_rectangle2 (ROI_10_V, 793.753, 216.915, rad(-137.654), 50.7761, 12.9132)       </l>
<l>            gen_rectangle1 (ROI_10, 670.5, 74.0899, 908.5, 333.773)</l>
<l>            difference (ROI_10, ROI_10_V, Zona11   )  </l>
<l>             reduce_domain (Zm, Zona11, Zmred)</l>
<l>            break</l>
<c>            </c>
<l>        endswitch</l>
<l>return ()</l>
</body>
<docu id="Get_Zona_ROI">
<parameters>
<parameter id="N_Localizador"/>
<parameter id="Zm"/>
<parameter id="Zmred"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Picture">
<interface>
<oo>
<par name="Zm" base_type="iconic" dimension="0"/>
<par name="ImgLeftCamera" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>        * Configuracion de Parametros</c>
<l>        MinimumDisparity_Cam1:=-64</l>
<l>        NumberOfDisparities_Cam1:= 128</l>
<c>        </c>
<l>        Projector:='true'</l>
<l>        FrontLigth:='true'</l>
<l>        AutoExposure:='true'</l>
<l>        AutoGain:='true'</l>
<l>        Exposure := 1.5</l>
<l>        Gain:=1</l>
<l>        FlexView:=8</l>
<l>        Config_Parametros_Cam_R1 (NxLib, Camera_1, NumberOfDisparities_Cam1, MinimumDisparity_Cam1, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure, FlexView, TempCam)</l>
<c>        </c>
<c>        </c>
<l>        Adq_Imagen (ModelImage, NxLib, Camera_1)</l>
<l>        Adq_XYZ_Img (ModelImage, Xm, Ym, Zm)</l>
<l>        compose3 (Xm, Ym, Zm, MultiChannelImage)</l>
<l>        select_obj(ModelImage, ImgLeftCamera, 1)</l>
<l>return ()</l>
</body>
<docu id="Get_Picture">
<parameters>
<parameter id="Camera_1"/>
<parameter id="ImgLeftCamera"/>
<parameter id="NxLib"/>
<parameter id="Zm"/>
</parameters>
</docu>
</procedure>
<procedure name="Check_BasePose">
<interface>
<ic>
<par name="PoseForCalibrationPlate" base_type="ctrl" dimension="0"/>
<par name="ToolInCamPose" base_type="ctrl" dimension="0"/>
<par name="ToolInBasePose" base_type="ctrl" dimension="0"/>
<par name="Height" base_type="ctrl" dimension="0"/>
<par name="Width" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>       Get_Pose_Tool (SerialHandle, ToolInBasePose)</l>
<c>      </c>
<l>   *    create_pose (1780.63, 1568.38, 987.679, 180, 0, 0, 'Rp+T', 'abg', 'point', ToolInBasePose)</l>
<c>       </c>
<c>       </c>
<c>       </c>
<c>       </c>
<c>       </c>
<l>        dev_inspect_ctrl (ToolInBasePose)           </l>
<l>        read_pose ('C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/7.-HandEye/2. procilica/ToolInCamPose_Procilica.dat', \
                   ToolInCamPose)</l>
<l>        dev_inspect_ctrl (ToolInCamPose)</l>
<l>        pose_invert (ToolInCamPose, CamInToolPose)</l>
<c>        </c>
<l>        dev_inspect_ctrl (CamInToolPose)</l>
<l>        pose_invert (CamInToolPose, ToolInCamPose)</l>
<c>        </c>
<l> *       write_pose (ToolInCamPose, 'C:/Users/Usuario/Dropbox (MIRS)/1.-Servidor Desarrollo Software/7.-Magotteaux/7.-HandEye/2. procilica/ToolInCamPose_Procilica.dat')</l>
<c>        * ************************************************************************************************************</c>
<c>        * Lectura de Posicion de la herramienta del robot. Deberar ser por etehrnetIP</c>
<c>        * ************************************************************************************************************</c>
<c></c>
<c>        </c>
<c></c>
<l>ObjInCamPose := PoseForCalibrationPlate</l>
<c>        </c>
<l>        pose_invert (ToolInCamPose, CamInToolPose)</l>
<l>        pose_compose (ToolInBasePose, CamInToolPose, CamInBasePose)</l>
<l>        pose_compose (CamInBasePose, ObjInCamPose, ObjInBasePose)</l>
<l>        convert_pose_type (ObjInBasePose, 'Rp+T', 'abg', 'point', ObjInBasePose)</l>
<l>         dev_inspect_ctrl (ObjInBasePose)</l>
<c>         </c>
<l>         OsffetZ:=0</l>
<l>         ObjInBasePose[2]:=ObjInBasePose[2]+OsffetZ</l>
<c>    </c>
<c>        </c>
<l>        disp_cross (200000,  Height/2,Width/2, 1500, 0)</l>
<c>         </c>
<c>        * *************************************************************************************************************</c>
<c>        * Obtengo la posicion del objetpo a insertar, relativo a la herramienta.</c>
<c>        * ************************************************************************************************************       </c>
<l>*         Get_Pose_Punto_Insercion (PoseForCalibrationPlate, ToolInCamPose, ToolInBasePose, SerialHandle, ObjInBasePoseOut)</l>
<c>        </c>
<l>        Altura_Objetivo := 850</l>
<l>        Altura_Actual := PoseForCalibrationPlate[2]</l>
<l>        DeltaAltura := Altura_Actual-Altura_Objetivo</l>
<c>        </c>
<l>return ()</l>
</body>
<docu id="Check_BasePose">
<parameters>
<parameter id="Height"/>
<parameter id="PoseForCalibrationPlate"/>
<parameter id="SerialHandle"/>
<parameter id="ToolInBasePose"/>
<parameter id="ToolInCamPose"/>
<parameter id="Width"/>
</parameters>
</docu>
</procedure>
<procedure name="Bloque_1">
<interface>
<ic>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="_EV1_O_CmdDatos" base_type="ctrl" dimension="0"/>
<par name="Path_SFM_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_3D_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_CORE_ID" base_type="ctrl" dimension="0"/>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>        Estado:=19</l>
<l>        Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<c>        * Reseteo las variable de resultado</c>
<l>* #### Envio data de estado ########################</l>
<l>        Resultado:=0</l>
<l>        Procesando:=1</l>
<l>        Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<c>        </c>
<l>* #######################################################################################</l>
<c>        *1. *Si el pallet en 11, sigmifica que leo pallet 1</c>
<l>* #######################################################################################</l>
<c>        </c>
<l>        N_Pallet_to_Scan:=_EV1_O_CmdDatos-10</l>
<l>*         N_Pallet_to_Scan:=1</l>
<l>* #################################################################</l>
<l>* ##### Base Datos#################################################</l>
<c>        * Vector que indica como esta distribuido los CORES en el pallet</c>
<c>        * -&gt; Esto debe estar ingresado por el operador. &lt;-</c>
<c>        * valor 0 es seccion A, 1B,2C...etc</c>
<l>* #################################################################</l>
<c>        </c>
<l>        BD_Dinamica (SerialHandle, Estado, Vector_Estado_Fx, Vector_ID_Core_by_Segment_Pallet_1, Vector_ID_Core_by_Segment_Pallet_2, Vector_ID_Core_by_Segment_Pallet_3, Vector_ID_Core_by_Segment_Pallet_4, Vector_ID_Core_by_Segment_Pallet_5, Vector_ID_Core_by_Segment_Pallet_6)</l>
<c>        </c>
<l>        Get_Core_Presence (SerialHandle, Vector_Estado_Fx, Vector_ID_Core_by_Segment_Pallet_1, Vector_ID_Core_by_Segment_Pallet_2, Vector_ID_Core_by_Segment_Pallet_3, Vector_ID_Core_by_Segment_Pallet_4, Path_SFM_Segmentos, Path_3D_Segmentos, Path_CORE_ID, N_Pallet_to_Scan, NxLib, Camera_1, Vector_ID_Core_by_Segment_Pallet_5, Vector_ID_Core_by_Segment_Pallet_6)</l>
<c>        </c>
<l>return ()</l>
</body>
<docu id="Bloque_1">
<parameters>
<parameter id="Camera_1"/>
<parameter id="NxLib"/>
<parameter id="Path_3D_Segmentos"/>
<parameter id="Path_CORE_ID"/>
<parameter id="Path_SFM_Segmentos"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="_EV1_O_CmdDatos"/>
</parameters>
</docu>
</procedure>
<procedure name="Bloque_3">
<interface>
<oo>
<par name="ModelImage" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
<par name="Z" base_type="iconic" dimension="0"/>
<par name="ImgLeftCamera" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Path_SFM_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_3D_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_CORE_ID" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
</ic>
<oc>
<par name="Mensaje" base_type="ctrl" dimension="0"/>
<par name="Procesando" base_type="ctrl" dimension="0"/>
<par name="Resultado" base_type="ctrl" dimension="0"/>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
<par name="Cod_Core_ToUse" base_type="ctrl" dimension="0"/>
<par name="Pallet_To_Scan" base_type="ctrl" dimension="0"/>
<par name="Segmento_To_Scan" base_type="ctrl" dimension="0"/>
<par name="FXcheck" base_type="ctrl" dimension="0"/>
<par name="Position" base_type="ctrl" dimension="0"/>
<par name="NamePose" base_type="ctrl" dimension="0"/>
<par name="Esquina_Pallet_Pose" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Palle_tofind" base_type="ctrl" dimension="0"/>
<par name="N_Pallet_to_Scan" base_type="ctrl" dimension="0"/>
<par name="SegmentoPallet" base_type="ctrl" dimension="0"/>
<par name="Pose_Esquina" base_type="ctrl" dimension="0"/>
<par name="Visualizar3D" base_type="ctrl" dimension="0"/>
<par name="Estado_SubProceso_Get_Core_Presence_In_Pallet" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Mensaje:='Bloque 3 INICIADO.............'</l>
<l>Send_Data_Info (Mensaje, SerialHandle)</l>
<c>* </c>
<l>* #### Envio data de estado ########################</l>
<l>Procesando := 1</l>
<l>Resultado := 0</l>
<l>Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* # ################################################# </l>
<c>* Obtengo imagen del bloque a escanear</c>
<c></c>
<l>Get_Image_Bloque3 (ModelImage, X, Y, Z, ImgLeftCamera, NxLib, Camera_1, Parametros_Visualizacion, Valores_Visualizacion, Escena3D_RAW)</l>
<c></c>
<c></c>
<c></c>
<l>* ###################################################################</l>
<l>* #### para saber que Core debo utilizar debo consultar a la RAM BD</l>
<l>* ###################################################################</l>
<l>Mensaje:='Capturo datos de la ram BD'</l>
<l>Send_Data_Info (Mensaje, SerialHandle)</l>
<c></c>
<l>Get_Core_ToUse_From_BDD (SerialHandle, Cod_Core_ToUse, Pallet_To_Scan, Segmento_To_Scan, FXcheck)</l>
<c></c>
<c></c>
<c>** si no tengo datos de bbd salgo de la funcion. Previo envie estado de error        </c>
<l>if (not FXcheck)</l>
<l>    Procesando := 0</l>
<l>    Resultado := 2</l>
<l>    Send_Data_Proceso (SerialHandle, Resultado, Procesando) </l>
<l>    return()</l>
<l>endif</l>
<c></c>
<l>tuple_strrstr (Cod_Core_ToUse, 'PIN', Position)</l>
<l>if (Position&lt;0)</l>
<c>    </c>
<l>* ####################################################################    </l>
<l>* ##### Paso la pose a CamInBasePose para virtualizar el ROI respecto#</l>
<l>* ##### al robot             #########################################</l>
<l>* ####################################################################   </l>
<c>    *Leo la pose de la esquina del pallet N</c>
<l>    NamePose:='Pallet_'+Pallet_To_Scan</l>
<l>    create_pose (0.1, 0.1, 0.1, 90, 90, 90, 'Rp+T', 'gba', 'point', Esquina_Pallet_Pose)</l>
<c>    **           read_pose ('C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/5.-Ing Software/0 Identificacion de Pallet/'+NamePose+'.dat',\
    Esquina_Pallet_Pose)</c>
<c>    </c>
<l>* ###################################################################    </l>
<l>* ######## Realizo el reconocimiento del patron #####################</l>
<l>* ################################################################### </l>
<c>    </c>
<l>    Vector_ID_Core_by_Segment_Palle_tofind:=Cod_Core_ToUse</l>
<l>    N_Pallet_to_Scan:=Pallet_To_Scan</l>
<l>    SegmentoPallet:=Segmento_To_Scan</l>
<l>    Pose_Esquina:=Esquina_Pallet_Pose</l>
<c>    </c>
<l>    Visualizar3D:=true</l>
<l>    Take_Core_In_Pallet (Z, X, Y, Escena3D_RAW, N_Pallet_to_Scan,\
                         Path_SFM_Segmentos, Path_3D_Segmentos, \
                         Vector_ID_Core_by_Segment_Palle_tofind, Path_CORE_ID, \
                         SerialHandle, Vector_Estado_Fx, Visualizar3D, SegmentoPallet, \
                         Pose_Esquina, Estado_SubProceso_Get_Core_Presence_In_Pallet)      </l>
<l>endif</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Bloque_3">
<parameters>
<parameter id="Camera_1"/>
<parameter id="Cod_Core_ToUse"/>
<parameter id="Escena3D_RAW"/>
<parameter id="Esquina_Pallet_Pose"/>
<parameter id="Estado_SubProceso_Get_Core_Presence_In_Pallet"/>
<parameter id="FXcheck"/>
<parameter id="ImgLeftCamera"/>
<parameter id="Mensaje"/>
<parameter id="ModelImage"/>
<parameter id="N_Pallet_to_Scan"/>
<parameter id="NamePose"/>
<parameter id="NxLib"/>
<parameter id="Pallet_To_Scan"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="Path_3D_Segmentos"/>
<parameter id="Path_CORE_ID"/>
<parameter id="Path_SFM_Segmentos"/>
<parameter id="Pose_Esquina"/>
<parameter id="Position"/>
<parameter id="Procesando"/>
<parameter id="Resultado"/>
<parameter id="SegmentoPallet"/>
<parameter id="Segmento_To_Scan"/>
<parameter id="SerialHandle"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="Vector_ID_Core_by_Segment_Palle_tofind"/>
<parameter id="Visualizar3D"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Bloque_Localizadores">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>* #### Envio data de estado ########################</l>
<l>        Procesando := 1</l>
<l>        Resultado := 0</l>
<l>        Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* # ################################################# </l>
<c></c>
<l>*         N_Localizador:=10</l>
<l>        Tag_Lectura:='_EBD_I_SegmentoIr'         </l>
<l>        Read_EthernetIP_Data (Tag_Lectura, SerialHandle, N_Localizador)</l>
<c>        </c>
<c>        </c>
<l>        Get_Picture (Zm, ImgLeftCamera, NxLib, Camera_1)</l>
<c>        </c>
<l>* ##############################################</l>
<l>* #####  Make ROI ##############################        </l>
<l>        Get_Zona_ROI (Zm, Zmred, N_Localizador)</l>
<l>* #############################################       </l>
<c>        </c>
<l>        Get_AlturaLocalizador (Zmred, SerialHandle, AlturaLocalizador)</l>
<c>       </c>
<l>        if (AlturaLocalizador&lt; 990)</l>
<c>            </c>
<l>            Mensaje:='### ERROR ### Altura de Localizador Menor que Altura umbral -&gt; '+AlturaLocalizador +'[mm]'</l>
<l>            Send_Data_Info (Mensaje, SerialHandle)</l>
<l>* #### Envio data de estado ########################</l>
<l>            Procesando := 0</l>
<l>            Resultado := 2</l>
<l>            Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* # #################################################   </l>
<l>        else</l>
<l>            Mensaje:='Altura de Localizador Encontrada -&gt; '+AlturaLocalizador +' [mm] en Segmento -&gt;'+N_Localizador</l>
<l>            Send_Data_Info (Mensaje, SerialHandle)</l>
<c>            ***** Envio    informacion **************************       </c>
<l>            tagDestino:='_EV01_I_EjeZZ'</l>
<l>            ValorVariable:=AlturaLocalizador</l>
<l>            Send_EthernetIP_Data(tagDestino, ValorVariable, SerialHandle)</l>
<c>            </c>
<l>* #### Envio data de estado ########################</l>
<l>            Procesando := 0</l>
<l>            Resultado :=1</l>
<l>            Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* # #################################################                </l>
<l>        endif</l>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<l>return ()</l>
</body>
<docu id="Bloque_Localizadores">
<parameters>
<parameter id="Camera_1"/>
<parameter id="NxLib"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Bloque_Sprues">
<interface>
<ic>
<par name="_EV1_O_CmdDatos" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>        ********************************************************            </c>
<l>        N_Localizador :=50-_EV1_O_CmdDatos</l>
<c>        ********************************************************</c>
<c>        </c>
<l>        Get_SprueExistence (SerialHandle, Pattern, PosicionRack, ExisteEnRack)</l>
<c>        </c>
<c>        </c>
<l>        Tag_Lectura:='_EBD_I_PatternList'         </l>
<l>        Read_EthernetIP_Data (Tag_Lectura, SerialHandle, Pattern)</l>
<c>        </c>
<c>        ********************************************</c>
<c>        * Peticion de RamSprue</c>
<c>        *********************************************</c>
<l>        PatternName:=Pattern</l>
<l>        Data:= 'O'        </l>
<l>        Set_SprueExistence (PatternName, Data, SerialHandle)</l>
<c>        </c>
<l>return ()</l>
</body>
<docu id="Bloque_Sprues">
<parameters>
<parameter id="SerialHandle"/>
<parameter id="_EV1_O_CmdDatos"/>
</parameters>
</docu>
</procedure>
<procedure name="Set_Core_Minus">
<interface>
<ic>
<par name="Cod_Core_ToUse" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="DataBdFull" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>    * </c>
<l>    Peticion := 'BaseDatos'</l>
<l>    Data := Peticion+';ActBdGlobal;'+Cod_Core_ToUse</l>
<c>    * </c>
<l>    write_serial (SerialHandle, ords(Data))</l>
<c>    * </c>
<l>    wait_seconds (0.2)</l>
<c>    * </c>
<c>    * Numero de caracteres a leer</c>
<l>    read_serial (SerialHandle, 120, Nchar)</l>
<l>    Nchar := chrt(Nchar)</l>
<c>    * </c>
<c>    * </c>
<c>    * </c>
<l>    tuple_split (Nchar, '#', DataBdFull)</l>
<c> </c>
<l>return ()</l>
</body>
<docu id="Set_Core_Minus">
<parameters>
<parameter id="Cod_Core_ToUse"/>
<parameter id="DataBdFull"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Pattern_Dimension">
<interface>
<io>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
<par name="Z" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Estado_Funcion" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Estado_Funcion := false</l>
<c>* </c>
<l>try</l>
<c>    * </c>
<c>    * ********************************************************</c>
<c>    * 1.-  !!!!!!!!! threshols dinamico!!!!!!!!!!!!!!!!!!!!!!!!!!</c>
<c>    * ********************************************************</c>
<l>    threshold (Z, RegZRed, 5, 2000)</l>
<l>    reduce_domain (Z, RegZRed, ZRed)</l>
<l>    escala := 255.0/2000.0</l>
<l>    scale_image (ZRed, HeightMap_Scalada, escala, 0)</l>
<l>    threshold (HeightMap_Scalada, HeightMap_Region, 0, 255)</l>
<l>    gray_histo_range (HeightMap_Region, HeightMap_Scalada, 0, 255, 256, Histo, BinSize)</l>
<l>    tuple_sum (Histo, Sum_Histo)</l>
<c>    * </c>
<l>* # #########################################################</l>
<l>* # ### Mientras mas grabnde menos sensible a cambios #######   </l>
<l>    Mascara := 1</l>
<l>* # ########################################################</l>
<c>    * </c>
<l>    Vector_Distribucion := []</l>
<l>    init_vector := 255</l>
<l>    flag_vector := 0</l>
<l>    aux_suma := 0.0</l>
<c>    * </c>
<l>    for Index := init_vector to 0 by -1</l>
<c>        * </c>
<l>        Vector_Distribucion[Index] := aux_suma+Histo[Index]*100.0/ Sum_Histo</l>
<l>        aux_suma := Vector_Distribucion[Index]</l>
<l>    endfor</l>
<c>    * </c>
<l>    Derivada := []</l>
<l>    Factor_Der := 1000</l>
<l>    Mascara := 3</l>
<l>    for Index := init_vector to 50 by -Mascara</l>
<c>        * </c>
<l>        Derivada[Index] := abs(Vector_Distribucion[Index]-Vector_Distribucion[Index-Mascara])*Factor_Der</l>
<c>        * </c>
<l>    endfor</l>
<c> </c>
<c>    * </c>
<c>    * *********************************************************</c>
<c>    * * Busco el primer cambio brusco de posicion *************</c>
<c>    * * El umbral de cambio es Aux_Val_Max ********************</c>
<c>    * *********************************************************</c>
<c>    * </c>
<l>    Aux_Val_Max := 9000</l>
<l>    Flag_indx_max := 255</l>
<l>    for Index := 0 to 160 by Mascara</l>
<c>        * </c>
<l>        if (Derivada[Index]&gt;Aux_Val_Max)</l>
<l>            Aux_Val_Max := Derivada[Index]</l>
<l>            Flag_indx_max := Index</l>
<l>            break</l>
<l>        endif</l>
<c>        * </c>
<l>    endfor</l>
<c></c>
<c></c>
<c>    * ***********************************************************</c>
<c>    * * Desviacion luego de  detectar el cambio brusco **********</c>
<c>    * ***********************************************************</c>
<c>    * </c>
<l>* # #########################################################</l>
<l>* # ######## Grado de proteccion para moverse entre el </l>
<l>* # ####### histograma</l>
<l>    index_protection_Inf := 10</l>
<l>    index_protection_Sup := 30</l>
<l>* # #########################################################</l>
<c>    * </c>
<l>    Alt_Min := Flag_indx_max-index_protection_Inf</l>
<l>    Alt_Max := Flag_indx_max+index_protection_Sup</l>
<l>    threshold (HeightMap_Scalada, Regions_PattSup, Alt_Min, Alt_Max)</l>
<c>    * </c>
<c>    </c>
<l>    connection (Regions_PattSup, ConnectedRegions)</l>
<c>    </c>
<l>    select_shape_std (ConnectedRegions, BordeSupPattern, 'max_area', 90)</l>
<c>    </c>
<l>    gauss_filter (Z, ZmGauss, 11)</l>
<l>    reduce_domain (ZmGauss, BordeSupPattern, AlturaPatternImg)</l>
<l>    local_min (AlturaPatternImg, LocalMaxima)</l>
<l>    connection (LocalMaxima, MinimosLocales)</l>
<l>    area_center (MinimosLocales, Area, Row, Column)</l>
<l>    get_grayval (Z, Row, Column, Zmins)</l>
<l>    AlturaPattern:=Zmins[0]</l>
<l>    PtroMax:=0</l>
<l>    for Idx := 0 to |Zmins|-1 by 1</l>
<c>        </c>
<l>        if (Zmins[Idx]&lt;AlturaPattern)</l>
<l>            AlturaPattern:=Zmins[Idx]</l>
<l>            PtroMax:=Idx</l>
<l>        endif</l>
<c>        </c>
<l>    endfor</l>
<c>    </c>
<l>    gen_cross_contour_xld (Crosses, Row[PtroMax], Column[PtroMax], 50, 0)</l>
<c>    </c>
<c>    ***********************************************************************</c>
<c>    * Busco el largo y ancho del pattern</c>
<c>    ***********************************************************************</c>
<c></c>
<c>    </c>
<l>    threshold (HeightMap_Scalada, Regions_PattInf, Alt_Max, 255)  </l>
<l>    connection (Regions_PattInf, ConnectedRegions2)</l>
<l>   select_shape_std (ConnectedRegions2, Regions_PattInf, 'max_area', 70)</l>
<c>   </c>
<l>    erosion_rectangle1 (Regions_PattInf, Erosion_Inf, 31, 31)</l>
<l>    reduce_domain (ZmGauss, Erosion_Inf, ImageReduced1)</l>
<l>    connection (Erosion_Inf, Connected_Inf)</l>
<l>    select_shape_std (Connected_Inf, BordeInfPattern, 'max_area', 90)</l>
<c>    </c>
<l>    erosion_rectangle1 (BordeInfPattern, Erosion_Inf, 21, 21)</l>
<l>    shape_trans (Erosion_Inf, RegionTrans, 'rectangle2')</l>
<c>    </c>
<l>    reduce_domain (ImageReduced1, BordeInfPattern, GaussRed)</l>
<c>    </c>
<l>    region_features (BordeInfPattern, 'row1', Row1)</l>
<l>    region_features (BordeInfPattern, 'column1', Colum1)</l>
<l>    gen_cross_contour_xld (Crosses, Row1, Colum1, 50, 0)</l>
<c>    </c>
<l>    get_image_size (Z, Width, Height)</l>
<l>    gen_image_const (Image, 'byte',  Width, Height)</l>
<c>    </c>
<l>    gen_image_proto (Z, Img1, 10)</l>
<l>    gen_image_proto (Z, Img2, 150)</l>
<l>    reduce_domain (Img2, RegionTrans, ImageReduced2)</l>
<c>    </c>
<l>    add_image (Img1, ImageReduced2, ImageResult, 1, 100)</l>
<l>    paint_gray(ImageReduced2,Img1,MixedImage)</l>
<l>    corner_response (MixedImage, ImageCorner, 3, 0.04)</l>
<l>    local_max (ImageCorner, LocalMaxima1)</l>
<l>    connection (LocalMaxima1, ConnectedRegions1)</l>
<l>    area_center (ConnectedRegions1, Area1, RowToFind, ColumToFind)</l>
<l>    get_grayval (ImageCorner, RowToFind, ColumToFind, Grayval) </l>
<l>    create_funct_1d_array (Grayval, Function)</l>
<c>    </c>
<c>    **************************************************   </c>
<c>    *** Umbral Corner Response</c>
<l>    Umbral:=2100</l>
<c>    **************************************************</c>
<l>    Ptros:=0</l>
<l>    AuxPtr:=0</l>
<l>    for Idx := 0 to |Grayval|-1 by 1</l>
<l>        if (Grayval[Idx]&gt;Umbral)            </l>
<l>            Ptros[AuxPtr]:=Idx</l>
<l>            AuxPtr:=AuxPtr+1</l>
<l>            Grayval[Idx]:=-1</l>
<l>        endif     </l>
<l>    endfor</l>
<l>    Umbral:=0</l>
<l>    for Idx := 0 to |Grayval|-1 by 1</l>
<l>        if (Grayval[Idx]&gt;Umbral)</l>
<l>            Umbral:=Grayval[Idx]</l>
<l>            Ptros[3]:=Idx</l>
<l>        endif     </l>
<l>    endfor</l>
<c>    </c>
<l>    for Idx := 0 to 3 by 1</l>
<l>        FilaPattern[Idx]:=RowToFind[Ptros[Idx]]</l>
<l>        ColumnasPattern[Idx]:=ColumToFind[Ptros[Idx]]</l>
<l>    endfor</l>
<c>    </c>
<l>    disp_cross (200000, FilaPattern, ColumnasPattern, 50, 0)</l>
<l>    compose3 (X, Y, Z, ComposeImg)</l>
<c>    </c>
<c>    </c>
<l>    for Idx := 0 to 3 by 1</l>
<l>        tuple_pow (FilaPattern[Idx], 2, Pow1)</l>
<l>        tuple_pow (ColumnasPattern[Idx], 2, Pow2)</l>
<l>        tuple_sqrt (Pow1+Pow2, Sqrt)</l>
<l>        DistVectorial[Idx]:=Sqrt</l>
<l>    endfor</l>
<c>    </c>
<c>    </c>
<l>    AuxMin:=DistVectorial[0]</l>
<l>    Ptr_Min:=0</l>
<l>    for Idx := 0 to |DistVectorial|-1 by 1</l>
<l>        if (DistVectorial[Idx]&lt;AuxMin)            </l>
<l>            Ptr_Min:=Idx</l>
<l>            AuxMin:=DistVectorial[Idx]</l>
<l>        endif     </l>
<l>    endfor</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    for Idx := 0 to 3 by 1</l>
<l>        tuple_pow (FilaPattern[Idx], 2, Pow1)</l>
<l>        tuple_pow (Width-ColumnasPattern[Idx], 2, Pow2)</l>
<l>        tuple_sqrt (Pow1+Pow2, Sqrt)</l>
<l>        DistVectorial2[Idx]:=Sqrt</l>
<l>    endfor </l>
<c>    </c>
<l>    AuxMin2:=DistVectorial2[0]</l>
<l>    Ptr_Min2:=0</l>
<l>    for Idx := 0 to |DistVectorial2|-1 by 1</l>
<l>        if (DistVectorial2[Idx]&lt;AuxMin2)            </l>
<l>            Ptr_Min2:=Idx</l>
<l>            AuxMin2:=DistVectorial2[Idx]</l>
<l>        endif     </l>
<l>    endfor   </l>
<c>    </c>
<c> </c>
<l>      for Idx := 0 to 3 by 1</l>
<l>        tuple_pow (Width-FilaPattern[Idx], 2, Pow1)</l>
<l>        tuple_pow (ColumnasPattern[Idx], 2, Pow2)</l>
<l>        tuple_sqrt (Pow1+Pow2, Sqrt)</l>
<l>        DistVectorial3[Idx]:=Sqrt</l>
<l>    endfor </l>
<c>    </c>
<l>    AuxMin3:=DistVectorial3[0]</l>
<l>    Ptr_Min3:=0</l>
<l>    for Idx := 0 to |DistVectorial3|-1 by 1</l>
<l>        if (DistVectorial3[Idx]&lt;AuxMin3)            </l>
<l>            Ptr_Min3:=Idx</l>
<l>            AuxMin3:=DistVectorial3[Idx]</l>
<l>        endif     </l>
<l>    endfor   </l>
<c>    </c>
<c>    </c>
<c></c>
<c>    </c>
<c>    </c>
<l>    disp_cross (200000, FilaPattern[Ptr_Min], ColumnasPattern[Ptr_Min], 50, 0)</l>
<l>    disp_cross (200000, FilaPattern[Ptr_Min2], ColumnasPattern[Ptr_Min2], 50, 0)</l>
<l>    disp_cross (200000, FilaPattern[Ptr_Min3], ColumnasPattern[Ptr_Min3], 50, 0)</l>
<c>    </c>
<l>    angle_lx (FilaPattern[Ptr_Min], ColumnasPattern[Ptr_Min], FilaPattern[Ptr_Min2], ColumnasPattern[Ptr_Min2], Angle)    </l>
<l>    angle_lx (FilaPattern[Ptr_Min2], ColumnasPattern[Ptr_Min2], FilaPattern[Ptr_Min], ColumnasPattern[Ptr_Min], Angle2)</l>
<c>    </c>
<l>    if (Angle2&gt;Angle)</l>
<l>        Angle:=-Angle2</l>
<l>    endif</l>
<l>    get_grayval (ComposeImg, FilaPattern[Ptr_Min], ColumnasPattern[Ptr_Min], XYZ) </l>
<l>    get_grayval (ComposeImg, FilaPattern[Ptr_Min2], ColumnasPattern[Ptr_Min2], XYZ2) </l>
<l>    get_grayval (ComposeImg, FilaPattern[Ptr_Min3], ColumnasPattern[Ptr_Min3], XYZ3) </l>
<l>    DifPuntos:=XYZ2-XYZ</l>
<l>    tuple_abs (DifPuntos[0], Ancho_Pattern)</l>
<l>    DifPuntos:=XYZ3-XYZ</l>
<l>    tuple_abs (DifPuntos[1], Largo_Pattern)</l>
<c>    **************************************************************************</c>
<c>    *** Base de la  esquina superior izquierda</c>
<c>    *************************************************************************** </c>
<l>    create_pose (XYZ[0], XYZ[1],XYZ[2], 0, 0, Angle, 'Rp+T', 'gba', 'point', Pose_Esquina_Pattern)</l>
<c>    </c>
<l>    Send_Data_To_Robot (Pose_Esquina_Pattern, SerialHandle)</l>
<l>    Altura_CamToPattern:=AlturaPattern</l>
<l>    Ancho_PatternActual:=Ancho_Pattern  </l>
<l>    largo_PatternActual:=Largo_Pattern </l>
<c>    ***************************************************************************    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    Estado_Funcion := true</l>
<l>catch (Exception)</l>
<l>    Estado_Funcion := false</l>
<c>  * #### Envio data de estado ########################</c>
<l>    Procesando:=0</l>
<l>    Estado:=5</l>
<l>    Resultado:=2</l>
<l>    Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* ################################################## </l>
<c>    </c>
<l>endtry</l>
<c>* </c>
<c>* </c>
<l>return ()</l>
</body>
<docu id="Get_Pattern_Dimension">
<parameters>
<parameter id="Estado_Funcion"/>
<parameter id="SerialHandle"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Corner_Position">
<interface>
<ic>
<par name="FilaImg" base_type="ctrl" dimension="0"/>
<par name="FilaPattern" base_type="ctrl" dimension="0"/>
<par name="ColumnaImg" base_type="ctrl" dimension="0"/>
<par name="ColumnasPattern" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="DistVectorial" base_type="ctrl" dimension="0"/>
<par name="AuxMin" base_type="ctrl" dimension="0"/>
<par name="Ptr_Min" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>      for Idx := 0 to 3 by 1</l>
<l>        tuple_pow (FilaImg-FilaPattern[Idx], 2, Pow1)</l>
<l>        tuple_pow (ColumnaImg-ColumnasPattern[Idx], 2, Pow2)</l>
<l>        tuple_sqrt (Pow1+Pow2, Sqrt)</l>
<l>        DistVectorial[Idx]:=Sqrt</l>
<l>    endfor</l>
<c>    </c>
<c>    </c>
<l>    AuxMin:=DistVectorial[0]</l>
<l>    Ptr_Min:=0</l>
<l>    for Idx := 0 to |DistVectorial|-1 by 1</l>
<l>        if (DistVectorial[Idx]&lt;AuxMin)            </l>
<l>            Ptr_Min:=Idx</l>
<l>        endif     </l>
<l>    endfor</l>
<l>return ()</l>
</body>
<docu id="Get_Corner_Position">
<parameters>
<parameter id="AuxMin"/>
<parameter id="ColumnaImg"/>
<parameter id="ColumnasPattern"/>
<parameter id="DistVectorial"/>
<parameter id="FilaImg"/>
<parameter id="FilaPattern"/>
<parameter id="Ptr_Min"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Foto_Proyector">
<interface>
<oo>
<par name="PosibleMangaSprue" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera_3" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* Configuracion de Parametros</c>
<l>MinimumDisparity_Cam1:=-38</l>
<l>NumberOfDisparities_Cam1:= 62</l>
<l>Projector:='false'</l>
<l>FrontLigth:='true'</l>
<l>AutoExposure:='true'</l>
<l>AutoGain:='true'</l>
<l>Exposure := 1.8</l>
<l>Gain:=1</l>
<l>FlexView:=1</l>
<l>Config_Parametros_Cam_R1 (NxLib, Camera_3, NumberOfDisparities_Cam1, MinimumDisparity_Cam1, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure, FlexView, TempCam)</l>
<c></c>
<c></c>
<l>Get_Img_Camera_R2 (ModelImage, Xm, Ym, Zm, ImgLeftCamera_1, \
                   NxLib, Camera_3, Escena3D_RAW)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c>*********************************************</c>
<c>*Segmento Mangas</c>
<c>*********************************************</c>
<l>threshold (ImgLeftCamera_1, PosibleMangaSprue, 5, 20)</l>
<c></c>
<l>fill_up (PosibleMangaSprue, PosibleMangaSprue)</l>
<l>dilation_circle (PosibleMangaSprue, PosibleMangaSprue, 20)</l>
<l>fill_up (PosibleMangaSprue, PosibleMangaSprue)</l>
<l>dilation_circle (PosibleMangaSprue, PosibleMangaSprue, 60)</l>
<c></c>
<c>**************************************************</c>
<c></c>
<l>gauss_filter (ImgLeftCamera_1, ImageGauss, 11)</l>
<l>gauss_filter (ImageGauss, ImageGauss, 11)</l>
<c></c>
<l>threshold (ImageGauss, PosibleSprue, 100, 200)</l>
<l>connection (PosibleSprue, ConnectedRegions)</l>
<l>select_shape (ConnectedRegions, PosibleSprue, 'area', 'and',25000, 38000)</l>
<l>dilation_rectangle1 (PosibleSprue, RegionDilation, 41, 41)</l>
<c>**************************************************</c>
<c></c>
<l>union2 (PosibleMangaSprue, PosibleSprue, PosibleMangaSprue)</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Foto_Proyector">
<parameters>
<parameter id="Camera_3"/>
<parameter id="NxLib"/>
<parameter id="PosibleMangaSprue"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Foto_3D">
<interface>
<io>
<par name="Objeto" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Zm" base_type="iconic" dimension="0"/>
<par name="Ym" base_type="iconic" dimension="0"/>
<par name="Xm" base_type="iconic" dimension="0"/>
<par name="PosibleSprue" base_type="iconic" dimension="0"/>
<par name="PosibleManga" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera_3" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Escena3D" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>decompose3 (Objeto, Xm, Ym, Zm)</l>
<c>**********************************************</c>
<l>UmbralMin:=600</l>
<l>UmbralMax:=1500</l>
<l>threshold (Zm, PosibleMangaSprue, UmbralMin, UmbralMax)</l>
<l>reduce_domain (Zm, PosibleMangaSprue, Zm)</l>
<c></c>
<l>GetMaxAltura (Zm, PosibleMangaSprue)</l>
<c></c>
<c></c>
<c></c>
<l>deltaLimiteInferior:=30</l>
<l>deltaLimiteSuperior:=10</l>
<l>GetMaxAlturaUmbral (Zm, PosibleMangaSprue, deltaLimiteInferior, deltaLimiteSuperior)</l>
<c></c>
<c></c>
<c>********************************************************</c>
<c>*Posibles Sprues</c>
<c>********************************************************</c>
<c></c>
<l>GetMaxAlturaUmbral (Zm, PosibleSprueMax, deltaLimiteInferior, 3)</l>
<l>connection (PosibleSprueMax, PosibleSprueMax)</l>
<l>erosion_rectangle1 (PosibleSprueMax, PosibleSprueMax, 11, 11)</l>
<l>connection (PosibleSprueMax, PosibleSprueMax)</l>
<l>select_shape (PosibleSprueMax, PosibleSprueMax, ['area', 'rectangularity'], 'and', [5000,0.6], [45000,1])</l>
<c></c>
<c></c>
<l>dilation_rectangle1 (PosibleSprueMax, PosibleSprueMax, 13, 13)</l>
<l>fill_up (PosibleSprueMax, PosibleSprue)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c>********************************************************</c>
<c>*Posibles mangas</c>
<c>********************************************************</c>
<c></c>
<l>difference (PosibleMangaSprue, PosibleSprue, PosibleMangaSprue)</l>
<c></c>
<l>connection (PosibleMangaSprue, ConnectedRegions)</l>
<c></c>
<l>select_shape (ConnectedRegions, SelectedRegions, 'area', 'and', 5000, 65000)</l>
<l>select_shape (SelectedRegions, PosibleManga, ['circularity','struct_factor'], 'and', [0.2,0.4], [1,10])</l>
<c></c>
<l>erosion_rectangle1 (PosibleSprue, PosibleSprue, 21,21)</l>
<c></c>
<l>connection (PosibleSprue, SpruesPosibles)</l>
<l>select_shape (SpruesPosibles, PosibleSprue, 'rectangularity', 'and', 0.8, 1)</l>
<l>select_shape (PosibleSprue, PosibleSprue, 'struct_factor', 'and', 0.5, 2)</l>
<l>select_shape (PosibleSprue, PosibleSprue, 'width', 'and', 95, 220)</l>
<c></c>
<l>dilation_circle (PosibleManga, PosibleManga, 2)</l>
<l>fill_up (PosibleManga, PosibleManga)</l>
<c></c>
<l>union1 (PosibleManga, PosibleMangaSprue)</l>
<c></c>
<l>reduce_domain (Zm, PosibleMangaSprue, Zred)</l>
<l>reduce_domain (Ym, PosibleMangaSprue, Yred)</l>
<l>reduce_domain (Xm, PosibleMangaSprue, Xred)</l>
<l>xyz_to_object_model_3d (Xred, Yred, Zred, Escena3D)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Foto_3D">
<parameters>
<parameter id="Camera_3"/>
<parameter id="Escena3D"/>
<parameter id="NxLib"/>
<parameter id="Objeto"/>
<parameter id="PosibleManga"/>
<parameter id="PosibleSprue"/>
<parameter id="Xm"/>
<parameter id="Ym"/>
<parameter id="Zm"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_GrayPhoto">
<interface>
<oo>
<par name="ImgLeftCamera_1" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera_3" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* Configuracion de Parametros</c>
<l>MinimumDisparity_Cam1:=-38</l>
<l>NumberOfDisparities_Cam1:= 62</l>
<l>Projector:='false'</l>
<l>FrontLigth:='true'</l>
<l>AutoExposure:='true'</l>
<l>AutoGain:='true'</l>
<l>Exposure := 1.8</l>
<l>Gain:=1</l>
<l>FlexView:=1</l>
<l>Config_Parametros_Cam_R1 (NxLib, Camera_3, NumberOfDisparities_Cam1, MinimumDisparity_Cam1, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure, FlexView, TempCam)</l>
<c></c>
<c></c>
<l>Get_Img_Camera_R2 (ModelImage, Xm, Ym, Zm, ImgLeftCamera_1, \
                   NxLib, Camera_3, Escena3D_RAW)</l>
<l>return ()</l>
</body>
<docu id="Get_GrayPhoto">
<parameters>
<parameter id="Camera_3"/>
<parameter id="ImgLeftCamera_1"/>
<parameter id="NxLib"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_3DPhoto">
<interface>
<oo>
<par name="ModelImage" base_type="iconic" dimension="0"/>
<par name="Xm" base_type="iconic" dimension="0"/>
<par name="Ym" base_type="iconic" dimension="0"/>
<par name="Zm" base_type="iconic" dimension="0"/>
<par name="ImgLeftCamera_1" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera_3" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>* #########################################################################</l>
<c>* Configuracion de Parametros</c>
<l>MinimumDisparity_Cam1:=-38</l>
<l>NumberOfDisparities_Cam1:= 62</l>
<l>Projector:='true'</l>
<l>FrontLigth:='true'</l>
<l>AutoExposure:='true'</l>
<l>AutoGain:='true'</l>
<l>Exposure := 1.8</l>
<l>Gain:=1</l>
<l>FlexView:=16</l>
<l>Config_Parametros_Cam_R1 (NxLib, Camera_3, NumberOfDisparities_Cam1, MinimumDisparity_Cam1, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure, FlexView, TempCam)</l>
<c></c>
<c></c>
<l>Get_Img_Camera_R2 (ModelImage, Xm, Ym, Zm, ImgLeftCamera_1, NxLib, Camera_3, Escena3D_RAW)</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_3DPhoto">
<parameters>
<parameter id="Camera_3"/>
<parameter id="Escena3D_RAW"/>
<parameter id="ImgLeftCamera_1"/>
<parameter id="ModelImage"/>
<parameter id="NxLib"/>
<parameter id="Xm"/>
<parameter id="Ym"/>
<parameter id="Zm"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Esquinas">
<interface>
<ic>
<par name="Grayval" base_type="ctrl" dimension="0"/>
<par name="RowToFind" base_type="ctrl" dimension="0"/>
<par name="ColumToFind" base_type="ctrl" dimension="0"/>
<par name="Width" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="FilaPattern" base_type="ctrl" dimension="0"/>
<par name="Ptr_Min" base_type="ctrl" dimension="0"/>
<par name="Ptr_Min2" base_type="ctrl" dimension="0"/>
<par name="Ptr_Min3" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>GrayvalOut := Grayval</l>
<c>    **************************************************   </c>
<c>    *** Umbral Corner Response</c>
<l>    Umbral:=2100</l>
<c>    **************************************************</c>
<l>    Ptros:=0</l>
<l>    AuxPtr:=0</l>
<l>for Idx := 0 to |GrayvalOut|-1 by 1</l>
<l>    if (GrayvalOut[Idx]&gt;Umbral)</l>
<l>            Ptros[AuxPtr]:=Idx</l>
<l>            AuxPtr:=AuxPtr+1</l>
<l>        GrayvalOut[Idx] := -1</l>
<l>        endif     </l>
<l>    endfor</l>
<l>    Umbral:=0</l>
<l>for Idx := 0 to |GrayvalOut|-1 by 1</l>
<l>    if (GrayvalOut[Idx]&gt;Umbral)</l>
<l>        Umbral := GrayvalOut[Idx]</l>
<l>            Ptros[3]:=Idx</l>
<l>        endif     </l>
<l>    endfor</l>
<c>    </c>
<l>    for Idx := 0 to 3 by 1</l>
<l>        FilaPattern[Idx]:=RowToFind[Ptros[Idx]]</l>
<l>        ColumnasPattern[Idx]:=ColumToFind[Ptros[Idx]]</l>
<l>    endfor</l>
<c>    </c>
<l>    disp_cross (200000, FilaPattern, ColumnasPattern, 50, 0)</l>
<c>   </c>
<c>    </c>
<l>    for Idx := 0 to 3 by 1</l>
<l>        tuple_pow (FilaPattern[Idx], 2, Pow1)</l>
<l>        tuple_pow (ColumnasPattern[Idx], 2, Pow2)</l>
<l>        tuple_sqrt (Pow1+Pow2, Sqrt)</l>
<l>        DistVectorial[Idx]:=Sqrt</l>
<l>    endfor</l>
<c>    </c>
<c>    </c>
<l>    AuxMin:=DistVectorial[0]</l>
<l>    Ptr_Min:=0</l>
<l>    for Idx := 0 to |DistVectorial|-1 by 1</l>
<l>        if (DistVectorial[Idx]&lt;AuxMin)            </l>
<l>            Ptr_Min:=Idx</l>
<l>            AuxMin:=DistVectorial[Idx]</l>
<l>        endif     </l>
<l>    endfor</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    for Idx := 0 to 3 by 1</l>
<l>        tuple_pow (FilaPattern[Idx], 2, Pow1)</l>
<l>        tuple_pow (Width-ColumnasPattern[Idx], 2, Pow2)</l>
<l>        tuple_sqrt (Pow1+Pow2, Sqrt)</l>
<l>        DistVectorial2[Idx]:=Sqrt</l>
<l>    endfor </l>
<c>    </c>
<l>    AuxMin2:=DistVectorial2[0]</l>
<l>    Ptr_Min2:=0</l>
<l>    for Idx := 0 to |DistVectorial2|-1 by 1</l>
<l>        if (DistVectorial2[Idx]&lt;AuxMin2)            </l>
<l>            Ptr_Min2:=Idx</l>
<l>            AuxMin2:=DistVectorial2[Idx]</l>
<l>        endif     </l>
<l>    endfor   </l>
<c>    </c>
<c> </c>
<l>      for Idx := 0 to 3 by 1</l>
<l>        tuple_pow (Width-FilaPattern[Idx], 2, Pow1)</l>
<l>        tuple_pow (ColumnasPattern[Idx], 2, Pow2)</l>
<l>        tuple_sqrt (Pow1+Pow2, Sqrt)</l>
<l>        DistVectorial3[Idx]:=Sqrt</l>
<l>    endfor </l>
<c>    </c>
<l>    AuxMin3:=DistVectorial3[0]</l>
<l>    Ptr_Min3:=0</l>
<l>    for Idx := 0 to |DistVectorial3|-1 by 1</l>
<l>        if (DistVectorial3[Idx]&lt;AuxMin3)            </l>
<l>            Ptr_Min3:=Idx</l>
<l>            AuxMin3:=DistVectorial3[Idx]</l>
<l>        endif     </l>
<l>    endfor   </l>
<l>return ()</l>
</body>
<docu id="Get_Esquinas">
<parameters>
<parameter id="ColumToFind"/>
<parameter id="FilaPattern"/>
<parameter id="Grayval"/>
<parameter id="Ptr_Min"/>
<parameter id="Ptr_Min2"/>
<parameter id="Ptr_Min3"/>
<parameter id="RowToFind"/>
<parameter id="Width"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_EsquinasPattern">
<interface>
<ic>
<par name="Grayval" base_type="ctrl" dimension="0"/>
<par name="RowToFind" base_type="ctrl" dimension="0"/>
<par name="ColumToFind" base_type="ctrl" dimension="0"/>
<par name="Width" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="FilaPattern" base_type="ctrl" dimension="0"/>
<par name="ColumnasPattern" base_type="ctrl" dimension="0"/>
<par name="Ptr_Min" base_type="ctrl" dimension="0"/>
<par name="Ptr_Min2" base_type="ctrl" dimension="0"/>
<par name="Ptr_Min3" base_type="ctrl" dimension="0"/>
<par name="EsquinaDetectadas" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>GrayvalOut := Grayval</l>
<c></c>
<c></c>
<l>dev_get_window (WindowHandle)</l>
<l>EsquinaDetectadas:=false</l>
<l>    try</l>
<c>        </c>
<c>  </c>
<c>        </c>
<c>    **************************************************   </c>
<c>    *** Umbral Corner Response</c>
<l>    Umbral:=2100</l>
<c>    **************************************************</c>
<l>    Ptros:=0</l>
<l>    AuxPtr:=0</l>
<l>for Idx := 0 to |GrayvalOut|-1 by 1</l>
<l>    if (GrayvalOut[Idx]&gt;Umbral)</l>
<l>            Ptros[AuxPtr]:=Idx</l>
<l>            AuxPtr:=AuxPtr+1</l>
<l>        GrayvalOut[Idx] := -1</l>
<l>        endif     </l>
<l>    endfor</l>
<l>    Umbral:=0</l>
<l>for Idx := 0 to |GrayvalOut|-1 by 1</l>
<l>    if (GrayvalOut[Idx]&gt;Umbral)</l>
<l>        Umbral := GrayvalOut[Idx]</l>
<l>            Ptros[3]:=Idx</l>
<l>        endif     </l>
<l>    endfor</l>
<c>    </c>
<l>    for Idx := 0 to 3 by 1</l>
<l>        FilaPattern[Idx]:=RowToFind[Ptros[Idx]]</l>
<l>        ColumnasPattern[Idx]:=ColumToFind[Ptros[Idx]]</l>
<l>    endfor</l>
<c>    </c>
<l>    disp_cross (WindowHandle, FilaPattern, ColumnasPattern, 50, 0)</l>
<c>   </c>
<c>    </c>
<l>    for Idx := 0 to 3 by 1</l>
<l>        tuple_pow (FilaPattern[Idx], 2, Pow1)</l>
<l>        tuple_pow (ColumnasPattern[Idx], 2, Pow2)</l>
<l>        tuple_sqrt (Pow1+Pow2, Sqrt)</l>
<l>        DistVectorial[Idx]:=Sqrt</l>
<l>    endfor</l>
<c>    </c>
<c>    </c>
<l>    AuxMin:=DistVectorial[0]</l>
<l>    Ptr_Min:=0</l>
<l>    for Idx := 0 to |DistVectorial|-1 by 1</l>
<l>        if (DistVectorial[Idx]&lt;AuxMin)            </l>
<l>            Ptr_Min:=Idx</l>
<l>            AuxMin:=DistVectorial[Idx]</l>
<l>        endif     </l>
<l>    endfor</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    for Idx := 0 to 3 by 1</l>
<l>        tuple_pow (FilaPattern[Idx], 2, Pow1)</l>
<l>        tuple_pow (Width-ColumnasPattern[Idx], 2, Pow2)</l>
<l>        tuple_sqrt (Pow1+Pow2, Sqrt)</l>
<l>        DistVectorial2[Idx]:=Sqrt</l>
<l>    endfor </l>
<c>    </c>
<l>    AuxMin2:=DistVectorial2[0]</l>
<l>    Ptr_Min2:=0</l>
<l>    for Idx := 0 to |DistVectorial2|-1 by 1</l>
<l>        if (DistVectorial2[Idx]&lt;AuxMin2)            </l>
<l>            Ptr_Min2:=Idx</l>
<l>            AuxMin2:=DistVectorial2[Idx]</l>
<l>        endif     </l>
<l>    endfor   </l>
<c>    </c>
<c> </c>
<l>      for Idx := 0 to 3 by 1</l>
<l>        tuple_pow (Width-FilaPattern[Idx], 2, Pow1)</l>
<l>        tuple_pow (ColumnasPattern[Idx], 2, Pow2)</l>
<l>        tuple_sqrt (Pow1+Pow2, Sqrt)</l>
<l>        DistVectorial3[Idx]:=Sqrt</l>
<l>    endfor </l>
<c>    </c>
<l>    AuxMin3:=DistVectorial3[0]</l>
<l>    Ptr_Min3:=0</l>
<l>    for Idx := 0 to |DistVectorial3|-1 by 1</l>
<l>        if (DistVectorial3[Idx]&lt;AuxMin3)            </l>
<l>            Ptr_Min3:=Idx</l>
<l>            AuxMin3:=DistVectorial3[Idx]</l>
<l>        endif     </l>
<l>    endfor   </l>
<c>    </c>
<l>    EsquinaDetectadas:=true</l>
<l>      catch (Exception)</l>
<l>        EsquinaDetectadas:=false  </l>
<c>          </c>
<c>          </c>
<l>    endtry</l>
<c>    </c>
<c>    </c>
<l>return ()</l>
</body>
<docu id="Get_EsquinasPattern">
<parameters>
<parameter id="ColumToFind"/>
<parameter id="ColumnasPattern"/>
<parameter id="EsquinaDetectadas"/>
<parameter id="FilaPattern"/>
<parameter id="Grayval"/>
<parameter id="Ptr_Min"/>
<parameter id="Ptr_Min2"/>
<parameter id="Ptr_Min3"/>
<parameter id="RowToFind"/>
<parameter id="Width"/>
</parameters>
</docu>
</procedure>
<procedure name="Process_Image">
<interface>
<io>
<par name="Zm" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="ImageGauss" base_type="iconic" dimension="0"/>
<par name="Regions1" base_type="iconic" dimension="0"/>
<par name="Erosion_Inf" base_type="iconic" dimension="0"/>
<par name="RegionTrans" base_type="iconic" dimension="0"/>
<par name="Image" base_type="iconic" dimension="0"/>
<par name="Img1" base_type="iconic" dimension="0"/>
<par name="Img2" base_type="iconic" dimension="0"/>
<par name="ImageReduced2" base_type="iconic" dimension="0"/>
<par name="ImageResult" base_type="iconic" dimension="0"/>
<par name="MixedImage" base_type="iconic" dimension="0"/>
<par name="ImageCorner" base_type="iconic" dimension="0"/>
<par name="Regions2" base_type="iconic" dimension="0"/>
<par name="LocalMaxima1" base_type="iconic" dimension="0"/>
<par name="ConnectedRegions1" base_type="iconic" dimension="0"/>
</oo>
<oc>
<par name="Width" base_type="ctrl" dimension="0"/>
<par name="Height" base_type="ctrl" dimension="0"/>
<par name="Area1" base_type="ctrl" dimension="0"/>
<par name="RowToFind" base_type="ctrl" dimension="0"/>
<par name="ColumToFind" base_type="ctrl" dimension="0"/>
<par name="Grayval" base_type="ctrl" dimension="0"/>
<par name="Function" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>gauss_filter (Zm, ImageGauss, 11)</l>
<l>gauss_filter (ImageGauss, ImageGauss, 11)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>GetMinAltura(Zm, Regions1)  </l>
<c></c>
<c></c>
<l>erosion_rectangle1 (Regions1, Erosion_Inf, 51, 51)</l>
<l>* erosion_rectangle1 (Erosion_Inf, Erosion_Inf, 31, 31)</l>
<l>connection (Erosion_Inf, Erosion_Inf)</l>
<l>select_shape_std (Erosion_Inf, Erosion_Inf, 'max_area', 90)</l>
<c></c>
<l>shape_trans (Erosion_Inf, RegionTrans, 'rectangle2')</l>
<c></c>
<c></c>
<l>get_image_size (Zm, Width, Height)</l>
<l>gen_image_const (Image, 'byte',  Width, Height)</l>
<c></c>
<l>gen_image_proto (Zm, Img1, 10)</l>
<l>gen_image_proto (Zm, Img2, 150)</l>
<l>reduce_domain (Img2, RegionTrans, ImageReduced2)</l>
<c></c>
<l>add_image (Img1, ImageReduced2, ImageResult, 1, 100)</l>
<l>paint_gray(ImageReduced2,Img1,MixedImage)</l>
<l>corner_response (MixedImage, ImageCorner, 3, 0.04)</l>
<c></c>
<l>local_max (ImageCorner, LocalMaxima)</l>
<c></c>
<l>threshold (ImageCorner, Regions2, 1000, 5000)</l>
<c></c>
<l>reduce_domain (ImageCorner, Regions2, ImageCorner)</l>
<c></c>
<l>local_max (ImageCorner, LocalMaxima1)</l>
<l>connection (LocalMaxima1, ConnectedRegions1)</l>
<l>area_center (ConnectedRegions1, Area1, RowToFind, ColumToFind)</l>
<l>get_grayval (ImageCorner, RowToFind, ColumToFind, Grayval) </l>
<l>create_funct_1d_array (Grayval, Function)</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Process_Image">
<parameters>
<parameter id="Area1"/>
<parameter id="ColumToFind"/>
<parameter id="ConnectedRegions1"/>
<parameter id="Erosion_Inf"/>
<parameter id="Function"/>
<parameter id="Grayval"/>
<parameter id="Height"/>
<parameter id="Image"/>
<parameter id="ImageCorner"/>
<parameter id="ImageGauss"/>
<parameter id="ImageReduced2"/>
<parameter id="ImageResult"/>
<parameter id="Img1"/>
<parameter id="Img2"/>
<parameter id="LocalMaxima1"/>
<parameter id="MixedImage"/>
<parameter id="RegionTrans"/>
<parameter id="Regions1"/>
<parameter id="Regions2"/>
<parameter id="RowToFind"/>
<parameter id="Width"/>
<parameter id="Zm"/>
</parameters>
</docu>
</procedure>
<procedure name="Altura_Maxima">
<interface>
<io>
<par name="Zm" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="RegZRed" base_type="iconic" dimension="0"/>
<par name="ZRed" base_type="iconic" dimension="0"/>
<par name="HeightMap_Scalada" base_type="iconic" dimension="0"/>
<par name="HeightMap_Region" base_type="iconic" dimension="0"/>
<par name="Regions_PattSup" base_type="iconic" dimension="0"/>
<par name="ConnectedRegions" base_type="iconic" dimension="0"/>
<par name="BordeSupPattern" base_type="iconic" dimension="0"/>
<par name="ZmGauss" base_type="iconic" dimension="0"/>
<par name="AlturaPatternImg" base_type="iconic" dimension="0"/>
<par name="LocalMaxima" base_type="iconic" dimension="0"/>
<par name="MinimosLocales" base_type="iconic" dimension="0"/>
</oo>
<oc>
<par name="AlturaPattern" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>    * ********************************************************</c>
<c>    * 1.-  !!!!!!!!! threshols dinamico!!!!!!!!!!!!!!!!!!!!!!!!!!</c>
<c>    * ********************************************************</c>
<l>    threshold (Zm, RegZRed, 5, 2000)</l>
<l>    reduce_domain (Zm, RegZRed, ZRed)</l>
<l>    escala := 255.0/2000.0</l>
<l>    scale_image (ZRed, HeightMap_Scalada, escala, 0)</l>
<l>    threshold (HeightMap_Scalada, HeightMap_Region, 0, 255)</l>
<l>    gray_histo_range (HeightMap_Region, HeightMap_Scalada, 0, 255, 256, Histo, BinSize)</l>
<l>    tuple_sum (Histo, Sum_Histo)</l>
<c>    * </c>
<l>* # #########################################################</l>
<l>* # ### Mientras mas grabnde menos sensible a cambios #######   </l>
<l>    Mascara := 1</l>
<l>* # ########################################################</l>
<c>    * </c>
<l>    Vector_Distribucion := []</l>
<l>    init_vector := 255</l>
<l>    flag_vector := 0</l>
<l>    aux_suma := 0.0</l>
<c>    * </c>
<l>    for Index := init_vector to 0 by -1</l>
<c>        * </c>
<l>        Vector_Distribucion[Index] := aux_suma+Histo[Index]*100.0/ Sum_Histo</l>
<l>        aux_suma := Vector_Distribucion[Index]</l>
<l>    endfor</l>
<c>    * </c>
<l>    Derivada := []</l>
<l>    Factor_Der := 1000</l>
<l>    Mascara := 3</l>
<l>    for Index := init_vector to 50 by -Mascara</l>
<c>        * </c>
<l>        Derivada[Index] := abs(Vector_Distribucion[Index]-Vector_Distribucion[Index-Mascara])*Factor_Der</l>
<c>        * </c>
<l>    endfor</l>
<c> </c>
<c>    * </c>
<c>    * *********************************************************</c>
<c>    * * Busco el primer cambio brusco de posicion *************</c>
<c>    * * El umbral de cambio es Aux_Val_Max ********************</c>
<c>    * *********************************************************</c>
<c>    * </c>
<l>    Aux_Val_Max := 2000</l>
<l>    Flag_indx_max := 255</l>
<l>    for Index := 0 to 160 by Mascara</l>
<c>        * </c>
<l>        if (Derivada[Index]&gt;Aux_Val_Max)</l>
<l>            Aux_Val_Max := Derivada[Index]</l>
<l>            Flag_indx_max := Index</l>
<l>            break</l>
<l>        endif</l>
<c>        * </c>
<l>    endfor</l>
<c></c>
<c></c>
<c>    * ***********************************************************</c>
<c>    * * Desviacion luego de  detectar el cambio brusco **********</c>
<c>    * ***********************************************************</c>
<c>    * </c>
<l>* # #########################################################</l>
<l>* # ######## Grado de proteccion para moverse entre el </l>
<l>* # ####### histograma</l>
<l>    index_protection_Inf := 10</l>
<l>    index_protection_Sup := 20</l>
<l>* # #########################################################</l>
<c>    * </c>
<l>    Alt_Min := Flag_indx_max-index_protection_Inf</l>
<l>    Alt_Max := Flag_indx_max+index_protection_Sup</l>
<l>    threshold (HeightMap_Scalada, Regions_PattSup, Alt_Min, Alt_Max)</l>
<c>    * </c>
<c>    </c>
<l>    connection (Regions_PattSup, ConnectedRegions)</l>
<c>    </c>
<l>    select_shape_std (ConnectedRegions, BordeSupPattern, 'max_area', 90)</l>
<c>    </c>
<l>    gauss_filter (Zm, ZmGauss, 11)</l>
<l>    gauss_filter (ZmGauss, ZmGauss, 11)</l>
<l>    reduce_domain (ZmGauss, BordeSupPattern, AlturaPatternImg)</l>
<c>  *****************************************************</c>
<l>    local_max (AlturaPatternImg, LocalMaxima)</l>
<l>    local_min (AlturaPatternImg, LocalMaxima)</l>
<c>    ***************************************************</c>
<l>    connection (LocalMaxima, MinimosLocales)</l>
<l>    area_center (MinimosLocales, Area, Row, Column)</l>
<l>    get_grayval (Zm, Row, Column, Zmins)</l>
<l>    AlturaPattern:=Zmins[0]</l>
<l>    PtroMax:=0</l>
<l>    for Idx := 0 to |Zmins|-1 by 1</l>
<c>        </c>
<l>        if (Zmins[Idx]&lt;AlturaPattern)</l>
<l>            AlturaPattern:=Zmins[Idx]</l>
<l>            PtroMax:=Idx</l>
<l>        endif</l>
<c>        </c>
<l>    endfor</l>
<c>    </c>
<l>    ZSeguridad:=0</l>
<l>    AlturaPattern:=AlturaPattern+ZSeguridad</l>
<c>    </c>
<c>   </c>
<l>return ()</l>
</body>
<docu id="Altura_Maxima">
<parameters>
<parameter id="AlturaPattern"/>
<parameter id="AlturaPatternImg"/>
<parameter id="BordeSupPattern"/>
<parameter id="ConnectedRegions"/>
<parameter id="HeightMap_Region"/>
<parameter id="HeightMap_Scalada"/>
<parameter id="LocalMaxima"/>
<parameter id="MinimosLocales"/>
<parameter id="RegZRed"/>
<parameter id="Regions_PattSup"/>
<parameter id="ZRed"/>
<parameter id="Zm"/>
<parameter id="ZmGauss"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_EsquinaPosition">
<interface>
<io>
<par name="Xm" base_type="iconic" dimension="0"/>
<par name="Ym" base_type="iconic" dimension="0"/>
<par name="Zm" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="MultiChannelImage" base_type="iconic" dimension="0"/>
<par name="ComposeImg" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="FilaPattern" base_type="ctrl" dimension="0"/>
<par name="Ptr_Min" base_type="ctrl" dimension="0"/>
<par name="ColumnasPattern" base_type="ctrl" dimension="0"/>
<par name="Ptr_Min2" base_type="ctrl" dimension="0"/>
<par name="Ptr_Min3" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Angle" base_type="ctrl" dimension="0"/>
<par name="EsquinaSupIzquierda" base_type="ctrl" dimension="0"/>
<par name="EsquinaSupDerecha" base_type="ctrl" dimension="0"/>
<par name="EsquinaInfIzquierda" base_type="ctrl" dimension="0"/>
<par name="Ancho_Pattern" base_type="ctrl" dimension="0"/>
<par name="Largo_Pattern" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>compose3 (Xm, Ym, Zm, MultiChannelImage)</l>
<l>dev_get_window (WindowHandle)</l>
<c></c>
<l>angle_lx (FilaPattern[Ptr_Min], ColumnasPattern[Ptr_Min], FilaPattern[Ptr_Min2], ColumnasPattern[Ptr_Min2], Angle)    </l>
<l>angle_lx (FilaPattern[Ptr_Min2], ColumnasPattern[Ptr_Min2], FilaPattern[Ptr_Min], ColumnasPattern[Ptr_Min], Angle2)</l>
<c></c>
<l>tuple_deg (Angle, Angle)</l>
<l>tuple_deg (Angle2, Angle2)</l>
<c></c>
<l>tuple_abs (Angle, AngleAbs)</l>
<l>tuple_abs (Angle2, Angle2Abs)</l>
<c></c>
<l>    if (Angle2Abs&gt;AngleAbs)</l>
<l>        Angle:=-Angle2</l>
<l>    endif</l>
<c>    </c>
<c></c>
<l>    get_grayval (MultiChannelImage, FilaPattern[Ptr_Min], ColumnasPattern[Ptr_Min], EsquinaSupIzquierda) </l>
<l>    get_grayval (MultiChannelImage, FilaPattern[Ptr_Min2], ColumnasPattern[Ptr_Min2], EsquinaSupDerecha) </l>
<l>    get_grayval (MultiChannelImage, FilaPattern[Ptr_Min3], ColumnasPattern[Ptr_Min3], EsquinaInfIzquierda) </l>
<l>    DifPuntos:=EsquinaSupDerecha-EsquinaSupIzquierda</l>
<l>    tuple_abs (DifPuntos[0], Ancho_Pattern)</l>
<l>    DifPuntos:=EsquinaInfIzquierda-EsquinaSupIzquierda</l>
<l>    tuple_abs (DifPuntos[1], Largo_Pattern)</l>
<c>    </c>
<l>    dev_clear_window ()</l>
<l>    dev_display (Zm)</l>
<l>dev_set_line_width (10)</l>
<c></c>
<l>disp_cross (WindowHandle, FilaPattern[Ptr_Min], ColumnasPattern[Ptr_Min], 50, 0)</l>
<l>disp_cross (WindowHandle, FilaPattern[Ptr_Min2], ColumnasPattern[Ptr_Min2], 50, 0)</l>
<l>disp_cross (WindowHandle, FilaPattern[Ptr_Min3], ColumnasPattern[Ptr_Min3], 50, 0)</l>
<l> dev_set_line_width (1)</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_EsquinaPosition">
<parameters>
<parameter id="Ancho_Pattern"/>
<parameter id="Angle"/>
<parameter id="ColumnasPattern"/>
<parameter id="ComposeImg"/>
<parameter id="EsquinaInfIzquierda"/>
<parameter id="EsquinaSupDerecha"/>
<parameter id="EsquinaSupIzquierda"/>
<parameter id="FilaPattern"/>
<parameter id="Largo_Pattern"/>
<parameter id="MultiChannelImage"/>
<parameter id="Ptr_Min"/>
<parameter id="Ptr_Min2"/>
<parameter id="Ptr_Min3"/>
<parameter id="Xm"/>
<parameter id="Ym"/>
<parameter id="Zm"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Photo_and_DimencionPattern">
<interface>
<io>
<par name="Objeto" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Zm" base_type="iconic" dimension="0"/>
<par name="Ym" base_type="iconic" dimension="0"/>
<par name="Xm" base_type="iconic" dimension="0"/>
<par name="PosibleManga" base_type="iconic" dimension="0"/>
<par name="PosibleSprue" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera_3" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Escena3D" base_type="ctrl" dimension="0"/>
<par name="Angle" base_type="ctrl" dimension="0"/>
<par name="EsquinaSupIzquierda" base_type="ctrl" dimension="0"/>
<par name="EsquinaSupDerecha" base_type="ctrl" dimension="0"/>
<par name="EsquinaInfIzquierda" base_type="ctrl" dimension="0"/>
<par name="Ancho_Pattern" base_type="ctrl" dimension="0"/>
<par name="Largo_Pattern" base_type="ctrl" dimension="0"/>
<par name="AlturaPattern" base_type="ctrl" dimension="0"/>
<par name="Altura_Manga" base_type="ctrl" dimension="0"/>
<par name="CentroSprue" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Get_Foto_3D (Objeto, Zm, Ym, Xm, PosibleSprue, PosibleManga, NxLib, Camera_3, Escena3D)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c>**********************************************</c>
<c>* cuantas mangas existen </c>
<c>**********************************************</c>
<c></c>
<l>Altura_Mangas (PosibleManga, Zm, Xm, Ym, Altura_Manga)</l>
<c></c>
<c></c>
<l>Get_Centro_Sprue (Xm, Ym, Zm, PosibleSprue, CentroSprue)</l>
<c>**********************************************</c>
<c></c>
<c></c>
<c></c>
<l>Process_Image (Zm, ImageGauss, Regions1, Erosion_Inf, RegionTrans, Image, Img1, Img2, ImageReduced2, ImageResult, MixedImage, ImageCorner, Regions2, LocalMaxima1, ConnectedRegions1, Width, Height, Area1, RowToFind, ColumToFind, Grayval, Function)</l>
<l>Get_EsquinasPattern (Grayval, RowToFind, ColumToFind, Width, FilaPattern, ColumnasPattern,\
                     Ptr_Min, Ptr_Min2, Ptr_Min3, EsquinaDetectadas)</l>
<c></c>
<l>if (EsquinaDetectadas)</l>
<c>    </c>
<l>    Get_EsquinaPosition (Xm, Ym, Zm, MultiChannelImage, ComposeImg, FilaPattern, Ptr_Min, ColumnasPattern, Ptr_Min2, Ptr_Min3, \
                         Angle, EsquinaSupIzquierda, EsquinaSupDerecha, EsquinaInfIzquierda, Ancho_Pattern, Largo_Pattern)</l>
<c>    </c>
<c>    </c>
<l>    Altura_Maxima (Zm, RegZRed, ZRed, HeightMap_Scalada, HeightMap_Region, Regions_PattSup, \
                   ConnectedRegions, BordeSupPattern, ZmGauss, AlturaPatternImg, LocalMaxima, MinimosLocales,\
                   AlturaPattern)</l>
<c>   </c>
<l>else</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>endif</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Photo_and_DimencionPattern">
<parameters>
<parameter id="AlturaPattern"/>
<parameter id="Altura_Manga"/>
<parameter id="Ancho_Pattern"/>
<parameter id="Angle"/>
<parameter id="Camera_3"/>
<parameter id="CentroSprue"/>
<parameter id="Escena3D"/>
<parameter id="EsquinaInfIzquierda"/>
<parameter id="EsquinaSupDerecha"/>
<parameter id="EsquinaSupIzquierda"/>
<parameter id="Largo_Pattern"/>
<parameter id="NxLib"/>
<parameter id="Objeto"/>
<parameter id="PosibleManga"/>
<parameter id="PosibleSprue"/>
<parameter id="Xm"/>
<parameter id="Ym"/>
<parameter id="Zm"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Centro_Sprue">
<interface>
<io>
<par name="Xm" base_type="iconic" dimension="0"/>
<par name="Ym" base_type="iconic" dimension="0"/>
<par name="Zm" base_type="iconic" dimension="0"/>
<par name="PosibleSprue" base_type="iconic" dimension="0"/>
</io>
<oc>
<par name="CentroSprue" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>compose3 (Xm, Ym, Zm, Image3)</l>
<l>reduce_domain (Image3, PosibleSprue, ImageReduced)</l>
<l>area_center (PosibleSprue, Area, Row, Column)</l>
<l>get_grayval (ImageReduced, Row, Column, CentroSprue)</l>
<l>return ()</l>
</body>
<docu id="Get_Centro_Sprue">
<parameters>
<parameter id="CentroSprue"/>
<parameter id="PosibleSprue"/>
<parameter id="Xm"/>
<parameter id="Ym"/>
<parameter id="Zm"/>
</parameters>
</docu>
</procedure>
<procedure name="Altura_Mangas">
<interface>
<io>
<par name="PosibleManga" base_type="iconic" dimension="0"/>
<par name="Zm" base_type="iconic" dimension="0"/>
<par name="Xm" base_type="iconic" dimension="0"/>
<par name="Ym" base_type="iconic" dimension="0"/>
</io>
<oc>
<par name="Altura_Manga" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>connection (PosibleManga, posibleMangasUnid)</l>
<l>xyz_to_object_model_3d  (Xm, Ym, Zm, MultiChannelImage)</l>
<l>area_center (posibleMangasUnid, Area, Row, Column)</l>
<l>NumeroMangas:=|Area|</l>
<l>compose3 (Xm, Ym, Zm, MultiChannelImage1)</l>
<c></c>
<c></c>
<l>Altura_Manga[0]:=0</l>
<l>for IndexManga := 0 to NumeroMangas-1 by 1</l>
<c>    </c>
<l>    select_obj (posibleMangasUnid, mangaSelect, IndexManga+1)</l>
<c>    </c>
<l>    reduce_domain (Zm, mangaSelect, Zmanga)</l>
<l>    reduce_domain (Xm, mangaSelect, Xmanga)</l>
<l>    reduce_domain (Ym, mangaSelect, Ymanga)</l>
<c>    </c>
<l>    xyz_to_object_model_3d (Xmanga, Ymanga, Zmanga, ObjectModel3D)</l>
<c>    ******************************************************************************************************************************</c>
<l>    Parametros_Visualizacion:=['colored','disp_pose','point_size']</l>
<l>    Valores_Visualizacion:= [  12  ,'true',1]</l>
<c>    </c>
<l>    Debug_View:=true</l>
<c>   </c>
<l>  *  smooth_object_model_3d (ObjectModel3D, 'mls', 'mls_kNN', 50, SmoothObjectModel3D)</l>
<l>  * Visualizar_3D ([ObjectModel3D], Parametros_Visualizacion, Valores_Visualizacion, Debug_View, [], [], [], PoseOut1)</l>
<c>    </c>
<l>    get_object_model_3d_params (ObjectModel3D, 'bounding_box1', BoxSleeve)</l>
<l>    Altura_Manga[IndexManga]:=BoxSleeve[2]</l>
<l>    clear_object_model_3d ([ObjectModel3D])</l>
<c>    ******************************************************************************************************************************</c>
<c>    ****************************************************************************************************************************</c>
<c>    </c>
<c></c>
<c>    </c>
<l>endfor</l>
<l>return ()</l>
</body>
<docu id="Altura_Mangas">
<parameters>
<parameter id="Altura_Manga"/>
<parameter id="PosibleManga"/>
<parameter id="Xm"/>
<parameter id="Ym"/>
<parameter id="Zm"/>
</parameters>
</docu>
</procedure>
<procedure name="GetMaxAltura">
<interface>
<io>
<par name="Zm" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Regions_PattSup" base_type="iconic" dimension="0"/>
</oo>
</interface>
<body>
<c></c>
<c></c>
<c>    * ********************************************************</c>
<c>    * 1.-  !!!!!!!!! threshols dinamico!!!!!!!!!!!!!!!!!!!!!!!!!!</c>
<c>    * ********************************************************</c>
<l>    threshold (Zm, RegZRed, 5, 2000)</l>
<l>    reduce_domain (Zm, RegZRed, ZRed)</l>
<l>    escala := 255.0/2000.0</l>
<l>    scale_image (ZRed, HeightMap_Scalada, escala, 0)</l>
<l>    threshold (HeightMap_Scalada, HeightMap_Region, 0, 255)</l>
<l>    gray_histo_range (HeightMap_Region, HeightMap_Scalada, 0, 255, 256, Histo, BinSize)</l>
<l>    tuple_sum (Histo, Sum_Histo)</l>
<c>    * </c>
<l>* # #########################################################</l>
<l>* # ### Mientras mas grabnde menos sensible a cambios #######   </l>
<l>    Mascara := 1</l>
<l>* # ########################################################</l>
<c>    * </c>
<l>    Vector_Distribucion := []</l>
<l>    init_vector := 255</l>
<l>    flag_vector := 0</l>
<l>    aux_suma := 0.0</l>
<c>    * </c>
<l>    for Index := init_vector to 0 by -1</l>
<c>        * </c>
<l>        Vector_Distribucion[Index] := aux_suma+Histo[Index]*100.0/ Sum_Histo</l>
<l>        aux_suma := Vector_Distribucion[Index]</l>
<l>    endfor</l>
<c>    * </c>
<l>    Derivada := []</l>
<l>    Factor_Der := 1000</l>
<l>    Mascara := 3</l>
<l>    for Index := init_vector to 50 by -Mascara</l>
<c>        * </c>
<l>        Derivada[Index] := abs(Vector_Distribucion[Index]-Vector_Distribucion[Index-Mascara])*Factor_Der</l>
<c>        * </c>
<l>    endfor</l>
<c> </c>
<c>    * </c>
<c>    * *********************************************************</c>
<c>    * * Busco el primer cambio brusco de posicion *************</c>
<c>    * * El umbral de cambio es Aux_Val_Max ********************</c>
<c>    * *********************************************************</c>
<c>    * </c>
<l>    Aux_Val_Max := 2000</l>
<l>    Flag_indx_max := 255</l>
<l>    for Index := 0 to 160 by Mascara</l>
<c>        * </c>
<l>        if (Derivada[Index]&gt;Aux_Val_Max)</l>
<l>            Aux_Val_Max := Derivada[Index]</l>
<l>            Flag_indx_max := Index</l>
<l>            break</l>
<l>        endif</l>
<c>        * </c>
<l>    endfor</l>
<c></c>
<c></c>
<c>    * ***********************************************************</c>
<c>    * * Desviacion luego de  detectar el cambio brusco **********</c>
<c>    * ***********************************************************</c>
<c>    * </c>
<l>* # #########################################################</l>
<l>* # ######## Grado de proteccion para moverse entre el </l>
<l>* # ####### histograma</l>
<l>    index_protection_Inf := 30</l>
<l>    index_protection_Sup := 20</l>
<l>* # #########################################################</l>
<c>    * </c>
<l>    Alt_Min := Flag_indx_max-index_protection_Inf</l>
<l>    Alt_Max := Flag_indx_max+index_protection_Sup</l>
<l>    threshold (HeightMap_Scalada, Regions_PattSup, Alt_Min, Alt_Max)</l>
<l>return ()</l>
</body>
<docu id="GetMaxAltura">
<parameters>
<parameter id="Regions_PattSup"/>
<parameter id="Zm"/>
</parameters>
</docu>
</procedure>
<procedure name="GetMinAltura">
<interface>
<io>
<par name="Zm" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Regions_PattSup" base_type="iconic" dimension="0"/>
</oo>
</interface>
<body>
<c></c>
<c></c>
<c>    * ********************************************************</c>
<c>    * 1.-  !!!!!!!!! threshols dinamico!!!!!!!!!!!!!!!!!!!!!!!!!!</c>
<c>    * ********************************************************</c>
<l>    threshold (Zm, RegZRed, 5, 2000)</l>
<l>    reduce_domain (Zm, RegZRed, ZRed)</l>
<l>    escala := 255.0/2000.0</l>
<l>    scale_image (ZRed, HeightMap_Scalada, escala, 0)</l>
<l>    threshold (HeightMap_Scalada, HeightMap_Region, 0, 255)</l>
<l>    gray_histo_range (HeightMap_Region, HeightMap_Scalada, 0, 255, 256, Histo, BinSize)</l>
<l>    tuple_sum (Histo, Sum_Histo)</l>
<c>    * </c>
<l>* # #########################################################</l>
<l>* # ### Mientras mas grabnde menos sensible a cambios #######   </l>
<l>    Mascara := 1</l>
<l>* # ########################################################</l>
<c>    * </c>
<l>    Vector_Distribucion := []</l>
<l>    init_vector := 255</l>
<l>    flag_vector := 0</l>
<l>    aux_suma := 0.0</l>
<c>    * </c>
<l>    for Index := init_vector to 0 by -1</l>
<c>        * </c>
<l>        Vector_Distribucion[Index] := aux_suma+Histo[Index]*100.0/ Sum_Histo</l>
<l>        aux_suma := Vector_Distribucion[Index]</l>
<l>    endfor</l>
<c>    * </c>
<l>    Derivada := []</l>
<l>    Factor_Der := 1000</l>
<l>    Mascara := 3</l>
<l>    for Index := init_vector to 50 by -Mascara</l>
<c>        * </c>
<l>        Derivada[Index] := abs(Vector_Distribucion[Index]-Vector_Distribucion[Index-Mascara])*Factor_Der</l>
<c>        * </c>
<l>    endfor</l>
<c> </c>
<c>    * </c>
<c>    * *********************************************************</c>
<c>    * * Busco el primer cambio brusco de posicion *************</c>
<c>    * * El umbral de cambio es Aux_Val_Max ********************</c>
<c>    * *********************************************************</c>
<c>    * </c>
<l>    Aux_Val_Max := 5000</l>
<l>    Flag_indx_max := 255</l>
<l>    for Index := 255 to 140 by -Mascara</l>
<c>        * </c>
<l>        if (Derivada[Index]&gt;Aux_Val_Max)</l>
<l>            Aux_Val_Max := Derivada[Index]</l>
<l>            Flag_indx_max := Index</l>
<l>            break</l>
<l>        endif</l>
<c>        * </c>
<l>    endfor</l>
<c></c>
<c></c>
<c>    * ***********************************************************</c>
<c>    * * Desviacion luego de  detectar el cambio brusco **********</c>
<c>    * ***********************************************************</c>
<c>    * </c>
<l>* # #########################################################</l>
<l>* # ######## Grado de proteccion para moverse entre el </l>
<l>* # ####### histograma</l>
<l>    index_protection_Inf := 10</l>
<c> </c>
<l>* # #########################################################</l>
<c>    * </c>
<l>    Alt_Min := Flag_indx_max-index_protection_Inf</l>
<l>    Alt_Max := 255</l>
<l>    threshold (HeightMap_Scalada, Regions_PattSup, Alt_Min, Alt_Max)</l>
<l>return ()</l>
</body>
<docu id="GetMinAltura">
<parameters>
<parameter id="Regions_PattSup"/>
<parameter id="Zm"/>
</parameters>
</docu>
</procedure>
<procedure name="Foto1">
<interface>
<oo>
<par name="ModelImage" base_type="iconic" dimension="0"/>
<par name="Xm" base_type="iconic" dimension="0"/>
<par name="Ym" base_type="iconic" dimension="0"/>
<par name="Zm" base_type="iconic" dimension="0"/>
<par name="ImgLeftCamera_1" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera_3" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>* #########################################################################</l>
<c>* Configuracion de Parametros</c>
<l>MinimumDisparity_Cam1:=-46</l>
<l>NumberOfDisparities_Cam1:= 64</l>
<l>Projector:='true'</l>
<l>FrontLigth:='true'</l>
<l>AutoExposure:='true'</l>
<l>AutoGain:='true'</l>
<l>Exposure := 1.8</l>
<l>Gain:=1</l>
<l>FlexView:=16</l>
<l>Config_Parametros_Cam_R1 (NxLib, Camera_3, NumberOfDisparities_Cam1, MinimumDisparity_Cam1, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure, FlexView, TempCam)</l>
<c></c>
<c></c>
<l>Get_Img_Camera_R2 (ModelImage, Xm, Ym, Zm, ImgLeftCamera_1, NxLib, Camera_3, Escena3D_RAW)</l>
<c></c>
<c></c>
<c></c>
<l>xyz_to_object_model_3d (Xm, Ym, Zm, ObjectModel3D)</l>
<c>     ******************************************************************************************************************************</c>
<l>    Parametros_Visualizacion:=['disp_pose','color_attrib','lut','disp_lines','point_size']</l>
<l>    Valores_Visualizacion:= ['true','coord_z','rainbow','true',1]</l>
<l>    Debug_View:=true</l>
<l>    Visualizar_3D ([Escena3D_RAW], Parametros_Visualizacion, Valores_Visualizacion, Debug_View, [], [], [], PoseOut1)</l>
<c>    ******************************************************************************************************************************</c>
<c>    ****************************************************************************************************************************</c>
<c>    </c>
<c>    </c>
<l>return ()</l>
</body>
<docu id="Foto1">
<parameters>
<parameter id="Camera_3"/>
<parameter id="Escena3D_RAW"/>
<parameter id="ImgLeftCamera_1"/>
<parameter id="ModelImage"/>
<parameter id="NxLib"/>
<parameter id="Xm"/>
<parameter id="Ym"/>
<parameter id="Zm"/>
</parameters>
</docu>
</procedure>
<procedure name="Foto2">
<interface>
<oo>
<par name="ModelImage" base_type="iconic" dimension="0"/>
<par name="Xm" base_type="iconic" dimension="0"/>
<par name="Ym" base_type="iconic" dimension="0"/>
<par name="Zm" base_type="iconic" dimension="0"/>
<par name="ImgLeftCamera_1" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera_3" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>* #########################################################################</l>
<c>* Configuracion de Parametros</c>
<l>MinimumDisparity_Cam1:=-46</l>
<l>NumberOfDisparities_Cam1:= 64</l>
<l>Projector:='true'</l>
<l>FrontLigth:='true'</l>
<l>AutoExposure:='true'</l>
<l>AutoGain:='true'</l>
<l>Exposure := 1.8</l>
<l>Gain:=1</l>
<l>FlexView:=16</l>
<l>Config_Parametros_Cam_R1 (NxLib, Camera_3, NumberOfDisparities_Cam1, MinimumDisparity_Cam1, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure, FlexView, TempCam)</l>
<c></c>
<c></c>
<l>Get_Img_Camera_R2 (ModelImage, Xm, Ym, Zm, ImgLeftCamera_1, NxLib, Camera_3, Escena3D_RAW)</l>
<c></c>
<c></c>
<c></c>
<l>xyz_to_object_model_3d (Xm, Ym, Zm, ObjectModel3D)</l>
<c>     ******************************************************************************************************************************</c>
<l>    Parametros_Visualizacion:=['disp_pose','color_attrib','lut','disp_lines','point_size']</l>
<l>    Valores_Visualizacion:= ['true','coord_z','rainbow','true',1]</l>
<l>    Debug_View:=true</l>
<l>    Visualizar_3D ([Escena3D_RAW], Parametros_Visualizacion, Valores_Visualizacion, Debug_View, [], [], [], PoseOut1)</l>
<c>    ******************************************************************************************************************************</c>
<c>    ****************************************************************************************************************************</c>
<c>    </c>
<c>    </c>
<l>return ()</l>
</body>
<docu id="Foto2">
<parameters>
<parameter id="Camera_3"/>
<parameter id="Escena3D_RAW"/>
<parameter id="ImgLeftCamera_1"/>
<parameter id="ModelImage"/>
<parameter id="NxLib"/>
<parameter id="Xm"/>
<parameter id="Ym"/>
<parameter id="Zm"/>
</parameters>
</docu>
</procedure>
<procedure name="Foto3">
<interface>
<oo>
<par name="ModelImage" base_type="iconic" dimension="0"/>
<par name="Xm" base_type="iconic" dimension="0"/>
<par name="Ym" base_type="iconic" dimension="0"/>
<par name="Zm" base_type="iconic" dimension="0"/>
<par name="ImgLeftCamera_1" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera_3" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>* #########################################################################</l>
<c>* Configuracion de Parametros</c>
<l>MinimumDisparity_Cam1:=-46</l>
<l>NumberOfDisparities_Cam1:= 64</l>
<l>Projector:='true'</l>
<l>FrontLigth:='true'</l>
<l>AutoExposure:='true'</l>
<l>AutoGain:='true'</l>
<l>Exposure := 1.8</l>
<l>Gain:=1</l>
<l>FlexView:=16</l>
<l>Config_Parametros_Cam_R1 (NxLib, Camera_3, NumberOfDisparities_Cam1, MinimumDisparity_Cam1, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure, FlexView, TempCam)</l>
<c></c>
<c></c>
<l>Get_Img_Camera_R2 (ModelImage, Xm, Ym, Zm, ImgLeftCamera_1, NxLib, Camera_3, Escena3D_RAW)</l>
<c></c>
<c></c>
<c></c>
<l>xyz_to_object_model_3d (Xm, Ym, Zm, ObjectModel3D)</l>
<c>     ******************************************************************************************************************************</c>
<l>    Parametros_Visualizacion:=['disp_pose','color_attrib','lut','disp_lines','point_size']</l>
<l>    Valores_Visualizacion:= ['true','coord_z','rainbow','true',1]</l>
<l>    Debug_View:=true</l>
<l>    Visualizar_3D ([Escena3D_RAW], Parametros_Visualizacion, Valores_Visualizacion, Debug_View, [], [], [], PoseOut1)</l>
<c>    ******************************************************************************************************************************</c>
<c>    ****************************************************************************************************************************</c>
<c>    </c>
<c>    </c>
<l>return ()</l>
</body>
<docu id="Foto3">
<parameters>
<parameter id="Camera_3"/>
<parameter id="Escena3D_RAW"/>
<parameter id="ImgLeftCamera_1"/>
<parameter id="ModelImage"/>
<parameter id="NxLib"/>
<parameter id="Xm"/>
<parameter id="Ym"/>
<parameter id="Zm"/>
</parameters>
</docu>
</procedure>
<procedure name="GetMaxAlturaUmbral">
<interface>
<io>
<par name="Zm" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Regions_PattSup" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="index_protection_Inf" base_type="ctrl" dimension="0"/>
<par name="index_protection_Sup" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c></c>
<l>try</l>
<c>    </c>
<c></c>
<c>    * ********************************************************</c>
<c>    * 1.-  !!!!!!!!! threshols dinamico!!!!!!!!!!!!!!!!!!!!!!!!!!</c>
<c>    * ********************************************************</c>
<l>    threshold (Zm, RegZRed, 5, 2000)</l>
<l>    reduce_domain (Zm, RegZRed, ZRed)</l>
<l>    escala := 255.0/2000.0</l>
<l>    scale_image (ZRed, HeightMap_Scalada, escala, 0)</l>
<l>    threshold (HeightMap_Scalada, HeightMap_Region, 0, 255)</l>
<l>    gray_histo_range (HeightMap_Region, HeightMap_Scalada, 0, 255, 256, Histo, BinSize)</l>
<l>    tuple_sum (Histo, Sum_Histo)</l>
<c>    * </c>
<l>* # #########################################################</l>
<l>* # ### Mientras mas grabnde menos sensible a cambios #######   </l>
<l>    Mascara := 1</l>
<l>* # ########################################################</l>
<c>    * </c>
<l>    Vector_Distribucion := []</l>
<l>    init_vector := 255</l>
<l>    flag_vector := 0</l>
<l>    aux_suma := 0.0</l>
<c>    * </c>
<l>    for Index := init_vector to 0 by -1</l>
<c>        * </c>
<l>        Vector_Distribucion[Index] := aux_suma+Histo[Index]*100.0/ Sum_Histo</l>
<l>        aux_suma := Vector_Distribucion[Index]</l>
<l>    endfor</l>
<c>    * </c>
<l>    Derivada := []</l>
<l>    Factor_Der := 1000</l>
<l>    Mascara := 3</l>
<l>    for Index := init_vector to 50 by -Mascara</l>
<c>        * </c>
<l>        Derivada[Index] := abs(Vector_Distribucion[Index]-Vector_Distribucion[Index-Mascara])*Factor_Der</l>
<c>        * </c>
<l>    endfor</l>
<c> </c>
<c>    * </c>
<c>    * *********************************************************</c>
<c>    * * Busco el primer cambio brusco de posicion *************</c>
<c>    * * El umbral de cambio es Aux_Val_Max ********************</c>
<c>    * *********************************************************</c>
<c>    * </c>
<l>    Aux_Val_Max := 2000</l>
<l>    Flag_indx_max := 255</l>
<l>    for Index := 0 to 160 by Mascara</l>
<c>        * </c>
<l>        if (Derivada[Index]&gt;Aux_Val_Max)</l>
<l>            Aux_Val_Max := Derivada[Index]</l>
<l>            Flag_indx_max := Index</l>
<l>            break</l>
<l>        endif</l>
<c>        * </c>
<l>    endfor</l>
<c></c>
<c></c>
<c>    * ***********************************************************</c>
<c>    * * Desviacion luego de  detectar el cambio brusco **********</c>
<c>    * ***********************************************************</c>
<c>    * </c>
<l>* # #########################################################</l>
<l>* # ######## Grado de proteccion para moverse entre el </l>
<l>* # ####### histograma</l>
<l>  * index_protection_Inf := 30</l>
<l>  *  index_protection_Sup := 20</l>
<l>* # #########################################################</l>
<c>    * </c>
<l>    Alt_Min := Flag_indx_max-index_protection_Inf</l>
<l>    Alt_Max := Flag_indx_max+index_protection_Sup</l>
<l>    threshold (HeightMap_Scalada, Regions_PattSup, Alt_Min, Alt_Max)</l>
<c>    </c>
<l>    catch (Exception)</l>
<c>        </c>
<c>        </c>
<l>endtry</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="GetMaxAlturaUmbral">
<parameters>
<parameter id="Regions_PattSup"/>
<parameter id="Zm"/>
<parameter id="index_protection_Inf"/>
<parameter id="index_protection_Sup"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_RegionManga">
<interface>
<io>
<par name="PosibleManga1" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="PosibleManga1R" base_type="iconic" dimension="0"/>
</oo>
</interface>
<body>
<l>area_center (PosibleManga1, Area, Row, Column)</l>
<l>select_obj (PosibleManga1, PosibleManga1R, 1)</l>
<l>for Index1 := 1 to |Area| by 1</l>
<c>    </c>
<l>    select_obj (PosibleManga1, ObjectSelected1, Index1)</l>
<l>    union2 (PosibleManga1R, ObjectSelected1, PosibleManga1R)</l>
<l>endfor</l>
<l>return ()</l>
</body>
<docu id="Get_RegionManga">
<parameters>
<parameter id="PosibleManga1"/>
<parameter id="PosibleManga1R"/>
</parameters>
</docu>
</procedure>
<procedure name="GetMaxAlturaUmbralVector">
<interface>
<io>
<par name="Zm" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Regions_PattSup" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="index_protection_Inf" base_type="ctrl" dimension="0"/>
<par name="index_protection_Sup" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c></c>
<c></c>
<c>    * ********************************************************</c>
<c>    * 1.-  !!!!!!!!! threshols dinamico!!!!!!!!!!!!!!!!!!!!!!!!!!</c>
<c>    * ********************************************************</c>
<l>    threshold (Zm, RegZRed, 5, 2000)</l>
<l>    reduce_domain (Zm, RegZRed, ZRed)</l>
<l>    escala := 255.0/2000.0</l>
<l>    scale_image (ZRed, HeightMap_Scalada, escala, 0)</l>
<l>    threshold (HeightMap_Scalada, HeightMap_Region, 0, 255)</l>
<l>    gray_histo_range (HeightMap_Region, HeightMap_Scalada, 0, 255, 256, Histo, BinSize)</l>
<l>    tuple_sum (Histo, Sum_Histo)</l>
<c>    * </c>
<l>* # #########################################################</l>
<l>* # ### Mientras mas grabnde menos sensible a cambios #######   </l>
<l>    Mascara := 1</l>
<l>* # ########################################################</l>
<c>    * </c>
<l>    Vector_Distribucion := []</l>
<l>    init_vector := 255</l>
<l>    flag_vector := 0</l>
<l>    aux_suma := 0.0</l>
<c>    * </c>
<l>    for Index := init_vector to 0 by -1</l>
<c>        * </c>
<l>        Vector_Distribucion[Index] := aux_suma+Histo[Index]*100.0/ Sum_Histo</l>
<l>        aux_suma := Vector_Distribucion[Index]</l>
<l>    endfor</l>
<c>    * </c>
<l>    Derivada := []</l>
<l>    Factor_Der := 1000</l>
<l>    Mascara := 3</l>
<l>    for Index := init_vector to 50 by -Mascara</l>
<c>        * </c>
<l>        Derivada[Index] := abs(Vector_Distribucion[Index]-Vector_Distribucion[Index-Mascara])*Factor_Der</l>
<c>        * </c>
<l>    endfor</l>
<c> </c>
<c>    </c>
<l>    create_funct_1d_array (Derivada, Function)</l>
<c> **   dev_inspect_ctrl (Function)</c>
<c>    * *********************************************************</c>
<c>    * * Busco el primer cambio brusco de posicion *************</c>
<c>    * * El umbral de cambio es Aux_Val_Max ********************</c>
<c>    * *********************************************************</c>
<c>    * </c>
<l>    Aux_Val_Max := 2000</l>
<l>    Flag_indx_max := 255</l>
<l>    for Index := 0 to 160 by Mascara</l>
<c>        * </c>
<l>        if (Derivada[Index]&gt;Aux_Val_Max)</l>
<l>            Aux_Val_Max := Derivada[Index]</l>
<l>            Flag_indx_max := Index</l>
<l>            break</l>
<l>        endif</l>
<c>        * </c>
<l>    endfor</l>
<c></c>
<c></c>
<c>    * ***********************************************************</c>
<c>    * * Desviacion luego de  detectar el cambio brusco **********</c>
<c>    * ***********************************************************</c>
<c>    * </c>
<l>* # #########################################################</l>
<l>* # ######## Grado de proteccion para moverse entre el </l>
<l>* # ####### histograma</l>
<l>  * index_protection_Inf := 30</l>
<l>  *  index_protection_Sup := 20</l>
<l>* # #########################################################</l>
<c>    * </c>
<l>    Alt_Min := Flag_indx_max-index_protection_Inf</l>
<l>    Alt_Max := Flag_indx_max+index_protection_Sup</l>
<l>    threshold (HeightMap_Scalada, Regions_PattSup, Alt_Min, Alt_Max)</l>
<l>return ()</l>
</body>
<docu id="GetMaxAlturaUmbralVector">
<parameters>
<parameter id="Regions_PattSup"/>
<parameter id="Zm"/>
<parameter id="index_protection_Inf"/>
<parameter id="index_protection_Sup"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_CentroManga">
<interface>
<io>
<par name="PosibleManga1" base_type="iconic" dimension="0"/>
<par name="Zma1" base_type="iconic" dimension="0"/>
<par name="Xmc1" base_type="iconic" dimension="0"/>
<par name="Ymb1" base_type="iconic" dimension="0"/>
</io>
<oc>
<par name="CentroManga" base_type="ctrl" dimension="0"/>
<par name="Vector_Centro_Core" base_type="ctrl" dimension="2"/>
</oc>
</interface>
<body>
<l>area_center (PosibleManga1, Area, Row, Column)</l>
<l>select_obj (PosibleManga1, PosibleManga1R, 1)</l>
<c></c>
<l>Vector_Centro_Core:={ { [] } }</l>
<l>Vector_Centro_Core.at(0).at(0):='X'</l>
<l>Vector_Centro_Core.at(0).at(1):='Y'</l>
<l>Vector_Centro_Core.at(0).at(2):='Z'</l>
<c></c>
<l>Vector_Centro_Pituto:={ { [] } }</l>
<l>Vector_Centro_Pituto.at(0).at(0):='X'</l>
<l>Vector_Centro_Pituto.at(0).at(1):='Y'</l>
<l>Vector_Centro_Pituto.at(0).at(2):='Z'</l>
<c></c>
<l>mangasAnalizadas:=|Area|</l>
<c></c>
<l>for Index1 := 1 to |Area| by 1</l>
<c>    </c>
<l>    select_obj (PosibleManga1, ObjectSelected1, Index1)</l>
<c>    ** union2 (PosibleManga1R, ObjectSelected1, PosibleManga1R)</c>
<l>    reduce_domain (Zma1, ObjectSelected1, PmangaZ1)</l>
<c>    </c>
<l>*     GetMaxAlturaUmbral (PmangaZ1, PosibleMangaSprue, 10, 20)</l>
<l>    GetMaxAlturaUmbralVector(PmangaZ1, AlturaManga, 20, 1)</l>
<c>   </c>
<c>    </c>
<l>    connection (AlturaManga, AlturaManga)</l>
<c>    </c>
<l>    select_shape_std (AlturaManga, AlturaManga, 'max_area', 70)</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    reduce_domain (Zma1, AlturaManga, ImgMangaZ)</l>
<l>    reduce_domain (Ymb1, AlturaManga, ImgMangaY)</l>
<l>    reduce_domain (Xmc1, AlturaManga, ImgMangaX)</l>
<c>    </c>
<c>    </c>
<l>    compose3 (Xmc1, Ymb1, Zma1, MultiChannelImage)</l>
<c>    </c>
<l>    xyz_to_object_model_3d (ImgMangaX, ImgMangaY, ImgMangaZ, MangaAltura)</l>
<l>    Parametros_Visualizacion:=['colored','disp_pose','point_size']</l>
<l>    Valores_Visualizacion:= [  12  ,'true',1]</l>
<l> *    Visualizar_3D ([MangaAltura], Parametros_Visualizacion, Valores_Visualizacion, 1, [], [], [], PoseOut1)</l>
<c>    </c>
<l>    smooth_object_model_3d (MangaAltura, 'mls', 'mls_kNN', 400, MangaAltura)</l>
<c>    </c>
<l> *  Visualizar_3D ([MangaAltura], Parametros_Visualizacion, Valores_Visualizacion, 1, [], [], [], PoseOut1)</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    get_object_model_3d_params (MangaAltura, 'center', CentroManga)</l>
<l>    get_object_model_3d_params (MangaAltura, 'bounding_box1', PuntoMasAlto)</l>
<l>    Zseg:=-2</l>
<l>    CentroManga[2]:=PuntoMasAlto[2]+Zseg</l>
<c>    </c>
<c>    </c>
<l>    Vector_Centro_Core.at(Index1).at(0):=CentroManga[0]</l>
<l>    Vector_Centro_Core.at(Index1).at(1):=CentroManga[1]+50</l>
<l>    Vector_Centro_Core.at(Index1).at(2):=CentroManga[2]</l>
<c>  </c>
<c>    </c>
<l>endfor</l>
<l>return ()</l>
</body>
<docu id="Get_CentroManga">
<parameters>
<parameter id="CentroManga"/>
<parameter id="PosibleManga1"/>
<parameter id="Vector_Centro_Core"/>
<parameter id="Xmc1"/>
<parameter id="Ymb1"/>
<parameter id="Zma1"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_MangasMax">
<interface>
<io>
<par name="PosibleManga1" base_type="iconic" dimension="0"/>
<par name="PosibleManga2" base_type="iconic" dimension="0"/>
<par name="PosibleManga3" base_type="iconic" dimension="0"/>
</io>
<oc>
<par name="Max" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>area_center (PosibleManga1, Area1, Row, Column)</l>
<l>area_center (PosibleManga2, Area2, Row, Column)</l>
<l>area_center (PosibleManga3, Area3, Row, Column)</l>
<l>Nmangas[0]:=|Area1|</l>
<l>Nmangas[1]:=|Area2|</l>
<l>Nmangas[2]:=|Area3|</l>
<c></c>
<l>tuple_max (Nmangas, Max)</l>
<l>return ()</l>
</body>
<docu id="Get_MangasMax">
<parameters>
<parameter id="Max"/>
<parameter id="PosibleManga1"/>
<parameter id="PosibleManga2"/>
<parameter id="PosibleManga3"/>
</parameters>
</docu>
</procedure>
<procedure name="Visualizar_3D_COPY_1">
<interface>
<ic>
<par name="Modelo3D" base_type="ctrl" dimension="0"/>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Visualizar" base_type="ctrl" dimension="0"/>
<par name="PoseIn" base_type="ctrl" dimension="0"/>
<par name="Title" base_type="ctrl" dimension="0"/>
<par name="Label" base_type="ctrl" dimension="0"/>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Pose" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* </c>
<l>if (Visualizar)</l>
<l>    visualize_object_model_3d (WindowHandle, [Modelo3D], [], [], Parametros_Visualizacion, Valores_Visualizacion, Title, Label, [], Pose)</l>
<l>endif</l>
<c>* </c>
<l>return ()</l>
</body>
<docu id="Visualizar_3D_COPY_1">
<parameters>
<parameter id="Label"/>
<parameter id="Modelo3D"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="Pose"/>
<parameter id="PoseIn"/>
<parameter id="Title"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="Visualizar"/>
<parameter id="WindowHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Find_Dinamic_Core">
<interface>
<ic>
<par name="N_Model_To_Find" base_type="ctrl" dimension="0"/>
<par name="SFM_Core_Pallet" base_type="ctrl" dimension="0"/>
<par name="ObjectModel3D_Core_Pallet" base_type="ctrl" dimension="0"/>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Modelo_3D_ROI_ThresEdges" base_type="ctrl" dimension="0"/>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Ang_Obj" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="MyPose" base_type="ctrl" dimension="0"/>
<par name="Score_Refinado" base_type="ctrl" dimension="0"/>
<par name="Posicion3D_Objeto_REFIN" base_type="ctrl" dimension="0"/>
<par name="Obj_Detectado" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Angulos := []</l>
<l>Puntaje := []</l>
<c>* </c>
<l>IdexAng := 0</l>
<l>Poses_Finded := { {[]}}</l>
<c>* ***********************************************</c>
<c>* Delta Angular -&gt; +- 30°</c>
<c>* ***********************************************</c>
<l>DeltaAngular := 30</l>
<c>* </c>
<c>* </c>
<c>* </c>
<c>* </c>
<c>* </c>
<l>for KeyPointDin := 0.1 to 1.0 by 0.1</l>
<c>    * </c>
<c>    * </c>
<c>    * ***************************</c>
<c>    * Parametros de control</c>
<c>    * ***************************</c>
<l>    DinamicSampling := 0.0095</l>
<l>    Sampling_Find := (1.0 -KeyPointDin)*DinamicSampling + 0.05</l>
<l>    Keypoint := KeyPointDin</l>
<l>    MinScore := 0.1</l>
<l>    N_matches := N_Model_To_Find</l>
<l>    SFM := SFM_Core_Pallet</l>
<l>    Mod_3D_Objeto := ObjectModel3D_Core_Pallet</l>
<l>    Escena3D := Escena3D_RAW</l>
<c>    * ***************************</c>
<c>    * Si lo que busco es una Manga, Busco el objeto por Bordes</c>
<c>    * ***************************</c>
<l>   *  Visualizar_3D_COPY_1 ([ObjectModel3D_Core_Pallet,Modelo_3D_ROI_ThresEdges,Escena3D_RAW], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], 1, [], [], [], WindowHandle, PoseOut1)</l>
<c>    * ***************************</c>
<c>    * </c>
<l>    Find_Dinamic_Entity_3D (N_matches, SFM, Escena3D, Sampling_Find, Keypoint, MinScore, Mod_3D_Objeto, Modelo_3D_ROI_ThresEdges, MyPose, ScoreMLS, Obj_Detectado)</l>
<c>    * </c>
<l>    if (Obj_Detectado)</l>
<l>        Angulos[IdexAng] := MyPose[5]</l>
<l>        Poses_Finded.at(IdexAng).at(0) := MyPose</l>
<l>        Angulos[IdexAng] := MyPose[5]</l>
<l>        Puntaje[IdexAng] := ScoreMLS</l>
<l>        IdexAng := IdexAng+1</l>
<c>        * </c>
<c>        * </c>
<l>        rigid_trans_object_model_3d (Mod_3D_Objeto, MyPose, Posicion3D_Objeto_REFIN)</l>
<c>        * </c>
<c>        * </c>
<l>        Parametros_Visualizacion := ['disp_pose','color_attrib','lut','point_size']</l>
<l>        Valores_Visualizacion := ['true','coord_z','rainbow',1]</l>
<l>        create_pose (-148, 46, 5000, 0, 0, 0, 'Rp+T', 'gba', 'point', PoseView)</l>
<l>   *      Visualizar_3D_COPY_1 ([Posicion3D_Objeto_REFIN,Escena3D_RAW], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], 1, [], [], [], WindowHandle, PoseOut1)</l>
<c>   </c>
<l>        disp_object_model_3d (WindowHandle, [Posicion3D_Objeto_REFIN,Escena3D_RAW], [], PoseView, [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5])</l>
<l>        dev_disp_text ('Foto - &gt; ' +KeyPointDin*10, 'window', 'top', 'left', 'black', [], [])</l>
<c>        * </c>
<c>        * </c>
<l>    endif</l>
<l>* # ###############################</l>
<c>    * </c>
<l>    if (|Angulos|&gt;0)</l>
<c>        * </c>
<c>        * </c>
<c>        * Convierto a angulos negativos</c>
<c>        * Sobre el limite convierto a Neg</c>
<c>        * **********************************</c>
<l>        LimiteAngular := 200</l>
<c>        * **********************************</c>
<l>        for Index := 0 to |Angulos|-1 by 1</l>
<l>            if (Angulos[Index]&gt;LimiteAngular)</l>
<l>                Angulos[Index] := Angulos[Index]-360</l>
<l>            endif</l>
<l>        endfor</l>
<c>        * </c>
<l>        Dist_Angular := []</l>
<l>        for Index := 0 to |Angulos|-1 by 1</l>
<l>            Dist_Angular[Index] := Ang_Obj-Angulos[Index]</l>
<l>        endfor</l>
<c>        * </c>
<l>        tuple_abs (Dist_Angular, Dist_Angular_abs)</l>
<c>        * </c>
<l>        AuxMenor := Dist_Angular_abs[0]</l>
<l>        flag := 0</l>
<l>        for Index := 0 to |Dist_Angular_abs|-1 by 1</l>
<l>            if (AuxMenor&gt;Dist_Angular_abs[Index])</l>
<l>                AuxMenor := Dist_Angular_abs[Index]</l>
<l>                flag := Index</l>
<l>            endif</l>
<l>        endfor</l>
<c>        * </c>
<c>        * </c>
<c>        * </c>
<l>        if (AuxMenor&lt;=DeltaAngular)</l>
<c>            * </c>
<l>            Obj_Detectado := 1</l>
<l>            MyPose := Poses_Finded.at(flag).at(0)</l>
<l>            Score_Refinado := Puntaje[flag]</l>
<l>            rigid_trans_object_model_3d (Mod_3D_Objeto, MyPose, Posicion3D_Objeto_REFIN)</l>
<c>            * </c>
<l>            create_pose (50, -100, 1690, 352, 0, 0, 'Rp+T', 'gba', 'point', PoseView)</l>
<l>*             disp_object_model_3d (WindowHandle, [Posicion3D_Objeto_REFIN,Escena3D_RAW], [], PoseView, [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,1])</l>
<c>            * </c>
<l>            return ()</l>
<l>        else</l>
<l>            Obj_Detectado := 0</l>
<l>* # ### Envio data de estado ########################</l>
<l>            Estado := 22</l>
<l>            Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* # ################################################# </l>
<c>            * </c>
<c>            * </c>
<l>        endif</l>
<l>    else</l>
<c>        * </c>
<l>        Obj_Detectado := 0</l>
<l>* # ### Envio data de estado ########################</l>
<l>        Estado := 22</l>
<l>        Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* # ################################################# </l>
<c>        * </c>
<l>    endif</l>
<c>    * </c>
<l>* # ###################################################################### </l>
<l>endfor</l>
<c>* </c>
<c>* </c>
<c>* </c>
<c>* </c>
<c>* </c>
<l>return ()</l>
</body>
<docu id="Find_Dinamic_Core">
<parameters>
<parameter id="Ang_Obj"/>
<parameter id="Escena3D_RAW"/>
<parameter id="Modelo_3D_ROI_ThresEdges"/>
<parameter id="MyPose"/>
<parameter id="N_Model_To_Find"/>
<parameter id="Obj_Detectado"/>
<parameter id="ObjectModel3D_Core_Pallet"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="Posicion3D_Objeto_REFIN"/>
<parameter id="SFM_Core_Pallet"/>
<parameter id="Score_Refinado"/>
<parameter id="SerialHandle"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="WindowHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Find_Dinamic_Entity_3D">
<interface>
<ic>
<par name="N_matches" base_type="ctrl" dimension="0"/>
<par name="SFM" base_type="ctrl" dimension="0"/>
<par name="Modelo_imagen_3d" base_type="ctrl" dimension="0"/>
<par name="Sampling_Find" base_type="ctrl" dimension="0"/>
<par name="Keypoint" base_type="ctrl" dimension="0"/>
<par name="MinScore" base_type="ctrl" dimension="0"/>
<par name="Perno_Ref_Cam0" base_type="ctrl" dimension="0"/>
<par name="Modelo_3D_ROI_ThresEdges" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="PoseMLS" base_type="ctrl" dimension="0"/>
<par name="ScoreMLS" base_type="ctrl" dimension="0"/>
<par name="Estado_Funcion" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* </c>
<l>Estado_Funcion := true</l>
<l>try</l>
<c>    * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = "Buscando Objeto";</c>
<c>    * </c>
<c>    * ***************************************</c>
<c>    * 1.Parametros de control</c>
<c>    * ***************************************</c>
<l>    GenParamName := ['num_matches','scene_normal_computation','pose_ref_scoring_dist_rel','score_type'          ,'3d_edges'              , '3d_edge_min_amplitude_abs','max_gap','viewpoint']</l>
<l>    GenParamValue := [N_matches   ,          'mls'           ,   0.01                    ,'model_point_fraction', Modelo_3D_ROI_ThresEdges, 13.7313                   ,  30     , '0 0 0']</l>
<l>    GenParamName := ['num_matches']</l>
<l>    GenParamValue := [N_matches   ]</l>
<c>    * </c>
<c>    * ***************************************</c>
<c>    * 2.Busqueda de entidad</c>
<c>    * ***************************************</c>
<l>    find_surface_model (SFM, Modelo_imagen_3d, Sampling_Find, Keypoint, MinScore, 'true', GenParamName, GenParamValue, PoseMLS, ScoreMLS, SurfaceMatchingResultID1)</l>
<c>    * ***************************************</c>
<l>    if (|PoseMLS|)</l>
<c>        * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = "Objeto encontrado con una PROBABILIDAD de " + hv_ScoreMLS*100.ToString() ;</c>
<l>        Estado_Funcion := true</l>
<l>        return ()</l>
<c>        * </c>
<l>    endif</l>
<c>    * </c>
<l>    Estado_Funcion := false</l>
<l>catch (Exception)</l>
<c>    * </c>
<l>    Estado_Funcion := false</l>
<c>    * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = Fx_Aux.ErrorCatch(HDevExpDefaultException1);</c>
<c>    * </c>
<l>endtry</l>
<c>* </c>
<c>* </c>
<l>return ()</l>
</body>
<docu id="Find_Dinamic_Entity_3D">
<parameters>
<parameter id="Estado_Funcion"/>
<parameter id="Keypoint"/>
<parameter id="MinScore"/>
<parameter id="Modelo_3D_ROI_ThresEdges"/>
<parameter id="Modelo_imagen_3d"/>
<parameter id="N_matches"/>
<parameter id="Perno_Ref_Cam0"/>
<parameter id="PoseMLS"/>
<parameter id="SFM"/>
<parameter id="Sampling_Find"/>
<parameter id="ScoreMLS"/>
</parameters>
</docu>
</procedure>
<procedure name="CALIBRACIONdeCAMARAfina">
<interface>
<ic>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera_3" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c></c>
<c></c>
<c></c>
<l>* #########################################################################</l>
<c>* Configuracion de Parametros</c>
<l>MinimumDisparity_Cam1:=-17</l>
<l>NumberOfDisparities_Cam1:= 32</l>
<l>Projector:='true'</l>
<l>FrontLigth:='true'</l>
<l>AutoExposure:='true'</l>
<l>AutoGain:='true'</l>
<l>Exposure := 1.8</l>
<l>Gain:=1</l>
<l>FlexView:=8</l>
<l>Config_Parametros_Cam_R1 (NxLib, Camera_3, NumberOfDisparities_Cam1, MinimumDisparity_Cam1, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure, FlexView, TempCam)</l>
<c></c>
<c></c>
<l>Get_Img_Camera_R2 (ModelImage, Xm, Ym, Zm, ImgLeftCamera_1, NxLib, Camera_3, Escena3D_RAW)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>reduce_domain (Zm, ROI_0, ImageReduced2)</l>
<c></c>
<l>gen_circle (ROI_0, 525.214, 620.419, 134.326)</l>
<c></c>
<l>xyz_to_object_model_3d (Xm, Ym, ImageReduced2, Escena3D_RAW)</l>
<l>N_Model_To_Find:=1</l>
<l>edges_object_model_3d (Escena3D_RAW, 0.005, [], [], Modelo_3D_ROI_ThresEdges)</l>
<l>* ###################################################################</l>
<l>* ################################################################### </l>
<l>dev_get_window (WindowHandle)</l>
<l>            Ang_Obj:=0</l>
<c>            </c>
<l>            read_object_model_3d ('D:/AI/Vision Artificial/4.-MAGOTTEAUX/SFM_Cores/CLRcalib/CLRcalib_3D.stl', 1, [], [], ObjectModel3D_Core_Pallet, Status1)</l>
<c>            </c>
<l>            read_surface_model ('D:/AI/Vision Artificial/4.-MAGOTTEAUX/SFM_Cores/CLRcalib/CLRcalib_SFM.sfm', SFM_Core_Pallet)</l>
<c>            </c>
<c>            </c>
<l>            Find_Dinamic_Core (N_Model_To_Find, SFM_Core_Pallet, ObjectModel3D_Core_Pallet, Escena3D_RAW, Vector_Estado_Fx, SerialHandle, \
                               Modelo_3D_ROI_ThresEdges, WindowHandle, Parametros_Visualizacion, Valores_Visualizacion, Ang_Obj, PoseMLS,\
                               Score_Refinado, Posicion3D_Objeto_REFIN, Obj_Detectado)</l>
<l>* ###################################################################</l>
<l>* ###################################################################</l>
<c></c>
<c>            </c>
<l>            Send_Data_To_Robot (PoseMLS, SerialHandle)</l>
<l>return ()</l>
<c></c>
</body>
<docu id="CALIBRACIONdeCAMARAfina">
<parameters>
<parameter id="Camera_3"/>
<parameter id="NxLib"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="SerialHandle"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="Vector_Estado_Fx"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Img_Camera_R1">
<interface>
<oo>
<par name="ModelImage" base_type="iconic" dimension="0"/>
<par name="Xm" base_type="iconic" dimension="0"/>
<par name="Ym" base_type="iconic" dimension="0"/>
<par name="Zm" base_type="iconic" dimension="0"/>
<par name="ImgLeftCamera" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib_1" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Adq_Imagen (ModelImage, NxLib_1, Camera_1)</l>
<l>Adq_XYZ_Img (ModelImage, Xm, Ym, Zm)</l>
<l>select_obj (ModelImage, ImgLeftCamera, 1)</l>
<l>xyz_to_object_model_3d (Xm, Ym, Zm, Escena3D_RAW)</l>
<c>* </c>
<l>return ()</l>
</body>
<docu id="Get_Img_Camera_R1">
<parameters>
<parameter id="Camera_1"/>
<parameter id="Escena3D_RAW"/>
<parameter id="ImgLeftCamera"/>
<parameter id="ModelImage"/>
<parameter id="NxLib_1"/>
<parameter id="Xm"/>
<parameter id="Ym"/>
<parameter id="Zm"/>
</parameters>
</docu>
</procedure>
<procedure name="Silple_Orientation">
<interface>
<io>
<par name="IMGris" base_type="iconic" dimension="0"/>
<par name="Zobj1" base_type="iconic" dimension="0"/>
</io>
<oc>
<par name="Deg" base_type="ctrl" dimension="0"/>
<par name="Deg2" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>gen_rectangle1 (ROI_0, 10.5239, 4.60367, 387.787, 233.248)</l>
<l>reduce_domain (IMGris, ROI_0, ImageReduced)</l>
<l>threshold (ImageReduced, Regions, 141, 207)</l>
<l>connection (Regions, ConnectedRegions)</l>
<l>select_shape_std (ConnectedRegions, SelectedRegions, 'max_area', 70)</l>
<c>* </c>
<l>shape_trans (SelectedRegions, RegionTrans, 'rectangle2')</l>
<c>* </c>
<l>gen_image_proto (Zobj1, Img1, 10)</l>
<l>gen_image_proto (Zobj1, Img2, 150)</l>
<l>reduce_domain (Img2, RegionTrans, ImageReduced2)</l>
<c>* </c>
<l>add_image (Img1, ImageReduced2, ImageResult, 1, 100)</l>
<l>paint_gray (ImageReduced2, Img1, MixedImage)</l>
<l>corner_response (MixedImage, ImageCorner, 3, 0.04)</l>
<c>* </c>
<c>* </c>
<c>* </c>
<l>threshold (ImageCorner, Regions2, 1000, 5000)</l>
<c>* </c>
<l>reduce_domain (ImageCorner, Regions2, ImageCorner)</l>
<c>* </c>
<l>local_max (ImageCorner, LocalMaxima1)</l>
<l>connection (LocalMaxima1, ConnectedRegions1)</l>
<l>area_center (ConnectedRegions1, Area1, RowToFind, ColumToFind)</l>
<l>get_grayval (ImageCorner, RowToFind, ColumToFind, Grayval)</l>
<l>create_funct_1d_array (Grayval, Function)</l>
<l>* dev_inspect_ctrl (Function)</l>
<c>* </c>
<l>get_image_size (ImageCorner, Width, Height)</l>
<c>* </c>
<l>Get_EsquinasPattern (Grayval, RowToFind, ColumToFind, Width, FilaPattern, ColumnasPattern, Ptr_Min, Ptr_Min2, Ptr_Min3, EsquinaDetectadas)</l>
<c>* </c>
<c>* </c>
<l>disp_cross (200000, RowToFind[0], ColumToFind[0], 6, 0)</l>
<l>disp_cross (200000, RowToFind[1], ColumToFind[1], 6, 0)</l>
<c>* </c>
<c>* </c>
<c>* </c>
<l>angle_lx (RowToFind[1], ColumToFind[1], RowToFind[0], ColumToFind[0], Angle)</l>
<c>* </c>
<l>angle_lx (RowToFind[0], ColumToFind[0], RowToFind[1], ColumToFind[1], Angle2)</l>
<c>* </c>
<l>tuple_deg (Angle, Deg)</l>
<l>tuple_deg (Angle2, Deg2)</l>
<c>* </c>
<l>dev_disp_text (Deg2, 'window', RowToFind[0], ColumToFind[0], 'black', [], [])</l>
<l>return ()</l>
</body>
<docu id="Silple_Orientation">
<parameters>
<parameter id="Deg"/>
<parameter id="Deg2"/>
<parameter id="IMGris"/>
<parameter id="Zobj1"/>
</parameters>
</docu>
</procedure>
<procedure name="get_dinamic_Image">
<interface>
<oo>
<par name="ModelImage" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
<par name="Z" base_type="iconic" dimension="0"/>
<par name="ImgLeftCamera" base_type="iconic" dimension="0"/>
<par name="Gris" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib_1" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="NumberOfDisparities_Cam1" base_type="ctrl" dimension="0"/>
<par name="MinimumDisparity_Cam1" base_type="ctrl" dimension="0"/>
<par name="Projector" base_type="ctrl" dimension="0"/>
<par name="FrontLigth" base_type="ctrl" dimension="0"/>
<par name="AutoExposure" base_type="ctrl" dimension="0"/>
<par name="AutoGain" base_type="ctrl" dimension="0"/>
<par name="Gain" base_type="ctrl" dimension="0"/>
<par name="Exposure" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>MinimumDisparity_Cam1Out := MinimumDisparity_Cam1</l>
<l>NumberOfDisparities_Cam1Out := NumberOfDisparities_Cam1</l>
<l>FlexView:=1</l>
<l>Config_Parametros_Cam_R1 (NxLib_1, Camera_1, NumberOfDisparities_Cam1Out, MinimumDisparity_Cam1Out, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure, FlexView, TempCam)</l>
<l>Get_Img_Camera_R2 (ModelImage, X, Y, Z, ImgLeftCamera, NxLib_1, Camera_1, Escena3D_RAW)</l>
<c></c>
<c></c>
<c></c>
<l>* #####################################################</l>
<l>set_framegrabber_param (NxLib_1, 'do_execute', 'EstimateDisparitySettings')</l>
<l>get_framegrabber_param (NxLib_1, '//Execute/Default/Result/182681/MinimumDisparity', MinimumDisparity_Cam1Out)</l>
<l>get_framegrabber_param (NxLib_1, '//Execute/Default/Result/182681/NumberOfDisparities', NumberOfDisparities_Cam1Out)</l>
<l>* #####################################################</l>
<l>FlexView:=2</l>
<l>Config_Parametros_Cam_R1 (NxLib_1, Camera_1, NumberOfDisparities_Cam1Out, MinimumDisparity_Cam1Out, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure, FlexView, TempCam)</l>
<l>Get_Img_Camera_R2 (ModelImage, X, Y, Z, ImgLeftCamera, NxLib_1, Camera_1, Escena3D_RAW)</l>
<l>Get_Img_Camera_R2 (ModelImage, X, Y, Z, ImgLeftCamera, NxLib_1, Camera_1, Escena3D_RAW)</l>
<c></c>
<c></c>
<c></c>
<l>Projector:='false'</l>
<l>FlexView:=1</l>
<l>Gain:=5</l>
<l>FlexView:=1</l>
<l>Exposure:=10</l>
<l>Config_Parametros_Cam_R1 (NxLib_1, Camera_1, NumberOfDisparities_Cam1Out, MinimumDisparity_Cam1Out, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure, FlexView, TempCam)</l>
<l>Get_Img_Camera_R2 (Gris, X2, Y2, Z2, ImgLeftCamera2, NxLib_1, Camera_1, Escena3D_RAW2)</l>
<c></c>
<c></c>
<l>Exposure:=2</l>
<l>Config_Parametros_Cam_R1_COPY_1 (NxLib_1, Camera_1, NumberOfDisparities_Cam1Out, MinimumDisparity_Cam1Out, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure, FlexView, TempCam)</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="get_dinamic_Image">
<parameters>
<parameter id="AutoExposure"/>
<parameter id="AutoGain"/>
<parameter id="Camera_1"/>
<parameter id="Exposure"/>
<parameter id="FrontLigth"/>
<parameter id="Gain"/>
<parameter id="Gris"/>
<parameter id="ImgLeftCamera"/>
<parameter id="MinimumDisparity_Cam1"/>
<parameter id="ModelImage"/>
<parameter id="NumberOfDisparities_Cam1"/>
<parameter id="NxLib_1"/>
<parameter id="Projector"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_matrixOfData">
<interface>
<ic>
<par name="EsquinaSupIzquierda" base_type="ctrl" dimension="0"/>
<par name="Largo_Pattern" base_type="ctrl" dimension="0"/>
<par name="Ancho_Pattern" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Vector_BD_Core" base_type="ctrl" dimension="2"/>
</oc>
</interface>
<body>
<c></c>
<l>Vector_BD_Core:={ { [] } }</l>
<l>Vector_BD_Core.at(0).at(0):='Tipo'</l>
<l>Vector_BD_Core.at(0).at(1):='X'</l>
<l>Vector_BD_Core.at(0).at(2):='Y'</l>
<l>Vector_BD_Core.at(0).at(3):='Z'</l>
<l>Vector_BD_Core.at(0).at(4):='C'</l>
<l>Vector_BD_Core.at(0).at(5):='B'</l>
<l>Vector_BD_Core.at(0).at(6):='A'</l>
<c></c>
<l>Index:=1</l>
<l>Vector_BD_Core.at(Index).at(0):='Base Esquina Izquierda'</l>
<l>Vector_BD_Core.at(Index).at(1):=EsquinaSupIzquierda[0]</l>
<l>Vector_BD_Core.at(Index).at(2):=EsquinaSupIzquierda[1]</l>
<l>Vector_BD_Core.at(Index).at(3):=EsquinaSupIzquierda[2]</l>
<l>Vector_BD_Core.at(Index).at(4):=0</l>
<l>Vector_BD_Core.at(Index).at(5):=0</l>
<l>Vector_BD_Core.at(Index).at(6):=0</l>
<c></c>
<l>Index:=2</l>
<l>Vector_BD_Core.at(Index).at(0):='Largo Pattern'</l>
<l>Vector_BD_Core.at(Index).at(1):=0</l>
<l>Vector_BD_Core.at(Index).at(2):=Largo_Pattern[1]</l>
<l>Vector_BD_Core.at(Index).at(3):=0</l>
<l>Vector_BD_Core.at(Index).at(4):=0</l>
<l>Vector_BD_Core.at(Index).at(5):=0</l>
<l>Vector_BD_Core.at(Index).at(6):=0</l>
<c></c>
<c></c>
<l>Index:=2</l>
<l>Vector_BD_Core.at(Index).at(0):='Ancho Pattern'</l>
<l>Vector_BD_Core.at(Index).at(1):=0</l>
<l>Vector_BD_Core.at(Index).at(2):=Ancho_Pattern</l>
<l>Vector_BD_Core.at(Index).at(3):=0</l>
<l>Vector_BD_Core.at(Index).at(4):=0</l>
<l>Vector_BD_Core.at(Index).at(5):=0</l>
<l>Vector_BD_Core.at(Index).at(6):=0</l>
<l>return ()</l>
</body>
<docu id="Get_matrixOfData">
<parameters>
<parameter id="Ancho_Pattern"/>
<parameter id="EsquinaSupIzquierda"/>
<parameter id="Largo_Pattern"/>
<parameter id="Vector_BD_Core"/>
</parameters>
</docu>
</procedure>
<procedure name="MagsTotales3D">
<interface>
<io>
<par name="Objeto_1" base_type="iconic" dimension="0"/>
<par name="PosibleManga1R" base_type="iconic" dimension="0"/>
<par name="Objeto_2" base_type="iconic" dimension="0"/>
<par name="PosibleManga2R" base_type="iconic" dimension="0"/>
<par name="Objeto_3" base_type="iconic" dimension="0"/>
<par name="PosibleManga3R" base_type="iconic" dimension="0"/>
<par name="PosibleSprue1R" base_type="iconic" dimension="0"/>
<par name="PosibleSprue2R" base_type="iconic" dimension="0"/>
<par name="PosibleSprue3R" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="mangasF1" base_type="iconic" dimension="0"/>
<par name="mangasF2" base_type="iconic" dimension="0"/>
<par name="mangasF3" base_type="iconic" dimension="0"/>
<par name="xa" base_type="iconic" dimension="0"/>
<par name="ya" base_type="iconic" dimension="0"/>
<par name="za" base_type="iconic" dimension="0"/>
<par name="xb" base_type="iconic" dimension="0"/>
<par name="yb" base_type="iconic" dimension="0"/>
<par name="zb" base_type="iconic" dimension="0"/>
<par name="xc" base_type="iconic" dimension="0"/>
<par name="yc" base_type="iconic" dimension="0"/>
<par name="zc" base_type="iconic" dimension="0"/>
<par name="Xmanga" base_type="iconic" dimension="0"/>
<par name="Ymanga" base_type="iconic" dimension="0"/>
<par name="Zmanga" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
<par name="Vector_BD_Core" base_type="ctrl" dimension="2"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Pose_Robot" base_type="ctrl" dimension="2"/>
</ic>
<oc>
<par name="MangasTotales" base_type="ctrl" dimension="0"/>
<par name="Vector_BD_Core_New" base_type="ctrl" dimension="2"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<c></c>
<l>Pose_1:=Pose_Robot.at(0).at(0)</l>
<l>Pose_2:=Pose_Robot.at(1).at(0)</l>
<l>Pose_3:=Pose_Robot.at(2).at(0)</l>
<c></c>
<c></c>
<c></c>
<l>DeltaX:=Pose_2[1]-Pose_1[1]</l>
<l>* DeltaX:=500</l>
<l>reduce_domain (Objeto_1, PosibleManga1R, mangasF1)</l>
<l>reduce_domain (Objeto_2, PosibleManga2R, mangasF2)</l>
<l>reduce_domain (Objeto_3, PosibleManga3R, mangasF3)</l>
<c></c>
<l>decompose3 (mangasF1, xa, ya, za)</l>
<l>decompose3 (mangasF2, xb, yb, zb)</l>
<l>decompose3 (mangasF3, xc, yc, zc)</l>
<c></c>
<c>****************************************</c>
<c>* Segmento solo circulos de las mangas</c>
<c>****************************************</c>
<c></c>
<l>GetMaxAlturaUmbral (za, PosibleMangas_F1, 30, 2)</l>
<l>GetMaxAlturaUmbral (zb, PosibleMangas_F2, 30, 2)</l>
<l>GetMaxAlturaUmbral (zc, PosibleMangas_F3, 30, 2)</l>
<c></c>
<l>try</l>
<c>    </c>
<c>    </c>
<l>    Get_Exist_Image (PosibleMangas_F1, Existe_F1)</l>
<l>    Get_Exist_Image (PosibleMangas_F2, Existe_F2)</l>
<l>    Get_Exist_Image (PosibleMangas_F3, Existe_F3)</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>catch (Exception)</l>
<l>endtry</l>
<c></c>
<l>try</l>
<c>    </c>
<c>    </c>
<l>    reduce_domain (za, PosibleMangas_F1, za)</l>
<c>    </c>
<l>catch (Exception)</l>
<l>endtry</l>
<c></c>
<l>try</l>
<l>    reduce_domain (zb, PosibleMangas_F2, zb)</l>
<c>    </c>
<l>catch (Exception)</l>
<l>endtry</l>
<c></c>
<l>try</l>
<l>    reduce_domain (zc, PosibleMangas_F3, zc)</l>
<c>    </c>
<l>catch (Exception)</l>
<l>endtry</l>
<c></c>
<c></c>
<c></c>
<c>****************************************</c>
<c></c>
<l>try</l>
<c>    </c>
<l>    xyz_to_object_model_3d (xa, ya, za, ObjectModel3Da)</l>
<c>    </c>
<l>catch (Exception)</l>
<l>endtry</l>
<c></c>
<l>try</l>
<c>    </c>
<l>    xyz_to_object_model_3d (xb, yb, zb, ObjectModel3Db)</l>
<c>    </c>
<l>catch (Exception)</l>
<l>endtry</l>
<c></c>
<c></c>
<l>try</l>
<c>    </c>
<l>    xyz_to_object_model_3d (xc, yc, zc, ObjectModel3Dc)</l>
<c>    </c>
<l>catch (Exception)</l>
<l>endtry</l>
<c></c>
<c></c>
<c></c>
<l>create_pose (-DeltaX, 0, 0, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose)</l>
<l>create_pose (-DeltaX*2, 0, 0, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose2)</l>
<l>rigid_trans_object_model_3d (ObjectModel3Db, Pose, ObjectModel3Db)</l>
<c></c>
<l>rigid_trans_object_model_3d (ObjectModel3Dc, Pose2, ObjectModel3Dc)</l>
<c></c>
<l>union_object_model_3d ([ObjectModel3Da,ObjectModel3Db,ObjectModel3Dc], 'points_surface', MangasTotales)</l>
<l>smooth_object_model_3d (MangasTotales, 'mls', 'mls_kNN', 50, MangasTotales)</l>
<l>* Visualizar_3D_COPY_1 (MangasTotales, Parametros_Visualizacion, Valores_Visualizacion, 1, [], [], [], WindowHandle, PoseOut1)</l>
<c></c>
<c></c>
<c>*********************************************************</c>
<c>*Extraigo desde la BDD en numero de mangas a buscar</c>
<c>* y el nombre de las mangas</c>
<c>*********************************************************</c>
<c></c>
<l>smooth_object_model_3d (MangasTotales, 'mls', 'mls_kNN', 50, MangasTotales)</l>
<c></c>
<l>* Visualizar_3D_COPY_1 (MangasTotales, Parametros_Visualizacion, Valores_Visualizacion, 1, [], [], [], WindowHandle, PoseOut1)</l>
<c></c>
<c>********************************************************</c>
<c></c>
<l>get_image_size (za, Width, Height)</l>
<l>get_image_size (za, WidthOrg, HeightOrg)</l>
<c></c>
<c></c>
<c></c>
<c>*******************************</c>
<c>* genero Imagen completa del 3D</c>
<c>*******************************</c>
<l>Nfotos:=2</l>
<l>Width:=Width*Nfotos</l>
<l>Height:=Height*Nfotos</l>
<c></c>
<l>* gen_cam_par_area_scan_polynomial (5.9/1000.0, 0, 0, 0, 0, 0, 5.3e-006, 5.3e-006, WidthOrg/2, HeightOrg/2, WidthOrg, Height, CameraParam)</l>
<l>gen_cam_par_area_scan_polynomial (5.9/1000.0, 0, 0, 0, 0, 0, 5.3e-006, 5.3e-006, Nfotos*WidthOrg/2, HeightOrg/2, Width, HeightOrg, CameraParam)</l>
<c></c>
<l>create_pose (0, 0, 0, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose1)</l>
<l>object_model_3d_to_xyz (Xm, Ym, Zm, MangasTotales, 'cartesian', CameraParam, Pose1)</l>
<c></c>
<c></c>
<c>**********************************************</c>
<l>UmbralMin:=600</l>
<l>UmbralMax:=1600</l>
<l>threshold (Zm, PosibleMangaSprue, UmbralMin, UmbralMax)</l>
<l>reduce_domain (Zm, PosibleMangaSprue, Zm)</l>
<c></c>
<c></c>
<l>GetMaxAlturaUmbral (Zm, PosibleMangaSprue, 30, 20)</l>
<c></c>
<c></c>
<c>********************************************************</c>
<l>connection (PosibleMangaSprue, ConnectedRegions)</l>
<l>dilation_circle (ConnectedRegions, ConnectedRegions, 3)</l>
<c></c>
<l>select_shape (ConnectedRegions, SelectedRegions, 'area', 'and', 5000, 105000)</l>
<l>select_shape (SelectedRegions, PosibleSprue, ['rectangularity','struct_factor'], 'and', [0.8,0.05], [1,0.5])</l>
<l>select_shape (SelectedRegions, PosibleManga, ['struct_factor'], 'and', [0.1], [5.5])</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>fill_up (PosibleManga, PosibleManga)</l>
<c></c>
<l>select_shape (PosibleManga, PosibleManga, ['circularity'], 'and', [0.6], [1])</l>
<c></c>
<c></c>
<c></c>
<l>union2 (PosibleSprue, PosibleManga, PosibleMangaSprue)</l>
<l>area_center (PosibleManga, Nmangas, Row, Column)</l>
<c></c>
<c></c>
<l>reduce_domain (Zm, PosibleMangaSprue, Zred)</l>
<l>reduce_domain (Ym, PosibleMangaSprue, Yred)</l>
<l>reduce_domain (Xm, PosibleMangaSprue, Xred)</l>
<l>xyz_to_object_model_3d (Xred, Yred, Zred, Escena3D)</l>
<c></c>
<c></c>
<c>**smooth_object_model_3d (MangasTotales, 'mls', 'mls_kNN', 100, ObjectModel3DID)</c>
<c></c>
<c></c>
<l>Get_RegionManga (PosibleMangaSprue, PosibleManga1R)</l>
<l>Get_CentroManga (PosibleManga, Zm, Xm, Ym, CentroManga, Vector_Centro_Core)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>IndexBD:=4</l>
<l>for IndexBD := IndexBD to (IndexBD+|Nmangas|-1) by 1</l>
<c>    </c>
<l>    Vector_BD_Core.at(IndexBD).at(0):='Sleeve '</l>
<l>    Vector_BD_Core.at(IndexBD).at(1):=Vector_Centro_Core.at(IndexBD-3).at(0)</l>
<l>    Vector_BD_Core.at(IndexBD).at(2):=Vector_Centro_Core.at(IndexBD-3).at(1)</l>
<l>    Vector_BD_Core.at(IndexBD).at(3):=Vector_Centro_Core.at(IndexBD-3).at(2)</l>
<l>    Vector_BD_Core.at(IndexBD).at(4):=0</l>
<l>    Vector_BD_Core.at(IndexBD).at(5):=0</l>
<l>    Vector_BD_Core.at(IndexBD).at(6):=0</l>
<c>    </c>
<l>endfor</l>
<c></c>
<c></c>
<c></c>
<c>****************************************************************</c>
<c>*  SPRUES</c>
<c>****************************************************************</c>
<l>Vector_PuntosSprues:={ { [] } }</l>
<l>Vector_PuntosSprues.at(0).at(0):='X'</l>
<l>Vector_PuntosSprues.at(0).at(1):='Y'</l>
<l>Vector_PuntosSprues.at(0).at(2):='Z'</l>
<l>Angulo:=[]</l>
<c></c>
<l>clear_object_model_3d ([ObjectModel3Da,ObjectModel3Db,ObjectModel3Dc,MangasTotales])</l>
<c></c>
<l>reduce_domain (Objeto_1, PosibleSprue1R, sprueF1)</l>
<l>reduce_domain (Objeto_2, PosibleSprue2R, sprueF2)</l>
<l>reduce_domain (Objeto_3, PosibleSprue3R, sprueF3)</l>
<c></c>
<c></c>
<l>reduce_domain (Objeto_1, sprueF1, SP_F1)</l>
<l>reduce_domain (Objeto_2, sprueF2, SP_F2)</l>
<l>reduce_domain (Objeto_3, sprueF3, SP_F3)</l>
<c></c>
<c></c>
<c></c>
<l>try</l>
<c>    </c>
<c>    </c>
<l>    reduce_domain (sprueF1, SP_F1, Sp_1HD)</l>
<c>    </c>
<l>catch (Exception)</l>
<l>endtry</l>
<c></c>
<l>try</l>
<l>    reduce_domain (sprueF2, SP_F2, Sp_2HD)</l>
<c>    </c>
<l>catch (Exception)</l>
<l>endtry</l>
<c></c>
<l>try</l>
<l>    reduce_domain (sprueF3, SP_F3, Sp_3HD)</l>
<c>    </c>
<l>catch (Exception)</l>
<l>endtry</l>
<c></c>
<l>decompose3 (Sp_1HD, xsp1, ysp1, zsp1)</l>
<l>decompose3 (Sp_2HD, xsp2, ysp2, zsp2)</l>
<l>decompose3 (Sp_3HD, xsp3, ysp3, zsp3)</l>
<c></c>
<l>xyz_to_object_model_3d (xsp1, ysp1, zsp1, ObjectModel3D_SP1)</l>
<l>xyz_to_object_model_3d (xsp2, ysp2, zsp2, ObjectModel3D_SP2)</l>
<l>xyz_to_object_model_3d (xsp3, ysp3, zsp3, ObjectModel3D_SP3)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>create_pose (-DeltaX, 0, 0, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose)</l>
<l>create_pose (-DeltaX*2, 0, 0, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose2)</l>
<l>rigid_trans_object_model_3d (ObjectModel3D_SP2, Pose, ObjectModel3D_SP2_trans)</l>
<l>rigid_trans_object_model_3d (ObjectModel3D_SP3, Pose2, ObjectModel3D_SP3_trans)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>union_object_model_3d ([ObjectModel3D_SP1,ObjectModel3D_SP2_trans,ObjectModel3D_SP3_trans], 'points_surface', SpruesTotales)</l>
<l>smooth_object_model_3d (SpruesTotales, 'mls', 'mls_kNN', 50, SpruesTotales)</l>
<c></c>
<c></c>
<l>create_pose (0, 0, 0, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose1)</l>
<l>object_model_3d_to_xyz (Xm, Ym, Zm, SpruesTotales, 'cartesian', CameraParam, Pose1)</l>
<c></c>
<c></c>
<c></c>
<l>threshold (Zm, PosibleMangaSprue, UmbralMin, UmbralMax)</l>
<l>reduce_domain (Zm, PosibleMangaSprue, Zm)</l>
<c></c>
<c></c>
<l>connection (PosibleMangaSprue, ConnectedRegions1)</l>
<c></c>
<l>select_shape (ConnectedRegions1, SelectedRegions1, 'area', 'and', 10000, 99999)</l>
<l>select_shape (SelectedRegions1, ConnectedRegions1, 'rectangularity', 'and', 0.7, 1)</l>
<c></c>
<l>area_center (ConnectedRegions1, Nelementos, Row1, Column1)</l>
<c></c>
<l>for IndexSprue := 1 to |Nelementos| by 1</l>
<c>    </c>
<l>    select_obj (ConnectedRegions1, PosibleSprue1R, IndexSprue)</l>
<c>    </c>
<l>    shape_trans (PosibleSprue1R, PosibleSprueMax, 'rectangle2')</l>
<c>    </c>
<l>    region_features (PosibleSprueMax, 'phi', Value)</l>
<l>    tuple_deg (Value, AnguloDeg)</l>
<c></c>
<l>    dilation_rectangle1 (PosibleSprueMax, PosibleSprueMax, 11,11)</l>
<c>  </c>
<l>    connection (PosibleSprueMax, SpruesPosibles)</l>
<l>    select_shape (SpruesPosibles, PosibleSprue, 'rectangularity', 'and', 0.9, 1)</l>
<l>    select_shape (PosibleSprue, PosibleSprue, 'struct_factor', 'and', 0, 2)</l>
<l>*     select_shape (PosibleSprue, PosibleSprue, 'width', 'and', 150, 220)</l>
<c>    </c>
<c>    </c>
<l>    area_center (PosibleSprue, Nesprues, Row, Column)</l>
<l>    dev_get_window (WindowHandle1)</l>
<l>    disp_cross (WindowHandle1, Row, Column, 50, 0)</l>
<c>    </c>
<c>    </c>
<l>    compose3 (Xm, Ym, Zm, CentroSprue)</l>
<l>    get_grayval (CentroSprue, Row, Column, PuntosSprues)</l>
<c>    </c>
<c>  </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c></c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    Vector_PuntosSprues.at(IndexSprue).at(0):=PuntosSprues[0]</l>
<l>    Vector_PuntosSprues.at(IndexSprue).at(1):=PuntosSprues[1]</l>
<l>    Vector_PuntosSprues.at(IndexSprue).at(2):=PuntosSprues[2]</l>
<l>    Vector_PuntosSprues.at(IndexSprue).at(3):=AnguloDeg</l>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<l>endfor</l>
<c></c>
<c></c>
<l>    AuxIndexBd:=IndexBD</l>
<l>    IndexBD:=AuxIndexBd</l>
<c>    </c>
<l>for IndexBD := IndexBD to (IndexBD+|Nesprues|) by 1</l>
<c>    </c>
<l>    IndexDinamico:=IndexBD-(AuxIndexBd-1)</l>
<c>  </c>
<c>    </c>
<l>    Vector_BD_Core.at(IndexBD).at(0):='Sprue '</l>
<l>    Vector_BD_Core.at(IndexBD).at(1):= Vector_PuntosSprues.at(IndexBD-(AuxIndexBd-1)).at(IndexBD-(AuxIndexBd-1)-IndexDinamico)</l>
<l>    Vector_BD_Core.at(IndexBD).at(2):= Vector_PuntosSprues.at(IndexBD-(AuxIndexBd-1)).at(IndexBD-(AuxIndexBd-2)-IndexDinamico)</l>
<l>    Vector_BD_Core.at(IndexBD).at(3):= Vector_PuntosSprues.at(IndexBD-(AuxIndexBd-1)).at(IndexBD-(AuxIndexBd-3)-IndexDinamico)</l>
<l>    Vector_BD_Core.at(IndexBD).at(4):=0</l>
<l>    Vector_BD_Core.at(IndexBD).at(5):=0</l>
<l>    Vector_BD_Core.at(IndexBD).at(6):= Vector_PuntosSprues.at(IndexBD-(AuxIndexBd-1)).at(IndexBD-(AuxIndexBd-4)-IndexDinamico)   </l>
<c>    </c>
<l>endfor</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>Vector_BD_Core_New:=Vector_BD_Core</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="MagsTotales3D">
<parameters>
<parameter id="MangasTotales"/>
<parameter id="Objeto_1"/>
<parameter id="Objeto_2"/>
<parameter id="Objeto_3"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="Pose_Robot"/>
<parameter id="PosibleManga1R"/>
<parameter id="PosibleManga2R"/>
<parameter id="PosibleManga3R"/>
<parameter id="PosibleSprue1R"/>
<parameter id="PosibleSprue2R"/>
<parameter id="PosibleSprue3R"/>
<parameter id="SerialHandle"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="Vector_BD_Core"/>
<parameter id="Vector_BD_Core_New"/>
<parameter id="WindowHandle"/>
<parameter id="Xmanga"/>
<parameter id="Ymanga"/>
<parameter id="Zmanga"/>
<parameter id="mangasF1"/>
<parameter id="mangasF2"/>
<parameter id="mangasF3"/>
<parameter id="xa"/>
<parameter id="xb"/>
<parameter id="xc"/>
<parameter id="ya"/>
<parameter id="yb"/>
<parameter id="yc"/>
<parameter id="za"/>
<parameter id="zb"/>
<parameter id="zc"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_BD_Matrix">
<interface>
<ic>
<par name="EsquinaSupDerecha" base_type="ctrl" dimension="0"/>
<par name="EsquinaSupIzquierda3" base_type="ctrl" dimension="0"/>
<par name="Ancho_Pattern" base_type="ctrl" dimension="0"/>
<par name="AlturaPattern" base_type="ctrl" dimension="0"/>
<par name="AlturaPattern2" base_type="ctrl" dimension="0"/>
<par name="AlturaPattern3" base_type="ctrl" dimension="0"/>
<par name="Pose_Robot" base_type="ctrl" dimension="2"/>
<par name="EsquinaSupIzquierda" base_type="ctrl" dimension="0"/>
<par name="EsquinaInfIzquierda" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="DeltaY" base_type="ctrl" dimension="0"/>
<par name="Largo_Pattern" base_type="ctrl" dimension="0"/>
<par name="Vector_BD_Core" base_type="ctrl" dimension="2"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<c></c>
<l>Pose_1:=Pose_Robot.at(0).at(0)</l>
<l>Pose_2:=Pose_Robot.at(1).at(0)</l>
<l>Pose_3:=Pose_Robot.at(2).at(0)</l>
<c></c>
<c></c>
<l>Largos:=[AlturaPattern,AlturaPattern2,AlturaPattern3]</l>
<c></c>
<l>tuple_min (Largos, AlturaPatternFinal)</l>
<c></c>
<c></c>
<c>******************************************</c>
<c>*  Base</c>
<c>* Desplazamiento</c>
<l>DeltaX:=Pose_2[1]-Pose_1[1]</l>
<l>DeltaX:=-500</l>
<c>******************************************</c>
<l>Largo_Pattern := ( EsquinaSupIzquierda3[0]+DeltaX*2)- EsquinaSupDerecha[0] </l>
<l>Ancho_Pattern := EsquinaInfIzquierda[1] - EsquinaSupIzquierda[1] </l>
<c></c>
<c></c>
<c></c>
<l>TanAngulo:=(EsquinaSupDerecha[1] -EsquinaSupIzquierda3[1])  / ( EsquinaSupDerecha[0] - (EsquinaSupIzquierda3[0]+DeltaX*2) )</l>
<c></c>
<c></c>
<l>tuple_atan (TanAngulo, ATan)</l>
<l>tuple_deg (ATan, AnguloPattern)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>Vector_BD_Core:={ { [] } }</l>
<l>Vector_BD_Core.at(0).at(0):='Tipo'</l>
<l>Vector_BD_Core.at(0).at(1):='X'</l>
<l>Vector_BD_Core.at(0).at(2):='Y'</l>
<l>Vector_BD_Core.at(0).at(3):='Z'</l>
<l>Vector_BD_Core.at(0).at(4):='C'</l>
<l>Vector_BD_Core.at(0).at(5):='B'</l>
<l>Vector_BD_Core.at(0).at(6):='A'</l>
<c></c>
<l>Index:=1</l>
<l>Vector_BD_Core.at(Index).at(0):='Base Ultima Esquina Sup Izquierda'</l>
<l>Vector_BD_Core.at(Index).at(1) := EsquinaSupIzquierda3[0]+DeltaX*2</l>
<l>Vector_BD_Core.at(Index).at(2) := EsquinaSupIzquierda3[1]</l>
<l>Vector_BD_Core.at(Index).at(3) := AlturaPatternFinal</l>
<l>Vector_BD_Core.at(Index).at(4):=0</l>
<l>Vector_BD_Core.at(Index).at(5):=0</l>
<l>Vector_BD_Core.at(Index).at(6):=AnguloPattern*0</l>
<c></c>
<l>Index:=2</l>
<l>Vector_BD_Core.at(Index).at(0):='Largo Pattern'</l>
<l>Vector_BD_Core.at(Index).at(1):=0</l>
<l>Vector_BD_Core.at(Index).at(2):=Largo_Pattern</l>
<l>Vector_BD_Core.at(Index).at(3):=0</l>
<l>Vector_BD_Core.at(Index).at(4):=0</l>
<l>Vector_BD_Core.at(Index).at(5):=0</l>
<l>Vector_BD_Core.at(Index).at(6):=0</l>
<c></c>
<c></c>
<l>Index:=3</l>
<l>Vector_BD_Core.at(Index).at(0):='Ancho Pattern'</l>
<l>Vector_BD_Core.at(Index).at(1):=0</l>
<l>Vector_BD_Core.at(Index).at(2):=Ancho_Pattern</l>
<l>Vector_BD_Core.at(Index).at(3):=0</l>
<l>Vector_BD_Core.at(Index).at(4):=0</l>
<l>Vector_BD_Core.at(Index).at(5):=0</l>
<l>Vector_BD_Core.at(Index).at(6):=0</l>
<c></c>
<c></c>
<c></c>
<l>Tag:='_EV02_I_AltoPattern'</l>
<c></c>
<l>AltoPattern:=AlturaPatternFinal-EsquinaSupIzquierda3[2]</l>
<c></c>
<l>tuple_int (AnguloPattern, AltoPattern)</l>
<l>Send_EthernetIP_Data (Tag, AltoPattern, SerialHandle)</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_BD_Matrix">
<parameters>
<parameter id="AlturaPattern"/>
<parameter id="AlturaPattern2"/>
<parameter id="AlturaPattern3"/>
<parameter id="Ancho_Pattern"/>
<parameter id="DeltaY"/>
<parameter id="EsquinaInfIzquierda"/>
<parameter id="EsquinaSupDerecha"/>
<parameter id="EsquinaSupIzquierda"/>
<parameter id="EsquinaSupIzquierda3"/>
<parameter id="Largo_Pattern"/>
<parameter id="Pose_Robot"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_BD_Core"/>
</parameters>
</docu>
</procedure>
<procedure name="GetMaxAlturaUmbralVector_COPY_1">
<interface>
<io>
<par name="Zm" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Regions_PattSup" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="index_protection_Inf" base_type="ctrl" dimension="0"/>
<par name="index_protection_Sup" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c></c>
<c></c>
<c>* ********************************************************</c>
<c>* 1.-  !!!!!!!!! threshols dinamico!!!!!!!!!!!!!!!!!!!!!!!!!!</c>
<c>* ********************************************************</c>
<l>threshold (Zm, RegZRed, 5, 2000)</l>
<l>reduce_domain (Zm, RegZRed, ZRed)</l>
<l>escala := 255.0/2000.0</l>
<l>scale_image (ZRed, HeightMap_Scalada, escala, 0)</l>
<l>threshold (HeightMap_Scalada, HeightMap_Region, 0, 255)</l>
<l>gray_histo_range (HeightMap_Region, HeightMap_Scalada, 0, 255, 256, Histo, BinSize)</l>
<l>tuple_sum (Histo, Sum_Histo)</l>
<c></c>
<l>* # #########################################################</l>
<l>* # ### Mientras mas grabnde menos sensible a cambios #######   </l>
<l>Mascara := 1</l>
<l>* # ########################################################</l>
<c></c>
<l>Vector_Distribucion := []</l>
<l>init_vector := 255</l>
<l>flag_vector := 0</l>
<l>aux_suma := 0.0</l>
<c></c>
<l>for Index := init_vector to 0 by -1</l>
<c></c>
<l>    Vector_Distribucion[Index] := aux_suma+Histo[Index]*100.0/ Sum_Histo</l>
<l>    aux_suma := Vector_Distribucion[Index]</l>
<l>endfor</l>
<c></c>
<l>Derivada := []</l>
<l>Factor_Der := 1000</l>
<l>Mascara := 3</l>
<l>for Index := init_vector to 50 by -Mascara</l>
<c></c>
<l>    Derivada[Index] := abs(Vector_Distribucion[Index]-Vector_Distribucion[Index-Mascara])*Factor_Der</l>
<c></c>
<l>endfor</l>
<c></c>
<c></c>
<c>* *********************************************************</c>
<c>* * Busco el primer cambio brusco de posicion *************</c>
<c>* * El umbral de cambio es Aux_Val_Max ********************</c>
<c>* *********************************************************</c>
<c></c>
<l>Aux_Val_Max := 2000</l>
<l>Flag_indx_max := 255</l>
<l>for Index := 0 to 160 by Mascara</l>
<c></c>
<l>    if (Derivada[Index]&gt;Aux_Val_Max)</l>
<l>        Aux_Val_Max := Derivada[Index]</l>
<l>        Flag_indx_max := Index</l>
<l>        break</l>
<l>    endif</l>
<c></c>
<l>endfor</l>
<c></c>
<c></c>
<c>* ***********************************************************</c>
<c>* * Desviacion luego de  detectar el cambio brusco **********</c>
<c>* ***********************************************************</c>
<c></c>
<l>* # #########################################################</l>
<l>* # ######## Grado de proteccion para moverse entre el </l>
<l>* # ####### histograma</l>
<l>* index_protection_Inf := 30</l>
<l>* index_protection_Sup := 20</l>
<l>* # #########################################################</l>
<c></c>
<l>Alt_Min := Flag_indx_max-index_protection_Inf</l>
<l>Alt_Max := Flag_indx_max+index_protection_Sup</l>
<l>threshold (HeightMap_Scalada, Regions_PattSup, Alt_Min, Alt_Max)</l>
<l>return ()</l>
</body>
<docu id="GetMaxAlturaUmbralVector_COPY_1">
<parameters>
<parameter id="Regions_PattSup"/>
<parameter id="Zm"/>
<parameter id="index_protection_Inf"/>
<parameter id="index_protection_Sup"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_EthernetIP_Data_COPY_1">
<interface>
<ic>
<par name="Tag_Destino" base_type="ctrl" dimension="0"/>
<par name="Variable" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>wait_seconds (0.01)</l>
<c></c>
<c></c>
<l>Peticion := 'Escritura'</l>
<l>Variable_OPC := Tag_Destino</l>
<c></c>
<l>Data := Peticion+';'+Variable_OPC+';'+Variable</l>
<c></c>
<l>write_serial (SerialHandle, ords(Data))</l>
<l>Conteo_Espera := 0</l>
<l>VarSerial := 0</l>
<l>while (VarSerial&lt;1 and Conteo_Espera&lt;10)</l>
<l>    read_serial (SerialHandle, 20, Nchar)</l>
<l>    Nchar := chrt(Nchar)</l>
<l>    tuple_number (Nchar, Variable)</l>
<l>    VarSerial := |Nchar|</l>
<l>    Conteo_Espera := Conteo_Espera+1</l>
<l>endwhile</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Send_EthernetIP_Data_COPY_1">
<parameters>
<parameter id="SerialHandle"/>
<parameter id="Tag_Destino"/>
<parameter id="Variable"/>
</parameters>
</docu>
</procedure>
<procedure name="Set_Max_Altura_Model3D_COPY_1">
<interface>
<ic>
<par name="Modelo_3D_ROI" base_type="ctrl" dimension="0"/>
<par name="Delta_Altura" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Modelo_3D_ROI_Thres" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>try</l>
<c></c>
<c>    * Delta altura limita  el Z que necesito</c>
<l>    get_object_model_3d_params (Modelo_3D_ROI, 'bounding_box1', GenParamValue)</l>
<c></c>
<l>    x_min := GenParamValue[0]</l>
<l>    y_min := GenParamValue[1]</l>
<l>    z_min := GenParamValue[2]</l>
<l>    x_max := GenParamValue[3]</l>
<l>    y_max := GenParamValue[4]</l>
<l>    z_max := GenParamValue[5]</l>
<c></c>
<c></c>
<l>*     if (z_max-Delta_Altura &lt;= 0)</l>
<c></c>
<l>*         dev_get_exception_data (Exception, 'error_msg', ErrorMsg)</l>
<l>*         return ()</l>
<l>*     endif</l>
<c></c>
<l>    select_points_object_model_3d (Modelo_3D_ROI, 'point_coord_z', z_min-200, Delta_Altura, Modelo_3D_ROI_Thres)</l>
<c></c>
<c></c>
<l>catch (Exception)</l>
<c></c>
<l>    Send_Data_Error_COPY_1 (Exception, SerialHandle, EstadoFx)</l>
<c></c>
<l>endtry</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Set_Max_Altura_Model3D_COPY_1">
<parameters>
<parameter id="Delta_Altura"/>
<parameter id="Modelo_3D_ROI"/>
<parameter id="Modelo_3D_ROI_Thres"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_Estado_Subproceso_COPY_2">
<interface>
<ic>
<par name="Variable_On" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Tag_Destino" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c></c>
<c>* Tiempo en segundos</c>
<l>Time := 0.1</l>
<l>Variable_Off := 0</l>
<l>Send_Pulse_EthernetIp_Data (Tag_Destino, Variable_On, SerialHandle, Variable_Off, Time)</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Send_Estado_Subproceso_COPY_2">
<parameters>
<parameter id="SerialHandle"/>
<parameter id="Tag_Destino"/>
<parameter id="Variable_On"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_Data_Proceso_COPY_1">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Resultado" base_type="ctrl" dimension="0"/>
<par name="Procesando" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c></c>
<l>* # #### Envio de Procesando  #######################</l>
<l>Estado_SubProceso := Procesando</l>
<l>Tag_Destino := '_EV01_I_Procesando'</l>
<l>Valor_Variable := Estado_SubProceso</l>
<l>Send_EthernetIP_Data_COPY_1 (Tag_Destino, Valor_Variable, SerialHandle)</l>
<l>* # ### Fin envio de Resultado ######################  </l>
<c></c>
<c></c>
<c></c>
<l>* # #### Envio de Resultado  #######################</l>
<l>* # [1] = Bien [2] = falla</l>
<l>Tag_Destino := '_EV01_I_Resultado'</l>
<l>Variable_On := Resultado</l>
<l>Send_Estado_Subproceso_COPY_2 (Variable_On, SerialHandle, Tag_Destino)</l>
<l>* # ### Fin envio de Resultado ######################  </l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Send_Data_Proceso_COPY_1">
<parameters>
<parameter id="Procesando"/>
<parameter id="Resultado"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_Data_Error_COPY_1">
<interface>
<ic>
<par name="Exception" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="EstadoFx" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>dev_get_exception_data (Exception, 'error_msg', ErrorMsg0)</l>
<l>dev_get_exception_data (Exception, 'procedure', ErrorMsg1)</l>
<l>dev_get_exception_data (Exception, 'operator', ErrorMsg2)</l>
<l>dev_get_exception_data (Exception, 'program_line', ErrorMsg3)</l>
<c></c>
<c></c>
<l>MensajeError := ErrorMsg0 + ' IN '+ErrorMsg1+' IN FUNTION '+ErrorMsg2+' IN LINE '+ErrorMsg3</l>
<l>Mensaje := MensajeError</l>
<l>Send_Data_Info_COPY_1 (Mensaje, SerialHandle)</l>
<l>EstadoFx := false</l>
<l>wait_seconds (0.05)</l>
<c>* #### Envio data de estado ########################</c>
<l>Procesando := 0</l>
<l>Resultado := 2</l>
<l>Send_Data_Proceso_COPY_1 (SerialHandle, Resultado, Procesando)</l>
<l>Estado_Fx := 1</l>
<l>* # ################################################# </l>
<l>return ()</l>
</body>
<docu id="Send_Data_Error_COPY_1">
<parameters>
<parameter id="EstadoFx"/>
<parameter id="Exception"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_Data_Info_COPY_1">
<interface>
<ic>
<par name="Mensaje" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>* # #### Envio de estado  #######################</l>
<c></c>
<l>Valor_Variable := Mensaje</l>
<l>Tag_Destino := '_EV01_I_Estado'</l>
<c></c>
<l>Peticion := 'HalconEstado'</l>
<l>Variable_OPC := Tag_Destino</l>
<l>Variable := Mensaje</l>
<l>Data := Peticion+';'+Variable_OPC+';'+Variable</l>
<c></c>
<l>write_serial (SerialHandle, ords(Data))</l>
<c></c>
<l>Conteo_Espera := 0</l>
<l>VarSerial := 0</l>
<l>while (VarSerial&lt;1 and Conteo_Espera&lt;10)</l>
<l>    read_serial (SerialHandle, 20, Nchar)</l>
<l>    Nchar := chrt(Nchar)</l>
<l>    tuple_number (Nchar, Variable)</l>
<l>    VarSerial := |Nchar|</l>
<l>    Conteo_Espera := Conteo_Espera+1</l>
<l>endwhile</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>* # ### Fin envio de estado ######################  </l>
<c></c>
<l>return ()</l>
</body>
<docu id="Send_Data_Info_COPY_1">
<parameters>
<parameter id="Mensaje"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_Data_Estado_COPY_1">
<interface>
<ic>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="Estado" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>* # #### Envio de estado  #######################</l>
<l>* wait_seconds (0.1)</l>
<l>Valor_Variable := Vector_Estado_Fx.at(Estado).at(0)</l>
<l>Tag_Destino := '_EV01_I_Estado'</l>
<c></c>
<l>Peticion := 'HalconEstado'</l>
<l>Variable_OPC := Tag_Destino</l>
<l>Variable := Vector_Estado_Fx.at(Estado).at(1)</l>
<l>Data := Peticion+';'+Variable_OPC+';'+Variable</l>
<c></c>
<l>write_serial (SerialHandle, ords(Data))</l>
<c></c>
<l>Conteo_Espera := 0</l>
<l>VarSerial := 0</l>
<l>while (VarSerial&lt;1 and Conteo_Espera&lt;10)</l>
<l>    read_serial (SerialHandle, 20, Nchar)</l>
<l>    Nchar := chrt(Nchar)</l>
<l>    tuple_number (Nchar, Variable)</l>
<l>    VarSerial := |Nchar|</l>
<l>    Conteo_Espera := Conteo_Espera+1</l>
<l>endwhile</l>
<c></c>
<l>* # ### Fin envio de estado ######################  </l>
<c></c>
<l>return ()</l>
</body>
<docu id="Send_Data_Estado_COPY_1">
<parameters>
<parameter id="Estado"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
</parameters>
</docu>
</procedure>
<procedure name="NotZeroModel">
<interface>
<ic>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Escena3D_RAWOut" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Escena3D_RAWOut := Escena3D_RAW</l>
<l>get_object_model_3d_params (Escena3D_RAWOut, 'bounding_box1', GenParamValue)</l>
<c></c>
<l>x_min := GenParamValue[0]</l>
<l>y_min := GenParamValue[1]</l>
<l>z_min := GenParamValue[2]</l>
<l>x_max := GenParamValue[3]</l>
<l>y_max := GenParamValue[4]</l>
<l>z_max := GenParamValue[5]</l>
<c></c>
<l>select_points_object_model_3d (Escena3D_RAWOut, 'point_coord_z', 300, 2500, Escena3D_RAWOut)</l>
<l>return ()</l>
</body>
<docu id="NotZeroModel">
<parameters>
<parameter id="Escena3D_RAW"/>
<parameter id="Escena3D_RAWOut"/>
</parameters>
</docu>
</procedure>
<procedure name="Find_Dinamic_Core_COPY_1">
<interface>
<ic>
<par name="N_Model_To_Find" base_type="ctrl" dimension="0"/>
<par name="SFM_Core_Pallet" base_type="ctrl" dimension="0"/>
<par name="ObjectModel3D_Core_Pallet" base_type="ctrl" dimension="0"/>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Modelo_3D_ROI_ThresEdges" base_type="ctrl" dimension="0"/>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Ang_Obj" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="MyPose" base_type="ctrl" dimension="0"/>
<par name="Score_Refinado" base_type="ctrl" dimension="0"/>
<par name="Posicion3D_Objeto_REFIN" base_type="ctrl" dimension="0"/>
<par name="Obj_Detectado" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Angulos := []</l>
<l>Puntaje := []</l>
<c></c>
<l>IdexAng := 0</l>
<l>Poses_Finded := { {[]}}</l>
<c>* ***********************************************</c>
<c>* Delta Angular -&gt; +- 20°</c>
<c>* ***********************************************</c>
<l>DeltaAngular := 10</l>
<c></c>
<l>matchinToFind := 10.0/10.0</l>
<c></c>
<l>for KeyPointDin := 0.1 to matchinToFind by 0.1</l>
<c></c>
<c></c>
<c>    * ***************************</c>
<c>    * Parametros de control</c>
<c>    * ***************************</c>
<l>    DinamicSampling := 0.0095</l>
<l>    Sampling_Find := (1.0 -KeyPointDin)*DinamicSampling + 0.05</l>
<l>    Keypoint := KeyPointDin</l>
<l>    MinScore := 0.05</l>
<l>    N_matches := N_Model_To_Find</l>
<l>    SFM := SFM_Core_Pallet</l>
<l>    Mod_3D_Objeto := ObjectModel3D_Core_Pallet</l>
<l>    Escena3D := Escena3D_RAW</l>
<c>    * ***************************</c>
<c>    * Si lo que busco es una Manga, Busco el objeto por Bordes</c>
<c>    * ***************************</c>
<c>*     Visualizar_3D ([ObjectModel3D_Core_Pallet,Modelo_3D_ROI_ThresEdges,Escena3D_RAW], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], 1, [], [], [], WindowHandle, PoseOut1)</c>
<c>    * ***************************</c>
<l>*     Sampling_Find := 0.02</l>
<l>    Find_Dinamic_Entity_3D_COPY_1 (N_matches, SFM, Escena3D, Sampling_Find, Keypoint, MinScore, Mod_3D_Objeto, Modelo_3D_ROI_ThresEdges, MyPose, ScoreMLS, Obj_Detectado)</l>
<c></c>
<l>    if (Obj_Detectado)</l>
<l>        dev_clear_window ()</l>
<l>        dev_get_window (WindowHandle)</l>
<l>        Angulos[IdexAng] := MyPose[5]</l>
<l>        Poses_Finded.at(IdexAng).at(0) := MyPose</l>
<l>        Angulos[IdexAng] := MyPose[5]</l>
<l>        Puntaje[IdexAng] := ScoreMLS</l>
<l>        IdexAng := IdexAng+1</l>
<c></c>
<c></c>
<l>        rigid_trans_object_model_3d (Mod_3D_Objeto, MyPose, Posicion3D_Objeto_REFIN)</l>
<c></c>
<c></c>
<l>        Parametros_Visualizacion := ['disp_pose','color_attrib','lut','point_size']</l>
<l>        Valores_Visualizacion := ['true','coord_z','rainbow',1]</l>
<l>        create_pose (0, 0, 2690, 352, 0, 0, 'Rp+T', 'gba', 'point', PoseView)</l>
<l>        disp_object_model_3d (WindowHandle, [Posicion3D_Objeto_REFIN,Escena3D_RAW], [], PoseView, [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5])</l>
<l>        dev_disp_text ('Foto - &gt; ' +KeyPointDin*10, 'window', 'top', 'left', 'black', [], [])</l>
<l>        dev_disp_text (MyPose, 'window', 20, 400, 'black', [], [])</l>
<c></c>
<c></c>
<c></c>
<l>         Visualizar_3D_COPY_2 ([Posicion3D_Objeto_REFIN,Escena3D_RAW], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], 1, [], [], [], WindowHandle, PoseOut1)</l>
<c></c>
<c></c>
<l>    endif</l>
<l>* # ###############################</l>
<c></c>
<c></c>
<l>endfor</l>
<c></c>
<c></c>
<l>if (|Angulos|&gt;0)</l>
<c></c>
<c></c>
<c>    * Convierto a angulos negativos</c>
<c>    * Sobre el limite convierto a Neg</c>
<c>    * **********************************</c>
<l>    LimiteAngular := 200</l>
<c>    * **********************************</c>
<l>    for Index := 0 to |Angulos|-1 by 1</l>
<l>        if (Angulos[Index]&gt;LimiteAngular)</l>
<l>            Angulos[Index] := Angulos[Index]-360</l>
<l>        endif</l>
<l>    endfor</l>
<c></c>
<l>    Dist_Angular := []</l>
<l>    for Index := 0 to |Angulos|-1 by 1</l>
<l>        Dist_Angular[Index] := Ang_Obj-Angulos[Index]</l>
<l>    endfor</l>
<c></c>
<l>    tuple_abs (Dist_Angular, Dist_Angular_abs)</l>
<c></c>
<l>    AuxMenor := Dist_Angular_abs[0]</l>
<l>    flag := 0</l>
<l>    for Index := 0 to |Dist_Angular_abs|-1 by 1</l>
<l>        if (AuxMenor&gt;Dist_Angular_abs[Index])</l>
<l>            AuxMenor := Dist_Angular_abs[Index]</l>
<l>            flag := Index</l>
<l>        endif</l>
<l>    endfor</l>
<c></c>
<c></c>
<c>*     Visualizar_3D ([Posicion3D_Objeto_REFIN,Escena3D_RAW], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], 1, [], [], [], WindowHandle, PoseOut1)</c>
<c></c>
<c></c>
<c></c>
<l>    tuple_max (Puntaje, MaxPuntaje)</l>
<c></c>
<l>    for Index1 := 0 to |Puntaje|-1 by 1</l>
<c></c>
<l>        if (MaxPuntaje=Puntaje[Index1])</l>
<l>            flag := Index1</l>
<l>        endif</l>
<c></c>
<l>    endfor</l>
<c></c>
<l>    if (AuxMenor&lt;=DeltaAngular)</l>
<c></c>
<l>        Obj_Detectado := 1</l>
<l>        MyPose := Poses_Finded.at(flag).at(0)</l>
<l>        Score_Refinado := Puntaje[flag]</l>
<l>        rigid_trans_object_model_3d (Mod_3D_Objeto, MyPose, Posicion3D_Objeto_REFIN)</l>
<c></c>
<l>        create_pose (50, -100, 1690, 352, 0, 0, 'Rp+T', 'gba', 'point', PoseView)</l>
<l>        disp_object_model_3d (WindowHandle, [Posicion3D_Objeto_REFIN,Escena3D_RAW], [], PoseView, [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,1])</l>
<c>*         Visualizar_3D ([Posicion3D_Objeto_REFIN,Escena3D_RAW], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], 1, [], [], [], WindowHandle, PoseOut1)</c>
<c></c>
<l>        return ()</l>
<l>    else</l>
<l>        Obj_Detectado := 0</l>
<l>* # ### Envio data de estado ########################</l>
<l>        Estado := 22</l>
<l>        Send_Data_Estado_COPY_1 (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* # ################################################# </l>
<c></c>
<c></c>
<l>    endif</l>
<l>else</l>
<c></c>
<l>    Obj_Detectado := 0</l>
<l>* # ### Envio data de estado ########################</l>
<l>    Estado := 22</l>
<l>    Send_Data_Estado_COPY_1 (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* # ################################################# </l>
<c></c>
<l>endif</l>
<c></c>
<l>* # ###################################################################### </l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Find_Dinamic_Core_COPY_1">
<parameters>
<parameter id="Ang_Obj"/>
<parameter id="Escena3D_RAW"/>
<parameter id="Modelo_3D_ROI_ThresEdges"/>
<parameter id="MyPose"/>
<parameter id="N_Model_To_Find"/>
<parameter id="Obj_Detectado"/>
<parameter id="ObjectModel3D_Core_Pallet"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="Posicion3D_Objeto_REFIN"/>
<parameter id="SFM_Core_Pallet"/>
<parameter id="Score_Refinado"/>
<parameter id="SerialHandle"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="WindowHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Find_Dinamic_Entity_3D_COPY_1">
<interface>
<ic>
<par name="N_matches" base_type="ctrl" dimension="0"/>
<par name="SFM" base_type="ctrl" dimension="0"/>
<par name="Modelo_imagen_3d" base_type="ctrl" dimension="0"/>
<par name="Sampling_Find" base_type="ctrl" dimension="0"/>
<par name="Keypoint" base_type="ctrl" dimension="0"/>
<par name="MinScore" base_type="ctrl" dimension="0"/>
<par name="Perno_Ref_Cam0" base_type="ctrl" dimension="0"/>
<par name="Modelo_3D_ROI_ThresEdges" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="PoseMLS" base_type="ctrl" dimension="0"/>
<par name="ScoreMLS" base_type="ctrl" dimension="0"/>
<par name="Estado_Funcion" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>Estado_Funcion := true</l>
<l>try</l>
<c>    * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = "Buscando Objeto";</c>
<c></c>
<c>    * ***************************************</c>
<c>    * 1.Parametros de control</c>
<c>    * ***************************************</c>
<l>    GenParamName := ['num_matches','scene_normal_computation','pose_ref_scoring_dist_rel','score_type'          ,'3d_edges'              , '3d_edge_min_amplitude_abs','max_gap','viewpoint']</l>
<l>    GenParamValue := [N_matches   ,          'mls'           ,   0.01                    ,'model_point_fraction', Modelo_3D_ROI_ThresEdges, 13.7313                   ,  30     , '0 0 0']</l>
<l>    GenParamName := ['num_matches','scene_normal_computation','score_type'          ,'3d_edges'              , '3d_edge_min_amplitude_abs','max_gap','viewpoint']</l>
<l>    GenParamValue := [N_matches   ,          'mls'        ,'model_point_fraction', Modelo_3D_ROI_ThresEdges, 13.7313                   ,  30     , '0 0 0']</l>
<c></c>
<c></c>
<c>    * ***************************************</c>
<c>    * 2.Busqueda de entidad</c>
<c>    * ***************************************</c>
<l>    find_surface_model (SFM, Modelo_imagen_3d, Sampling_Find, Keypoint, MinScore, 'true', GenParamName, GenParamValue, PoseMLS, ScoreMLS, SurfaceMatchingResultID1)</l>
<c>    * ***************************************</c>
<l>    if (|PoseMLS|)</l>
<c>        * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = "Objeto encontrado con una PROBABILIDAD de " + hv_ScoreMLS*100.ToString() ;</c>
<l>        Estado_Funcion := true</l>
<l>        return ()</l>
<c></c>
<l>    endif</l>
<c></c>
<l>    Estado_Funcion := false</l>
<l>catch (Exception)</l>
<c></c>
<l>    Estado_Funcion := false</l>
<c>    * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = Fx_Aux.ErrorCatch(HDevExpDefaultException1);</c>
<c></c>
<l>endtry</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Find_Dinamic_Entity_3D_COPY_1">
<parameters>
<parameter id="Estado_Funcion"/>
<parameter id="Keypoint"/>
<parameter id="MinScore"/>
<parameter id="Modelo_3D_ROI_ThresEdges"/>
<parameter id="Modelo_imagen_3d"/>
<parameter id="N_matches"/>
<parameter id="Perno_Ref_Cam0"/>
<parameter id="PoseMLS"/>
<parameter id="SFM"/>
<parameter id="Sampling_Find"/>
<parameter id="ScoreMLS"/>
</parameters>
</docu>
</procedure>
<procedure name="Visualizar_3D_COPY_2">
<interface>
<ic>
<par name="Modelo3D" base_type="ctrl" dimension="0"/>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Visualizar" base_type="ctrl" dimension="0"/>
<par name="PoseIn" base_type="ctrl" dimension="0"/>
<par name="Title" base_type="ctrl" dimension="0"/>
<par name="Label" base_type="ctrl" dimension="0"/>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Pose" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>if (Visualizar)</l>
<l>    visualize_object_model_3d (WindowHandle, [Modelo3D], [], [], Parametros_Visualizacion, Valores_Visualizacion, Title, Label, [], Pose)</l>
<l>endif</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Visualizar_3D_COPY_2">
<parameters>
<parameter id="Label"/>
<parameter id="Modelo3D"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="Pose"/>
<parameter id="PoseIn"/>
<parameter id="Title"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="Visualizar"/>
<parameter id="WindowHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Vector_Estados_COPY_1">
<interface>
<oc>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
</oc>
</interface>
<body>
<l>Vector_Estado_Fx := { {[]}}</l>
<l>Vector_Estado_Fx.at(0).at(0) := 'Valor Estado'</l>
<l>Vector_Estado_Fx.at(0).at(1) := 'Codificacion'</l>
<c></c>
<l>Nestado := 1</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'Adquiriendo fotografia'</l>
<l>Nestado := 2</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' Adquiriendo informacion de pallets'</l>
<l>Nestado := 3</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'Analizando Pallet'</l>
<l>Nestado := 4</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'Fallo en adquisición de imagen'</l>
<l>Nestado := 5</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'Fallo en ROI Pallet'</l>
<l>Nestado := 6</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'Buscando esquina del pallet'</l>
<l>Nestado := 7</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'No se detecto Esquina de Pallet'</l>
<l>Nestado := 8</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' Busco de manera sectorizada cada core en el pallet'</l>
<l>Nestado := 9</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'Leyendo STl del Core'</l>
<l>Nestado := 10</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'Buscando core en el segmento del pallet'</l>
<l>Nestado := 11</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'Core  DETECTADO en segmento de PALLET'</l>
<l>Nestado := 12</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'No se detecto Core en el segmento del pallet'</l>
<l>Nestado := 13</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'Escritura de existencia de cores de Pallet solicitado'</l>
<l>Nestado := 14</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'Detección de patrón Exitoso'</l>
<l>Nestado := 15</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'No se a logrado extraer el patrón'</l>
<l>Nestado := 16</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'Buscando Patrón'</l>
<l>Nestado := 17</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'Enviando coordenadas de patrón al Robot'</l>
<l>Nestado := 18</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'Fin GET_PATRON_POSE'</l>
<l>Nestado := 19</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := '#### BLOQUE  0 INICIADO ####'</l>
<l>Nestado := 20</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := 'Adquiriendo Multifoto'</l>
<l>Nestado := 21</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' Busqueda Finalizada'</l>
<l>Nestado := 22</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := '  ### Error ### Orientacion de Core detectado Incorrecta '</l>
<l>Nestado := 23</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' ### Error ### Manga No Detectada'</l>
<l>Nestado := 24</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' Leyendo Modelo de 3D'</l>
<l>Nestado := 25</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' Leyendo Modelo de Superficie'</l>
<l>Nestado := 26</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 27</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 28</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 29</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 30</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 31</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 32</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 33</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 34</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 35</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 36</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 37</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 38</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 39</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 40</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 41</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 42</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 43</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 44</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 45</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 46</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 47</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 48</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 49</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 50</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 51</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 52</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 53</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 54</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 55</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 56</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 57</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 58</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 59</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 60</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 61</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 62</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 63</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 64</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 65</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 66</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 67</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 68</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 69</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 70</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 71</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 72</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 73</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 74</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 75</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 76</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 77</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 78</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 79</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 80</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 81</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 82</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 83</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 84</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 85</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 86</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 87</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 88</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 89</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 90</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 91</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<l>Nestado := 92</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) := Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) := ' '</l>
<c></c>
</body>
<docu id="Get_Vector_Estados_COPY_1">
<parameters>
<parameter id="Vector_Estado_Fx"/>
</parameters>
</docu>
</procedure>
<procedure name="Visualizar_3D_COPY_1_COPY_1">
<interface>
<ic>
<par name="Modelo3D" base_type="ctrl" dimension="0"/>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Visualizar" base_type="ctrl" dimension="0"/>
<par name="PoseIn" base_type="ctrl" dimension="0"/>
<par name="Title" base_type="ctrl" dimension="0"/>
<par name="Label" base_type="ctrl" dimension="0"/>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Pose" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>if (Visualizar)</l>
<l>    visualize_object_model_3d (WindowHandle, [Modelo3D], [], [], Parametros_Visualizacion, Valores_Visualizacion, Title, Label, [], Pose)</l>
<l>endif</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Visualizar_3D_COPY_1_COPY_1">
<parameters>
<parameter id="Label"/>
<parameter id="Modelo3D"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="Pose"/>
<parameter id="PoseIn"/>
<parameter id="Title"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="Visualizar"/>
<parameter id="WindowHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Data_Sleeve_Sprue">
<interface>
<io>
<par name="Objeto_1" base_type="iconic" dimension="0"/>
<par name="Objeto_2" base_type="iconic" dimension="0"/>
<par name="Objeto_3" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera_3" base_type="ctrl" dimension="0"/>
<par name="Pose_Robot" base_type="ctrl" dimension="2"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Vector_BD_Core" base_type="ctrl" dimension="2"/>
</oc>
</interface>
<body>
<c></c>
<l>Parametros_Visualizacion:=['disp_pose','color_attrib','lut','disp_lines','point_size']</l>
<l>Valores_Visualizacion:= ['true','coord_z','rainbow','false',1]</l>
<l>dev_get_window (WindowHandle)</l>
<c></c>
<c></c>
<c></c>
<l>Get_Photo_and_DimencionPattern (Objeto_1, Zma1, Ymb1, Xmc1, PosibleManga1, PosibleSprue1, \
                                NxLib, Camera_3, Escena3D, Angle, EsquinaSupIzquierda, EsquinaSupDerecha, \
                                EsquinaInfIzquierda, Ancho_Pattern, Largo_Pattern, AlturaPattern, Altura_Manga, CentroSprue)</l>
<c></c>
<c></c>
<l>* Visualizar_3D_COPY_1 ([Escena3D], Parametros_Visualizacion, Valores_Visualizacion, 1, [], [], [], WindowHandle, PoseOut1)</l>
<c></c>
<c></c>
<l>Get_Photo_and_DimencionPattern (Objeto_2, Zma2, Ymb2, Xmc2, PosibleManga2, PosibleSprue2, NxLib, Camera_3, Escena3D2, Angle2, EsquinaSupIzquierda2, EsquinaSupDerecha2, EsquinaInfIzquierda2, Ancho_Pattern2, Largo_Pattern2, AlturaPattern2, Altura_Manga2, CentroSprue2)</l>
<c></c>
<l>Get_Photo_and_DimencionPattern (Objeto_3, Zma3, Ymb3, Xmc3, PosibleManga3, PosibleSprue3, NxLib, \
                                Camera_3, Escena3D3, Angle3, EsquinaSupIzquierda3, EsquinaSupDerecha3, EsquinaInfIzquierda3, Ancho_Pattern3, Largo_Pattern3, AlturaPattern3, Altura_Manga3, CentroSprue3)</l>
<c></c>
<c></c>
<c></c>
<c>***************************************************************************</c>
<c>* base Largo ancho</c>
<c>**************************************************************************</c>
<l>Get_BD_Matrix (EsquinaSupDerecha, EsquinaSupIzquierda3, Ancho_Pattern, AlturaPattern, AlturaPattern2, AlturaPattern3, Pose_Robot, EsquinaSupIzquierda, EsquinaInfIzquierda, SerialHandle, DeltaY, Largo_Pattern, Vector_BD_Core)</l>
<c>**************************************************************************</c>
<c></c>
<c></c>
<c>************************************************</c>
<c>**deteccion de Mangas **************************</c>
<c>************************************************</c>
<l>Get_MangasMax (PosibleManga1, PosibleManga2, PosibleManga3, MangasMAX)</l>
<c></c>
<l>* Get_CentroManga (PosibleManga1, Zma1, Xmc1, Ymb1, CentroManga1, Vector_Centro_Core1)</l>
<l>* Get_CentroManga (PosibleManga2, Zma2, Xmc2, Ymb2, CentroManga2, Vector_Centro_Core2)</l>
<l>* Get_CentroManga (PosibleManga3, Zma3, Xmc3, Ymb3, CentroManga2, Vector_Centro_Core3)</l>
<c></c>
<c></c>
<c></c>
<l>Get_RegionManga (PosibleManga1, PosibleManga1R)</l>
<l>Get_RegionManga (PosibleManga2, PosibleManga2R)</l>
<l>Get_RegionManga (PosibleManga3, PosibleManga3R)</l>
<c></c>
<c></c>
<c></c>
<l>Get_RegionManga (PosibleSprue1, PosibleSprue1R)</l>
<l>Get_RegionManga (PosibleSprue2, PosibleSprue2R)</l>
<l>Get_RegionManga (PosibleSprue3, PosibleSprue3R)</l>
<c></c>
<c></c>
<c>********************************************</c>
<c>* Experimental</c>
<c>********************************************</c>
<l>MagsTotales3D (Objeto_1, PosibleManga1R, Objeto_2, PosibleManga2R, Objeto_3,\
               PosibleManga3R, PosibleSprue1R, PosibleSprue2R, PosibleSprue3R, \
               mangasF1, mangasF2, mangasF3, \
               xa, ya, za, xb, yb, zb, xc, yc, zc, \
               Xmanga, Ymanga, Zmanga, \
               Parametros_Visualizacion, Valores_Visualizacion, \
               WindowHandle, Vector_BD_Core, SerialHandle, Pose_Robot, MangasTotales, Vector_BD_Core)</l>
<c></c>
<c></c>
<c></c>
<c>******************************************</c>
<c>* Enviar Base,largo y ancho al robot.</c>
<c>******************************************</c>
<l>Send_Data_Info ('----------------------------------------',SerialHandle)</l>
<l>Send_Data_Info ('### Enviando Info BASE PATTERN ###',SerialHandle)</l>
<c></c>
<l>create_pose (Vector_BD_Core.at(1).at(1), Vector_BD_Core.at(1).at(2), Vector_BD_Core.at(1).at(3), 0, 0, 0, 'Rp+T', 'gba', 'point', BaseRobot)</l>
<l>Send_Data_To_Robot(BaseRobot,SerialHandle)</l>
<c></c>
<c></c>
<l>Largo:=Vector_BD_Core.at(2).at(2)</l>
<l>Ancho:=Vector_BD_Core.at(3).at(2)</l>
<c></c>
<c></c>
<l>tuple_int (Largo, Largo)</l>
<l>tuple_int (Ancho, Ancho)</l>
<c></c>
<l>tuple_abs (Largo, Largo)</l>
<l>tuple_abs (Ancho, Ancho)</l>
<c></c>
<l>Tag:='_EV02_I_LargoPattern'</l>
<l>Send_EthernetIP_Data (Tag, Largo, SerialHandle)</l>
<l>Tag:='_EV02_I_AnchoPattern'</l>
<l>Send_EthernetIP_Data (Tag, Ancho, SerialHandle)</l>
<l>Send_Data_Info ('----------------------------------------',SerialHandle)</l>
<c></c>
<c></c>
<c></c>
<c>*******************************************</c>
<c>* Creo la base de datos dinamica  de R2</c>
<c>*******************************************</c>
<l>Make_BDD_Din_R2 (SerialHandle)</l>
<c>*******************************************</c>
<c>* Genero los datos a enviar en orden</c>
<c>*******************************************</c>
<l>Nelementos:=Vector_BD_Core.length()</l>
<c></c>
<l>for Entidad := 4 to Nelementos-1 by 1</l>
<l>  ID:=Entidad-3</l>
<l>  Elemento:=Entidad </l>
<l>  Send_To_BDD_R2 (Vector_BD_Core, Elemento, ID, SerialHandle)</l>
<c></c>
<l>endfor</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>dev_inspect_ctrl (Vector_BD_Core)</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Data_Sleeve_Sprue">
<parameters>
<parameter id="Camera_3"/>
<parameter id="NxLib"/>
<parameter id="Objeto_1"/>
<parameter id="Objeto_2"/>
<parameter id="Objeto_3"/>
<parameter id="Pose_Robot"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_BD_Core"/>
</parameters>
</docu>
</procedure>
<procedure name="Make_BDD_Din_R2">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>Limite:=50</l>
<l>Conteo:=Limite+1</l>
<l>Peticion     := 'MakeBDRobot2'</l>
<l>Variable_OPC := ''</l>
<c></c>
<l>Data:=Peticion+';'+Variable_OPC</l>
<c></c>
<l>while (Conteo&gt;Limite)</l>
<l>    Conteo:=0  </l>
<c> </c>
<l>    write_serial (SerialHandle, ords(Data))</l>
<c></c>
<l>    VarSerial:=0</l>
<c>    </c>
<l>    while(VarSerial&lt;1 and Conteo&lt;Limite)</l>
<c>        </c>
<c>        *Numero de caracteres a leer</c>
<l>        read_serial (SerialHandle, 20, Nchar)</l>
<l>        Nchar:= chrt(Nchar)</l>
<l>        tuple_number (Nchar, Variable)</l>
<l>        VarSerial:=|Nchar|</l>
<c>        </c>
<l>        Conteo:=Conteo+1</l>
<l>    endwhile</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>endwhile</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Make_BDD_Din_R2">
<parameters>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_To_BDD_R2">
<interface>
<ic>
<par name="Vector_BD_Core" base_type="ctrl" dimension="2"/>
<par name="Elemento" base_type="ctrl" dimension="0"/>
<par name="ID" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c></c>
<l>DataVision:=''</l>
<l>for Index := 0 to 6 by 1</l>
<c>    </c>
<l>  AuxVar:=Vector_BD_Core.at(Elemento).at(Index)</l>
<l> DataVision:=DataVision+AuxVar+';'</l>
<c></c>
<c>    </c>
<l>endfor</l>
<c></c>
<l> DataVision:=DataVision+ID</l>
<c></c>
<c></c>
<c></c>
<l>Limite:=50</l>
<l>Conteo:=Limite+1</l>
<l>Peticion     := 'insertBDRobot2'</l>
<l>Variable_OPC := DataVision</l>
<c></c>
<l>Data:=Peticion+';'+Variable_OPC</l>
<c></c>
<l>while (Conteo&gt;Limite)</l>
<l>    Conteo:=0  </l>
<c> </c>
<l>    write_serial (SerialHandle, ords(Data))</l>
<c></c>
<l>    VarSerial:=0</l>
<c>    </c>
<l>    while(VarSerial&lt;1 and Conteo&lt;Limite)</l>
<c>        </c>
<c>        *Numero de caracteres a leer</c>
<l>        read_serial (SerialHandle, 20, Nchar)</l>
<l>        Nchar:= chrt(Nchar)</l>
<l>        tuple_number (Nchar, Variable)</l>
<l>        VarSerial:=|Nchar|</l>
<c>        </c>
<l>        Conteo:=Conteo+1</l>
<l>    endwhile</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>endwhile</l>
<l>return ()</l>
</body>
<docu id="Send_To_BDD_R2">
<parameters>
<parameter id="Elemento"/>
<parameter id="ID"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_BD_Core"/>
</parameters>
</docu>
</procedure>
<procedure name="Bloque_0">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera_3" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
</ic>
<oc>
<par name="Vector_BD_Core" base_type="ctrl" dimension="2"/>
</oc>
</interface>
<body>
<l>        Resultado:=0</l>
<l>        Procesando:=1</l>
<l>        Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        * Configuracion de Parametros</c>
<l>        MinimumDisparity_Cam1:=-32</l>
<l>        NumberOfDisparities_Cam1:= 32</l>
<l>        Projector:='true'</l>
<l>        FrontLigth:='true'</l>
<l>        AutoExposure:='true'</l>
<l>        AutoGain:='true'</l>
<l>        Exposure := 1.8</l>
<l>        Gain:=1</l>
<l>        FlexView:=3</l>
<l>        Config_Parametros_Cam_R1 (NxLib, Camera_3, NumberOfDisparities_Cam1, MinimumDisparity_Cam1, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure, FlexView, TempCam)</l>
<c>        </c>
<c>        </c>
<l>*       Get_Img_Camera_R2 (ModelImage, Xm, Ym, Zm, ImgLeftCamera_1, NxLib, Camera_3, Escena3D_RAW)</l>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        ************  Capturo Imagenes **********************************************************************************************</c>
<l>        Get_Pallet_Model (Objeto_0, Objeto_1, Objeto_2, Objeto_3, Zobj1, Xobj1, Yobj1, Img_Left_Esquina, NxLib, Camera_3,\
                          Vector_Estado_Fx, SerialHandle, Pose_Robot, Escena3D_RAW, Base_esquina, Estado_Fx)</l>
<c></c>
<c>        ******************************************</c>
<c>      </c>
<l>        Get_Data_Sleeve_Sprue (Objeto_1, Objeto_2, Objeto_3, NxLib, Camera_3, Pose_Robot, SerialHandle, \
                               Vector_BD_Core)</l>
<c></c>
<c>        *******************************************</c>
<c>       </c>
<l>        Resultado:=1</l>
<l>        Procesando:=0</l>
<l>        Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<c>        </c>
<c>        </c>
<l>    Send_Data_Info ('#### Fin Bloque 0 #####',SerialHandle)</l>
<c>    </c>
<l>return ()</l>
</body>
<docu id="Bloque_0">
<parameters>
<parameter id="Camera_3"/>
<parameter id="NxLib"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_BD_Core"/>
<parameter id="Vector_Estado_Fx"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Tipo_Entidad_R2">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="TipoLoc" base_type="ctrl" dimension="0"/>
<par name="TipoSleeve" base_type="ctrl" dimension="0"/>
<par name="TipoLid" base_type="ctrl" dimension="0"/>
<par name="DiametroSleeve" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>        Tag:='Robot2'</l>
<l>        wait_seconds(0.01)</l>
<c></c>
<c></c>
<l>        Peticion     := 'Robot2'</l>
<l>        Data:=Peticion</l>
<c>        </c>
<l>        write_serial (SerialHandle, ords(Data))</l>
<l>        Conteo_Espera:=0</l>
<l>        VarSerial:=0</l>
<l>        while(VarSerial&lt;1 and Conteo_Espera&lt;10)    </l>
<l>            read_serial (SerialHandle, 150, Nchar)</l>
<l>            Nchar:= chrt(Nchar)</l>
<l>            tuple_number (Nchar, Variable)</l>
<l>            VarSerial:=|Nchar|</l>
<l>            Conteo_Espera:=Conteo_Espera+1</l>
<l>        endwhile</l>
<c></c>
<c>       </c>
<l>        tuple_split (Variable, ';', DataBDReceta)</l>
<l>        TipoLoc:=''</l>
<l>        TipoSleeve := ''</l>
<l>        TipoLid:=''</l>
<c>        </c>
<l>        for Index := 0 to |DataBDReceta|-1 by 1</l>
<c>            </c>
<l>               tuple_strrstr (DataBDReceta[Index], 'sleeve', SleeveExist)</l>
<l>               tuple_strrstr (DataBDReceta[Index], 'LOC', LocExist)</l>
<l>               tuple_strrstr (DataBDReceta[Index], 'LID', LidExist)</l>
<l>               if (SleeveExist&gt;=0)</l>
<l>                   TipoSleeve:=DataBDReceta[Index]</l>
<l>                   DiametroSleeve:=DataBDReceta[Index+1]</l>
<c>                   </c>
<l>               endif</l>
<l>               if (LocExist&gt;=0)</l>
<l>                   TipoLoc:=DataBDReceta[Index]</l>
<l>               endif</l>
<l>               if (LidExist&gt;=0)</l>
<l>                   TipoLid:=DataBDReceta[Index]</l>
<l>               endif</l>
<c>               </c>
<c>               </c>
<c>            </c>
<l>        endfor</l>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<l>return ()</l>
</body>
<docu id="Get_Tipo_Entidad_R2">
<parameters>
<parameter id="DiametroSleeve"/>
<parameter id="SerialHandle"/>
<parameter id="TipoLid"/>
<parameter id="TipoLoc"/>
<parameter id="TipoSleeve"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Tipo_Entidad">
<interface>
<ic>
<par name="TipoEntidad" base_type="ctrl" dimension="0"/>
<par name="TipoSleeve" base_type="ctrl" dimension="0"/>
<par name="TipoLoc" base_type="ctrl" dimension="0"/>
<par name="TipoLid" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Entidad" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>            Entidad:=''</l>
<l>               tuple_strrstr (TipoEntidad, 'Sleeve', SleeveExist)</l>
<l>               tuple_strrstr (TipoEntidad, 'LOC', LocExist)</l>
<l>               tuple_strrstr (TipoEntidad, 'LID', LidExist)</l>
<c>               </c>
<l>               if (SleeveExist&gt;=0)</l>
<l>                   Entidad:=TipoSleeve</l>
<l>               endif</l>
<l>               if (LocExist&gt;=0)</l>
<l>                   Entidad:=TipoLoc</l>
<l>               endif</l>
<l>               if (LidExist&gt;=0)</l>
<l>                   Entidad:=TipoLid</l>
<l>               endif</l>
<c>               </c>
<l>return ()</l>
</body>
<docu id="Get_Tipo_Entidad">
<parameters>
<parameter id="Entidad"/>
<parameter id="TipoEntidad"/>
<parameter id="TipoLid"/>
<parameter id="TipoLoc"/>
<parameter id="TipoSleeve"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Entidad_To_Go">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Vector_BD_Core" base_type="ctrl" dimension="2"/>
<par name="_EV2_O_CmdDatos" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="TipoSleeve" base_type="ctrl" dimension="0"/>
<par name="TipoLoc" base_type="ctrl" dimension="0"/>
<par name="TipoLid" base_type="ctrl" dimension="0"/>
<par name="Entidad" base_type="ctrl" dimension="0"/>
<par name="DiametroSleeve" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Send_Data_Info ('-----------------------------------------------------',SerialHandle)</l>
<l>Send_Data_Info ('### Inicio Bloque 1. Envio de datos por entidad ####',SerialHandle)</l>
<l>Send_Data_Info ('-----------------------------------------------------',SerialHandle)</l>
<c></c>
<l>Resultado:=0</l>
<l>Procesando:=1</l>
<l>Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<c></c>
<c></c>
<c></c>
<l>NEntindades:=Vector_BD_Core.length()-1</l>
<c></c>
<l>Idx_Solicitud:=_EV2_O_CmdDatos-100+3</l>
<c></c>
<l>Send_Data_Info ('Entidad Solicitada -&gt; '+ (Idx_Solicitud-3),SerialHandle)</l>
<c></c>
<l>Get_Tipo_Entidad_R2 (SerialHandle, TipoLoc, TipoSleeve, TipoLid, DiametroSleeve)</l>
<c></c>
<c></c>
<l>if (Idx_Solicitud&lt;=NEntindades)</l>
<l>    TipoEntidad:=Vector_BD_Core.at(Idx_Solicitud).at(0)</l>
<c>    </c>
<c>    </c>
<l>    Send_Data_Info ('Tipo Entidad Solicitada -&gt; '+ TipoEntidad,SerialHandle)</l>
<c>    </c>
<c>    </c>
<l>    Get_Tipo_Entidad (TipoEntidad, TipoSleeve, TipoLoc, TipoLid, Entidad)</l>
<c>    </c>
<l>    TipoEntidad    :=TipoEntidad        </l>
<l>    Send_Data_Info ('Codigo Entidad Solicitada -&gt; '+ TipoEntidad,SerialHandle)</l>
<c>    </c>
<l>    tuple_strrstr (TipoEntidad, 'Sprue', SprueExist)</l>
<c>    </c>
<l>    Entidad:=TipoEntidad</l>
<l>    if (SprueExist&gt;=0)   </l>
<l>        create_pose (Vector_BD_Core.at(Idx_Solicitud).at(1),\
                     Vector_BD_Core.at(Idx_Solicitud).at(2),\
                     Vector_BD_Core.at(Idx_Solicitud).at(3), 0, 0, Vector_BD_Core.at(Idx_Solicitud).at(6), 'Rp+T', 'gba', 'point', BaseRobot)</l>
<l>    else</l>
<l>        create_pose (Vector_BD_Core.at(Idx_Solicitud).at(1),\
                     Vector_BD_Core.at(Idx_Solicitud).at(2),\
                     Vector_BD_Core.at(Idx_Solicitud).at(3), 0, 0, 0, 'Rp+T', 'gba', 'point', BaseRobot)</l>
<l>    endif</l>
<c>    </c>
<c>    </c>
<l>    Send_Data_To_Robot(BaseRobot,SerialHandle)</l>
<c>    </c>
<c>    </c>
<l>    TagToWrite:='_EV02_I_NumEntidad'</l>
<l>    ElementosExiste:=100</l>
<l>    Send_EthernetIP_Data (TagToWrite, ElementosExiste, SerialHandle)</l>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    Resultado:=1</l>
<l>    Procesando:=0</l>
<l>    Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>    Send_Data_Info ('-----------------------------------------------------',SerialHandle)</l>
<l>    Send_Data_Info ('### Fin Bloque 1 ###',SerialHandle)</l>
<l>    Send_Data_Info ('-----------------------------------------------------',SerialHandle)</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>else</l>
<c>    </c>
<c>    </c>
<c>    *********************************************</c>
<c>    *Envio el 255 de que no existe mas entidades</c>
<c>    *********************************************</c>
<l>    TagToWrite:='_EV02_I_NumEntidad'</l>
<l>    FinDeElementos:=255</l>
<l>    Send_EthernetIP_Data (TagToWrite, FinDeElementos, SerialHandle)</l>
<c>    </c>
<l>    Resultado:=1</l>
<l>    Procesando:=0</l>
<l>    Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>    Send_Data_Info ('-----------------------------------------------------',SerialHandle)</l>
<l>    Send_Data_Info ('### Fin Bloque 1 ###',SerialHandle)</l>
<c>    </c>
<c>    </c>
<l>endif</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Entidad_To_Go">
<parameters>
<parameter id="DiametroSleeve"/>
<parameter id="Entidad"/>
<parameter id="SerialHandle"/>
<parameter id="TipoLid"/>
<parameter id="TipoLoc"/>
<parameter id="TipoSleeve"/>
<parameter id="Vector_BD_Core"/>
<parameter id="_EV2_O_CmdDatos"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Centro_Manga">
<interface>
<io>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="Width" base_type="ctrl" dimension="0"/>
<par name="Height" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="FlagPtroX" base_type="ctrl" dimension="0"/>
<par name="FlagPtroY" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>        FlagPtroX := 0</l>
<c>        </c>
<l>        for PtroX := 100 to Width-1 by 1</l>
<c>            </c>
<l>            get_grayval (X, 20,   PtroX, ValX1)</l>
<l>            get_grayval (X, 100,  PtroX, ValX2)</l>
<l>            get_grayval (X, 200,  PtroX, ValX3)</l>
<l>            get_grayval (X, 400,  PtroX, ValX4)</l>
<l>            get_grayval (X, 800,  PtroX, ValX5)</l>
<l>            get_grayval (X, 1023, PtroX, ValX6)</l>
<c>            </c>
<l>            Vector:=[ValX1,ValX2,ValX3,ValX4,ValX5,ValX6]</l>
<c>            </c>
<c>            </c>
<l>            for Index := 0 to |Vector|-1 by 1</l>
<c>                </c>
<l>                if (Vector[Index]&gt;0 and Vector[Index]&lt;=2)</l>
<l>                    FlagPtroX:=PtroX   </l>
<l>                    break</l>
<l>                endif</l>
<c>                </c>
<l>            endfor</l>
<l>        endfor</l>
<c>        </c>
<c>        </c>
<c>        </c>
<l>        FlagPtroY:=[]</l>
<l>        for PtroY := 100 to Height-1 by 1</l>
<c>            </c>
<l>            get_grayval (Y,    PtroY,20, ValX1)</l>
<l>            get_grayval (Y,   PtroY, 100,ValX2)</l>
<l>            get_grayval (Y,   PtroY, 200,ValX3)</l>
<l>            get_grayval (Y,   PtroY, 400,ValX4)</l>
<l>            get_grayval (Y,   PtroY, 800,ValX5)</l>
<l>            get_grayval (Y,  PtroY, 1023,ValX6)</l>
<c>            </c>
<l>            Vector:=[ValX1,ValX2,ValX3,ValX4,ValX5,ValX6]</l>
<c>            </c>
<c>            </c>
<l>            for Index := 0 to |Vector|-1 by 1</l>
<c>                </c>
<l>                if (Vector[Index]&gt;-50 and Vector[Index]&lt;=-40)</l>
<l>                    FlagPtroY:=PtroY   </l>
<l>                    break</l>
<l>                endif</l>
<c>                </c>
<l>            endfor</l>
<l>        endfor</l>
<l>return ()</l>
</body>
<docu id="Get_Centro_Manga">
<parameters>
<parameter id="FlagPtroX"/>
<parameter id="FlagPtroY"/>
<parameter id="Height"/>
<parameter id="Width"/>
<parameter id="X"/>
<parameter id="Y"/>
</parameters>
</docu>
</procedure>
<procedure name="GetPitutoRegion">
<interface>
<io>
<par name="Zm" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Regions_PattSup" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="index_protection_Inf" base_type="ctrl" dimension="0"/>
<par name="index_protection_Sup" base_type="ctrl" dimension="0"/>
<par name="Umbral" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c></c>
<c></c>
<c>    * ********************************************************</c>
<c>    * 1.-  !!!!!!!!! threshols dinamico!!!!!!!!!!!!!!!!!!!!!!!!!!</c>
<c>    * ********************************************************</c>
<l>    threshold (Zm, RegZRed, 5, 2000)</l>
<l>    reduce_domain (Zm, RegZRed, ZRed)</l>
<l>    escala := 255.0/2000.0</l>
<l>    scale_image (ZRed, HeightMap_Scalada, escala, 0)</l>
<l>    threshold (HeightMap_Scalada, HeightMap_Region, 0, 255)</l>
<l>    gray_histo_range (HeightMap_Region, HeightMap_Scalada, 0, 255, 256, Histo, BinSize)</l>
<l>    tuple_sum (Histo, Sum_Histo)</l>
<c>    </c>
<c>    </c>
<c>  </c>
<c>    </c>
<c>    </c>
<l>* # #########################################################</l>
<l>* # ### Mientras mas grabnde menos sensible a cambios #######   </l>
<l>    Mascara := 1</l>
<l>* # ########################################################</l>
<c>    * </c>
<l>    Vector_Distribucion := []</l>
<l>    init_vector := 255</l>
<l>    flag_vector := 0</l>
<l>    aux_suma := 0.0</l>
<c>    * </c>
<l>    for Index := init_vector to 0 by -1</l>
<c>        * </c>
<l>        Vector_Distribucion[Index] := aux_suma+Histo[Index]*100.0/ Sum_Histo</l>
<l>        aux_suma := Vector_Distribucion[Index]</l>
<l>    endfor</l>
<c>    * </c>
<l>    Derivada := []</l>
<l>    Factor_Der := 1000</l>
<l>    Mascara := 3</l>
<l>    for Index := init_vector to 50 by -Mascara</l>
<c>        * </c>
<l>        Derivada[Index] := abs(Vector_Distribucion[Index]-Vector_Distribucion[Index-Mascara])*Factor_Der</l>
<c>        * </c>
<l>    endfor</l>
<c> </c>
<c>    </c>
<l>    create_funct_1d_array (Derivada, Function)</l>
<l>    dev_inspect_ctrl (Function)</l>
<c>    * *********************************************************</c>
<c>    * * Busco el primer cambio brusco de posicion *************</c>
<c>    * * El umbral de cambio es Aux_Val_Max ********************</c>
<c>    * *********************************************************</c>
<c>    * </c>
<l>    Aux_Val_Max := Umbral</l>
<l>    Flag_indx_max := 255</l>
<l>    for Index := 0 to 160 by Mascara</l>
<c>        * </c>
<l>        if (Derivada[Index]&gt;Aux_Val_Max)</l>
<l>            Aux_Val_Max := Derivada[Index]</l>
<l>            Flag_indx_max := Index</l>
<l>            break</l>
<l>        endif</l>
<c>        * </c>
<l>    endfor</l>
<c></c>
<c></c>
<c>    * ***********************************************************</c>
<c>    * * Desviacion luego de  detectar el cambio brusco **********</c>
<c>    * ***********************************************************</c>
<c>    * </c>
<l>* # #########################################################</l>
<l>* # ######## Grado de proteccion para moverse entre el </l>
<l>* # ####### histograma</l>
<l>  * index_protection_Inf := 30</l>
<l>  *  index_protection_Sup := 20</l>
<l>* # #########################################################</l>
<c>    * </c>
<l>    Alt_Min := Flag_indx_max-index_protection_Inf</l>
<l>    Alt_Max := Flag_indx_max+index_protection_Sup</l>
<l>    threshold (HeightMap_Scalada, Regions_PattSup, Alt_Min, Alt_Max)</l>
<l>return ()</l>
</body>
<docu id="GetPitutoRegion">
<parameters>
<parameter id="Regions_PattSup"/>
<parameter id="Umbral"/>
<parameter id="Zm"/>
<parameter id="index_protection_Inf"/>
<parameter id="index_protection_Sup"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_mangaPituto">
<interface>
<ic>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera_3" base_type="ctrl" dimension="0"/>
<par name="DiametroSleeve" base_type="ctrl" dimension="0"/>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="TipoLoc" base_type="ctrl" dimension="0"/>
<par name="TipoLid" base_type="ctrl" dimension="0"/>
<par name="Entidad" base_type="ctrl" dimension="0"/>
<par name="Vector_BD_Core" base_type="ctrl" dimension="2"/>
</ic>
<oc>
<par name="PuntoManga" base_type="ctrl" dimension="0"/>
<par name="PuntoPituto" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Resultado:=0</l>
<l>Procesando:=1</l>
<l>Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<c></c>
<l>tuple_strrstr (Entidad, 'Sprue', SprueExist)</l>
<c></c>
<c></c>
<c></c>
<l>MinimumDisparity_Cam1:=-64</l>
<l>NumberOfDisparities_Cam1:= 128</l>
<l>Projector:='true'</l>
<l>FrontLigth:='true'</l>
<l>AutoExposure:='true'</l>
<l>AutoGain:='true'</l>
<l>Gain:=1</l>
<l>FlexView:=2</l>
<l>Exposure:=1</l>
<l>get_dinamic_Image (ModelImage, X, Y, Z, ImgLeftCamera, Gris, NxLib, Camera_3, \
                   NumberOfDisparities_Cam1, MinimumDisparity_Cam1, Projector,\
                   FrontLigth, AutoExposure, AutoGain, Gain, Exposure)</l>
<c></c>
<c></c>
<c></c>
<l>* read_image (ModelImage, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/13.- Ensenso N35/R2/FotoACercamiento3.hobj')</l>
<c></c>
<l>* read_image (Gris, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/13.- Ensenso N35/R2/FotoACercamiento3_Gris.hobj')</l>
<c></c>
<l>dev_display (Gris)</l>
<c></c>
<c></c>
<c></c>
<l>if (SprueExist&gt;=0 )</l>
<c>    </c>
<l>    select_obj (ModelImage, Objeto, 3)</l>
<l>    Get_Foto_3D (Objeto, Zm, Ym, Xm, PosibleSprue, PosibleManga, NxLib, Camera_3, Escena3D)</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    deltaLimiteInferior:=30</l>
<l>    deltaLimiteSuperior:=20</l>
<l>    GetMaxAlturaUmbral (Zm, PosibleSprueMax, deltaLimiteInferior, deltaLimiteSuperior)</l>
<l>    dilation_rectangle1 (PosibleSprueMax, PosibleSprueMax, 4,4)</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    connection (PosibleSprueMax, SpruesPosibles)</l>
<l>    select_shape (SpruesPosibles, PosibleSprue, 'rectangularity', 'and', 0.7, 1)</l>
<l>    select_shape (SpruesPosibles, PosibleSprue, 'area', 'and', 40000, 70000)</l>
<l>    select_shape_std (PosibleSprue, PosibleSprue, 'max_area', 70)</l>
<c>    </c>
<c>    </c>
<l>    shape_trans (PosibleSprue, SprueAngular, 'rectangle2')</l>
<l>    region_features (SprueAngular, 'phi', AnguloRad)</l>
<l>    tuple_deg (AnguloRad, AnguloDeg)</l>
<c>    </c>
<c></c>
<c>    </c>
<c>    </c>
<l>    area_center (PosibleSprue, Nesprues, Row, Column)</l>
<c>    </c>
<c>    </c>
<l>    compose3 (Xm, Ym, Zm, CentroSprue)</l>
<l>    get_grayval (CentroSprue, Row, Column, PuntosSprues)</l>
<c>    </c>
<c>    </c>
<l>    OffsetZ_Sprue:=13</l>
<c>    </c>
<l>    create_pose (PuntosSprues[0],\
                 PuntosSprues[1],\
                 PuntosSprues[2]+OffsetZ_Sprue, 0, 0, AnguloDeg, 'Rp+T', 'gba', 'point', BaseRobot)</l>
<l>    Send_Data_To_Robot(BaseRobot,SerialHandle)</l>
<c>    </c>
<l>    TagToWrite:='_EV02_I_NumEntidad'</l>
<l>    EntidadSprue:=8</l>
<l>    Send_EthernetIP_Data (TagToWrite, EntidadSprue, SerialHandle)</l>
<c>    </c>
<c>    ***********************************</c>
<c>    *Obtengo EL SEGMENTO DEL  pattern</c>
<c>    ***********************************</c>
<l>    Pattern := '6000210' </l>
<c>    ***********************************</c>
<c>    </c>
<l>    Get_PosSprue (Pattern, SerialHandle, PosicionSprue)</l>
<c>    </c>
<l>    TagToWrite:='_EV02_I_Segmento'</l>
<l>    EntidadSprue:=8</l>
<l>    Send_EthernetIP_Data (TagToWrite, PosicionSprue, SerialHandle)</l>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    Resultado:=1</l>
<l>    Procesando:=0</l>
<l>    Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    return()</l>
<c>    </c>
<l>endif</l>
<c></c>
<c></c>
<l>select_obj (ModelImage, ObjectSelected, 3)</l>
<l>decompose3 (ObjectSelected, X, Y, Z)</l>
<c>*******************************</c>
<c>* busco el 0,-50</c>
<c>*******************************</c>
<c></c>
<l>get_image_size (X, Width, Height)</l>
<c></c>
<c></c>
<l>Get_Centro_Manga (X, Y, Width, Height, FlagPtroX, FlagPtroY)</l>
<c></c>
<c></c>
<l>dev_get_window (WindowHandle)</l>
<l>disp_cross (WindowHandle, FlagPtroY, FlagPtroX, 50, 0)</l>
<c></c>
<l>get_grayval (X, FlagPtroY, FlagPtroX, Grayval)</l>
<l>get_grayval (X, FlagPtroY, FlagPtroX+100, Grayval2)</l>
<c></c>
<c></c>
<c>**************************************</c>
<c>*Busco el diametro de la manga en BDD</c>
<c>**************************************</c>
<c></c>
<c></c>
<l>tuple_number(DiametroSleeve, Diametro)</l>
<l>gen_circle (ROI_0, FlagPtroY-20, FlagPtroX, Diametro+55)</l>
<c></c>
<l>compose3 (X, Y, Z, Objeto)</l>
<l>reduce_domain (Objeto, ROI_0, ObjetoRed)</l>
<c></c>
<c></c>
<l>Get_Foto_3D (ObjetoRed, Zm, Ym, Xm, PosibleSprue, PosibleManga, NxLib, Camera_3, Escena3D)</l>
<c></c>
<l>reduce_domain (Objeto, ROI_0, ImageReduced)</l>
<l>decompose3 (ImageReduced, Xr, Yr, Zr)</l>
<c></c>
<l>GetMaxAlturaUmbralVector(Zr, AlturaManga, 20, 1)</l>
<c></c>
<l>dev_display (AlturaManga)</l>
<l>connection (AlturaManga, ConnectedRegions)</l>
<c></c>
<l>select_shape_std (ConnectedRegions, AlturaManga, 'max_area', 70)</l>
<c></c>
<l>reduce_domain (Zr, AlturaManga, Zrr)</l>
<c></c>
<c></c>
<l>xyz_to_object_model_3d (Xr, Yr, Zrr, Manga)</l>
<l>smooth_object_model_3d (Manga, 'mls', 'mls_kNN', 400, SmoothObjectModel3D)</l>
<c></c>
<c></c>
<c>**Visualizar_3D ([SmoothObjectModel3D], Parametros_Visualizacion, Valores_Visualizacion, 1, [], [], [], PoseOut1)</c>
<c></c>
<l>get_object_model_3d_params (SmoothObjectModel3D, 'center', PuntoManga)</l>
<c></c>
<l>get_image_size (ModelImage, Width, Height)</l>
<l>disp_cross (WindowHandle, Width[0]*0.5, Height[0]*0.5, 50, 0)</l>
<c>***************************************</c>
<c>*Pituto</c>
<c>*******************************************</c>
<c></c>
<c></c>
<l>complement (AlturaManga, RegionComplement)</l>
<l>connection (RegionComplement, ConnectedRegions1)</l>
<c></c>
<c></c>
<l>select_shape (ConnectedRegions1, SelectedRegions, 'circularity', 'and', 0.8, 1)</l>
<l>erosion_circle (SelectedRegions, RegionErosion, 15.5)</l>
<l>select_shape_std (RegionErosion, RegionErosion, 'max_area', 70)</l>
<c></c>
<c></c>
<l>reduce_domain (Z, RegionErosion, ZonaPituto)</l>
<c></c>
<c></c>
<c>***********************************************</c>
<c>* Saco desde la imagen de grises</c>
<c>************************************************</c>
<c></c>
<c></c>
<l>select_obj (Gris, GrisImg, 1)</l>
<l>reduce_domain (GrisImg, ZonaPituto, ImageReduced2)</l>
<c></c>
<c></c>
<l>threshold (ImageReduced2, Locilzador, 220, 255)</l>
<l>connection (Locilzador, ConnectedRegions4)</l>
<l>select_shape_std (ConnectedRegions4, Locilzador, 'max_area', 70)</l>
<c></c>
<c></c>
<l>reduce_domain (Z, Locilzador, ZredLoc)</l>
<l>reduce_domain (Y, Locilzador, YredLoc)</l>
<l>reduce_domain (X, Locilzador, XredLoc)</l>
<c></c>
<l>xyz_to_object_model_3d (XredLoc, YredLoc, ZredLoc, Localizador3D)</l>
<c></c>
<c></c>
<l>smooth_object_model_3d (Localizador3D, 'mls', 'mls_kNN', 400, SmoothObjectModel3D1)</l>
<c></c>
<c>**Visualizar_3D ([SmoothObjectModel3D1], Parametros_Visualizacion, Valores_Visualizacion, 1, [], [], [], PoseOut1)</c>
<c></c>
<c></c>
<c></c>
<l>get_object_model_3d_params (SmoothObjectModel3D1, 'center', CentroPituto)</l>
<c></c>
<c></c>
<l>get_AutoThres (ZonaPituto, BasePit)</l>
<l>select_shape (BasePit, SelectedRegions, 'struct_factor', 'and', 0, 1)</l>
<l>* fill_up (Locilzador, Locilzador)</l>
<c></c>
<l>* GetPitutoRegion (ZonaPituto, Pituto, 5, 2, 8000)</l>
<l>connection (Locilzador, ConnectedRegions2)</l>
<c></c>
<l>select_shape (ConnectedRegions2, SelectedRegions, 'circularity', 'and', 0.6, 1)</l>
<l>select_shape_std (SelectedRegions, SelectedRegions1, 'max_area', 70)</l>
<c></c>
<l>erosion_circle (SelectedRegions1, RegionErosion1, 10.5)</l>
<l>reduce_domain (Z, SelectedRegions1, ImageReduced1)</l>
<c></c>
<c></c>
<c></c>
<l>local_min (ImageReduced1, LocalMinima)</l>
<c></c>
<l>connection (LocalMinima, ConnectedRegions3)</l>
<l>area_center (ConnectedRegions3, Area, Row, Column)</l>
<l>get_grayval (Z, Row, Column, Grayval1)</l>
<c></c>
<l>for Index := 0 to |Grayval1|-1 by 1</l>
<l>    if (Grayval1[Index]&lt;200)</l>
<l>        Grayval1[Index]:=10e3</l>
<l>    endif</l>
<c>    </c>
<l>endfor</l>
<l>tuple_min (Grayval1, AlTuraPituto)</l>
<c></c>
<c></c>
<l>CentroPituto[2]:=AlTuraPituto</l>
<c></c>
<c></c>
<c>***********************</c>
<c>* Envio datos</c>
<c>***********************</c>
<c></c>
<l>Send_Data_Info ('### Envio de datos MANGA ###',SerialHandle)</l>
<l>create_pose (PuntoManga[0], PuntoManga[1], PuntoManga[2], 0, 0, 0, 'Rp+T', 'gba', 'point', PuntoMangaToSend)</l>
<l>Send_Data_To_Robot (PuntoMangaToSend, SerialHandle)</l>
<c></c>
<l>OffsetZ_Localizador:=5</l>
<l>create_pose (CentroPituto[0], CentroPituto[1], CentroPituto[2]+OffsetZ_Localizador, 0, 0, 0, 'Rp+T', 'gba', 'point', CentroPitutoToSend)</l>
<l>Send_Data_To_BDD2 (CentroPitutoToSend, SerialHandle)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c>************************</c>
<c>*Segmento los locailzados y mangas</c>
<c>************************</c>
<c></c>
<l>tuple_split (TipoLoc, 'LOC', SegmentoLoc)</l>
<l>tuple_split (TipoLid, 'LID', SegmentoLid)</l>
<c></c>
<c></c>
<l>tuple_number (SegmentoLoc, SegmentoLoc)</l>
<l>tuple_number (SegmentoLid, SegmentoLid)</l>
<c></c>
<l>TagToWrite:='_EV02_I_Segmento'</l>
<l>Send_EthernetIP_Data (TagToWrite, SegmentoLid, SerialHandle)</l>
<l>TagToWrite:='_EV02_I_Segmento2'</l>
<l>Send_EthernetIP_Data (TagToWrite, SegmentoLoc, SerialHandle)</l>
<c></c>
<l>tuple_strchr(Entidad,'sleeve',ExisteLid)</l>
<l>tuple_strchr(Entidad,'sprue',ExisteSprue)</l>
<c></c>
<l>if (ExisteLid&gt;=0)</l>
<c>    </c>
<l>    TagToWrite:='_EV02_I_NumEntidad'</l>
<l>    EntidadTapa:=6</l>
<l>    Send_EthernetIP_Data (TagToWrite, EntidadTapa, SerialHandle)</l>
<c>    </c>
<l>elseif(ExisteSprue&gt;=0)</l>
<c>    </c>
<l>    TagToWrite:='_EV02_I_NumEntidad'</l>
<l>    EntidadSprue:=8</l>
<l>    Send_EthernetIP_Data (TagToWrite, EntidadSprue, SerialHandle)</l>
<c>    </c>
<l>endif</l>
<c></c>
<c></c>
<c></c>
<l>Resultado:=1</l>
<l>Procesando:=0</l>
<l>Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<c></c>
<c></c>
<l>Send_Data_Info ('-----------------------------------------------------',SerialHandle)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_mangaPituto">
<parameters>
<parameter id="Camera_3"/>
<parameter id="DiametroSleeve"/>
<parameter id="Entidad"/>
<parameter id="NxLib"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="PuntoManga"/>
<parameter id="PuntoPituto"/>
<parameter id="SerialHandle"/>
<parameter id="TipoLid"/>
<parameter id="TipoLoc"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="Vector_BD_Core"/>
</parameters>
</docu>
</procedure>
<procedure name="get_AutoThres">
<interface>
<io>
<par name="Zm" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Regions" base_type="iconic" dimension="0"/>
</oo>
</interface>
<body>
<l>            threshold (Zm, RegZRed, 5, 2000)</l>
<l>    reduce_domain (Zm, RegZRed, ZRed)</l>
<l>    escala := 255.0/2000.0</l>
<l>    scale_image (ZRed, HeightMap_Scalada, escala, 0)</l>
<l>    threshold (HeightMap_Scalada, HeightMap_Region, 0, 255)</l>
<l>    gray_histo_range (HeightMap_Region, HeightMap_Scalada, 0, 255, 256, Histo, BinSize)</l>
<l>    tuple_sum (Histo, Sum_Histo)</l>
<c>    </c>
<c>    </c>
<l>    auto_threshold (HeightMap_Scalada, Regions, 0.2)</l>
<c>    </c>
<l>return ()</l>
</body>
<docu id="get_AutoThres">
<parameters>
<parameter id="Regions"/>
<parameter id="Zm"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_Data_To_BDD2">
<interface>
<ic>
<par name="Pose_Refinada" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>    convert_pose_type (Pose_Refinada, 'Rp+T', 'abg', 'point', Pose_Refinada_Tp2)</l>
<l>    for Index := 0 to |Pose_Refinada|-2 by 1</l>
<l>        VR_PosicionEsquinaPallet[Index]:=Pose_Refinada[Index]      </l>
<l>    endfor</l>
<c>   </c>
<c>   </c>
<c>    ********************************</c>
<c>    * Enviar por ETHERNETIP</c>
<c>    ********************************</c>
<l>    Variable_Pos:=['X','Y','Z','C','B','A']</l>
<l>    for Index_Var:= 0 to |VR_PosicionEsquinaPallet|-1 by 1</l>
<l>        Tag_Destino:='_EBD2_I_Eje'+Variable_Pos[Index_Var]</l>
<l>        Variable:=VR_PosicionEsquinaPallet[Index_Var]</l>
<l>        Send_EthernetIP_Data (Tag_Destino, Variable, SerialHandle)</l>
<l>  *wait_seconds (0.1)</l>
<l>    endfor</l>
<l>return ()</l>
<c></c>
<c></c>
</body>
<docu id="Send_Data_To_BDD2">
<parameters>
<parameter id="Pose_Refinada"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Roi_Tapa">
<interface>
<oo>
<par name="RackTapas" base_type="iconic" dimension="0"/>
</oo>
</interface>
<body>
<l>* gen_circle (ROI_Tapa_1, 510.839, 46.7247, 78.161)      </l>
<c></c>
<c></c>
<l>gen_circle (ROI_Tapa_1, 524.974, 25.1979, 19.1257)</l>
<l>gen_circle (ROI_Tapa_2, 529.36, 324.434, 78.161)      </l>
<l>gen_circle (ROI_Tapa_3, 535.975, 582.407, 60.8579)</l>
<l>gen_circle (ROI_Tapa_4, 535.975, 789.632, 60.8579)</l>
<l>gen_circle (ROI_Tapa_5, 598.5, 993.25, 37.5366)</l>
<l>gen_circle (ROI_Tapa_6, 436.5, 1003.25, 16)</l>
<l>gen_circle (ROI_Tapa_7, 624.684, 1169.63, 16)</l>
<l>gen_circle (ROI_Tapa_8, 453.517, 1170.88, 16)</l>
<c></c>
<c></c>
<l>concat_obj(ROI_Tapa_1, ROI_Tapa_2, RackTapas)     </l>
<l>concat_obj(RackTapas, ROI_Tapa_3, RackTapas)</l>
<l>concat_obj(RackTapas, ROI_Tapa_4, RackTapas)</l>
<l>concat_obj(RackTapas, ROI_Tapa_5, RackTapas)</l>
<l>concat_obj(RackTapas, ROI_Tapa_6, RackTapas)       </l>
<l>concat_obj(RackTapas, ROI_Tapa_7, RackTapas)</l>
<l>concat_obj(RackTapas, ROI_Tapa_8, RackTapas)</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Roi_Tapa">
<parameters>
<parameter id="RackTapas"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_PosSprue">
<interface>
<ic>
<par name="Pattern" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="PosicionSprue" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Peticion     := 'RamSprue'</l>
<c></c>
<c></c>
<l>Data:=Peticion+';'+Pattern</l>
<c></c>
<l>write_serial (SerialHandle, ords(Data))</l>
<l>Conteo_Espera:=0</l>
<l>VarSerial:=0</l>
<l>while(VarSerial&lt;1 and Conteo_Espera&lt;10)    </l>
<l>    read_serial (SerialHandle, 20, Nchar)</l>
<l>    Nchar:= chrt(Nchar)</l>
<l>    tuple_number (Nchar, Variable)</l>
<l>    VarSerial:=|Nchar|</l>
<l>    Conteo_Espera:=Conteo_Espera+1</l>
<l>endwhile</l>
<c> </c>
<c></c>
<c></c>
<l>tuple_split (Variable, ';', DataSprue)</l>
<c>    </c>
<c></c>
<l>PosicionSprue:=DataSprue[1]</l>
<l>return ()</l>
</body>
<docu id="Get_PosSprue">
<parameters>
<parameter id="Pattern"/>
<parameter id="PosicionSprue"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_Altura_Tapas">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera_3" base_type="ctrl" dimension="0"/>
<par name="_EV2_O_CmdDatos" base_type="ctrl" dimension="0"/>
<par name="TipoLid" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>        Send_Data_Info ('-----------------------------------------------------',SerialHandle)</l>
<l>        Send_Data_Info ('### Inicio Bloque Rack Tapas. Envio de datos por entidad ####',SerialHandle)</l>
<l>        Send_Data_Info ('-----------------------------------------------------',SerialHandle)</l>
<c>        </c>
<c>        </c>
<l>        Send_Data_Info (' ### inicio Bloque 2  RACK TAPAS###',SerialHandle)</l>
<l>        Resultado:=0</l>
<l>        Procesando:=1</l>
<l>        Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<c>        </c>
<c>        </c>
<c>        </c>
<l>        MinimumDisparity_Cam1:=-64</l>
<l>        NumberOfDisparities_Cam1:= 128</l>
<l>        Projector:='true'</l>
<l>        FrontLigth:='true'</l>
<l>        AutoExposure:='true'</l>
<l>        AutoGain:='true'</l>
<l>        Gain:=1</l>
<l>        FlexView:=2</l>
<l>        Exposure:=1</l>
<l>        get_dinamic_Image (ModelImage, X, Y, Z, ImgLeftCamera, Gris, NxLib, Camera_3, \
                           NumberOfDisparities_Cam1, MinimumDisparity_Cam1, Projector,\
                           FrontLigth, AutoExposure, AutoGain, Gain, Exposure)</l>
<c>        </c>
<c>        </c>
<c></c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<l>         read_object (ModelImage, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/13.- Ensenso N35/R2/RackTAPAS2.hobj')</l>
<l>        select_obj (ModelImage, ComposeImg, 3)</l>
<l>        decompose3 (ComposeImg, X, Y, Z)</l>
<c>        </c>
<c>       </c>
<l>        tuple_split (TipoLid, 'LID', NTapa)</l>
<l>        tuple_number (NTapa, Ntapa)</l>
<c>        </c>
<l>         Get_Roi_Tapa (RackTapas)</l>
<c>        </c>
<l>        Ntapa:=6</l>
<l>          Send_Data_Info ('### RACK Numero -&gt;  ####'+Ntapa,SerialHandle)</l>
<l>        select_obj (RackTapas, Tapa, Ntapa)</l>
<c>        </c>
<l>        reduce_domain (Z, Tapa, RegionTapaZ)</l>
<l>        reduce_domain (Y, Tapa, RegionTapaY)</l>
<l>        reduce_domain (X, Tapa, RegionTapaX)</l>
<c>        </c>
<c>        </c>
<l>        gauss_filter (RegionTapaZ, RegionTapaZ, 11)</l>
<c>        </c>
<l>        local_min (RegionTapaZ, LocalMinima)</l>
<l>        connection (LocalMinima, ConnectedRegions)</l>
<l>        area_center (ConnectedRegions, Area, Row, Column)</l>
<c>        </c>
<l>        get_grayval (Z, Row, Column, Grayval)</l>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<l>        tuple_max (Grayval, AlturaTapa)</l>
<c>        </c>
<l>        UmbralMinimo:=1500</l>
<l>        if (AlturaTapa&lt;UmbralMinimo)</l>
<l>              Resultado:=1</l>
<l>        Procesando:=0</l>
<l>        Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>          Resultado:=2</l>
<l>        Procesando:=0</l>
<l>        Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<c>        </c>
<l>            return()</l>
<c>            </c>
<l>        endif</l>
<c>        ***********************</c>
<c>        * Enviar altura de Lid</c>
<c>        ************************</c>
<l>        Tag:='_EV02_I_EjeZZ'</l>
<l>        tuple_int (AlturaTapa, AlturaTapa)</l>
<c></c>
<l>        Offset_Z:=15</l>
<l>        Send_EthernetIP_Data (Tag, AlturaTapa+Offset_Z, SerialHandle)</l>
<c>        </c>
<l>        Send_Data_Info ('Al tura de tapa encontrada  -&gt; '+AlturaTapa,SerialHandle)</l>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<l>        Resultado:=1</l>
<l>        Procesando:=0</l>
<l>        Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<c>        </c>
<l>        Send_Data_Info ('-----------------------------------------------------',SerialHandle)</l>
<l>        Send_Data_Info ('### Fin Bloque Rack Tapas.  ####',SerialHandle)</l>
<l>        Send_Data_Info ('-----------------------------------------------------',SerialHandle)</l>
<c>        </c>
<l>return ()</l>
</body>
<docu id="Send_Altura_Tapas">
<parameters>
<parameter id="Camera_3"/>
<parameter id="NxLib"/>
<parameter id="SerialHandle"/>
<parameter id="TipoLid"/>
<parameter id="_EV2_O_CmdDatos"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Exist_Image">
<interface>
<io>
<par name="PosibleMangas_F3" base_type="iconic" dimension="0"/>
</io>
<oc>
<par name="Existe" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>try</l>
<c>    </c>
<c>    </c>
<l>area_center (PosibleMangas_F3, Existe, Row1, Column1)</l>
<c></c>
<l>catch (Exception)</l>
<c></c>
<l>Existe:=0</l>
<c></c>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="Get_Exist_Image">
<parameters>
<parameter id="Existe"/>
<parameter id="PosibleMangas_F3"/>
</parameters>
</docu>
</procedure>
<procedure name="Config_Parametros_Cam_R1_COPY_1">
<interface>
<ic>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera" base_type="ctrl" dimension="0"/>
<par name="NumberOfDisparities" base_type="ctrl" dimension="0"/>
<par name="MinimumDisparity" base_type="ctrl" dimension="0"/>
<par name="Projector" base_type="ctrl" dimension="0"/>
<par name="FrontLigth" base_type="ctrl" dimension="0"/>
<par name="AutoExposure" base_type="ctrl" dimension="0"/>
<par name="AutoGain" base_type="ctrl" dimension="0"/>
<par name="Gain" base_type="ctrl" dimension="0"/>
<par name="Exposure" base_type="ctrl" dimension="0"/>
<par name="FlexView" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="TempCam" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c>* Configuracion de parametros.</c>
<l>set_framegrabber_param (Camera, 'grab_data_items', ['Images/Rectified/Left', 'Images/Raw/Left', 'Images/PointMap'])</l>
<c></c>
<c></c>
<c>* Parametros para habilitar funciones directas de la camara</c>
<l>set_framegrabber_param (NxLib, 'Execute/Parameters/InitialTrigger', 'All')</l>
<c>* Proyector random de texturas</c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/182681/Parameters/Capture/Projector', Projector)</l>
<c>* Iluminacion</c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/182681/Parameters/Capture/FrontLight', FrontLigth)</l>
<c></c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/182681/Parameters/Capture/AutoExposure', AutoExposure)</l>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/182681/Parameters/Capture/AutoGain', AutoGain)</l>
<c></c>
<c></c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/182681/Parameters/Capture/Exposure', Exposure)</l>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/182681/Parameters/Capture/Gain', Gain)</l>
<c></c>
<c>* ******************************************************************************************************</c>
<c></c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/182681/Parameters/DisparityMap/StereoMatching/NumberOfDisparities', NumberOfDisparities)</l>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/182681/Parameters/DisparityMap/StereoMatching/MinimumDisparity', MinimumDisparity)</l>
<c>* N° de imagenes de captura</c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/182681/Parameters/Capture/FlexView', FlexView)</l>
<c>* Temperatura de camara</c>
<l>get_framegrabber_param (NxLib, '//Cameras/BySerialNo/182681/Sensor/Temperature', TempCam)</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Config_Parametros_Cam_R1_COPY_1">
<parameters>
<parameter id="AutoExposure"/>
<parameter id="AutoGain"/>
<parameter id="Camera"/>
<parameter id="Exposure"/>
<parameter id="FlexView"/>
<parameter id="FrontLigth"/>
<parameter id="Gain"/>
<parameter id="MinimumDisparity"/>
<parameter id="NumberOfDisparities"/>
<parameter id="NxLib"/>
<parameter id="Projector"/>
<parameter id="TempCam"/>
</parameters>
</docu>
</procedure>
<procedure name="GetMinAltura_COPY_1">
<interface>
<io>
<par name="Zm" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Regions_PattSup" base_type="iconic" dimension="0"/>
</oo>
</interface>
<body>
<c></c>
<c></c>
<c>* ********************************************************</c>
<c>* 1.-  !!!!!!!!! threshols dinamico!!!!!!!!!!!!!!!!!!!!!!!!!!</c>
<c>* ********************************************************</c>
<l>threshold (Zm, RegZRed, 5, 2000)</l>
<l>reduce_domain (Zm, RegZRed, ZRed)</l>
<l>escala := 255.0/2000.0</l>
<l>scale_image (ZRed, HeightMap_Scalada, escala, 0)</l>
<l>threshold (HeightMap_Scalada, HeightMap_Region, 0, 255)</l>
<l>gray_histo_range (HeightMap_Region, HeightMap_Scalada, 0, 255, 256, Histo, BinSize)</l>
<l>tuple_sum (Histo, Sum_Histo)</l>
<c></c>
<l>* # #########################################################</l>
<l>* # ### Mientras mas grabnde menos sensible a cambios #######   </l>
<l>Mascara := 1</l>
<l>* # ########################################################</l>
<c></c>
<l>Vector_Distribucion := []</l>
<l>init_vector := 255</l>
<l>flag_vector := 0</l>
<l>aux_suma := 0.0</l>
<c></c>
<l>for Index := init_vector to 0 by -1</l>
<c></c>
<l>    Vector_Distribucion[Index] := aux_suma+Histo[Index]*100.0/ Sum_Histo</l>
<l>    aux_suma := Vector_Distribucion[Index]</l>
<l>endfor</l>
<c></c>
<l>Derivada := []</l>
<l>Factor_Der := 1000</l>
<l>Mascara := 3</l>
<l>for Index := init_vector to 50 by -Mascara</l>
<c></c>
<l>    Derivada[Index] := abs(Vector_Distribucion[Index]-Vector_Distribucion[Index-Mascara])*Factor_Der</l>
<c></c>
<l>endfor</l>
<c></c>
<c></c>
<c>* *********************************************************</c>
<c>* * Busco el primer cambio brusco de posicion *************</c>
<c>* * El umbral de cambio es Aux_Val_Max ********************</c>
<c>* *********************************************************</c>
<c></c>
<l>Aux_Val_Max := 5000</l>
<l>Flag_indx_max := 255</l>
<l>for Index := 255 to 140 by -Mascara</l>
<c></c>
<l>    if (Derivada[Index]&gt;Aux_Val_Max)</l>
<l>        Aux_Val_Max := Derivada[Index]</l>
<l>        Flag_indx_max := Index</l>
<l>        break</l>
<l>    endif</l>
<c></c>
<l>endfor</l>
<c></c>
<c></c>
<c>* ***********************************************************</c>
<c>* * Desviacion luego de  detectar el cambio brusco **********</c>
<c>* ***********************************************************</c>
<c></c>
<l>* # #########################################################</l>
<l>* # ######## Grado de proteccion para moverse entre el </l>
<l>* # ####### histograma</l>
<l>index_protection_Inf := 10</l>
<c></c>
<l>* # #########################################################</l>
<c></c>
<l>Alt_Min := Flag_indx_max-index_protection_Inf</l>
<l>Alt_Max := 255</l>
<l>threshold (HeightMap_Scalada, Regions_PattSup, Alt_Min, Alt_Max)</l>
<l>return ()</l>
</body>
<docu id="GetMinAltura_COPY_1">
<parameters>
<parameter id="Regions_PattSup"/>
<parameter id="Zm"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Corner_Sprue">
<interface>
<io>
<par name="Zm" base_type="iconic" dimension="0"/>
<par name="PosibleSprueMax" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Image" base_type="iconic" dimension="0"/>
<par name="Img1" base_type="iconic" dimension="0"/>
<par name="Img2" base_type="iconic" dimension="0"/>
<par name="ImageReduced2" base_type="iconic" dimension="0"/>
<par name="ImageResult" base_type="iconic" dimension="0"/>
<par name="MixedImage" base_type="iconic" dimension="0"/>
<par name="ImageCorner" base_type="iconic" dimension="0"/>
<par name="LocalMaxima" base_type="iconic" dimension="0"/>
<par name="Regions2" base_type="iconic" dimension="0"/>
<par name="LocalMaxima1" base_type="iconic" dimension="0"/>
<par name="ConnectedRegions1" base_type="iconic" dimension="0"/>
</oo>
<oc>
<par name="Width" base_type="ctrl" dimension="0"/>
<par name="Height" base_type="ctrl" dimension="0"/>
<par name="Area1" base_type="ctrl" dimension="0"/>
<par name="RowToFind" base_type="ctrl" dimension="0"/>
<par name="ColumToFind" base_type="ctrl" dimension="0"/>
<par name="Grayval" base_type="ctrl" dimension="0"/>
<par name="Function" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>get_image_size (Zm, Width, Height)</l>
<l>gen_image_const (Image, 'byte',  Width, Height)</l>
<c></c>
<l>gen_image_proto (Zm, Img1, 10)</l>
<l>gen_image_proto (Zm, Img2, 150)</l>
<l>reduce_domain (Img2, PosibleSprueMax, ImageReduced2)</l>
<c></c>
<l>add_image (Img1, ImageReduced2, ImageResult, 1, 100)</l>
<l>paint_gray(ImageReduced2,Img1,MixedImage)</l>
<l>corner_response (MixedImage, ImageCorner, 3, 0.04)</l>
<c></c>
<l>local_max (ImageCorner, LocalMaxima)</l>
<c></c>
<l>threshold (ImageCorner, Regions2, 1000, 5000)</l>
<c></c>
<l>reduce_domain (ImageCorner, Regions2, ImageCorner)</l>
<c></c>
<l>local_max (ImageCorner, LocalMaxima1)</l>
<l>connection (LocalMaxima1, ConnectedRegions1)</l>
<l>area_center (ConnectedRegions1, Area1, RowToFind, ColumToFind)</l>
<l>get_grayval (ImageCorner, RowToFind, ColumToFind, Grayval) </l>
<l>create_funct_1d_array (Grayval, Function)</l>
<l>return ()</l>
</body>
<docu id="Get_Corner_Sprue">
<parameters>
<parameter id="Area1"/>
<parameter id="ColumToFind"/>
<parameter id="ConnectedRegions1"/>
<parameter id="Function"/>
<parameter id="Grayval"/>
<parameter id="Height"/>
<parameter id="Image"/>
<parameter id="ImageCorner"/>
<parameter id="ImageReduced2"/>
<parameter id="ImageResult"/>
<parameter id="Img1"/>
<parameter id="Img2"/>
<parameter id="LocalMaxima"/>
<parameter id="LocalMaxima1"/>
<parameter id="MixedImage"/>
<parameter id="PosibleSprueMax"/>
<parameter id="Regions2"/>
<parameter id="RowToFind"/>
<parameter id="Width"/>
<parameter id="Zm"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_EsquinaSprue">
<interface>
<ic>
<par name="Grayval" base_type="ctrl" dimension="0"/>
<par name="RowToFind" base_type="ctrl" dimension="0"/>
<par name="ColumToFind" base_type="ctrl" dimension="0"/>
<par name="Width" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="FilaPattern" base_type="ctrl" dimension="0"/>
<par name="ColumnasPattern" base_type="ctrl" dimension="0"/>
<par name="Ptr_Min" base_type="ctrl" dimension="0"/>
<par name="Ptr_Min2" base_type="ctrl" dimension="0"/>
<par name="Ptr_Min3" base_type="ctrl" dimension="0"/>
<par name="EsquinaDetectadas" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>GrayvalOut := Grayval</l>
<c></c>
<c></c>
<l>dev_get_window (WindowHandle)</l>
<l>EsquinaDetectadas:=false</l>
<l>    try</l>
<c>        </c>
<c>  </c>
<c>        </c>
<c>    **************************************************   </c>
<c>    *** Umbral Corner Response</c>
<l>    Umbral:=1000</l>
<c>    **************************************************</c>
<l>    Ptros:=0</l>
<l>    AuxPtr:=0</l>
<l>for Idx := 0 to |GrayvalOut|-1 by 1</l>
<l>    if (GrayvalOut[Idx]&gt;Umbral)</l>
<l>            Ptros[AuxPtr]:=Idx</l>
<l>            AuxPtr:=AuxPtr+1</l>
<l>        GrayvalOut[Idx] := -1</l>
<l>        endif     </l>
<l>    endfor</l>
<l>    Umbral:=0</l>
<l>for Idx := 0 to |GrayvalOut|-1 by 1</l>
<l>    if (GrayvalOut[Idx]&gt;Umbral)</l>
<l>        Umbral := GrayvalOut[Idx]</l>
<l>            Ptros[3]:=Idx</l>
<l>        endif     </l>
<l>    endfor</l>
<c>    </c>
<l>    for Idx := 0 to 3 by 1</l>
<l>        FilaPattern[Idx]:=RowToFind[Ptros[Idx]]</l>
<l>        ColumnasPattern[Idx]:=ColumToFind[Ptros[Idx]]</l>
<l>    endfor</l>
<c>    </c>
<l>    disp_cross (WindowHandle, FilaPattern, ColumnasPattern, 50, 0)</l>
<c>   </c>
<c>    </c>
<l>    for Idx := 0 to 3 by 1</l>
<l>        tuple_pow (FilaPattern[Idx], 2, Pow1)</l>
<l>        tuple_pow (ColumnasPattern[Idx], 2, Pow2)</l>
<l>        tuple_sqrt (Pow1+Pow2, Sqrt)</l>
<l>        DistVectorial[Idx]:=Sqrt</l>
<l>    endfor</l>
<c>    </c>
<c>    </c>
<l>    AuxMin:=DistVectorial[0]</l>
<l>    Ptr_Min:=0</l>
<l>    for Idx := 0 to |DistVectorial|-1 by 1</l>
<l>        if (DistVectorial[Idx]&lt;AuxMin)            </l>
<l>            Ptr_Min:=Idx</l>
<l>            AuxMin:=DistVectorial[Idx]</l>
<l>        endif     </l>
<l>    endfor</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    for Idx := 0 to 3 by 1</l>
<l>        tuple_pow (FilaPattern[Idx], 2, Pow1)</l>
<l>        tuple_pow (Width-ColumnasPattern[Idx], 2, Pow2)</l>
<l>        tuple_sqrt (Pow1+Pow2, Sqrt)</l>
<l>        DistVectorial2[Idx]:=Sqrt</l>
<l>    endfor </l>
<c>    </c>
<l>    AuxMin2:=DistVectorial2[0]</l>
<l>    Ptr_Min2:=0</l>
<l>    for Idx := 0 to |DistVectorial2|-1 by 1</l>
<l>        if (DistVectorial2[Idx]&lt;AuxMin2)            </l>
<l>            Ptr_Min2:=Idx</l>
<l>            AuxMin2:=DistVectorial2[Idx]</l>
<l>        endif     </l>
<l>    endfor   </l>
<c>    </c>
<c> </c>
<l>      for Idx := 0 to 3 by 1</l>
<l>        tuple_pow (Width-FilaPattern[Idx], 2, Pow1)</l>
<l>        tuple_pow (ColumnasPattern[Idx], 2, Pow2)</l>
<l>        tuple_sqrt (Pow1+Pow2, Sqrt)</l>
<l>        DistVectorial3[Idx]:=Sqrt</l>
<l>    endfor </l>
<c>    </c>
<l>    AuxMin3:=DistVectorial3[0]</l>
<l>    Ptr_Min3:=0</l>
<l>    for Idx := 0 to |DistVectorial3|-1 by 1</l>
<l>        if (DistVectorial3[Idx]&lt;AuxMin3)            </l>
<l>            Ptr_Min3:=Idx</l>
<l>            AuxMin3:=DistVectorial3[Idx]</l>
<l>        endif     </l>
<l>    endfor   </l>
<c>    </c>
<l>    EsquinaDetectadas:=true</l>
<l>      catch (Exception)</l>
<l>        EsquinaDetectadas:=false  </l>
<c>          </c>
<c>          </c>
<l>    endtry</l>
<c>    </c>
<c>    </c>
<l>return ()</l>
</body>
<docu id="Get_EsquinaSprue">
<parameters>
<parameter id="ColumToFind"/>
<parameter id="ColumnasPattern"/>
<parameter id="EsquinaDetectadas"/>
<parameter id="FilaPattern"/>
<parameter id="Grayval"/>
<parameter id="Ptr_Min"/>
<parameter id="Ptr_Min2"/>
<parameter id="Ptr_Min3"/>
<parameter id="RowToFind"/>
<parameter id="Width"/>
</parameters>
</docu>
</procedure>
</hdevelop>
