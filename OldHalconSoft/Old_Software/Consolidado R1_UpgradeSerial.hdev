<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="13.0.3">
<procedure name="main">
<interface/>
<body>
<l>Parametros_Visualizacion:=['colored','disp_pose','point_size']</l>
<l>Valores_Visualizacion:= [  12  ,'true',1]</l>
<c></c>
<l>open_serial ('COM20', SerialHandle)</l>
<l>set_serial_param (SerialHandle, 256000, 8, 'none', 'none', 1, 50, 'unchanged')</l>
<c></c>
<l>Get_Vector_Estados (Vector_Estado_Fx)</l>
<c></c>
<l>* # FUNCIONES EXTERNAS A LOS BLOQUES  </l>
<c></c>
<c>******************************************</c>
<c>* 0.CAPTURO EL MODELO 3D  DE LA CAMRA 1</c>
<c>******************************************</c>
<c></c>
<c></c>
<c>***********************************************************</c>
<c>* 1.1- Conexion de Ensenso</c>
<c>***********************************************************</c>
<c></c>
<l>Conectar_Ensenso_N35 (24001, NxLib, Camera_1, Conexion_Camara)</l>
<c></c>
<l>* #########################################################################</l>
<c>* Configuracion de Parametros</c>
<l>MinimumDisparity_Cam1:=-64</l>
<l>NumberOfDisparities_Cam1:= 128</l>
<l>Projector:='false'</l>
<l>FrontLigth:='true'</l>
<l>AutoExposure:='true'</l>
<l>AutoGain:='false'</l>
<l>Exposure := 1</l>
<l>Gain:=1</l>
<l>FlexView:=1</l>
<l>Config_Parametros_Cam_R1 (NxLib, Camera_1, NumberOfDisparities_Cam1, MinimumDisparity_Cam1, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure, FlexView, TempCam)</l>
<c></c>
<l>* ################ Capturo la Imagen ########################################</l>
<c></c>
<l>Get_Img_Camera_R1 (ModelImage, Xm, Ym, Zm, ImgLeftCamera_1, NxLib, Camera_1, Escena3D_RAW)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c>****************************************************************************</c>
<c>* 1.2- Conexion de Procilica GT</c>
<c>****************************************************************************</c>
<c></c>
<c>*Funcion que configura la camara Procilica</c>
<l>Set_Config_Cam (AcqHandle_Cam_0, Camera0_Parameters, Camera0_Pose, Conexion_Camara_0, CalTabFile)</l>
<c></c>
<c>****************************************************************************</c>
<c>* Funciones de adquisicion</c>
<c>****************************************************************************</c>
<l>Time:=25000</l>
<l>Gain:=1.0</l>
<l>Set_exposure_Time_cam_0 (AcqHandle_Cam_0, Time, Gain)</l>
<l>Get_Image (Image, AcqHandle_Cam_0)</l>
<c>*****************************************************************************</c>
<c></c>
<c>*****************************************************************************</c>
<c>*                         CONSULTA A BD</c>
<c>*          FUNCION QUE LEE LOS ARCHIVOS STL DE LOS CORES.</c>
<c>******************************************************************************</c>
<l>* ############################################################################</l>
<l>Get_Cores_BD (Path_CORE_ID, Path_SFM_Segmentos, Path_3D_Segmentos)           </l>
<l>* ############################################################################</l>
<c></c>
<c>******************************************************************************</c>
<c>*                       FIN DE INICIALIZACIONES</c>
<c>******************************************************************************</c>
<c></c>
<c>******************************************************************************</c>
<c>*Verifico si SreialBridge esta activo para poder continuar</c>
<c>******************************************************************************</c>
<l>* Find_SerialBridge (SerialHandle)</l>
<c>******************************************************************************</c>
<c></c>
<c></c>
<l>* #### Envio data de estado ########################</l>
<l>Resultado:=0</l>
<l>Procesando:=0</l>
<l>Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<c>******************************************************************************</c>
<c></c>
<l> NxLib:=[]</l>
<l> Camera_1:=[]</l>
<l> AcqHandle_Cam_0:=[]</l>
<l> Camera0_Parameters:=[]</l>
<l> Camera0_Pose:=[]</l>
<c> </c>
<c>*****************************************************</c>
<l>Consolidado_Vision_R1 (SerialHandle, Vector_Estado_Fx, Path_SFM_Segmentos, Path_3D_Segmentos, Path_CORE_ID, NxLib, Camera_1, AcqHandle_Cam_0, Camera0_Parameters,\
                       Camera0_Pose, Parametros_Visualizacion, Valores_Visualizacion)</l>
<c></c>
<c></c>
<l>Close_All_Cameras (AcqHandle_Cam_0, Camera_1, NxLib, Exception)</l>
<c></c>
<c></c>
<l>close_serial (SerialHandle)</l>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="Set_Config_Cam">
<interface>
<oc>
<par name="AcqHandle" base_type="ctrl" dimension="0"/>
<par name="CameraParameters" base_type="ctrl" dimension="0"/>
<par name="CameraPose" base_type="ctrl" dimension="0"/>
<par name="Conexion_Camara_0" base_type="ctrl" dimension="0"/>
<par name="CalTabFile" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<c></c>
<c>*Parametros de calibracion de la camara</c>
<l>CameraParameters := ['area_scan_polynomial',0.019089,226.612,-547494,2.17334e+007,0.023374,-0.0333038,5.50091e-006,5.5e-006,2472.03,1594.77,4896,3264]</l>
<l>CameraPose := [-0.330897,-0.213789,0.455639,3.05118,359.888,268.927,0]</l>
<c></c>
<c></c>
<l>Conexion_Camara_0:=false</l>
<c></c>
<l>try</l>
<c>    </c>
<c>    *Apertura  y conexion de la camara</c>
<l>    open_framegrabber ('GigEVision', 0, 0, 0, 0, 0, 0, 'default', -1, 'default', -1, 'false', 'default', '000f310262c0_AlliedVisionTechnologies_GT4905C02', 0, -1, AcqHandle)</l>
<l>    set_framegrabber_param (AcqHandle, 'ExposureMode', 'Timed')</l>
<c>    </c>
<l>    set_framegrabber_param (AcqHandle, 'ExposureAuto', 'Off')</l>
<l>    set_framegrabber_param (AcqHandle, 'AcquisitionMode', 'SingleFrame')</l>
<c>    </c>
<l>    grab_image_start (AcqHandle, -1)</l>
<c>    </c>
<l>    set_framegrabber_param (AcqHandle, 'ExposureTimeAbs', 5000.0)</l>
<l>    set_framegrabber_param (AcqHandle, 'Gain', 21.0)</l>
<c>    </c>
<l>    Conexion_Camara_0:=true</l>
<c>    </c>
<c>    * Cargo el Caltab que se debera buscar</c>
<l>    CalTabFile := 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/13.- Ensenso N35/Caltab/Caltab7x7_5.descr'</l>
<c>    </c>
<c>    *************************************************************************************************************</c>
<c>    * Lectura de Pose herramienta respecto a la camara</c>
<c>    *************************************************************************************************************</c>
<c>    </c>
<c>    </c>
<l>    read_pose ('C:/Users/Usuario/Dropbox (MIRS)/1.-Servidor Desarrollo Software/7.-Magotteaux/7.-HandEye/2. procilica/ToolInCamPose_Procilica.dat', \
               ToolInCamPose)</l>
<c>    **************************************************************************************************************</c>
<l>    return () </l>
<c>    </c>
<l>catch (Exception)</l>
<c>    </c>
<l>    Conexion_Camara_0:=false</l>
<c>    </c>
<l>endtry</l>
<l>return () </l>
</body>
<docu id="Set_Config_Cam">
<parameters>
<parameter id="AcqHandle"/>
<parameter id="CalTabFile"/>
<parameter id="CameraParameters"/>
<parameter id="CameraPose"/>
<parameter id="Conexion_Camara_0"/>
</parameters>
</docu>
</procedure>
<procedure name="Conectar_Ensenso_N35">
<interface>
<ic>
<par name="Puerto" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="Conexion_Camara" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* </c>
<l>Conexion_Camara_1 := false</l>
<l>try</l>
<c>    * </c>
<l> *   info_framegrabber ('Ensenso-NxLib', 'device', Information, ValueList)</l>
<l> *   info_framegrabber ('Ensenso-NxLib', 'info_boards', Information, Estado)</l>
<c>    </c>
<c>    * Inicializacion de Arbol y camara estereo</c>
<l>    open_framegrabber ('Ensenso-NxLib', 0, 0, 0, 0, 0, 0, 'default', 0, 'Raw', 'auto_grab_data=0', 'false', 'Item', '/', 0, 0, NxLib)</l>
<l>    open_framegrabber ('Ensenso-NxLib', 0, 0, 0, 0, 0, 0, 'default', 0, 'Raw', 'auto_grab_data=0', 'false', 'Stereo','193216', 0, 0, Camera_1)</l>
<c>    </c>
<l>*    open_framegrabber ('Ensenso-NxLib', 0, 0, 0, 0, 0, 0, 'default', -1, 'default', -1, 'default', 'stereo', '193216', 0, 0, Camera_1)</l>
<c>*</c>
<c>    </c>
<c>    * Abro puerto TCP del Arbol</c>
<l>    set_framegrabber_param(NxLib, 'do_open_tcp_port', Puerto)</l>
<l>    Conexion_Camara_1 := true</l>
<c>    * </c>
<l>    return ()</l>
<l>catch (Exception)</l>
<l>    Conexion_Camara_1 := false</l>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="Conectar_Ensenso_N35">
<parameters>
<parameter id="Camera_1"/>
<parameter id="Conexion_Camara"/>
<parameter id="NxLib"/>
<parameter id="Puerto"/>
</parameters>
</docu>
</procedure>
<procedure name="Close_Camera_1">
<interface>
<ic>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="NxLib_1" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>close_framegrabber (Camera_1)</l>
<l>close_framegrabber (NxLib_1)</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Close_Camera_1">
<parameters>
<parameter id="Camera_1"/>
<parameter id="NxLib_1"/>
</parameters>
</docu>
</procedure>
<procedure name="Adq_Imagen">
<interface>
<oo>
<par name="ModelImage" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>set_framegrabber_param (NxLib, 'do_execute', 'Capture')</l>
<l>set_framegrabber_param (NxLib, 'do_execute', 'ComputeDisparityMap')</l>
<l>set_framegrabber_param (NxLib, 'do_execute', 'ComputePointMap')</l>
<c></c>
<l>*set_framegrabber_param (Camera, 'grab_data_items', ['Images/Rectified/Left','Images/Rectified/Right','Images/PointMap'])</l>
<c>* </c>
<l>grab_data (ModelImage, Regions, Contours, Camera, Data)</l>
<l>return ()</l>
</body>
<docu id="Adq_Imagen">
<parameters>
<parameter id="Camera"/>
<parameter id="ModelImage"/>
<parameter id="NxLib"/>
</parameters>
</docu>
</procedure>
<procedure name="Adq_XYZ_Img">
<interface>
<io>
<par name="ModelImage" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Xm" base_type="iconic" dimension="0"/>
<par name="Ym" base_type="iconic" dimension="0"/>
<par name="Zm" base_type="iconic" dimension="0"/>
</oo>
</interface>
<body>
<l>select_obj (ModelImage, XYZMAP, 3)</l>
<c>* </c>
<c>* Separate the X, Y and Z images</c>
<l>access_channel (XYZMAP, Xm, 1)</l>
<l>access_channel (XYZMAP, Ym, 2)</l>
<l>access_channel (XYZMAP, Zm, 3)</l>
<l>return ()</l>
</body>
<docu id="Adq_XYZ_Img">
<parameters>
<parameter id="ModelImage"/>
<parameter id="Xm"/>
<parameter id="Ym"/>
<parameter id="Zm"/>
</parameters>
</docu>
</procedure>
<procedure name="Close_Camera_0">
<interface>
<ic>
<par name="AcqHandle_Cam_0" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c></c>
<c></c>
<l>Process_Ok:=false</l>
<l>try</l>
<c>    </c>
<l>    close_framegrabber (AcqHandle_Cam_0)     </l>
<l>    Process_Ok:=true</l>
<l>catch (Exception)</l>
<l>endtry</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Close_Camera_0">
<parameters>
<parameter id="AcqHandle_Cam_0"/>
</parameters>
</docu>
</procedure>
<procedure name="Close_All_Cameras">
<interface>
<ic>
<par name="AcqHandle_Cam_0" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="NxLib_1" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Exception" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>try   </l>
<l>    Close_Camera_0 (AcqHandle_Cam_0) </l>
<l>catch (Exception)</l>
<l>endtry</l>
<c></c>
<l>try    </l>
<l>    Close_Camera_1 (Camera_1, NxLib_1)</l>
<l>catch (Exception)</l>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="Close_All_Cameras">
<parameters>
<parameter id="AcqHandle_Cam_0"/>
<parameter id="Camera_1"/>
<parameter id="Exception"/>
<parameter id="NxLib_1"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Image">
<interface>
<oo>
<par name="Image" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="AcqHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>grab_image_async (Image, AcqHandle, -1)</l>
<l>grab_image_async (Image, AcqHandle, -1)</l>
<l>return ()</l>
</body>
<docu id="Get_Image">
<parameters>
<parameter id="AcqHandle"/>
<parameter id="Image"/>
</parameters>
</docu>
</procedure>
<procedure name="Set_exposure_Time_cam_0">
<interface>
<ic>
<par name="AcqHandle_Cam_0" base_type="ctrl" dimension="0"/>
<par name="Time" base_type="ctrl" dimension="0"/>
<par name="Gain" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>    set_framegrabber_param (AcqHandle_Cam_0, 'ExposureTimeAbs', Time)</l>
<l>    set_framegrabber_param (AcqHandle_Cam_0, 'Gain', Gain)</l>
<l>return ()</l>
</body>
<docu id="Set_exposure_Time_cam_0">
<parameters>
<parameter id="AcqHandle_Cam_0"/>
<parameter id="Gain"/>
<parameter id="Time"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_ROI3D_Pallet">
<interface>
<oc>
<par name="ROI3D_NullFrame" base_type="ctrl" dimension="0"/>
<par name="ROI3D_rotate" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Parametros_Visualizacion:=['colored','disp_pose','point_size']</l>
<l>Valores_Visualizacion:= [  12  ,'true',25]</l>
<c></c>
<c></c>
<c></c>
<c>*Creo Plano</c>
<c>*****************************************************</c>
<c>*Dimenciones del cubo/2 en XY en mm</c>
<l>VisualizationPlaneSize:=1000.0/2</l>
<l>Z_alt:=3000</l>
<c>*****************************************************</c>
<c></c>
<l>create_pose (0, 0, 0, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose)</l>
<l>gen_plane_object_model_3d (Pose, [-1,-1,1,1] * VisualizationPlaneSize, [-1,1,1,-1] * VisualizationPlaneSize, Plano)</l>
<l>create_pose (VisualizationPlaneSize, VisualizationPlaneSize, 0, 0, 0, 0, 'Rp+T', 'gba', 'point', PoseEsquina)</l>
<l>rigid_trans_object_model_3d (Plano, PoseEsquina, Plano)</l>
<l>* visualize_object_model_3d (200000, [Plano], [], [], Parametros_Visualizacion, Valores_Visualizacion, [], [], [], PoseOut1)</l>
<c></c>
<c></c>
<l>Trans_X:=[]</l>
<l>Trans_Y:=[]</l>
<l>Ncuadrantes:=3.0</l>
<l> Trans_X[0]:=0</l>
<l>  Trans_Y[0]:=0</l>
<l>for Index := 1 to Ncuadrantes by 1</l>
<l>    Trans_X[Index]:=(VisualizationPlaneSize/(Ncuadrantes))*Index </l>
<l>    Trans_Y[Index]:=(VisualizationPlaneSize/Ncuadrantes)*Index</l>
<l>endfor</l>
<c></c>
<l>Alto_Sector:=VisualizationPlaneSize*2/(Ncuadrantes)</l>
<c></c>
<c></c>
<l>create_pose (0, 0, -1, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose)</l>
<c></c>
<l>create_pose (-Trans_X[1],-Trans_Y[1], Z_alt*0.5, 0, 0, 0, 'Rp+T', 'gba', 'point', PoseEsquina)</l>
<l>gen_box_object_model_3d (Pose, Alto_Sector, Alto_Sector, Z_alt, Plano_1)</l>
<l>rigid_trans_object_model_3d (Plano_1, PoseEsquina, Plano_1)</l>
<c></c>
<c></c>
<l>*visualize_object_model_3d (200000, [ Plano_1,Plano], [], [], Parametros_Visualizacion, Valores_Visualizacion, [], [], [], PoseOut1)</l>
<c></c>
<c></c>
<l>ThreshDistance:=1500</l>
<l>Modelos3d:=[Plano_1]</l>
<l>ROI3D_NullFrame:=[]</l>
<l>Vector_Segmento:=['A','B','C','D','E','F','G','H','I']</l>
<l>for Index_Y := 1 to Ncuadrantes by 1</l>
<c>    </c>
<l>    for Index_X := 1 to Ncuadrantes by 1</l>
<l>        create_pose (2*Trans_X[Index_X], 2*Trans_Y[Index_Y], -ThreshDistance, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose_Trans)       </l>
<l>        rigid_trans_object_model_3d (Modelos3d, Pose_Trans, ObjectModel3DRigidTrans1)</l>
<l>        ROI3D_NullFrame:=[ROI3D_NullFrame,ObjectModel3DRigidTrans1]</l>
<l>     *   visualize_object_model_3d (200000, [ ROI3D_NullFrame,Plano], [], [], Parametros_Visualizacion, Valores_Visualizacion, [], [], [], PoseOut1)</l>
<c>        </c>
<l>    endfor</l>
<c>    </c>
<l>endfor</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>ROI3D_rotate:=[]</l>
<l>clear_object_model_3d (ROI3D_rotate)</l>
<c></c>
<l>for Index := 0 to |ROI3D_NullFrame|-1 by 1</l>
<c>    </c>
<l>    copy_object_model_3d (ROI3D_NullFrame[Index], 'all', ROI3D_rotate_Aux)</l>
<l>    ROI3D_rotate:=[ROI3D_rotate,ROI3D_rotate_Aux]</l>
<l>    ROI3D_rotate_Aux:=[]</l>
<c>   </c>
<l>endfor</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>clear_object_model_3d (Modelos3d)</l>
<l>clear_object_model_3d (Plano)</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_ROI3D_Pallet">
<parameters>
<parameter id="ROI3D_NullFrame"/>
<parameter id="ROI3D_rotate"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_ROI_3D">
<interface>
<ic>
<par name="ROI3D" base_type="ctrl" dimension="0"/>
<par name="ObjectModel3D" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Modelo_3D_RED" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>Modelo_3D_RED:=[]</l>
<c></c>
<l>for N_ROI := 0 to |ROI3D|-1 by 1</l>
<l>    get_object_model_3d_params (ROI3D[N_ROI], 'bounding_box1', GenParamValue)</l>
<c>    </c>
<l>    x_min:=GenParamValue[0]</l>
<l>    y_min:=GenParamValue[1]</l>
<l>    z_min:=GenParamValue[2]</l>
<l>    x_max:=GenParamValue[3]</l>
<l>    y_max:=GenParamValue[4]</l>
<l>    z_max:=GenParamValue[5]</l>
<c>    </c>
<l>    select_points_object_model_3d (ObjectModel3D, 'point_coord_z',\
                                   z_min, z_max, ObjectModel3DThresholded)</l>
<l>    select_points_object_model_3d (ObjectModel3DThresholded, 'point_coord_y',\
                                   y_min, y_max, ObjectModel3DThresholded)</l>
<l>    select_points_object_model_3d (ObjectModel3DThresholded, 'point_coord_x',\
                                   x_min, x_max, ObjectModel3DThresholded)</l>
<c>    </c>
<l>    Modelo_3D_RED:=[Modelo_3D_RED,ObjectModel3DThresholded]</l>
<c>    </c>
<l>endfor</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_ROI_3D">
<parameters>
<parameter id="Modelo_3D_RED"/>
<parameter id="ObjectModel3D"/>
<parameter id="ROI3D"/>
</parameters>
</docu>
</procedure>
<procedure name="Set_Max_Altura_Model3D">
<interface>
<ic>
<par name="Modelo_3D_ROI" base_type="ctrl" dimension="0"/>
<par name="Delta_Altura" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Modelo_3D_ROI_Thres" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>try</l>
<c>    </c>
<c>    * Delta altura limita  el Z que necesito</c>
<l>    get_object_model_3d_params (Modelo_3D_ROI, 'bounding_box1', GenParamValue)</l>
<c>    </c>
<l>    x_min:=GenParamValue[0]</l>
<l>    y_min:=GenParamValue[1]</l>
<l>    z_min:=GenParamValue[2]</l>
<l>    x_max:=GenParamValue[3]</l>
<l>    y_max:=GenParamValue[4]</l>
<l>    z_max:=GenParamValue[5]</l>
<c>    </c>
<c>    </c>
<l>*     if (z_max-Delta_Altura &lt;= 0)</l>
<c>        </c>
<l>*         dev_get_exception_data (Exception, 'error_msg', ErrorMsg)</l>
<l>*         return ()</l>
<l>*     endif</l>
<c>    </c>
<l>    select_points_object_model_3d (Modelo_3D_ROI, 'point_coord_z',\
                                   z_min-200, Delta_Altura, Modelo_3D_ROI_Thres)</l>
<c>    </c>
<c>    </c>
<l>catch (Exception)</l>
<l>    dev_get_exception_data (Exception, 'error_msg', ErrorMsg0)</l>
<l>    dev_get_exception_data (Exception, 'procedure', ErrorMsg1)</l>
<l>    dev_get_exception_data (Exception, 'operator', ErrorMsg2)</l>
<l>    dev_get_exception_data (Exception, 'program_line', ErrorMsg3)</l>
<c>    </c>
<l>    MensajeError:=ErrorMsg0+' IN '+ErrorMsg1+' IN FUNTION '+ErrorMsg2+' IN LINE '+ErrorMsg3</l>
<l>    throw (MensajeError)</l>
<l>endtry</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Set_Max_Altura_Model3D">
<parameters>
<parameter id="Delta_Altura"/>
<parameter id="Modelo_3D_ROI"/>
<parameter id="Modelo_3D_ROI_Thres"/>
</parameters>
</docu>
</procedure>
<procedure name="Find_Entity_3D">
<interface>
<ic>
<par name="N_matches" base_type="ctrl" dimension="0"/>
<par name="SFM" base_type="ctrl" dimension="0"/>
<par name="Modelo_imagen_3d" base_type="ctrl" dimension="0"/>
<par name="Sampling_Find" base_type="ctrl" dimension="0"/>
<par name="Keypoint" base_type="ctrl" dimension="0"/>
<par name="MinScore" base_type="ctrl" dimension="0"/>
<par name="Perno_Ref_Cam0" base_type="ctrl" dimension="0"/>
<par name="Modelo_3D_ROI_ThresEdges" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="PoseMLS" base_type="ctrl" dimension="0"/>
<par name="ScoreMLS" base_type="ctrl" dimension="0"/>
<par name="PoseREFIN" base_type="ctrl" dimension="0"/>
<par name="ScoreREFIN" base_type="ctrl" dimension="0"/>
<par name="SurfaceMatchingResultID1" base_type="ctrl" dimension="0"/>
<par name="ObjectModel3DResultMLS" base_type="ctrl" dimension="0"/>
<par name="ObjectModel3DResultMLS_REFIN" base_type="ctrl" dimension="0"/>
<par name="Estado_Funcion" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* </c>
<l>Estado_Funcion := true</l>
<l>try</l>
<c>    * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = "Buscando Objeto";</c>
<c>    * </c>
<c>    * ***************************************</c>
<c>    * 1.Parametros de control</c>
<c>    * ***************************************</c>
<l>    GenParamName := ['num_matches','scene_normal_computation','pose_ref_scoring_dist_rel','score_type','3d_edges']</l>
<l>    GenParamValue := [N_matches   ,          'mls'           ,   0.01         ,'model_point_fraction' ,Modelo_3D_ROI_ThresEdges]</l>
<c>    </c>
<c></c>
<c>    * </c>
<c>    * </c>
<c>    * ***************************************</c>
<c>    * 2.Busqueda de entidad</c>
<c>    * ***************************************</c>
<l>    find_surface_model (SFM, Modelo_imagen_3d, Sampling_Find,\
                        Keypoint, MinScore, 'true', GenParamName,\
                        GenParamValue, PoseMLS, ScoreMLS, SurfaceMatchingResultID1)</l>
<c>    * ***************************************</c>
<l>    if (|PoseMLS|)</l>
<c>        </c>
<c>        </c>
<c>        * 3.Refinar busqueda</c>
<c>        * ***************************************</c>
<l>        refine_surface_model_pose (SFM, Modelo_imagen_3d, PoseMLS, 0, 'false', 'pose_ref_sub_sampling', 2, PoseREFIN, ScoreREFIN, SurfaceMatchingResultIDPose)</l>
<c>        * ***************************************</c>
<c>        * 4.Translacion de objeto</c>
<c>        * ***************************************</c>
<c></c>
<l>        rigid_trans_object_model_3d (Perno_Ref_Cam0, PoseMLS, ObjectModel3DResultMLS)</l>
<l>        rigid_trans_object_model_3d (Perno_Ref_Cam0, PoseREFIN, ObjectModel3DResultMLS_REFIN)</l>
<c>        * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = "Objeto encontrado con una PROBABILIDAD de " + hv_ScoreMLS*100.ToString() ;</c>
<l>        Estado_Funcion := true</l>
<l>        return()</l>
<c>        </c>
<l>    endif</l>
<c>    </c>
<l>    Estado_Funcion := false</l>
<l>catch (Exception)</l>
<c>       </c>
<l>    Estado_Funcion := false</l>
<c>    * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = Fx_Aux.ErrorCatch(HDevExpDefaultException1);</c>
<c>    * </c>
<l>endtry</l>
<c>* </c>
<c>* </c>
<l>return ()</l>
</body>
<docu id="Find_Entity_3D">
<parameters>
<parameter id="Estado_Funcion"/>
<parameter id="Keypoint"/>
<parameter id="MinScore"/>
<parameter id="Modelo_3D_ROI_ThresEdges"/>
<parameter id="Modelo_imagen_3d"/>
<parameter id="N_matches"/>
<parameter id="ObjectModel3DResultMLS"/>
<parameter id="ObjectModel3DResultMLS_REFIN"/>
<parameter id="Perno_Ref_Cam0"/>
<parameter id="PoseMLS"/>
<parameter id="PoseREFIN"/>
<parameter id="SFM"/>
<parameter id="Sampling_Find"/>
<parameter id="ScoreMLS"/>
<parameter id="ScoreREFIN"/>
<parameter id="SurfaceMatchingResultID1"/>
</parameters>
</docu>
</procedure>
<procedure name="FALSEO_ADQ_FOTO">
<interface>
<oo>
<par name="ReferenciaEsquina" base_type="iconic" dimension="0"/>
<par name="ObjectSelected" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
<par name="Z" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ObjectModel3D1" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<c></c>
<l>read_object (ReferenciaEsquina, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/18.- Imagenes_IngSoft/0 Ensenso/Pallet_011.hobj')</l>
<c></c>
<l>select_obj (ReferenciaEsquina, ObjectSelected, 3)</l>
<l>decompose3 (ObjectSelected, X, Y, Z)</l>
<l>xyz_to_object_model_3d (X, Y, Z, ObjectModel3D1)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="FALSEO_ADQ_FOTO">
<parameters>
<parameter id="ObjectModel3D1"/>
<parameter id="ObjectSelected"/>
<parameter id="ReferenciaEsquina"/>
<parameter id="SerialHandle"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Esquina">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Cross" base_type="iconic" dimension="0"/>
<par name="ImageOut" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="phi" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Row" base_type="ctrl" dimension="0"/>
<par name="Col" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>ImageOut := Image</l>
<l>Estado_Funcion:=0</l>
<l>Rango_Seguridad_Ditancia_puntos:=500</l>
<c></c>
<c></c>
<l>get_image_size (ImageOut, Width, Height)</l>
<l>hom_mat2d_identity (HomMat2DIdentity)</l>
<l>hom_mat2d_rotate (HomMat2DIdentity, rad(phi), Width/2, Height/2, HomMat2DRotate)</l>
<c>* Apply an arbitrary affine transformation to an image</c>
<l>affine_trans_image (Image, Image, HomMat2DRotate, 'constant', 'false')</l>
<c>* </c>
<c></c>
<c>* *************************************</c>
<c>* Segmentacion de esquina</c>
<c>* *************************************</c>
<l>Altura_Pallet:= 1000</l>
<l>Ditancia_camara_Piso:=1700</l>
<l>Rango_Seg:=50</l>
<l>Rango_posible_borde_pallet:=Ditancia_camara_Piso-Altura_Pallet</l>
<c></c>
<l>threshold (Image, ROI_0, Rango_posible_borde_pallet-Rango_Seg, Rango_posible_borde_pallet+Rango_Seg)</l>
<c></c>
<l>reduce_domain (Image, ROI_0, ImageReduced1)</l>
<c></c>
<c></c>
<c>* *************************************</c>
<c>* detecction de bordes</c>
<c>* *************************************</c>
<l>connection (ROI_0, ConnectedRegions)</l>
<l>fill_up (ConnectedRegions, ConnectedRegions)</l>
<l>select_shape (ConnectedRegions, SelectedRegions, 'area', 'and', 60000, 99912+1000)</l>
<c>* </c>
<c>* *********************************************</c>
<c>* contabilizo el numero de objetos encontrados</c>
<l>count_obj (SelectedRegions, Number)</l>
<c>* **********************************************</c>
<c></c>
<l>erosion_circle (SelectedRegions, RegionErosion, 3.5)</l>
<c></c>
<l>dilation_circle (SelectedRegions, RegionDilation1, 15)</l>
<l>reduce_domain (Image, RegionDilation1, ImageReduced2)</l>
<c>* </c>
<l>reduce_domain (Image, RegionErosion, ImageReduced3)</l>
<c>* </c>
<l>dev_set_color ('blue')</l>
<c>* </c>
<l>get_region_polygon (SelectedRegions, 2, Row, Col)</l>
<l>gen_region_polygon (Pol, Row, Col)</l>
<c></c>
<c></c>
<c>* **********************************************</c>
<c>* Generacion de poligono</c>
<c>* *********************************************</c>
<l>gen_region_polygon_filled (Pol, Row, Col)</l>
<c>* </c>
<c>* </c>
<l>reduce_domain (Image, Pol, Esquina)</l>
<c>* </c>
<l>gen_image_proto (Image, ImageCleared, 255)</l>
<l>gen_image_proto (Image, ImageCleared2, 128)</l>
<c>* </c>
<l>threshold (ImageCleared, IMG, 0, 255)</l>
<l>difference (IMG, Esquina, RegionDifference)</l>
<c>* </c>
<l>reduce_domain (ImageCleared, RegionDifference, Esquina)</l>
<c>* </c>
<c>* </c>
<l>paint_region (RegionDifference, ImageCleared, EsquinaIMG, 10, 'fill')</l>
<c>* </c>
<c>* </c>
<c>* **********************************************</c>
<c>* Harrys</c>
<c>* **********************************************</c>
<c>* </c>
<l>derivate_gauss (EsquinaIMG, DerivGauss, 1, 'yyy')</l>
<l>gauss_filter (DerivGauss, DerivGauss2, 11)</l>
<c></c>
<l>SigmaGrad := 1</l>
<l>SigmaSmooth :=5</l>
<l>Threshold := 1000</l>
<l>* dev_display (Image)</l>
<l>points_harris (DerivGauss, SigmaGrad, SigmaSmooth, 0.04, Threshold, Row, Col)</l>
<l>gen_cross_contour_xld (Cross, Row, Col, 30, rad(45))</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>* dev_set_line_width (2)</l>
<l>* dev_display (EsquinaIMG)</l>
<l>* dev_set_color ('red')</l>
<l> dev_display (Cross)</l>
<l>* dev_set_color ('red')</l>
<c></c>
<c> </c>
<l> for Index1 := 0 to |Row-1| by 1</l>
<c>     </c>
<l>    * disp_line (200000, Row[Index1], Col[Index1],Row[Index1+1], Col[Index1+1])</l>
<c>    </c>
<c>     </c>
<l> endfor</l>
<c></c>
<l>if (|Row|)</l>
<c>    *BUSCO LA FILA Y COL MAS PEQUEÑA</c>
<c>    </c>
<l>    Puntero_Menor:=0</l>
<l>    Puntero_Mayor:=0</l>
<l>    Puntero_Menor_Col:=0</l>
<l>    Puntero_Menor_Row:=0</l>
<l>    for Index := 0 to |Row|-1 by 1</l>
<c>        </c>
<c></c>
<l>        if((Col[Puntero_Menor]  &gt;  Col[Index]) )</l>
<l>            Puntero_Menor:=Index</l>
<l>        endif</l>
<c>        </c>
<l>         if((Row[Puntero_Mayor]  &lt;  Row[Index]) )</l>
<l>            Puntero_Mayor:=Index</l>
<l>        endif         </l>
<c>        </c>
<c>        </c>
<l>    endfor</l>
<c>    </c>
<l>    gen_cross_contour_xld (Crossw1, Row[Puntero_Menor], Col[Puntero_Menor], 80, rad(45))</l>
<l>    gen_cross_contour_xld (Crossw2, Row[Puntero_Mayor], Col[Puntero_Mayor], 80, rad(45))    </l>
<c>    </c>
<l>    distance_pp ( Row[Puntero_Menor], Col[Puntero_Menor],  Row[Puntero_Mayor], Col[Puntero_Mayor], Distance)</l>
<c>    </c>
<c> </c>
<l>    dev_clear_window()</l>
<l>    gen_cross_contour_xld (Cross, Row, Col, 30, rad(45))</l>
<l>    gen_cross_contour_xld (Crossw1,  Row[Puntero_Menor], Col[Puntero_Menor], 80, rad(45))</l>
<l>    gen_cross_contour_xld (Crossw2, Row[Puntero_Mayor], Col[Puntero_Mayor], 80, rad(45))</l>
<l>    dev_display (EsquinaIMG)</l>
<l>    dev_set_color ('red')</l>
<l>    dev_display (Crossw1)</l>
<l>    dev_display (Crossw2)</l>
<c>    </c>
<c>    </c>
<l>    disp_line (200000, Row[Puntero_Menor], Col[Puntero_Menor],Row[Puntero_Mayor], Col[Puntero_Mayor])</l>
<c>   </c>
<l>    disp_line (200000, Row[Puntero_Mayor], 0,Row[Puntero_Mayor], Col[Puntero_Mayor])</l>
<l>    disp_line (200000, Row[Puntero_Menor], Col[Puntero_Menor],Height,  Col[Puntero_Menor])</l>
<c>    </c>
<c> </c>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    Estado_Funcion:=1</l>
<l>else</l>
<c>    </c>
<c>    </c>
<l>    Estado_Funcion:=0  </l>
<l>endif</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Esquina">
<parameters>
<parameter id="Col"/>
<parameter id="Cross"/>
<parameter id="Image"/>
<parameter id="ImageOut"/>
<parameter id="Row"/>
<parameter id="phi"/>
</parameters>
</docu>
</procedure>
<procedure name="Set_SFM_Esquina_Pallet">
<interface>
<io>
<par name="Z" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="Rango_posible_borde_pallet" base_type="ctrl" dimension="0"/>
<par name="Rango_Seg" base_type="ctrl" dimension="0"/>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>threshold (Z, Regions, Rango_posible_borde_pallet-Rango_Seg, Rango_posible_borde_pallet+Rango_Seg)</l>
<l>reduce_domain (Z, Regions, ImageReduced)</l>
<c></c>
<l>gen_rectangle1 (ROI_0, 62.5246, 134.286, 222.187, 1067.42)</l>
<c></c>
<l>reduce_domain (ImageReduced, ROI_0, ImageReduced_Z)</l>
<l>xyz_to_object_model_3d (X, Y, ImageReduced_Z, Esquina_Ref)</l>
<l>compose3 (X, Y, ImageReduced_Z, MultiChannelImage)</l>
<c></c>
<l>create_pose (-486, 573, -1590, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose)</l>
<l>rigid_trans_object_model_3d (Esquina_Ref, Pose, ObjectModel3DRigidTrans)</l>
<l>visualize_object_model_3d (200000, [ObjectModel3DRigidTrans], [], [], Parametros_Visualizacion, Valores_Visualizacion, [], [], [], PoseOut1)</l>
<c></c>
<l>create_pose (0, 0, 0, 0, 0, -90, 'Rp+T', 'gba', 'point', Pose)</l>
<l>rigid_trans_object_model_3d (ObjectModel3DRigidTrans, Pose, ObjectModel3DRigidTrans)</l>
<l>visualize_object_model_3d (200000, [ObjectModel3DRigidTrans], [], [], Parametros_Visualizacion, Valores_Visualizacion, [], [], [], PoseOut1)</l>
<c></c>
<l>create_pose (0, 0, 0, 180, 0, 0, 'Rp+T', 'gba', 'point', Pose)</l>
<l>rigid_trans_object_model_3d (ObjectModel3DRigidTrans, Pose, ObjectModel3DRigidTrans)</l>
<l>visualize_object_model_3d (200000, [ObjectModel3DRigidTrans], [], [], Parametros_Visualizacion, Valores_Visualizacion, [], [], [], PoseOut1)</l>
<c></c>
<l>create_pose (0, 950, 0, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose)</l>
<l>rigid_trans_object_model_3d (ObjectModel3DRigidTrans, Pose, ObjectModel3DRigidTrans)</l>
<l>visualize_object_model_3d (200000, [ObjectModel3DRigidTrans], [], [], Parametros_Visualizacion, Valores_Visualizacion, [], [], [], PoseOut1)</l>
<c></c>
<l>create_pose (-50, 0, 0, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose)</l>
<l>rigid_trans_object_model_3d (ObjectModel3DRigidTrans, Pose, ObjectModel3DRigidTrans)</l>
<l>visualize_object_model_3d (200000, [ObjectModel3DRigidTrans], [], [], Parametros_Visualizacion, Valores_Visualizacion, [], [], [], PoseOut1)</l>
<c></c>
<l>create_pose (0, 0, 0, 0, 0, -3, 'Rp+T', 'gba', 'point', Pose)</l>
<l>rigid_trans_object_model_3d (ObjectModel3DRigidTrans, Pose, ObjectModel3DRigidTrans)</l>
<l>visualize_object_model_3d (200000, [ObjectModel3DRigidTrans], [], [], Parametros_Visualizacion, Valores_Visualizacion, [], [], [], PoseOut1)</l>
<c></c>
<c></c>
<c>*****************************************</c>
<l>Sampling:=0.03</l>
<l>surface_normals_object_model_3d (ObjectModel3DRigidTrans, 'mls', [], [], ObjectModel3DNormals)</l>
<l>triangulate_object_model_3d (ObjectModel3DNormals, 'greedy', [], [], ObjectModel3DNormals, Information)</l>
<l>visualize_object_model_3d (200000, [ObjectModel3DNormals], [], [], Parametros_Visualizacion, Valores_Visualizacion, [], [], [], PoseOut1)</l>
<c></c>
<l>create_surface_model (ObjectModel3DNormals, Sampling, 'train_3d_edges', 'true', SurfaceModelID)</l>
<c></c>
<l>visualize_object_model_3d (200000,[ObjectModel3DNormals], [], [], Parametros_Visualizacion, Valores_Visualizacion, [], [], [], PoseOut1)</l>
<c></c>
<l>write_surface_model (SurfaceModelID, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/SFM_PALLET/SFM_Pallet.sfm')</l>
<l>write_object_model_3d (ObjectModel3DNormals, 'om3', 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/SFM_PALLET/3D_Pallet.om3', [], [])</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Set_SFM_Esquina_Pallet">
<parameters>
<parameter id="Parametros_Visualizacion"/>
<parameter id="Rango_Seg"/>
<parameter id="Rango_posible_borde_pallet"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_SFM_3D_Pallet">
<interface>
<oc>
<par name="SFM_Pallet" base_type="ctrl" dimension="0"/>
<par name="Pallet_3D_Esquina" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>read_surface_model ('D:/AI/Vision Artificial/4.-MAGOTTEAUX/SFM_PALLET/SFM_Pallet_beta.sfm', SFM_Pallet)</l>
<l>read_object_model_3d ('D:/AI/Vision Artificial/4.-MAGOTTEAUX/SFM_PALLET/3D_Pallet_beta.om3', 1, [], [], Pallet_3D_Esquina, Status)</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_SFM_3D_Pallet">
<parameters>
<parameter id="Pallet_3D_Esquina"/>
<parameter id="SFM_Pallet"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_ObjectModel3D_Util">
<interface>
<io>
<par name="Z" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
<par name="ImgLeftCamera_Esq" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="Rango_posible_borde_pallet" base_type="ctrl" dimension="0"/>
<par name="Rango_Seg" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ObjectModel3D" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Parametros_Visualizacion:=['colored','disp_pose','point_size']</l>
<l>Valores_Visualizacion:= [  12  ,'true',1]</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>threshold (ImgLeftCamera_Esq, Esquina, 180, 255)</l>
<c></c>
<l>connection (Esquina, ConnectedRegions)</l>
<l>select_shape_std (ConnectedRegions, SelectedRegions, 'max_area', 90)</l>
<c></c>
<c></c>
<l>reduce_domain (Z, Esquina, ImageReduced)</l>
<c></c>
<c></c>
<l>reduce_domain (Z, SelectedRegions, Zred)</l>
<c></c>
<l>*#################################################</l>
<c>**Funcion para  hacer la sfm de la esquina</c>
<l>*MakeSFM_Palletr (Esquina, Z, X, Y, ConnectedRegions, SelectedRegions, ImageReduced,\
                 MultiChannelImage, Parametros_Visualizacion, Valores_Visualizacion, Esquina3D, Pose, \
                 Esquina3D_Trans, Pose1, PoseOut1, Sampling, SurfaceModelID, ObjectModel3DNormals, Esquina_Tri, Information)</l>
<l>*#################################################</l>
<c></c>
<c></c>
<l>xyz_to_object_model_3d (X, Y, ImageReduced, ObjectModel3D)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_ObjectModel3D_Util">
<parameters>
<parameter id="ImgLeftCamera_Esq"/>
<parameter id="ObjectModel3D"/>
<parameter id="Rango_Seg"/>
<parameter id="Rango_posible_borde_pallet"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Rotate_ROI3D">
<interface>
<ic>
<par name="Pose_Refinada" base_type="ctrl" dimension="0"/>
<par name="ROI3D_rotate" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Pose_Segmentos" base_type="ctrl" dimension="0"/>
<par name="ROI3D_rotateOut" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<c></c>
<c></c>
<l>ROI3D_rotateOut := ROI3D_rotate</l>
<c>* Variable para asegurarme que tome lo sque existe por sobre el pallet</c>
<c></c>
<l>Z_Seguridad:=800</l>
<c></c>
<c></c>
<l>create_pose (Pose_Refinada[0], Pose_Refinada[1], Pose_Refinada[2]-Z_Seguridad,\
             Pose_Refinada[3], Pose_Refinada[4], Pose_Refinada[5], 'Rp+T', 'gba', 'point', Pose_Segmentos)</l>
<c></c>
<l>rigid_trans_object_model_3d (ROI3D_rotateOut, Pose_Segmentos, ROI3D_rotateOut)</l>
<l>return ()</l>
</body>
<docu id="Get_Rotate_ROI3D">
<parameters>
<parameter id="Pose_Refinada"/>
<parameter id="Pose_Segmentos"/>
<parameter id="ROI3D_rotate"/>
<parameter id="ROI3D_rotateOut"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Core_Presence_In_Pallet">
<interface>
<io>
<par name="Z" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
<par name="ImgLeftCamera_Esq" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
<par name="Pose_Robot" base_type="ctrl" dimension="2"/>
<par name="N_Pallet_to_Scan" base_type="ctrl" dimension="0"/>
<par name="Path_SFM_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_3D_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet" base_type="ctrl" dimension="0"/>
<par name="Path_CORE_ID" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="Base_esquina" base_type="ctrl" dimension="0"/>
<par name="Visualizar3D" base_type="ctrl" dimension="0"/>
<par name="Estado_Fx" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Estado_SubProceso" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Parametros_Visualizacion:=['colored','disp_pose','point_size']</l>
<l>Valores_Visualizacion:= [  12  ,'true',1]</l>
<c></c>
<c></c>
<c>******************************************</c>
<c>*1.- Obtengo el ROI3D del PALLET</c>
<c>******************************************</c>
<l>Vector_Segmento:=['A','B','C','D','E','F','G','H','I']</l>
<c></c>
<l>try</l>
<l>    Get_ROI3D_Pallet (ROI3D_NullFrame, ROI3D_rotate)  </l>
<c>    </c>
<l>catch (Exception)</l>
<l>    dev_get_exception_data (Exception, 'error_msg', ErrorMsg0)</l>
<l>    dev_get_exception_data (Exception, 'procedure', ErrorMsg1)</l>
<l>    dev_get_exception_data (Exception, 'operator', ErrorMsg2)</l>
<l>    dev_get_exception_data (Exception, 'program_line', ErrorMsg3)</l>
<c>    </c>
<l>    MensajeError:=ErrorMsg0+' IN '+ErrorMsg1+' IN FUNTION '+ErrorMsg2+' IN LINE '+ErrorMsg3</l>
<l>    Mensaje:=MensajeError</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<c>    </c>
<l>* #### Envio data de estado ########################</l>
<l>    Procesando:=0</l>
<l>    Estado:=5</l>
<l>    Resultado:=2</l>
<l>    Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* ################################################## </l>
<c>    </c>
<l>    Msg_Sub_Proceso:='#Error# '+MensajeError</l>
<l>    return()</l>
<l>endtry</l>
<c></c>
<c></c>
<l>* ########################################################</l>
<c>*                    constantes </c>
<c>******************************************</c>
<c>*2.- Busco la esquina de la caja con cores</c>
<c>******************************************</c>
<c>* Filtro para buscar solo el borde en [mm]</c>
<c>* Variables de  valor constante</c>
<l>Altura_Pallet:= 600</l>
<l>Distancia_camara_Piso_Pallet:=2340</l>
<l>Rango_Seguridad:=200</l>
<l>Rango_posible_borde_pallet:=Distancia_camara_Piso_Pallet-Altura_Pallet</l>
<l>* ########################################################</l>
<l>try   </l>
<l>    Get_ObjectModel3D_Util (Z, X, Y, ImgLeftCamera_Esq, Rango_posible_borde_pallet, Rango_Seguridad, ObjectModel3D_Borde_Pallet)</l>
<l>catch (Exception)</l>
<l>    dev_get_exception_data (Exception, 'error_msg', ErrorMsg0)</l>
<l>    dev_get_exception_data (Exception, 'procedure', ErrorMsg1)</l>
<l>    dev_get_exception_data (Exception, 'operator', ErrorMsg2)</l>
<l>    dev_get_exception_data (Exception, 'program_line', ErrorMsg3)</l>
<c>    </c>
<l>    MensajeError:=ErrorMsg0+' IN '+ErrorMsg1+' IN FUNTION '+ErrorMsg2+' IN LINE '+ErrorMsg3</l>
<l>*     throw (MensajeError)</l>
<c>    </c>
<l>* #### Envio data de estado ###############################</l>
<l>    Procesando:=0</l>
<l>    Estado:=5</l>
<l>    Resultado:=2</l>
<l>    Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* ########################################################    </l>
<l>    return()</l>
<l>endtry</l>
<c></c>
<c>******************************************************************************************************************************</c>
<l>  dev_get_window (WindowHandle)</l>
<l>Visualizar_3D ([ObjectModel3D_Borde_Pallet,Escena3D_RAW], Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, [], [], [], WindowHandle, PoseOut1)</l>
<c>******************************************************************************************************************************</c>
<c></c>
<c></c>
<c>***************************************************</c>
<c>*       -&gt; OLD CODE &lt;-</c>
<c>* SE BUSCA CON PROCESAMIENTO DE IMAGENES</c>
<c>* SE MANTIENE POR COMPATIBILIDAD</c>
<c>* 2.2 Busco la esquina del palelt con SFM</c>
<c>*</c>
<c>* Parametros de control</c>
<c>***************************************************</c>
<c>***OldCode (Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, ObjectModel3D_Borde_Pallet, Vector_Estado_Fx, SerialHandle, SurfaceModelID, ObjectModel3D, Status, PoseOut1, Sampling, Sampling_Find, Keypoint, MinScore, N_matches, SFM, Escena3D, Objeto3D, Estado, PoseMLS, ScoreMLS, Pose_Refinada, Score_Refinado, SurfaceMatchingResultID1, Posicion3D_Objeto, Posicion3D_Objeto_REFIN, Obj_Detectado_EsquinaPallets)</c>
<c></c>
<c></c>
<c></c>
<c>*******************************************************</c>
<c>* Envio informacion de la esquina encontrada al Robot</c>
<c>*******************************************************</c>
<l>if (Estado_Fx)</l>
<l>*     Visualizar_3D ([ObjectModel3D_Borde_Pallet,Posicion3D_Objeto_REFIN,Escena3D_RAW], Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, [], [], [], WindowHandle1, PoseOut1)</l>
<c>    </c>
<c>    </c>
<c>    *******************************************************  </c>
<c>    </c>
<c>    </c>
<c>    </c>
<l>* ############### GUARDAR  POSICION ESQUINA REFERENTE A LA BASE ####################################</l>
<l>* ### Debo conocer la transformada</l>
<l>* ### Guardar la posicion de la camara al NULLFRAME del robot.</l>
<l>* ###################################################################################################   </l>
<c>    </c>
<c></c>
<l>    Save_Pose_Palle (SerialHandle, Base_esquina, N_Pallet_to_Scan, Pose_Robot)</l>
<c>    </c>
<l>* ###################################################################################################    </l>
<c>    </c>
<c>    * Enviar datos al Robot de Posicion de la esquia del pallet respecto a la brida</c>
<c>    * Es necesario convertir la coordenada  </c>
<l>*    Send_Data_To_Robot (Base_esquina, SerialHandle)  </l>
<l>*    Get_ObjInBasePose (Base_esquina, Pose_Robot, ObjInBasePose)</l>
<c>    </c>
<l>* ###################################################################################################    </l>
<c>    </c>
<c>    </c>
<l>else</l>
<c>    ********************************</c>
<c>    * Enviar por ETHERNETIP</c>
<c>    ********************************</c>
<c>    </c>
<l>* #### Envio data de estado ############################################################################</l>
<c>    </c>
<l>    Estado:=7</l>
<l>    Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* #######################################################################################################</l>
<c>    </c>
<c>    </c>
<l>    return()</l>
<c>    </c>
<l>endif</l>
<c></c>
<c></c>
<l>* ####################################################</l>
<l>* ##### ROTO EL ROI 3D ###############################</l>
<l>* ####################################################</l>
<l>Mensaje:='Rotando ROI'</l>
<l>Send_Data_Info (Mensaje, SerialHandle)</l>
<l>Rototate_ROI (Base_esquina, ROI3D_rotate, Escena3D_RAW, Parametros_Visualizacion, Valores_Visualizacion, \
              Visualizar3D, Vector_Segmento, Pose_Segmentos, ROI3D_rotate)</l>
<l>* ####################################################</l>
<c></c>
<c></c>
<l>* ####################################################################</l>
<l>* ####################################################################</l>
<l>* ################# BUSQUEDA DE CORES EN EL PALLET ###################</l>
<l>* ####################################################################</l>
<l>* ####################################################################</l>
<c>* 3.- Encuentro el orden y los segementos en que estan distribuidos los cores en el applet</c>
<c></c>
<l>Get_Vector_Entidades (Vector_ID_Core_by_Segment_Pallet, Vector_Entidades_Segmento)</l>
<c></c>
<c></c>
<l>try</l>
<c>    </c>
<c>    </c>
<c>    *********************************************************</c>
<c>    * ROI 3D sectorizado de cada elemento</c>
<c>    * Busco de manera sectorizada cara core en el pallet</c>
<c>    *********************************************************</c>
<c>    * Estructura de vector</c>
<l>* ############################</l>
<l>* ### CORE ## Existencia #####</l>
<l>* ############################</l>
<l>    Vector_Existencia_Core:={{[]}}</l>
<l>    Vector_Existencia_Core.at(0).at(0):='CORE'</l>
<l>    Vector_Existencia_Core.at(0).at(1):='Existencia'</l>
<c>    </c>
<l>* #### Envio data de estado ########################</l>
<l>    Estado:=8</l>
<l>    Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* ################################################## </l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    Sampling:=0.05</l>
<l>    Find_Sector_Core (Vector_ID_Core_by_Segment_Pallet, \
                      Vector_Entidades_Segmento, Path_CORE_ID, Path_3D_Segmentos, Path_SFM_Segmentos, \
                      ROI3D_rotate, Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D,\
                      Vector_Segmento, Escena3D_RAW, Sampling, SerialHandle, Vector_Existencia_Core, \
                      Vector_Estado_Fx, Vector_Existencia_Core_New)</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>* #### Envio data de estado ########################</l>
<l>    Procesando:=1</l>
<l>    Estado:=13</l>
<l>    Resultado:=0</l>
<c></c>
<l>* ################################################## </l>
<c>    </c>
<c>    </c>
<c>    *Escritura de Vector_Existencia_Core_New</c>
<c>    </c>
<l>    Variable_PLC_Existencia:='_EV01_I_Pallet'+N_Pallet_to_Scan+'ZValid.'</l>
<c>    </c>
<l>    for j := 1 to Vector_Existencia_Core_New.length()-1 by 1</l>
<l>        Estado_SubProceso:=false</l>
<l>        Tag_Destino:=Variable_PLC_Existencia+(j)</l>
<l>        Valor_Variable:=Vector_Existencia_Core_New.at(j).at(1)</l>
<c>        *************************</c>
<l>        Valor_Variable:=1</l>
<c>        *************************</c>
<l>        Send_EthernetIP_Data (Tag_Destino, Valor_Variable, SerialHandle)</l>
<c> </c>
<l>    endfor</l>
<c>    </c>
<l>    ValorVector:=Vector_Existencia_Core_New.length()-1</l>
<l>    if (ValorVector &gt;1)</l>
<l>        Mensaje:='Elementos encontrados en Pallet  '+N_Pallet_to_Scan</l>
<l>        Send_Data_Info (Mensaje, SerialHandle)</l>
<l>* #### Envio data de estado ########################</l>
<l>        Procesando:=0</l>
<l>        Resultado:=1</l>
<l>        Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* ################################################## </l>
<l>    else</l>
<c>        </c>
<l>* #### Envio data de estado ########################</l>
<l>         Mensaje:='### ERROR ### No se encontro nada que validar en pallet '+N_Pallet_to_Scan</l>
<l>        Send_Data_Info (Mensaje, SerialHandle)</l>
<l>        Procesando:=0</l>
<l>        Resultado:=2</l>
<l>        Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>        Mensaje:='### ERROR ###'</l>
<l>        Send_Data_Info (Mensaje, SerialHandle)</l>
<l>* ################################################## </l>
<l>    endif</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>catch (Exception)</l>
<l>    Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<c>    </c>
<c>    </c>
<l>* #### Envio data de estado ########################</l>
<l>    Procesando:=0</l>
<l>    Estado:=6</l>
<l>    Resultado:=2</l>
<l>    Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>    Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<c>    </c>
<l>* ################################################## </l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    return()</l>
<l>endtry</l>
<c></c>
<c></c>
<c></c>
<c>*****************************************</c>
<c>*Borrar 3D</c>
<l>clear_object_model_3d ([ROI3D_rotate,ROI3D_NullFrame,Escena3D_RAW,ObjectModel3D_Borde_Pallet])</l>
<l>return ()</l>
</body>
<docu id="Get_Core_Presence_In_Pallet">
<parameters>
<parameter id="Base_esquina"/>
<parameter id="Escena3D_RAW"/>
<parameter id="Estado_Fx"/>
<parameter id="Estado_SubProceso"/>
<parameter id="ImgLeftCamera_Esq"/>
<parameter id="N_Pallet_to_Scan"/>
<parameter id="Path_3D_Segmentos"/>
<parameter id="Path_CORE_ID"/>
<parameter id="Path_SFM_Segmentos"/>
<parameter id="Pose_Robot"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet"/>
<parameter id="Visualizar3D"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Cores_BD">
<interface>
<oc>
<par name="Path_CORE_ID" base_type="ctrl" dimension="0"/>
<par name="Path_SFM_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_3D_Segmentos" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c>* Cores en BD</c>
<c></c>
<c></c>
<l>Get_Cores (Cores)</l>
<l>Path_CORE_ID:=Cores</l>
<c></c>
<c>** FALSEANDO ENTREGA DE INFO **</c>
<l>Path:='D:/AI/Vision Artificial/4.-MAGOTTEAUX/SFM_CORES/'</l>
<c></c>
<l>list_files ('D:/AI/Vision Artificial/4.-MAGOTTEAUX/SFM_CORES', 'files', Files)</l>
<c></c>
<l>for j := 0 to |Path_CORE_ID|-1 by 1</l>
<l> Path_SFM_Segmentos[j]:=Path+Path_CORE_ID[j]+'/'+Path_CORE_ID[j]+'_SFM.sfm'</l>
<l> Path_3D_Segmentos[j]:=Path+Path_CORE_ID[j]+'/'+Path_CORE_ID[j]+'_3D.stl'</l>
<l>endfor</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Cores_BD">
<parameters>
<parameter id="Path_3D_Segmentos"/>
<parameter id="Path_CORE_ID"/>
<parameter id="Path_SFM_Segmentos"/>
</parameters>
</docu>
</procedure>
<procedure name="Visualizar_3D">
<interface>
<ic>
<par name="Modelo3D" base_type="ctrl" dimension="0"/>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Visualizar" base_type="ctrl" dimension="0"/>
<par name="PoseIn" base_type="ctrl" dimension="0"/>
<par name="Title" base_type="ctrl" dimension="0"/>
<par name="Label" base_type="ctrl" dimension="0"/>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Pose" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>if (Visualizar)</l>
<l>    visualize_object_model_3d (WindowHandle, [Modelo3D], [], [], Parametros_Visualizacion, Valores_Visualizacion, Title, Label, [], Pose)</l>
<l>endif</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Visualizar_3D">
<parameters>
<parameter id="Label"/>
<parameter id="Modelo3D"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="Pose"/>
<parameter id="PoseIn"/>
<parameter id="Title"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="Visualizar"/>
<parameter id="WindowHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_EthernetIP_Data">
<interface>
<ic>
<par name="Tag_Destino" base_type="ctrl" dimension="0"/>
<par name="Variable" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>wait_seconds(0.01)</l>
<c></c>
<c></c>
<l>Peticion     := 'Escritura'</l>
<l>Variable_OPC := Tag_Destino </l>
<c></c>
<l>Data:=Peticion+';'+Variable_OPC+';'+Variable</l>
<c></c>
<l>write_serial (SerialHandle, ords(Data))</l>
<c></c>
<l>VarSerial:=0</l>
<l>while(VarSerial&lt;1)    </l>
<l>    read_serial (SerialHandle, 20, Nchar)</l>
<l>    Nchar:= chrt(Nchar)</l>
<l>    tuple_number (Nchar, Variable)</l>
<l>    VarSerial:=|Nchar|</l>
<l>endwhile</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Send_EthernetIP_Data">
<parameters>
<parameter id="SerialHandle"/>
<parameter id="Tag_Destino"/>
<parameter id="Variable"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_SFM_STL">
<interface>
<ic>
<par name="Vector_ID_Core_by_Segment_Pallet" base_type="ctrl" dimension="0"/>
<par name="Path_CORE_ID" base_type="ctrl" dimension="0"/>
<par name="Path_3D_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_SFM_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ObjectModel3D_Core_Pallet" base_type="ctrl" dimension="0"/>
<par name="SFM_Core_Pallet" base_type="ctrl" dimension="0"/>
<par name="Estado_Get_SFM_STL" base_type="ctrl" dimension="0"/>
<par name="Modelo3D_Select" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Estado_Get_SFM_STL:=false</l>
<l>try</l>
<c>    </c>
<l>    Core_Find_by_User := Vector_ID_Core_by_Segment_Pallet</l>
<c>    </c>
<l>    if (Core_Find_by_User='')</l>
<l>        Estado_Get_SFM_STL:=false</l>
<l>        return()</l>
<l>    endif</l>
<c>    </c>
<l>    Index_Core:=[]</l>
<l>    Core_Get:=false</l>
<c>    </c>
<l>    for Index_Core_find := 0 to |Path_CORE_ID|-1 by 1</l>
<c>        </c>
<l>        if (Path_CORE_ID[Index_Core_find] = Core_Find_by_User)</l>
<l>            Index_Core :=  Index_Core_find  </l>
<l>            Core_Get:=true</l>
<l>        endif</l>
<l>    endfor</l>
<c>    </c>
<l>    if (not Core_Get)</l>
<c>        </c>
<c>        </c>
<c>        </c>
<l>        throw ('CORE NO EXISTE EN BD')</l>
<c>        </c>
<c>        </c>
<c>        </c>
<l>        return()</l>
<c>        </c>
<l>    endif</l>
<c>    </c>
<c>    </c>
<l>    Send_Estado_Vision (Vector_Estado_Fx, SerialHandle, 24)   </l>
<l>    read_object_model_3d (Path_3D_Segmentos[Index_Core], 1, [], [], ObjectModel3D_Core_Pallet, Status)</l>
<l>    Send_Estado_Vision (Vector_Estado_Fx, SerialHandle, 25)</l>
<l>    read_surface_model (Path_SFM_Segmentos[Index_Core], SFM_Core_Pallet)</l>
<l>    Send_Data_Info ('Surface File Leido', SerialHandle)</l>
<c>    </c>
<l>    Modelo3D_Select:=Path_3D_Segmentos[Index_Core]</l>
<c>    </c>
<c>    </c>
<l>    Estado_Get_SFM_STL:=true</l>
<c>    </c>
<l>catch (Exception)</l>
<c>    </c>
<c>    </c>
<l>    throw ('NO se pudo leer el modelo 3D o el SFM de ' + Core_Find_by_User)</l>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="Get_SFM_STL">
<parameters>
<parameter id="Estado_Get_SFM_STL"/>
<parameter id="Modelo3D_Select"/>
<parameter id="ObjectModel3D_Core_Pallet"/>
<parameter id="Path_3D_Segmentos"/>
<parameter id="Path_CORE_ID"/>
<parameter id="Path_SFM_Segmentos"/>
<parameter id="SFM_Core_Pallet"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet"/>
</parameters>
</docu>
</procedure>
<procedure name="Read_EthernetIP_Data">
<interface>
<ic>
<par name="Tag_Lectura" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Variable" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<c></c>
<l>Peticion     := 'Lectura'</l>
<l>Variable_OPC := Tag_Lectura</l>
<c></c>
<l>Data:=Peticion+';'+Variable_OPC</l>
<l>write_serial (SerialHandle, ords(Data))</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>VarSerial:=0</l>
<l>while(VarSerial&lt;1)</l>
<c>   </c>
<c>    *Numero de caracteres a leer</c>
<l>    read_serial (SerialHandle, 20, Nchar)</l>
<l>    Nchar:= chrt(Nchar)</l>
<l>    tuple_number (Nchar, Variable)</l>
<l>    VarSerial:=|Nchar|</l>
<l>endwhile</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Read_EthernetIP_Data">
<parameters>
<parameter id="SerialHandle"/>
<parameter id="Tag_Lectura"/>
<parameter id="Variable"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Vector_Info_Cores_byUser">
<interface>
<ic>
<par name="N_pallet" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_1" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_2" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_3" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_4" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_5" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_6" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Vector_ID_Core_by_Segment_Pallet" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>switch (N_pallet)</l>
<l>case 1:</l>
<l>    Vector_ID_Core_by_Segment_Pallet:=Vector_ID_Core_by_Segment_Pallet_1</l>
<l>    break</l>
<l>case 2:</l>
<l>    Vector_ID_Core_by_Segment_Pallet:=Vector_ID_Core_by_Segment_Pallet_2</l>
<l>    break</l>
<l>case 3:</l>
<l>    Vector_ID_Core_by_Segment_Pallet:=Vector_ID_Core_by_Segment_Pallet_3</l>
<l>    break</l>
<l>case 4:</l>
<l>    Vector_ID_Core_by_Segment_Pallet:=Vector_ID_Core_by_Segment_Pallet_4</l>
<l>    break</l>
<l>case 5:</l>
<l>    Vector_ID_Core_by_Segment_Pallet:=Vector_ID_Core_by_Segment_Pallet_5</l>
<l>    break</l>
<c>    </c>
<l>case 6:</l>
<l>    Vector_ID_Core_by_Segment_Pallet:=Vector_ID_Core_by_Segment_Pallet_6</l>
<l>    break    </l>
<l>endswitch</l>
<l>return ()</l>
</body>
<docu id="Get_Vector_Info_Cores_byUser">
<parameters>
<parameter id="N_pallet"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_1"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_2"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_3"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_4"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_5"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_6"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Vector_Entidades">
<interface>
<ic>
<par name="Vector_ID_Core_by_Segment_Pallet" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Vector_Entidades_Segmento" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c>*0.1.- identifico cuantos Cores existen por segmento</c>
<c></c>
<c></c>
<l>N_Cores_Segmento:=[]</l>
<l>Vector_N_Elementos:=[]</l>
<l>idx_aux:=0</l>
<l>for Index_Core_Seg := 0 to |Vector_ID_Core_by_Segment_Pallet|-1 by 1</l>
<c>    </c>
<l>    Core_Find_by_User := Vector_ID_Core_by_Segment_Pallet[Index_Core_Seg]</l>
<c>    </c>
<l>    tuple_split (Core_Find_by_User, ';', Aux)</l>
<l>    N_Cores_Segmento[Index_Core_Seg]:=|Aux|</l>
<c>    </c>
<c>    </c>
<l>    for Index_temp := 0 to |Aux|-1 by 1</l>
<c>        </c>
<l>        Vector_N_Elementos[idx_aux]:=Aux[Index_temp]</l>
<l>        idx_aux:=idx_aux+1</l>
<l>    endfor</l>
<c>    </c>
<l>endfor</l>
<c></c>
<c></c>
<c>*0.2.- identifico cuantos Cores existen y cuantas veces se repiten</c>
<l>Vector_Entidades:=[]</l>
<l>idx_Vector_Entidades:=0</l>
<l>for Index_temp := 0 to |Vector_N_Elementos|-1 by 1</l>
<l>    if(Vector_N_Elementos[Index_temp]='')</l>
<l>        continue</l>
<l>    endif</l>
<l>    N_core:=1</l>
<l>    Core_To_Find:=Vector_N_Elementos[Index_temp]</l>
<l>    if (Core_To_Find=' ' )</l>
<l>        continue       </l>
<l>    endif</l>
<l>    Vector_N_Elementos[Index_temp]:=' '</l>
<c>    </c>
<l>    for Index_temp_b := 0 to |Vector_N_Elementos|-1 by 1</l>
<l>        if (Core_To_Find=Vector_N_Elementos[Index_temp_b])</l>
<l>            N_core:=N_core+1  </l>
<l>            Vector_N_Elementos[Index_temp_b]:=' '</l>
<l>        endif</l>
<l>    endfor</l>
<c>    </c>
<c>    </c>
<l>    Vector_Entidades[idx_Vector_Entidades]:=Core_To_Find+';'+N_core</l>
<l>    idx_Vector_Entidades:=idx_Vector_Entidades+1</l>
<l>endfor</l>
<c></c>
<c>*0.3 Busco los cores y en que segmento se encuentran</c>
<c></c>
<l>Vector_Entidades_Segmento:=[]</l>
<l>for Index_temp := 0 to |Vector_Entidades|-1 by 1</l>
<c>    </c>
<l>    Aux:=Vector_Entidades[Index_temp]</l>
<l>    tuple_split (Aux, ';', Aux)</l>
<l>    Entidad:=Aux[0]</l>
<c>    </c>
<l>    Puntero_segmentos:=''</l>
<l>    for Index_temp_b := 0 to |Vector_ID_Core_by_Segment_Pallet|-1 by 1      </l>
<l>        tuple_strrstr (Vector_ID_Core_by_Segment_Pallet[Index_temp_b], Entidad, CoreExist)</l>
<l>        if (CoreExist &gt;=0)</l>
<l>            Puntero_segmentos:=Puntero_segmentos+';'+Index_temp_b</l>
<l>        endif</l>
<c>        </c>
<l>    endfor</l>
<c>    </c>
<l>    Vector_Entidades_Segmento[Index_temp]:=Entidad+Puntero_segmentos</l>
<l>    tuple_split (Vector_Entidades_Segmento[Index_temp], ';', Aux)</l>
<l>endfor</l>
<l>return ()</l>
</body>
<docu id="Get_Vector_Entidades">
<parameters>
<parameter id="Vector_Entidades_Segmento"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet"/>
</parameters>
</docu>
</procedure>
<procedure name="Find_Sector_Core">
<interface>
<ic>
<par name="Vector_ID_Core_by_Segment_Pallet" base_type="ctrl" dimension="0"/>
<par name="Vector_Entidades_Segmento" base_type="ctrl" dimension="0"/>
<par name="Path_CORE_ID" base_type="ctrl" dimension="0"/>
<par name="Path_3D_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_SFM_Segmentos" base_type="ctrl" dimension="0"/>
<par name="ROI3D_rotate" base_type="ctrl" dimension="0"/>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Visualizar3D" base_type="ctrl" dimension="0"/>
<par name="Vector_Segmento" base_type="ctrl" dimension="0"/>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
<par name="Sampling" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Vector_Existencia_Core" base_type="ctrl" dimension="2"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
</ic>
<oc>
<par name="Vector_Existencia_Core_New" base_type="ctrl" dimension="2"/>
</oc>
</interface>
<body>
<l>N_divisiones_Pallet:=9</l>
<l>N_divisiones_Pallet:=|Vector_ID_Core_by_Segment_Pallet|</l>
<l>dev_get_window (WindowHandle)</l>
<c></c>
<l>dev_inspect_ctrl(Vector_Existencia_Core)</l>
<l>for Index := 0 to N_divisiones_Pallet-1 by 1</l>
<l>    Vector_Existencia_Core.at(Index+1).at(0):=''</l>
<l>    Vector_Existencia_Core.at(Index+1).at(1):=false</l>
<c>    </c>
<l>endfor</l>
<c></c>
<c></c>
<l>* #########################################</l>
<c>**##### REVISAR #########################</c>
<l>* ## Si Vector_Entidades_Segmento funciona bien como limite del for</l>
<c></c>
<l>NEntidades:=|Vector_Entidades_Segmento|</l>
<c></c>
<c></c>
<l>try</l>
<c>    </c>
<l>    for N_Entidad := 0 to NEntidades-1 by 1</l>
<c>        </c>
<l>        tuple_split (Vector_Entidades_Segmento[N_Entidad], ';', Aux)</l>
<l>        Entidad_To_Find:=Aux[0]</l>
<l>        N_Sectores_To_Find:=|Aux|</l>
<l>        ROI3D:=[]</l>
<l>        dev_inspect_ctrl (Entidad_To_Find)</l>
<l>        dev_inspect_ctrl (Vector_Entidades_Segmento)</l>
<c>        </c>
<c>        </c>
<c>        ********************************************</c>
<c>        * Leo el SFM y STL del Core</c>
<c>        ********************************************</c>
<c>        </c>
<l>* #### Envio data de estado ########################      </l>
<l>        Estado:=9</l>
<l>        Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)     </l>
<l>* ################################################## </l>
<c>        </c>
<l>        if (Entidad_To_Find ==' ')</l>
<l>            Vector_Existencia_Core.at(N_Entidad+1).at(0):=Entidad_To_Find</l>
<l>            Vector_Existencia_Core.at(N_Entidad+1).at(1):=false</l>
<c>            </c>
<l>        else</l>
<c>            </c>
<l>            Get_SFM_STL (Entidad_To_Find, Path_CORE_ID, Path_3D_Segmentos, Path_SFM_Segmentos, Vector_Estado_Fx, SerialHandle, ObjectModel3D_Core_Pallet, SFM_Core_Pallet, Estado_Get_SFM_STL, Modelo3D_Select)</l>
<c>            </c>
<c>            </c>
<l>            for j := 1 to N_Sectores_To_Find-1 by 1</l>
<l>                N_Roi:=Aux[j]</l>
<l>                tuple_number (Aux[j], N_Roi)</l>
<l>                copy_object_model_3d (ROI3D_rotate[N_Roi], 'all', ROI3D_aux)</l>
<l>                ROI3D:=[ROI3D,ROI3D_aux]              </l>
<l>            endfor</l>
<l>            Get_ROI_3D (ROI3D, Escena3D_RAW, Modelo_3D_ROI)</l>
<c>            </c>
<c>            </c>
<l>*            Visualizar_3D ([ ROI3D,Escena3D_RAW], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Visualizar3D, [], [], [], WindowHandle, PoseOut1)</l>
<l> *           Visualizar_3D ([Modelo_3D_ROI], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Visualizar3D, [], [], [], WindowHandle1, PoseOut1)</l>
<c>            </c>
<c>            ***************************************************************</c>
<c>            *Filtro la altura maxima</c>
<c>            * Utilizo esto para elminar el piso de la escena y evitar errores</c>
<l>            Altura_Maxima_camara_Piso_Pallet:=2400</l>
<c>            ***************************************************************</c>
<l>            Set_Max_Altura_Model3D (Modelo_3D_ROI, Altura_Maxima_camara_Piso_Pallet, Modelo_3D_ROI_Thres)</l>
<c>            </c>
<c>            </c>
<l>*            Visualizar_3D ([Modelo_3D_ROI_Thres], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Visualizar3D, [], [], [], WindowHandle2, PoseOut1)</l>
<l> *          Visualizar_3D ([ObjectModel3D_Core_Pallet], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Visualizar3D, [], [], [], WindowHandle3, PoseOut1)</l>
<c>            </c>
<l>            N_Model_To_Find:=|Modelo_3D_ROI_Thres|</l>
<l>            if (|Modelo_3D_ROI_Thres|&gt;1)</l>
<c>                </c>
<l>                union_object_model_3d (Modelo_3D_ROI_Thres, 'points_surface', Modelo_3D_ROI_Thres)</l>
<l>*                Visualizar_3D ([Modelo_3D_ROI_Thres], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Visualizar3D, [], [], [], WindowHandle4, PoseOut1)</l>
<c>                </c>
<l>            endif</l>
<c>                      </c>
<c>            ****************************</c>
<c>            * Parametros de control</c>
<c>            ****************************</c>
<l>            Sampling_Find := 0.05</l>
<l>            Keypoint := 1</l>
<l>            MinScore := 0.01</l>
<l>            N_matches := N_Model_To_Find</l>
<l>            SFM:=SFM_Core_Pallet</l>
<l>            Escena3D:=Modelo_3D_ROI_Thres</l>
<l>            Mod_3D_Objeto:=ObjectModel3D_Core_Pallet</l>
<c>            </c>
<l>            Visualizar_3D ([Escena3D,Mod_3D_Objeto], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Visualizar3D, [], [], [], WindowHandle, PoseOut1)</l>
<c>            </c>
<c>            ****************************</c>
<l>* #### Envio data de estado ###############################################</l>
<l>            Estado:=10</l>
<l>            Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)            </l>
<l>* ######################################################################### </l>
<c>            </c>
<c>            </c>
<l> *           Find_Entity_3D (N_matches, SFM, Escena3D, Sampling_Find, Keypoint, MinScore, Mod_3D_Objeto, Modelo_3D_ROI_ThresEdges, PoseMLS, ScoreMLS, Pose_Refinada, Score_Refinado, SurfaceMatchingResultID1, Posicion3D_Objeto, Posicion3D_Objeto_REFIN, Obj_Detectado)</l>
<c>            </c>
<c>   </c>
<l>            if ( true)               </l>
<l>* #### Envio data de estado ###############################################               </l>
<l>                Estado:=11</l>
<l>                Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)             </l>
<l>* ######################################################################### </l>
<c>                    </c>
<l>                Vector_Existencia_Core.at(N_Entidad+1).at(0):=1</l>
<l>                Vector_Existencia_Core.at(N_Entidad+1).at(1):=true</l>
<l>            else</l>
<c>                </c>
<l>                Vector_Existencia_Core.at(N_Entidad+1).at(0):=Entidad_To_Find</l>
<l>                Vector_Existencia_Core.at(N_Entidad+1).at(1):=false</l>
<l>            endif</l>
<l>            clear_object_model_3d([ROI3D,Modelo_3D_ROI,ObjectModel3D_Core_Pallet])</l>
<l>            clear_surface_model (SFM_Core_Pallet)</l>
<l>        endif</l>
<c>        </c>
<l>    endfor</l>
<l>catch (Exception)</l>
<l>    Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<c>    </c>
<l>endtry</l>
<l>Vector_Existencia_Core_New:=Vector_Existencia_Core</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Find_Sector_Core">
<parameters>
<parameter id="Escena3D_RAW"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="Path_3D_Segmentos"/>
<parameter id="Path_CORE_ID"/>
<parameter id="Path_SFM_Segmentos"/>
<parameter id="ROI3D_rotate"/>
<parameter id="Sampling"/>
<parameter id="SerialHandle"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="Vector_Entidades_Segmento"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="Vector_Existencia_Core"/>
<parameter id="Vector_Existencia_Core_New"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet"/>
<parameter id="Vector_Segmento"/>
<parameter id="Visualizar3D"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_Pulse_EthernetIp_Data">
<interface>
<ic>
<par name="Tag_Destino" base_type="ctrl" dimension="0"/>
<par name="Variable_On" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Variable_Off" base_type="ctrl" dimension="0"/>
<par name="Time" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>    Send_EthernetIP_Data (Tag_Destino, Variable_On, SerialHandle)</l>
<l>    wait_seconds(Time)</l>
<l>   Send_EthernetIP_Data (Tag_Destino, Variable_Off, SerialHandle)</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Send_Pulse_EthernetIp_Data">
<parameters>
<parameter id="SerialHandle"/>
<parameter id="Tag_Destino"/>
<parameter id="Time"/>
<parameter id="Variable_Off"/>
<parameter id="Variable_On"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Vector_Estados">
<interface>
<oc>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
</oc>
</interface>
<body>
<l>Vector_Estado_Fx	:=	{ {[]}}</l>
<l>Vector_Estado_Fx.at(0).at(0)	:=	 'Valor Estado'</l>
<l>Vector_Estado_Fx.at(0).at(1)	:=	 'Codificacion'</l>
<c>		</c>
<l>Nestado	:=	1</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 'Adquiriendo fotografia'</l>
<l>Nestado	:=	2</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' Adquiriendo informacion de pallets'</l>
<l>Nestado	:=	3</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 'Analizando Pallet'</l>
<l>Nestado	:=	4</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 'Fallo en adquisición de imagen'</l>
<l>Nestado	:=	5</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 'Fallo en ROI Pallet'</l>
<l>Nestado	:=	6</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 'Buscando esquina del pallet'</l>
<l>Nestado	:=	7</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 'No se detecto Esquina de Pallet'</l>
<l>Nestado	:=	8</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' Busco de manera sectorizada cada core en el pallet'</l>
<l>Nestado	:=	9</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 'Leyendo STl del Core'</l>
<l>Nestado	:=	10</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	  'Buscando core en el segmento del pallet'</l>
<l>Nestado	:=	11</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 'Core  DETECTADO en segmento de PALLET'</l>
<l>Nestado	:=	12</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	   'No se detecto Core en el segmento del pallet'</l>
<l>Nestado	:=	13</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	  'Escritura de existencia de cores de Pallet solicitado'</l>
<l>Nestado	:=	14</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 'Detección de patrón Exitoso'</l>
<l>Nestado	:=	15</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 'No se a logrado extraer el patrón'</l>
<l>Nestado	:=	16</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	  'Buscando Patrón'</l>
<l>Nestado	:=	17</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 'Enviando coordenadas de patrón al Robot'</l>
<l>Nestado	:=	18</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 'Fin GET_PATRON_POSE'</l>
<l>Nestado	:=	19</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 '#### BLOQUE  0 INICIADO ####'</l>
<l>Nestado	:=	20</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 'Adquiriendo Multifoto'</l>
<l>Nestado	:=	21</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' Busqueda Finalizada'</l>
<l>Nestado	:=	22</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 '  ### Error ### Orientacion de Core detectado Incorrecta '</l>
<l>Nestado	:=	23</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' ### Error ### Manga No Detectada'</l>
<l>Nestado	:=	24</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' Leyendo Modelo de 3D'</l>
<l>Nestado	:=	25</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' Leyendo Modelo de Superficie'</l>
<l>Nestado	:=	26</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	27</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	28</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	29</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	30</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	31</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	32</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	33</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	34</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	35</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	36</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	37</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	38</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	39</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	40</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	41</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	42</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	43</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	44</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	45</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	46</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	47</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	48</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	49</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	50</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	51</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	52</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	53</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	54</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	55</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	56</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	57</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	58</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	59</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	60</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	61</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	62</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	63</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	64</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	65</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	66</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	67</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	68</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	69</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	70</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	71</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	72</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	73</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	74</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	75</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	76</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	77</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	78</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	79</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	80</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	81</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	82</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	83</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	84</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	85</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	86</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	87</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	88</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	89</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	90</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	91</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	92</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<c></c>
</body>
<docu id="Get_Vector_Estados">
<parameters>
<parameter id="Vector_Estado_Fx"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_Estado_Subproceso">
<interface>
<ic>
<par name="Variable_On" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Tag_Destino" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c> </c>
<c>    *Tiempo en segundos</c>
<l>    Time:=0.1</l>
<l>    Variable_Off:=0</l>
<l>    Send_Pulse_EthernetIp_Data (Tag_Destino, Variable_On, SerialHandle, Variable_Off, Time)</l>
<c>    </c>
<c>    </c>
<l>return ()</l>
</body>
<docu id="Send_Estado_Subproceso">
<parameters>
<parameter id="SerialHandle"/>
<parameter id="Tag_Destino"/>
<parameter id="Variable_On"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Core_Presence">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="Vector_ID_Core_by_Segment_Pallet_1" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_2" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_3" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_4" base_type="ctrl" dimension="0"/>
<par name="Path_SFM_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_3D_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_CORE_ID" base_type="ctrl" dimension="0"/>
<par name="N_Pallet_to_Scan" base_type="ctrl" dimension="0"/>
<par name="NxLib_1" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_5" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_6" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c></c>
<c></c>
<l>Parametros_Visualizacion:=['disp_pose','color_attrib','lut','disp_lines','point_size']</l>
<l>Valores_Visualizacion:= ['true','coord_z','rainbow','true',1]</l>
<l>  dev_get_window (WindowHandle)</l>
<c></c>
<c>*****************************************************</c>
<l>Estado:=1</l>
<l>Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* ###################################################</l>
<c></c>
<c></c>
<c>*****************************************************************************************************************************</c>
<c>************  Capturo Imagenes **********************************************************************************************</c>
<l>Get_Pallet_Model (Objeto_0, Objeto_1, Objeto_2, Objeto_3, Zobj1, Xobj1, Yobj1, Img_Left_Esquina, NxLib_1, Camera_1, Vector_Estado_Fx,\
                  SerialHandle, N_Pallet_to_Scan, Pose_Robot, Escena3D_RAW, Base_esquina, Estado_Fx)</l>
<c></c>
<c></c>
<l>Visualizar_3D ([Escena3D_RAW], Parametros_Visualizacion, Valores_Visualizacion, false, [], [], [], WindowHandle, PoseOut1)</l>
<c>******************************************************************************************************************************</c>
<l>if (Estado_Fx=false)</l>
<l>    Mensaje:='##ERROR## Bloque 0'</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<l>    return()</l>
<c>    </c>
<l>endif</l>
<c>*********************************************************************   </c>
<c></c>
<l>Vector_ID_Core_by_Segment_Pallet:=[]</l>
<c></c>
<l>* ################################################################################</l>
<c>*2. Adquiero informacion del usuario quien indica donde ira cada core en el pallet</c>
<l>* ################################################################################</l>
<c></c>
<l>* #### Envio data de estado ######################################################</l>
<l>Estado:=2</l>
<l>Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* #################################################################################</l>
<c>* Selecciono el pallet del usuario</c>
<l>* #################################################################################</l>
<l>Get_Vector_Info_Cores_byUser (N_Pallet_to_Scan,\
                              Vector_ID_Core_by_Segment_Pallet_1, Vector_ID_Core_by_Segment_Pallet_2, Vector_ID_Core_by_Segment_Pallet_3, Vector_ID_Core_by_Segment_Pallet_4, Vector_ID_Core_by_Segment_Pallet_5, Vector_ID_Core_by_Segment_Pallet_6,\
                              Vector_ID_Core_by_Segment_Pallet)</l>
<c></c>
<c></c>
<l>* ###############################################################################</l>
<c>*3. Busco los cores del usuario Vector_ID_Core_by_Segment_Pallet en el pallet N_Pallet_to_Scan</c>
<l>* ###############################################################################</l>
<c></c>
<l>* #### Envio data de estado ########################</l>
<l>Estado:=3</l>
<l>Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* ################################################## </l>
<c></c>
<c></c>
<l>Vector_Existencia_Core:={ { [] } }</l>
<l>Vector_Existencia_Core.at(0).at(0):='CORE'</l>
<l>Vector_Existencia_Core.at(0).at(1):='Existencia'</l>
<l>Visualizar3D:=false</l>
<c></c>
<l>Get_Core_Presence_In_Pallet (Zobj1, Xobj1, Yobj1, Img_Left_Esquina, Escena3D_RAW, Pose_Robot, N_Pallet_to_Scan, Path_SFM_Segmentos, Path_3D_Segmentos, Vector_ID_Core_by_Segment_Pallet, Path_CORE_ID, SerialHandle, Vector_Estado_Fx, Base_esquina, Visualizar3D, Estado_Fx, Estado_SubProceso_Get_Core_Presence_In_Pallet)</l>
<c></c>
<c></c>
<c></c>
<l>* ######################################################################################</l>
<l>* #################### Fin Bloque 1 ####################################################</l>
<l>* ######################################################################################</l>
<c></c>
<l>* clear_object_model_3d([Escena3D_RAW])</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Core_Presence">
<parameters>
<parameter id="Camera_1"/>
<parameter id="N_Pallet_to_Scan"/>
<parameter id="NxLib_1"/>
<parameter id="Path_3D_Segmentos"/>
<parameter id="Path_CORE_ID"/>
<parameter id="Path_SFM_Segmentos"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_1"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_2"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_3"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_4"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_5"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_6"/>
</parameters>
</docu>
</procedure>
<procedure name="BD_Dinamica">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Estado" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
</ic>
<oc>
<par name="Vector_ID_Core_by_Segment_Pallet_1" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_2" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_3" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_4" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_5" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_6" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>wait_seconds(0.01)</l>
<c></c>
<l>Estado:=2</l>
<l>Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<c></c>
<c></c>
<l>Variable_BD := 'pallet_1'</l>
<l>Get_Pallet_BD (Variable_BD, SerialHandle, DataBD)</l>
<l>for Index := 0 to |DataBD|-1 by 1  </l>
<l>    Vector_ID_Core_by_Segment_Pallet_1[Index]:=DataBD[Index]</l>
<l>endfor</l>
<c></c>
<l>Variable_BD := 'pallet_2'</l>
<l>Get_Pallet_BD (Variable_BD, SerialHandle, DataBD)</l>
<l>for Index := 0 to |DataBD|-1 by 1  </l>
<l>    Vector_ID_Core_by_Segment_Pallet_2[Index]:=DataBD[Index]</l>
<l>endfor</l>
<c></c>
<l>Variable_BD := 'pallet_3'</l>
<l>Get_Pallet_BD (Variable_BD, SerialHandle, DataBD)</l>
<l>for Index := 0 to |DataBD|-1 by 1  </l>
<l>    Vector_ID_Core_by_Segment_Pallet_3[Index]:=DataBD[Index]</l>
<l>endfor</l>
<c></c>
<l>Variable_BD := 'pallet_4'</l>
<l>Get_Pallet_BD (Variable_BD, SerialHandle, DataBD)</l>
<l>for Index := 0 to |DataBD|-1 by 1  </l>
<l>    Vector_ID_Core_by_Segment_Pallet_4[Index]:=DataBD[Index]</l>
<l>endfor</l>
<c></c>
<l>Variable_BD := 'pallet_5'</l>
<l>Get_Pallet_BD (Variable_BD, SerialHandle, DataBD)</l>
<l>for Index := 0 to |DataBD|-1 by 1  </l>
<l>    Vector_ID_Core_by_Segment_Pallet_5[Index]:=DataBD[Index]</l>
<l>endfor</l>
<c></c>
<c></c>
<l>Variable_BD := 'pallet_6'</l>
<l>Get_Pallet_BD (Variable_BD, SerialHandle, DataBD)</l>
<l>for Index := 0 to |DataBD|-1 by 1  </l>
<l>    Vector_ID_Core_by_Segment_Pallet_6[Index]:=DataBD[Index]</l>
<l>endfor</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="BD_Dinamica">
<parameters>
<parameter id="Estado"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_1"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_2"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_3"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_4"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_5"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_6"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_Data_Proceso">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Resultado" base_type="ctrl" dimension="0"/>
<par name="Procesando" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c></c>
<l>* ##### Envio de Procesando  #######################</l>
<l>Estado_SubProceso:=Procesando </l>
<l>Tag_Destino:='_EV01_I_Procesando'</l>
<l>Valor_Variable:=Estado_SubProceso</l>
<l>Send_EthernetIP_Data (Tag_Destino, Valor_Variable, SerialHandle)</l>
<l>* #### Fin envio de Resultado ######################  </l>
<c></c>
<c></c>
<c></c>
<l>* ##### Envio de Resultado  #######################</l>
<l>* # [1] = Bien [2] = falla</l>
<l>Tag_Destino:='_EV01_I_Resultado'</l>
<l>Variable_On:=Resultado</l>
<l>Send_Estado_Subproceso (Variable_On, SerialHandle, Tag_Destino)</l>
<l>* #### Fin envio de Resultado ######################  </l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Send_Data_Proceso">
<parameters>
<parameter id="Procesando"/>
<parameter id="Resultado"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_Estado_Subproceso_COPY_1">
<interface>
<ic>
<par name="Variable_On" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Tag_Destino" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* </c>
<c>* Tiempo en segundos</c>
<l>Time := 0.5</l>
<l>Variable_Off := 0</l>
<l>Send_Pulse_EthernetIp_Data (Tag_Destino, Variable_On, SerialHandle, Variable_Off, Time)</l>
<l>return ()</l>
</body>
<docu id="Send_Estado_Subproceso_COPY_1">
<parameters>
<parameter id="SerialHandle"/>
<parameter id="Tag_Destino"/>
<parameter id="Variable_On"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Rectif_Image">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="ImageMapped" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="CameraParameters" base_type="ctrl" dimension="0"/>
<par name="CameraPose" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ScaleForCenteredImage" base_type="ctrl" dimension="0"/>
<par name="PoseForCenteredImage" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>ImageOut := Image</l>
<l>get_image_size (ImageOut, Width, Height)</l>
<l>CenterRow := Width/2</l>
<l>CenterCol := Height/2</l>
<l>WidthMappedImage := Width</l>
<l>HeightMappedImage := Height</l>
<l>parameters_image_to_world_plane_centered (CameraParameters, CameraPose, CenterRow, CenterCol, WidthMappedImage, HeightMappedImage, ScaleForCenteredImage, PoseForCenteredImage)</l>
<c>* </c>
<c>* </c>
<l>gen_image_to_world_plane_map (Map, CameraParameters, PoseForCenteredImage, Width, Height, WidthMappedImage, HeightMappedImage, ScaleForCenteredImage, 'bilinear')</l>
<l>map_image (ImageOut, Map, ImageMapped)</l>
<c>* </c>
<l>return ()</l>
</body>
<docu id="Get_Rectif_Image">
<parameters>
<parameter id="CameraParameters"/>
<parameter id="CameraPose"/>
<parameter id="Image"/>
<parameter id="ImageMapped"/>
<parameter id="PoseForCenteredImage"/>
<parameter id="ScaleForCenteredImage"/>
</parameters>
</docu>
</procedure>
<procedure name="calc_calplate_pose_movingcam">
<interface>
<ic>
<par name="CalibObjInBasePose" base_type="ctrl" dimension="0"/>
<par name="ToolInCamPose" base_type="ctrl" dimension="0"/>
<par name="ToolInBasePose" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="CalibObjInCamPose" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* CalibObjInCamPose = cam_H_calplate</c>
<c>*                   = cam_H_tool * tool_H_base * base_H_calplate</c>
<c>*                   = ToolInCamPose * BaseInToolPose * CalibrationPose</c>
<l>pose_invert (ToolInBasePose, BaseInToolPose)</l>
<l>pose_compose (ToolInCamPose, BaseInToolPose, BaseInCamPose)</l>
<l>pose_compose (BaseInCamPose, CalibObjInBasePose, CalibObjInCamPose)</l>
<c>* </c>
<c>* </c>
<c>* </c>
<c>* </c>
<l>return ()</l>
</body>
<docu id="calc_calplate_pose_movingcam">
<short lang="en_US">compute cam_H_calplate from hand-eye calibration results</short>
<short lang="es_ES">compute cam_H_calplate from hand-eye calibration results</short>
<parameters>
<parameter id="CalibObjInBasePose"/>
<parameter id="CalibObjInCamPose"/>
<parameter id="ToolInBasePose"/>
<parameter id="ToolInCamPose"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Pose_Caltab">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="CameraParameters" base_type="ctrl" dimension="0"/>
<par name="CameraPose" base_type="ctrl" dimension="0"/>
<par name="CalTabFile" base_type="ctrl" dimension="0"/>
<par name="CamParam" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="PoseForCalibrationPlate" base_type="ctrl" dimension="0"/>
<par name="EstadoFx" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>try</l>
<l>    ImageOut := Image</l>
<c>    </c>
<c>    </c>
<l>*     read_cam_par ('C:/Users/Ignacio Corvalan/Dropbox (MIRS)/1.-Servidor Desarrollo Software/7.-Magotteaux/4.-Optica/CamParamError.dat', StartCamParam)</l>
<c>    </c>
<l>*     Get_Rectif_Image (ImageOut, ImageOut, CameraParameters, CameraPose, ScaleForCenteredImage, PoseForCenteredImage)</l>
<c>    * </c>
<l>    create_calib_data ('hand_eye_moving_cam', 1, 1, CalibDataID)</l>
<l>    set_calib_data_cam_param (CalibDataID, 0, [], CamParam)</l>
<l>    set_calib_data_calib_object (CalibDataID, 0, CalTabFile)</l>
<l>    set_calib_data (CalibDataID, 'model', 'general', 'optimization_method', 'nonlinear')</l>
<c>    * </c>
<l>    find_calib_object (ImageOut, CalibDataID, 0, 0, 0, [], [])</l>
<c>    * </c>
<c>    * </c>
<l>*     find_caltab (Image, CalPlate, CalTabFile, 3, 100, 20)</l>
<l>*     find_marks_and_pose (Image, CalPlate, CalTabFile, CamParam, 128, 10, 18, 0.9, 15, 100, RCoord1, CCoord1, StartPose)</l>
<l>*     dev_set_color ('blue')</l>
<l>*     disp_cross (200000, RCoord1, CCoord1, 40, StartPose[5])</l>
<c>    * </c>
<l>    get_calib_data_observ_contours (Caltab, CalibDataID, 'caltab', 0, 0, 0)</l>
<l>    get_calib_data_observ_points (CalibDataID, 0, 0, 0, RCoord, CCoord, Index, PoseForCalibrationPlate)</l>
<c>    * </c>
<c>    * *****************************************************************</c>
<c>    * Si quiero [mm]</c>
<c>    </c>
<l>    PoseForCalibrationPlate[0:2] := PoseForCalibrationPlate[0:2]*1000</l>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    PoseForCalibrationPlate[3]:= PoseForCalibrationPlate[3]*0</l>
<l>    PoseForCalibrationPlate[4]:=PoseForCalibrationPlate[4]*0</l>
<c>    </c>
<l>    if ( PoseForCalibrationPlate[3]&gt;360)</l>
<l>        PoseForCalibrationPlate[3]:= PoseForCalibrationPlate[3]-360</l>
<l>    endif</l>
<l>    if ( PoseForCalibrationPlate[4]&gt;360)</l>
<l>        PoseForCalibrationPlate[4]:= PoseForCalibrationPlate[4]-360</l>
<l>    endif</l>
<l>    if ( PoseForCalibrationPlate[4]&gt;270)</l>
<l>        ZCorregido:=PoseForCalibrationPlate[4]-360</l>
<l>         PoseDisplay[5]:=ZCorregido</l>
<l>    endif</l>
<c>    </c>
<l>    *dev_inspect_ctrl(PoseForCalibrationPlate)</l>
<l>    PoseDisplay:=PoseForCalibrationPlate</l>
<c>   </c>
<c>    </c>
<l>    disp_3d_coord_system (200000, CamParam, PoseForCalibrationPlate, 50)</l>
<c>    </c>
<c>    * ****************************************************************</c>
<c>    * </c>
<l>*     dev_inspect_ctrl (PoseForCalibrationPlate)</l>
<c>    * </c>
<c>    * </c>
<l>    dev_set_color ('green')</l>
<l>    dev_display (ImageOut)</l>
<l>    dev_display (Caltab)</l>
<l>    dev_set_color ('yellow')</l>
<l>    disp_cross (200000, RCoord, CCoord, 6, 0)</l>
<l>    dev_set_colored (3)</l>
<l>    disp_3d_coord_system (200000, CamParam, PoseForCalibrationPlate, 50)</l>
<c>    * </c>
<l>    Length := |RCoord|</l>
<l>    texto[0] := 'Org X: '</l>
<l>    texto[1] := 'Org Y: '</l>
<l>    texto[2] := 'Org Z: '</l>
<l>    texto[3] := 'Org C: '</l>
<l>    texto[4] := 'Org B: '</l>
<l>    texto[5] := 'Org A: '</l>
<l>    texto[6] := ' '</l>
<c>    * </c>
<l>    N_ossf := 13</l>
<l>    dev_disp_text (texto+PoseDisplay, 'image', RCoord[Length-N_ossf], CCoord[Length-N_ossf], 'black', 'box_color', '#ffffff77')</l>
<c>    </c>
<l>    clear_calib_data (CalibDataID)</l>
<c>    </c>
<c>    </c>
<l>    EstadoFx:=true</l>
<l>catch (Exception)</l>
<c>    </c>
<l>    Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>endtry</l>
<c>* </c>
<l>return ()</l>
<c>* </c>
<c>* </c>
</body>
<docu id="Get_Pose_Caltab">
<parameters>
<parameter id="CalTabFile"/>
<parameter id="CamParam"/>
<parameter id="CameraParameters"/>
<parameter id="CameraPose"/>
<parameter id="EstadoFx"/>
<parameter id="Image"/>
<parameter id="PoseForCalibrationPlate"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Cam_Parameters">
<interface>
<oc>
<par name="StartCamParam" base_type="ctrl" dimension="0"/>
<par name="CameraPose" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* </c>
<l>*  read_cam_par ('C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/7.-HandEye/2. procilica/CamParamHandEye_Procilica.dat', StartCamParam)</l>
<l>* read_cam_par ('C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/7.-HandEye/2. procilica/CamParamProcilica.dat', StartCamParam)</l>
<c></c>
<l>*  read_cam_par ('C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/7.-HandEye/2. procilica/OldParam/CamParamProcilica.dat', StartCamParam)</l>
<c></c>
<c></c>
<c as_id="calibration" as_name="Calibration 01" as_grp="[1,1]" as_ord="1">* Calibration 01: Code generated by Calibration 01</c>
<l as_id="calibration" as_name="Calibration 01" as_grp="[2,1]" as_ord="1">*  StartCamParam := ['area_scan_polynomial',0.0179894,259.999,-610461,1.41677e+008,0.130341,0.0241108,5.50664e-006,5.5e-006,2497.08,1638.81,4896,3264]</l>
<l as_id="calibration" as_name="Calibration 01" as_grp="[2,2]" as_ord="1">* StartCamParam := ['area_scan_polynomial',0.01835,259.999,-610461,1.41677e+008,0.130341,0.0241108,5.50664e-006,5.5e-006,2497.08,1638.81,4896,3264]</l>
<l>* CameraPose := [-0.663567,-0.435754,0.850547,359.689,0.839897,358.489,0]</l>
<l as_id="calibration" as_name="Calibration 01" as_grp="[4,1]" as_ord="1">*stop ()</l>
<c></c>
<l>* StartCamParam := ['area_scan_polynomial',0.01835,262.327,-651185,2.91549e+008,0.123579,0.0221396,5.50733e-006,5.5e-006,2488.72,1654.19,4896,3264]</l>
<l>* CameraPose := [0.104144,-0.0943174,0.755429,359.77,0.850164,358.49,0]</l>
<c></c>
<c>*****************************</c>
<l>   StartCamParam := ['area_scan_polynomial',0.01805,272.457,-680091,3.32014e+008,0.0290104,0.136334,5.49285e-006,5.5e-006,2487.1,1615.27,4896,3264]</l>
<l>   CameraPose := [0.0920832,-0.0275879,0.791785,358.714,1.19796,90.4632,0]</l>
<c>*************************  </c>
<c>  </c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Cam_Parameters">
<parameters>
<parameter id="CameraPose"/>
<parameter id="StartCamParam"/>
</parameters>
</docu>
</procedure>
<procedure name="Bloque_2">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="AcqHandle" base_type="ctrl" dimension="0"/>
<par name="CameraParameters" base_type="ctrl" dimension="0"/>
<par name="CameraPose" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Estado_SubProceso" base_type="ctrl" dimension="0"/>
<par name="PoseForCalibrationPlate" base_type="ctrl" dimension="0"/>
<par name="ToolInCamPose" base_type="ctrl" dimension="0"/>
<par name="ToolInBasePose" base_type="ctrl" dimension="0"/>
<par name="ObjInBasePoseOut" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>CameraPoseOut := CameraPose</l>
<l>Mensaje:='Inicio BLOQUE 1. Busqueda de patron en Pattern'</l>
<l>Send_Data_Info (Mensaje, SerialHandle)</l>
<l>try</l>
<c>    * Reseteo las variable de resultado</c>
<l>* # ### Envio data de estado ########################</l>
<l>    Estado := 1</l>
<l>    Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>    Resultado := 0</l>
<l>    Procesando := 1</l>
<l>    Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* # #################################################</l>
<c>    </c>
<l>    Time:=45000</l>
<l>    Gain:=8.0</l>
<l>    Set_exposure_Time_cam_0 (AcqHandle, Time, Gain) </l>
<c>    </c>
<l>    Get_Image (Image, AcqHandle)</l>
<c>    </c>
<l>    get_image_size (Image, Width, Height)</l>
<c>    </c>
<l>    disp_cross (200000,  Height/2,Width/2, 1500, 0)</l>
<c>    ***********************************************************************</c>
<c>    ****** Guardo las Imagenes ********************************************</c>
<l>    get_system_time (MSecond, Second, Minute, Hour, Day, YDay, Month, Year)</l>
<c>    </c>
<l>    write_object (Image, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/Imagen'+Month+Day+Hour+Second)</l>
<c>    </c>
<c>**     read_image (Image, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/Imagen617943.hobj')</c>
<c>    ************************************************************************</c>
<c>    * **************************************************</c>
<c>    * Hand Eye Apunto al Descriptor</c>
<c>    * **************************************************</c>
<l>    Mensaje:='Cargando descriptores de distorcion y de patron'</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<c>    </c>
<l>    CalTabFile := 'C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/6.- Caltab Din3/Caltab5x5_10.descr'</l>
<l>    Get_Cam_Parameters (StartCamParam, CameraPoseOut)</l>
<c>    </c>
<l>    disp_cross (200000, 2474, 1612, 500, 0)</l>
<c>    </c>
<c>    * **************************************************</c>
<l>* # ### Envio data de estado ########################</l>
<l>    Estado := 16</l>
<l>    Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* # #################################################</l>
<c>    * </c>
<l>    Get_Pose_Caltab (Image, StartCamParam, CameraPoseOut, CalTabFile, StartCamParam, SerialHandle, PoseForCalibrationPlate, EstadoFx)</l>
<c>    </c>
<l>*     Get_Robot_Pose(SerialHandle,ToolInBasePose)</l>
<c>    </c>
<l>*     Get_ObjInBasePose (PoseForCalibrationPlate, ToolInBasePose, ObjInBasePose)</l>
<c>    </c>
<l>    if (EstadoFx)</l>
<l>        Estado := 14</l>
<l>        Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<c>        * *******************************</c>
<c>        * Enviar por ETHERNETIP</c>
<c>        * *******************************      </c>
<l>* # ### Envio data de estado ########################</l>
<l>        Estado := 17</l>
<l>        Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* # #################################################</l>
<c>        *****************************   </c>
<l>        OsffetX:=-1.13                 +3.35*0</l>
<l>        OsffetY:=-6.5</l>
<l>        OsffetZ:=-10.78               -15.32*0</l>
<c>        *****************************</c>
<l>        OsffetY:=    OsffetY+0.25      -1.46*0</l>
<c> </c>
<l>*         OsffetX:=  2.84</l>
<l>*         OsffetY:= -3.44</l>
<l>*         OsffetZ:=-22.85*0</l>
<c>        *****************************</c>
<c>  </c>
<c>        </c>
<l>        PoseForCalibrationPlate[0]:=PoseForCalibrationPlate[0]+OsffetX</l>
<l>        PoseForCalibrationPlate[1]:=PoseForCalibrationPlate[1]+OsffetY</l>
<l>        PoseForCalibrationPlate[2]:=PoseForCalibrationPlate[2]+OsffetZ*0</l>
<c>        </c>
<c>        </c>
<l>        Send_Data_To_Robot(PoseForCalibrationPlate, SerialHandle)       </l>
<l>        Resultado := 1</l>
<l>        Procesando := 0</l>
<l>        Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* # #################################################</l>
<c>        </c>
<c>        </c>
<c>        </c>
<l>    endif</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>catch (Exception)</l>
<c>    </c>
<l>* # ### Envio data de estado ########################</l>
<l>    Estado := 15</l>
<l>    Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>    Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<c>    </c>
<l>* # #################################################</l>
<c>    </c>
<l>endtry</l>
<c></c>
<l>Mensaje:='####### FIN BLOQUE 1. Busqueda de patron en Pattern #######' </l>
<l>Send_Data_Info (Mensaje, SerialHandle)</l>
<l>return ()</l>
</body>
<docu id="Bloque_2">
<parameters>
<parameter id="AcqHandle"/>
<parameter id="CameraParameters"/>
<parameter id="CameraPose"/>
<parameter id="Estado_SubProceso"/>
<parameter id="ObjInBasePoseOut"/>
<parameter id="PoseForCalibrationPlate"/>
<parameter id="SerialHandle"/>
<parameter id="ToolInBasePose"/>
<parameter id="ToolInCamPose"/>
<parameter id="Vector_Estado_Fx"/>
</parameters>
</docu>
</procedure>
<procedure name="parameters_image_to_world_plane_centered">
<interface>
<ic>
<par name="CamParam" base_type="ctrl" dimension="0"/>
<par name="Pose" base_type="ctrl" dimension="0"/>
<par name="CenterRow" base_type="ctrl" dimension="0"/>
<par name="CenterCol" base_type="ctrl" dimension="0"/>
<par name="WidthMappedImage" base_type="ctrl" dimension="0"/>
<par name="HeightMappedImage" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ScaleForCenteredImage" base_type="ctrl" dimension="0"/>
<par name="PoseForCenteredImage" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* Determine the scale for the mapping</c>
<c>* (here, the scale is determined such that in the</c>
<c>*   surroundings of the given point  the image scale of the</c>
<c>*   mapped image is similar to the image scale of the original image)</c>
<l>Dist_ICS := 1</l>
<l>image_points_to_world_plane (CamParam, Pose, CenterRow, CenterCol, 1, CenterX, CenterY)</l>
<l>image_points_to_world_plane (CamParam, Pose, CenterRow + Dist_ICS, CenterCol, 1, BelowCenterX, BelowCenterY)</l>
<l>image_points_to_world_plane (CamParam, Pose, CenterRow, CenterCol + Dist_ICS, 1, RightOfCenterX, RightOfCenterY)</l>
<l>distance_pp (CenterY, CenterX, BelowCenterY, BelowCenterX, Dist_WCS_Vertical)</l>
<l>distance_pp (CenterY, CenterX, RightOfCenterY, RightOfCenterX, Dist_WCS_Horizontal)</l>
<l>ScaleVertical := Dist_WCS_Vertical / Dist_ICS</l>
<l>ScaleHorizontal := Dist_WCS_Horizontal / Dist_ICS</l>
<l>ScaleForCenteredImage := (ScaleVertical + ScaleHorizontal) / 2.0</l>
<c>* Determine the parameters for set_origin_pose such</c>
<c>* that the point given via get_mbutton will be in the center of the</c>
<c>* mapped image</c>
<l>DX := CenterX - ScaleForCenteredImage * WidthMappedImage / 2.0</l>
<l>DY := CenterY - ScaleForCenteredImage * HeightMappedImage / 2.0</l>
<l>DZ := 0</l>
<l>set_origin_pose (Pose, DX, DY, DZ, PoseForCenteredImage)</l>
<l>return ()</l>
</body>
<docu id="parameters_image_to_world_plane_centered">
<short lang="en_US">Determines scale and pose for the operator image_to_world_plane such that a given point appears in the center and that the scale of the rectified image is similar to the scale of the original image.</short>
<short lang="es_ES">Determines scale and pose for the operator image_to_world_plane such that a given point appears in the center and that the scale of the rectified image is similar to the scale of the original image.</short>
<parameters>
<parameter id="CamParam"/>
<parameter id="CenterCol"/>
<parameter id="CenterRow"/>
<parameter id="HeightMappedImage"/>
<parameter id="Pose"/>
<parameter id="PoseForCenteredImage"/>
<parameter id="ScaleForCenteredImage"/>
<parameter id="WidthMappedImage"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Pose_Punto_Insercion">
<interface>
<ic>
<par name="PoseForCalibrationPlate" base_type="ctrl" dimension="0"/>
<par name="ToolInCamPose" base_type="ctrl" dimension="0"/>
<par name="ToolInBasePose" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ObjInBasePose" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* </c>
<l>ObjInCamPose := PoseForCalibrationPlate</l>
<c>* </c>
<l>ToolInCamPose_Aux := ToolInCamPose</l>
<c>* </c>
<l>pose_invert (ToolInCamPose, CamInToolPose)</l>
<l>pose_compose (ToolInBasePose, CamInToolPose, CamInBasePose)</l>
<l>pose_compose (CamInBasePose, ObjInCamPose, ObjInBasePose)</l>
<c>* </c>
<l>dev_inspect_ctrl (ObjInBasePose)</l>
<c>* </c>
<l>osffetX := 0</l>
<l>osffetY := 0</l>
<l>osffetZ := 0</l>
<c>* </c>
<l>pto1 := ObjInBasePose[0]+osffetX</l>
<l>pto2 := ObjInBasePose[1]+osffetY</l>
<l>pto3 := ObjInBasePose[2]+osffetZ</l>
<c>* </c>
<l>ObjInBasePose[0] := pto1</l>
<l>ObjInBasePose[1] := pto2</l>
<l>ObjInBasePose[2] := pto3</l>
<c>* </c>
<c>* </c>
<l>Get_Pose_Tool (SerialHandle, LapizInBasePose)</l>
<l>DinOssfet[0] := LapizInBasePose[0]-ObjInBasePose[0]</l>
<l>DinOssfet[1] := LapizInBasePose[1]-ObjInBasePose[1]</l>
<l>DinOssfet[2] := LapizInBasePose[2]-ObjInBasePose[2]</l>
<c>* </c>
<l>Get_Pose_Tool (SerialHandle, LapizInBasePose_Estimado)</l>
<l>DinOssfet[0] := LapizInBasePose[0]-LapizInBasePose_Estimado[0]</l>
<l>DinOssfet[1] := LapizInBasePose[1]-LapizInBasePose_Estimado[1]</l>
<l>DinOssfet[2] := LapizInBasePose[2]-LapizInBasePose_Estimado[2]</l>
<c>* </c>
<c>* </c>
<c>* </c>
<c>* </c>
<l>stop ()</l>
<c>* </c>
<c>* </c>
<l>return ()</l>
</body>
<docu id="Get_Pose_Punto_Insercion">
<parameters>
<parameter id="ObjInBasePose"/>
<parameter id="PoseForCalibrationPlate"/>
<parameter id="SerialHandle"/>
<parameter id="ToolInBasePose"/>
<parameter id="ToolInCamPose"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Pose_Tool">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ToolInBasePose" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>wait_seconds(0.1)</l>
<c></c>
<l>try</l>
<c>  </c>
<l>I := 0</l>
<c>* Leo Posicion del robot</c>
<l>disp_message (200000, 'NO MOVER ROBOT', 'window', 30, 12, 'black', 'true')</l>
<c>* </c>
<l>Tag_Lectura := '_EV01_O_EjeX'</l>
<l>Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>tuple_real (RV_CmdFotogen, Number)</l>
<l>Number := (Number)/10000.0 - 4000.0</l>
<c>* </c>
<l>posx[I] := Number</l>
<c></c>
<c></c>
<l>wait_seconds(0.1)</l>
<c></c>
<c></c>
<l>Tag_Lectura := '_EV01_O_EjeY'</l>
<l>Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>tuple_real (RV_CmdFotogen, Number)</l>
<l>Number := (Number)/10000.0 - 4000.0</l>
<l>posy[I] := Number</l>
<l>wait_seconds(0.1)</l>
<l>Tag_Lectura := '_EV01_O_EjeZ'</l>
<l>Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>tuple_real (RV_CmdFotogen, Number)</l>
<l>Number := (Number)/10000.0 - 4000.0</l>
<l>posz[I] := Number</l>
<l>wait_seconds(0.1)</l>
<l>Tag_Lectura := '_EV01_O_EjeC'</l>
<l>Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>tuple_real (RV_CmdFotogen, Number)</l>
<l>Number := (Number)/10000.0 - 4000.0</l>
<l>Roll[I] := Number</l>
<l>wait_seconds(0.1)</l>
<l>Tag_Lectura := '_EV01_O_EjeB'</l>
<l>Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>wait_seconds(0.1)</l>
<l>tuple_real (RV_CmdFotogen, Number)</l>
<l>Number := (Number)/10000.0 - 4000</l>
<l>Pitch[I] := Number</l>
<l>wait_seconds(0.1)</l>
<l>Tag_Lectura := '_EV01_O_EjeA'</l>
<l>Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>tuple_real (RV_CmdFotogen, Number)</l>
<l>wait_seconds(0.1) </l>
<l>Number := (Number)/10000 - 4000</l>
<l>Yaw[I] := Number</l>
<c>* </c>
<c>* Read pose of tool in robot base coordinates (ToolInBasePose)</c>
<l>create_pose (posx[I], posy[I], posz[I], Roll[I], Pitch[I], Yaw[I], 'Rp+T', 'abg', 'point', ToolInBasePose)</l>
<c>*   </c>
<l>catch (Exception)</l>
<c>    </c>
<l>    ToolInBasePose:=[]</l>
<l>    create_pose (-1, -1, -1, -1, -1, -1, 'Rp+T', 'abg', 'point', ToolInBasePose)</l>
<c>* </c>
<l>endtry</l>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Pose_Tool">
<parameters>
<parameter id="SerialHandle"/>
<parameter id="ToolInBasePose"/>
</parameters>
</docu>
</procedure>
<procedure name="Config_Parametros_Cam_R1">
<interface>
<ic>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera" base_type="ctrl" dimension="0"/>
<par name="NumberOfDisparities" base_type="ctrl" dimension="0"/>
<par name="MinimumDisparity" base_type="ctrl" dimension="0"/>
<par name="Projector" base_type="ctrl" dimension="0"/>
<par name="FrontLigth" base_type="ctrl" dimension="0"/>
<par name="AutoExposure" base_type="ctrl" dimension="0"/>
<par name="AutoGain" base_type="ctrl" dimension="0"/>
<par name="Gain" base_type="ctrl" dimension="0"/>
<par name="Exposure" base_type="ctrl" dimension="0"/>
<par name="FlexView" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="TempCam" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* </c>
<c>* Configuracion de parametros.</c>
<l>set_framegrabber_param (Camera, 'grab_data_items', ['Images/Rectified/Left', 'Images/Raw/Left', 'Images/PointMap'])</l>
<c>* </c>
<c>* </c>
<c>* Parametros para habilitar funciones directas de la camara</c>
<l>set_framegrabber_param (NxLib, 'Execute/Parameters/InitialTrigger', 'All')</l>
<c>* Proyector random de texturas</c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/Projector', Projector)</l>
<c>* Iluminacion</c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/FrontLight', FrontLigth)</l>
<c>* </c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/AutoExposure', AutoExposure)</l>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/AutoGain', AutoGain)</l>
<c></c>
<c></c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/Exposure', Exposure)</l>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/Gain', Gain)</l>
<c> </c>
<c>* ******************************************************************************************************</c>
<c></c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/DisparityMap/StereoMatching/NumberOfDisparities', NumberOfDisparities)</l>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/DisparityMap/StereoMatching/MinimumDisparity', MinimumDisparity)</l>
<c>* N° de imagenes de captura</c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/FlexView',FlexView)</l>
<c>* Temperatura de camara</c>
<l>get_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Sensor/Temperature', TempCam)</l>
<c>* </c>
<l>return ()</l>
</body>
<docu id="Config_Parametros_Cam_R1">
<parameters>
<parameter id="AutoExposure"/>
<parameter id="AutoGain"/>
<parameter id="Camera"/>
<parameter id="Exposure"/>
<parameter id="FlexView"/>
<parameter id="FrontLigth"/>
<parameter id="Gain"/>
<parameter id="MinimumDisparity"/>
<parameter id="NumberOfDisparities"/>
<parameter id="NxLib"/>
<parameter id="Projector"/>
<parameter id="TempCam"/>
</parameters>
</docu>
</procedure>
<procedure name="Conectar_Ensenso_N35_COPY_1">
<interface>
<oc>
<par name="NxLib_1" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="Conexion_Camara_1" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* </c>
<l>Conexion_Camara_1 := false</l>
<l>try</l>
<c>    * </c>
<c>    * </c>
<c>    * Inicializacion de Arbol y camara estereo</c>
<l>    open_framegrabber ('Ensenso-NxLib', 0, 0, 0, 0, 0, 0, 'default', 0, 'Raw', 'auto_grab_data=0', 'false', 'Item', '/', 0, 0, NxLib_1)</l>
<l>    open_framegrabber ('Ensenso-NxLib', 0, 0, 0, 0, 0, 0, 'default', 0, 'Raw', 'auto_grab_data=0', 'false', 'Stereo', '', 0, 0, Camera_1)</l>
<c>    * </c>
<c>    * Abro puerto TCP del Arbol</c>
<l>    set_framegrabber_param (NxLib_1, 'do_open_tcp_port', 24002)</l>
<l>    Conexion_Camara_1 := true</l>
<c>    * </c>
<l>    return ()</l>
<l>catch (Exception)</l>
<l>    Conexion_Camara_1 := false</l>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="Conectar_Ensenso_N35_COPY_1">
<parameters>
<parameter id="Camera_1"/>
<parameter id="Conexion_Camara_1"/>
<parameter id="NxLib_1"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Img_Camera_R1">
<interface>
<oo>
<par name="ModelImage" base_type="iconic" dimension="0"/>
<par name="Xm" base_type="iconic" dimension="0"/>
<par name="Ym" base_type="iconic" dimension="0"/>
<par name="Zm" base_type="iconic" dimension="0"/>
<par name="ImgLeftCamera" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib_1" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Adq_Imagen (ModelImage, NxLib_1, Camera_1)</l>
<l>Adq_XYZ_Img (ModelImage, Xm, Ym, Zm)</l>
<l>select_obj(ModelImage, ImgLeftCamera, 1)</l>
<l>xyz_to_object_model_3d (Xm, Ym, Zm, Escena3D_RAW)</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Img_Camera_R1">
<parameters>
<parameter id="Camera_1"/>
<parameter id="Escena3D_RAW"/>
<parameter id="ImgLeftCamera"/>
<parameter id="ModelImage"/>
<parameter id="NxLib_1"/>
<parameter id="Xm"/>
<parameter id="Ym"/>
<parameter id="Zm"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Pallet_BD">
<interface>
<ic>
<par name="Variable_BD" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="DataBD" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<l>wait_seconds(0.005)</l>
<l>try</l>
<c>    * </c>
<l>    Peticion := 'BaseDatos'</l>
<l>    Data := Peticion+';'+Variable_BD</l>
<c>    * </c>
<l>    write_serial (SerialHandle, ords(Data))</l>
<c></c>
<c></c>
<l>    VarSerial:=0</l>
<l>    while(VarSerial&lt;1)</l>
<c>       </c>
<c>        *Numero de caracteres a leer</c>
<l>        read_serial (SerialHandle, 100, Nchar)</l>
<l>        Nchar:= chrt(Nchar)</l>
<l>        tuple_number (Nchar, Variable)</l>
<l>        VarSerial:=|Nchar|</l>
<c>        </c>
<l>        tuple_split (Nchar, '#', Substrings)</l>
<l>        tuple_split (Substrings, '||', DataBD)</l>
<c>    </c>
<l>    endwhile</l>
<c></c>
<c></c>
<l>catch (Exception)</l>
<l>endtry</l>
<c>* </c>
<c>* </c>
<c>* </c>
<c>* </c>
<l>return ()</l>
</body>
<docu id="Get_Pallet_BD">
<parameters>
<parameter id="DataBD"/>
<parameter id="SerialHandle"/>
<parameter id="Variable_BD"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Robot_Pose">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ToolInBasePose" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>try</l>
<c></c>
<l>    Escalamiento := 1</l>
<l>    Tag_Lectura := '_EV01_O_EjeX'    </l>
<l>    Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>    tuple_real (RV_CmdFotogen, Number)</l>
<l>    Number := (Number)/10000.0 - 4000.0</l>
<l>*     dev_inspect_ctrl (Number)</l>
<l>    posx := Number</l>
<c>     </c>
<l>    Tag_Lectura := '_EV01_O_EjeY'    </l>
<l>    Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>    tuple_real (RV_CmdFotogen, Number)</l>
<l>    Number := (Number)/10000.0 - 4000.0</l>
<l>    posy := Number</l>
<c>    * </c>
<l>    Tag_Lectura := '_EV01_O_EjeZ'    </l>
<l>    Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>    tuple_real (RV_CmdFotogen, Number)</l>
<l>    Number := (Number)/10000.0 - 4000.0</l>
<l>    posz := Number</l>
<c>    * </c>
<l>    Tag_Lectura := '_EV01_O_EjeC'    </l>
<l>    Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>    tuple_real (RV_CmdFotogen, Number)</l>
<l>    Number := (Number)/10000.0 - 4000.0</l>
<l>    Roll := Number</l>
<c>    * </c>
<l>    Tag_Lectura := '_EV01_O_EjeB'    </l>
<l>    Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<c>    * </c>
<l>    tuple_real (RV_CmdFotogen, Number)</l>
<l>    Number := (Number)/10000.0 - 4000</l>
<l>    Pitch := Number</l>
<c>    * </c>
<l>    Tag_Lectura := '_EV01_O_EjeA'    </l>
<l>    Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>    tuple_real (RV_CmdFotogen, Number)</l>
<c>    * </c>
<l>    Number := (Number)/10000 - 4000</l>
<l>    Yaw := Number</l>
<c>    * </c>
<c>    * Read pose of tool in robot base coordinates (ToolInBasePose)</c>
<l>    create_pose (posx, posy, posz, Roll, Pitch, Yaw, 'Rp+T', 'abg', 'point', ToolInBasePose)</l>
<c>    * </c>
<c>  </c>
<l>    return ()   </l>
<c>    </c>
<l>catch (Exception)</l>
<c>    </c>
<c>    </c>
<l>endtry</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
</body>
<docu id="Get_Robot_Pose">
<parameters>
<parameter id="SerialHandle"/>
<parameter id="ToolInBasePose"/>
</parameters>
</docu>
</procedure>
<procedure name="Take_Core_In_Pallet">
<interface>
<io>
<par name="Z" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
<par name="N_Pallet_to_Scan" base_type="ctrl" dimension="0"/>
<par name="Path_SFM_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_3D_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_Tofind" base_type="ctrl" dimension="0"/>
<par name="Path_CORE_ID" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="Visualizar3D" base_type="ctrl" dimension="0"/>
<par name="SegmentoPallet" base_type="ctrl" dimension="0"/>
<par name="Pose_Esquina" base_type="ctrl" dimension="0"/>
<par name="PitutoExist" base_type="ctrl" dimension="0"/>
<par name="ObjectModel3D_Core_Pallet" base_type="ctrl" dimension="0"/>
<par name="SFM_Core_Pallet" base_type="ctrl" dimension="0"/>
<par name="Modelo3D_Select" base_type="ctrl" dimension="0"/>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Estado_SubProceso" base_type="ctrl" dimension="0"/>
<par name="RepetirFoto" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Parametros_Visualizacion := ['colored','disp_pose','point_size']</l>
<l>Valores_Visualizacion := [  12  ,'true',1]</l>
<c></c>
<c></c>
<c>* *****************************************</c>
<c>* 1.- Obtengo el ROI3D del PALLET</c>
<c>* *****************************************</c>
<l>Vector_Segmento := ['A','B','C','D','E','F','G','H','I']</l>
<c></c>
<c></c>
<l>try</l>
<l>    Get_ROI3D_Pallet (ROI3D_NullFrame, ROI3D_rotate)</l>
<l>catch (Exception)</l>
<c>    </c>
<l>    Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<l>*     throw (MensajeError)</l>
<c>    * </c>
<l>* # ### Envio data de estado ########################</l>
<c>    </c>
<l>    Estado := 5</l>
<l>    Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<c>    </c>
<l>* # ################################################# </l>
<c>    </c>
<l>    return ()</l>
<l>endtry</l>
<c></c>
<l>* # #### ROTO EL ROI 3D ######</l>
<c>* </c>
<l>try</l>
<l>* #####################################################################################</l>
<c>    * Funcion que Lee la pose guardada en el Bloque 0, y que referencia la orientacion de la camara</c>
<l>* #####################################################################################</l>
<l>    Get_Rotate_ROI3D (Pose_Esquina, ROI3D_rotate, Pose_Segmentos, ROI3D_rotate)</l>
<l>*     Visualizar_3D ([Escena3D_RAW], Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, [], [], ['Modelo'], WindowHandle, PoseOut1)</l>
<c>    * </c>
<l>catch (Exception)</l>
<c>    </c>
<l>    Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<l>    return ()</l>
<l>endtry</l>
<c></c>
<l>* # ###################################################################</l>
<l>* # ###################################################################</l>
<l>* # ################ BUSQUEDA DE CORES EN EL PALLET ###################</l>
<l>* # ###################################################################</l>
<l>* # ###################################################################</l>
<c>* 3.- Encuentro el orden y los segementos en que estan distribuidos los cores en el applet</c>
<c></c>
<l>Vector_Entidades_Segmento := Vector_ID_Core_by_Segment_Pallet_Tofind+';'+SegmentoPallet</l>
<c></c>
<l>try</l>
<c>    </c>
<c>    * ********************************************************</c>
<c>    * ROI 3D sectorizado de cada elemento</c>
<c>    * Busco de manera sectorizada cara core en el pallet</c>
<c>    * ********************************************************</c>
<c>    * Estructura de vector</c>
<l>* # ###########################</l>
<l>* # ## CORE ## Existencia #####</l>
<l>* # ###########################</l>
<c>    </c>
<c>    ******************************************************************************</c>
<c>    ******** Proceso el entorno 3D para eliminar ruido  **************************</c>
<c>    ******************************************************************************</c>
<l>    Sub_Process_ImageCore (Z, X, Y, Estado_Funcion, Escena3D_RAW)</l>
<c>    </c>
<c>       </c>
<l>    if (PitutoExist ='Yes' )</l>
<l>        Pituto:=true </l>
<l>    endif</l>
<l>    Pituto:=true</l>
<c>    </c>
<l> *   Visualizar_3D ([Escena3D_RAW], Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, [], [], ['Modelo'], WindowHandle, PoseOut1)</l>
<c>    * </c>
<c>    </c>
<c>    ***********************************************</c>
<l>    Sampling := 0.02 </l>
<l>    Find_Sector_Core_Bloque3 (Z, Vector_ID_Core_by_Segment_Pallet_Tofind, Vector_Entidades_Segmento, Path_CORE_ID, Path_3D_Segmentos, Path_SFM_Segmentos, ROI3D_rotate, Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, Vector_Segmento, Escena3D_RAW, Sampling, SerialHandle, Vector_Estado_Fx, Pituto, ObjectModel3D_Core_Pallet, SFM_Core_Pallet, Modelo3D_Select, WindowHandle, Vector_Existencia_Core_New, Estado_Fx, RepetirFoto)</l>
<c>    </c>
<c>    *****************************</c>
<l>    return ()</l>
<c>    ****************************</c>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    if(RepetirFoto)</l>
<l>        clear_object_model_3d ([ROI3D_rotate,ROI3D_NullFrame,Escena3D_RAW])</l>
<l>        return()</l>
<l>    endif</l>
<l>* # ### Envio data de estado ########################</l>
<l>    if (Estado_Fx)</l>
<l>        Estado := 13</l>
<l>        Procesando := 0</l>
<l>        Resultado := 1</l>
<l>        Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>        Send_Data_Info('BLOQUE 3 FINALIZADO', SerialHandle)</l>
<l>    else</l>
<l>        Procesando := 0</l>
<l>        Resultado := 2</l>
<l>        Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>        Send_Data_Info('BLOQUE 3 FINALIZADO con ### ERRORES ####', SerialHandle)  </l>
<l>    endif</l>
<c>    </c>
<c>    * Borrar 3D</c>
<l>    clear_object_model_3d ([ROI3D_rotate,ROI3D_NullFrame,Escena3D_RAW])</l>
<c>    *</c>
<l>* # ################################################# </l>
<c>    * </c>
<l>catch (Exception)</l>
<l>    Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<c>    </c>
<l>    return ()</l>
<l>endtry</l>
<c>* </c>
<c>* ****************************************</c>
<c></c>
<l>return ()</l>
</body>
<docu id="Take_Core_In_Pallet">
<parameters>
<parameter id="Escena3D_RAW"/>
<parameter id="Estado_SubProceso"/>
<parameter id="Modelo3D_Select"/>
<parameter id="N_Pallet_to_Scan"/>
<parameter id="ObjectModel3D_Core_Pallet"/>
<parameter id="Path_3D_Segmentos"/>
<parameter id="Path_CORE_ID"/>
<parameter id="Path_SFM_Segmentos"/>
<parameter id="PitutoExist"/>
<parameter id="Pose_Esquina"/>
<parameter id="RepetirFoto"/>
<parameter id="SFM_Core_Pallet"/>
<parameter id="SegmentoPallet"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_Tofind"/>
<parameter id="Visualizar3D"/>
<parameter id="WindowHandle"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Core_ToUse_From_BDD">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Cod_Core_ToUse" base_type="ctrl" dimension="0"/>
<par name="Pallet_To_Scan" base_type="ctrl" dimension="0"/>
<par name="Segmento_To_Scan" base_type="ctrl" dimension="0"/>
<par name="PitutoExist" base_type="ctrl" dimension="0"/>
<par name="FXcheck" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>FXcheck:=false</l>
<l>try</l>
<l>    Variable_BD := 'ram_actualproduction'</l>
<l>    Get_Pallet_BD (Variable_BD, SerialHandle, DataBD)</l>
<c>    * </c>
<l>    Cod_Core_ToUse := DataBD[3]</l>
<l>    Cod_Core_ToUseAux := DataBD[3]</l>
<l>    Pallet_To_Scan := DataBD[15]</l>
<l>    Segmento_To_Scan := DataBD[16]</l>
<l>    PitutoExist:=DataBD[5]</l>
<c>    </c>
<c></c>
<l>    FXcheck:=true</l>
<c>  </c>
<c>    </c>
<l>catch (Exception)</l>
<c>    </c>
<l>    Mensaje:='### ERROR ### -&gt; Entidad Requerida -&gt; '+Cod_Core_ToUse+' &lt;- RAM base DATOS no CARGADA.'</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<l>    Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<l>    FXcheck:=false</l>
<l>endtry</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Core_ToUse_From_BDD">
<parameters>
<parameter id="Cod_Core_ToUse"/>
<parameter id="FXcheck"/>
<parameter id="Pallet_To_Scan"/>
<parameter id="PitutoExist"/>
<parameter id="Segmento_To_Scan"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Config_Parametros_Cam_R2">
<interface>
<ic>
<par name="Camera" base_type="ctrl" dimension="0"/>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="NumberOfDisparities" base_type="ctrl" dimension="0"/>
<par name="MinimumDisparity" base_type="ctrl" dimension="0"/>
<par name="Proyector" base_type="ctrl" dimension="0"/>
<par name="Iluminacion" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="TempCam" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* </c>
<c>* Configuracion de parametros.</c>
<l>set_framegrabber_param (Camera, 'grab_data_items', ['Images/Rectified/Left', 'Images/Rectified/Right', 'Images/PointMap','Images/DisparityMap'])</l>
<c>* </c>
<c>* </c>
<c>* Parametros para habilitar funciones directas de la camara</c>
<l>*set_framegrabber_param (NxLib, 'Execute/Parameters/InitialTrigger', 'All')</l>
<c>* Proyector random de texturas</c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/Projector', 'false')</l>
<c>* Iluminacion</c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/FrontLight', 'false')</l>
<c>* </c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/AutoExposure', 'true')</l>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/AutoGain', 'true')</l>
<c>* </c>
<c>* </c>
<c>* ******************************************************************************************************</c>
<c></c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/DisparityMap/StereoMatching/NumberOfDisparities', NumberOfDisparities)</l>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/DisparityMap/StereoMatching/MinimumDisparity', MinimumDisparity)</l>
<c>* </c>
<c>* </c>
<c>* </c>
<c>* N° de imagenes de captura</c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/FlexView', 1)</l>
<c>* </c>
<c>* Temperatura de camara</c>
<l>get_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Sensor/Temperature', TempCam)</l>
<c>* </c>
<l>return ()</l>
</body>
<docu id="Config_Parametros_Cam_R2">
<parameters>
<parameter id="Camera"/>
<parameter id="Iluminacion"/>
<parameter id="MinimumDisparity"/>
<parameter id="NumberOfDisparities"/>
<parameter id="NxLib"/>
<parameter id="Proyector"/>
<parameter id="TempCam"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Img_Camera_2">
<interface>
<oo>
<par name="ModelImage" base_type="iconic" dimension="0"/>
<par name="Xm" base_type="iconic" dimension="0"/>
<par name="Ym" base_type="iconic" dimension="0"/>
<par name="Zm" base_type="iconic" dimension="0"/>
<par name="ImgLeftCamera" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib_1" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Adq_Imagen (ModelImage, NxLib_1, Camera_1)</l>
<l>Adq_XYZ_Img (ModelImage, Xm, Ym, Zm)</l>
<l>select_obj(ModelImage, ImgLeftCamera, 1)</l>
<l>xyz_to_object_model_3d (Xm, Ym, Zm, Escena3D_RAW)</l>
<l>return ()</l>
</body>
<docu id="Get_Img_Camera_2">
<parameters>
<parameter id="Camera_1"/>
<parameter id="Escena3D_RAW"/>
<parameter id="ImgLeftCamera"/>
<parameter id="ModelImage"/>
<parameter id="NxLib_1"/>
<parameter id="Xm"/>
<parameter id="Ym"/>
<parameter id="Zm"/>
</parameters>
</docu>
</procedure>
<procedure name="Save_Pose_Palle">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Pose_Refinada" base_type="ctrl" dimension="0"/>
<par name="N_Pallet_to_Scan" base_type="ctrl" dimension="0"/>
<par name="Pose_Robot" base_type="ctrl" dimension="2"/>
</ic>
</interface>
<body>
<c>   </c>
<l>    ToolInBasePose:=Pose_Robot.at(0).at(0)</l>
<c>    </c>
<l>    Path:='C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/7.-HandEye/1.- Ensenso R1/ToolInCamPose_R1.dat'   </l>
<l>    read_pose (Path, ToolInCamPose)</l>
<c>    </c>
<l>    ToolInCamPose[0:2]:=ToolInCamPose[0:2]*1e3</l>
<c>   </c>
<l>    ObjInCamPose:=Pose_Refinada</l>
<c>    </c>
<l>    pose_invert (ToolInCamPose, CamInToolPose)</l>
<l>    pose_compose (ToolInBasePose, CamInToolPose, CamInBasePose)</l>
<l>    pose_compose (CamInBasePose, ObjInCamPose, ObjInBasePose)</l>
<c>    </c>
<l>    NamePose:='Pallet_'+N_Pallet_to_Scan</l>
<l>    Path_Save_Pose_PalletN:='C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/5.-Ing Software/0 Identificacion de Pallet/'+NamePose+'.dat'</l>
<c>    </c>
<l>    write_pose (CamInBasePose, Path_Save_Pose_PalletN)</l>
<l>    Path_Save_Pose_PalletN:='C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/5.-Ing Software/0 Identificacion de Pallet/'+NamePose+'ObjInBase.dat'</l>
<l>    write_pose (ObjInBasePose, Path_Save_Pose_PalletN)</l>
<l>    Path_Save_Pose_PalletN:='C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/5.-Ing Software/0 Identificacion de Pallet/'+NamePose+'ToolInBase.dat'</l>
<l>    write_pose (ToolInBasePose, Path_Save_Pose_PalletN)    </l>
<l>    Path_Save_Pose_PalletN:='C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/5.-Ing Software/0 Identificacion de Pallet/'+NamePose+'ObjInCam.dat'</l>
<l>    write_pose (ObjInCamPose, Path_Save_Pose_PalletN) </l>
<c>    </c>
<c>    </c>
<l>return ()</l>
</body>
<docu id="Save_Pose_Palle">
<parameters>
<parameter id="N_Pallet_to_Scan"/>
<parameter id="Pose_Refinada"/>
<parameter id="Pose_Robot"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_Data_To_Robot">
<interface>
<ic>
<par name="Pose_Refinada" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>    convert_pose_type (Pose_Refinada, 'Rp+T', 'abg', 'point', Pose_Refinada_Tp2)</l>
<l>    for Index := 0 to |Pose_Refinada|-2 by 1</l>
<l>        VR_PosicionEsquinaPallet[Index]:=Pose_Refinada[Index]      </l>
<l>    endfor</l>
<c>   </c>
<c>   </c>
<c>    ********************************</c>
<c>    * Enviar por ETHERNETIP</c>
<c>    ********************************</c>
<l>    Variable_Pos:=['X','Y','Z','C','B','A']</l>
<l>    for Index_Var:= 0 to |VR_PosicionEsquinaPallet|-1 by 1</l>
<l>        Tag_Destino:='_EV01_I_Eje'+Variable_Pos[Index_Var]</l>
<l>        Variable:=VR_PosicionEsquinaPallet[Index_Var]</l>
<l>        Send_EthernetIP_Data (Tag_Destino, Variable, SerialHandle)</l>
<c>     </c>
<l>    endfor</l>
<l>return ()</l>
<c></c>
<c></c>
</body>
<docu id="Send_Data_To_Robot">
<parameters>
<parameter id="Pose_Refinada"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Rototate_ROI">
<interface>
<ic>
<par name="Pose_Refinada" base_type="ctrl" dimension="0"/>
<par name="ROI3D_rotate" base_type="ctrl" dimension="0"/>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Visualizar3D" base_type="ctrl" dimension="0"/>
<par name="Vector_Segmento" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Pose_Segmentos" base_type="ctrl" dimension="0"/>
<par name="ROI3D_rotateOut" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>ROI3D_rotateOut := ROI3D_rotate</l>
<l>try</l>
<c>    </c>
<c>    * Roto el ROI 3D respecto a la esquina encontrada</c>
<l>    Get_Rotate_ROI3D (Pose_Refinada, ROI3D_rotateOut, Pose_Segmentos, ROI3D_rotateOut)</l>
<l>      dev_get_window (WindowHandle)</l>
<l>    Visualizar_3D ([ROI3D_rotateOut,Escena3D_RAW], Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, [], [], [Vector_Segmento,'Modelo'], WindowHandle, PoseOut1)</l>
<c>    </c>
<c>    </c>
<l>catch (Exception)</l>
<l>    dev_get_exception_data (Exception, 'error_msg', ErrorMsg0)</l>
<l>    dev_get_exception_data (Exception, 'procedure', ErrorMsg1)</l>
<l>    dev_get_exception_data (Exception, 'operator', ErrorMsg2)</l>
<l>    dev_get_exception_data (Exception, 'program_line', ErrorMsg3)</l>
<c>    </c>
<l>    MensajeError:=ErrorMsg0+' IN '+ErrorMsg1+' IN FUNTION '+ErrorMsg2+' IN LINE '+ErrorMsg3</l>
<l>*     throw (MensajeError)</l>
<l>    Msg_Sub_Proceso:='#Error# '+MensajeError</l>
<l>    Estado_SubProceso:=false</l>
<l>    return()</l>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="Rototate_ROI">
<parameters>
<parameter id="Escena3D_RAW"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="Pose_Refinada"/>
<parameter id="Pose_Segmentos"/>
<parameter id="ROI3D_rotate"/>
<parameter id="ROI3D_rotateOut"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="Vector_Segmento"/>
<parameter id="Visualizar3D"/>
</parameters>
</docu>
</procedure>
<procedure name="Set_Exposure_Estereo">
<interface>
<ic>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Exposure" base_type="ctrl" dimension="0"/>
<par name="Gain" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/AutoExposure', 'false')</l>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/AutoGain', 'false')</l>
<c></c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/Exposure', Exposure)</l>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/Gain', Gain)</l>
<l>return ()</l>
</body>
<docu id="Set_Exposure_Estereo">
<parameters>
<parameter id="Exposure"/>
<parameter id="Gain"/>
<parameter id="NxLib"/>
</parameters>
</docu>
</procedure>
<procedure name="MakeSFM_Palletr">
<interface>
<io>
<par name="Esquina" base_type="iconic" dimension="0"/>
<par name="Z" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="ConnectedRegions" base_type="iconic" dimension="0"/>
<par name="SelectedRegions" base_type="iconic" dimension="0"/>
<par name="ImageReduced" base_type="iconic" dimension="0"/>
<par name="MultiChannelImage" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Esquina3D" base_type="ctrl" dimension="0"/>
<par name="Pose" base_type="ctrl" dimension="0"/>
<par name="Esquina3D_Trans" base_type="ctrl" dimension="0"/>
<par name="Pose1" base_type="ctrl" dimension="0"/>
<par name="PoseOut1" base_type="ctrl" dimension="0"/>
<par name="Sampling" base_type="ctrl" dimension="0"/>
<par name="SurfaceModelID" base_type="ctrl" dimension="0"/>
<par name="ObjectModel3DNormals" base_type="ctrl" dimension="0"/>
<par name="Esquina_Tri" base_type="ctrl" dimension="0"/>
<par name="Information" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>connection (Esquina, ConnectedRegions)</l>
<l>select_shape_std (ConnectedRegions, SelectedRegions, 'max_area', 90)</l>
<l>dilation_rectangle1 (SelectedRegions, RegionDilation, 19, 19)</l>
<l>reduce_domain (Z, RegionDilation, ImageReduced)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>compose3 (X, Y, ImageReduced, MultiChannelImage)</l>
<c></c>
<l>area_center (SelectedRegions, Area, Row, Column)</l>
<l>get_grayval (X, Row, Column, X1)</l>
<l>get_grayval (Y, Row, Column, Y1)</l>
<l>get_grayval (Z, Row, Column, Z1)</l>
<c></c>
<c></c>
<l>xyz_to_object_model_3d (X, Y, ImageReduced, Esquina3D)</l>
<l>create_pose (-X1, -Y1, -Z1, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose)</l>
<l>rigid_trans_object_model_3d (Esquina3D, Pose, Esquina3D_Trans)</l>
<c></c>
<l>dev_get_window (WindowHandle)</l>
<l>Visualizar_3D (Esquina3D_Trans, Parametros_Visualizacion, Valores_Visualizacion, 1, [], [], [], WindowHandle, PoseOut1)</l>
<c></c>
<l>* create_pose (0, 0, 0, 0, 180, 0, 'Rp+T', 'gba', 'point', Pose1)</l>
<l>* rigid_trans_object_model_3d (Esquina3D_Trans, Pose1, Esquina3D_Trans)</l>
<c></c>
<l>* create_pose (0, 0, 0, 0, 0, -90, 'Rp+T', 'gba', 'point', Pose1)</l>
<l>* rigid_trans_object_model_3d (Esquina3D_Trans, Pose1, Esquina3D_Trans)</l>
<c></c>
<c></c>
<c>******************************************************************************************************************************</c>
<l>Visualizar_3D (Esquina3D_Trans, Parametros_Visualizacion, Valores_Visualizacion, 1, [], [], [], WindowHandle, PoseOut1)</l>
<c>******************************************************************************************************************************</c>
<c></c>
<c></c>
<l>Sampling:=0.01</l>
<c></c>
<c>* ***************************************************************************************************</c>
<c>* 5.- Creo Surface Model</c>
<c>* ***************************************************************************************************</c>
<c>* Si es necesario samplear el objeto</c>
<l>*surface_normals_object_model_3d (Esquina3D_Trans, 'mls', [], [], Esquina3D_Trans2)</l>
<l>*triangulate_object_model_3d (Esquina3D_Trans, 'greedy', [], [], Esquina_Tri, Information)</l>
<c></c>
<l>create_surface_model (Esquina3D_Trans, Sampling, [], [], SurfaceModelID)</l>
<c></c>
<c></c>
<c>* ***************************************************************************************************</c>
<c>* 6.- Guardo Surface Model y Modelo 3D</c>
<c>* ***************************************************************************************************</c>
<c>* </c>
<c></c>
<l>write_surface_model (SurfaceModelID, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/SFM_PALLET/SFM_Pallet_beta.sfm')</l>
<l>write_object_model_3d (Esquina3D_Trans, 'om3', 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/SFM_PALLET/3D_Pallet_beta.om3', [], [])</l>
<c></c>
<l>return ()</l>
</body>
<docu id="MakeSFM_Palletr">
<parameters>
<parameter id="ConnectedRegions"/>
<parameter id="Esquina"/>
<parameter id="Esquina3D"/>
<parameter id="Esquina3D_Trans"/>
<parameter id="Esquina_Tri"/>
<parameter id="ImageReduced"/>
<parameter id="Information"/>
<parameter id="MultiChannelImage"/>
<parameter id="ObjectModel3DNormals"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="Pose"/>
<parameter id="Pose1"/>
<parameter id="PoseOut1"/>
<parameter id="Sampling"/>
<parameter id="SelectedRegions"/>
<parameter id="SurfaceModelID"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_objeto_0_and_1">
<interface>
<io>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
<par name="Z" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Objeto_0" base_type="iconic" dimension="0"/>
<par name="Objeto_1" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib_1" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="NumberOfDisparities_Cam1" base_type="ctrl" dimension="0"/>
<par name="MinimumDisparity_Cam1" base_type="ctrl" dimension="0"/>
<par name="Projector" base_type="ctrl" dimension="0"/>
<par name="FrontLigth" base_type="ctrl" dimension="0"/>
<par name="AutoExposure" base_type="ctrl" dimension="0"/>
<par name="AutoGain" base_type="ctrl" dimension="0"/>
<par name="Gain" base_type="ctrl" dimension="0"/>
<par name="Exposure" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Escena3D_RAW_Esq" base_type="ctrl" dimension="0"/>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>XOut := X</l>
<l>YOut := Y</l>
<l>ZOut := Z</l>
<l>AutoExposureOut := AutoExposure</l>
<l>AutoGainOut := AutoGain</l>
<l>ExposureOut := Exposure</l>
<l>FrontLigthOut := FrontLigth</l>
<l>GainOut := Gain</l>
<l>MinimumDisparity_Cam1Out := MinimumDisparity_Cam1</l>
<l>NumberOfDisparities_Cam1Out := NumberOfDisparities_Cam1</l>
<l>ProjectorOut := Projector</l>
<l>FlexView:=8</l>
<l>Config_Parametros_Cam_R1 (NxLib_1, Camera_1, NumberOfDisparities_Cam1Out, MinimumDisparity_Cam1Out, ProjectorOut, FrontLigthOut, \
                          AutoExposureOut, AutoGainOut, GainOut, ExposureOut, FlexView, TempCam)</l>
<l>Get_Img_Camera_R1 (ModelImage, X_Esq, Y_Esq, Z_Esq, ImgLeftCamera_Esq, NxLib_1, Camera_1, Escena3D_RAW_Esq)</l>
<c></c>
<l>    compose3 (XOut, YOut, ZOut, Objeto_0)</l>
<l>* ############################################################################</l>
<c></c>
<l>* #########################################################################</l>
<c>* Configuracion de Parametros</c>
<l>    MinimumDisparity_Cam1Out := -97</l>
<l>    NumberOfDisparities_Cam1Out := 32</l>
<l>    ProjectorOut := 'true'</l>
<l>    FrontLigthOut := 'true'</l>
<l>    AutoExposureOut := 'true'</l>
<l>    AutoGainOut := 'true'</l>
<l>    ExposureOut := 4.9</l>
<l>    GainOut := 1</l>
<l>Config_Parametros_Cam_R1 (NxLib_1, Camera_1, NumberOfDisparities_Cam1Out, MinimumDisparity_Cam1Out, ProjectorOut, FrontLigthOut, AutoExposureOut, AutoGainOut, GainOut, ExposureOut, FlexView, TempCam)</l>
<l>    Get_Img_Camera_R1 (ModelImage, XOut, YOut, ZOut, ImgLeftCamera, NxLib_1, Camera_1, Escena3D_RAW)</l>
<c></c>
<l>    compose3 (XOut, YOut, ZOut, Objeto_1)</l>
<l>* ############################################################################</l>
<l>Estado:=3</l>
<c>*[3] -&gt; Sacar otr foto</c>
<l>Resultado:=3</l>
<l>Procesando:=1</l>
<l>Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* ################################################################################</l>
<c>    </c>
<c>    </c>
<l>return ()</l>
</body>
<docu id="Get_objeto_0_and_1">
<parameters>
<parameter id="AutoExposure"/>
<parameter id="AutoGain"/>
<parameter id="Camera_1"/>
<parameter id="Escena3D_RAW"/>
<parameter id="Escena3D_RAW_Esq"/>
<parameter id="Exposure"/>
<parameter id="FrontLigth"/>
<parameter id="Gain"/>
<parameter id="MinimumDisparity_Cam1"/>
<parameter id="NumberOfDisparities_Cam1"/>
<parameter id="NxLib_1"/>
<parameter id="Objeto_0"/>
<parameter id="Objeto_1"/>
<parameter id="Projector"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Objeto_2">
<interface>
<oo>
<par name="Objeto_2" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib_1" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Pose_Robot" base_type="ctrl" dimension="2"/>
<par name="MinimumDisparity_Cam1" base_type="ctrl" dimension="0"/>
<par name="NumberOfDisparities_Cam1" base_type="ctrl" dimension="0"/>
<par name="Exposure" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Pose_Robot_New" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>    * #########################################################################</c>
<c>* Configuracion de Parametros</c>
<c></c>
<l>Projector:='true'</l>
<l>FrontLigth:='true'</l>
<l>AutoExposure:='true'</l>
<l>AutoGain:='true'</l>
<l>Gain:=1</l>
<l>FlexView:=8</l>
<l>Config_Parametros_Cam_R1 (NxLib_1, Camera_1, NumberOfDisparities_Cam1, MinimumDisparity_Cam1, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure, FlexView, TempCam)</l>
<l>    Get_Img_Camera_R1 (ModelImage, XOut, YOut, ZOut, ImgLeftCamera, NxLib_1, Camera_1, Escena3D_RAW)</l>
<c></c>
<l>    compose3 (XOut, YOut, ZOut, Objeto_2)</l>
<c></c>
<l>* ############################################################################</l>
<l>Get_Pose_Tool (SerialHandle, ToolInBasePose)</l>
<l>Pose_Robot_New:=ToolInBasePose</l>
<l>* #########################################################################</l>
<c></c>
<c></c>
<l>* ############################################################################</l>
<l>Estado:=3</l>
<c>*[3] -&gt; Sacar otr foto</c>
<l>Resultado:=3</l>
<l>Procesando:=1</l>
<l>Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* ################################################################################</l>
<c> </c>
<c>    </c>
<l>return ()</l>
</body>
<docu id="Get_Objeto_2">
<parameters>
<parameter id="Camera_1"/>
<parameter id="Exposure"/>
<parameter id="MinimumDisparity_Cam1"/>
<parameter id="NumberOfDisparities_Cam1"/>
<parameter id="NxLib_1"/>
<parameter id="Objeto_2"/>
<parameter id="Pose_Robot"/>
<parameter id="Pose_Robot_New"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Objeto_3">
<interface>
<oo>
<par name="Objeto_3" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib_1" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="MinimumDisparity_Cam1" base_type="ctrl" dimension="0"/>
<par name="NumberOfDisparities_Cam1" base_type="ctrl" dimension="0"/>
<par name="Exposure" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Pose_Robot_New" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>    * #########################################################################</c>
<c>* Configuracion de Parametros</c>
<c></c>
<l>Projector:='true'</l>
<l>FrontLigth:='true'</l>
<l>AutoExposure:='true'</l>
<l>AutoGain:='true'</l>
<c></c>
<l>Gain:=1</l>
<l>FlexView:=8</l>
<l>Config_Parametros_Cam_R1 (NxLib_1, Camera_1, NumberOfDisparities_Cam1, MinimumDisparity_Cam1, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure, FlexView, TempCam)</l>
<l>    Get_Img_Camera_R1 (ModelImage, XOut, YOut, ZOut, ImgLeftCamera, NxLib_1, Camera_1, Escena3D_RAW)</l>
<c></c>
<l>    compose3 (XOut, YOut, ZOut, Objeto_3)</l>
<c>    </c>
<l>* ############################################################################</l>
<l>Get_Pose_Tool (SerialHandle, ToolInBasePose)</l>
<l>Pose_Robot_New:=ToolInBasePose</l>
<l>* #########################################################################</l>
<c></c>
<c></c>
<c></c>
<l>* ############################################################################</l>
<l>Estado:=3</l>
<c>*[3] -&gt; Sacar otr foto</c>
<l>Resultado:=3</l>
<l>Procesando:=1</l>
<l>Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* ################################################################################</l>
<c> </c>
<l>return ()</l>
</body>
<docu id="Get_Objeto_3">
<parameters>
<parameter id="Camera_1"/>
<parameter id="Exposure"/>
<parameter id="MinimumDisparity_Cam1"/>
<parameter id="NumberOfDisparities_Cam1"/>
<parameter id="NxLib_1"/>
<parameter id="Objeto_3"/>
<parameter id="Pose_Robot_New"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Objeto_0_and_1">
<interface>
<oo>
<par name="Objeto_0" base_type="iconic" dimension="0"/>
<par name="Objeto_1" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib_1" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Pose_Robot" base_type="ctrl" dimension="2"/>
<par name="MinimumDisparity_Cam1" base_type="ctrl" dimension="0"/>
<par name="NumberOfDisparities_Cam1" base_type="ctrl" dimension="0"/>
<par name="Exposure" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Pose_Robot_New" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>* #########################################################################</l>
<c>* Configuracion de Parametros</c>
<c></c>
<l>Projector:='false'</l>
<l>FrontLigth:='true'</l>
<l>AutoExposure:='false'</l>
<l>AutoGain:='false'</l>
<l>Exposure := 5</l>
<l>Gain:=8</l>
<l>Gain:=10</l>
<l>FlexView:=1</l>
<l>Config_Parametros_Cam_R1 (NxLib_1, Camera_1, NumberOfDisparities_Cam1, MinimumDisparity_Cam1, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure, FlexView, TempCam)</l>
<l>Get_Img_Camera_R1 (ModelImage, X_Esq, Y_Esq, Z_Esq, ImgLeftCamera_Esq, NxLib_1, Camera_1, Escena3D_RAW_Esq)</l>
<c></c>
<l>compose4 (X_Esq, Y_Esq, Z_Esq, ImgLeftCamera_Esq,Objeto_0)</l>
<l>* ############################################################################</l>
<l>Get_Pose_Tool (SerialHandle, ToolInBasePose)</l>
<l>Pose_Robot_New:=ToolInBasePose</l>
<l>* #########################################################################</l>
<c>* Configuracion de Parametros</c>
<l>MinimumDisparity_Cam1OutOut := -97</l>
<l>NumberOfDisparities_Cam1OutOut := 32</l>
<l>Projector:='true'</l>
<l>FrontLigth:='true'</l>
<l>AutoExposure:='true'</l>
<l>AutoGain:='true'</l>
<l>Exposure := 5</l>
<l>Gain:=5</l>
<l>FlexView:=8</l>
<l>Config_Parametros_Cam_R1 (NxLib_1, Camera_1, NumberOfDisparities_Cam1OutOut, MinimumDisparity_Cam1OutOut, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure, FlexView, TempCam)</l>
<l>Get_Img_Camera_R1 (ModelImage, X, Y, Z, ImgLeftCamera, NxLib_1, Camera_1, Escena3D_RAW)</l>
<c></c>
<l>compose3 (X, Y, Z, Objeto_1)</l>
<c></c>
<c></c>
<l>* ############################################################################</l>
<l>Estado:=3</l>
<c>*[3] -&gt; Sacar otra foto</c>
<l>Resultado:=3</l>
<l>Procesando:=1</l>
<l>Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* ################################################################################</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Objeto_0_and_1">
<parameters>
<parameter id="Camera_1"/>
<parameter id="Exposure"/>
<parameter id="MinimumDisparity_Cam1"/>
<parameter id="NumberOfDisparities_Cam1"/>
<parameter id="NxLib_1"/>
<parameter id="Objeto_0"/>
<parameter id="Objeto_1"/>
<parameter id="Pose_Robot"/>
<parameter id="Pose_Robot_New"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Pallet_Model">
<interface>
<oo>
<par name="Objeto_0" base_type="iconic" dimension="0"/>
<par name="Objeto_1" base_type="iconic" dimension="0"/>
<par name="Objeto_2" base_type="iconic" dimension="0"/>
<par name="Objeto_3" base_type="iconic" dimension="0"/>
<par name="Zobj1" base_type="iconic" dimension="0"/>
<par name="Xobj1" base_type="iconic" dimension="0"/>
<par name="Yobj1" base_type="iconic" dimension="0"/>
<par name="Img_Left_Esquina" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib_1" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="N_Pallet_to_Scan" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Pose_Robot" base_type="ctrl" dimension="2"/>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
<par name="Base_esquina" base_type="ctrl" dimension="0"/>
<par name="Estado_Fx" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>* ####################################################</l>
<l>Estado:=20</l>
<l>Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>Mensaje:='Inicio de captura Bloque 0'</l>
<l>Send_Data_Info (Mensaje, SerialHandle)</l>
<l>* ###################################################</l>
<l>  dev_get_window (WindowHandle)</l>
<l>Pose_Robot:={ { [] } }</l>
<l>Pose_Robot.at(0).at(0):='CORE'</l>
<l>Contador_foto:=0</l>
<c></c>
<l>Escuhar_Robot:=true</l>
<l>Contador_foto:=0</l>
<c></c>
<l>* #####################################################</l>
<l>MinimumDisparity_Cam1 := -97</l>
<l>NumberOfDisparities_Cam1 := 32</l>
<l>Exposure:=9</l>
<l>* #####################################################</l>
<l>Get_Objeto_0_and_1 (Objeto_0, Objeto_1, NxLib_1, Camera_1, Vector_Estado_Fx, SerialHandle, Pose_Robot, MinimumDisparity_Cam1, NumberOfDisparities_Cam1, Exposure, Pose_Robot_New)</l>
<l>Pose_Robot.at(0).at(0):=Pose_Robot_New</l>
<l>Contador_foto:=Contador_foto+1</l>
<l>* #####################################################</l>
<l>wait_seconds(0.1)</l>
<l>Mensaje:='Imagen 1 capturada'</l>
<l>Send_Data_Info (Mensaje, SerialHandle)</l>
<c></c>
<l>while (Escuhar_Robot)</l>
<c>    </c>
<l>    Tag_Lectura:='_EV01_O_CmdDatos'         </l>
<l>    Read_EthernetIP_Data (Tag_Lectura, SerialHandle, _EV1_O_CmdDatos)</l>
<c>    </c>
<l>    _EV1_O_CmdDatos:=_EV1_O_CmdDatos-10</l>
<l>    if (_EV1_O_CmdDatos == N_Pallet_to_Scan)</l>
<c>        </c>
<c>        </c>
<l>        switch (Contador_foto)</l>
<c>            </c>
<c>            </c>
<l>        case 1:</l>
<l>            Get_Objeto_2 (Objeto_2, NxLib_1, Camera_1, Vector_Estado_Fx, SerialHandle, Pose_Robot, MinimumDisparity_Cam1, NumberOfDisparities_Cam1, Exposure, Pose_Robot_New)</l>
<l>            Pose_Robot.at(1).at(0):=Pose_Robot_New</l>
<l>            Contador_foto:=Contador_foto+1</l>
<l>            Mensaje:='Imagen 2 capturada'</l>
<l>            Send_Data_Info (Mensaje, SerialHandle)</l>
<c>            </c>
<l>            break</l>
<c>            </c>
<l>        case 2:</l>
<c>            </c>
<l>            Get_Objeto_3 (Objeto_3, NxLib_1, Camera_1, Vector_Estado_Fx, SerialHandle, MinimumDisparity_Cam1, NumberOfDisparities_Cam1, Exposure, Pose_Robot_New)</l>
<l>            Pose_Robot.at(2).at(0):=Pose_Robot_New</l>
<l>            Contador_foto:=0</l>
<l>            Escuhar_Robot:=false</l>
<l>            Mensaje:='Imagen 3 capturada. FIN Adquisicion'</l>
<l>            Send_Data_Info (Mensaje, SerialHandle)</l>
<l>            break   </l>
<c>            </c>
<l>        endswitch</l>
<l>    endif</l>
<l>endwhile</l>
<c></c>
<c></c>
<c>***********************************************************************</c>
<c>****** Guardo las Imagenes ********************************************</c>
<l>get_system_time (MSecond, Second, Minute, Hour, Day, YDay, Month, Year)</l>
<c></c>
<l>write_object (Objeto_0, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 0/Objeto_0'+Month+Day+Hour+Second)</l>
<l>write_object (Objeto_1, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 0/Objeto_1'+Month+Day+Hour+Second)</l>
<l>write_object (Objeto_2, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 0/Objeto_2'+Month+Day+Hour+Second)</l>
<l>write_object (Objeto_3, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 0/Objeto_3'+Month+Day+Hour+Second)</l>
<c>************************************************************************</c>
<c></c>
<l>*   read_object (Objeto_0, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 0/Objeto_06171233.hobj')</l>
<l>*   read_object (Objeto_1, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 0/Objeto_16171233.hobj')</l>
<l>*   read_object (Objeto_2, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 0/Objeto_26171233.hobj')</l>
<l>*   read_object (Objeto_3, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 0/Objeto_36171233.hobj')</l>
<c>  </c>
<c>***** Genero la Imagen.  ******</c>
<c>**### Translado la imagen segun lo que se movio #####</c>
<l>decompose4 (Objeto_0, X, Y, Z,Img_Left_Esquina)</l>
<l>decompose3 (Objeto_1, Xobj1, Yobj1, Zobj1)</l>
<l>decompose3 (Objeto_2, Xobj2, Yobj2, Zobj2)</l>
<l>decompose3 (Objeto_3, Xobj3, Yobj3, Zobj3)</l>
<c></c>
<l>xyz_to_object_model_3d (Xobj1, Yobj1, Zobj1, ObjectModel3D_1)</l>
<l>xyz_to_object_model_3d (Xobj2, Yobj2, Zobj2, ObjectModel3D_2)</l>
<l>xyz_to_object_model_3d (Xobj3, Yobj3, Zobj3, ObjectModel3D_3)</l>
<c></c>
<c></c>
<l>Pose_1:=Pose_Robot.at(0).at(0)</l>
<l>Pose_2:=Pose_Robot.at(1).at(0)</l>
<l>Pose_3:=Pose_Robot.at(2).at(0)</l>
<c></c>
<l>deltaTranslado:=Pose_2[0]-Pose_1[0]</l>
<c></c>
<l>create_pose(0, -deltaTranslado, 0, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose_Translado)</l>
<l>rigid_trans_object_model_3d (ObjectModel3D_2, Pose_Translado, ObjectModel3D_2_New)</l>
<c></c>
<c></c>
<l>deltaTranslado:=Pose_3[0]-Pose_1[0]</l>
<l>create_pose(0, -deltaTranslado, 0, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose_Translado)</l>
<l>rigid_trans_object_model_3d (ObjectModel3D_3, Pose_Translado, ObjectModel3D_3_New)</l>
<c></c>
<l>union_object_model_3d ([ObjectModel3D_1,ObjectModel3D_2_New,ObjectModel3D_3_New], 'points_surface', Escena3D_RAW)</l>
<c></c>
<l>Parametros_Visualizacion:=['disp_pose','color_attrib','lut','disp_lines','point_size']</l>
<l>Valores_Visualizacion:= ['false','coord_z','rainbow','true',1]</l>
<c></c>
<l>DebugView:=false</l>
<l>Visualizar_3D ([ObjectModel3D_1,ObjectModel3D_2_New], Parametros_Visualizacion, Valores_Visualizacion, DebugView, [], [], [], WindowHandle, PoseOut1)</l>
<c></c>
<c></c>
<l>create_pose (200, 350, 8500, 0, 0, 0, 'Rp+T', 'gba', 'point', PoseView)</l>
<l>disp_object_model_3d (200000, Escena3D_RAW, [], PoseView, Parametros_Visualizacion, Valores_Visualizacion)</l>
<c></c>
<l>* #################################################################################</l>
<c>* procesamiento de imagenes para determinar la orientacion de la caja em el eje Z</c>
<l>* #################################################################################</l>
<l>Get_Esquina_LeftRight (Img_Left_Esquina, Esquina_Left, Esquina_Right)</l>
<c></c>
<c></c>
<l>Get_Centro_and_Esquina (Esquina_Left, Xobj1, Yobj1, Zobj1, Esquina_Left, row1_L, col1_L, CentroX_L, CentroY_L, CentroZ_L, Nelementos_Left)</l>
<l>Get_Centro_and_Esquina (Esquina_Right, Xobj1, Yobj1, Zobj1, Esquina_Right, row1_R, col1_R, CentroX, CentroY, CentroZ, Nelementos_Rigth)</l>
<c></c>
<c></c>
<l>if (CentroX_L=0 or CentroY_L=0  or CentroZ_L=0)</l>
<l>    Mensaje:='NO SE ENCONTRO ESQUINA PALLET'</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<l>    Estado_Fx:=false</l>
<l>    Resultado:=2</l>
<l>    Procesando:=0</l>
<l>    Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>    return ()</l>
<l>endif</l>
<c></c>
<c></c>
<l>if (Nelementos_Left = 1 and Nelementos_Rigth=1)</l>
<l>    angle_lx(row1_L, col1_L, row1_R, col1_R, Angle)</l>
<l>    angle_lx(row1_R, col1_R, row1_L, col1_L, Angle2)</l>
<c>    </c>
<l>    if (Angle2&gt;Angle)</l>
<l>        Angle:=-Angle2</l>
<l>    endif</l>
<l>    create_pose (CentroX_L, CentroY_L, CentroZ_L, 0, 0, -Angle, 'Rp+T', 'gba', 'point', Base_esquina)</l>
<c>    </c>
<c>    </c>
<l>        Send_Data_To_Robot (Base_esquina, SerialHandle)  </l>
<c>    </c>
<c>  </c>
<c>    </c>
<c>    </c>
<l>    Mensaje:='####################################'</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)    </l>
<l>    Mensaje:='Base Pallet -&gt; '+'  Ang Z -&gt; '+Angle+' # '+CentroX_L+' # '+ CentroY_L+' # '+ CentroZ_L </l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<l>    Mensaje:='####################################'</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<l>    Estado_Fx:=true</l>
<l>else</l>
<c>    </c>
<l>* ####################################################</l>
<c>    </c>
<l>    Mensaje:='NO SE ENCONTRO ESQUINA PALLET'</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<l>    Estado_Fx:=false</l>
<l>    Resultado:=2</l>
<l>    Procesando:=0</l>
<l>    Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* ###################################################  </l>
<l>endif</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Pallet_Model">
<parameters>
<parameter id="Base_esquina"/>
<parameter id="Camera_1"/>
<parameter id="Escena3D_RAW"/>
<parameter id="Estado_Fx"/>
<parameter id="Img_Left_Esquina"/>
<parameter id="N_Pallet_to_Scan"/>
<parameter id="NxLib_1"/>
<parameter id="Objeto_0"/>
<parameter id="Objeto_1"/>
<parameter id="Objeto_2"/>
<parameter id="Objeto_3"/>
<parameter id="Pose_Robot"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="Xobj1"/>
<parameter id="Yobj1"/>
<parameter id="Zobj1"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_ToolInCamPose">
<interface>
<oc>
<par name="ToolInCamPose" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>    read_pose ('C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/7.-HandEye/1.- Ensenso R1/ToolInCamPose_R1.dat', ToolInCamPose)</l>
<c>  </c>
<l>return ()</l>
</body>
<docu id="Get_ToolInCamPose">
<parameters>
<parameter id="ToolInCamPose"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_ObjInBasePose">
<interface>
<ic>
<par name="Pose_Refinada" base_type="ctrl" dimension="0"/>
<par name="Pose_Robot" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ObjInBasePose" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>    ObjInCamPose := Pose_Refinada</l>
<c></c>
<l>    ToolInBasePose:=Pose_Robot</l>
<l>      * Get_ToolInCamPose (ToolInCamPose)</l>
<c>       </c>
<l>       create_pose (110.842, -272.211, 160.559, 1.15, 359.672, 1.076, 'Rp+T', 'abg', 'point', ToolInCamPose)</l>
<c>   </c>
<c>    </c>
<l>pose_invert (ToolInCamPose, CamInToolPose)</l>
<l>pose_compose (ToolInBasePose, CamInToolPose, CamInBasePose)</l>
<l>pose_compose (CamInBasePose, ObjInCamPose, ObjInBasePose)</l>
<c>    </c>
<l>dev_inspect_ctrl(ObjInBasePose)</l>
<l>return ()</l>
</body>
<docu id="Get_ObjInBasePose">
<parameters>
<parameter id="ObjInBasePose"/>
<parameter id="Pose_Refinada"/>
<parameter id="Pose_Robot"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_ImgWhitROI_Camera_1">
<interface>
<oo>
<par name="ModelImage" base_type="iconic" dimension="0"/>
<par name="Xm" base_type="iconic" dimension="0"/>
<par name="Ym" base_type="iconic" dimension="0"/>
<par name="Zm" base_type="iconic" dimension="0"/>
<par name="ImgLeftCamera" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Adq_Imagen (ModelImage, NxLib, Camera_1)</l>
<l>Adq_XYZ_Img (ModelImage, Xm, Ym, Zm)</l>
<l>select_obj(ModelImage, ImgLeftCamera, 1)</l>
<l>xyz_to_object_model_3d (Xm, Ym, Zm, Escena3D_RAW)</l>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_ImgWhitROI_Camera_1">
<parameters>
<parameter id="Camera_1"/>
<parameter id="Escena3D_RAW"/>
<parameter id="ImgLeftCamera"/>
<parameter id="ModelImage"/>
<parameter id="NxLib"/>
<parameter id="Xm"/>
<parameter id="Ym"/>
<parameter id="Zm"/>
</parameters>
</docu>
</procedure>
<procedure name="Find_Sector_Core_Bloque3">
<interface>
<io>
<par name="Z" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="Vector_ID_Core_by_Segment_Pallet" base_type="ctrl" dimension="0"/>
<par name="Vector_Entidades_Segmento" base_type="ctrl" dimension="0"/>
<par name="Path_CORE_ID" base_type="ctrl" dimension="0"/>
<par name="Path_3D_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_SFM_Segmentos" base_type="ctrl" dimension="0"/>
<par name="ROI3D_rotate" base_type="ctrl" dimension="0"/>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Visualizar3D" base_type="ctrl" dimension="0"/>
<par name="Vector_Segmento" base_type="ctrl" dimension="0"/>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
<par name="Sampling" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="Pituto" base_type="ctrl" dimension="0"/>
<par name="ObjectModel3D_Core_Pallet" base_type="ctrl" dimension="0"/>
<par name="SFM_Core_Pallet" base_type="ctrl" dimension="0"/>
<par name="Modelo3D_Select" base_type="ctrl" dimension="0"/>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Vector_Existencia_Core_New" base_type="ctrl" dimension="2"/>
<par name="Estado_Fx" base_type="ctrl" dimension="0"/>
<par name="RepetirFoto" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>N_divisiones_Pallet:=9</l>
<l>N_divisiones_Pallet:=|Vector_ID_Core_by_Segment_Pallet|</l>
<c></c>
<l>RepetirFoto:=false</l>
<c></c>
<c></c>
<c></c>
<l>NElementos:=|Vector_Entidades_Segmento|</l>
<c></c>
<l>Estado_Fx:=false</l>
<l>try</l>
<c></c>
<l>    for N_Entidad := 0 to NElementos-1 by 1</l>
<c>            </c>
<l>        tuple_split (Vector_Entidades_Segmento[N_Entidad], ';', Aux)</l>
<l>        Entidad_To_Find:=Aux[0]</l>
<l>        N_Sectores_To_Find:=|Aux|</l>
<l>        ROI3D:=[]</l>
<c>              </c>
<c>        ********************************************</c>
<c>        * Leo el SFM y STL del Core</c>
<c>        ********************************************</c>
<c>        </c>
<l>* #### Envio data de estado ########################</l>
<l>        Estado:=9</l>
<l>        Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)   </l>
<l>* ################################################## </l>
<c>        </c>
<c>        </c>
<l>        if (Entidad_To_Find ==' ')</l>
<l>            Vector_Existencia_Core.at(N_Entidad+1).at(0):=Entidad_To_Find</l>
<l>            Vector_Existencia_Core.at(N_Entidad+1).at(1):=false</l>
<c>            </c>
<l>        else</l>
<c>            * Se deshabilita la opcion para cargarla previamente      </c>
<l>*             Get_SFM_STL (Entidad_To_Find, Path_CORE_ID, Path_3D_Segmentos, Path_SFM_Segmentos, Vector_Estado_Fx1, SerialHandle1, ObjectModel3D_Core_Pallet, SFM_Core_Pallet, Estado_Get_SFM_STL, Modelo3D_Select)</l>
<c>            </c>
<c>            ***************************************************************</c>
<c>            *Filtro la altura maxima</c>
<c>            * Utilizo esto para elminar el piso de la escena y evitar errores</c>
<l>            Altura_Maxima_camara_Piso_Pallet:=1820</l>
<c>            ***************************************************************     </c>
<l>            Set_Max_Altura_Model3D (Escena3D_RAW, Altura_Maxima_camara_Piso_Pallet, Modelo_3D_ROI_Thres)         </l>
<l>            NotZeroModel (Escena3D_RAW, Escena3D_RAW)</l>
<c>      </c>
<l>            N_Model_To_Find:=|Modelo_3D_ROI_Thres|</l>
<l>            if (|Modelo_3D_ROI_Thres|&gt;1)</l>
<c>                </c>
<l>                union_object_model_3d (Modelo_3D_ROI_Thres, 'points_surface', Modelo_3D_ROI_Thres)</l>
<l>                Visualizar_3D ([Modelo_3D_ROI_Thres], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Visualizar3D, [], [], [], WindowHandle, PoseOut1)</l>
<c>                </c>
<l>            endif</l>
<c>            </c>
<c>            </c>
<l>            surface_normals_object_model_3d (ObjectModel3D_Core_Pallet, 'mls', 'mls_force_inwards', 'true', ObjectModel3DNormals)</l>
<c>            ****************************</c>
<c>            * Parametros de control</c>
<c>            ****************************</c>
<l>            Sampling_Find := 0.02</l>
<l>            Keypoint := 1</l>
<l>            MinScore := 0.03</l>
<l>            N_matches := N_Model_To_Find</l>
<l>            SFM:=SFM_Core_Pallet</l>
<l>            Mod_3D_Objeto:=ObjectModel3D_Core_Pallet</l>
<l>            Escena3D:=Escena3D_RAW </l>
<c>            ****************************</c>
<c>            * Si lo que busco es una Manga, Busco el objeto por Bordes</c>
<c>            ****************************  </c>
<c></c>
<c>            *** Calculo los bordes 3D ***</c>
<l>            BordesMain:=0.001</l>
<l>            edges_object_model_3d (Escena3D_RAW, BordesMain, [], [], Modelo_3D_ROI_ThresEdges)</l>
<c>            </c>
<c>       </c>
<l>            Visualizar_3D ([ObjectModel3D_Core_Pallet,Modelo_3D_ROI_ThresEdges], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Visualizar3D, [], [], [], WindowHandle, PoseOut1)</l>
<c>            </c>
<c>            ****************************</c>
<l>* #### Envio data de estado ############################################         </l>
<l>            Estado:=10</l>
<l>            Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* ####################################################################### </l>
<c></c>
<c>            </c>
<c>            </c>
<l>            Find_Entity_3D (N_matches, SFM, Escena3D, Sampling_Find, Keypoint, MinScore, Mod_3D_Objeto, Modelo_3D_ROI_ThresEdges,\
                            PoseMLS, ScoreMLS, Pose_Refinada, \
                            Score_Refinado, SurfaceMatchingResultID1, Posicion3D_Objeto, Posicion3D_Objeto_REFIN, Obj_Detectado)</l>
<c>            </c>
<l>            Find_Entity_3D_Image (Z, N_matches, SFM, Escena3D, Sampling_Find, Keypoint, MinScore, Mod_3D_Objeto, Modelo_3D_ROI_ThresEdges, PoseMLS, ScoreMLS, Pose_Refinada, Score_Refinado, SurfaceMatchingResultID1, Posicion3D_Objeto, Posicion3D_Objeto_REFIN, Obj_Detectado)</l>
<c>            </c>
<l>* #### Envio data de estado ############################################         </l>
<l>            Estado:=21</l>
<l>            Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* ####################################################################### </l>
<c>            </c>
<c>            </c>
<c>            </c>
<c>            </c>
<c>            </c>
<l>            if ( Obj_Detectado)</l>
<c>                </c>
<l>                create_pose (50,-100, 1690, 352, 0, 0, 'Rp+T', 'gba', 'point', PoseView)</l>
<l>                disp_object_model_3d (WindowHandle, [Posicion3D_Objeto_REFIN,Escena3D_RAW], [], PoseView, [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,1])</l>
<c></c>
<l>                tuple_int (Pose_Refinada[5], Int)</l>
<l>if (Int != 358)</l>
<c>    </c>
<l>    asd:=324</l>
<l>endif</l>
<c>              </c>
<c>                                   </c>
<l> *              Visualizar_3D ([Posicion3D_Objeto_REFIN,Escena3D_RAW], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5],\
                               Visualizar3D, [], [], [], WindowHandle, PoseOut1)</l>
<c>                </c>
<c>                </c>
<l>*                  debug_find_surface_model (SFM, Mod_3D_Objeto, Escena3D, SurfaceMatchingResultID1, CreateNames, CreateValues, FindNames, FindValues)</l>
<c>                * </c>
<c>                * The output parameters of the procedure</c>
<c>                * now contain the parameters that were set within the procedure.</c>
<c>                * Pass those to create_surface_model and find_surface_model</c>
<c>                * to adapt the matching accordingly.</c>
<l>*                 dev_clear_window ()</l>
<l>*                 convert_tuple_to_string (CreateNames, CreateNamesStr)</l>
<l>*                 convert_tuple_to_string (CreateValues, CreateValuesStr)</l>
<l>*                 convert_tuple_to_string (FindNames, FindNamesStr)</l>
<l>*                 convert_tuple_to_string (FindValues, FindValuesStr)</l>
<c>                </c>
<l>*                 FindMsg := ['create_surface_model:','  GenParamName: ' + CreateNamesStr,'  GenParamValue: ' + CreateValuesStr]</l>
<l>*                 CreateMsg := ['find_surface_model:','  GenParamName: ' + FindNamesStr,'  GenParamValue: ' + FindValuesStr]</l>
<l>*                 dev_disp_text (['The debug procedure has finished. The output parameters are:','',FindMsg,'',CreateMsg], 'window', 'top', 'left', 'black', [], [])</l>
<l>*                 dev_disp_text ('      End of program      ', 'window', 'bottom', 'right', 'black', [], [])</l>
<c>                </c>
<c>     </c>
<c>                </c>
<c>                </c>
<c>                </c>
<c>                </c>
<l>                return ()</l>
<c>                </c>
<l>                if(Pituto)</l>
<l>* #### Envio data de estado ############################################         </l>
<l>                    Estado:=22</l>
<l>                    Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* ####################################################################### </l>
<c>                    </c>
<l>                    Umbral_Pituto:=26</l>
<l>                    Umbral_PitutoMax:=300</l>
<l>                    if (Pose_Refinada[5] &gt; Umbral_PitutoMax)</l>
<c>                        </c>
<l>                        anguloaux:=Pose_Refinada[5]-360</l>
<l>                        if (anguloaux&lt;-Umbral_Pituto)</l>
<c>                            </c>
<l>                            Mensaje:='### ERROR ### Angulo Z &lt; 20'</l>
<l>                            Send_Data_Info (Mensaje, SerialHandle)</l>
<c>                            </c>
<l>                            RepetirFoto:=true</l>
<l>                            clear_object_model_3d([ ObjectModel3D_Core_Pallet, Posicion3D_Objeto, Posicion3D_Objeto_REFIN])</l>
<l>                            clear_surface_model (SFM_Core_Pallet)</l>
<l>                            return()</l>
<l>                        endif</l>
<c>                        </c>
<c>                        </c>
<l>                    elseif(Pose_Refinada[5] &gt; Umbral_Pituto)</l>
<l>                        Mensaje:='### ERROR ### Angulo Z &gt; 20'</l>
<l>                        Send_Data_Info (Mensaje, SerialHandle)</l>
<c>                        </c>
<l>                        RepetirFoto:=true</l>
<l>                        clear_object_model_3d([ ObjectModel3D_Core_Pallet, Posicion3D_Objeto, Posicion3D_Objeto_REFIN])</l>
<l>                        clear_surface_model (SFM_Core_Pallet)</l>
<l>                        return()</l>
<l>                    endif</l>
<c>                    </c>
<c>                    </c>
<c>                    </c>
<c>                    </c>
<l>                endif</l>
<l>*                 Visualizar_3D ([Posicion3D_Objeto_REFIN,Escena3D_RAW], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], 1, [], [], [], WindowHandle6, PoseOut1)</l>
<c>                </c>
<c>                ****************************************</c>
<c>                *Descuento 1 el stock ingresado en BD                </c>
<l>                Set_MinusCores (SerialHandle, FXcheck)</l>
<c>                ****************************************</c>
<l>                RepetirFoto:=false</l>
<c>                </c>
<l>* #### Envio data de estado ########################</l>
<l>                Estado:=11</l>
<l>                Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* ####################################################### </l>
<l>* ### Verifico si los datos corresponden a lo calculado</l>
<l>* ### Modo Debug ###               </l>
<l>*                 Verificate_Pose_RobotVision (SerialHandle, Pose_Refinada)</l>
<l>* #######################################################    </l>
<c>                </c>
<c>                **********************************************               </c>
<l>                Delta_Y:=18.007</l>
<l>                Delta_Z:=0</l>
<l>                Pose_Refinada[1]:=Pose_Refinada[1]+Delta_Y</l>
<l>                Pose_Refinada[2]:=Pose_Refinada[2]+Delta_Z</l>
<c>                </c>
<l>                Send_Data_To_Robot(Pose_Refinada,SerialHandle)</l>
<c>                ***************************************</c>
<l>                Estado_Fx:=true</l>
<c>                </c>
<c>                </c>
<l>                clear_object_model_3d([ ObjectModel3D_Core_Pallet, Posicion3D_Objeto, Posicion3D_Objeto_REFIN])</l>
<l>                clear_surface_model (SFM_Core_Pallet)</l>
<l>            else</l>
<c>                </c>
<l>                Procesando:=1</l>
<l>                Estado:=11</l>
<l>                Resultado:=2</l>
<l>                Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>                Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<c>                </c>
<l>            endif</l>
<l>*             clear_object_model_3d([ObjectModel3D_Core_Pallet])</l>
<l>*             clear_surface_model (SFM_Core_Pallet)</l>
<l>        endif</l>
<c>        </c>
<l>    endfor</l>
<l>catch (Exception)</l>
<l>    Send_Data_Error (Exception, SerialHandle, EstadoFx)    </l>
<l>endtry</l>
<l>Vector_Existencia_Core_New:=Vector_Existencia_Core</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Find_Sector_Core_Bloque3">
<parameters>
<parameter id="Escena3D_RAW"/>
<parameter id="Estado_Fx"/>
<parameter id="Modelo3D_Select"/>
<parameter id="ObjectModel3D_Core_Pallet"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="Path_3D_Segmentos"/>
<parameter id="Path_CORE_ID"/>
<parameter id="Path_SFM_Segmentos"/>
<parameter id="Pituto"/>
<parameter id="ROI3D_rotate"/>
<parameter id="RepetirFoto"/>
<parameter id="SFM_Core_Pallet"/>
<parameter id="Sampling"/>
<parameter id="SerialHandle"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="Vector_Entidades_Segmento"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="Vector_Existencia_Core_New"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet"/>
<parameter id="Vector_Segmento"/>
<parameter id="Visualizar3D"/>
<parameter id="WindowHandle"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Centro_and_Esquina">
<interface>
<io>
<par name="Esquina_Left" base_type="iconic" dimension="0"/>
<par name="Xobj1" base_type="iconic" dimension="0"/>
<par name="Yobj1" base_type="iconic" dimension="0"/>
<par name="Zobj1" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Esquina_LeftOut" base_type="iconic" dimension="0"/>
</oo>
<oc>
<par name="row1" base_type="ctrl" dimension="0"/>
<par name="col1" base_type="ctrl" dimension="0"/>
<par name="CentroX" base_type="ctrl" dimension="0"/>
<par name="CentroY" base_type="ctrl" dimension="0"/>
<par name="CentroZ" base_type="ctrl" dimension="0"/>
<par name="Nelementos" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Esquina_LeftOut := Esquina_Left</l>
<l>shape_trans (Esquina_LeftOut, Esquina_LeftOut, 'rectangle2')</l>
<l>orientation_region (Esquina_LeftOut, Phi)</l>
<l>* Angulo:=Phi*180/3.1415 -90</l>
<l>* Phi:=0</l>
<l>area_center (Esquina_LeftOut, Area, Row, Column)</l>
<l>Nelementos:=|Area|</l>
<l>* dev_set_line_width (7)</l>
<l>* Length := 80</l>
<l>* disp_arrow (200000, Row, Column, Row + cos(Phi ) * Length, Column + sin(Phi  ) * Length, 3)</l>
<c></c>
<c></c>
<l>region_features (Esquina_LeftOut, 'row1', row1)</l>
<l>region_features (Esquina_LeftOut, 'column1', col1)</l>
<c></c>
<l>region_features (Esquina_LeftOut, 'row2', row2)</l>
<l>region_features (Esquina_LeftOut, 'column2', col2)</l>
<l>dev_set_line_width (7)</l>
<l>disp_cross (200000, row1, col1, 6, 0)</l>
<l>disp_cross (200000, row2, col2, 6, 0)</l>
<c></c>
<c></c>
<l>get_grayval (Xobj1, Row, Column, CentroX)</l>
<l>get_grayval (Yobj1, Row, Column, CentroY)</l>
<l>get_grayval (Zobj1, Row, Column, CentroZ)</l>
<l>return ()</l>
</body>
<docu id="Get_Centro_and_Esquina">
<parameters>
<parameter id="CentroX"/>
<parameter id="CentroY"/>
<parameter id="CentroZ"/>
<parameter id="Esquina_Left"/>
<parameter id="Esquina_LeftOut"/>
<parameter id="Nelementos"/>
<parameter id="Xobj1"/>
<parameter id="Yobj1"/>
<parameter id="Zobj1"/>
<parameter id="col1"/>
<parameter id="row1"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Esquina_LeftRight">
<interface>
<io>
<par name="Img_Left_Esquina" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Esquina_Left" base_type="iconic" dimension="0"/>
<par name="Esquina_Right" base_type="iconic" dimension="0"/>
</oo>
</interface>
<body>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>gen_rectangle1 (ROI_0, 2.34444, 1.68182, 252.656, 269)</l>
<c></c>
<l>gen_rectangle1 (ROI_1, 2.34444, 1066.41, 252.656, 1281.68)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>reduce_domain (Img_Left_Esquina, ROI_0, ImageReduced)</l>
<l>reduce_domain (Img_Left_Esquina, ROI_1, ImageReduced_rigth)</l>
<l>threshold (ImageReduced, Esquina, 160, 255)</l>
<l>threshold (ImageReduced_rigth, Esquina_rigth, 160, 255)</l>
<c></c>
<c></c>
<l>erosion_rectangle1 (Esquina, RegionErosion, 3, 3)</l>
<c></c>
<l>connection (RegionErosion, ConnectedRegions)</l>
<l>select_shape_std (ConnectedRegions, Esquina_Left, 'max_area',90)</l>
<c></c>
<c></c>
<l>erosion_rectangle1 (Esquina_rigth, RegionErosion, 3, 3)</l>
<c></c>
<l>connection (RegionErosion, ConnectedRegions)</l>
<l>select_shape_std (ConnectedRegions, Esquina_Right, 'max_area',90)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Esquina_LeftRight">
<parameters>
<parameter id="Esquina_Left"/>
<parameter id="Esquina_Right"/>
<parameter id="Img_Left_Esquina"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_Data_Estado">
<interface>
<ic>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="Estado" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>* ##### Envio de estado  #######################</l>
<l>*wait_seconds (0.1)</l>
<l>Valor_Variable:=Vector_Estado_Fx.at(Estado).at(0)</l>
<l>Tag_Destino:='_EV01_I_Estado'</l>
<c></c>
<l>Peticion     := 'HalconEstado'</l>
<l>Variable_OPC := Tag_Destino</l>
<l>Variable:=Vector_Estado_Fx.at(Estado).at(1)</l>
<l>Data:=Peticion+';'+Variable_OPC+';'+Variable</l>
<c></c>
<l>write_serial (SerialHandle, ords(Data))</l>
<c></c>
<c></c>
<l>VarSerial:=0</l>
<l>while(VarSerial&lt;1)    </l>
<l>    read_serial (SerialHandle, 20, Nchar)</l>
<l>    Nchar:= chrt(Nchar)</l>
<l>    tuple_number (Nchar, Variable)</l>
<l>    VarSerial:=|Nchar|</l>
<l>endwhile</l>
<c></c>
<l>* #### Fin envio de estado ######################  </l>
<c></c>
<l>return ()</l>
</body>
<docu id="Send_Data_Estado">
<parameters>
<parameter id="Estado"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_Data_Info">
<interface>
<ic>
<par name="Mensaje" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>* ##### Envio de estado  #######################</l>
<c></c>
<l>Valor_Variable:=Mensaje</l>
<l>Tag_Destino:='_EV01_I_Estado'</l>
<c></c>
<l>Peticion     := 'HalconEstado'</l>
<l>Variable_OPC := Tag_Destino</l>
<l>Variable:=Mensaje</l>
<l>Data:=Peticion+';'+Variable_OPC+';'+Variable</l>
<c></c>
<l>write_serial (SerialHandle, ords(Data))</l>
<c></c>
<c></c>
<l>VarSerial:=0</l>
<l>while(VarSerial&lt;1)    </l>
<l>    read_serial (SerialHandle, 20, Nchar)</l>
<l>    Nchar:= chrt(Nchar)</l>
<l>    tuple_number (Nchar, Variable)</l>
<l>    VarSerial:=|Nchar|</l>
<l>endwhile</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>* #### Fin envio de estado ######################  </l>
<c></c>
<l>return ()</l>
</body>
<docu id="Send_Data_Info">
<parameters>
<parameter id="Mensaje"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_Data_Error">
<interface>
<ic>
<par name="Exception" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="EstadoFx" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>    dev_get_exception_data (Exception, 'error_msg',    ErrorMsg0)</l>
<l>    dev_get_exception_data (Exception, 'procedure',    ErrorMsg1)</l>
<l>    dev_get_exception_data (Exception, 'operator',     ErrorMsg2)</l>
<l>    dev_get_exception_data (Exception, 'program_line', ErrorMsg3)</l>
<c>  </c>
<c>    </c>
<l>    MensajeError:=ErrorMsg0 + ' IN '+ErrorMsg1+' IN FUNTION '+ErrorMsg2+' IN LINE '+ErrorMsg3</l>
<l>    Mensaje:=MensajeError</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<l>    EstadoFx:=false</l>
<l>    wait_seconds (0.1)</l>
<c>    * #### Envio data de estado ########################</c>
<l>    Procesando:=0</l>
<l>    Resultado:=2</l>
<l>    Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<c>    </c>
<l>* ################################################## </l>
<l>return ()</l>
</body>
<docu id="Send_Data_Error">
<parameters>
<parameter id="EstadoFx"/>
<parameter id="Exception"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_PatronToRobot">
<interface>
<ic>
<par name="PoseForCalibrationPlate" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>        Variable_Pos := ['X','Y','Z','C','B','A']</l>
<l>        for Index_Var := 0 to 5 by 1</l>
<l>            Tag_Destino:='_EV01_I_Eje'+Variable_Pos[Index_Var]</l>
<l>            Variable := PoseForCalibrationPlate[Index_Var]</l>
<l>            Send_EthernetIP_Data (Tag_Destino, Variable, SerialHandle)</l>
<c>          </c>
<l>        endfor</l>
<l>return ()</l>
</body>
<docu id="Send_PatronToRobot">
<parameters>
<parameter id="PoseForCalibrationPlate"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_SFM">
<interface>
<oc>
<par name="Modelo3D" base_type="ctrl" dimension="0"/>
<par name="SFM" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>read_object_model_3d ('D:/AI/Vision Artificial/4.-MAGOTTEAUX/21.-HandEye/3DBUFhandeye.om3', 1, [], [], Modelo3D, Status)</l>
<l>read_surface_model ('D:/AI/Vision Artificial/4.-MAGOTTEAUX/21.-HandEye/SFMBUFhandeye.sfm', SFM)</l>
<l>return ()</l>
</body>
<docu id="Get_SFM">
<parameters>
<parameter id="Modelo3D"/>
<parameter id="SFM"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_ObjInBasePose_COPY_1">
<interface>
<ic>
<par name="Pose_Refinada" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ObjInBasePose" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>ObjInCamPose := Pose_Refinada</l>
<c>* </c>
<l>read_pose ('C:/Users/Usuario/Dropbox (MIRS)/1.-Servidor Desarrollo Software/7.-Magotteaux/7.-HandEye/1.- Ensenso R1/ToolInCamPose_R1.dat', ToolInCamPose)</l>
<c>* </c>
<c>* </c>
<l>Get_Robot_Pose (SerialHandle, ToolInBasePose)</l>
<c>* </c>
<l>pose_invert (ToolInCamPose, CamInToolPose)</l>
<l>pose_compose (ToolInBasePose, CamInToolPose, CamInBasePose)</l>
<l>pose_compose (CamInBasePose, ObjInCamPose, ObjInBasePose)</l>
<l>return ()</l>
</body>
<docu id="Get_ObjInBasePose_COPY_1">
<parameters>
<parameter id="ObjInBasePose">
<description lang="es_ES">Objeto relativo a la base del robot</description>
</parameter>
<parameter id="Pose_Refinada">
<description lang="es_ES">Pose del objeto relativo a la camra</description>
</parameter>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Consolidado_Vision_R1">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="Path_SFM_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_3D_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_CORE_ID" base_type="ctrl" dimension="0"/>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="AcqHandle_Cam_0" base_type="ctrl" dimension="0"/>
<par name="Camera0_Parameters" base_type="ctrl" dimension="0"/>
<par name="Camera0_Pose" base_type="ctrl" dimension="0"/>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>Parametros_VisualizacionOut := Parametros_Visualizacion</l>
<l>Valores_VisualizacionOut := Valores_Visualizacion</l>
<l>dev_open_window (0, 0, 512, 512, 'black', WindowHandle)</l>
<c></c>
<l>Get_EstadoSerialBridge (EstadoSerialBridge)</l>
<l>Estado_Get_SFM_STL:=false</l>
<l>DerivadaCore:=['','']</l>
<c></c>
<l>while(EstadoSerialBridge)</l>
<c>    </c>
<c>    *Variable a leer para activar la adquisicion del robot</c>
<l>    Tag_Lectura:='_EV01_O_CmdDatos'         </l>
<l>    Read_EthernetIP_Data (Tag_Lectura, SerialHandle, _EV1_O_CmdDatos)</l>
<c>    </c>
<l>* ######################################################################################</l>
<l>* ##################### BLOQUE 1########################################################</l>
<l>* #################Identificación de elementos en el pallet#############################</l>
<l>* ##### Input -&gt; RV_CmdFotogen #########################################################</l>
<l>* #####       -&gt; Imagen</l>
<l>* #####       -&gt; 'PV_Pallet_to_Scan'</l>
<l>* #####       -&gt; BD Cores</l>
<l>* #####################################################################################</l>
<l>    if (_EV1_O_CmdDatos &gt;= 11 and _EV1_O_CmdDatos &lt;= 16 )</l>
<c>        </c>
<l>        Bloque_1 (Vector_Estado_Fx, SerialHandle, _EV1_O_CmdDatos, Path_SFM_Segmentos, Path_3D_Segmentos, Path_CORE_ID, NxLib, Camera_1)</l>
<c>        </c>
<l>    endif  </l>
<l>* ##############################FIN BLOQUE 1###########################################</l>
<c>    </c>
<c>    </c>
<l>* ######################################################################################</l>
<l>* ##################### BLOQUE 2########################################################</l>
<l>* #################Identificación de elementos en el pallet#############################</l>
<l>* ##### Input -&gt; RV_CmdFotogen #########################################################</l>
<l>* #####       -&gt; Imagen</l>
<l>* #####       -&gt; 'PV_Pallet_to_Scan'</l>
<l>* #####       -&gt; BD Cores</l>
<l>* ######################################################################################</l>
<l>    if (_EV1_O_CmdDatos = 20 or _EV1_O_CmdDatos = 21 )</l>
<c>        </c>
<l>        Bloque_2 (SerialHandle, Vector_Estado_Fx, AcqHandle_Cam_0, Camera0_Parameters, Camera0_Pose, Estado_SubProceso, PoseForCalibrationPlate, ToolInCamPose, ToolInBasePose, ObjInBasePose)</l>
<c>        </c>
<l>    endif</l>
<l>* ##############################FIN BLOQUE 2############################################</l>
<c>    </c>
<c>    </c>
<l>    Get_3dModel_Core (SerialHandle, Path_CORE_ID, Path_3D_Segmentos,\
                      Path_SFM_Segmentos, Vector_Estado_Fx, ObjectModel3D_Core_Pallet,\
                      SFM_Core_Pallet, Modelo3D_Select)</l>
<c>    </c>
<c>    * Lectura de pulso qpara leer mas rapido el modelo 3D </c>
<l>    if (_EV1_O_CmdDatos = 19 )</l>
<l>        Get_Core_ToUse_From_BDD (SerialHandle, Cod_Core_ToUse, Pallet_To_Scan, \
                                 Segmento_To_Scan, PitutoExist, FXcheck)</l>
<l>        Get_SFM_STL (Cod_Core_ToUse, Path_CORE_ID, Path_3D_Segmentos, Path_SFM_Segmentos, Vector_Estado_Fx, SerialHandle,\
                     ObjectModel3D_Core_Pallet, SFM_Core_Pallet, Estado_Get_SFM_STL, Modelo3D_Select) </l>
<l>    endif</l>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<l>* ######################################################################################</l>
<l>* ##################### BLOQUE 3########################################################</l>
<l>* #################        Tomar Cores e insertarlos       #############################</l>
<l>* ##### Input -&gt; RV_CmdFotogen #########################################################</l>
<l>* #####       -&gt; RAM Base Datos</l>
<l>* #####       -&gt; 'PV_Pallet_to_Scan'</l>
<l>* #####       -</l>
<c>    </c>
<l>* ###################################################################################### </l>
<c>    </c>
<l>    if (_EV1_O_CmdDatos &gt; 21 and _EV1_O_CmdDatos &lt;= 26  and Estado_Get_SFM_STL)</l>
<c>        </c>
<l>        Bloque_3 (ModelImage, X, Y, Z, ImgLeftCamera, SerialHandle, NxLib, Camera_1, Parametros_Visualizacion, Valores_Visualizacion, \
                  Path_SFM_Segmentos, Path_3D_Segmentos, Path_CORE_ID, Vector_Estado_Fx, ObjectModel3D_Core_Pallet, SFM_Core_Pallet, Modelo3D_Select, WindowHandle, Cod_Core_ToUse)</l>
<c>        </c>
<l>        clear_object_model_3d (ObjectModel3D_Core_Pallet)</l>
<l>        clear_surface_model (SFM_Core_Pallet)  </l>
<c>        </c>
<l>    endif</l>
<l>* ##############################FIN BLOQUE 3############################################</l>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<l>* ######################################################################################</l>
<l>* ##################### BLOQUE Extraccion Localizadores    #############################</l>
<l>* #################        Tomar Cores e insertarlos       #############################</l>
<l>* ##### Input -&gt; RV_CmdFotogen #########################################################</l>
<l>* #####       -&gt; PatternActual (BD)    </l>
<l>* ######################################################################################</l>
<l>    if (_EV1_O_CmdDatos &gt;= 30 and _EV1_O_CmdDatos &lt;= 49 )</l>
<c>        </c>
<l>        Bloque_Localizadores (SerialHandle, NxLib, Camera_1)</l>
<c>        </c>
<l>    endif</l>
<c>    </c>
<l>* ##############################FIN BLOQUE Extraccion Localizadores ####################</l>
<c>    </c>
<l>    wait_seconds (0.5)</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>*     Get_EstadoSerialBridge (EstadoSerialBridge)</l>
<l>endwhile</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Consolidado_Vision_R1">
<parameters>
<parameter id="AcqHandle_Cam_0"/>
<parameter id="Camera0_Parameters"/>
<parameter id="Camera0_Pose"/>
<parameter id="Camera_1"/>
<parameter id="NxLib"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="Path_3D_Segmentos"/>
<parameter id="Path_CORE_ID"/>
<parameter id="Path_SFM_Segmentos"/>
<parameter id="SerialHandle"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="Vector_Estado_Fx"/>
</parameters>
</docu>
</procedure>
<procedure name="Find_SerialBridge">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>Bucle:=true</l>
<l>pathFile:='C:/DaFunk/InitFile.txt'</l>
<l>while (Bucle)</l>
<l>    try</l>
<l>        open_file(pathFile,'input',FileHandle)</l>
<l>*         fwrite_string(FileHandle,'Para escribir weas')</l>
<l>        fread_string(FileHandle,String,IsEOF) </l>
<l>*         fnew_line(FileHandle)</l>
<l>        close_file(FileHandle)</l>
<l>        if (String='True')</l>
<l>            Mensaje:='SerialBridge Detectado............'</l>
<l>            Send_Data_Info (Mensaje, SerialHandle)</l>
<l>            Bucle:=false</l>
<l>        endif</l>
<l>    catch (Exception )</l>
<c>        </c>
<l>    endtry</l>
<c>    </c>
<l>endwhile</l>
<l>return ()</l>
</body>
<docu id="Find_SerialBridge">
<parameters>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_EstadoSerialBridge">
<interface>
<oc>
<par name="EstadoSerialBridge" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>pathFile:='C:/DaFunk/InitFile.txt'</l>
<c></c>
<l>try</l>
<l>    open_file(pathFile,'input',FileHandle)</l>
<l>*     fwrite_string(FileHandle,'Para escribir weas')</l>
<l>    fread_string(FileHandle,EstadoSerialBridge,IsEOF) </l>
<l>*     fnew_line(FileHandle)</l>
<l>    close_file(FileHandle)</l>
<l>    if (EstadoSerialBridge='True')</l>
<l>        EstadoSerialBridge:=true</l>
<c>        </c>
<l>    else</l>
<l>        EstadoSerialBridge:=false</l>
<l>    endif</l>
<l>catch (Exception )</l>
<l>    EstadoSerialBridge:=false</l>
<c>   </c>
<l>endtry</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_EstadoSerialBridge">
<parameters>
<parameter id="EstadoSerialBridge"/>
</parameters>
</docu>
</procedure>
<procedure name="Verificate_Pose_RobotVision">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Pose_Refinada" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>                 Get_Pose_Tool (SerialHandle, realPoss)</l>
<l>                dev_inspect_ctrl (realPoss)</l>
<l>                Get_Pose_Tool (SerialHandle, ToolInBasePose)</l>
<l>                dev_inspect_ctrl (ToolInBasePose)</l>
<c>         </c>
<c>                * ************************************************************************************************************</c>
<c>                * Oriento el robot a como este la placa</c>
<c>                * ************************************************************************************************************</c>
<l>                read_pose ('C:/Users/Usuario/Dropbox (MIRS)/1.-Servidor Desarrollo Software/7.-Magotteaux/7.-HandEye/1.- Ensenso R1/ToolInCamPose_R1.dat', \
                           ToolInCamPose)</l>
<l>                pose_invert (ToolInCamPose, PoseInvert)</l>
<l>                dev_inspect_ctrl (PoseInvert)</l>
<l>                  pose_invert (PoseInvert, ToolInCamPose)</l>
<l>                dev_inspect_ctrl (ToolInCamPose)</l>
<l>               ObjInCamPose := Pose_Refinada</l>
<c>                </c>
<l>                pose_invert (ToolInCamPose, CamInToolPose)</l>
<l>                pose_compose (ToolInBasePose, CamInToolPose, CamInBasePose)</l>
<l>                pose_compose (CamInBasePose, ObjInCamPose, ObjInBasePose)</l>
<l>                convert_pose_type (ObjInBasePose, 'Rp+T', 'abg', 'point', ObjInBasePose)</l>
<l>                dev_inspect_ctrl (ObjInBasePose)</l>
<c>                </c>
<l>return ()</l>
</body>
<docu id="Verificate_Pose_RobotVision">
<parameters>
<parameter id="Pose_Refinada"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Image_Bloque3">
<interface>
<oo>
<par name="ModelImage" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
<par name="Z" base_type="iconic" dimension="0"/>
<par name="ImgLeftCamera" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="FOTO" base_type="ctrl" dimension="0"/>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
<par name="Cod_Core_ToUse" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* Configuracion de Parametros</c>
<l>MinimumDisparity_Cam1:=-35</l>
<l>NumberOfDisparities_Cam1:= 128</l>
<c></c>
<l>Projector:='true'</l>
<l>FrontLigth:='true'</l>
<l>AutoExposure:='false'</l>
<l>AutoGain:='false'</l>
<l>Exposure := 4.49</l>
<l>Gain:=1</l>
<l>FlexView:=8</l>
<l>*Config_Parametros_Cam_R1 (NxLib, Camera_1, NumberOfDisparities_Cam1, MinimumDisparity_Cam1, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure, FlexView, TempCam)</l>
<c></c>
<c></c>
<c></c>
<l>*Adq_Imagen (ModelImage, NxLib, Camera_1)</l>
<c></c>
<c>***********************************************************************</c>
<c>****** Guardo las Imagenes ********************************************</c>
<l>get_system_time (MSecond, Second, Minute, Hour, Day, YDay, Month, Year)</l>
<c></c>
<l>* write_object (ModelImage, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 2/ModelImage'+FOTO)</l>
<c></c>
<l>*read_image (ModelImage, 'D:/20-Imagenes Produccion/Bloque 2MANGAS/ModelImage711442.hobj')</l>
<c></c>
<c></c>
<l>list_files ('D:/20-Imagenes Produccion/Bloque 2/CLR 100FONDO Blanco', 'files', Files)</l>
<l>tuple_sort (Files, Files)</l>
<l> read_image (ModelImage, Files[FOTO])</l>
<l> read_image (ModelImage, 'D:/20-Imagenes Produccion/GRISES/ModelImage1.hobj')</l>
<c></c>
<c>************************************************************************</c>
<l>Get_TipoEntidad (Cod_Core_ToUse, Is_a_Core)</l>
<c></c>
<l>Adq_XYZ_Img (ModelImage, X, Y, Z)</l>
<c></c>
<c></c>
<c>* Then is a  Sleeve</c>
<l>if (Is_a_Core)</l>
<c></c>
<l>    gen_rectangle1 (ROI_0, 270, 360, 900, 990)</l>
<l>*     gen_rectangle1 (ROI_0, 270, 360, 1050, 1100)</l>
<c>    </c>
<l>    reduce_domain (Z, ROI_0, Z)</l>
<c>    *******************************************************</c>
<c>    * Segmento el dore de manera dinamica</c>
<l>    Segmentar_Core (Z, X, Y, Z, Entidad, Estado_Funcion)</l>
<c>    *******************************************************</c>
<l>    dilation_circle (Entidad, EntidadDilatada, 10.5)</l>
<l>    reduce_domain (Z, EntidadDilatada, Z)</l>
<c>  </c>
<l>    select_obj(ModelImage, ImgLeftCamera, 1)</l>
<c>    </c>
<l>endif</l>
<c></c>
<c></c>
<c></c>
<l>xyz_to_object_model_3d (X, Y, Z, Escena3D_RAW)</l>
<c></c>
<c>******************************************************************************************************************************</c>
<l>Debug_View:=false</l>
<l>Visualizar_3D ([ Escena3D_RAW], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Debug_View, [], [], [], WindowHandle, PoseOut1)</l>
<c></c>
<c></c>
<c></c>
<l>Parametros_VisualizacionOut := ['disp_pose','color_attrib','lut','disp_lines','point_size']</l>
<l>Valores_VisualizacionOut := ['false','coord_z','rainbow','true',1]</l>
<l>create_pose (100, 0, 2000, 0, 0, 0, 'Rp+T', 'gba', 'point', PoseView)</l>
<l>disp_object_model_3d (WindowHandle, Escena3D_RAW, [], PoseView, Parametros_VisualizacionOut, Valores_VisualizacionOut)</l>
<c>******************************************************************************************************************************</c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Image_Bloque3">
<parameters>
<parameter id="Camera_1"/>
<parameter id="Cod_Core_ToUse"/>
<parameter id="Escena3D_RAW"/>
<parameter id="FOTO"/>
<parameter id="ImgLeftCamera"/>
<parameter id="ModelImage"/>
<parameter id="NxLib"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="WindowHandle"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_SprueExistence">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Pattern" base_type="ctrl" dimension="0"/>
<par name="PosicionRack" base_type="ctrl" dimension="0"/>
<par name="ExisteEnRack" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Tag_Lectura:='_EBD_I_PatternList'         </l>
<l>Read_EthernetIP_Data (Tag_Lectura, SerialHandle, Pattern)</l>
<c></c>
<c>********************************************</c>
<c>* Peticion de RamSprue</c>
<c>*********************************************</c>
<c></c>
<l>Peticion     := 'RamSprue'</l>
<l>Variable_OPC := Pattern</l>
<c></c>
<l>Data:=Peticion+';'+Variable_OPC</l>
<c></c>
<l>write_serial (SerialHandle, ords(Data))</l>
<c></c>
<l>wait_seconds (0.08)</l>
<c>*Numero de caracteres a leer</c>
<l>read_serial (SerialHandle, 20, Nchar)</l>
<l>Variable:= chrt(Nchar)</l>
<l>tuple_split (Variable, ';', Data)</l>
<c></c>
<l>Pattern:=Data[0]</l>
<l>PosicionRack:=Data[1]</l>
<l>if (Data[2]='O')</l>
<l>    ExisteEnRack:=true</l>
<l>elseif (Data[2]='X')</l>
<l>    ExisteEnRack:=false</l>
<l>endif</l>
<l>return ()</l>
</body>
<docu id="Get_SprueExistence">
<parameters>
<parameter id="ExisteEnRack"/>
<parameter id="Pattern"/>
<parameter id="PosicionRack"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Set_SprueExistence">
<interface>
<ic>
<par name="PatternName" base_type="ctrl" dimension="0"/>
<par name="Data" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>DataOut := Data</l>
<l>Peticion     := 'RamSprue'</l>
<l>Instruccion := 'Set_Sprue'</l>
<c></c>
<l>DataOut := Peticion+';'+Instruccion+';'+PatternName+';'+DataOut</l>
<c></c>
<l>write_serial (SerialHandle, ords(DataOut))</l>
<l>return ()</l>
</body>
<docu id="Set_SprueExistence">
<parameters>
<parameter id="Data"/>
<parameter id="PatternName"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_AlturaLocalizador">
<interface>
<io>
<par name="Zmred" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Minimo" base_type="ctrl" dimension="0"/>
<par name="Estado_Fx" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>Estado_Fx:=false</l>
<l>try</l>
<c>    </c>
<l>    threshold (Zmred, Localizadores, 1000, 1500)  </l>
<l>    dev_display (Localizadores)</l>
<c>    </c>
<c>    </c>
<l>    erosion_circle (Localizadores, Localizadores, 5)</l>
<l>    reduce_domain (Zmred, Localizadores, posibles_Localizadores)</l>
<c>    </c>
<l>*     gauss_filter (posibles_Localizadores, posibles_Localizadores, 5)</l>
<l>    local_min (posibles_Localizadores, LocalMinima)        </l>
<l>    connection (LocalMinima, ConnectedRegions) </l>
<c>    </c>
<c>    </c>
<l>    area_center (ConnectedRegions, Area, Row, Column)        </l>
<l>    get_grayval (posibles_Localizadores, Row, Column, AlturaLocalizadores)        </l>
<l>    tuple_min (AlturaLocalizadores, Minimo)</l>
<l>    Estado_Fx:=true</l>
<c>    </c>
<l>catch (Exception)</l>
<c>    </c>
<l>    Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<l>    Estado_Fx:=false</l>
<l>endtry</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_AlturaLocalizador">
<parameters>
<parameter id="Estado_Fx"/>
<parameter id="Minimo"/>
<parameter id="SerialHandle"/>
<parameter id="Zmred"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Zona_ROI">
<interface>
<io>
<par name="Zm" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Zmred" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="N_Localizador" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>        </c>
<l>        switch (N_Localizador)</l>
<l>        case 1:</l>
<c>            * ROI Zona 1</c>
<l>            gen_rectangle2 (ROI_0_V, 344.418, 1191.16, rad(-162.331), 98.6985, 22.4178)</l>
<l>            gen_rectangle1 (ROI_0, 208.196, 1030.52, 477.181, 1280.46)</l>
<l>            difference (ROI_0, ROI_0_V, Zona1) </l>
<l>             reduce_domain (Zm, Zona1, Zmred)</l>
<l>            break</l>
<c>            </c>
<l>        case 2:</l>
<c>            * ROI Zona 2   </c>
<l>            gen_rectangle2 (ROI_1_V, 345.722, 919.371, rad(-155.784), 139.038, 15.6904)</l>
<l>            gen_rectangle1 (ROI_1, 206.5, 777.629, 484.5, 1041)</l>
<l>            difference (ROI_1, ROI_1_V, Zona2)</l>
<l>             reduce_domain (Zm, Zona2, Zmred)</l>
<l>            break</l>
<c>            </c>
<l>        case 3:</l>
<c>            * ROI Zona 3   </c>
<l>            gen_rectangle2 (ROI_2_V, 345.015, 586.084, rad(-120.334), 45.0368, 17.6733)</l>
<l>            gen_rectangle1 (ROI_2, 227.5, 470.061, 465.5, 694.752)</l>
<l>            difference (ROI_2, ROI_2_V, Zona3)  </l>
<l>             reduce_domain (Zm, Zona3, Zmred)</l>
<l>            break</l>
<l>        case 4:</l>
<c>            * ROI Zona 4   </c>
<l>            gen_rectangle2 (ROI_3_V, 336.458, 225.659, rad(143.458), 52.5794, 14.0765)</l>
<l>            gen_rectangle1 (ROI_3, 238.5, 105.399, 460.5, 379.817)</l>
<l>            difference (ROI_3, ROI_3_V, Zona4)   </l>
<l>             reduce_domain (Zm, Zona4, Zmred)</l>
<l>            break</l>
<l>        case 5:</l>
<c>            * ROI Zona 5 </c>
<l>            gen_rectangle2 (ROI_4_V, 569.222, 1103.15, rad(175.834), 74.0691, 13.4783)       </l>
<l>            gen_rectangle1 (ROI_4, 460.5, 923.126, 668.5, 1208.59)</l>
<l>            difference (ROI_4, ROI_4_V, Zona5)      </l>
<l>             reduce_domain (Zm, Zona5, Zmred)</l>
<c>            </c>
<l>            break</l>
<l>        case 6:</l>
<c>            * ROI Zona 6       </c>
<l>            gen_rectangle2 (ROI_5_V, 564.034, 780.839, rad(-2.45367), 40.7856, 13.6907)       </l>
<l>            gen_rectangle1 (ROI_5, 452.286, 626.071, 664.7, 880.626)</l>
<l>            difference (ROI_5, ROI_5_V, Zona6)  </l>
<l>             reduce_domain (Zm, Zona6, Zmred)</l>
<l>            break</l>
<l>        case 7:</l>
<c>            </c>
<c>            * ROI Zona 7          </c>
<l>            gen_rectangle1 (ROI_6_V, 551.923, 394.417, 574.522, 436.446)</l>
<l>            gen_rectangle1 (ROI_6, 464.198, 304.585, 662.233, 530.565)</l>
<l>            difference (ROI_6, ROI_6_V, Zona7)</l>
<l>             reduce_domain (Zm, Zona7, Zmred)</l>
<l>            break</l>
<c>            </c>
<l>        case 8:</l>
<c>            </c>
<c>            * ROI Zona 8 </c>
<l>            gen_rectangle2 (ROI_7_V, 793.95, 1198.74, rad(-21.5997), 91.0931, 14.6335) </l>
<l>            gen_rectangle1 (ROI_7, 654.5, 1024.42, 900.5, 1278.58)</l>
<l>            difference (ROI_7, ROI_7_V, Zona8)    </l>
<l>             reduce_domain (Zm, Zona8, Zmred)</l>
<l>            break</l>
<c>            </c>
<c>            </c>
<l>        case 9:</l>
<c>            * ROI Zona 9</c>
<l>            gen_rectangle2 (ROI_8_V, 794.157, 930.719, rad(-34.4631), 72.4092, 13.1398)       </l>
<l>            gen_rectangle1 (ROI_8, 704.5, 823.673, 906.5, 1031.79)</l>
<l>            difference (ROI_8, ROI_8_V, Zona9)             </l>
<l>             reduce_domain (Zm, Zona9, Zmred)</l>
<l>            break</l>
<c>            </c>
<l>        case 10:</l>
<c>            * ROI Zona 10</c>
<l>            gen_rectangle2 (ROI_9_V, 792.944, 589.309, rad(105.6), 43.5091, 13.774)        </l>
<l>            gen_rectangle1 (ROI_9, 652.5, 462.694, 890.5, 687.385)</l>
<l>            difference (ROI_9, ROI_9_V, Zona10)    </l>
<l>             reduce_domain (Zm, Zona10, Zmred)</l>
<l>            break</l>
<c>            </c>
<l>        case 11:</l>
<c>            * ROI Zona 11</c>
<c>            </c>
<l>            gen_rectangle2 (ROI_10_V, 793.753, 216.915, rad(-137.654), 50.7761, 12.9132)       </l>
<l>            gen_rectangle1 (ROI_10, 670.5, 74.0899, 908.5, 333.773)</l>
<l>            difference (ROI_10, ROI_10_V, Zona11   )  </l>
<l>             reduce_domain (Zm, Zona11, Zmred)</l>
<l>            break</l>
<c>            </c>
<l>        endswitch</l>
<l>return ()</l>
</body>
<docu id="Get_Zona_ROI">
<parameters>
<parameter id="N_Localizador"/>
<parameter id="Zm"/>
<parameter id="Zmred"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Picture">
<interface>
<oo>
<par name="Zm" base_type="iconic" dimension="0"/>
<par name="ImgLeftCamera" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* Configuracion de Parametros</c>
<l>MinimumDisparity_Cam1:=-64</l>
<l>NumberOfDisparities_Cam1:= 128</l>
<c></c>
<l>Projector:='true'</l>
<l>FrontLigth:='true'</l>
<l>AutoExposure:='true'</l>
<l>AutoGain:='true'</l>
<l>Exposure := 1.5</l>
<l>Gain:=1</l>
<l>FlexView:=8</l>
<l>Config_Parametros_Cam_R1 (NxLib, Camera_1, NumberOfDisparities_Cam1, MinimumDisparity_Cam1, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure, FlexView, TempCam)</l>
<c></c>
<c></c>
<l>Adq_Imagen (ModelImage, NxLib, Camera_1)</l>
<c></c>
<c>*******************************************************************************        </c>
<l>* list_files ('D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Localizadores', 'files', Files)</l>
<l>*read_image (Image, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 2/ModelImage6181411.hobj')</l>
<c>*******************************************************************************         </c>
<l>dev_display (ModelImage)</l>
<c></c>
<l>Adq_XYZ_Img (ModelImage, Xm, Ym, Zm)</l>
<l>compose3 (Xm, Ym, Zm, MultiChannelImage)</l>
<l>select_obj(ModelImage, ImgLeftCamera, 1)</l>
<c></c>
<c>***********************************************************************</c>
<c>****** Guardo las Imagenes ********************************************</c>
<l>get_system_time (MSecond, Second, Minute, Hour, Day, YDay, Month, Year)</l>
<c></c>
<l>write_object (ModelImage, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Localizadores/ModelImage'+Month+Day+Hour+Second)</l>
<c>***********************************************************************</c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Picture">
<parameters>
<parameter id="Camera_1"/>
<parameter id="ImgLeftCamera"/>
<parameter id="NxLib"/>
<parameter id="Zm"/>
</parameters>
</docu>
</procedure>
<procedure name="Check_BasePose">
<interface>
<ic>
<par name="PoseForCalibrationPlate" base_type="ctrl" dimension="0"/>
<par name="ToolInCamPose" base_type="ctrl" dimension="0"/>
<par name="ToolInBasePose" base_type="ctrl" dimension="0"/>
<par name="Height" base_type="ctrl" dimension="0"/>
<par name="Width" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>       Get_Pose_Tool (SerialHandle, ToolInBasePose)</l>
<c>      </c>
<l>   *    create_pose (1780.63, 1568.38, 987.679, 180, 0, 0, 'Rp+T', 'abg', 'point', ToolInBasePose)</l>
<c>       </c>
<c>       </c>
<c>       </c>
<c>       </c>
<c>       </c>
<l>        dev_inspect_ctrl (ToolInBasePose)           </l>
<l>        read_pose ('C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/7.-HandEye/2. procilica/ToolInCamPose_Procilica.dat', \
                   ToolInCamPose)</l>
<l>        dev_inspect_ctrl (ToolInCamPose)</l>
<l>        pose_invert (ToolInCamPose, CamInToolPose)</l>
<c>        </c>
<l>        dev_inspect_ctrl (CamInToolPose)</l>
<l>        pose_invert (CamInToolPose, ToolInCamPose)</l>
<c>        </c>
<l> *       write_pose (ToolInCamPose, 'C:/Users/Usuario/Dropbox (MIRS)/1.-Servidor Desarrollo Software/7.-Magotteaux/7.-HandEye/2. procilica/ToolInCamPose_Procilica.dat')</l>
<c>        * ************************************************************************************************************</c>
<c>        * Lectura de Posicion de la herramienta del robot. Deberar ser por etehrnetIP</c>
<c>        * ************************************************************************************************************</c>
<c></c>
<c>        </c>
<c></c>
<l>ObjInCamPose := PoseForCalibrationPlate</l>
<c>        </c>
<l>        pose_invert (ToolInCamPose, CamInToolPose)</l>
<l>        pose_compose (ToolInBasePose, CamInToolPose, CamInBasePose)</l>
<l>        pose_compose (CamInBasePose, ObjInCamPose, ObjInBasePose)</l>
<l>        convert_pose_type (ObjInBasePose, 'Rp+T', 'abg', 'point', ObjInBasePose)</l>
<l>         dev_inspect_ctrl (ObjInBasePose)</l>
<c>         </c>
<l>         OsffetZ:=0</l>
<l>         ObjInBasePose[2]:=ObjInBasePose[2]+OsffetZ</l>
<c>    </c>
<c>        </c>
<l>        disp_cross (200000,  Height/2,Width/2, 1500, 0)</l>
<c>         </c>
<c>        * *************************************************************************************************************</c>
<c>        * Obtengo la posicion del objetpo a insertar, relativo a la herramienta.</c>
<c>        * ************************************************************************************************************       </c>
<l>*         Get_Pose_Punto_Insercion (PoseForCalibrationPlate, ToolInCamPose, ToolInBasePose, SerialHandle, ObjInBasePoseOut)</l>
<c>        </c>
<l>        Altura_Objetivo := 850</l>
<l>        Altura_Actual := PoseForCalibrationPlate[2]</l>
<l>        DeltaAltura := Altura_Actual-Altura_Objetivo</l>
<c>        </c>
<l>return ()</l>
</body>
<docu id="Check_BasePose">
<parameters>
<parameter id="Height"/>
<parameter id="PoseForCalibrationPlate"/>
<parameter id="SerialHandle"/>
<parameter id="ToolInBasePose"/>
<parameter id="ToolInCamPose"/>
<parameter id="Width"/>
</parameters>
</docu>
</procedure>
<procedure name="Bloque_1">
<interface>
<ic>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="_EV1_O_CmdDatos" base_type="ctrl" dimension="0"/>
<par name="Path_SFM_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_3D_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_CORE_ID" base_type="ctrl" dimension="0"/>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>        Estado:=19</l>
<l>        Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<c>        * Reseteo las variable de resultado</c>
<l>* #### Envio data de estado ########################</l>
<l>        Resultado:=0</l>
<l>        Procesando:=1</l>
<l>        Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<c>        </c>
<l>* #######################################################################################</l>
<c>        *1. *Si el pallet en 11, sigmifica que leo pallet 1</c>
<l>* #######################################################################################</l>
<c>        </c>
<l>        N_Pallet_to_Scan:=_EV1_O_CmdDatos-10</l>
<l>  *      N_Pallet_to_Scan:=1</l>
<l>* #################################################################</l>
<l>* ##### Base Datos#################################################</l>
<c>        * Vector que indica como esta distribuido los CORES en el pallet</c>
<c>        * -&gt; Esto debe estar ingresado por el operador. &lt;-</c>
<c>        * valor 0 es seccion A, 1B,2C...etc</c>
<l>* #################################################################</l>
<c>        </c>
<l>        BD_Dinamica (SerialHandle, Estado, Vector_Estado_Fx, Vector_ID_Core_by_Segment_Pallet_1, Vector_ID_Core_by_Segment_Pallet_2, Vector_ID_Core_by_Segment_Pallet_3, Vector_ID_Core_by_Segment_Pallet_4, Vector_ID_Core_by_Segment_Pallet_5, Vector_ID_Core_by_Segment_Pallet_6)</l>
<c>        </c>
<l>        Get_Core_Presence (SerialHandle, Vector_Estado_Fx, Vector_ID_Core_by_Segment_Pallet_1, Vector_ID_Core_by_Segment_Pallet_2, Vector_ID_Core_by_Segment_Pallet_3, Vector_ID_Core_by_Segment_Pallet_4, Path_SFM_Segmentos, Path_3D_Segmentos, Path_CORE_ID, N_Pallet_to_Scan, NxLib, Camera_1, Vector_ID_Core_by_Segment_Pallet_5, Vector_ID_Core_by_Segment_Pallet_6)</l>
<c>       </c>
<l>return ()</l>
</body>
<docu id="Bloque_1">
<parameters>
<parameter id="Camera_1"/>
<parameter id="NxLib"/>
<parameter id="Path_3D_Segmentos"/>
<parameter id="Path_CORE_ID"/>
<parameter id="Path_SFM_Segmentos"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="_EV1_O_CmdDatos"/>
</parameters>
</docu>
</procedure>
<procedure name="Bloque_3">
<interface>
<oo>
<par name="ModelImage" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
<par name="Z" base_type="iconic" dimension="0"/>
<par name="ImgLeftCamera" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Path_SFM_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_3D_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_CORE_ID" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="ObjectModel3D_Core_Pallet" base_type="ctrl" dimension="0"/>
<par name="SFM_Core_Pallet" base_type="ctrl" dimension="0"/>
<par name="Modelo3D_Select" base_type="ctrl" dimension="0"/>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
<par name="Cod_Core_ToUse" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>Mensaje:='Bloque 3 INICIADO.............'</l>
<l>Send_Data_Info (Mensaje, SerialHandle)</l>
<c>* </c>
<l>* #### Envio data de estado ########################</l>
<l>Procesando := 1</l>
<l>Resultado := 0</l>
<l>Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* # ################################################# </l>
<c>* Obtengo imagen del bloque a escanear</c>
<l>FOTO:=0</l>
<l>RepetirFoto:=true</l>
<l>while(RepetirFoto)</l>
<l>    RepetirFoto:=false</l>
<c>    </c>
<l>    Get_Image_Bloque3 (ModelImage, X, Y, Z, ImgLeftCamera, NxLib, Camera_1, Parametros_Visualizacion, Valores_Visualizacion,\
                       FOTO, WindowHandle, Cod_Core_ToUse, Escena3D_RAW)</l>
<l>    FOTO:=FOTO+1</l>
<l>    dev_disp_text ('Foto Numero -&gt; '+FOTO, 'window', 'top', 'left', 'black', [], [])</l>
<l>* ###################################################################</l>
<l>* #### para saber que Core debo utilizar debo consultar a la RAM BD</l>
<l>* ###################################################################</l>
<l>    Mensaje:='Capturo datos de la ram BD'</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<c>    </c>
<l>    Get_Core_ToUse_From_BDD (SerialHandle, Cod_Core_ToUse, Pallet_To_Scan, \
                             Segmento_To_Scan, PitutoExist, FXcheck)</l>
<c>    </c>
<c>    ** si no tengo datos de bbd salgo de la funcion. Previo envie estado de error        </c>
<l>    if (not FXcheck)</l>
<l>        Procesando := 0</l>
<l>        Resultado := 2</l>
<l>        Send_Data_Proceso (SerialHandle, Resultado, Procesando) </l>
<l>        return()</l>
<l>    endif</l>
<c>    </c>
<c>    </c>
<l>    Get_TipoEntidad (Cod_Core_ToUse, Entidad)</l>
<c>    </c>
<c>    </c>
<c>    ** Proteccion para no buscar pines</c>
<l>    if (Entidad)</l>
<c>        </c>
<l>* ####################################################################    </l>
<l>* ##### Paso la pose a CamInBasePose para virtualizar el ROI respecto#</l>
<l>* ##### al robot             #########################################</l>
<l>* ####################################################################   </l>
<c>        *Leo la pose de la esquina del pallet N</c>
<l>        NamePose:='Pallet_'+Pallet_To_Scan</l>
<l>        create_pose (0.1, 0.1, 0.1, 90, 90, 90, 'Rp+T', 'gba', 'point', Esquina_Pallet_Pose)</l>
<c>        </c>
<l>* ###################################################################    </l>
<l>* ######## Realizo el reconocimiento del patron #####################</l>
<l>* ################################################################### </l>
<c>        </c>
<l>        Vector_ID_Core_by_Segment_Palle_tofind:=Cod_Core_ToUse</l>
<l>        N_Pallet_to_Scan:=Pallet_To_Scan</l>
<l>        SegmentoPallet:=Segmento_To_Scan</l>
<l>        Pose_Esquina:=Esquina_Pallet_Pose</l>
<c>        </c>
<l>        Visualizar3D:=true</l>
<l>        Take_Core_In_Pallet (Z, X, Y, Escena3D_RAW, N_Pallet_to_Scan, Path_SFM_Segmentos, Path_3D_Segmentos, \
                             Vector_ID_Core_by_Segment_Palle_tofind, Path_CORE_ID, SerialHandle, Vector_Estado_Fx, \
                             Visualizar3D, SegmentoPallet, Pose_Esquina, PitutoExist, ObjectModel3D_Core_Pallet, SFM_Core_Pallet, \
                             Modelo3D_Select, WindowHandle, Estado_SubProceso_Get_Core_Presence_In_Pallet, RepetirFoto)</l>
<c>        </c>
<l>        RepetirFoto:=true</l>
<c>        </c>
<l>    else</l>
<c>   </c>
<c>        ***********************************************</c>
<c>        ******** ROI Altura ***************************</c>
<c>        ***********************************************</c>
<c>    </c>
<l>        Take_Sleeve_in_Pallet (Z, X, Y, ObjectModel3D_Core_Pallet, Escena3D_RAW, Parametros_Visualizacion, Valores_Visualizacion, SerialHandle, \
                               Estado_Funcion)</l>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<l>        RepetirFoto:=true </l>
<l>    endif</l>
<l>endwhile</l>
<l>return ()</l>
</body>
<docu id="Bloque_3">
<parameters>
<parameter id="Camera_1"/>
<parameter id="Cod_Core_ToUse"/>
<parameter id="ImgLeftCamera"/>
<parameter id="ModelImage"/>
<parameter id="Modelo3D_Select"/>
<parameter id="NxLib"/>
<parameter id="ObjectModel3D_Core_Pallet"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="Path_3D_Segmentos"/>
<parameter id="Path_CORE_ID"/>
<parameter id="Path_SFM_Segmentos"/>
<parameter id="SFM_Core_Pallet"/>
<parameter id="SerialHandle"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="WindowHandle"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Bloque_Localizadores">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c></c>
<c></c>
<l>Mensaje:='###### INICIO BLOQUE LOCALIZADORES ######'</l>
<l>Send_Data_Info (Mensaje, SerialHandle)</l>
<c></c>
<l>try</l>
<l>* #### Envio data de estado ########################</l>
<l>    Procesando := 1</l>
<l>    Resultado := 0</l>
<l>    Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* # ################################################# </l>
<c>    </c>
<l>*     N_Localizador:=10</l>
<l>    Tag_Lectura:='_EBD_I_SegmentoIr'         </l>
<l>    Read_EthernetIP_Data (Tag_Lectura, SerialHandle, N_Localizador)</l>
<c>    </c>
<l>    Get_Picture (Zm, ImgLeftCamera, NxLib, Camera_1)</l>
<c>    </c>
<l>* ##############################################</l>
<l>* #####  Make ROI ##############################        </l>
<l>    Get_Zona_ROI (Zm, Zmred, N_Localizador)</l>
<l>* #############################################       </l>
<c>    </c>
<l>    Get_AlturaLocalizador (Zmred, SerialHandle, AlturaLocalizador, Estado_Fx)</l>
<c>    </c>
<c>    </c>
<l>    if (Estado_Fx)</l>
<c>        </c>
<l>        if (AlturaLocalizador&lt; 990)</l>
<c>            </c>
<l>            Mensaje:='### ERROR ### Altura de Localizador Menor que Altura umbral -&gt; '+AlturaLocalizador +'[mm]'</l>
<l>            Send_Data_Info (Mensaje, SerialHandle)</l>
<l>* #### Envio data de estado ########################</l>
<l>            Procesando := 0</l>
<l>            Resultado := 2</l>
<l>            Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* # #################################################   </l>
<l>        else</l>
<l>            Delta:=5</l>
<l>            AlturaLocalizador:=AlturaLocalizador+Delta</l>
<l>            Mensaje:='Altura de Localizador Encontrada -&gt; '+AlturaLocalizador +' [mm] en Segmento -&gt;'+N_Localizador</l>
<l>            Send_Data_Info (Mensaje, SerialHandle)</l>
<c>            </c>
<c>            ***** Envio    informacion **************************       </c>
<l>            tagDestino:='_EV01_I_EjeZZ'</l>
<l>            ValorVariable:=AlturaLocalizador</l>
<l>            Send_EthernetIP_Data(tagDestino, ValorVariable, SerialHandle)</l>
<c>            </c>
<l>* #### Envio data de estado ########################</l>
<l>            Procesando := 0</l>
<l>            Resultado :=1</l>
<l>            Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* # ################################################# </l>
<c>            </c>
<l>        endif</l>
<l>    else</l>
<c>        </c>
<l>* #### Envio data de estado ########################</l>
<l>        Procesando := 0</l>
<l>        Resultado := 2</l>
<l>        Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* ################################################## </l>
<c>        </c>
<c>        </c>
<c>        </c>
<l>    endif</l>
<l>catch (Exception)</l>
<l>    Mensaje:='### ERROR ### Bloque Localizador '</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<l>    Send_Data_Error(Exception,SerialHandle,EstadoFx)</l>
<l>* #### Envio data de estado ########################</l>
<l>    Procesando := 0</l>
<l>    Resultado := 2</l>
<l>    Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* # #################################################   </l>
<l>endtry      </l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>Mensaje:='###### FIN  BLOQUE LOCALIZADORES ######'</l>
<l>Send_Data_Info (Mensaje, SerialHandle)</l>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Bloque_Localizadores">
<parameters>
<parameter id="Camera_1"/>
<parameter id="NxLib"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Bloque_Sprues">
<interface>
<ic>
<par name="_EV1_O_CmdDatos" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>        ********************************************************            </c>
<l>        N_Localizador :=50-_EV1_O_CmdDatos</l>
<c>        ********************************************************</c>
<c>       </c>
<l>        Get_SprueExistence (SerialHandle, Pattern, PosicionRack, ExisteEnRack)</l>
<c>        </c>
<c>        </c>
<l>        Tag_Lectura:='_EBD_I_PatternList'         </l>
<l>        Read_EthernetIP_Data (Tag_Lectura, SerialHandle, Pattern)</l>
<c>        </c>
<l>       TagDestino:='_EBD_I_SegmentoIr'</l>
<l>        Send_EthernetIP_Data(TagDestino,PosicionRack,SerialHandle)</l>
<c>        ********************************************</c>
<c>        * Peticion de RamSprue</c>
<c>        *********************************************</c>
<l>        PatternName:=Pattern</l>
<l>        Data:= 'O'        </l>
<l>        Set_SprueExistence (PatternName, Data, SerialHandle)</l>
<c>        </c>
<l>return ()</l>
</body>
<docu id="Bloque_Sprues">
<parameters>
<parameter id="SerialHandle"/>
<parameter id="_EV1_O_CmdDatos"/>
</parameters>
</docu>
</procedure>
<procedure name="Set_Core_Minus">
<interface>
<ic>
<par name="Cod_Core_ToUse" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="DataBdFull" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>    * </c>
<l>    Peticion := 'BaseDatos'</l>
<l>    Data := Peticion+';ActBdGlobal;'+Cod_Core_ToUse</l>
<c>    * </c>
<l>    write_serial (SerialHandle, ords(Data))</l>
<c>    * </c>
<l>    wait_seconds (0.2)</l>
<c>    * </c>
<c>    * Numero de caracteres a leer</c>
<l>    read_serial (SerialHandle, 120, Nchar)</l>
<l>    Nchar := chrt(Nchar)</l>
<c>    * </c>
<c>    * </c>
<c>    * </c>
<l>    tuple_split (Nchar, '#', DataBdFull)</l>
<c> </c>
<l>return ()</l>
</body>
<docu id="Set_Core_Minus">
<parameters>
<parameter id="Cod_Core_ToUse"/>
<parameter id="DataBdFull"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Set_MinusCores">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="FXcheck" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>FXcheck:=false</l>
<l>try</l>
<l>    Variable_BD := 'ram_actualproduction'</l>
<l>    Get_Pallet_BD (Variable_BD, SerialHandle, DataBD)</l>
<c>    * </c>
<l>    Cod_Core_ToUse := DataBD[3]</l>
<l>    Cod_Core_ToUseAux := DataBD[3]</l>
<l>    Pallet_To_Scan := DataBD[15]</l>
<l>    Segmento_To_Scan := DataBD[16]</l>
<c>    </c>
<l>    wait_seconds(0.1)</l>
<c>    </c>
<l>   Set_Core_Minus (Cod_Core_ToUse, SerialHandle, DataBdFull)</l>
<l>                Cod_Core_ToUse   := DataBdFull[0]</l>
<l>                Pallet_To_Scan   := DataBdFull[1]</l>
<l>                Segmento_To_Scan := DataBdFull[2]</l>
<l>                CantidadCore := DataBdFull[3]</l>
<c>   </c>
<l>*                 Tag:='_EV01_I_CoreSinStock'</l>
<l>*    Send_EthernetIP_Data(Tag,Cod_Core_ToUse,SerialHandle)</l>
<c>   </c>
<l>              if (Cod_Core_ToUse='-1' or Cod_Core_ToUse='-1' and Pallet_To_Scan='-1' and Segmento_To_Scan='-1' )</l>
<l>                    FXcheck:=false</l>
<l>                    Mensaje:='### ERROR ### -&gt; Entidad Requerida -&gt; '+Cod_Core_ToUseAux+'con 0 &lt;- RAM base DATOS no CARGADA.'</l>
<l>                    Send_Data_Info (Mensaje, SerialHandle)</l>
<l>                endif    </l>
<l>    FXcheck:=true</l>
<c>  </c>
<c>    </c>
<l>catch (Exception)</l>
<c>    </c>
<l>    Mensaje:='### ERROR ### -&gt; Entidad Requerida -&gt; '+Cod_Core_ToUse+' &lt;- RAM base DATOS no CARGADA.'</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<l>    Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<l>    FXcheck:=false</l>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="Set_MinusCores">
<parameters>
<parameter id="FXcheck"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Cores">
<interface>
<oc>
<par name="Cores" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>list_files ('D:/AI/Vision Artificial/4.-MAGOTTEAUX/SFM_CORES', 'directories', Archivos)</l>
<c>* </c>
<l>Cores := ''</l>
<l>for Index1 := 0 to |Archivos|-1 by 1</l>
<c>    * </c>
<l>    tuple_split (Archivos[Index1], '\\', CoreAux)</l>
<l>    largo_CoreAux := |CoreAux|</l>
<l>    Cores[Index1] := CoreAux[largo_CoreAux-1]</l>
<c>    * </c>
<l>endfor</l>
<l>return ()</l>
</body>
<docu id="Get_Cores">
<parameters>
<parameter id="Cores"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_TipoEntidad">
<interface>
<ic>
<par name="Cod_Core_ToUse" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Entidad" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>    tuple_strrstr (Cod_Core_ToUse, 'sleeve', Entidad)</l>
<c>    </c>
<l>     if (Entidad&lt;0)</l>
<l>         Entidad:=true</l>
<l>     else</l>
<l>          Entidad:=false        </l>
<l>     endif</l>
<l>return ()</l>
</body>
<docu id="Get_TipoEntidad">
<parameters>
<parameter id="Cod_Core_ToUse"/>
<parameter id="Entidad"/>
</parameters>
</docu>
</procedure>
<procedure name="Segmentar_Core">
<interface>
<io>
<par name="HeightMap" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
<par name="Z" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Entidad" base_type="iconic" dimension="0"/>
</oo>
<oc>
<par name="Estado_Funcion" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Estado_Funcion := false</l>
<c>* </c>
<l>try</l>
<c>    * </c>
<c>    * ********************************************************</c>
<c>    * 1.-  !!!!!!!!! threshols dinamico!!!!!!!!!!!!!!!!!!!!!!!!!!</c>
<c>    * ********************************************************</c>
<c>    </c>
<l>    UmbralMaxThr:=1600.0</l>
<l>    threshold (HeightMap, Region, 900, UmbralMaxThr)</l>
<l>    escala := 255.0/UmbralMaxThr</l>
<l>    scale_image (HeightMap, HeightMap_Scalada, escala, 0)</l>
<l>    threshold (HeightMap_Scalada, HeightMap_Region, 0, 255)</l>
<l>    gray_histo_range (HeightMap_Region, HeightMap_Scalada, 0, 255, 256, Histo, BinSize)</l>
<l>    tuple_sum (Histo, Sum_Histo)</l>
<c>    * </c>
<l>* # #########################################################</l>
<l>* # ### Mientras mas grabnde menos sensible a cambios #######   </l>
<l>    Mascara := 1</l>
<l>* # ########################################################</l>
<c>    * </c>
<l>    Vector_Distribucion := []</l>
<l>    init_vector := 255</l>
<l>    flag_vector := 0</l>
<l>    aux_suma := 0.0</l>
<c>    * </c>
<l>    for Index := init_vector to 0 by -1</l>
<c>        * </c>
<l>        Vector_Distribucion[Index] := aux_suma+Histo[Index]*100.0/ Sum_Histo</l>
<l>        aux_suma := Vector_Distribucion[Index]</l>
<l>    endfor</l>
<c>    * </c>
<l>    Derivada := []</l>
<l>    Factor_Der := 1000</l>
<l>    Mascara := 1</l>
<l>    for Index := init_vector to 50 by -Mascara</l>
<c>        * </c>
<l>        Derivada[Index] := abs(Vector_Distribucion[Index]-Vector_Distribucion[Index-Mascara])*Factor_Der</l>
<c>        * </c>
<l>    endfor</l>
<c>    * </c>
<c>    * </c>
<c>    * *********************************************************</c>
<c>    * * Busco el primer cambio brusco de posicion *************</c>
<c>    * * El umbral de cambio es Aux_Val_Max ********************</c>
<c>    * *********************************************************</c>
<l>    create_funct_1d_array (Derivada, Function)</l>
<c>    </c>
<c> **   dev_inspect_ctrl (Function)</c>
<c>    ************************************************************************************************</c>
<l>    Aux_Val_Max := 30000</l>
<c>*****************************************************************************************************</c>
<l>    Flag_indx_max := 255</l>
<l>    for Index := init_vector to 50 by -Mascara</l>
<c>        * </c>
<l>        if (Derivada[Index]&gt;Aux_Val_Max)</l>
<l>            Aux_Val_Max := Derivada[Index]</l>
<l>            Flag_indx_max := Index</l>
<l>        endif</l>
<c>        * </c>
<l>    endfor</l>
<c></c>
<l>* # #########################################################</l>
<l>* # ######## Grado de proteccion para moverse entre el </l>
<l>* # ####### histograma</l>
<l>    index_protection := 4</l>
<l>* # #########################################################</l>
<c>    * </c>
<l>    Alt_Min := 150</l>
<l>    Alt_Max := Flag_indx_max-index_protection</l>
<l>    threshold (HeightMap_Scalada, Entidad, Alt_Min, Alt_Max)</l>
<c></c>
<l>    Estado_Funcion := true</l>
<l>catch (Exception)</l>
<l>    Estado_Funcion := false</l>
<c>    * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = Fx_Aux.ErrorCatch(HDevExpDefaultException1);</c>
<c>    * </c>
<l>endtry</l>
<c>* </c>
<c>* </c>
<l>return ()</l>
</body>
<docu id="Segmentar_Core">
<parameters>
<parameter id="Entidad"/>
<parameter id="Estado_Funcion"/>
<parameter id="HeightMap"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="convert_tuple_to_string">
<interface>
<ic>
<par name="Tuple" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="TupleAsString" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>if (Tuple == [])</l>
<l>    TupleAsString := '[]'</l>
<l>else</l>
<l>    Strings := '' + Tuple</l>
<c>    * Escape strings with '</c>
<l>    IsString := is_string_elem(Tuple)</l>
<l>    if (sum(IsString) &gt; 0)</l>
<l>        Idx := find(IsString,1)</l>
<l>        Strings[Idx] := '\'' + Strings[Idx] + '\''</l>
<l>    endif</l>
<c>    * Concat to a long tuple</c>
<l>    TupleAsString := '[' + sum('' + Strings[0:|Strings| - 2] + ', ') + Strings[|Strings| - 1] + ']'</l>
<l>endif</l>
<l>return ()</l>
</body>
<docu id="convert_tuple_to_string">
<abstract lang="en_US">Convert a tuple to a string, similar to how it is displayed in HDevelop.</abstract>
<short lang="en_US">Convert a tuple to a readable string.</short>
<short lang="es_ES">Convert a tuple to a readable string.</short>
<parameters>
<parameter id="Tuple"/>
<parameter id="TupleAsString">
<default_type>string</default_type>
<multivalue>false</multivalue>
<sem_type>string</sem_type>
<type_list>
<item>string</item>
</type_list>
</parameter>
</parameters>
</docu>
</procedure>
<procedure name="NotZeroModel">
<interface>
<ic>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Escena3D_RAWOut" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Escena3D_RAWOut := Escena3D_RAW</l>
<l>            get_object_model_3d_params (Escena3D_RAWOut, 'bounding_box1', GenParamValue)</l>
<c>            </c>
<l>            x_min:=GenParamValue[0]</l>
<l>            y_min:=GenParamValue[1]</l>
<l>            z_min:=GenParamValue[2]</l>
<l>            x_max:=GenParamValue[3]</l>
<l>            y_max:=GenParamValue[4]</l>
<l>            z_max:=GenParamValue[5]</l>
<c>            </c>
<l>            select_points_object_model_3d (Escena3D_RAWOut, 'point_coord_z', 300, 2500, Escena3D_RAWOut)</l>
<l>return ()</l>
</body>
<docu id="NotZeroModel">
<parameters>
<parameter id="Escena3D_RAW"/>
<parameter id="Escena3D_RAWOut"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Pallet_BD_COPY_1">
<interface>
<ic>
<par name="Variable_BD" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="DataBD" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<l>wait_seconds (0.005)</l>
<l>try</l>
<c></c>
<l>    Peticion := 'BaseDatos'</l>
<l>    Data := Peticion+';'+Variable_BD</l>
<c></c>
<l>    write_serial (SerialHandle, ords(Data))</l>
<c></c>
<c></c>
<l>    VarSerial := 0</l>
<l>    while (VarSerial&lt;1)</l>
<c></c>
<c>        * Numero de caracteres a leer</c>
<l>        read_serial (SerialHandle, 100, Nchar)</l>
<l>        Nchar := chrt(Nchar)</l>
<l>        tuple_number (Nchar, Variable)</l>
<l>        VarSerial := |Nchar|</l>
<c></c>
<l>        tuple_split (Nchar, '#', Substrings)</l>
<l>        tuple_split (Substrings, '||', DataBD)</l>
<c></c>
<l>    endwhile</l>
<c></c>
<c></c>
<l>catch (Exception)</l>
<l>endtry</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Pallet_BD_COPY_1">
<parameters>
<parameter id="DataBD"/>
<parameter id="SerialHandle"/>
<parameter id="Variable_BD"/>
</parameters>
</docu>
</procedure>
<procedure name="Segmentar_Sleeve">
<interface>
<io>
<par name="HeightMap" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
<par name="Z" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Entidad" base_type="iconic" dimension="0"/>
</oo>
<oc>
<par name="Estado_Funcion" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Estado_Funcion := false</l>
<c>* </c>
<l>try</l>
<c>    * </c>
<c>    * ********************************************************</c>
<c>    * 1.-  !!!!!!!!! threshols dinamico!!!!!!!!!!!!!!!!!!!!!!!!!!</c>
<c>    * ********************************************************</c>
<c>    </c>
<l>    UmbralMaxThr:=1600.0</l>
<l>    threshold (HeightMap, Region, 900, UmbralMaxThr)</l>
<l>    escala := 255.0/UmbralMaxThr</l>
<l>    scale_image (HeightMap, HeightMap_Scalada, escala, 0)</l>
<l>    threshold (HeightMap_Scalada, HeightMap_Region, 0, 255)</l>
<l>    gray_histo_range (HeightMap_Region, HeightMap_Scalada, 0, 255, 256, Histo, BinSize)</l>
<l>    tuple_sum (Histo, Sum_Histo)</l>
<c>    * </c>
<l>* # #########################################################</l>
<l>* # ### Mientras mas grabnde menos sensible a cambios #######   </l>
<l>    Mascara := 1</l>
<l>* # ########################################################</l>
<c>    * </c>
<l>    Vector_Distribucion := []</l>
<l>    init_vector := 255</l>
<l>    flag_vector := 0</l>
<l>    aux_suma := 0.0</l>
<c>    * </c>
<l>    for Index := init_vector to 0 by -1</l>
<c>        * </c>
<l>        Vector_Distribucion[Index] := aux_suma+Histo[Index]*100.0/ Sum_Histo</l>
<l>        aux_suma := Vector_Distribucion[Index]</l>
<l>    endfor</l>
<c>    * </c>
<l>    Derivada := []</l>
<l>    Factor_Der := 10000</l>
<l>    Mascara := 1</l>
<l>    for Index := init_vector to 50 by -Mascara</l>
<c>        * </c>
<l>        Derivada[Index] := abs(Vector_Distribucion[Index]-Vector_Distribucion[Index-Mascara])*Factor_Der</l>
<c>        * </c>
<l>    endfor</l>
<c>    * </c>
<c>    * </c>
<c>    * *********************************************************</c>
<c>    * * Busco el primer cambio brusco de posicion *************</c>
<c>    * * El umbral de cambio es Aux_Val_Max ********************</c>
<c>    * *********************************************************</c>
<l>    create_funct_1d_array (Derivada, Function)</l>
<c>    </c>
<l> * dev_inspect_ctrl (Function)</l>
<c>    ************************************************************************************************</c>
<l>    Aux_Val_Max := 60000</l>
<c>    *****************************************************************************************************</c>
<c>   </c>
<l>    Flag_indx_max := 255</l>
<l>    for Index := init_vector to 50 by -Mascara</l>
<c>        * </c>
<l>        if (Derivada[Index]&gt;Aux_Val_Max)</l>
<l>            Aux_Val_Max := Derivada[Index]</l>
<l>            Flag_indx_max := Index</l>
<l>        endif</l>
<c>        * </c>
<l>    endfor</l>
<c></c>
<l>* # #########################################################</l>
<l>* # ######## Grado de proteccion para moverse entre el </l>
<l>* # ####### histograma</l>
<l>    index_protection := 20</l>
<l>* # #########################################################</l>
<c></c>
<l>    Alt_Min := 50</l>
<l>    Alt_Max := Flag_indx_max-index_protection</l>
<l>    threshold (HeightMap_Scalada, Entidad, Alt_Min, Alt_Max)</l>
<c></c>
<l>    Estado_Funcion := true</l>
<l>catch (Exception)</l>
<l>    Estado_Funcion := false</l>
<c>    * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = Fx_Aux.ErrorCatch(HDevExpDefaultException1);</c>
<c>    * </c>
<l>endtry</l>
<c>* </c>
<c>* </c>
<l>return ()</l>
</body>
<docu id="Segmentar_Sleeve">
<parameters>
<parameter id="Entidad"/>
<parameter id="Estado_Funcion"/>
<parameter id="HeightMap"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_Estado_Vision">
<interface>
<ic>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Estado" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c> * #### Envio data de estado ############################################         </c>
<c>           </c>
<l>            Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* ####################################################################### </l>
<l>return ()</l>
</body>
<docu id="Send_Estado_Vision">
<parameters>
<parameter id="Estado"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
</parameters>
</docu>
</procedure>
<procedure name="Histagram_Filter">
<interface>
<io>
<par name="HeightMap" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
<par name="Z" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Entidad" base_type="iconic" dimension="0"/>
</oo>
<oc>
<par name="Estado_Funcion" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Estado_Funcion := false</l>
<c></c>
<l>try</l>
<c></c>
<c>    * ********************************************************</c>
<c>    * 1.-  !!!!!!!!! threshols dinamico!!!!!!!!!!!!!!!!!!!!!!!!!!</c>
<c>    * ********************************************************</c>
<c></c>
<l>    UmbralMaxThr := 1600.0</l>
<l>    threshold (HeightMap, Region, 900, UmbralMaxThr)</l>
<l>    escala := 255.0/UmbralMaxThr</l>
<l>    scale_image (HeightMap, HeightMap_Scalada, escala, 0)</l>
<l>    threshold (HeightMap_Scalada, HeightMap_Region, 0, 255)</l>
<l>    gray_histo_range (HeightMap_Region, HeightMap_Scalada, 0, 255, 256, Histo, BinSize)</l>
<l>    tuple_sum (Histo, Sum_Histo)</l>
<c></c>
<l>* # #########################################################</l>
<l>* # ### Mientras mas grabnde menos sensible a cambios #######   </l>
<l>    Mascara := 1</l>
<l>* # ########################################################</l>
<c></c>
<l>    Vector_Distribucion := []</l>
<l>    init_vector := 255</l>
<l>    flag_vector := 0</l>
<l>    aux_suma := 0.0</l>
<c></c>
<l>    for Index := init_vector to 0 by -1</l>
<c></c>
<l>        Vector_Distribucion[Index] := aux_suma+Histo[Index]*100.0/ Sum_Histo</l>
<l>        aux_suma := Vector_Distribucion[Index]</l>
<l>    endfor</l>
<c></c>
<l>    Derivada := []</l>
<l>    Factor_Der := 1000</l>
<l>    Mascara := 1</l>
<l>    for Index := init_vector to 50 by -Mascara</l>
<c></c>
<l>        Derivada[Index] := abs(Vector_Distribucion[Index]-Vector_Distribucion[Index-Mascara])*Factor_Der</l>
<c></c>
<l>    endfor</l>
<c></c>
<c></c>
<c>    * *********************************************************</c>
<c>    * * Busco el primer cambio brusco de posicion *************</c>
<c>    * * El umbral de cambio es Aux_Val_Max ********************</c>
<c>    * *********************************************************</c>
<l>    create_funct_1d_array (Derivada, Function)</l>
<c></c>
<c>   **    dev_inspect_ctrl (Function)</c>
<c>    * ***********************************************************************************************</c>
<l>    Aux_Val_Max := 20000</l>
<c>    * ****************************************************************************************************</c>
<l>    Flag_indx_max := 255</l>
<l>    for Index := 50 to 255 by Mascara</l>
<c>* Busca el primer conjunto de elementos y sale</c>
<l>        if (Derivada[Index]&gt;Aux_Val_Max)</l>
<l>            Aux_Val_Max := Derivada[Index]</l>
<l>            Flag_indx_max := Index</l>
<l>            break</l>
<l>        endif</l>
<c></c>
<l>    endfor</l>
<c></c>
<l>* # #########################################################</l>
<l>* # ######## Grado de proteccion para moverse entre el </l>
<l>* # ####### histograma</l>
<l>    index_protection := 4</l>
<l>* # #########################################################</l>
<c></c>
<l>    Alt_Min := Flag_indx_max-index_protection</l>
<l>    Alt_Max := Flag_indx_max+index_protection</l>
<l>    threshold (HeightMap_Scalada, Entidad, Alt_Min, Alt_Max)</l>
<c></c>
<l>    Estado_Funcion := true</l>
<l>catch (Exception)</l>
<l>    Estado_Funcion := false</l>
<c>    * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = Fx_Aux.ErrorCatch(HDevExpDefaultException1);</c>
<c></c>
<l>endtry</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Histagram_Filter">
<parameters>
<parameter id="Entidad"/>
<parameter id="Estado_Funcion"/>
<parameter id="HeightMap"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Sub_Process_ImageCore">
<interface>
<io>
<par name="Z" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
</io>
<oc>
<par name="Estado_Funcion" base_type="ctrl" dimension="0"/>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>XOut := X</l>
<l>YOut := Y</l>
<l>    threshold (Z, Regions, 1000, 2000)</l>
<c>    </c>
<l>    reduce_domain (Z, Regions, Zre)</l>
<l>    connection (Regions, ConnectedRegions)   </l>
<l>    select_shape_std (ConnectedRegions, SelectedRegions, 'max_area', 90)</l>
<l>    dilation_circle (SelectedRegions, SelectedRegions, 15.5)</l>
<c>    </c>
<c>    </c>
<c></c>
<c>    </c>
<l>    reduce_domain (Z, SelectedRegions, Zred)  </l>
<l>    reduce_domain (XOut, SelectedRegions, XOut)</l>
<l>    reduce_domain (YOut, SelectedRegions, YOut)</l>
<l>    dev_display (Zred)</l>
<c>    </c>
<l>    Histagram_Filter (Zred, XOut, YOut, Zred, Entidad, Estado_Funcion)</l>
<c>    </c>
<l>    connection (Entidad, ConnectedRegions)   </l>
<l>    select_shape_std (ConnectedRegions, SelectedRegions, 'max_area', 90)</l>
<l>    dilation_circle (SelectedRegions, SelectedRegions, 10.5)</l>
<l>    reduce_domain (Z, SelectedRegions, Zred)  </l>
<l>    reduce_domain (XOut, SelectedRegions, XOut)</l>
<l>    reduce_domain (YOut, SelectedRegions, YOut)</l>
<c>     </c>
<l>    xyz_to_object_model_3d (XOut, YOut, Zred, Escena3D_RAW)</l>
<l>return ()</l>
</body>
<docu id="Sub_Process_ImageCore">
<parameters>
<parameter id="Escena3D_RAW"/>
<parameter id="Estado_Funcion"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Core_ToUse">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Cod_Core_ToUse" base_type="ctrl" dimension="0"/>
<par name="FXcheck" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>FXcheck := false</l>
<l>try</l>
<l>    Variable_BD := 'ram_actualproduction'</l>
<l>    Get_Pallet_BD (Variable_BD, SerialHandle, DataBD)</l>
<c></c>
<l>    Cod_Core_ToUse := DataBD[3]</l>
<l>    Cod_Core_ToUseAux := DataBD[3]</l>
<l>    Pallet_To_Scan := DataBD[15]</l>
<l>    Segmento_To_Scan := DataBD[16]</l>
<l>    PitutoExist := DataBD[5]</l>
<c></c>
<c></c>
<l>    FXcheck := true</l>
<c></c>
<c></c>
<l>catch (Exception)</l>
<c></c>
<l>    Mensaje := '### ERROR ### -&gt; Entidad Requerida -&gt; '+Cod_Core_ToUse+' &lt;- RAM base DATOS no CARGADA.'</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<l>    Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<l>    FXcheck := false</l>
<l>endtry</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Core_ToUse">
<parameters>
<parameter id="Cod_Core_ToUse"/>
<parameter id="FXcheck"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Segmentar_Sleeve_COPY_1">
<interface>
<io>
<par name="HeightMap" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
<par name="Z" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Entidad" base_type="iconic" dimension="0"/>
</oo>
<oc>
<par name="Estado_Funcion" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Estado_Funcion := false</l>
<c></c>
<l>try</l>
<c></c>
<c>    * ********************************************************</c>
<c>    * 1.-  !!!!!!!!! threshols dinamico!!!!!!!!!!!!!!!!!!!!!!!!!!</c>
<c>    * ********************************************************</c>
<c></c>
<l>    UmbralMaxThr := 1600.0</l>
<l>    threshold (HeightMap, Region, 900, UmbralMaxThr)</l>
<l>    escala := 255.0/UmbralMaxThr</l>
<l>    scale_image (HeightMap, HeightMap_Scalada, escala, 0)</l>
<l>    threshold (HeightMap_Scalada, HeightMap_Region, 0, 255)</l>
<l>    gray_histo_range (HeightMap_Region, HeightMap_Scalada, 0, 255, 256, Histo, BinSize)</l>
<l>    tuple_sum (Histo, Sum_Histo)</l>
<c></c>
<l>* # #########################################################</l>
<l>* # ### Mientras mas grabnde menos sensible a cambios #######   </l>
<l>    Mascara := 1</l>
<l>* # ########################################################</l>
<c></c>
<l>    Vector_Distribucion := []</l>
<l>    init_vector := 255</l>
<l>    flag_vector := 0</l>
<l>    aux_suma := 0.0</l>
<c></c>
<l>    for Index := init_vector to 0 by -1</l>
<c></c>
<l>        Vector_Distribucion[Index] := aux_suma+Histo[Index]*100.0/ Sum_Histo</l>
<l>        aux_suma := Vector_Distribucion[Index]</l>
<l>    endfor</l>
<c></c>
<l>    Derivada := []</l>
<l>    Factor_Der := 10000</l>
<l>    Mascara := 1</l>
<l>    for Index := init_vector to 50 by -Mascara</l>
<c></c>
<l>        Derivada[Index] := abs(Vector_Distribucion[Index]-Vector_Distribucion[Index-Mascara])*Factor_Der</l>
<c></c>
<l>    endfor</l>
<c></c>
<c></c>
<c>    * *********************************************************</c>
<c>    * * Busco el primer cambio brusco de posicion *************</c>
<c>    * * El umbral de cambio es Aux_Val_Max ********************</c>
<c>    * *********************************************************</c>
<l>    create_funct_1d_array (Derivada, Function)</l>
<c></c>
<l>*     dev_inspect_ctrl (Function)</l>
<c>    * ***********************************************************************************************</c>
<l>    Aux_Val_Max := 60000</l>
<c>    * ****************************************************************************************************</c>
<l>    Flag_indx_max := 255</l>
<l>    for Index := init_vector to 50 by -Mascara</l>
<c></c>
<l>        if (Derivada[Index]&gt;Aux_Val_Max)</l>
<l>            Aux_Val_Max := Derivada[Index]</l>
<l>            Flag_indx_max := Index</l>
<l>        endif</l>
<c></c>
<l>    endfor</l>
<c></c>
<l>* # #########################################################</l>
<l>* # ######## Grado de proteccion para moverse entre el </l>
<l>* # ####### histograma</l>
<l>    index_protection := 20</l>
<l>* # #########################################################</l>
<c></c>
<l>    Alt_Min := 50</l>
<l>    Alt_Max := Flag_indx_max-index_protection</l>
<l>    threshold (HeightMap_Scalada, Entidad, Alt_Min, Alt_Max)</l>
<c></c>
<c></c>
<l>    Estado_Funcion := true</l>
<l>catch (Exception)</l>
<l>    Estado_Funcion := false</l>
<c>    * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = Fx_Aux.ErrorCatch(HDevExpDefaultException1);</c>
<c></c>
<l>endtry</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Segmentar_Sleeve_COPY_1">
<parameters>
<parameter id="Entidad"/>
<parameter id="Estado_Funcion"/>
<parameter id="HeightMap"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="NotZeroModel_3D">
<interface>
<ic>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Escena3D_RAWOut" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Escena3D_RAWOut := Escena3D_RAW</l>
<l>get_object_model_3d_params (Escena3D_RAWOut, 'bounding_box1', GenParamValue)</l>
<c></c>
<l>x_min := GenParamValue[0]</l>
<l>y_min := GenParamValue[1]</l>
<l>z_min := GenParamValue[2]</l>
<l>x_max := GenParamValue[3]</l>
<l>y_max := GenParamValue[4]</l>
<l>z_max := GenParamValue[5]</l>
<c></c>
<l>select_points_object_model_3d (Escena3D_RAWOut, 'point_coord_z', 500, 2500, Escena3D_RAWOut)</l>
<l>return ()</l>
</body>
<docu id="NotZeroModel_3D">
<parameters>
<parameter id="Escena3D_RAW"/>
<parameter id="Escena3D_RAWOut"/>
</parameters>
</docu>
</procedure>
<procedure name="Take_Sleeve_in_Pallet">
<interface>
<io>
<par name="Z" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="ObjectModel3D_Core_Pallet" base_type="ctrl" dimension="0"/>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Estado_Funcion" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>        Segmentar_Sleeve (Z, X, Y, Z, RegionSleeve, Estado_Funcion)</l>
<c>        </c>
<l>        dev_get_window (WindowHandle)</l>
<c></c>
<l>        connection (RegionSleeve, ConnectedRegions)</l>
<l>        select_shape_std (ConnectedRegions, SelectedRegions, 'max_area', 90)</l>
<l>*         erosion_circle (RegionSleeve, RegionErosion, 8.5)</l>
<c></c>
<l>        connect_and_holes (SelectedRegions, NumConnected, NumHoles)</l>
<l>        complement (RegionSleeve, RegionComplement)</l>
<l>        connect_and_holes (RegionComplement, NumConnectedComplement, NumHolesComplement)</l>
<c>        </c>
<l>        connection (RegionComplement, ConnectedRegions1)</l>
<c>        </c>
<l>        select_shape (ConnectedRegions1, SelectedRegions1, ['circularity','area'], 'and', [0.6,10e3], [0.99,200e3])</l>
<l>        select_shape_std (SelectedRegions1, SelectedRegions2, 'max_area', 90)</l>
<c>        </c>
<l>        erosion_circle (SelectedRegions2, SelectedRegions2, 15.5)</l>
<l>        reduce_domain (Z, SelectedRegions2, Zred)</l>
<l>        reduce_domain (Y, SelectedRegions2, Yred)</l>
<l>        reduce_domain (X, SelectedRegions2, Xred)</l>
<c>        </c>
<l>        xyz_to_object_model_3d (Xred, Yred, Zred, ObjectModel3D)</l>
<l>        NotZeroModel_3D (ObjectModel3D, ObjectModel3D)</l>
<c>        </c>
<c>      </c>
<l>        smooth_object_model_3d (ObjectModel3D, 'mls', 'mls_kNN', 200, SmoothObjectModel3D)</l>
<c>        </c>
<l>        get_object_model_3d_params (SmoothObjectModel3D, 'bounding_box1', BoxSlevee)</l>
<l>        get_object_model_3d_params (SmoothObjectModel3D, 'center', Centro)</l>
<c>        </c>
<l>        get_object_model_3d_params (ObjectModel3D_Core_Pallet, 'bounding_box1', Sleeve3DBox)</l>
<c>        </c>
<c>        </c>
<c>        ***************************************************************************************      </c>
<l>        ZMinBase:=BoxSlevee[5]</l>
<c>        </c>
<l>        AltoNominal:=Sleeve3DBox[5]-Sleeve3DBox[2]</l>
<l>        tuple_abs (AltoNominal, AltoNominal)</l>
<c>        </c>
<l>        ZSleeve:=ZMinBase+AltoNominal*0.5</l>
<c>        </c>
<l>        PosX:=Centro[0]</l>
<l>        PosY:=Centro[1]</l>
<l>        PosZ:=ZSleeve</l>
<c>        </c>
<l>        create_pose (PosX, PosY, PosZ, 0, 0, 0, 'Rp+T', 'gba', 'point', PosicionSleeve)        </l>
<c>        ***********************************************</c>
<c>        * Delimitar falsos Positivos </c>
<c>        ***********************************************</c>
<c>        </c>
<c> *** - &gt;        Send_Data_To_Robot (PosicionSleeve, SerialHandle)</c>
<c>        </c>
<c>        ************************************************</c>
<c>   </c>
<l>        dev_display (Z)</l>
<l>        dev_display (SelectedRegions2)</l>
<c>        </c>
<l>        clear_object_model_3d ([ObjectModel3D,SmoothObjectModel3D])</l>
<c>        </c>
<l>return ()</l>
</body>
<docu id="Take_Sleeve_in_Pallet">
<parameters>
<parameter id="Escena3D_RAW"/>
<parameter id="Estado_Funcion"/>
<parameter id="ObjectModel3D_Core_Pallet"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="SerialHandle"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_3dModel_Core">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Path_CORE_ID" base_type="ctrl" dimension="0"/>
<par name="Path_3D_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_SFM_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
</ic>
<oc>
<par name="ObjectModel3D_Core_Pallet" base_type="ctrl" dimension="0"/>
<par name="SFM_Core_Pallet" base_type="ctrl" dimension="0"/>
<par name="Modelo3D_Select" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>    Get_Core_ToUse (SerialHandle, Cod_Core_ToUse, FXcheck)</l>
<c>    </c>
<l>    DerivadaCore[1]:=Cod_Core_ToUse</l>
<l>    if ( DerivadaCore[1] != DerivadaCore[0])</l>
<c>        </c>
<l>        tuple_strrstr (Cod_Core_ToUse, 'sleeve', Sleeve)</l>
<l>        tuple_strrstr (Cod_Core_ToUse, 'PIN', PIN)</l>
<l>        tuple_strrstr (Cod_Core_ToUse, 'LOC', LOC)</l>
<l>        tuple_strrstr (Cod_Core_ToUse, 'SPRUE', SPRUE)</l>
<c>        </c>
<l>        if (Sleeve =-1 and PIN=-1 and LOC=-1 and SPRUE=-1)</l>
<c>            </c>
<l>                    Get_SFM_STL (Cod_Core_ToUse, Path_CORE_ID, Path_3D_Segmentos, Path_SFM_Segmentos, Vector_Estado_Fx, SerialHandle,\
                     ObjectModel3D_Core_Pallet, SFM_Core_Pallet, Estado_Get_SFM_STL, Modelo3D_Select) </l>
<l>        endif</l>
<c>        </c>
<l>    endif</l>
<c>    </c>
<l>    DerivadaCore[0]:=DerivadaCore[1]</l>
<l>return ()</l>
</body>
<docu id="Get_3dModel_Core">
<parameters>
<parameter id="Modelo3D_Select"/>
<parameter id="ObjectModel3D_Core_Pallet"/>
<parameter id="Path_3D_Segmentos"/>
<parameter id="Path_CORE_ID"/>
<parameter id="Path_SFM_Segmentos"/>
<parameter id="SFM_Core_Pallet"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
</parameters>
</docu>
</procedure>
<procedure name="Find_Entity_3D_Image">
<interface>
<io>
<par name="Z" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="N_matches" base_type="ctrl" dimension="0"/>
<par name="SFM" base_type="ctrl" dimension="0"/>
<par name="Modelo_imagen_3d" base_type="ctrl" dimension="0"/>
<par name="Sampling_Find" base_type="ctrl" dimension="0"/>
<par name="Keypoint" base_type="ctrl" dimension="0"/>
<par name="MinScore" base_type="ctrl" dimension="0"/>
<par name="Perno_Ref_Cam0" base_type="ctrl" dimension="0"/>
<par name="Modelo_3D_ROI_ThresEdges" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="PoseMLS" base_type="ctrl" dimension="0"/>
<par name="ScoreMLS" base_type="ctrl" dimension="0"/>
<par name="PoseREFIN" base_type="ctrl" dimension="0"/>
<par name="ScoreREFIN" base_type="ctrl" dimension="0"/>
<par name="SurfaceMatchingResultID1" base_type="ctrl" dimension="0"/>
<par name="ObjectModel3DResultMLS" base_type="ctrl" dimension="0"/>
<par name="ObjectModel3DResultMLS_REFIN" base_type="ctrl" dimension="0"/>
<par name="Estado_Funcion" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* </c>
<l>Estado_Funcion := true</l>
<l>try</l>
<c>    * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = "Buscando Objeto";</c>
<c>    * </c>
<c>    * ***************************************</c>
<c>    * 1.Parametros de control</c>
<c>    * ***************************************</c>
<l>    GenParamName := ['num_matches','scene_normal_computation','pose_ref_scoring_dist_rel','score_type','3d_edges']</l>
<l>    GenParamValue := [N_matches   ,          'mls'           ,   0.01         ,'model_point_fraction' ,Modelo_3D_ROI_ThresEdges]</l>
<c>    </c>
<c></c>
<l>  read_image (Image, 'D:/20-Imagenes Produccion/GRISES/ModelImageGRIS1.hobj')</l>
<l>  select_obj (Image, Image, 1)</l>
<c>  </c>
<c>  </c>
<l>  reduce_domain (Image, Z, Image)</l>
<c>  </c>
<c>    * ***************************************</c>
<c>    * 2.Busqueda de entidad</c>
<c>    * ***************************************</c>
<l>    read_cam_par ('C:/Users/Usuario/Dropbox (MIRS)/1.-Servidor Desarrollo Software/7.-Magotteaux/7.-HandEye/1.- Ensenso R1/CamParamBase', CameraParam)</l>
<l>    set_surface_model_param (SFM, 'camera_parameter', CameraParam)</l>
<l>    create_pose (0, 0, 0, 0, 0, 0, 'Rp+T', 'gba', 'point', CameraPose)</l>
<l>set_surface_model_param (SFM, 'camera_pose', CameraPose)</l>
<c></c>
<c></c>
<l>    find_surface_model_image (Image, SFM, Modelo_imagen_3d, Sampling_Find, \
                              Keypoint, MinScore, 'false', GenParamName, GenParamValue, \
                              PoseMLS, ScoreMLS, SurfaceMatchingResultID1)</l>
<c>  </c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>     find_surface_model (SFM, Modelo_imagen_3d, Sampling_Find,\
                        Keypoint, MinScore, 'true', GenParamName,\
                        GenParamValue, PoseMLS, ScoreMLS, SurfaceMatchingResultID1)</l>
<c>    * ***************************************</c>
<l>    if (|PoseMLS|)</l>
<c>        </c>
<c>        </c>
<c>        * 3.Refinar busqueda</c>
<c>        * ***************************************</c>
<l>        refine_surface_model_pose (SFM, Modelo_imagen_3d, PoseMLS, 0, 'false', 'pose_ref_sub_sampling', 2, PoseREFIN, ScoreREFIN, SurfaceMatchingResultIDPose)</l>
<c>        * ***************************************</c>
<c>        * 4.Translacion de objeto</c>
<c>        * ***************************************</c>
<c></c>
<l>        rigid_trans_object_model_3d (Perno_Ref_Cam0, PoseMLS, ObjectModel3DResultMLS)</l>
<l>        rigid_trans_object_model_3d (Perno_Ref_Cam0, PoseREFIN, ObjectModel3DResultMLS_REFIN)</l>
<c>        * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = "Objeto encontrado con una PROBABILIDAD de " + hv_ScoreMLS*100.ToString() ;</c>
<l>        Estado_Funcion := true</l>
<l>        return()</l>
<c>        </c>
<l>    endif</l>
<c>    </c>
<l>    Estado_Funcion := false</l>
<l>catch (Exception)</l>
<c>       </c>
<l>    Estado_Funcion := false</l>
<c>    * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = Fx_Aux.ErrorCatch(HDevExpDefaultException1);</c>
<c>    * </c>
<l>endtry</l>
<c>* </c>
<c>* </c>
<l>return ()</l>
</body>
<docu id="Find_Entity_3D_Image">
<parameters>
<parameter id="Estado_Funcion"/>
<parameter id="Keypoint"/>
<parameter id="MinScore"/>
<parameter id="Modelo_3D_ROI_ThresEdges"/>
<parameter id="Modelo_imagen_3d"/>
<parameter id="N_matches"/>
<parameter id="ObjectModel3DResultMLS"/>
<parameter id="ObjectModel3DResultMLS_REFIN"/>
<parameter id="Perno_Ref_Cam0"/>
<parameter id="PoseMLS"/>
<parameter id="PoseREFIN"/>
<parameter id="SFM"/>
<parameter id="Sampling_Find"/>
<parameter id="ScoreMLS"/>
<parameter id="ScoreREFIN"/>
<parameter id="SurfaceMatchingResultID1"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Find_Entity_3D_COPY_1">
<interface>
<ic>
<par name="N_matches" base_type="ctrl" dimension="0"/>
<par name="SFM" base_type="ctrl" dimension="0"/>
<par name="Modelo_imagen_3d" base_type="ctrl" dimension="0"/>
<par name="Sampling_Find" base_type="ctrl" dimension="0"/>
<par name="Keypoint" base_type="ctrl" dimension="0"/>
<par name="MinScore" base_type="ctrl" dimension="0"/>
<par name="Perno_Ref_Cam0" base_type="ctrl" dimension="0"/>
<par name="Modelo_3D_ROI_ThresEdges" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="PoseMLS" base_type="ctrl" dimension="0"/>
<par name="ScoreMLS" base_type="ctrl" dimension="0"/>
<par name="PoseREFIN" base_type="ctrl" dimension="0"/>
<par name="ScoreREFIN" base_type="ctrl" dimension="0"/>
<par name="SurfaceMatchingResultID1" base_type="ctrl" dimension="0"/>
<par name="ObjectModel3DResultMLS" base_type="ctrl" dimension="0"/>
<par name="ObjectModel3DResultMLS_REFIN" base_type="ctrl" dimension="0"/>
<par name="Estado_Funcion" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>Estado_Funcion := true</l>
<l>try</l>
<c>    * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = "Buscando Objeto";</c>
<c></c>
<c>    * ***************************************</c>
<c>    * 1.Parametros de control</c>
<c>    * ***************************************</c>
<l>    GenParamName := ['num_matches','scene_normal_computation','pose_ref_scoring_dist_rel','score_type','3d_edges']</l>
<l>    GenParamValue := [N_matches   ,          'mls'           ,   0.01         ,'model_point_fraction' ,Modelo_3D_ROI_ThresEdges]</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c>    * ***************************************</c>
<c>    * 2.Busqueda de entidad</c>
<c>    * ***************************************</c>
<l>    find_surface_model (SFM, Modelo_imagen_3d, Sampling_Find, Keypoint, MinScore, 'true', GenParamName, GenParamValue, PoseMLS, ScoreMLS, SurfaceMatchingResultID1)</l>
<c>    * ***************************************</c>
<l>    if (|PoseMLS|)</l>
<c></c>
<c></c>
<c>        * 3.Refinar busqueda</c>
<c>        * ***************************************</c>
<l>        refine_surface_model_pose (SFM, Modelo_imagen_3d, PoseMLS, 0, 'false', 'pose_ref_sub_sampling', 2, PoseREFIN, ScoreREFIN, SurfaceMatchingResultIDPose)</l>
<c>        * ***************************************</c>
<c>        * 4.Translacion de objeto</c>
<c>        * ***************************************</c>
<c></c>
<l>        rigid_trans_object_model_3d (Perno_Ref_Cam0, PoseMLS, ObjectModel3DResultMLS)</l>
<l>        rigid_trans_object_model_3d (Perno_Ref_Cam0, PoseREFIN, ObjectModel3DResultMLS_REFIN)</l>
<c>        * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = "Objeto encontrado con una PROBABILIDAD de " + hv_ScoreMLS*100.ToString() ;</c>
<l>        Estado_Funcion := true</l>
<l>        return ()</l>
<c></c>
<l>    endif</l>
<c></c>
<l>    Estado_Funcion := false</l>
<l>catch (Exception)</l>
<c></c>
<l>    Estado_Funcion := false</l>
<c>    * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = Fx_Aux.ErrorCatch(HDevExpDefaultException1);</c>
<c></c>
<l>endtry</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Find_Entity_3D_COPY_1">
<parameters>
<parameter id="Estado_Funcion"/>
<parameter id="Keypoint"/>
<parameter id="MinScore"/>
<parameter id="Modelo_3D_ROI_ThresEdges"/>
<parameter id="Modelo_imagen_3d"/>
<parameter id="N_matches"/>
<parameter id="ObjectModel3DResultMLS"/>
<parameter id="ObjectModel3DResultMLS_REFIN"/>
<parameter id="Perno_Ref_Cam0"/>
<parameter id="PoseMLS"/>
<parameter id="PoseREFIN"/>
<parameter id="SFM"/>
<parameter id="Sampling_Find"/>
<parameter id="ScoreMLS"/>
<parameter id="ScoreREFIN"/>
<parameter id="SurfaceMatchingResultID1"/>
</parameters>
</docu>
</procedure>
</hdevelop>
