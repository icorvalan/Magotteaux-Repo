<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.1.1">
<procedure name="main">
<interface/>
<body>
<c></c>
<c></c>
<c></c>
<c></c>
<l>Parametros_Visualizacion:=['colored','disp_pose','point_size']</l>
<l>Valores_Visualizacion:= [  12  ,'true',1]</l>
<l>CameraActive:=[1,1]</l>
<l>ReintentosConecionEstereo:=0</l>
<l>open_serial ('COM100', SerialHandle)</l>
<l>set_serial_param (SerialHandle, 115200, 8, 'none', 'none', 1, 20, 'unchanged')</l>
<c></c>
<c>***************************************************</c>
<l>Find_SerialBridge(SerialHandle)</l>
<c>***************************************************</c>
<l>global tuple g_CamInBasePose1</l>
<l>global tuple g_CamInBasePose2</l>
<c></c>
<c></c>
<l>create_pose (0, 0, 0, 0, 0, 0, 'Rp+T', 'gba', 'point', g_CamInBasePose1)</l>
<l>create_pose (0, 0, 0, 0, 0, 0, 'Rp+T', 'gba', 'point', g_CamInBasePose2)</l>
<c></c>
<l>Get_Vector_Estados (Vector_Estado_Fx)</l>
<c></c>
<l>* # FUNCIONES EXTERNAS A LOS BLOQUES  </l>
<c></c>
<c>******************************************</c>
<c>* 0.CAPTURO EL MODELO 3D  DE LA CAMRA 1</c>
<c>******************************************</c>
<c></c>
<c></c>
<c>***********************************************************</c>
<c>* 1.1- Conexion de Ensenso</c>
<c>***********************************************************</c>
<c></c>
<c></c>
<l>Get_Available_EstereoCam (SerialHandle)</l>
<c></c>
<c></c>
<l>Conectar_Ensenso_N35_SendMsj (24001, SerialHandle, NxLib, Camera_1, Conexion_Camara)</l>
<c></c>
<c></c>
<l>if (not Conexion_Camara)</l>
<l>    get_CameraEstereoConection (Conexion_Camara, NxLib, SerialHandle, ReintentosConecionEstereo, \
                                NxLib, Camera_1, Conexion_Camara)</l>
<l>endif</l>
<c></c>
<c></c>
<c></c>
<l>if (ReintentosConecionEstereo&gt;=3)</l>
<l>    CameraActive[0]:=0</l>
<l>else</l>
<l>    Send_Data_Info('-&gt; Camara Estereo R1 Conectada &lt;-',SerialHandle)</l>
<l>endif</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c>****************************************************************************</c>
<c>* 1.2- Conexion de Procilica GT</c>
<c>****************************************************************************</c>
<c></c>
<c>*Funcion que configura la camara Procilica</c>
<l>Set_Config_Cam (AcqHandle_Cam_0, Camera0_Parameters, Camera0_Pose, Conexion_Camara_0, CalTabFile)</l>
<c></c>
<l>Get_OpticaConection (Conexion_Camara_0, SerialHandle, ReintentosConexionOptica, \
                     AcqHandle_Cam_0, Camera0_Parameters, Camera0_Pose, Conexion_Camara_0, CalTabFile)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>if (ReintentosConexionOptica&gt;=3)</l>
<l>    CameraActive[1]:=0</l>
<l>else</l>
<l>    Send_Data_Info('-&gt; Camara Optica R1 Conectada &lt;-',SerialHandle)</l>
<l>endif</l>
<c>****************************************************************************</c>
<c>* Funciones de adquisicion</c>
<c>****************************************************************************</c>
<l>if (CameraActive[0] and CameraActive[1])</l>
<c>    </c>
<l>* #########################################################################</l>
<c>    * Configuracion de Parametros</c>
<l>    MinimumDisparity_Cam1:=-68</l>
<l>    NumberOfDisparities_Cam1:= 64</l>
<l>    Projector:='true'</l>
<l>    FrontLigth:='true'</l>
<l>    AutoExposure:='true'</l>
<l>    AutoGain:='false'</l>
<l>    Exposure := 1</l>
<l>    Gain:=1</l>
<l>    FlexView:=1</l>
<l>    Config_Parametros_Cam_R1 (NxLib, Camera_1, NumberOfDisparities_Cam1, MinimumDisparity_Cam1, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure, FlexView, TempCam)</l>
<c>    </c>
<l>* ################ Capturo la Imagen ########################################</l>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    ** set_framegrabber_param (NxLib, 'do_execute', 'EstimateDisparitySettings')</c>
<c>    </c>
<l>    Get_Img_Camera_R1 (ModelImage, Xm, Ym, Zm, ImgLeftCamera_1, NxLib, Camera_1, Escena3D_RAW)</l>
<c>    </c>
<c>    </c>
<l>    Time:=300000</l>
<l>    Gain:=20.0</l>
<l>    Set_exposure_Time_cam_0 (AcqHandle_Cam_0, Time, Gain)</l>
<l>    Get_Image (Image, AcqHandle_Cam_0, g_Error_CamaraOpt_Adq)</l>
<c>    </c>
<c>    </c>
<c>    *****************************************************************************</c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    *****************************************************************************</c>
<c>    *                         CONSULTA A BD</c>
<c>    *          FUNCION QUE LEE LOS ARCHIVOS STL DE LOS CORES.</c>
<c>    ******************************************************************************</c>
<l>* ############################################################################</l>
<l>    Get_Cores_BD (Path_CORE_ID, Path_SFM_Segmentos, Path_3D_Segmentos)           </l>
<l>* ############################################################################</l>
<c>    </c>
<c>    ******************************************************************************</c>
<c>    *                       FIN DE INICIALIZACIONES</c>
<c>    ******************************************************************************</c>
<c>    </c>
<c>    ******************************************************************************</c>
<c>    *Verifico si SreialBridge esta activo para poder continuar</c>
<c>    ******************************************************************************</c>
<l>*     Find_SerialBridge (SerialHandle)</l>
<c>    ******************************************************************************</c>
<c>    </c>
<c>    </c>
<l>* #### Envio data de estado ########################</l>
<l>    Resultado:=0</l>
<l>    Procesando:=0</l>
<l>    Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<c>    ******************************************************************************</c>
<c>    </c>
<l>    try</l>
<c>        </c>
<c>        *****************************************************</c>
<l>        A01_Consolidado_Vision_R1 (SerialHandle, Vector_Estado_Fx, Path_SFM_Segmentos, Path_3D_Segmentos, Path_CORE_ID,\
                                   NxLib, Camera_1, AcqHandle_Cam_0, Camera0_Parameters, Camera0_Pose, Parametros_Visualizacion, Valores_Visualizacion)</l>
<c>        </c>
<l>    catch (Exception)</l>
<l>        Send_Data_Error (Exception,SerialHandle,EstadoFx)</l>
<l>    endtry</l>
<c>    </c>
<l>else</l>
<l>    Close_All_Cameras (AcqHandle_Cam_0, Camera_1, NxLib, Exception)</l>
<c>    </c>
<l>    close_serial (SerialHandle)</l>
<l>endif</l>
<c></c>
<l>Close_All_Cameras (AcqHandle_Cam_0, Camera_1, NxLib, Exception)</l>
<c></c>
<c></c>
<c>******************************************</c>
<c>* Seteo la info de que esta cerrado ******</c>
<c>******************************************</c>
<c></c>
<c></c>
<l>Set_Puntero_Cerrar_SistemaV1(SerialHandle)</l>
<c></c>
<l>Send_Data_Info('-&gt; Sistema de Vision 1 Cerrado &lt;-',SerialHandle)</l>
<c></c>
<l>close_serial (SerialHandle)</l>
<c></c>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="Set_Config_Cam">
<interface>
<oc>
<par name="AcqHandle" base_type="ctrl" dimension="0"/>
<par name="CameraParameters" base_type="ctrl" dimension="0"/>
<par name="CameraPose" base_type="ctrl" dimension="0"/>
<par name="Conexion_Camara_0" base_type="ctrl" dimension="0"/>
<par name="CalTabFile" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<c></c>
<c>*Parametros de calibracion de la camara</c>
<l>CameraParameters := ['area_scan_polynomial',0.019089,226.612,-547494,2.17334e+007,0.023374,-0.0333038,5.50091e-006,5.5e-006,2472.03,1594.77,4896,3264]</l>
<l>CameraPose := [-0.330897,-0.213789,0.455639,3.05118,359.888,268.927,0]</l>
<c></c>
<c></c>
<l>Conexion_Camara_0:=false</l>
<c></c>
<l>try</l>
<c>    </c>
<c>    *Apertura  y conexion de la camara</c>
<l>    open_framegrabber ('GigEVision2', 0, 0, 0, 0, 0, 0, 'progressive', -1, 'default', -1, 'false', 'default', '000f310262c0_AlliedVisionTechnologies_GT4905C022635B', 0, -1, AcqHandle)</l>
<c></c>
<l>    *open_framegrabber ('GigEVision', 0, 0, 0, 0, 0, 0, 'default', -1, 'default', -1, 'false', 'default', '000f310262c0_AlliedVisionTechnologies_GT4905C02', 0, -1, AcqHandle)</l>
<l>    set_framegrabber_param (AcqHandle, 'ExposureMode', 'Timed')</l>
<c>    </c>
<l>    set_framegrabber_param (AcqHandle, 'ExposureAuto', 'Off')</l>
<l>    set_framegrabber_param (AcqHandle, 'AcquisitionMode', 'SingleFrame')</l>
<c>    </c>
<l>    grab_image_start (AcqHandle, -1)</l>
<c>    </c>
<l>    set_framegrabber_param (AcqHandle, 'ExposureTimeAbs', 5000.0)</l>
<l>    set_framegrabber_param (AcqHandle, 'Gain', 21.0)</l>
<c>    </c>
<l>    Conexion_Camara_0:=true</l>
<c>    </c>
<c>    * Cargo el Caltab que se debera buscar</c>
<l>    CalTabFile := 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/13.- Ensenso N35/Caltab/Caltab7x7_5.descr'</l>
<c>    </c>
<c>    *************************************************************************************************************</c>
<c>    * Lectura de Pose herramienta respecto a la camara</c>
<c>    *************************************************************************************************************</c>
<c>    </c>
<c>    </c>
<l>    create_pose (0.1, 0.1, 0.1, 90, 90, 90, 'Rp+T', 'gba', 'point', ToolInCam)</l>
<c>    **************************************************************************************************************</c>
<l>    return () </l>
<c>    </c>
<l>catch (Exception)</l>
<c>    </c>
<c>     </c>
<l>    Conexion_Camara_0:=false</l>
<c>    </c>
<l>endtry</l>
<l>return () </l>
</body>
<docu id="Set_Config_Cam">
<parameters>
<parameter id="AcqHandle"/>
<parameter id="CalTabFile"/>
<parameter id="CameraParameters"/>
<parameter id="CameraPose"/>
<parameter id="Conexion_Camara_0"/>
</parameters>
</docu>
</procedure>
<procedure name="Conectar_Ensenso_N35">
<interface>
<ic>
<par name="Puerto" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="Conexion_Camara" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* </c>
<l>Conexion_Camara_1 := false</l>
<l>try</l>
<c>    * </c>
<l> *   info_framegrabber ('Ensenso-NxLib', 'device', Information, ValueList)</l>
<l> *   info_framegrabber ('Ensenso-NxLib', 'info_boards', Information, Estado)</l>
<c>    </c>
<c>    * Inicializacion de Arbol y camara estereo</c>
<l>    open_framegrabber ('Ensenso-NxLib', 0, 0, 0, 0, 0, 0, 'default', 0, 'Raw', 'auto_grab_data=0', 'false', 'Item', '/', 0, 0, NxLib)</l>
<c>  </c>
<c>    </c>
<c>    </c>
<l>    CamaraDisponible:=false</l>
<l>     while (not CamaraDisponible)</l>
<c>         </c>
<l>          get_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Status/Available', EstatusCamara)</l>
<c>        </c>
<l>          if (EstatusCamara='true')</l>
<l>              CamaraDisponible:=true</l>
<l>          endif</l>
<c></c>
<l>     endwhile</l>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    open_framegrabber ('Ensenso-NxLib', 0, 0, 0, 0, 0, 0, 'default', 0, 'Raw', 'auto_grab_data=0', 'false', 'Stereo','193216', 0, 0, Camera_1)</l>
<c>    </c>
<l>*    open_framegrabber ('Ensenso-NxLib', 0, 0, 0, 0, 0, 0, 'default', -1, 'default', -1, 'default', 'stereo', '193216', 0, 0, Camera_1)</l>
<c>*</c>
<c>    </c>
<c>    * Abro puerto TCP del Arbol</c>
<l>    set_framegrabber_param(NxLib, 'do_open_tcp_port', Puerto)</l>
<l>    Conexion_Camara := true</l>
<c>    * </c>
<l>    return ()</l>
<l>catch (Exception)</l>
<l>    Conexion_Camara := false</l>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="Conectar_Ensenso_N35">
<parameters>
<parameter id="Camera_1"/>
<parameter id="Conexion_Camara"/>
<parameter id="NxLib"/>
<parameter id="Puerto"/>
</parameters>
</docu>
</procedure>
<procedure name="Close_Camera_1">
<interface>
<ic>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="NxLib_1" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Camera_1_New" base_type="ctrl" dimension="0"/>
<par name="NxLib_1_New" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>close_framegrabber (Camera_1)</l>
<l>close_framegrabber (NxLib_1)</l>
<c></c>
<l>Camera_1_New:=Camera_1</l>
<l>NxLib_1_New:=NxLib_1</l>
<l>return ()</l>
</body>
<docu id="Close_Camera_1">
<parameters>
<parameter id="Camera_1"/>
<parameter id="Camera_1_New"/>
<parameter id="NxLib_1"/>
<parameter id="NxLib_1_New"/>
</parameters>
</docu>
</procedure>
<procedure name="Adq_Imagen">
<interface>
<oo>
<par name="ModelImage" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Camara_conexion_Est" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Camara_conexion_Est:=true</l>
<l>try</l>
<c>    </c>
<l>    set_framegrabber_param (NxLib, 'do_execute', 'Capture')</l>
<l>    set_framegrabber_param (NxLib, 'do_execute', 'ComputeDisparityMap')</l>
<l>    set_framegrabber_param (NxLib, 'do_execute', 'ComputePointMap')</l>
<c>    </c>
<l>*     set_framegrabber_param (Camera, 'grab_data_items', ['Images/Rectified/Left','Images/Rectified/Right','Images/PointMap'])</l>
<c>    * </c>
<l>    grab_data (ModelImage, Regions, Contours, Camera, Data)</l>
<c>    </c>
<c>    </c>
<l>catch (Exception)</l>
<l>    try</l>
<l>        set_framegrabber_param (NxLib, 'do_execute', 'Capture')</l>
<l>        set_framegrabber_param (NxLib, 'do_execute', 'ComputeDisparityMap')</l>
<l>        set_framegrabber_param (NxLib, 'do_execute', 'ComputePointMap')</l>
<c>        </c>
<l>*         set_framegrabber_param (Camera, 'grab_data_items', ['Images/Rectified/Left','Images/Rectified/Right','Images/PointMap'])</l>
<c>        * </c>
<l>        grab_data (ModelImage, Regions, Contours, Camera, Data)</l>
<l>    catch (Exception)</l>
<l>        Camara_conexion_Est:=false</l>
<l>    endtry</l>
<c>    </c>
<l>endtry</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Adq_Imagen">
<parameters>
<parameter id="Camara_conexion_Est"/>
<parameter id="Camera"/>
<parameter id="ModelImage"/>
<parameter id="NxLib"/>
</parameters>
</docu>
</procedure>
<procedure name="Adq_XYZ_Img">
<interface>
<io>
<par name="ModelImage" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Xm" base_type="iconic" dimension="0"/>
<par name="Ym" base_type="iconic" dimension="0"/>
<par name="Zm" base_type="iconic" dimension="0"/>
</oo>
</interface>
<body>
<l>select_obj (ModelImage, XYZMAP, 3)</l>
<c>* </c>
<c>* Separate the X, Y and Z images</c>
<l>access_channel (XYZMAP, Xm, 1)</l>
<l>access_channel (XYZMAP, Ym, 2)</l>
<l>access_channel (XYZMAP, Zm, 3)</l>
<l>return ()</l>
</body>
<docu id="Adq_XYZ_Img">
<parameters>
<parameter id="ModelImage"/>
<parameter id="Xm"/>
<parameter id="Ym"/>
<parameter id="Zm"/>
</parameters>
</docu>
</procedure>
<procedure name="Close_Camera_0">
<interface>
<ic>
<par name="AcqHandle_Cam_0" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c></c>
<c></c>
<l>Process_Ok:=false</l>
<l>try</l>
<c>    </c>
<l>    close_framegrabber (AcqHandle_Cam_0)     </l>
<l>    Process_Ok:=true</l>
<l>catch (Exception)</l>
<l>endtry</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Close_Camera_0">
<parameters>
<parameter id="AcqHandle_Cam_0"/>
</parameters>
</docu>
</procedure>
<procedure name="Close_All_Cameras">
<interface>
<ic>
<par name="AcqHandle_Cam_0" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="NxLib_1" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Exception" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>try   </l>
<l>    Close_Camera_0 (AcqHandle_Cam_0) </l>
<l>catch (Exception)</l>
<l>endtry</l>
<c></c>
<l>try    </l>
<l>    Close_Camera_1 (Camera_1, NxLib_1, Camera_1_New, NxLib_1_New)</l>
<l>catch (Exception)</l>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="Close_All_Cameras">
<parameters>
<parameter id="AcqHandle_Cam_0"/>
<parameter id="Camera_1"/>
<parameter id="Exception"/>
<parameter id="NxLib_1"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Image">
<interface>
<oo>
<par name="Image" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="AcqHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="g_Error_CamaraOpt_Adq" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>try</l>
<l>    grab_image_async (Image, AcqHandle, -1)</l>
<l>    grab_image_async (Image, AcqHandle, -1)</l>
<l>    g_Error_CamaraOpt_Adq:=false</l>
<l>catch (Exception)</l>
<c>    </c>
<c>    </c>
<l>    try</l>
<l>        grab_image_async (Image, AcqHandle, -1)</l>
<l>        grab_image_async (Image, AcqHandle, -1)</l>
<l>        g_Error_CamaraOpt_Adq:=false</l>
<l>        return ()</l>
<l>    catch (Exception)</l>
<l>    endtry</l>
<c>    </c>
<c>    </c>
<l>    g_Error_CamaraOpt_Adq:=true</l>
<l>endtry</l>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Image">
<parameters>
<parameter id="AcqHandle"/>
<parameter id="Image"/>
<parameter id="g_Error_CamaraOpt_Adq"/>
</parameters>
</docu>
</procedure>
<procedure name="Set_exposure_Time_cam_0">
<interface>
<ic>
<par name="AcqHandle_Cam_0" base_type="ctrl" dimension="0"/>
<par name="Time" base_type="ctrl" dimension="0"/>
<par name="Gain" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>  try</l>
<c>      </c>
<l>set_framegrabber_param (AcqHandle_Cam_0, 'ExposureTimeAbs', Time)</l>
<l>    set_framegrabber_param (AcqHandle_Cam_0, 'Gain', Gain)</l>
<c>    </c>
<l>  catch (Exception)</l>
<c></c>
<c>  </c>
<l>  endtry</l>
<c></c>
<c>    </c>
<c>    </c>
<l>return ()</l>
<c></c>
</body>
<docu id="Set_exposure_Time_cam_0">
<parameters>
<parameter id="AcqHandle_Cam_0"/>
<parameter id="Gain"/>
<parameter id="Time"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_ROI3D_Pallet">
<interface>
<oc>
<par name="ROI3D_NullFrame" base_type="ctrl" dimension="0"/>
<par name="ROI3D_rotate" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Parametros_Visualizacion:=['colored','disp_pose','point_size']</l>
<l>Valores_Visualizacion:= [  12  ,'true',25]</l>
<c></c>
<c></c>
<c></c>
<c>*Creo Plano</c>
<c>*****************************************************</c>
<c>*Dimenciones del cubo/2 en XY en mm</c>
<l>VisualizationPlaneSize:=1000.0/2</l>
<l>Z_alt:=3000</l>
<c>*****************************************************</c>
<c></c>
<l>create_pose (0, 0, 0, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose)</l>
<l>gen_plane_object_model_3d (Pose, [-1,-1,1,1] * VisualizationPlaneSize, [-1,1,1,-1] * VisualizationPlaneSize, Plano)</l>
<l>create_pose (VisualizationPlaneSize, VisualizationPlaneSize, 0, 0, 0, 0, 'Rp+T', 'gba', 'point', PoseEsquina)</l>
<l>rigid_trans_object_model_3d (Plano, PoseEsquina, Plano)</l>
<l>* visualize_object_model_3d (200000, [Plano], [], [], Parametros_Visualizacion, Valores_Visualizacion, [], [], [], PoseOut1)</l>
<c></c>
<c></c>
<l>Trans_X:=[]</l>
<l>Trans_Y:=[]</l>
<l>Ncuadrantes:=3.0</l>
<l> Trans_X[0]:=0</l>
<l>  Trans_Y[0]:=0</l>
<l>for Index := 1 to Ncuadrantes by 1</l>
<l>    Trans_X[Index]:=(VisualizationPlaneSize/(Ncuadrantes))*Index </l>
<l>    Trans_Y[Index]:=(VisualizationPlaneSize/Ncuadrantes)*Index</l>
<l>endfor</l>
<c></c>
<l>Alto_Sector:=VisualizationPlaneSize*2/(Ncuadrantes)</l>
<c></c>
<c></c>
<l>create_pose (0, 0, -1, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose)</l>
<c></c>
<l>create_pose (-Trans_X[1],-Trans_Y[1], Z_alt*0.5, 0, 0, 0, 'Rp+T', 'gba', 'point', PoseEsquina)</l>
<l>gen_box_object_model_3d (Pose, Alto_Sector, Alto_Sector, Z_alt, Plano_1)</l>
<l>rigid_trans_object_model_3d (Plano_1, PoseEsquina, Plano_1)</l>
<c></c>
<c></c>
<l>*visualize_object_model_3d (200000, [ Plano_1,Plano], [], [], Parametros_Visualizacion, Valores_Visualizacion, [], [], [], PoseOut1)</l>
<c></c>
<c></c>
<l>ThreshDistance:=1500</l>
<l>Modelos3d:=[Plano_1]</l>
<l>ROI3D_NullFrame:=[]</l>
<l>Vector_Segmento:=['A','B','C','D','E','F','G','H','I']</l>
<l>for Index_Y := 1 to Ncuadrantes by 1</l>
<c>    </c>
<l>    for Index_X := 1 to Ncuadrantes by 1</l>
<l>        create_pose (2*Trans_X[Index_X], 2*Trans_Y[Index_Y], -ThreshDistance, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose_Trans)       </l>
<l>        rigid_trans_object_model_3d (Modelos3d, Pose_Trans, ObjectModel3DRigidTrans1)</l>
<l>        ROI3D_NullFrame:=[ROI3D_NullFrame,ObjectModel3DRigidTrans1]</l>
<l>     *   visualize_object_model_3d (200000, [ ROI3D_NullFrame,Plano], [], [], Parametros_Visualizacion, Valores_Visualizacion, [], [], [], PoseOut1)</l>
<c>        </c>
<l>    endfor</l>
<c>    </c>
<l>endfor</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>ROI3D_rotate:=[]</l>
<l>clear_object_model_3d (ROI3D_rotate)</l>
<c></c>
<l>for Index := 0 to |ROI3D_NullFrame|-1 by 1</l>
<c>    </c>
<l>    copy_object_model_3d (ROI3D_NullFrame[Index], 'all', ROI3D_rotate_Aux)</l>
<l>    ROI3D_rotate:=[ROI3D_rotate,ROI3D_rotate_Aux]</l>
<l>    ROI3D_rotate_Aux:=[]</l>
<c>   </c>
<l>endfor</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>clear_object_model_3d (Modelos3d)</l>
<l>clear_object_model_3d (Plano)</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_ROI3D_Pallet">
<parameters>
<parameter id="ROI3D_NullFrame"/>
<parameter id="ROI3D_rotate"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_ROI_3D">
<interface>
<ic>
<par name="ROI3D" base_type="ctrl" dimension="0"/>
<par name="ObjectModel3D" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Modelo_3D_RED" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>Modelo_3D_RED:=[]</l>
<c></c>
<l>for N_ROI := 0 to |ROI3D|-1 by 1</l>
<l>    get_object_model_3d_params (ROI3D[N_ROI], 'bounding_box1', GenParamValue)</l>
<c>    </c>
<l>    x_min:=GenParamValue[0]</l>
<l>    y_min:=GenParamValue[1]</l>
<l>    z_min:=GenParamValue[2]</l>
<l>    x_max:=GenParamValue[3]</l>
<l>    y_max:=GenParamValue[4]</l>
<l>    z_max:=GenParamValue[5]</l>
<c>    </c>
<l>    select_points_object_model_3d (ObjectModel3D, 'point_coord_z',\
                                   z_min, z_max, ObjectModel3DThresholded)</l>
<l>    select_points_object_model_3d (ObjectModel3DThresholded, 'point_coord_y',\
                                   y_min, y_max, ObjectModel3DThresholded)</l>
<l>    select_points_object_model_3d (ObjectModel3DThresholded, 'point_coord_x',\
                                   x_min, x_max, ObjectModel3DThresholded)</l>
<c>    </c>
<l>    Modelo_3D_RED:=[Modelo_3D_RED,ObjectModel3DThresholded]</l>
<c>    </c>
<l>endfor</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_ROI_3D">
<parameters>
<parameter id="Modelo_3D_RED"/>
<parameter id="ObjectModel3D"/>
<parameter id="ROI3D"/>
</parameters>
</docu>
</procedure>
<procedure name="Set_Max_Altura_Model3D">
<interface>
<ic>
<par name="Modelo_3D_ROI" base_type="ctrl" dimension="0"/>
<par name="Delta_Altura" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Modelo_3D_ROI_Thres" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>try</l>
<c>    </c>
<c>    * Delta altura limita  el Z que necesito</c>
<l>    get_object_model_3d_params (Modelo_3D_ROI, 'bounding_box1', GenParamValue)</l>
<c>    </c>
<l>    x_min:=GenParamValue[0]</l>
<l>    y_min:=GenParamValue[1]</l>
<l>    z_min:=GenParamValue[2]</l>
<l>    x_max:=GenParamValue[3]</l>
<l>    y_max:=GenParamValue[4]</l>
<l>    z_max:=GenParamValue[5]</l>
<c>    </c>
<c>    </c>
<l>*     if (z_max-Delta_Altura &lt;= 0)</l>
<c>        </c>
<l>*         dev_get_exception_data (Exception, 'error_msg', ErrorMsg)</l>
<l>*         return ()</l>
<l>*     endif</l>
<c>    </c>
<l>    select_points_object_model_3d (Modelo_3D_ROI, 'point_coord_z',\
                                   z_min-200, Delta_Altura, Modelo_3D_ROI_Thres)</l>
<c>    </c>
<c>    </c>
<l>catch (Exception)</l>
<c></c>
<l>    Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<c></c>
<l>endtry</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Set_Max_Altura_Model3D">
<parameters>
<parameter id="Delta_Altura"/>
<parameter id="Modelo_3D_ROI"/>
<parameter id="Modelo_3D_ROI_Thres"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Find_Entity_3D">
<interface>
<ic>
<par name="N_matches" base_type="ctrl" dimension="0"/>
<par name="SFM" base_type="ctrl" dimension="0"/>
<par name="Modelo_imagen_3d" base_type="ctrl" dimension="0"/>
<par name="Sampling_Find" base_type="ctrl" dimension="0"/>
<par name="Keypoint" base_type="ctrl" dimension="0"/>
<par name="MinScore" base_type="ctrl" dimension="0"/>
<par name="Perno_Ref_Cam0" base_type="ctrl" dimension="0"/>
<par name="Modelo_3D_ROI_ThresEdges" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="PoseMLS" base_type="ctrl" dimension="0"/>
<par name="ScoreMLS" base_type="ctrl" dimension="0"/>
<par name="PoseREFIN" base_type="ctrl" dimension="0"/>
<par name="ScoreREFIN" base_type="ctrl" dimension="0"/>
<par name="SurfaceMatchingResultID1" base_type="ctrl" dimension="0"/>
<par name="ObjectModel3DResultMLS" base_type="ctrl" dimension="0"/>
<par name="ObjectModel3DResultMLS_REFIN" base_type="ctrl" dimension="0"/>
<par name="Estado_Funcion" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* </c>
<l>Estado_Funcion := true</l>
<l>try</l>
<c>    * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = "Buscando Objeto";</c>
<c>    * </c>
<c>    * ***************************************</c>
<c>    * 1.Parametros de control</c>
<c>    * ***************************************</c>
<l>    GenParamName := ['num_matches','scene_normal_computation','pose_ref_scoring_dist_rel','score_type','3d_edges','3d_edge_min_amplitude_abs','max_gap','viewpoint']</l>
<l>    GenParamValue := [N_matches   ,          'mls'           ,   0.01         ,'model_point_fraction' ,Modelo_3D_ROI_ThresEdges,13.7313, 30, '0 0 0']</l>
<c>   </c>
<c></c>
<c>    * </c>
<c>    * ***************************************</c>
<c>    * 2.Busqueda de entidad</c>
<c>    * ***************************************</c>
<l>    find_surface_model (SFM, Modelo_imagen_3d, Sampling_Find,\
                        Keypoint, MinScore, 'true', GenParamName,\
                        GenParamValue, PoseMLS, ScoreMLS, SurfaceMatchingResultID1)</l>
<c>    * ***************************************</c>
<l>    if (|PoseMLS|)</l>
<c>        </c>
<c>        </c>
<c>        * 3.Refinar busqueda</c>
<c>        * ***************************************</c>
<l>        refine_surface_model_pose (SFM, Modelo_imagen_3d, PoseMLS, 0, 'false', 'pose_ref_sub_sampling', 2, PoseREFIN, ScoreREFIN, SurfaceMatchingResultIDPose)</l>
<c>        * ***************************************</c>
<c>        * 4.Translacion de objeto</c>
<c>        * ***************************************</c>
<c></c>
<l>        rigid_trans_object_model_3d (Perno_Ref_Cam0, PoseMLS, ObjectModel3DResultMLS)</l>
<l>        rigid_trans_object_model_3d (Perno_Ref_Cam0, PoseREFIN, ObjectModel3DResultMLS_REFIN)</l>
<c>        * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = "Objeto encontrado con una PROBABILIDAD de " + hv_ScoreMLS*100.ToString() ;</c>
<l>        Estado_Funcion := true</l>
<l>        return()</l>
<c>        </c>
<l>    endif</l>
<c>    </c>
<l>    Estado_Funcion := false</l>
<l>catch (Exception)</l>
<c>       </c>
<l>    Estado_Funcion := false</l>
<c>    * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = Fx_Aux.ErrorCatch(HDevExpDefaultException1);</c>
<c>    * </c>
<l>endtry</l>
<c>* </c>
<c>* </c>
<l>return ()</l>
</body>
<docu id="Find_Entity_3D">
<parameters>
<parameter id="Estado_Funcion"/>
<parameter id="Keypoint"/>
<parameter id="MinScore"/>
<parameter id="Modelo_3D_ROI_ThresEdges"/>
<parameter id="Modelo_imagen_3d"/>
<parameter id="N_matches"/>
<parameter id="ObjectModel3DResultMLS"/>
<parameter id="ObjectModel3DResultMLS_REFIN"/>
<parameter id="Perno_Ref_Cam0"/>
<parameter id="PoseMLS"/>
<parameter id="PoseREFIN"/>
<parameter id="SFM"/>
<parameter id="Sampling_Find"/>
<parameter id="ScoreMLS"/>
<parameter id="ScoreREFIN"/>
<parameter id="SurfaceMatchingResultID1"/>
</parameters>
</docu>
</procedure>
<procedure name="FALSEO_ADQ_FOTO">
<interface>
<oo>
<par name="ReferenciaEsquina" base_type="iconic" dimension="0"/>
<par name="ObjectSelected" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
<par name="Z" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ObjectModel3D1" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<c></c>
<l>read_object (ReferenciaEsquina, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/18.- Imagenes_IngSoft/0 Ensenso/Pallet_011.hobj')</l>
<c></c>
<l>select_obj (ReferenciaEsquina, ObjectSelected, 3)</l>
<l>decompose3 (ObjectSelected, X, Y, Z)</l>
<l>xyz_to_object_model_3d (X, Y, Z, ObjectModel3D1)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="FALSEO_ADQ_FOTO">
<parameters>
<parameter id="ObjectModel3D1"/>
<parameter id="ObjectSelected"/>
<parameter id="ReferenciaEsquina"/>
<parameter id="SerialHandle"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Esquina">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Cross" base_type="iconic" dimension="0"/>
<par name="ImageOut" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="phi" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Row" base_type="ctrl" dimension="0"/>
<par name="Col" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>ImageOut := Image</l>
<l>Estado_Funcion:=0</l>
<l>Rango_Seguridad_Ditancia_puntos:=500</l>
<c></c>
<c></c>
<l>get_image_size (ImageOut, Width, Height)</l>
<l>hom_mat2d_identity (HomMat2DIdentity)</l>
<l>hom_mat2d_rotate (HomMat2DIdentity, rad(phi), Width/2, Height/2, HomMat2DRotate)</l>
<c>* Apply an arbitrary affine transformation to an image</c>
<l>affine_trans_image (Image, Image, HomMat2DRotate, 'constant', 'false')</l>
<c>* </c>
<c></c>
<c>* *************************************</c>
<c>* Segmentacion de esquina</c>
<c>* *************************************</c>
<l>Altura_Pallet:= 1000</l>
<l>Ditancia_camara_Piso:=1700</l>
<l>Rango_Seg:=50</l>
<l>Rango_posible_borde_pallet:=Ditancia_camara_Piso-Altura_Pallet</l>
<c></c>
<l>threshold (Image, ROI_0, Rango_posible_borde_pallet-Rango_Seg, Rango_posible_borde_pallet+Rango_Seg)</l>
<c></c>
<l>reduce_domain (Image, ROI_0, ImageReduced1)</l>
<c></c>
<c></c>
<c>* *************************************</c>
<c>* detecction de bordes</c>
<c>* *************************************</c>
<l>connection (ROI_0, ConnectedRegions)</l>
<l>fill_up (ConnectedRegions, ConnectedRegions)</l>
<l>select_shape (ConnectedRegions, SelectedRegions, 'area', 'and', 60000, 99912+1000)</l>
<c>* </c>
<c>* *********************************************</c>
<c>* contabilizo el numero de objetos encontrados</c>
<l>count_obj (SelectedRegions, Number)</l>
<c>* **********************************************</c>
<c></c>
<l>erosion_circle (SelectedRegions, RegionErosion, 3.5)</l>
<c></c>
<l>dilation_circle (SelectedRegions, RegionDilation1, 15)</l>
<l>reduce_domain (Image, RegionDilation1, ImageReduced2)</l>
<c>* </c>
<l>reduce_domain (Image, RegionErosion, ImageReduced3)</l>
<c>* </c>
<l>dev_set_color ('blue')</l>
<c>* </c>
<l>get_region_polygon (SelectedRegions, 2, Row, Col)</l>
<l>gen_region_polygon (Pol, Row, Col)</l>
<c></c>
<c></c>
<c>* **********************************************</c>
<c>* Generacion de poligono</c>
<c>* *********************************************</c>
<l>gen_region_polygon_filled (Pol, Row, Col)</l>
<c>* </c>
<c>* </c>
<l>reduce_domain (Image, Pol, Esquina)</l>
<c>* </c>
<l>gen_image_proto (Image, ImageCleared, 255)</l>
<l>gen_image_proto (Image, ImageCleared2, 128)</l>
<c>* </c>
<l>threshold (ImageCleared, IMG, 0, 255)</l>
<l>difference (IMG, Esquina, RegionDifference)</l>
<c>* </c>
<l>reduce_domain (ImageCleared, RegionDifference, Esquina)</l>
<c>* </c>
<c>* </c>
<l>paint_region (RegionDifference, ImageCleared, EsquinaIMG, 10, 'fill')</l>
<c>* </c>
<c>* </c>
<c>* **********************************************</c>
<c>* Harrys</c>
<c>* **********************************************</c>
<c>* </c>
<l>derivate_gauss (EsquinaIMG, DerivGauss, 1, 'yyy')</l>
<l>gauss_filter (DerivGauss, DerivGauss2, 11)</l>
<c></c>
<l>SigmaGrad := 1</l>
<l>SigmaSmooth :=5</l>
<l>Threshold := 1000</l>
<l>* dev_display (Image)</l>
<l>points_harris (DerivGauss, SigmaGrad, SigmaSmooth, 0.04, Threshold, Row, Col)</l>
<l>gen_cross_contour_xld (Cross, Row, Col, 30, rad(45))</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>* dev_set_line_width (2)</l>
<l>* dev_display (EsquinaIMG)</l>
<l>* dev_set_color ('red')</l>
<l> dev_display (Cross)</l>
<l>* dev_set_color ('red')</l>
<c></c>
<c> </c>
<l> for Index1 := 0 to |Row-1| by 1</l>
<c>     </c>
<l>    * disp_line (200000, Row[Index1], Col[Index1],Row[Index1+1], Col[Index1+1])</l>
<c>    </c>
<c>     </c>
<l> endfor</l>
<c></c>
<l>if (|Row|)</l>
<c>    *BUSCO LA FILA Y COL MAS PEQUEÑA</c>
<c>    </c>
<l>    Puntero_Menor:=0</l>
<l>    Puntero_Mayor:=0</l>
<l>    Puntero_Menor_Col:=0</l>
<l>    Puntero_Menor_Row:=0</l>
<l>    for Index := 0 to |Row|-1 by 1</l>
<c>        </c>
<c></c>
<l>        if((Col[Puntero_Menor]  &gt;  Col[Index]) )</l>
<l>            Puntero_Menor:=Index</l>
<l>        endif</l>
<c>        </c>
<l>         if((Row[Puntero_Mayor]  &lt;  Row[Index]) )</l>
<l>            Puntero_Mayor:=Index</l>
<l>        endif         </l>
<c>        </c>
<c>        </c>
<l>    endfor</l>
<c>    </c>
<l>    gen_cross_contour_xld (Crossw1, Row[Puntero_Menor], Col[Puntero_Menor], 80, rad(45))</l>
<l>    gen_cross_contour_xld (Crossw2, Row[Puntero_Mayor], Col[Puntero_Mayor], 80, rad(45))    </l>
<c>    </c>
<l>    distance_pp ( Row[Puntero_Menor], Col[Puntero_Menor],  Row[Puntero_Mayor], Col[Puntero_Mayor], Distance)</l>
<c>    </c>
<c> </c>
<l>    dev_clear_window()</l>
<l>    gen_cross_contour_xld (Cross, Row, Col, 30, rad(45))</l>
<l>    gen_cross_contour_xld (Crossw1,  Row[Puntero_Menor], Col[Puntero_Menor], 80, rad(45))</l>
<l>    gen_cross_contour_xld (Crossw2, Row[Puntero_Mayor], Col[Puntero_Mayor], 80, rad(45))</l>
<l>    dev_display (EsquinaIMG)</l>
<l>    dev_set_color ('red')</l>
<l>    dev_display (Crossw1)</l>
<l>    dev_display (Crossw2)</l>
<c>    </c>
<c>    </c>
<l>    disp_line (200000, Row[Puntero_Menor], Col[Puntero_Menor],Row[Puntero_Mayor], Col[Puntero_Mayor])</l>
<c>   </c>
<l>    disp_line (200000, Row[Puntero_Mayor], 0,Row[Puntero_Mayor], Col[Puntero_Mayor])</l>
<l>    disp_line (200000, Row[Puntero_Menor], Col[Puntero_Menor],Height,  Col[Puntero_Menor])</l>
<c>    </c>
<c> </c>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    Estado_Funcion:=1</l>
<l>else</l>
<c>    </c>
<c>    </c>
<l>    Estado_Funcion:=0  </l>
<l>endif</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Esquina">
<parameters>
<parameter id="Col"/>
<parameter id="Cross"/>
<parameter id="Image"/>
<parameter id="ImageOut"/>
<parameter id="Row"/>
<parameter id="phi"/>
</parameters>
</docu>
</procedure>
<procedure name="Set_SFM_Esquina_Pallet">
<interface>
<io>
<par name="Z" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="Rango_posible_borde_pallet" base_type="ctrl" dimension="0"/>
<par name="Rango_Seg" base_type="ctrl" dimension="0"/>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>threshold (Z, Regions, Rango_posible_borde_pallet-Rango_Seg, Rango_posible_borde_pallet+Rango_Seg)</l>
<l>reduce_domain (Z, Regions, ImageReduced)</l>
<c></c>
<l>gen_rectangle1 (ROI_0, 62.5246, 134.286, 222.187, 1067.42)</l>
<c></c>
<l>reduce_domain (ImageReduced, ROI_0, ImageReduced_Z)</l>
<l>xyz_to_object_model_3d (X, Y, ImageReduced_Z, Esquina_Ref)</l>
<l>compose3 (X, Y, ImageReduced_Z, MultiChannelImage)</l>
<c></c>
<l>create_pose (-486, 573, -1590, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose)</l>
<l>rigid_trans_object_model_3d (Esquina_Ref, Pose, ObjectModel3DRigidTrans)</l>
<l>visualize_object_model_3d (200000, [ObjectModel3DRigidTrans], [], [], Parametros_Visualizacion, Valores_Visualizacion, [], [], [], PoseOut1)</l>
<c></c>
<l>create_pose (0, 0, 0, 0, 0, -90, 'Rp+T', 'gba', 'point', Pose)</l>
<l>rigid_trans_object_model_3d (ObjectModel3DRigidTrans, Pose, ObjectModel3DRigidTrans)</l>
<l>visualize_object_model_3d (200000, [ObjectModel3DRigidTrans], [], [], Parametros_Visualizacion, Valores_Visualizacion, [], [], [], PoseOut1)</l>
<c></c>
<l>create_pose (0, 0, 0, 180, 0, 0, 'Rp+T', 'gba', 'point', Pose)</l>
<l>rigid_trans_object_model_3d (ObjectModel3DRigidTrans, Pose, ObjectModel3DRigidTrans)</l>
<l>visualize_object_model_3d (200000, [ObjectModel3DRigidTrans], [], [], Parametros_Visualizacion, Valores_Visualizacion, [], [], [], PoseOut1)</l>
<c></c>
<l>create_pose (0, 950, 0, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose)</l>
<l>rigid_trans_object_model_3d (ObjectModel3DRigidTrans, Pose, ObjectModel3DRigidTrans)</l>
<l>visualize_object_model_3d (200000, [ObjectModel3DRigidTrans], [], [], Parametros_Visualizacion, Valores_Visualizacion, [], [], [], PoseOut1)</l>
<c></c>
<l>create_pose (-50, 0, 0, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose)</l>
<l>rigid_trans_object_model_3d (ObjectModel3DRigidTrans, Pose, ObjectModel3DRigidTrans)</l>
<l>visualize_object_model_3d (200000, [ObjectModel3DRigidTrans], [], [], Parametros_Visualizacion, Valores_Visualizacion, [], [], [], PoseOut1)</l>
<c></c>
<l>create_pose (0, 0, 0, 0, 0, -3, 'Rp+T', 'gba', 'point', Pose)</l>
<l>rigid_trans_object_model_3d (ObjectModel3DRigidTrans, Pose, ObjectModel3DRigidTrans)</l>
<l>visualize_object_model_3d (200000, [ObjectModel3DRigidTrans], [], [], Parametros_Visualizacion, Valores_Visualizacion, [], [], [], PoseOut1)</l>
<c></c>
<c></c>
<c>*****************************************</c>
<l>Sampling:=0.03</l>
<l>surface_normals_object_model_3d (ObjectModel3DRigidTrans, 'mls', [], [], ObjectModel3DNormals)</l>
<l>triangulate_object_model_3d (ObjectModel3DNormals, 'greedy', [], [], ObjectModel3DNormals, Information)</l>
<l>visualize_object_model_3d (200000, [ObjectModel3DNormals], [], [], Parametros_Visualizacion, Valores_Visualizacion, [], [], [], PoseOut1)</l>
<c></c>
<l>create_surface_model (ObjectModel3DNormals, Sampling, 'train_3d_edges', 'true', SurfaceModelID)</l>
<c></c>
<l>visualize_object_model_3d (200000,[ObjectModel3DNormals], [], [], Parametros_Visualizacion, Valores_Visualizacion, [], [], [], PoseOut1)</l>
<c></c>
<l>write_surface_model (SurfaceModelID, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/SFM_PALLET/SFM_Pallet.sfm')</l>
<l>write_object_model_3d (ObjectModel3DNormals, 'om3', 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/SFM_PALLET/3D_Pallet.om3', [], [])</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Set_SFM_Esquina_Pallet">
<parameters>
<parameter id="Parametros_Visualizacion"/>
<parameter id="Rango_Seg"/>
<parameter id="Rango_posible_borde_pallet"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_SFM_3D_Pallet">
<interface>
<oc>
<par name="SFM_Pallet" base_type="ctrl" dimension="0"/>
<par name="Pallet_3D_Esquina" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>read_surface_model ('D:/AI/Vision Artificial/4.-MAGOTTEAUX/SFM_PALLET/SFM_Pallet_beta.sfm', SFM_Pallet)</l>
<l>read_object_model_3d ('D:/AI/Vision Artificial/4.-MAGOTTEAUX/SFM_PALLET/3D_Pallet_beta.om3', 1, [], [], Pallet_3D_Esquina, Status)</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_SFM_3D_Pallet">
<parameters>
<parameter id="Pallet_3D_Esquina"/>
<parameter id="SFM_Pallet"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_ObjectModel3D_Util">
<interface>
<io>
<par name="Z" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
<par name="ImgLeftCamera_Esq" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="Rango_posible_borde_pallet" base_type="ctrl" dimension="0"/>
<par name="Rango_Seg" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ObjectModel3D" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Parametros_Visualizacion:=['colored','disp_pose','point_size']</l>
<l>Valores_Visualizacion:= [  12  ,'true',1]</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>threshold (ImgLeftCamera_Esq, Esquina, 180, 255)</l>
<c></c>
<l>connection (Esquina, ConnectedRegions)</l>
<l>select_shape_std (ConnectedRegions, SelectedRegions, 'max_area', 90)</l>
<c></c>
<c></c>
<l>reduce_domain (Z, Esquina, ImageReduced)</l>
<c></c>
<c></c>
<l>reduce_domain (Z, SelectedRegions, Zred)</l>
<c></c>
<l>*#################################################</l>
<c>**Funcion para  hacer la sfm de la esquina</c>
<l>*MakeSFM_Palletr (Esquina, Z, X, Y, ConnectedRegions, SelectedRegions, ImageReduced,\
                 MultiChannelImage, Parametros_Visualizacion, Valores_Visualizacion, Esquina3D, Pose, \
                 Esquina3D_Trans, Pose1, PoseOut1, Sampling, SurfaceModelID, ObjectModel3DNormals, Esquina_Tri, Information)</l>
<l>*#################################################</l>
<c></c>
<c></c>
<l>xyz_to_object_model_3d (X, Y, ImageReduced, ObjectModel3D)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_ObjectModel3D_Util">
<parameters>
<parameter id="ImgLeftCamera_Esq"/>
<parameter id="ObjectModel3D"/>
<parameter id="Rango_Seg"/>
<parameter id="Rango_posible_borde_pallet"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Rotate_ROI3D">
<interface>
<ic>
<par name="Pose_Refinada" base_type="ctrl" dimension="0"/>
<par name="ROI3D_rotate" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Pose_Segmentos" base_type="ctrl" dimension="0"/>
<par name="ROI3D_rotateOut" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<c></c>
<c></c>
<l>ROI3D_rotateOut := ROI3D_rotate</l>
<c>* Variable para asegurarme que tome lo sque existe por sobre el pallet</c>
<c></c>
<l>Z_Seguridad:=800</l>
<c></c>
<c></c>
<l>create_pose (Pose_Refinada[0], Pose_Refinada[1], Pose_Refinada[2]-Z_Seguridad,\
             Pose_Refinada[3], Pose_Refinada[4], Pose_Refinada[5], 'Rp+T', 'gba', 'point', Pose_Segmentos)</l>
<c></c>
<l>rigid_trans_object_model_3d (ROI3D_rotateOut, Pose_Segmentos, ROI3D_rotateOut)</l>
<l>return ()</l>
</body>
<docu id="Get_Rotate_ROI3D">
<parameters>
<parameter id="Pose_Refinada"/>
<parameter id="Pose_Segmentos"/>
<parameter id="ROI3D_rotate"/>
<parameter id="ROI3D_rotateOut"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Core_Presence_In_Pallet">
<interface>
<io>
<par name="Z" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
<par name="ImgLeftCamera_Esq" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
<par name="Pose_Robot" base_type="ctrl" dimension="2"/>
<par name="N_Pallet_to_Scan" base_type="ctrl" dimension="0"/>
<par name="Path_SFM_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_3D_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet" base_type="ctrl" dimension="0"/>
<par name="Path_CORE_ID" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="Base_esquina" base_type="ctrl" dimension="0"/>
<par name="Visualizar3D" base_type="ctrl" dimension="0"/>
<par name="Estado_Fx" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Estado_SubProceso" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Parametros_Visualizacion:=['colored','disp_pose','point_size']</l>
<l>Valores_Visualizacion:= [  12  ,'true',1]</l>
<c></c>
<c></c>
<c>******************************************</c>
<c>*1.- Obtengo el ROI3D del PALLET</c>
<c>******************************************</c>
<l>Vector_Segmento:=['A','B','C','D','E','F','G','H','I']</l>
<c></c>
<l>try</l>
<l>    Get_ROI3D_Pallet (ROI3D_NullFrame, ROI3D_rotate)  </l>
<c>    </c>
<l>catch (Exception)</l>
<l>    dev_get_exception_data (Exception, 'error_msg', ErrorMsg0)</l>
<l>    dev_get_exception_data (Exception, 'procedure', ErrorMsg1)</l>
<l>    dev_get_exception_data (Exception, 'operator', ErrorMsg2)</l>
<l>    dev_get_exception_data (Exception, 'program_line', ErrorMsg3)</l>
<c>    </c>
<l>    MensajeError:=ErrorMsg0+' IN '+ErrorMsg1+' IN FUNTION '+ErrorMsg2+' IN LINE '+ErrorMsg3</l>
<l>    Mensaje:=MensajeError</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<c>    </c>
<l>* #### Envio data de estado ########################</l>
<l>    Procesando:=0</l>
<l>    Estado:=5</l>
<l>    Resultado:=2</l>
<l>    Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* ################################################## </l>
<c>    </c>
<l>    Msg_Sub_Proceso:='#Error# '+MensajeError</l>
<l>    return()</l>
<l>endtry</l>
<c></c>
<c></c>
<l>* ########################################################</l>
<c>*                    constantes </c>
<c>******************************************</c>
<c>*2.- Busco la esquina de la caja con cores</c>
<c>******************************************</c>
<c>* Filtro para buscar solo el borde en [mm]</c>
<c>* Variables de  valor constante</c>
<l>Altura_Pallet:= 600</l>
<l>Distancia_camara_Piso_Pallet:=2340</l>
<l>Rango_Seguridad:=200</l>
<l>Rango_posible_borde_pallet:=Distancia_camara_Piso_Pallet-Altura_Pallet</l>
<l>* ########################################################</l>
<l>try   </l>
<l>    Get_ObjectModel3D_Util (Z, X, Y, ImgLeftCamera_Esq, Rango_posible_borde_pallet, Rango_Seguridad, ObjectModel3D_Borde_Pallet)</l>
<l>catch (Exception)</l>
<l>    dev_get_exception_data (Exception, 'error_msg', ErrorMsg0)</l>
<l>    dev_get_exception_data (Exception, 'procedure', ErrorMsg1)</l>
<l>    dev_get_exception_data (Exception, 'operator', ErrorMsg2)</l>
<l>    dev_get_exception_data (Exception, 'program_line', ErrorMsg3)</l>
<c>    </c>
<l>    MensajeError:=ErrorMsg0+' IN '+ErrorMsg1+' IN FUNTION '+ErrorMsg2+' IN LINE '+ErrorMsg3</l>
<l>*     throw (MensajeError)</l>
<c>    </c>
<l>* #### Envio data de estado ###############################</l>
<l>    Procesando:=0</l>
<l>    Estado:=5</l>
<l>    Resultado:=2</l>
<l>    Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* ########################################################    </l>
<l>    return()</l>
<l>endtry</l>
<c></c>
<c>******************************************************************************************************************************</c>
<l>  dev_get_window (WindowHandle)</l>
<l>Visualizar_3D ([ObjectModel3D_Borde_Pallet,Escena3D_RAW], Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, [], [], [], WindowHandle, PoseOut1)</l>
<c>******************************************************************************************************************************</c>
<c></c>
<c></c>
<c>***************************************************</c>
<c>*       -&gt; OLD CODE &lt;-</c>
<c>* SE BUSCA CON PROCESAMIENTO DE IMAGENES</c>
<c>* SE MANTIENE POR COMPATIBILIDAD</c>
<c>* 2.2 Busco la esquina del palelt con SFM</c>
<c>*</c>
<c>* Parametros de control</c>
<c>***************************************************</c>
<c>***OldCode (Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, ObjectModel3D_Borde_Pallet, Vector_Estado_Fx, SerialHandle, SurfaceModelID, ObjectModel3D, Status, PoseOut1, Sampling, Sampling_Find, Keypoint, MinScore, N_matches, SFM, Escena3D, Objeto3D, Estado, PoseMLS, ScoreMLS, Pose_Refinada, Score_Refinado, SurfaceMatchingResultID1, Posicion3D_Objeto, Posicion3D_Objeto_REFIN, Obj_Detectado_EsquinaPallets)</c>
<c></c>
<c></c>
<c></c>
<c>*******************************************************</c>
<c>* Envio informacion de la esquina encontrada al Robot</c>
<c>*******************************************************</c>
<l>if (Estado_Fx)</l>
<l>*     Visualizar_3D ([ObjectModel3D_Borde_Pallet,Posicion3D_Objeto_REFIN,Escena3D_RAW], Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, [], [], [], WindowHandle1, PoseOut1)</l>
<c>    </c>
<c>    </c>
<c>    *******************************************************  </c>
<c>    </c>
<c>    </c>
<c>    </c>
<l>* ############### GUARDAR  POSICION ESQUINA REFERENTE A LA BASE ####################################</l>
<l>* ### Debo conocer la transformada</l>
<l>* ### Guardar la posicion de la camara al NULLFRAME del robot.</l>
<l>* ###################################################################################################   </l>
<c>    </c>
<c></c>
<l>    Save_Pose_Palle (SerialHandle, Base_esquina, N_Pallet_to_Scan, Pose_Robot)</l>
<c>    </c>
<l>* ###################################################################################################    </l>
<c>    </c>
<c>    * Enviar datos al Robot de Posicion de la esquia del pallet respecto a la brida</c>
<c>    * Es necesario convertir la coordenada  </c>
<l>*    Send_Data_To_Robot (Base_esquina, SerialHandle)  </l>
<l>*    Get_ObjInBasePose (Base_esquina, Pose_Robot, ObjInBasePose)</l>
<c>    </c>
<l>* ###################################################################################################    </l>
<c>    </c>
<c>    </c>
<l>else</l>
<c>    ********************************</c>
<c>    * Enviar por ETHERNETIP</c>
<c>    ********************************</c>
<c>    </c>
<l>* #### Envio data de estado ############################################################################</l>
<c>    </c>
<l>    Estado:=7</l>
<l>    Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* #######################################################################################################</l>
<c>    </c>
<c>    </c>
<l>    return()</l>
<c>    </c>
<l>endif</l>
<c></c>
<c></c>
<l>* ####################################################</l>
<l>* ##### ROTO EL ROI 3D ###############################</l>
<l>* ####################################################</l>
<l>Mensaje:='Rotando ROI'</l>
<l>Send_Data_Info (Mensaje, SerialHandle)</l>
<l>Rototate_ROI (Base_esquina, ROI3D_rotate, Escena3D_RAW, Parametros_Visualizacion, Valores_Visualizacion, \
              Visualizar3D, Vector_Segmento, Pose_Segmentos, ROI3D_rotate)</l>
<l>* ####################################################</l>
<c></c>
<c></c>
<l>* ####################################################################</l>
<l>* ####################################################################</l>
<l>* ################# BUSQUEDA DE CORES EN EL PALLET ###################</l>
<l>* ####################################################################</l>
<l>* ####################################################################</l>
<c>* 3.- Encuentro el orden y los segementos en que estan distribuidos los cores en el applet</c>
<c></c>
<l>Get_Vector_Entidades (Vector_ID_Core_by_Segment_Pallet, Vector_Entidades_Segmento)</l>
<c></c>
<c></c>
<l>try</l>
<c>    </c>
<c>    </c>
<c>    *********************************************************</c>
<c>    * ROI 3D sectorizado de cada elemento</c>
<c>    * Busco de manera sectorizada cara core en el pallet</c>
<c>    *********************************************************</c>
<c>    * Estructura de vector</c>
<l>* ############################</l>
<l>* ### CORE ## Existencia #####</l>
<l>* ############################</l>
<l>    Vector_Existencia_Core:={{[]}}</l>
<l>    Vector_Existencia_Core.at(0).at(0):='CORE'</l>
<l>    Vector_Existencia_Core.at(0).at(1):='Existencia'</l>
<c>    </c>
<l>* #### Envio data de estado ########################</l>
<l>    Estado:=8</l>
<l>    Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* ################################################## </l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    Sampling:=0.05</l>
<l>    Find_Sector_Core (Vector_ID_Core_by_Segment_Pallet, \
                      Vector_Entidades_Segmento, Path_CORE_ID, Path_3D_Segmentos, Path_SFM_Segmentos, \
                      ROI3D_rotate, Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D,\
                      Vector_Segmento, Escena3D_RAW, Sampling, SerialHandle, Vector_Existencia_Core, \
                      Vector_Estado_Fx, Vector_Existencia_Core_New)</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>* #### Envio data de estado ########################</l>
<l>    Procesando:=1</l>
<l>    Estado:=13</l>
<l>    Resultado:=0</l>
<c></c>
<l>* ################################################## </l>
<c>    </c>
<c>    </c>
<c>    *Escritura de Vector_Existencia_Core_New</c>
<c>    </c>
<l>    Variable_PLC_Existencia:='_EV01_I_Pallet'+N_Pallet_to_Scan+'ZValid.'</l>
<c>    </c>
<l>    for j := 1 to Vector_Existencia_Core_New.length()-1 by 1</l>
<l>        Estado_SubProceso:=false</l>
<l>        Tag_Destino:=Variable_PLC_Existencia+(j)</l>
<l>        Valor_Variable:=Vector_Existencia_Core_New.at(j).at(1)</l>
<c>        *************************</c>
<l>        Valor_Variable:=1</l>
<c>        *************************</c>
<l>        Send_EthernetIP_Data (Tag_Destino, Valor_Variable, SerialHandle)</l>
<c> </c>
<l>    endfor</l>
<c>    </c>
<l>    ValorVector:=Vector_Existencia_Core_New.length()-1</l>
<l>    if (ValorVector &gt;1)</l>
<l>        Mensaje:='Elementos encontrados en Pallet  '+N_Pallet_to_Scan</l>
<l>        Send_Data_Info (Mensaje, SerialHandle)</l>
<l>* #### Envio data de estado ########################</l>
<l>        Procesando:=0</l>
<l>        Resultado:=1</l>
<l>        Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* ################################################## </l>
<l>    else</l>
<c>        </c>
<l>* #### Envio data de estado ########################</l>
<l>         Mensaje:='### ERROR ### No se encontro nada que validar en pallet '+N_Pallet_to_Scan</l>
<l>        Send_Data_Info (Mensaje, SerialHandle)</l>
<l>        Procesando:=0</l>
<l>        Resultado:=2</l>
<l>        Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>        Mensaje:='### ERROR ###'</l>
<l>        Send_Data_Info (Mensaje, SerialHandle)</l>
<l>* ################################################## </l>
<l>    endif</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>catch (Exception)</l>
<l>    Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<c>    </c>
<c>    </c>
<l>* #### Envio data de estado ########################</l>
<l>    Procesando:=0</l>
<l>    Estado:=6</l>
<l>    Resultado:=2</l>
<l>    Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>    Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<c>    </c>
<l>* ################################################## </l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    return()</l>
<l>endtry</l>
<c></c>
<c></c>
<c></c>
<c>*****************************************</c>
<c>*Borrar 3D</c>
<l>clear_object_model_3d ([ROI3D_rotate,ROI3D_NullFrame,Escena3D_RAW,ObjectModel3D_Borde_Pallet])</l>
<l>return ()</l>
</body>
<docu id="Get_Core_Presence_In_Pallet">
<parameters>
<parameter id="Base_esquina"/>
<parameter id="Escena3D_RAW"/>
<parameter id="Estado_Fx"/>
<parameter id="Estado_SubProceso"/>
<parameter id="ImgLeftCamera_Esq"/>
<parameter id="N_Pallet_to_Scan"/>
<parameter id="Path_3D_Segmentos"/>
<parameter id="Path_CORE_ID"/>
<parameter id="Path_SFM_Segmentos"/>
<parameter id="Pose_Robot"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet"/>
<parameter id="Visualizar3D"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Cores_BD">
<interface>
<oc>
<par name="Path_CORE_ID" base_type="ctrl" dimension="0"/>
<par name="Path_SFM_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_3D_Segmentos" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c>* Cores en BD</c>
<c></c>
<c></c>
<l>Get_Cores (Cores)</l>
<l>Path_CORE_ID:=Cores</l>
<c></c>
<c>** FALSEANDO ENTREGA DE INFO **</c>
<l>Path:='D:/AI/Vision Artificial/4.-MAGOTTEAUX/SFM_CORES/'</l>
<c></c>
<l>list_files ('D:/AI/Vision Artificial/4.-MAGOTTEAUX/SFM_CORES', 'files', Files)</l>
<c></c>
<l>for j := 0 to |Path_CORE_ID|-1 by 1</l>
<l> Path_SFM_Segmentos[j]:=Path+Path_CORE_ID[j]+'/'+Path_CORE_ID[j]+'_SFM.sfm'</l>
<l> Path_3D_Segmentos[j]:=Path+Path_CORE_ID[j]+'/'+Path_CORE_ID[j]+'_3D.stl'</l>
<l>endfor</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Cores_BD">
<parameters>
<parameter id="Path_3D_Segmentos"/>
<parameter id="Path_CORE_ID"/>
<parameter id="Path_SFM_Segmentos"/>
</parameters>
</docu>
</procedure>
<procedure name="Visualizar_3D">
<interface>
<ic>
<par name="Modelo3D" base_type="ctrl" dimension="0"/>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Visualizar" base_type="ctrl" dimension="0"/>
<par name="PoseIn" base_type="ctrl" dimension="0"/>
<par name="Title" base_type="ctrl" dimension="0"/>
<par name="Label" base_type="ctrl" dimension="0"/>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Pose" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>if (Visualizar)</l>
<l>    visualize_object_model_3d (WindowHandle, [Modelo3D], [], [], Parametros_Visualizacion, Valores_Visualizacion, Title, Label, [], Pose)</l>
<l>endif</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Visualizar_3D">
<parameters>
<parameter id="Label"/>
<parameter id="Modelo3D"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="Pose"/>
<parameter id="PoseIn"/>
<parameter id="Title"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="Visualizar"/>
<parameter id="WindowHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_EthernetIP_Data">
<interface>
<ic>
<par name="Tag_Destino" base_type="ctrl" dimension="0"/>
<par name="Variable" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>wait_seconds(0.00)</l>
<c></c>
<c></c>
<l>try</l>
<c>    </c>
<c></c>
<l>Peticion     := 'Escritura'</l>
<l>Variable_OPC := Tag_Destino </l>
<c></c>
<l>Data:=Peticion+';'+Variable_OPC+';'+Variable</l>
<c></c>
<l>write_serial (SerialHandle, ords(Data))</l>
<l>Conteo_Espera:=0</l>
<l>VarSerial:=0</l>
<l>while(VarSerial&lt;1 and Conteo_Espera&lt;10)    </l>
<l>    read_serial (SerialHandle, 10, Nchar)</l>
<l>    Nchar:= chrt(Nchar)</l>
<l>    tuple_number (Nchar, Variable)</l>
<l>    VarSerial:=|Nchar|</l>
<l>    Conteo_Espera:=Conteo_Espera+1</l>
<l>endwhile</l>
<c></c>
<c></c>
<l>catch (Exception)</l>
<l>endtry</l>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Send_EthernetIP_Data">
<parameters>
<parameter id="SerialHandle"/>
<parameter id="Tag_Destino"/>
<parameter id="Variable"/>
</parameters>
</docu>
</procedure>
<procedure name="Read_EthernetIP_Data">
<interface>
<ic>
<par name="Tag_Lectura" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Variable" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<l>Limite:=50</l>
<l>Conteo:=Limite+1</l>
<l>Peticion     := 'Lectura'</l>
<l>Variable_OPC := Tag_Lectura</l>
<c></c>
<l>Data:=Peticion+';'+Variable_OPC</l>
<c></c>
<l>while (Conteo&gt;Limite)</l>
<l>    Conteo:=0  </l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    write_serial (SerialHandle, ords(Data))</l>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    VarSerial:=0</l>
<c>    </c>
<l>    while(VarSerial&lt;1 and Conteo&lt;Limite)</l>
<c>        </c>
<c>        *Numero de caracteres a leer</c>
<l>        read_serial (SerialHandle, 50, Nchar)</l>
<l>        Nchar:= chrt(Nchar)</l>
<l>        tuple_number (Nchar, Variable)</l>
<l>        VarSerial:=|Nchar|</l>
<c>        </c>
<l>        Conteo:=Conteo+1</l>
<l>    endwhile</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>endwhile</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Read_EthernetIP_Data">
<parameters>
<parameter id="SerialHandle"/>
<parameter id="Tag_Lectura"/>
<parameter id="Variable"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Vector_Info_Cores_byUser">
<interface>
<ic>
<par name="N_pallet" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_1" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_2" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_3" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_4" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_5" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_6" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Vector_ID_Core_by_Segment_Pallet" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>switch (N_pallet)</l>
<l>case 1:</l>
<l>    Vector_ID_Core_by_Segment_Pallet:=Vector_ID_Core_by_Segment_Pallet_1</l>
<l>    break</l>
<l>case 2:</l>
<l>    Vector_ID_Core_by_Segment_Pallet:=Vector_ID_Core_by_Segment_Pallet_2</l>
<l>    break</l>
<l>case 3:</l>
<l>    Vector_ID_Core_by_Segment_Pallet:=Vector_ID_Core_by_Segment_Pallet_3</l>
<l>    break</l>
<l>case 4:</l>
<l>    Vector_ID_Core_by_Segment_Pallet:=Vector_ID_Core_by_Segment_Pallet_4</l>
<l>    break</l>
<l>case 5:</l>
<l>    Vector_ID_Core_by_Segment_Pallet:=Vector_ID_Core_by_Segment_Pallet_5</l>
<l>    break</l>
<c>    </c>
<l>case 6:</l>
<l>    Vector_ID_Core_by_Segment_Pallet:=Vector_ID_Core_by_Segment_Pallet_6</l>
<l>    break    </l>
<l>endswitch</l>
<l>return ()</l>
</body>
<docu id="Get_Vector_Info_Cores_byUser">
<parameters>
<parameter id="N_pallet"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_1"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_2"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_3"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_4"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_5"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_6"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Vector_Entidades">
<interface>
<ic>
<par name="Vector_ID_Core_by_Segment_Pallet" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Vector_Entidades_Segmento" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c>*0.1.- identifico cuantos Cores existen por segmento</c>
<c></c>
<c></c>
<l>N_Cores_Segmento:=[]</l>
<l>Vector_N_Elementos:=[]</l>
<l>idx_aux:=0</l>
<l>for Index_Core_Seg := 0 to |Vector_ID_Core_by_Segment_Pallet|-1 by 1</l>
<c>    </c>
<l>    Core_Find_by_User := Vector_ID_Core_by_Segment_Pallet[Index_Core_Seg]</l>
<c>    </c>
<l>    tuple_split (Core_Find_by_User, ';', Aux)</l>
<l>    N_Cores_Segmento[Index_Core_Seg]:=|Aux|</l>
<c>    </c>
<c>    </c>
<l>    for Index_temp := 0 to |Aux|-1 by 1</l>
<c>        </c>
<l>        Vector_N_Elementos[idx_aux]:=Aux[Index_temp]</l>
<l>        idx_aux:=idx_aux+1</l>
<l>    endfor</l>
<c>    </c>
<l>endfor</l>
<c></c>
<c></c>
<c>*0.2.- identifico cuantos Cores existen y cuantas veces se repiten</c>
<l>Vector_Entidades:=[]</l>
<l>idx_Vector_Entidades:=0</l>
<l>for Index_temp := 0 to |Vector_N_Elementos|-1 by 1</l>
<l>    if(Vector_N_Elementos[Index_temp]='')</l>
<l>        continue</l>
<l>    endif</l>
<l>    N_core:=1</l>
<l>    Core_To_Find:=Vector_N_Elementos[Index_temp]</l>
<l>    if (Core_To_Find=' ' )</l>
<l>        continue       </l>
<l>    endif</l>
<l>    Vector_N_Elementos[Index_temp]:=' '</l>
<c>    </c>
<l>    for Index_temp_b := 0 to |Vector_N_Elementos|-1 by 1</l>
<l>        if (Core_To_Find=Vector_N_Elementos[Index_temp_b])</l>
<l>            N_core:=N_core+1  </l>
<l>            Vector_N_Elementos[Index_temp_b]:=' '</l>
<l>        endif</l>
<l>    endfor</l>
<c>    </c>
<c>    </c>
<l>    Vector_Entidades[idx_Vector_Entidades]:=Core_To_Find+';'+N_core</l>
<l>    idx_Vector_Entidades:=idx_Vector_Entidades+1</l>
<l>endfor</l>
<c></c>
<c>*0.3 Busco los cores y en que segmento se encuentran</c>
<c></c>
<l>Vector_Entidades_Segmento:=[]</l>
<l>for Index_temp := 0 to |Vector_Entidades|-1 by 1</l>
<c>    </c>
<l>    Aux:=Vector_Entidades[Index_temp]</l>
<l>    tuple_split (Aux, ';', Aux)</l>
<l>    Entidad:=Aux[0]</l>
<c>    </c>
<l>    Puntero_segmentos:=''</l>
<l>    for Index_temp_b := 0 to |Vector_ID_Core_by_Segment_Pallet|-1 by 1      </l>
<l>        tuple_strrstr (Vector_ID_Core_by_Segment_Pallet[Index_temp_b], Entidad, CoreExist)</l>
<l>        if (CoreExist &gt;=0)</l>
<l>            Puntero_segmentos:=Puntero_segmentos+';'+Index_temp_b</l>
<l>        endif</l>
<c>        </c>
<l>    endfor</l>
<c>    </c>
<l>    Vector_Entidades_Segmento[Index_temp]:=Entidad+Puntero_segmentos</l>
<l>    tuple_split (Vector_Entidades_Segmento[Index_temp], ';', Aux)</l>
<l>endfor</l>
<l>return ()</l>
</body>
<docu id="Get_Vector_Entidades">
<parameters>
<parameter id="Vector_Entidades_Segmento"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet"/>
</parameters>
</docu>
</procedure>
<procedure name="Find_Sector_Core">
<interface>
<ic>
<par name="Vector_ID_Core_by_Segment_Pallet" base_type="ctrl" dimension="0"/>
<par name="Vector_Entidades_Segmento" base_type="ctrl" dimension="0"/>
<par name="Path_CORE_ID" base_type="ctrl" dimension="0"/>
<par name="Path_3D_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_SFM_Segmentos" base_type="ctrl" dimension="0"/>
<par name="ROI3D_rotate" base_type="ctrl" dimension="0"/>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Visualizar3D" base_type="ctrl" dimension="0"/>
<par name="Vector_Segmento" base_type="ctrl" dimension="0"/>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
<par name="Sampling" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Vector_Existencia_Core" base_type="ctrl" dimension="2"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
</ic>
<oc>
<par name="Vector_Existencia_Core_New" base_type="ctrl" dimension="2"/>
</oc>
</interface>
<body>
<l>N_divisiones_Pallet:=9</l>
<l>N_divisiones_Pallet:=|Vector_ID_Core_by_Segment_Pallet|</l>
<l>dev_get_window (WindowHandle)</l>
<c></c>
<l>dev_inspect_ctrl(Vector_Existencia_Core)</l>
<l>for Index := 0 to N_divisiones_Pallet-1 by 1</l>
<l>    Vector_Existencia_Core.at(Index+1).at(0):=''</l>
<l>    Vector_Existencia_Core.at(Index+1).at(1):=false</l>
<c>    </c>
<l>endfor</l>
<c></c>
<c></c>
<l>* #########################################</l>
<c>**##### REVISAR #########################</c>
<l>* ## Si Vector_Entidades_Segmento funciona bien como limite del for</l>
<c></c>
<l>NEntidades:=|Vector_Entidades_Segmento|</l>
<c></c>
<c></c>
<l>try</l>
<c>    </c>
<l>    for N_Entidad := 0 to NEntidades-1 by 1</l>
<c>        </c>
<l>        tuple_split (Vector_Entidades_Segmento[N_Entidad], ';', Aux)</l>
<l>        Entidad_To_Find:=Aux[0]</l>
<l>        N_Sectores_To_Find:=|Aux|</l>
<l>        ROI3D:=[]</l>
<l>        dev_inspect_ctrl (Entidad_To_Find)</l>
<l>        dev_inspect_ctrl (Vector_Entidades_Segmento)</l>
<c>        </c>
<c>        </c>
<c>        ********************************************</c>
<c>        * Leo el SFM y STL del Core</c>
<c>        ********************************************</c>
<c>        </c>
<l>* #### Envio data de estado ########################      </l>
<l>        Estado:=9</l>
<l>        Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)     </l>
<l>* ################################################## </l>
<c>        </c>
<l>        if (Entidad_To_Find ==' ')</l>
<l>            Vector_Existencia_Core.at(N_Entidad+1).at(0):=Entidad_To_Find</l>
<l>            Vector_Existencia_Core.at(N_Entidad+1).at(1):=false</l>
<c>            </c>
<l>        else</l>
<c>            </c>
<l>            Get_SFM_STL (Entidad_To_Find, Path_CORE_ID, Path_3D_Segmentos, Path_SFM_Segmentos, Vector_Estado_Fx, SerialHandle, ObjectModel3D_Core_Pallet, SFM_Core_Pallet, Estado_Get_SFM_STL, Modelo3D_Select)</l>
<c>            </c>
<c>            </c>
<l>            for j := 1 to N_Sectores_To_Find-1 by 1</l>
<l>                N_Roi:=Aux[j]</l>
<l>                tuple_number (Aux[j], N_Roi)</l>
<l>                copy_object_model_3d (ROI3D_rotate[N_Roi], 'all', ROI3D_aux)</l>
<l>                ROI3D:=[ROI3D,ROI3D_aux]              </l>
<l>            endfor</l>
<l>            Get_ROI_3D (ROI3D, Escena3D_RAW, Modelo_3D_ROI)</l>
<c>            </c>
<c>            </c>
<l>*            Visualizar_3D ([ ROI3D,Escena3D_RAW], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Visualizar3D, [], [], [], WindowHandle, PoseOut1)</l>
<l> *           Visualizar_3D ([Modelo_3D_ROI], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Visualizar3D, [], [], [], WindowHandle1, PoseOut1)</l>
<c>            </c>
<c>            ***************************************************************</c>
<c>            *Filtro la altura maxima</c>
<c>            * Utilizo esto para elminar el piso de la escena y evitar errores</c>
<l>            Altura_Maxima_camara_Piso_Pallet:=2400</l>
<c>            ***************************************************************</c>
<l>            Set_Max_Altura_Model3D (Modelo_3D_ROI, Altura_Maxima_camara_Piso_Pallet, SerialHandle, Modelo_3D_ROI_Thres)</l>
<c>            </c>
<c>            </c>
<l>*            Visualizar_3D ([Modelo_3D_ROI_Thres], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Visualizar3D, [], [], [], WindowHandle2, PoseOut1)</l>
<l> *          Visualizar_3D ([ObjectModel3D_Core_Pallet], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Visualizar3D, [], [], [], WindowHandle3, PoseOut1)</l>
<c>            </c>
<l>            N_Model_To_Find:=|Modelo_3D_ROI_Thres|</l>
<l>            if (|Modelo_3D_ROI_Thres|&gt;1)</l>
<c>                </c>
<l>                union_object_model_3d (Modelo_3D_ROI_Thres, 'points_surface', Modelo_3D_ROI_Thres)</l>
<l>*                Visualizar_3D ([Modelo_3D_ROI_Thres], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Visualizar3D, [], [], [], WindowHandle4, PoseOut1)</l>
<c>                </c>
<l>            endif</l>
<c>                      </c>
<c>            ****************************</c>
<c>            * Parametros de control</c>
<c>            ****************************</c>
<l>            Sampling_Find := 0.05</l>
<l>            Keypoint := 1</l>
<l>            MinScore := 0.01</l>
<l>            N_matches := N_Model_To_Find</l>
<l>            SFM:=SFM_Core_Pallet</l>
<l>            Escena3D:=Modelo_3D_ROI_Thres</l>
<l>            Mod_3D_Objeto:=ObjectModel3D_Core_Pallet</l>
<c>            </c>
<l>            Visualizar_3D ([Escena3D,Mod_3D_Objeto], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Visualizar3D, [], [], [], WindowHandle, PoseOut1)</l>
<c>            </c>
<c>            ****************************</c>
<l>* #### Envio data de estado ###############################################</l>
<l>            Estado:=10</l>
<l>            Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)            </l>
<l>* ######################################################################### </l>
<c>            </c>
<c>            </c>
<l> *           Find_Entity_3D (N_matches, SFM, Escena3D, Sampling_Find, Keypoint, MinScore, Mod_3D_Objeto, Modelo_3D_ROI_ThresEdges, PoseMLS, ScoreMLS, Pose_Refinada, Score_Refinado, SurfaceMatchingResultID1, Posicion3D_Objeto, Posicion3D_Objeto_REFIN, Obj_Detectado)</l>
<c>            </c>
<c>   </c>
<l>            if ( true)               </l>
<l>* #### Envio data de estado ###############################################               </l>
<l>                Estado:=11</l>
<l>                Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)             </l>
<l>* ######################################################################### </l>
<c>                    </c>
<l>                Vector_Existencia_Core.at(N_Entidad+1).at(0):=1</l>
<l>                Vector_Existencia_Core.at(N_Entidad+1).at(1):=true</l>
<l>            else</l>
<c>                </c>
<l>                Vector_Existencia_Core.at(N_Entidad+1).at(0):=Entidad_To_Find</l>
<l>                Vector_Existencia_Core.at(N_Entidad+1).at(1):=false</l>
<l>            endif</l>
<l>            clear_object_model_3d([ROI3D,Modelo_3D_ROI,ObjectModel3D_Core_Pallet])</l>
<l>            clear_surface_model (SFM_Core_Pallet)</l>
<l>        endif</l>
<c>        </c>
<l>    endfor</l>
<l>catch (Exception)</l>
<l>    Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<c>    </c>
<l>endtry</l>
<l>Vector_Existencia_Core_New:=Vector_Existencia_Core</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Find_Sector_Core">
<parameters>
<parameter id="Escena3D_RAW"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="Path_3D_Segmentos"/>
<parameter id="Path_CORE_ID"/>
<parameter id="Path_SFM_Segmentos"/>
<parameter id="ROI3D_rotate"/>
<parameter id="Sampling"/>
<parameter id="SerialHandle"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="Vector_Entidades_Segmento"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="Vector_Existencia_Core"/>
<parameter id="Vector_Existencia_Core_New"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet"/>
<parameter id="Vector_Segmento"/>
<parameter id="Visualizar3D"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_Pulse_EthernetIp_Data">
<interface>
<ic>
<par name="Tag_Destino" base_type="ctrl" dimension="0"/>
<par name="Variable_On" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Variable_Off" base_type="ctrl" dimension="0"/>
<par name="Time" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>    Send_EthernetIP_Data (Tag_Destino, Variable_On, SerialHandle)</l>
<l>    wait_seconds(Time)</l>
<l>   Send_EthernetIP_Data (Tag_Destino, Variable_Off, SerialHandle)</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Send_Pulse_EthernetIp_Data">
<parameters>
<parameter id="SerialHandle"/>
<parameter id="Tag_Destino"/>
<parameter id="Time"/>
<parameter id="Variable_Off"/>
<parameter id="Variable_On"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Vector_Estados">
<interface>
<oc>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
</oc>
</interface>
<body>
<l>Vector_Estado_Fx	:=	{ {[]}}</l>
<l>Vector_Estado_Fx.at(0).at(0)	:=	 'Valor Estado'</l>
<l>Vector_Estado_Fx.at(0).at(1)	:=	 'Codificacion'</l>
<c>		</c>
<l>Nestado	:=	1</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 'Adquiriendo fotografia'</l>
<l>Nestado	:=	2</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' Adquiriendo informacion de pallets'</l>
<l>Nestado	:=	3</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 'Analizando Pallet'</l>
<l>Nestado	:=	4</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 'Fallo en adquisición de imagen'</l>
<l>Nestado	:=	5</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 'Fallo en ROI Pallet'</l>
<l>Nestado	:=	6</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 'Buscando esquina del pallet'</l>
<l>Nestado	:=	7</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 'No se detecto Esquina de Pallet'</l>
<l>Nestado	:=	8</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' Busco de manera sectorizada cada core en el pallet'</l>
<l>Nestado	:=	9</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 'Leyendo STl del Core'</l>
<l>Nestado	:=	10</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	  'Buscando core en el segmento del pallet'</l>
<l>Nestado	:=	11</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 'Core  DETECTADO en segmento de PALLET'</l>
<l>Nestado	:=	12</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	   'No se detecto Core en el segmento del pallet'</l>
<l>Nestado	:=	13</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	  'Escritura de existencia de cores de Pallet solicitado'</l>
<l>Nestado	:=	14</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 'Detección de patrón Exitoso'</l>
<l>Nestado	:=	15</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 'No se a logrado extraer el patrón'</l>
<l>Nestado	:=	16</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	  'Buscando Patrón'</l>
<l>Nestado	:=	17</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 'Enviando coordenadas de patrón al Robot'</l>
<l>Nestado	:=	18</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 'Fin GET_PATRON_POSE'</l>
<l>Nestado	:=	19</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 '#### BLOQUE  0 INICIADO ####'</l>
<l>Nestado	:=	20</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 'Adquiriendo Multifoto'</l>
<l>Nestado	:=	21</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' Busqueda Finalizada'</l>
<l>Nestado	:=	22</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 '  ### Error ### Orientacion de Core detectado Incorrecta '</l>
<l>Nestado	:=	23</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' ### Error ### Manga No Detectada'</l>
<l>Nestado	:=	24</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' Leyendo Modelo de 3D'</l>
<l>Nestado	:=	25</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' Leyendo Modelo de Superficie'</l>
<l>Nestado	:=	26</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	27</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	28</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	29</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	30</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	31</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	32</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	33</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	34</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	35</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	36</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	37</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	38</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	39</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	40</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	41</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	42</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	43</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	44</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	45</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	46</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	47</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	48</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	49</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	50</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	51</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	52</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	53</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	54</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	55</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	56</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	57</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	58</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	59</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	60</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	61</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	62</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	63</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	64</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	65</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	66</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	67</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	68</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	69</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	70</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	71</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	72</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	73</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	74</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	75</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	76</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	77</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	78</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	79</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	80</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	81</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	82</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	83</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	84</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	85</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	86</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	87</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	88</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	89</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	90</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	91</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<l>Nestado	:=	92</l>
<l>Vector_Estado_Fx.at(Nestado).at(0) 	:=	Nestado</l>
<l>Vector_Estado_Fx.at(Nestado).at(1) 	:=	 ' '</l>
<c></c>
</body>
<docu id="Get_Vector_Estados">
<parameters>
<parameter id="Vector_Estado_Fx"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_Estado_Subproceso">
<interface>
<ic>
<par name="Variable_On" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Tag_Destino" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c> </c>
<c>    *Tiempo en segundos</c>
<l>    Time:=1</l>
<l>    Variable_Off:=0</l>
<l>    Send_Pulse_EthernetIp_Data (Tag_Destino, Variable_On, SerialHandle, Variable_Off, Time)</l>
<c>    </c>
<c>    </c>
<l>return ()</l>
</body>
<docu id="Send_Estado_Subproceso">
<parameters>
<parameter id="SerialHandle"/>
<parameter id="Tag_Destino"/>
<parameter id="Variable_On"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Core_Presence">
<interface>
<oo>
<par name="Objeto_1" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="Vector_ID_Core_by_Segment_Pallet_1" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_2" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_3" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_4" base_type="ctrl" dimension="0"/>
<par name="Path_SFM_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_3D_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_CORE_ID" base_type="ctrl" dimension="0"/>
<par name="N_Pallet_to_Scan" base_type="ctrl" dimension="0"/>
<par name="NxLib_1" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_5" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_6" base_type="ctrl" dimension="0"/>
<par name="ExisteAlgunApilado" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="g_CamInBasePose1" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<l>Parametros_Visualizacion:=['disp_pose','color_attrib','lut','disp_lines','point_size']</l>
<l>Valores_Visualizacion:= ['true','coord_z','rainbow','false',1]</l>
<l>dev_get_window (WindowHandle)</l>
<c></c>
<c>*****************************************************</c>
<l>Estado:=1</l>
<l>Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* ###################################################</l>
<c></c>
<l>Get_Vector_Info_Cores_byUser (N_Pallet_to_Scan,\
                              Vector_ID_Core_by_Segment_Pallet_1, Vector_ID_Core_by_Segment_Pallet_2, Vector_ID_Core_by_Segment_Pallet_3, Vector_ID_Core_by_Segment_Pallet_4, Vector_ID_Core_by_Segment_Pallet_5, Vector_ID_Core_by_Segment_Pallet_6,\
                              Vector_ID_Core_by_Segment_Pallet)</l>
<c></c>
<c></c>
<c>** Busco si todos son sleeves</c>
<c></c>
<l>Is_a_Sleeve (Vector_ID_Core_by_Segment_Pallet, IsA_Sleeve)</l>
<c></c>
<c>*****************************************************************************************************************************</c>
<c>************  Capturo Imagenes **********************************************************************************************</c>
<c></c>
<c></c>
<c>************************</c>
<c>* posicion de la camara*</c>
<c>************************</c>
<c></c>
<c></c>
<l>Get_Robot_Pose(SerialHandle,g_CamInBasePose1)</l>
<c></c>
<l>Get_Pallet_Model (Objeto_0, Objeto_1, Objeto_2, Objeto_3, Zobj1, Xobj1, Yobj1, Img_Left_Esquina, NxLib_1, Camera_1, Vector_Estado_Fx, \
                  SerialHandle, N_Pallet_to_Scan, IsA_Sleeve, Pose_Robot, Escena3D_RAW, Base_esquina, Estado_Fx) </l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>* Visualizar_3D ([Escena3D_RAW], Parametros_Visualizacion, Valores_Visualizacion, false, [], [], [], WindowHandle, PoseOut1)</l>
<c></c>
<c></c>
<c>******************************************************************************************************************************</c>
<l>if (Estado_Fx=false)</l>
<l>    Mensaje:='##ERROR## Bloque 0'</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<c>    </c>
<l>    return()</l>
<c>    </c>
<l>endif</l>
<c>*********************************************************************   </c>
<c></c>
<c></c>
<l>* ################################################################################</l>
<c>*2. Adquiero informacion del usuario quien indica donde ira cada core en el pallet</c>
<l>* ################################################################################</l>
<c></c>
<l>* #### Envio data de estado ######################################################</l>
<l>Estado:=2</l>
<l>Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<c></c>
<l>* ###############################################################################</l>
<c>*3. Busco los cores del usuario Vector_ID_Core_by_Segment_Pallet en el pallet N_Pallet_to_Scan</c>
<l>* ###############################################################################</l>
<c></c>
<l>* #### Envio data de estado ########################</l>
<l>Estado:=3</l>
<l>Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* ################################################## </l>
<c></c>
<c></c>
<l>Vector_Existencia_Core:={ { [] } }</l>
<l>Vector_Existencia_Core.at(0).at(0):='CORE'</l>
<l>Vector_Existencia_Core.at(0).at(1):='Existencia'</l>
<l>Visualizar3D:=false</l>
<c></c>
<c></c>
<c>*Escritura de Vector_Existencia_Core_New</c>
<l>Variable_PLC_Existencia:='_EV01_I_Pallet'+N_Pallet_to_Scan+'ZValid.'</l>
<l>Nsectores_Pallet:=9</l>
<c></c>
<c></c>
<c></c>
<l>try</l>
<l>  for j := 1 to Nsectores_Pallet by 1</l>
<c></c>
<l>   if (Vector_ID_Core_by_Segment_Pallet[j-1] = ' ')</l>
<l>        Tag_Destino:=Variable_PLC_Existencia+(j)</l>
<c>        *************************</c>
<l>        Valor_Variable:=1</l>
<c>        *************************</c>
<l>        Send_EthernetIP_Data (Tag_Destino, Valor_Variable, SerialHandle)</l>
<c>    </c>
<l>   else</l>
<l>        Tag_Destino:=Variable_PLC_Existencia+(j)</l>
<c>        *************************</c>
<l>        Valor_Variable:=0</l>
<c>        *************************</c>
<l>        Send_Data_Info('-------------------------',SerialHandle)</l>
<l>        Send_EthernetIP_Data (Tag_Destino, Valor_Variable, SerialHandle)</l>
<l>        Send_Data_Info('-------------------------',SerialHandle)</l>
<c>        </c>
<l>   endif</l>
<c>        </c>
<c>    </c>
<c>    </c>
<l>endfor  </l>
<l>catch (Exception)</l>
<l>    Send_Data_Info(Exception,SerialHandle)</l>
<l>endtry</l>
<c></c>
<c></c>
<c>***************************************************</c>
<l>* try</l>
<l>*   for j := 1 to Nsectores_Pallet by 1</l>
<c></c>
<c></c>
<l>*         Tag_Destino:=Variable_PLC_Existencia+(j)</l>
<c>        *************************</c>
<l>*         Valor_Variable:=1</l>
<c>        *************************</c>
<l>*         Send_EthernetIP_Data (Tag_Destino, Valor_Variable, SerialHandle)   </l>
<l>* endfor  </l>
<l>* catch (Exception)</l>
<l>*     Send_Data_Info(Exception,SerialHandle)</l>
<l>* endtry</l>
<c>*****************************************************</c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>Send_Data_Info('----------&gt; Es apilado? &lt;----------',SerialHandle)</l>
<c>****************************************************************</c>
<c>*Escribo si existen algun elemento apilado</c>
<c>****************************************************************</c>
<l>Tag_Destino:='_EV01_I_EsApilado'</l>
<c>****************************************************************</c>
<l>Valor_Variable:=ExisteAlgunApilado</l>
<c>*****************************************************************</c>
<l>Send_EthernetIP_Data (Tag_Destino, Valor_Variable, SerialHandle)</l>
<c>*****************************************************************</c>
<l>if (Valor_Variable =1)</l>
<l>    Send_Data_Info('----------&gt; SI &lt;----------',SerialHandle)</l>
<l>else</l>
<l>    Send_Data_Info('----------&gt; NO &lt;----------',SerialHandle)</l>
<l>endif</l>
<c></c>
<c></c>
<c>****************************************************************************</c>
<c>* Es una Manga </c>
<c>****************************************************************************</c>
<l>Send_Data_Info('----------&gt; Es Manga? &lt;----------',SerialHandle)</l>
<c></c>
<l>if (IsA_Sleeve)</l>
<l>    Tag_Manga:='_EBD_I_NumEntidad'</l>
<l>    NumEntidadManga:=3</l>
<l>    Send_EthernetIP_Data(Tag_Manga, NumEntidadManga, SerialHandle)</l>
<l>    Send_Data_Info('----------&gt; SI &lt;----------',SerialHandle)</l>
<l>else</l>
<l>    Tag_Manga:='_EBD_I_NumEntidad'</l>
<l>    NumEntidadManga:=2</l>
<l>    Send_EthernetIP_Data(Tag_Manga, NumEntidadManga, SerialHandle)</l>
<l>    Send_Data_Info('----------&gt; NO &lt;----------',SerialHandle)</l>
<l>endif</l>
<c>*****************************************************************************</c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>* #### Envio data de estado ########################</l>
<l>Procesando:=1</l>
<l>Resultado:=1</l>
<l>Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<c></c>
<l>dev_set_line_width (1)</l>
<c></c>
<c></c>
<l>Send_Data_Info('----------&gt; Fin de BLOQUE 1 &lt;----------',SerialHandle)</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Core_Presence">
<parameters>
<parameter id="Camera_1"/>
<parameter id="ExisteAlgunApilado"/>
<parameter id="N_Pallet_to_Scan"/>
<parameter id="NxLib_1"/>
<parameter id="Objeto_1"/>
<parameter id="Path_3D_Segmentos"/>
<parameter id="Path_CORE_ID"/>
<parameter id="Path_SFM_Segmentos"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_1"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_2"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_3"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_4"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_5"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_6"/>
<parameter id="g_CamInBasePose1"/>
</parameters>
</docu>
</procedure>
<procedure name="BD_Dinamica">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Estado" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
</ic>
<oc>
<par name="Vector_ID_Core_by_Segment_Pallet_1" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_2" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_3" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_4" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_5" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_6" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<l>Estado:=2</l>
<l>Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<c></c>
<c></c>
<l>Variable_BD := 'pallet_1'</l>
<l>Get_Pallet_BD (Variable_BD, SerialHandle, DataBD, FXcheck)</l>
<l>for Index := 0 to |DataBD|-1 by 1  </l>
<l>    Vector_ID_Core_by_Segment_Pallet_1[Index]:=DataBD[Index]</l>
<l>endfor</l>
<c></c>
<l>Variable_BD := 'pallet_2'</l>
<l>Get_Pallet_BD (Variable_BD, SerialHandle, DataBD, FXcheck1)</l>
<l>for Index := 0 to |DataBD|-1 by 1  </l>
<l>    Vector_ID_Core_by_Segment_Pallet_2[Index]:=DataBD[Index]</l>
<l>endfor</l>
<c></c>
<l>Variable_BD := 'pallet_3'</l>
<l>Get_Pallet_BD (Variable_BD, SerialHandle, DataBD, FXcheck2)</l>
<l>for Index := 0 to |DataBD|-1 by 1  </l>
<l>    Vector_ID_Core_by_Segment_Pallet_3[Index]:=DataBD[Index]</l>
<l>endfor</l>
<c></c>
<l>Variable_BD := 'pallet_4'</l>
<l>Get_Pallet_BD (Variable_BD, SerialHandle, DataBD, FXcheck3)</l>
<l>for Index := 0 to |DataBD|-1 by 1  </l>
<l>    Vector_ID_Core_by_Segment_Pallet_4[Index]:=DataBD[Index]</l>
<l>endfor</l>
<c></c>
<l>Variable_BD := 'pallet_5'</l>
<l>Get_Pallet_BD (Variable_BD, SerialHandle, DataBD, FXcheck4)</l>
<l>for Index := 0 to |DataBD|-1 by 1  </l>
<l>    Vector_ID_Core_by_Segment_Pallet_5[Index]:=DataBD[Index]</l>
<l>endfor</l>
<c></c>
<c></c>
<l>Variable_BD := 'pallet_6'</l>
<l>Get_Pallet_BD (Variable_BD, SerialHandle, DataBD, FXcheck5)</l>
<l>for Index := 0 to |DataBD|-1 by 1  </l>
<l>    Vector_ID_Core_by_Segment_Pallet_6[Index]:=DataBD[Index]</l>
<l>endfor</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="BD_Dinamica">
<parameters>
<parameter id="Estado"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_1"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_2"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_3"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_4"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_5"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_6"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_Data_Proceso">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Resultado" base_type="ctrl" dimension="0"/>
<par name="Procesando" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c></c>
<l>* ##### Envio de Procesando  #######################</l>
<l>Estado_SubProceso:=Procesando </l>
<l>Tag_Destino:='_EV01_I_Procesando'</l>
<l>Valor_Variable:=Estado_SubProceso</l>
<l>Send_EthernetIP_Data (Tag_Destino, Valor_Variable, SerialHandle)</l>
<l>* #### Fin envio de Resultado ######################  </l>
<c></c>
<c></c>
<c></c>
<l>* ##### Envio de Resultado  #######################</l>
<l>* # [1] = Bien [2] = falla</l>
<l>Tag_Destino:='_EV01_I_Resultado'</l>
<l>Variable_On:=Resultado</l>
<c></c>
<c></c>
<l>Send_EthernetIP_Data (Tag_Destino, Variable_On, SerialHandle) </l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>* #### Fin envio de Resultado ######################  </l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Send_Data_Proceso">
<parameters>
<parameter id="Procesando"/>
<parameter id="Resultado"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_Estado_Subproceso_COPY_1">
<interface>
<ic>
<par name="Variable_On" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Tag_Destino" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* </c>
<c>* Tiempo en segundos</c>
<l>Time := 0.5</l>
<l>Variable_Off := 0</l>
<l>Send_Pulse_EthernetIp_Data (Tag_Destino, Variable_On, SerialHandle, Variable_Off, Time)</l>
<l>return ()</l>
</body>
<docu id="Send_Estado_Subproceso_COPY_1">
<parameters>
<parameter id="SerialHandle"/>
<parameter id="Tag_Destino"/>
<parameter id="Variable_On"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Rectif_Image">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="ImageMapped" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="CameraParameters" base_type="ctrl" dimension="0"/>
<par name="CameraPose" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ScaleForCenteredImage" base_type="ctrl" dimension="0"/>
<par name="PoseForCenteredImage" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>ImageOut := Image</l>
<l>get_image_size (ImageOut, Width, Height)</l>
<l>CenterRow := Width/2</l>
<l>CenterCol := Height/2</l>
<l>WidthMappedImage := Width</l>
<l>HeightMappedImage := Height</l>
<l>parameters_image_to_world_plane_centered (CameraParameters, CameraPose, CenterRow, CenterCol, WidthMappedImage, HeightMappedImage, ScaleForCenteredImage, PoseForCenteredImage)</l>
<c>* </c>
<c>* </c>
<l>gen_image_to_world_plane_map (Map, CameraParameters, PoseForCenteredImage, Width, Height, WidthMappedImage, HeightMappedImage, ScaleForCenteredImage, 'bilinear')</l>
<l>map_image (ImageOut, Map, ImageMapped)</l>
<c>* </c>
<l>return ()</l>
</body>
<docu id="Get_Rectif_Image">
<parameters>
<parameter id="CameraParameters"/>
<parameter id="CameraPose"/>
<parameter id="Image"/>
<parameter id="ImageMapped"/>
<parameter id="PoseForCenteredImage"/>
<parameter id="ScaleForCenteredImage"/>
</parameters>
</docu>
</procedure>
<procedure name="calc_calplate_pose_movingcam">
<interface>
<ic>
<par name="CalibObjInBasePose" base_type="ctrl" dimension="0"/>
<par name="ToolInCamPose" base_type="ctrl" dimension="0"/>
<par name="ToolInBasePose" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="CalibObjInCamPose" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* CalibObjInCamPose = cam_H_calplate</c>
<c>*                   = cam_H_tool * tool_H_base * base_H_calplate</c>
<c>*                   = ToolInCamPose * BaseInToolPose * CalibrationPose</c>
<l>pose_invert (ToolInBasePose, BaseInToolPose)</l>
<l>pose_compose (ToolInCamPose, BaseInToolPose, BaseInCamPose)</l>
<l>pose_compose (BaseInCamPose, CalibObjInBasePose, CalibObjInCamPose)</l>
<c>* </c>
<c>* </c>
<c>* </c>
<c>* </c>
<l>return ()</l>
</body>
<docu id="calc_calplate_pose_movingcam">
<short lang="en_US">compute cam_H_calplate from hand-eye calibration results</short>
<short lang="es_ES">compute cam_H_calplate from hand-eye calibration results</short>
<parameters>
<parameter id="CalibObjInBasePose"/>
<parameter id="CalibObjInCamPose"/>
<parameter id="ToolInBasePose"/>
<parameter id="ToolInCamPose"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Pose_Caltab">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="CameraParameters" base_type="ctrl" dimension="0"/>
<par name="CalTabFile" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="PoseForCalibrationPlate" base_type="ctrl" dimension="0"/>
<par name="EstadoFx" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>try</l>
<l>    ImageOut := Image</l>
<c>    </c>
<l>    dev_get_window (WindowHandle)</l>
<c>    </c>
<l>    create_calib_data ('hand_eye_moving_cam', 1, 1, CalibDataID)</l>
<l>    set_calib_data_cam_param (CalibDataID, 0, [], CameraParameters)</l>
<l>    set_calib_data_calib_object (CalibDataID, 0, CalTabFile)</l>
<l>    set_calib_data (CalibDataID, 'model', 'general', 'optimization_method', 'nonlinear')</l>
<c>    * </c>
<l>    find_calib_object (ImageOut, CalibDataID, 0, 0, 0, [], [])</l>
<c>    </c>
<l>*     find_caltab (Image, CalPlate, CalTabFile, 11, 100, 20)</l>
<l>*     find_marks_and_pose (Image, CalPlate, CalTabFile, CameraParameters, 128, 10, 18, 0.9, 15, 100, RCoord1, CCoord1, StartPose)</l>
<l>*     dev_set_color ('blue')</l>
<l>*     disp_cross (200000, RCoord1, CCoord1, 40, StartPose[5])</l>
<c>    * </c>
<l>    get_calib_data_observ_contours (Caltab, CalibDataID, 'caltab', 0, 0, 0)</l>
<l>    get_calib_data_observ_points (CalibDataID, 0, 0, 0, RCoord, CCoord, Index, PoseForCalibrationPlate)</l>
<l>    disp_cross (WindowHandle, RCoord, CCoord, 50, 0)</l>
<c>    * *****************************************************************</c>
<c>    * Si quiero [mm]</c>
<l>    dev_set_colored (3)</l>
<l>    disp_3d_coord_system (WindowHandle, CameraParameters, PoseForCalibrationPlate, 0.20)</l>
<c></c>
<c>    *****************************   </c>
<l>    OsffetX:=23.8</l>
<l>    OsffetY:=17.19</l>
<l>    OsffetZ:=5.08</l>
<c>    *****************************</c>
<c>    </c>
<l>    PoseForCalibrationPlate[0]:=PoseForCalibrationPlate[0]+OsffetX*1e-3</l>
<l>    PoseForCalibrationPlate[1]:=PoseForCalibrationPlate[1]+OsffetY*1e-3</l>
<l>    PoseForCalibrationPlate[2]:=PoseForCalibrationPlate[2]+OsffetZ*1e-3</l>
<c>    </c>
<c>    *****************************</c>
<c>    </c>
<l>    PoseForCalibrationPlate[0:2] := PoseForCalibrationPlate[0:2]*1000  </l>
<l>    PoseForCalibrationPlate[3]:= PoseForCalibrationPlate[3]*0</l>
<l>    PoseForCalibrationPlate[4]:=PoseForCalibrationPlate[4]*0</l>
<c>    </c>
<c>    </c>
<l>*     dev_inspect_ctrl(PoseForCalibrationPlate)</l>
<l>    PoseDisplay:=PoseForCalibrationPlate</l>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    * ****************************************************************</c>
<c>    * </c>
<l>*     dev_inspect_ctrl (PoseForCalibrationPlate)</l>
<c>    * </c>
<c>    * </c>
<c>    </c>
<l>    Length := |RCoord|</l>
<l>    texto[0] := 'Org X: '</l>
<l>    texto[1] := 'Org Y: '</l>
<l>    texto[2] := 'Org Z: '</l>
<l>    texto[3] := 'Org C: '</l>
<l>    texto[4] := 'Org B: '</l>
<l>    texto[5] := 'Org A: '</l>
<l>    texto[6] := ' '</l>
<c>    * </c>
<l>    N_ossf := 13</l>
<l>    dev_disp_text (texto+PoseDisplay, 'image', RCoord[Length-N_ossf], CCoord[Length-N_ossf], 'black', 'box_color', '#ffffff77')</l>
<c>    </c>
<l>    clear_calib_data (CalibDataID)</l>
<c>    </c>
<c>    </c>
<l>    EstadoFx:=true</l>
<l>catch (Exception)</l>
<l>     get_system_time (MSecond, Second, Minute, Hour, Day, YDay, Month, Year)</l>
<l>     write_object (Image, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/ImagenNODECT_'+Month+Day+Hour+Second)</l>
<c>    </c>
<l>    Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>endtry</l>
<c>* </c>
<l>return ()</l>
<c>* </c>
<c>* </c>
</body>
<docu id="Get_Pose_Caltab">
<parameters>
<parameter id="CalTabFile"/>
<parameter id="CameraParameters"/>
<parameter id="EstadoFx"/>
<parameter id="Image"/>
<parameter id="PoseForCalibrationPlate"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Cam_Parameters">
<interface>
<oc>
<par name="StartCamParam" base_type="ctrl" dimension="0"/>
<par name="CameraPose" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c>*****************************</c>
<c>* Chile*            </c>
<l>read_cam_par ('C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/7.-HandEye/2. procilica/FAT_Parameters/ParametrosBases.cal', StartCamParam)</l>
<c>******************************</c>
<c>* USA</c>
<l>read_cam_par ('C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/7.-HandEye/2. procilica/FAT_Parameters/ParametrosBases.cal', StartCamParam)</l>
<c></c>
<l>   CameraPose := [0.0920832,-0.0275879,0.791785,358.714,1.19796,90.4632,0]</l>
<c>*************************  </c>
<c>  </c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Cam_Parameters">
<parameters>
<parameter id="CameraPose"/>
<parameter id="StartCamParam"/>
</parameters>
</docu>
</procedure>
<procedure name="Bloque_2">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="AcqHandle" base_type="ctrl" dimension="0"/>
<par name="CameraParameters" base_type="ctrl" dimension="0"/>
<par name="CameraPose" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Estado_SubProceso" base_type="ctrl" dimension="0"/>
<par name="PoseForCalibrationPlate" base_type="ctrl" dimension="0"/>
<par name="ToolInCamPose" base_type="ctrl" dimension="0"/>
<par name="ToolInBasePose" base_type="ctrl" dimension="0"/>
<par name="ObjInBasePoseOut" base_type="ctrl" dimension="0"/>
<par name="EstadoFx" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>CameraPoseOut := CameraPose</l>
<l>Mensaje:='Inicio BLOQUE 2. Busqueda de patron en Pattern'</l>
<l>Send_Data_Info (Mensaje, SerialHandle)</l>
<c></c>
<c></c>
<l>ExposureTime:=350000</l>
<l>Ganancia:=16</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>try</l>
<c>    * Reseteo las variable de resultado</c>
<l>* # ### Envio data de estado ########################</l>
<l>    Estado := 1</l>
<l>    Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>    Resultado := 0</l>
<l>    Procesando := 1</l>
<l>    Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* # #################################################</l>
<c>    </c>
<l>    Time:=ExposureTime</l>
<l>    Gain:=Ganancia</l>
<l>    Set_exposure_Time_cam_0 (AcqHandle, Time, Gain) </l>
<c>    </c>
<l>    Get_Image (Image, AcqHandle, g_Error_CamaraOpt_Adq)</l>
<l>    dev_display (Image)</l>
<l>    get_image_size (Image, Width, Height)</l>
<c>    </c>
<c>    </c>
<c>    ***********************************************************************</c>
<c>    ****** Guardo las Imagenes ********************************************</c>
<l>    get_system_time (MSecond, Second, Minute, Hour, Day, YDay, Month, Year)</l>
<c>    </c>
<l>    write_object (Image, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/Imagen'+Month+Day+Hour+Second)</l>
<c>    </c>
<c>    **read_image (Image, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/Imagen7241249.hobj')</c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    ************************************************************************</c>
<c>    * **************************************************</c>
<c>    * Hand Eye Apunto al Descriptor</c>
<c>    * **************************************************</c>
<l>    Mensaje:='Cargando descriptores de distorcion y de patron'</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<c>    </c>
<l>    Calibration:='5x5_10'</l>
<l>    CalTabFile := 'C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/6.- Caltab Din3/Caltab'+Calibration+'.descr'</l>
<l>    Get_Cam_Parameters (StartCamParam, CameraPoseOut)</l>
<c>    </c>
<c>    </c>
<c>    * **************************************************</c>
<l>* # ### Envio data de estado ########################</l>
<l>    Estado := 16</l>
<l>    Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* # #################################################</l>
<c>    * </c>
<l>    Get_Pose_Caltab (Image, StartCamParam, CalTabFile, SerialHandle, PoseForCalibrationPlate, EstadoFx)</l>
<c>    </c>
<l>*     Get_Robot_Pose(SerialHandle,ToolInBasePose)</l>
<c>    </c>
<l>*     Get_ObjInBasePose (PoseForCalibrationPlate, ToolInBasePose, ObjInBasePose)</l>
<c>    </c>
<l>    if (EstadoFx)</l>
<l>        Estado := 14</l>
<l>        Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<c>        * *******************************</c>
<c>        * Enviar por ETHERNETIP</c>
<c>        * *******************************      </c>
<l>* # ### Envio data de estado ########################</l>
<l>        Estado := 17</l>
<l>        Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* # #################################################</l>
<c>        </c>
<c>        </c>
<l>        Send_Data_To_Robot(PoseForCalibrationPlate, SerialHandle)       </l>
<l>        Resultado := 1</l>
<l>        Procesando := 1</l>
<l>        Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* # #################################################</l>
<c>        </c>
<c>        </c>
<c>        </c>
<l>    endif</l>
<c>    </c>
<c>    </c>
<l>Mensaje:='####### FIN BLOQUE 2. Busqueda de patron en Pattern #######' </l>
<l>Send_Data_Info (Mensaje, SerialHandle)</l>
<l>return ()</l>
<c>    </c>
<l>catch (Exception)</l>
<c>    </c>
<l>   * write_object (Image, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/ImagenNODECT_'+Month+Day+Hour+Second)</l>
<c>    </c>
<c>    </c>
<l>* # ### Envio data de estado ########################</l>
<l>    Estado := 15</l>
<l>    Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>    Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<l>    return ()</l>
<c>    </c>
<l>* # #################################################</l>
<c>    </c>
<l>endtry</l>
<c></c>
<c></c>
<c></c>
<c>************************************************************************************************************************************</c>
<c>*</c>
<c>************************************************************************************************************************************</c>
</body>
<docu id="Bloque_2">
<parameters>
<parameter id="AcqHandle"/>
<parameter id="CameraParameters"/>
<parameter id="CameraPose"/>
<parameter id="EstadoFx"/>
<parameter id="Estado_SubProceso"/>
<parameter id="ObjInBasePoseOut"/>
<parameter id="PoseForCalibrationPlate"/>
<parameter id="SerialHandle"/>
<parameter id="ToolInBasePose"/>
<parameter id="ToolInCamPose"/>
<parameter id="Vector_Estado_Fx"/>
</parameters>
</docu>
</procedure>
<procedure name="parameters_image_to_world_plane_centered">
<interface>
<ic>
<par name="CamParam" base_type="ctrl" dimension="0"/>
<par name="Pose" base_type="ctrl" dimension="0"/>
<par name="CenterRow" base_type="ctrl" dimension="0"/>
<par name="CenterCol" base_type="ctrl" dimension="0"/>
<par name="WidthMappedImage" base_type="ctrl" dimension="0"/>
<par name="HeightMappedImage" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ScaleForCenteredImage" base_type="ctrl" dimension="0"/>
<par name="PoseForCenteredImage" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* Determine the scale for the mapping</c>
<c>* (here, the scale is determined such that in the</c>
<c>*   surroundings of the given point  the image scale of the</c>
<c>*   mapped image is similar to the image scale of the original image)</c>
<l>Dist_ICS := 1</l>
<l>image_points_to_world_plane (CamParam, Pose, CenterRow, CenterCol, 1, CenterX, CenterY)</l>
<l>image_points_to_world_plane (CamParam, Pose, CenterRow + Dist_ICS, CenterCol, 1, BelowCenterX, BelowCenterY)</l>
<l>image_points_to_world_plane (CamParam, Pose, CenterRow, CenterCol + Dist_ICS, 1, RightOfCenterX, RightOfCenterY)</l>
<l>distance_pp (CenterY, CenterX, BelowCenterY, BelowCenterX, Dist_WCS_Vertical)</l>
<l>distance_pp (CenterY, CenterX, RightOfCenterY, RightOfCenterX, Dist_WCS_Horizontal)</l>
<l>ScaleVertical := Dist_WCS_Vertical / Dist_ICS</l>
<l>ScaleHorizontal := Dist_WCS_Horizontal / Dist_ICS</l>
<l>ScaleForCenteredImage := (ScaleVertical + ScaleHorizontal) / 2.0</l>
<c>* Determine the parameters for set_origin_pose such</c>
<c>* that the point given via get_mbutton will be in the center of the</c>
<c>* mapped image</c>
<l>DX := CenterX - ScaleForCenteredImage * WidthMappedImage / 2.0</l>
<l>DY := CenterY - ScaleForCenteredImage * HeightMappedImage / 2.0</l>
<l>DZ := 0</l>
<l>set_origin_pose (Pose, DX, DY, DZ, PoseForCenteredImage)</l>
<l>return ()</l>
</body>
<docu id="parameters_image_to_world_plane_centered">
<short lang="en_US">Determines scale and pose for the operator image_to_world_plane such that a given point appears in the center and that the scale of the rectified image is similar to the scale of the original image.</short>
<short lang="es_ES">Determines scale and pose for the operator image_to_world_plane such that a given point appears in the center and that the scale of the rectified image is similar to the scale of the original image.</short>
<parameters>
<parameter id="CamParam"/>
<parameter id="CenterCol"/>
<parameter id="CenterRow"/>
<parameter id="HeightMappedImage"/>
<parameter id="Pose"/>
<parameter id="PoseForCenteredImage"/>
<parameter id="ScaleForCenteredImage"/>
<parameter id="WidthMappedImage"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Pose_Punto_Insercion">
<interface>
<ic>
<par name="PoseForCalibrationPlate" base_type="ctrl" dimension="0"/>
<par name="ToolInCamPose" base_type="ctrl" dimension="0"/>
<par name="ToolInBasePose" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ObjInBasePose" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* </c>
<l>ObjInCamPose := PoseForCalibrationPlate</l>
<c>* </c>
<l>ToolInCamPose_Aux := ToolInCamPose</l>
<c>* </c>
<l>pose_invert (ToolInCamPose, CamInToolPose)</l>
<l>pose_compose (ToolInBasePose, CamInToolPose, CamInBasePose)</l>
<l>pose_compose (CamInBasePose, ObjInCamPose, ObjInBasePose)</l>
<c>* </c>
<l>dev_inspect_ctrl (ObjInBasePose)</l>
<c>* </c>
<l>osffetX := 0</l>
<l>osffetY := 0</l>
<l>osffetZ := 0</l>
<c>* </c>
<l>pto1 := ObjInBasePose[0]+osffetX</l>
<l>pto2 := ObjInBasePose[1]+osffetY</l>
<l>pto3 := ObjInBasePose[2]+osffetZ</l>
<c>* </c>
<l>ObjInBasePose[0] := pto1</l>
<l>ObjInBasePose[1] := pto2</l>
<l>ObjInBasePose[2] := pto3</l>
<c>* </c>
<c>* </c>
<l>Get_Pose_Tool (SerialHandle, LapizInBasePose)</l>
<l>DinOssfet[0] := LapizInBasePose[0]-ObjInBasePose[0]</l>
<l>DinOssfet[1] := LapizInBasePose[1]-ObjInBasePose[1]</l>
<l>DinOssfet[2] := LapizInBasePose[2]-ObjInBasePose[2]</l>
<c>* </c>
<l>Get_Pose_Tool (SerialHandle, LapizInBasePose_Estimado)</l>
<l>DinOssfet[0] := LapizInBasePose[0]-LapizInBasePose_Estimado[0]</l>
<l>DinOssfet[1] := LapizInBasePose[1]-LapizInBasePose_Estimado[1]</l>
<l>DinOssfet[2] := LapizInBasePose[2]-LapizInBasePose_Estimado[2]</l>
<c>* </c>
<c>* </c>
<c>* </c>
<c>* </c>
<l>stop ()</l>
<c>* </c>
<c>* </c>
<l>return ()</l>
</body>
<docu id="Get_Pose_Punto_Insercion">
<parameters>
<parameter id="ObjInBasePose"/>
<parameter id="PoseForCalibrationPlate"/>
<parameter id="SerialHandle"/>
<parameter id="ToolInBasePose"/>
<parameter id="ToolInCamPose"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Pose_Tool">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ToolInBasePose" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>wait_seconds(0.1)</l>
<c></c>
<l>try</l>
<c>  </c>
<l>I := 0</l>
<c>* Leo Posicion del robot</c>
<l>disp_message (200000, 'NO MOVER ROBOT', 'window', 30, 12, 'black', 'true')</l>
<c>* </c>
<l>Tag_Lectura := '_EV01_O_EjeX'</l>
<l>Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>tuple_real (RV_CmdFotogen, Number)</l>
<l>Number := (Number)/10000.0 - 4000.0</l>
<c>* </c>
<l>posx[I] := Number</l>
<c></c>
<c></c>
<l>wait_seconds(0.1)</l>
<c></c>
<c></c>
<l>Tag_Lectura := '_EV01_O_EjeY'</l>
<l>Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>tuple_real (RV_CmdFotogen, Number)</l>
<l>Number := (Number)/10000.0 - 4000.0</l>
<l>posy[I] := Number</l>
<l>wait_seconds(0.1)</l>
<l>Tag_Lectura := '_EV01_O_EjeZ'</l>
<l>Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>tuple_real (RV_CmdFotogen, Number)</l>
<l>Number := (Number)/10000.0 - 4000.0</l>
<l>posz[I] := Number</l>
<l>wait_seconds(0.1)</l>
<l>Tag_Lectura := '_EV01_O_EjeC'</l>
<l>Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>tuple_real (RV_CmdFotogen, Number)</l>
<l>Number := (Number)/10000.0 - 4000.0</l>
<l>Roll[I] := Number</l>
<l>wait_seconds(0.1)</l>
<l>Tag_Lectura := '_EV01_O_EjeB'</l>
<l>Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>wait_seconds(0.1)</l>
<l>tuple_real (RV_CmdFotogen, Number)</l>
<l>Number := (Number)/10000.0 - 4000</l>
<l>Pitch[I] := Number</l>
<l>wait_seconds(0.1)</l>
<l>Tag_Lectura := '_EV01_O_EjeA'</l>
<l>Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>tuple_real (RV_CmdFotogen, Number)</l>
<l>wait_seconds(0.1) </l>
<l>Number := (Number)/10000 - 4000</l>
<l>Yaw[I] := Number</l>
<c>* </c>
<c>* Read pose of tool in robot base coordinates (ToolInBasePose)</c>
<l>create_pose (posx[I], posy[I], posz[I], Roll[I], Pitch[I], Yaw[I], 'Rp+T', 'abg', 'point', ToolInBasePose)</l>
<c>*   </c>
<l>catch (Exception)</l>
<c>    </c>
<l>    ToolInBasePose:=[]</l>
<l>    create_pose (-1, -1, -1, -1, -1, -1, 'Rp+T', 'abg', 'point', ToolInBasePose)</l>
<c>* </c>
<l>endtry</l>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Pose_Tool">
<parameters>
<parameter id="SerialHandle"/>
<parameter id="ToolInBasePose"/>
</parameters>
</docu>
</procedure>
<procedure name="Config_Parametros_Cam_R1">
<interface>
<ic>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera" base_type="ctrl" dimension="0"/>
<par name="NumberOfDisparities" base_type="ctrl" dimension="0"/>
<par name="MinimumDisparity" base_type="ctrl" dimension="0"/>
<par name="Projector" base_type="ctrl" dimension="0"/>
<par name="FrontLigth" base_type="ctrl" dimension="0"/>
<par name="AutoExposure" base_type="ctrl" dimension="0"/>
<par name="AutoGain" base_type="ctrl" dimension="0"/>
<par name="Gain" base_type="ctrl" dimension="0"/>
<par name="Exposure" base_type="ctrl" dimension="0"/>
<par name="FlexView" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="TempCam" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* </c>
<c>* Configuracion de parametros.</c>
<l>set_framegrabber_param (Camera, 'grab_data_items', ['Images/Rectified/Left', 'Images/Raw/Left', 'Images/PointMap'])</l>
<c>* </c>
<c>* </c>
<c>* Parametros para habilitar funciones directas de la camara</c>
<l>set_framegrabber_param (NxLib, 'Execute/Parameters/InitialTrigger', 'All')</l>
<c>* Proyector random de texturas</c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/Projector', Projector)</l>
<c>* Iluminacion</c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/FrontLight', FrontLigth)</l>
<c>* </c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/AutoExposure', AutoExposure)</l>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/AutoGain', AutoGain)</l>
<c></c>
<c></c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/Exposure', Exposure)</l>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/Gain', Gain)</l>
<c> </c>
<c>* ******************************************************************************************************</c>
<c></c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/DisparityMap/StereoMatching/NumberOfDisparities', NumberOfDisparities)</l>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/DisparityMap/StereoMatching/MinimumDisparity', MinimumDisparity)</l>
<c>* N° de imagenes de captura</c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/FlexView',FlexView)</l>
<c>* Temperatura de camara</c>
<l>get_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Sensor/Temperature', TempCam)</l>
<c>* </c>
<l>return ()</l>
</body>
<docu id="Config_Parametros_Cam_R1">
<parameters>
<parameter id="AutoExposure"/>
<parameter id="AutoGain"/>
<parameter id="Camera"/>
<parameter id="Exposure"/>
<parameter id="FlexView"/>
<parameter id="FrontLigth"/>
<parameter id="Gain"/>
<parameter id="MinimumDisparity"/>
<parameter id="NumberOfDisparities"/>
<parameter id="NxLib"/>
<parameter id="Projector"/>
<parameter id="TempCam"/>
</parameters>
</docu>
</procedure>
<procedure name="Conectar_Ensenso_N35_COPY_1">
<interface>
<oc>
<par name="NxLib_1" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="Conexion_Camara_1" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* </c>
<l>Conexion_Camara_1 := false</l>
<l>try</l>
<c>    * </c>
<c>    * </c>
<c>    * Inicializacion de Arbol y camara estereo</c>
<l>    open_framegrabber ('Ensenso-NxLib', 0, 0, 0, 0, 0, 0, 'default', 0, 'Raw', 'auto_grab_data=0', 'false', 'Item', '/', 0, 0, NxLib_1)</l>
<l>    open_framegrabber ('Ensenso-NxLib', 0, 0, 0, 0, 0, 0, 'default', 0, 'Raw', 'auto_grab_data=0', 'false', 'Stereo', '', 0, 0, Camera_1)</l>
<c>    * </c>
<c>    * Abro puerto TCP del Arbol</c>
<l>    set_framegrabber_param (NxLib_1, 'do_open_tcp_port', 24002)</l>
<l>    Conexion_Camara_1 := true</l>
<c>    * </c>
<l>    return ()</l>
<l>catch (Exception)</l>
<l>    Conexion_Camara_1 := false</l>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="Conectar_Ensenso_N35_COPY_1">
<parameters>
<parameter id="Camera_1"/>
<parameter id="Conexion_Camara_1"/>
<parameter id="NxLib_1"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Img_Camera_R1">
<interface>
<oo>
<par name="ModelImage" base_type="iconic" dimension="0"/>
<par name="Xm" base_type="iconic" dimension="0"/>
<par name="Ym" base_type="iconic" dimension="0"/>
<par name="Zm" base_type="iconic" dimension="0"/>
<par name="ImgLeftCamera" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib_1" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>try</l>
<c>    </c>
<c>    </c>
<l>    Adq_Imagen (ModelImage, NxLib_1, Camera_1, Camara_conexion_Est)</l>
<l>    Adq_XYZ_Img (ModelImage, Xm, Ym, Zm)</l>
<l>    select_obj(ModelImage, ImgLeftCamera, 1)</l>
<l>    xyz_to_object_model_3d (Xm, Ym, Zm, Escena3D_RAW)</l>
<c>    </c>
<l>catch (Exception)</l>
<c>    </c>
<c>    </c>
<l>    try</l>
<l>        Adq_Imagen (ModelImage, NxLib_1, Camera_1, Camara_conexion_Est)</l>
<l>        Adq_XYZ_Img (ModelImage, Xm, Ym, Zm)</l>
<l>        select_obj(ModelImage, ImgLeftCamera, 1)</l>
<l>        xyz_to_object_model_3d (Xm, Ym, Zm, Escena3D_RAW)</l>
<l>    catch (Exception)</l>
<c>        </c>
<l>        try</l>
<l>            Adq_Imagen (ModelImage, NxLib_1, Camera_1, Camara_conexion_Est)</l>
<l>            Adq_XYZ_Img (ModelImage, Xm, Ym, Zm)</l>
<l>            select_obj(ModelImage, ImgLeftCamera, 1)</l>
<l>            xyz_to_object_model_3d (Xm, Ym, Zm, Escena3D_RAW)</l>
<l>        catch (Exception)</l>
<c>           </c>
<l>        endtry</l>
<c>        </c>
<l>    endtry</l>
<c>    </c>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="Get_Img_Camera_R1">
<parameters>
<parameter id="Camera_1"/>
<parameter id="Escena3D_RAW"/>
<parameter id="ImgLeftCamera"/>
<parameter id="ModelImage"/>
<parameter id="NxLib_1"/>
<parameter id="Xm"/>
<parameter id="Ym"/>
<parameter id="Zm"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Pallet_BD">
<interface>
<ic>
<par name="Variable_BD" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="DataBD" base_type="ctrl" dimension="0"/>
<par name="FXcheck" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<l>wait_seconds(0.005)</l>
<l>try</l>
<c>    * </c>
<l>    Peticion := 'BaseDatos'</l>
<l>    Data := Peticion+';'+Variable_BD</l>
<c>    * </c>
<l>    write_serial (SerialHandle, ords(Data))</l>
<c></c>
<l>wait_seconds (0.10)</l>
<l>    VarSerial:=0 </l>
<l>    Conteo:=0</l>
<l>    while(VarSerial&lt;1 and Conteo&lt;50)</l>
<c>       </c>
<c>        *Numero de caracteres a leer</c>
<l>        read_serial (SerialHandle, 500, Nchar)</l>
<l>        Nchar:= chrt(Nchar)</l>
<l>        tuple_number (Nchar, Variable)</l>
<l>        VarSerial:=|Nchar|</l>
<c>        </c>
<l>        tuple_split (Nchar, '#', Substrings)</l>
<l>        tuple_split (Substrings, '||', DataBD)</l>
<l>          Conteo:=  Conteo+1</l>
<l>     FXcheck:=true</l>
<l>    endwhile</l>
<c></c>
<l>    if (Conteo&gt;=10)</l>
<c>        </c>
<l>        FXcheck:=false</l>
<l>    else</l>
<l>        FXcheck:=true</l>
<l>    endif</l>
<c></c>
<l>catch (Exception)</l>
<c>    </c>
<l>endtry</l>
<c>* </c>
<c>* </c>
<c>* </c>
<c>* </c>
<l>return ()</l>
</body>
<docu id="Get_Pallet_BD">
<parameters>
<parameter id="DataBD"/>
<parameter id="FXcheck"/>
<parameter id="SerialHandle"/>
<parameter id="Variable_BD"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Robot_Pose">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ToolInBasePose" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>try</l>
<c></c>
<l>    Escalamiento := 1</l>
<l>    Tag_Lectura := '_EV01_O_EjeX'    </l>
<l>    Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>    tuple_real (RV_CmdFotogen, Number)</l>
<l>    Number := (Number)/10000.0 - 4000.0</l>
<l>*     dev_inspect_ctrl (Number)</l>
<l>    posx := Number</l>
<c>     </c>
<l>    Tag_Lectura := '_EV01_O_EjeY'    </l>
<l>    Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>    tuple_real (RV_CmdFotogen, Number)</l>
<l>    Number := (Number)/10000.0 - 4000.0</l>
<l>    posy := Number</l>
<c>    * </c>
<l>    Tag_Lectura := '_EV01_O_EjeZ'    </l>
<l>    Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>    tuple_real (RV_CmdFotogen, Number)</l>
<l>    Number := (Number)/10000.0 - 4000.0</l>
<l>    posz := Number</l>
<c>    * </c>
<l>    Tag_Lectura := '_EV01_O_EjeC'    </l>
<l>    Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>    tuple_real (RV_CmdFotogen, Number)</l>
<l>    Number := (Number)/10000.0 - 4000.0</l>
<l>    Roll := Number</l>
<c>    * </c>
<l>    Tag_Lectura := '_EV01_O_EjeB'    </l>
<l>    Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<c>    * </c>
<l>    tuple_real (RV_CmdFotogen, Number)</l>
<l>    Number := (Number)/10000.0 - 4000</l>
<l>    Pitch := Number</l>
<c>    * </c>
<l>    Tag_Lectura := '_EV01_O_EjeA'    </l>
<l>    Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>    tuple_real (RV_CmdFotogen, Number)</l>
<c>    * </c>
<l>    Number := (Number)/10000 - 4000</l>
<l>    Yaw := Number</l>
<c>    * </c>
<c>    * Read pose of tool in robot base coordinates (ToolInBasePose)</c>
<l>    create_pose (posx, posy, posz, Roll, Pitch, Yaw, 'Rp+T', 'abg', 'point', ToolInBasePose)</l>
<c>    * </c>
<l>  *dev_inspect_ctrl (ToolInBasePose)</l>
<l>    return ()   </l>
<c>    </c>
<l>catch (Exception)</l>
<c>    </c>
<c>    </c>
<l>endtry</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
</body>
<docu id="Get_Robot_Pose">
<parameters>
<parameter id="SerialHandle"/>
<parameter id="ToolInBasePose"/>
</parameters>
</docu>
</procedure>
<procedure name="Take_Core_In_Pallet">
<interface>
<io>
<par name="Z" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
<par name="N_Pallet_to_Scan" base_type="ctrl" dimension="0"/>
<par name="Path_SFM_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_3D_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_Tofind" base_type="ctrl" dimension="0"/>
<par name="Path_CORE_ID" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="Visualizar3D" base_type="ctrl" dimension="0"/>
<par name="SegmentoPallet" base_type="ctrl" dimension="0"/>
<par name="Pose_Esquina" base_type="ctrl" dimension="0"/>
<par name="PitutoExist" base_type="ctrl" dimension="0"/>
<par name="ObjectModel3D_Core_Pallet" base_type="ctrl" dimension="0"/>
<par name="SFM_Core_Pallet" base_type="ctrl" dimension="0"/>
<par name="Modelo3D_Select" base_type="ctrl" dimension="0"/>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Estado_SubProceso" base_type="ctrl" dimension="0"/>
<par name="RepetirFoto" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Parametros_Visualizacion := ['colored','disp_pose','point_size']</l>
<l>Valores_Visualizacion := [  12  ,'true',1]</l>
<c></c>
<c></c>
<c>* *****************************************</c>
<c>* 1.- Obtengo el ROI3D del PALLET</c>
<c>* *****************************************</c>
<l>Get_Segmento (SerialHandle, Vector_Estado_Fx, Pose_Esquina, Escena3D_RAW, Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, WindowHandle, Vector_Segmento, ROI3D_NullFrame, ROI3D_rotate, Exception, EstadoFx, Estado, Pose_Segmentos)</l>
<c></c>
<l>* # ###################################################################</l>
<l>* # ###################################################################</l>
<l>* # ################ BUSQUEDA DE CORES EN EL PALLET ###################</l>
<l>* # ###################################################################</l>
<l>* # ###################################################################</l>
<c>* 3.- Encuentro el orden y los segementos en que estan distribuidos los cores en el applet</c>
<c></c>
<l>Vector_Entidades_Segmento := Vector_ID_Core_by_Segment_Pallet_Tofind+';'+SegmentoPallet</l>
<c></c>
<l>try</l>
<c>    </c>
<c>    * ********************************************************</c>
<c>    * ROI 3D sectorizado de cada elemento</c>
<c>    * Busco de manera sectorizada cara core en el pallet</c>
<c>    * ********************************************************</c>
<c>    * Estructura de vector</c>
<l>* # ###########################</l>
<l>* # ## CORE ## Existencia #####</l>
<l>* # ###########################</l>
<c>    </c>
<c>    ******************************************************************************</c>
<c>    ******** Proceso el entorno 3D para eliminar ruido  **************************</c>
<c>    ******************************************************************************</c>
<c>* fILTRO ELIMINADO POR no GENERICO  </c>
<l>*     Sub_Process_ImageCore (Z, X, Y, SerialHandle, Estado_Funcion, Escena3D_RAW, Estado_FuncionSub)</l>
<l>    if(true)</l>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        *************************</c>
<c>        * REVISAR ORIENTACION</c>
<c>        *************************</c>
<l>        if (PitutoExist ='Yes' )</l>
<l>            Pituto:=true </l>
<l>        endif</l>
<c>        </c>
<l>        Pituto:=true</l>
<c>        </c>
<c>       </c>
<c>        ***********************************************</c>
<c>        </c>
<l>*         smooth_object_model_3d (Escena3D_RAW, 'mls', 'mls_kNN', 50, Escena3D_RAW)</l>
<l>*         Visualizar_3D ([Escena3D_RAW], Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, [], [], ['Modelo'], WindowHandle, PoseOut1)</l>
<c>        </c>
<c>        </c>
<l>        Sampling := 0.02 </l>
<l>        Send_Data_Info ('### -&gt; Iniciando Busqueda de Entidad ###',SerialHandle)</l>
<l>        Find_Sector_Core_Bloque3 (Z, Vector_ID_Core_by_Segment_Pallet_Tofind, Vector_Entidades_Segmento, Path_CORE_ID, Path_3D_Segmentos, Path_SFM_Segmentos, ROI3D_rotate, \
                                  Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, Vector_Segmento, Escena3D_RAW, Sampling, SerialHandle, Vector_Estado_Fx, Pituto, \
                                  ObjectModel3D_Core_Pallet, SFM_Core_Pallet, Modelo3D_Select, WindowHandle, Vector_Existencia_Core_New, Estado_Fx, RepetirFoto, MyPose)</l>
<c>        </c>
<c>        *****************************</c>
<l>*         return ()</l>
<c>        ****************************</c>
<c>        </c>
<c>        </c>
<c>        </c>
<l>        if(RepetirFoto)</l>
<l>            clear_object_model_3d ([ROI3D_rotate,ROI3D_NullFrame,Escena3D_RAW])</l>
<l>            return()</l>
<l>        endif</l>
<l>* # ### Envio data de estado ########################</l>
<l>        if (Estado_Fx)</l>
<l>            Estado := 13</l>
<l>            Procesando := 0</l>
<l>            Resultado := 1</l>
<l>            Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>            Send_Data_Info('BLOQUE 3 FINALIZADO', SerialHandle)</l>
<c>            </c>
<c>            ****************************************</c>
<c>            *Descuento 1 el stock ingresado en BD                </c>
<l>            Set_MinusCores (SerialHandle, FXcheck)</l>
<c>            ****************************************</c>
<c>            </c>
<l>        else</l>
<l>            Procesando := 0</l>
<l>            Resultado := 2</l>
<l>            Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>            Send_Data_Info('BLOQUE 3 FINALIZADO con ### ERRORES ####', SerialHandle)  </l>
<l>        endif</l>
<l>    else</l>
<l>        Procesando := 0</l>
<l>        Resultado := 2</l>
<l>*         Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>        Send_Data_Info('BLOQUE 3 FINALIZADO con ### ERRORES ####', SerialHandle)  </l>
<l>    endif   </l>
<c>    * Borrar 3D</c>
<l>    clear_object_model_3d ([ROI3D_rotate,ROI3D_NullFrame,Escena3D_RAW])</l>
<c>    *</c>
<l>* # ################################################# </l>
<c>    * </c>
<l>catch (Exception)</l>
<l>    Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<c>    </c>
<l>    return ()</l>
<l>endtry</l>
<c>* </c>
<c>* ****************************************</c>
<c></c>
<l>return ()</l>
</body>
<docu id="Take_Core_In_Pallet">
<parameters>
<parameter id="Escena3D_RAW"/>
<parameter id="Estado_SubProceso"/>
<parameter id="Modelo3D_Select"/>
<parameter id="N_Pallet_to_Scan"/>
<parameter id="ObjectModel3D_Core_Pallet"/>
<parameter id="Path_3D_Segmentos"/>
<parameter id="Path_CORE_ID"/>
<parameter id="Path_SFM_Segmentos"/>
<parameter id="PitutoExist"/>
<parameter id="Pose_Esquina"/>
<parameter id="RepetirFoto"/>
<parameter id="SFM_Core_Pallet"/>
<parameter id="SegmentoPallet"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_Tofind"/>
<parameter id="Visualizar3D"/>
<parameter id="WindowHandle"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Core_ToUse_From_BDD">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Cod_Core_ToUse" base_type="ctrl" dimension="0"/>
<par name="Pallet_To_Scan" base_type="ctrl" dimension="0"/>
<par name="Segmento_To_Scan" base_type="ctrl" dimension="0"/>
<par name="PitutoExist" base_type="ctrl" dimension="0"/>
<par name="FXcheck" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>FXcheck:=false</l>
<l>for Index := 1 to 5 by 1</l>
<c>    </c>
<c></c>
<l>try</l>
<l>    Variable_BD := 'ram_actualproduction'</l>
<l>        Get_Pallet_BD (Variable_BD, SerialHandle, DataBD, FXcheck)</l>
<c>    * </c>
<l>    Cod_Core_ToUse := DataBD[3]</l>
<l>    Cod_Core_ToUseAux := DataBD[3]</l>
<l>    Pallet_To_Scan := DataBD[15]</l>
<l>    Segmento_To_Scan := DataBD[16]</l>
<l>    PitutoExist:=DataBD[5]</l>
<c>    </c>
<c></c>
<l>    FXcheck:=true</l>
<c>  </c>
<l>    return ()</l>
<l>catch (Exception)</l>
<c>    </c>
<l>   * Mensaje:='### ERROR ### -&gt; Entidad Requerida -&gt; '+Cod_Core_ToUse+' &lt;- RAM base DATOS no CARGADA.'</l>
<l>  *  Send_Data_Info (Mensaje, SerialHandle)</l>
<l>    Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<l>    FXcheck:=false</l>
<l>endtry</l>
<l>endfor</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Core_ToUse_From_BDD">
<parameters>
<parameter id="Cod_Core_ToUse"/>
<parameter id="FXcheck"/>
<parameter id="Pallet_To_Scan"/>
<parameter id="PitutoExist"/>
<parameter id="Segmento_To_Scan"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Config_Parametros_Cam_R2">
<interface>
<ic>
<par name="Camera" base_type="ctrl" dimension="0"/>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="NumberOfDisparities" base_type="ctrl" dimension="0"/>
<par name="MinimumDisparity" base_type="ctrl" dimension="0"/>
<par name="Proyector" base_type="ctrl" dimension="0"/>
<par name="Iluminacion" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="TempCam" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* </c>
<c>* Configuracion de parametros.</c>
<l>set_framegrabber_param (Camera, 'grab_data_items', ['Images/Rectified/Left', 'Images/Rectified/Right', 'Images/PointMap','Images/DisparityMap'])</l>
<c>* </c>
<c>* </c>
<c>* Parametros para habilitar funciones directas de la camara</c>
<l>*set_framegrabber_param (NxLib, 'Execute/Parameters/InitialTrigger', 'All')</l>
<c>* Proyector random de texturas</c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/Projector', 'false')</l>
<c>* Iluminacion</c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/FrontLight', 'false')</l>
<c>* </c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/AutoExposure', 'true')</l>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/AutoGain', 'true')</l>
<c>* </c>
<c>* </c>
<c>* ******************************************************************************************************</c>
<c></c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/DisparityMap/StereoMatching/NumberOfDisparities', NumberOfDisparities)</l>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/DisparityMap/StereoMatching/MinimumDisparity', MinimumDisparity)</l>
<c>* </c>
<c>* </c>
<c>* </c>
<c>* N° de imagenes de captura</c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/FlexView', 1)</l>
<c>* </c>
<c>* Temperatura de camara</c>
<l>get_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Sensor/Temperature', TempCam)</l>
<c>* </c>
<l>return ()</l>
</body>
<docu id="Config_Parametros_Cam_R2">
<parameters>
<parameter id="Camera"/>
<parameter id="Iluminacion"/>
<parameter id="MinimumDisparity"/>
<parameter id="NumberOfDisparities"/>
<parameter id="NxLib"/>
<parameter id="Proyector"/>
<parameter id="TempCam"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Img_Camera_2">
<interface>
<oo>
<par name="ModelImage" base_type="iconic" dimension="0"/>
<par name="Xm" base_type="iconic" dimension="0"/>
<par name="Ym" base_type="iconic" dimension="0"/>
<par name="Zm" base_type="iconic" dimension="0"/>
<par name="ImgLeftCamera" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib_1" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Adq_Imagen (ModelImage, NxLib_1, Camera_1, Camara_conexion_Est)</l>
<l>Adq_XYZ_Img (ModelImage, Xm, Ym, Zm)</l>
<l>select_obj(ModelImage, ImgLeftCamera, 1)</l>
<l>xyz_to_object_model_3d (Xm, Ym, Zm, Escena3D_RAW)</l>
<l>return ()</l>
</body>
<docu id="Get_Img_Camera_2">
<parameters>
<parameter id="Camera_1"/>
<parameter id="Escena3D_RAW"/>
<parameter id="ImgLeftCamera"/>
<parameter id="ModelImage"/>
<parameter id="NxLib_1"/>
<parameter id="Xm"/>
<parameter id="Ym"/>
<parameter id="Zm"/>
</parameters>
</docu>
</procedure>
<procedure name="Save_Pose_Palle">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Pose_Refinada" base_type="ctrl" dimension="0"/>
<par name="N_Pallet_to_Scan" base_type="ctrl" dimension="0"/>
<par name="Pose_Robot" base_type="ctrl" dimension="2"/>
</ic>
</interface>
<body>
<c>   </c>
<l>    ToolInBasePose:=Pose_Robot.at(0).at(0)</l>
<c>    </c>
<l>    Path:='C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/7.-HandEye/1.- Ensenso R1/ToolInCamPose_R1.dat'   </l>
<l>    read_pose (Path, ToolInCamPose)</l>
<c>    </c>
<l>    ToolInCamPose[0:2]:=ToolInCamPose[0:2]*1e3</l>
<c>   </c>
<l>    ObjInCamPose:=Pose_Refinada</l>
<c>    </c>
<l>    pose_invert (ToolInCamPose, CamInToolPose)</l>
<l>    pose_compose (ToolInBasePose, CamInToolPose, CamInBasePose)</l>
<l>    pose_compose (CamInBasePose, ObjInCamPose, ObjInBasePose)</l>
<c>    </c>
<l>    NamePose:='Pallet_'+N_Pallet_to_Scan</l>
<l>    Path_Save_Pose_PalletN:='C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/5.-Ing Software/0 Identificacion de Pallet/'+NamePose+'.dat'</l>
<c>    </c>
<l>    write_pose (CamInBasePose, Path_Save_Pose_PalletN)</l>
<l>    Path_Save_Pose_PalletN:='C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/5.-Ing Software/0 Identificacion de Pallet/'+NamePose+'ObjInBase.dat'</l>
<l>    write_pose (ObjInBasePose, Path_Save_Pose_PalletN)</l>
<l>    Path_Save_Pose_PalletN:='C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/5.-Ing Software/0 Identificacion de Pallet/'+NamePose+'ToolInBase.dat'</l>
<l>    write_pose (ToolInBasePose, Path_Save_Pose_PalletN)    </l>
<l>    Path_Save_Pose_PalletN:='C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/5.-Ing Software/0 Identificacion de Pallet/'+NamePose+'ObjInCam.dat'</l>
<l>    write_pose (ObjInCamPose, Path_Save_Pose_PalletN) </l>
<c>    </c>
<c>    </c>
<l>return ()</l>
</body>
<docu id="Save_Pose_Palle">
<parameters>
<parameter id="N_Pallet_to_Scan"/>
<parameter id="Pose_Refinada"/>
<parameter id="Pose_Robot"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_Data_To_Robot">
<interface>
<ic>
<par name="Pose_Refinada" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>    convert_pose_type (Pose_Refinada, 'Rp+T', 'abg', 'point', Pose_Refinada_Tp2)</l>
<l>    for Index := 0 to |Pose_Refinada|-2 by 1</l>
<l>        VR_PosicionEsquinaPallet[Index]:=Pose_Refinada[Index]      </l>
<l>    endfor</l>
<c>   </c>
<c>   </c>
<c>    ********************************</c>
<c>    * Enviar por ETHERNETIP</c>
<c>    ********************************</c>
<l>    Variable_Pos:=['X','Y','Z','C','B','A']</l>
<l>    for Index_Var:= 0 to |VR_PosicionEsquinaPallet|-1 by 1</l>
<l>        Tag_Destino:='_EV01_I_Eje'+Variable_Pos[Index_Var]</l>
<l>        Variable:=VR_PosicionEsquinaPallet[Index_Var]</l>
<l>        Send_EthernetIP_Data (Tag_Destino, Variable, SerialHandle)</l>
<c>     </c>
<l>    endfor</l>
<l>return ()</l>
<c></c>
<c></c>
</body>
<docu id="Send_Data_To_Robot">
<parameters>
<parameter id="Pose_Refinada"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Rototate_ROI">
<interface>
<ic>
<par name="Pose_Refinada" base_type="ctrl" dimension="0"/>
<par name="ROI3D_rotate" base_type="ctrl" dimension="0"/>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Visualizar3D" base_type="ctrl" dimension="0"/>
<par name="Vector_Segmento" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Pose_Segmentos" base_type="ctrl" dimension="0"/>
<par name="ROI3D_rotateOut" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>ROI3D_rotateOut := ROI3D_rotate</l>
<l>try</l>
<c>    </c>
<c>    * Roto el ROI 3D respecto a la esquina encontrada</c>
<l>    Get_Rotate_ROI3D (Pose_Refinada, ROI3D_rotateOut, Pose_Segmentos, ROI3D_rotateOut)</l>
<l>      dev_get_window (WindowHandle)</l>
<l>    Visualizar_3D ([ROI3D_rotateOut,Escena3D_RAW], Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, [], [], [Vector_Segmento,'Modelo'], WindowHandle, PoseOut1)</l>
<c>    </c>
<c>    </c>
<l>catch (Exception)</l>
<l>    dev_get_exception_data (Exception, 'error_msg', ErrorMsg0)</l>
<l>    dev_get_exception_data (Exception, 'procedure', ErrorMsg1)</l>
<l>    dev_get_exception_data (Exception, 'operator', ErrorMsg2)</l>
<l>    dev_get_exception_data (Exception, 'program_line', ErrorMsg3)</l>
<c>    </c>
<l>    MensajeError:=ErrorMsg0+' IN '+ErrorMsg1+' IN FUNTION '+ErrorMsg2+' IN LINE '+ErrorMsg3</l>
<l>*     throw (MensajeError)</l>
<l>    Msg_Sub_Proceso:='#Error# '+MensajeError</l>
<l>    Estado_SubProceso:=false</l>
<l>    return()</l>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="Rototate_ROI">
<parameters>
<parameter id="Escena3D_RAW"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="Pose_Refinada"/>
<parameter id="Pose_Segmentos"/>
<parameter id="ROI3D_rotate"/>
<parameter id="ROI3D_rotateOut"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="Vector_Segmento"/>
<parameter id="Visualizar3D"/>
</parameters>
</docu>
</procedure>
<procedure name="Set_Exposure_Estereo">
<interface>
<ic>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Exposure" base_type="ctrl" dimension="0"/>
<par name="Gain" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/AutoExposure', 'false')</l>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/AutoGain', 'false')</l>
<c></c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/Exposure', Exposure)</l>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/Gain', Gain)</l>
<l>return ()</l>
</body>
<docu id="Set_Exposure_Estereo">
<parameters>
<parameter id="Exposure"/>
<parameter id="Gain"/>
<parameter id="NxLib"/>
</parameters>
</docu>
</procedure>
<procedure name="MakeSFM_Palletr">
<interface>
<io>
<par name="Esquina" base_type="iconic" dimension="0"/>
<par name="Z" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="ConnectedRegions" base_type="iconic" dimension="0"/>
<par name="SelectedRegions" base_type="iconic" dimension="0"/>
<par name="ImageReduced" base_type="iconic" dimension="0"/>
<par name="MultiChannelImage" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Esquina3D" base_type="ctrl" dimension="0"/>
<par name="Pose" base_type="ctrl" dimension="0"/>
<par name="Esquina3D_Trans" base_type="ctrl" dimension="0"/>
<par name="Pose1" base_type="ctrl" dimension="0"/>
<par name="PoseOut1" base_type="ctrl" dimension="0"/>
<par name="Sampling" base_type="ctrl" dimension="0"/>
<par name="SurfaceModelID" base_type="ctrl" dimension="0"/>
<par name="ObjectModel3DNormals" base_type="ctrl" dimension="0"/>
<par name="Esquina_Tri" base_type="ctrl" dimension="0"/>
<par name="Information" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>connection (Esquina, ConnectedRegions)</l>
<l>select_shape_std (ConnectedRegions, SelectedRegions, 'max_area', 90)</l>
<l>dilation_rectangle1 (SelectedRegions, RegionDilation, 19, 19)</l>
<l>reduce_domain (Z, RegionDilation, ImageReduced)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>compose3 (X, Y, ImageReduced, MultiChannelImage)</l>
<c></c>
<l>area_center (SelectedRegions, Area, Row, Column)</l>
<l>get_grayval (X, Row, Column, X1)</l>
<l>get_grayval (Y, Row, Column, Y1)</l>
<l>get_grayval (Z, Row, Column, Z1)</l>
<c></c>
<c></c>
<l>xyz_to_object_model_3d (X, Y, ImageReduced, Esquina3D)</l>
<l>create_pose (-X1, -Y1, -Z1, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose)</l>
<l>rigid_trans_object_model_3d (Esquina3D, Pose, Esquina3D_Trans)</l>
<c></c>
<l>dev_get_window (WindowHandle)</l>
<l>Visualizar_3D (Esquina3D_Trans, Parametros_Visualizacion, Valores_Visualizacion, 1, [], [], [], WindowHandle, PoseOut1)</l>
<c></c>
<l>* create_pose (0, 0, 0, 0, 180, 0, 'Rp+T', 'gba', 'point', Pose1)</l>
<l>* rigid_trans_object_model_3d (Esquina3D_Trans, Pose1, Esquina3D_Trans)</l>
<c></c>
<l>* create_pose (0, 0, 0, 0, 0, -90, 'Rp+T', 'gba', 'point', Pose1)</l>
<l>* rigid_trans_object_model_3d (Esquina3D_Trans, Pose1, Esquina3D_Trans)</l>
<c></c>
<c></c>
<c>******************************************************************************************************************************</c>
<l>Visualizar_3D (Esquina3D_Trans, Parametros_Visualizacion, Valores_Visualizacion, 1, [], [], [], WindowHandle, PoseOut1)</l>
<c>******************************************************************************************************************************</c>
<c></c>
<c></c>
<l>Sampling:=0.01</l>
<c></c>
<c>* ***************************************************************************************************</c>
<c>* 5.- Creo Surface Model</c>
<c>* ***************************************************************************************************</c>
<c>* Si es necesario samplear el objeto</c>
<l>*surface_normals_object_model_3d (Esquina3D_Trans, 'mls', [], [], Esquina3D_Trans2)</l>
<l>*triangulate_object_model_3d (Esquina3D_Trans, 'greedy', [], [], Esquina_Tri, Information)</l>
<c></c>
<l>create_surface_model (Esquina3D_Trans, Sampling, [], [], SurfaceModelID)</l>
<c></c>
<c></c>
<c>* ***************************************************************************************************</c>
<c>* 6.- Guardo Surface Model y Modelo 3D</c>
<c>* ***************************************************************************************************</c>
<c>* </c>
<c></c>
<l>write_surface_model (SurfaceModelID, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/SFM_PALLET/SFM_Pallet_beta.sfm')</l>
<l>write_object_model_3d (Esquina3D_Trans, 'om3', 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/SFM_PALLET/3D_Pallet_beta.om3', [], [])</l>
<c></c>
<l>return ()</l>
</body>
<docu id="MakeSFM_Palletr">
<parameters>
<parameter id="ConnectedRegions"/>
<parameter id="Esquina"/>
<parameter id="Esquina3D"/>
<parameter id="Esquina3D_Trans"/>
<parameter id="Esquina_Tri"/>
<parameter id="ImageReduced"/>
<parameter id="Information"/>
<parameter id="MultiChannelImage"/>
<parameter id="ObjectModel3DNormals"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="Pose"/>
<parameter id="Pose1"/>
<parameter id="PoseOut1"/>
<parameter id="Sampling"/>
<parameter id="SelectedRegions"/>
<parameter id="SurfaceModelID"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_objeto_0_and_1">
<interface>
<io>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
<par name="Z" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Objeto_0" base_type="iconic" dimension="0"/>
<par name="Objeto_1" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib_1" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="NumberOfDisparities_Cam1" base_type="ctrl" dimension="0"/>
<par name="MinimumDisparity_Cam1" base_type="ctrl" dimension="0"/>
<par name="Projector" base_type="ctrl" dimension="0"/>
<par name="FrontLigth" base_type="ctrl" dimension="0"/>
<par name="AutoExposure" base_type="ctrl" dimension="0"/>
<par name="AutoGain" base_type="ctrl" dimension="0"/>
<par name="Gain" base_type="ctrl" dimension="0"/>
<par name="Exposure" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Escena3D_RAW_Esq" base_type="ctrl" dimension="0"/>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>XOut := X</l>
<l>YOut := Y</l>
<l>ZOut := Z</l>
<l>AutoExposureOut := AutoExposure</l>
<l>AutoGainOut := AutoGain</l>
<l>ExposureOut := Exposure</l>
<l>FrontLigthOut := FrontLigth</l>
<l>GainOut := Gain</l>
<l>MinimumDisparity_Cam1Out := MinimumDisparity_Cam1</l>
<l>NumberOfDisparities_Cam1Out := NumberOfDisparities_Cam1</l>
<l>ProjectorOut := Projector</l>
<l>FlexView:=8</l>
<l>Config_Parametros_Cam_R1 (NxLib_1, Camera_1, NumberOfDisparities_Cam1Out, MinimumDisparity_Cam1Out, ProjectorOut, FrontLigthOut, \
                          AutoExposureOut, AutoGainOut, GainOut, ExposureOut, FlexView, TempCam)</l>
<l>Get_Img_Camera_R1 (ModelImage, X_Esq, Y_Esq, Z_Esq, ImgLeftCamera_Esq, NxLib_1, Camera_1, Escena3D_RAW_Esq)</l>
<c></c>
<l>    compose3 (XOut, YOut, ZOut, Objeto_0)</l>
<l>* ############################################################################</l>
<c></c>
<l>* #########################################################################</l>
<c>* Configuracion de Parametros</c>
<l>    MinimumDisparity_Cam1Out := -97</l>
<l>    NumberOfDisparities_Cam1Out := 32</l>
<l>    ProjectorOut := 'true'</l>
<l>    FrontLigthOut := 'true'</l>
<l>    AutoExposureOut := 'true'</l>
<l>    AutoGainOut := 'true'</l>
<l>    ExposureOut := 4.9</l>
<l>    GainOut := 1</l>
<l>Config_Parametros_Cam_R1 (NxLib_1, Camera_1, NumberOfDisparities_Cam1Out, MinimumDisparity_Cam1Out, ProjectorOut, FrontLigthOut, AutoExposureOut, AutoGainOut, GainOut, ExposureOut, FlexView, TempCam)</l>
<l>    Get_Img_Camera_R1 (ModelImage, XOut, YOut, ZOut, ImgLeftCamera, NxLib_1, Camera_1, Escena3D_RAW)</l>
<c></c>
<l>    compose3 (XOut, YOut, ZOut, Objeto_1)</l>
<l>* ############################################################################</l>
<l>Estado:=3</l>
<c>*[3] -&gt; Sacar otr foto</c>
<l>Resultado:=3</l>
<l>Procesando:=1</l>
<l>Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* ################################################################################</l>
<c>    </c>
<c>    </c>
<l>return ()</l>
</body>
<docu id="Get_objeto_0_and_1">
<parameters>
<parameter id="AutoExposure"/>
<parameter id="AutoGain"/>
<parameter id="Camera_1"/>
<parameter id="Escena3D_RAW"/>
<parameter id="Escena3D_RAW_Esq"/>
<parameter id="Exposure"/>
<parameter id="FrontLigth"/>
<parameter id="Gain"/>
<parameter id="MinimumDisparity_Cam1"/>
<parameter id="NumberOfDisparities_Cam1"/>
<parameter id="NxLib_1"/>
<parameter id="Objeto_0"/>
<parameter id="Objeto_1"/>
<parameter id="Projector"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Objeto_2">
<interface>
<oo>
<par name="Objeto_2" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib_1" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Pose_Robot" base_type="ctrl" dimension="2"/>
<par name="MinimumDisparity_Cam1" base_type="ctrl" dimension="0"/>
<par name="NumberOfDisparities_Cam1" base_type="ctrl" dimension="0"/>
<par name="Exposure" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Pose_Robot_New" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>    * #########################################################################</c>
<c>* Configuracion de Parametros</c>
<c></c>
<l>Projector:='true'</l>
<l>FrontLigth:='true'</l>
<l>AutoExposure:='true'</l>
<l>AutoGain:='true'</l>
<l>Gain:=1</l>
<l>FlexView:=8</l>
<l>Config_Parametros_Cam_R1 (NxLib_1, Camera_1, NumberOfDisparities_Cam1, MinimumDisparity_Cam1, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure, FlexView, TempCam)</l>
<l>    Get_Img_Camera_R1 (ModelImage, XOut, YOut, ZOut, ImgLeftCamera, NxLib_1, Camera_1, Escena3D_RAW)</l>
<c></c>
<l>    compose3 (XOut, YOut, ZOut, Objeto_2)</l>
<c></c>
<l>* ############################################################################</l>
<l>Get_Pose_Tool (SerialHandle, ToolInBasePose)</l>
<l>Pose_Robot_New:=ToolInBasePose</l>
<l>* #########################################################################</l>
<c></c>
<c></c>
<l>* ############################################################################</l>
<l>Estado:=3</l>
<c>*[3] -&gt; Sacar otr foto</c>
<l>Resultado:=3</l>
<l>Procesando:=1</l>
<l>Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* ################################################################################</l>
<c> </c>
<c>    </c>
<l>return ()</l>
</body>
<docu id="Get_Objeto_2">
<parameters>
<parameter id="Camera_1"/>
<parameter id="Exposure"/>
<parameter id="MinimumDisparity_Cam1"/>
<parameter id="NumberOfDisparities_Cam1"/>
<parameter id="NxLib_1"/>
<parameter id="Objeto_2"/>
<parameter id="Pose_Robot"/>
<parameter id="Pose_Robot_New"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Objeto_3">
<interface>
<oo>
<par name="Objeto_3" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib_1" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="MinimumDisparity_Cam1" base_type="ctrl" dimension="0"/>
<par name="NumberOfDisparities_Cam1" base_type="ctrl" dimension="0"/>
<par name="Exposure" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Pose_Robot_New" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>    * #########################################################################</c>
<c>* Configuracion de Parametros</c>
<c></c>
<l>Projector:='true'</l>
<l>FrontLigth:='true'</l>
<l>AutoExposure:='true'</l>
<l>AutoGain:='true'</l>
<c></c>
<l>Gain:=1</l>
<l>FlexView:=8</l>
<l>Config_Parametros_Cam_R1 (NxLib_1, Camera_1, NumberOfDisparities_Cam1, MinimumDisparity_Cam1, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure, FlexView, TempCam)</l>
<l>    Get_Img_Camera_R1 (ModelImage, XOut, YOut, ZOut, ImgLeftCamera, NxLib_1, Camera_1, Escena3D_RAW)</l>
<c></c>
<l>    compose3 (XOut, YOut, ZOut, Objeto_3)</l>
<c>    </c>
<l>* ############################################################################</l>
<l>Get_Pose_Tool (SerialHandle, ToolInBasePose)</l>
<l>Pose_Robot_New:=ToolInBasePose</l>
<l>* #########################################################################</l>
<c></c>
<c></c>
<c></c>
<l>* ############################################################################</l>
<l>Estado:=3</l>
<c>*[3] -&gt; Sacar otr foto</c>
<l>Resultado:=3</l>
<l>Procesando:=1</l>
<l>Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* ################################################################################</l>
<c> </c>
<l>return ()</l>
</body>
<docu id="Get_Objeto_3">
<parameters>
<parameter id="Camera_1"/>
<parameter id="Exposure"/>
<parameter id="MinimumDisparity_Cam1"/>
<parameter id="NumberOfDisparities_Cam1"/>
<parameter id="NxLib_1"/>
<parameter id="Objeto_3"/>
<parameter id="Pose_Robot_New"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Objeto_0_and_1">
<interface>
<oo>
<par name="Objeto_0" base_type="iconic" dimension="0"/>
<par name="Objeto_1" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib_1" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Pose_Robot" base_type="ctrl" dimension="2"/>
<par name="MinimumDisparity_Cam1" base_type="ctrl" dimension="0"/>
<par name="NumberOfDisparities_Cam1" base_type="ctrl" dimension="0"/>
<par name="Exposure" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Pose_Robot_New" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>* #########################################################################</l>
<c>* Configuracion de Parametros</c>
<c></c>
<l>Projector:='false'</l>
<l>FrontLigth:='true'</l>
<l>AutoExposure:='false'</l>
<l>AutoGain:='false'</l>
<l>Exposure := 5</l>
<l>Gain:=8</l>
<l>Gain:=10</l>
<l>FlexView:=1</l>
<l>Config_Parametros_Cam_R1 (NxLib_1, Camera_1, NumberOfDisparities_Cam1, MinimumDisparity_Cam1, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure, FlexView, TempCam)</l>
<l>Get_Img_Camera_R1 (ModelImage, X_Esq, Y_Esq, Z_Esq, ImgLeftCamera_Esq, NxLib_1, Camera_1, Escena3D_RAW_Esq)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>compose4 (X_Esq, Y_Esq, Z_Esq, ImgLeftCamera_Esq,Objeto_0)</l>
<l>* ############################################################################</l>
<l>Get_Pose_Tool (SerialHandle, ToolInBasePose)</l>
<l>Pose_Robot_New:=ToolInBasePose</l>
<l>* #########################################################################</l>
<c>* Configuracion de Parametros</c>
<c></c>
<l>Projector:='true'</l>
<l>FrontLigth:='true'</l>
<l>AutoExposure:='true'</l>
<l>AutoGain:='true'</l>
<c>* Valor Chile*</c>
<l>Exposure := 5</l>
<c>* Valor Usa teach*</c>
<l>Exposure := 2</l>
<l>Gain:=1</l>
<l>FlexView:=4</l>
<c></c>
<c></c>
<l>try</l>
<c>    </c>
<l>    Config_Parametros_Cam_R1 (NxLib_1, Camera_1, NumberOfDisparities_Cam1, MinimumDisparity_Cam1, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure, FlexView, TempCam)</l>
<l>    Get_Img_Camera_R1 (ModelImage, X, Y, Z, ImgLeftCamera, NxLib_1, Camera_1, Escena3D_RAW)</l>
<c>    </c>
<l>catch (Exception)</l>
<l>    MnjERROR :='### ERROR ### micro Corte Camara Estereo'</l>
<l>    Send_Data_Info (MnjERROR, SerialHandle)</l>
<l>endtry</l>
<c></c>
<c></c>
<l>compose3 (X, Y, Z, Objeto_1)</l>
<c></c>
<c></c>
<l>* ############################################################################</l>
<l>* Estado:=3</l>
<c>*[3] -&gt; Sacar otra foto</c>
<l>* Resultado:=3</l>
<l>* Procesando:=1</l>
<l>* Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* ################################################################################</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Objeto_0_and_1">
<parameters>
<parameter id="Camera_1"/>
<parameter id="Exposure"/>
<parameter id="MinimumDisparity_Cam1"/>
<parameter id="NumberOfDisparities_Cam1"/>
<parameter id="NxLib_1"/>
<parameter id="Objeto_0"/>
<parameter id="Objeto_1"/>
<parameter id="Pose_Robot"/>
<parameter id="Pose_Robot_New"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Pallet_Model">
<interface>
<oo>
<par name="Objeto_0" base_type="iconic" dimension="0"/>
<par name="Objeto_1" base_type="iconic" dimension="0"/>
<par name="Objeto_2" base_type="iconic" dimension="0"/>
<par name="Objeto_3" base_type="iconic" dimension="0"/>
<par name="Zobj1" base_type="iconic" dimension="0"/>
<par name="Xobj1" base_type="iconic" dimension="0"/>
<par name="Yobj1" base_type="iconic" dimension="0"/>
<par name="Img_Left_Esquina" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib_1" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="N_Pallet_to_Scan" base_type="ctrl" dimension="0"/>
<par name="IsA_Sleeve" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Pose_Robot" base_type="ctrl" dimension="2"/>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
<par name="Base_esquina" base_type="ctrl" dimension="0"/>
<par name="Estado_Fx" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>try</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>* ####################################################</l>
<l>    Estado:=20</l>
<l>    Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>    Mensaje:='Inicio de captura Bloque 0'</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<l>* ###################################################</l>
<l>    dev_get_window (WindowHandle)</l>
<l>    Pose_Robot:={ { [] } }</l>
<l>    Pose_Robot.at(0).at(0):='CORE'</l>
<l>    Contador_foto:=0</l>
<c>    </c>
<l>    Escuhar_Robot:=true</l>
<l>    Contador_foto:=0</l>
<c>    </c>
<c>    </c>
<l>* #####################################################</l>
<c>   </c>
<c>    **** -&gt; VAlores de Chile &lt;- ****</c>
<l>    NumberOfDisparities_Cam1:=64</l>
<l>    MinimumDisparity_Cam1:=-89</l>
<c>    ********************************</c>
<c>    </c>
<c>    **** -&gt; VAlores de USA TeachMode &lt;- ****</c>
<l>    NumberOfDisparities_Cam1:=64</l>
<l>    MinimumDisparity_Cam1:=-63</l>
<c>    ********************************</c>
<l>    Exposure:=9</l>
<l>* #####################################################</l>
<c>    * Si es un Core    </c>
<l>    if (not IsA_Sleeve)</l>
<l>        Send_Data_Info ('-------------&gt; Es un CORE &lt;-------------', SerialHandle)</l>
<c>        </c>
<l>        Get_Objeto_0_and_1 (Objeto_0, Objeto_1, NxLib_1, Camera_1, Vector_Estado_Fx, SerialHandle, Pose_Robot,\
                            MinimumDisparity_Cam1, NumberOfDisparities_Cam1, Exposure, Pose_Robot_New)</l>
<c>        </c>
<l>*      read_image (Objeto_0, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 0/Obj0_Pallet_1_2019_10_11_10_8_5_769.hobj')</l>
<l>*      read_image (Objeto_1, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 0/Obj1_Pallet_1_2019_10_11_10_8_5_769.hobj')</l>
<c>    </c>
<c>     </c>
<c>     </c>
<l>        Pose_Robot.at(0).at(0):=Pose_Robot_New</l>
<l>        decompose4 (Objeto_0, X, Y, Z,Img_Left_Esquina)</l>
<l>        decompose3 (Objeto_1, Xobj1, Yobj1, Zobj1)</l>
<c>        </c>
<l>        dev_display (Img_Left_Esquina)</l>
<l>        dev_resize_window_fit_image (Img_Left_Esquina, 0, 0, 500, 500)</l>
<c></c>
<c>        </c>
<l>    endif</l>
<c> </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    ** Si es una manga corrijo de manera dinamica</c>
<l>    if (IsA_Sleeve)</l>
<l>        Send_Data_Info ('-------------&gt; Es una Manga &lt;-------------', SerialHandle)</l>
<c>        </c>
<c>        </c>
<c>        </c>
<l>         MinimumDisparity_Cam1:=-64</l>
<l>        NumberOfDisparities_Cam1:=128</l>
<l>        Projector:='false'</l>
<l>        FrontLigth:='true'</l>
<l>        AutoExposure:='true'</l>
<l>        AutoGain:='true'</l>
<l>        Exposure := 5</l>
<l>        Gain:=1</l>
<l>        FlexView:=3</l>
<l>        Send_Data_Info ('-------------&gt; Foto 1 ' , SerialHandle)</l>
<c>        </c>
<l>        Config_Parametros_Cam_R1 (NxLib_1, Camera_1, NumberOfDisparities_Cam1, MinimumDisparity_Cam1, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure, FlexView, TempCam)</l>
<l>        Get_Img_Camera_R1 (ModelImage, X, Y, Z, ImgLeftCamera, NxLib_1, Camera_1, Escena3D_RAW)</l>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<l>        MinimumDisparity_Cam1:=-64</l>
<l>        NumberOfDisparities_Cam1:=128</l>
<l>        Projector:='true'</l>
<l>        FrontLigth:='true'</l>
<l>        AutoExposure:='true'</l>
<l>        AutoGain:='true'</l>
<l>        Exposure := 5</l>
<l>        Gain:=1</l>
<l>        FlexView:=3</l>
<l>        Send_Data_Info ('-------------&gt; Foto 1 ' , SerialHandle)</l>
<c>        </c>
<l>        Config_Parametros_Cam_R1 (NxLib_1, Camera_1, NumberOfDisparities_Cam1, MinimumDisparity_Cam1, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure, FlexView, TempCam)</l>
<l>        Get_Img_Camera_R1 (ModelImage, X, Y, Z, ImgLeftCamera, NxLib_1, Camera_1, Escena3D_RAW)</l>
<c>        </c>
<c>        </c>
<l>* #####################################################</l>
<l>        Send_Data_Info ('-------------&gt; Adaptando Parametros', SerialHandle)</l>
<c>        </c>
<l>        set_framegrabber_param (NxLib_1, 'do_execute', 'EstimateDisparitySettings')</l>
<l>        get_framegrabber_param (NxLib_1, '//Execute/Default/Result/193216/MinimumDisparity', MinimumDisparity)</l>
<l>        get_framegrabber_param (NxLib_1, '//Execute/Default/Result/193216/NumberOfDisparities', NumberOfDisparities)</l>
<l>* #####################################################</l>
<l>        MinimumDisparity_Cam1 := MinimumDisparity</l>
<l>        NumberOfDisparities_Cam1 := NumberOfDisparities</l>
<l>          Config_Parametros_Cam_R1 (NxLib_1, Camera_1, NumberOfDisparities_Cam1, MinimumDisparity_Cam1, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure, FlexView, TempCam)</l>
<c>       </c>
<l>* #####################################################</l>
<l>*         Get_Objeto_0_and_1 (Objeto_0, Objeto_1, NxLib_1, Camera_1, Vector_Estado_Fx, SerialHandle, Pose_Robot, MinimumDisparity_Cam1, NumberOfDisparities_Cam1, Exposure, Pose_Robot_New)</l>
<l>        Send_Data_Info ('-------------&gt; Foto 1.1 ', SerialHandle)</l>
<l>        Get_Img_Camera_R1 (ModelImage, X, Y, Z, ImgLeftCamera, NxLib_1, Camera_1, Escena3D_RAW)</l>
<c>     </c>
<c></c>
<c>        </c>
<l>        compose3 (X, Y, Z, Objeto_0)        </l>
<l>        compose3 (X, Y, Z, Objeto_1)</l>
<c>        </c>
<c>        </c>
<l>        concat_obj (Objeto_0, Objeto_0, Objeto_0)</l>
<l>        concat_obj (Objeto_0, Objeto_0, Objeto_0)</l>
<l>    endif</l>
<c>    </c>
<c>    </c>
<c></c>
<l>* #####################################################</l>
<c>    </c>
<l>    Mensaje:='Imagen 1 capturada'</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<c>    ***********************************************************************</c>
<c>    ****** Guardo las Imagenes ********************************************</c>
<l>    get_system_time (MSecond, Second, Minute, Hour, Day, YDay, Month, Year)</l>
<c>    </c>
<l>    Fecha:='_Pallet_'+N_Pallet_to_Scan+'_'+Year+'_'+Month+'_'+Day+'_'+Hour+'_'+Minute+'_'+Second+'_'+MSecond</l>
<c>    </c>
<l> *   write_object (Objeto_0, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 0/Obj0'+Fecha+'.hobj')</l>
<l> *   write_object (Objeto_1, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 0/Obj1'+Fecha+'.hobj')</l>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    ***** Genero la Imagen.  ******</c>
<c>    **### Translado la imagen segun lo que se movio #####</c>
<c>    </c>
<l>    if (IsA_Sleeve)</l>
<c>        </c>
<l>        try</l>
<c>            </c>
<l>            Send_Pase_Sleeve (Objeto_1, SerialHandle, Estado_Funcion, Estado_Fx)</l>
<c>            </c>
<c>            </c>
<l>        catch (Exception)</l>
<c>            </c>
<l>            Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<l>        endtry</l>
<c>        </c>
<l>    else</l>
<c>        </c>
<l>        Get_Pose_Pallet_Core (Img_Left_Esquina, Zobj1, Xobj1, Yobj1, Esquina_Left, Esquina_Right,\
                              ROI_2_0, ROI_2_3, SerialHandle, Estado_Fx)</l>
<c>        </c>
<c>        </c>
<c>        </c>
<l>    endif</l>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<l>catch (Exception)</l>
<c>    </c>
<c></c>
<l>* ####################################################</l>
<l>    Mensaje:='NO SE ENCONTRO ESQUINA PALLET'</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<l>    Send_Data_Error(Exception,SerialHandle, EstadoFx)</l>
<c>    </c>
<l>    Estado_Fx:=false</l>
<l>    Resultado:=2</l>
<l>    Procesando:=1</l>
<l>    Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<c>    </c>
<c>    </c>
<l>* ###################################################  </l>
<c>    </c>
<l>endtry    </l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Pallet_Model">
<parameters>
<parameter id="Base_esquina"/>
<parameter id="Camera_1"/>
<parameter id="Escena3D_RAW"/>
<parameter id="Estado_Fx"/>
<parameter id="Img_Left_Esquina"/>
<parameter id="IsA_Sleeve"/>
<parameter id="N_Pallet_to_Scan"/>
<parameter id="NxLib_1"/>
<parameter id="Objeto_0"/>
<parameter id="Objeto_1"/>
<parameter id="Objeto_2"/>
<parameter id="Objeto_3"/>
<parameter id="Pose_Robot"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="Xobj1"/>
<parameter id="Yobj1"/>
<parameter id="Zobj1"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_ToolInCamPose">
<interface>
<oc>
<par name="ToolInCamPose" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>    read_pose ('C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/7.-HandEye/1.- Ensenso R1/ToolInCamPose_R1.dat', ToolInCamPose)</l>
<c>  </c>
<l>return ()</l>
</body>
<docu id="Get_ToolInCamPose">
<parameters>
<parameter id="ToolInCamPose"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_ObjInBasePose">
<interface>
<ic>
<par name="Pose_Refinada" base_type="ctrl" dimension="0"/>
<par name="Pose_Robot" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ObjInBasePose" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>    ObjInCamPose := Pose_Refinada</l>
<c></c>
<l>    ToolInBasePose:=Pose_Robot</l>
<l>      * Get_ToolInCamPose (ToolInCamPose)</l>
<c>       </c>
<l>       create_pose (110.842, -272.211, 160.559, 1.15, 359.672, 1.076, 'Rp+T', 'abg', 'point', ToolInCamPose)</l>
<c>   </c>
<c>    </c>
<l>pose_invert (ToolInCamPose, CamInToolPose)</l>
<l>pose_compose (ToolInBasePose, CamInToolPose, CamInBasePose)</l>
<l>pose_compose (CamInBasePose, ObjInCamPose, ObjInBasePose)</l>
<c>    </c>
<l>dev_inspect_ctrl(ObjInBasePose)</l>
<l>return ()</l>
</body>
<docu id="Get_ObjInBasePose">
<parameters>
<parameter id="ObjInBasePose"/>
<parameter id="Pose_Refinada"/>
<parameter id="Pose_Robot"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_ImgWhitROI_Camera_1">
<interface>
<oo>
<par name="ModelImage" base_type="iconic" dimension="0"/>
<par name="Xm" base_type="iconic" dimension="0"/>
<par name="Ym" base_type="iconic" dimension="0"/>
<par name="Zm" base_type="iconic" dimension="0"/>
<par name="ImgLeftCamera" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Adq_Imagen (ModelImage, NxLib, Camera_1, Camara_conexion_Est)</l>
<l>Adq_XYZ_Img (ModelImage, Xm, Ym, Zm)</l>
<l>select_obj(ModelImage, ImgLeftCamera, 1)</l>
<l>xyz_to_object_model_3d (Xm, Ym, Zm, Escena3D_RAW)</l>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_ImgWhitROI_Camera_1">
<parameters>
<parameter id="Camera_1"/>
<parameter id="Escena3D_RAW"/>
<parameter id="ImgLeftCamera"/>
<parameter id="ModelImage"/>
<parameter id="NxLib"/>
<parameter id="Xm"/>
<parameter id="Ym"/>
<parameter id="Zm"/>
</parameters>
</docu>
</procedure>
<procedure name="Find_Sector_Core_Bloque3">
<interface>
<io>
<par name="Z" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="Vector_ID_Core_by_Segment_Pallet" base_type="ctrl" dimension="0"/>
<par name="Vector_Entidades_Segmento" base_type="ctrl" dimension="0"/>
<par name="Path_CORE_ID" base_type="ctrl" dimension="0"/>
<par name="Path_3D_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_SFM_Segmentos" base_type="ctrl" dimension="0"/>
<par name="ROI3D_rotate" base_type="ctrl" dimension="0"/>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Visualizar3D" base_type="ctrl" dimension="0"/>
<par name="Vector_Segmento" base_type="ctrl" dimension="0"/>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
<par name="Sampling" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="Pituto" base_type="ctrl" dimension="0"/>
<par name="ObjectModel3D_Core_Pallet" base_type="ctrl" dimension="0"/>
<par name="SFM_Core_Pallet" base_type="ctrl" dimension="0"/>
<par name="Modelo3D_Select" base_type="ctrl" dimension="0"/>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Vector_Existencia_Core_New" base_type="ctrl" dimension="2"/>
<par name="Estado_Fx" base_type="ctrl" dimension="0"/>
<par name="RepetirFoto" base_type="ctrl" dimension="0"/>
<par name="MyPose" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>N_divisiones_Pallet:=9</l>
<l>N_divisiones_Pallet:=|Vector_ID_Core_by_Segment_Pallet|</l>
<c></c>
<l>RepetirFoto:=false</l>
<c></c>
<c></c>
<c></c>
<l>NElementos:=|Vector_Entidades_Segmento|</l>
<c></c>
<l>Estado_Fx:=false</l>
<l>try</l>
<c>    </c>
<l>    for N_Entidad := 0 to NElementos-1 by 1</l>
<c>        </c>
<l>        tuple_split (Vector_Entidades_Segmento[N_Entidad], ';', Aux)</l>
<l>        Entidad_To_Find:=Aux[0]</l>
<l>        N_Sectores_To_Find:=|Aux|</l>
<l>        ROI3D:=[]</l>
<c>        </c>
<c>        ********************************************</c>
<c>        * Leo el SFM y STL del Core</c>
<c>        ********************************************</c>
<c>        </c>
<l>* #### Envio data de estado ########################</l>
<l>        Estado:=9</l>
<l>        Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)   </l>
<l>* ################################################## </l>
<c>        </c>
<c>        </c>
<l>        if (Entidad_To_Find ==' ')</l>
<l>            Vector_Existencia_Core.at(N_Entidad+1).at(0):=Entidad_To_Find</l>
<l>            Vector_Existencia_Core.at(N_Entidad+1).at(1):=false</l>
<c>            </c>
<l>        else</l>
<c>            * Se deshabilita la opcion para cargarla previamente      </c>
<l>*             Get_SFM_STL (Entidad_To_Find, Path_CORE_ID, Path_3D_Segmentos, Path_SFM_Segmentos, Vector_Estado_Fx1, SerialHandle1, ObjectModel3D_Core_Pallet, SFM_Core_Pallet, Estado_Get_SFM_STL, Modelo3D_Select)</l>
<c>            </c>
<c>            </c>
<c>            ****************************************************************************************************************            </c>
<l>            NumNeighbors:=105</l>
<l>            get_object_model_3d_params (Escena3D_RAW, 'neighbor_distance ' + NumNeighbors, DistanceDistribution)</l>
<l>            get_object_model_3d_params (Escena3D_RAW, 'num_points', NumPoints)</l>
<c>            </c>
<l>            InlierRate := 70</l>
<l>            Distance := sort(DistanceDistribution)[|DistanceDistribution| * InlierRate / 100]</l>
<c>            </c>
<c>            </c>
<l>            select_points_object_model_3d (Escena3D_RAW, 'num_neighbors ' + Distance, 15, NumPoints, Escena3D_RAW)</l>
<l>            Visualizar_3D ([ Escena3D_RAW], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,1], 1, [], [], [], WindowHandle, PoseOut1)         </l>
<c>            </c>
<c>            ***************************************************************************************************************</c>
<c>            * NUEVO FILTRO 3d</c>
<c>            **************************************************************</c>
<l>           * distancia_segm:=1</l>
<c>            </c>
<l>           * connection_object_model_3d (Escena3D_RAW, 'distance_3d', distancia_segm, ObjectModel3DConnected)</l>
<c>            </c>
<c>            </c>
<c>            ***************************************************************</c>
<c>            *Filtro la altura maxima</c>
<c>            * Utilizo esto para elminar el piso de la escena y evitar errores</c>
<l>            Altura_Maxima_camara_Piso_Pallet:=1704</l>
<c>            ***************************************************************     </c>
<l>            Set_Max_Altura_Model3D (Escena3D_RAW, Altura_Maxima_camara_Piso_Pallet, SerialHandle, Modelo_3D_ROI_Thres)</l>
<l>            NotZeroModel (Escena3D_RAW, Escena3D_RAW)         </l>
<c>            </c>
<l>            N_Model_To_Find:=|Modelo_3D_ROI_Thres|</l>
<l>            if (|Modelo_3D_ROI_Thres|&gt;1)</l>
<c>                </c>
<l>                union_object_model_3d (Modelo_3D_ROI_Thres, 'points_surface', Modelo_3D_ROI_Thres)</l>
<l>*                 Visualizar_3D ([Modelo_3D_ROI_Thres], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Visualizar3D, [], [], [], WindowHandle, PoseOut1)</l>
<c>                </c>
<l>            endif</l>
<c>            </c>
<c>            *** Calculo los bordes 3D ***</c>
<l>            BordesMain:=0.01</l>
<l>            edges_object_model_3d (Escena3D_RAW, BordesMain, [], [], Modelo_3D_ROI_ThresEdges)</l>
<c>            **          Visualizar_3D ( [Modelo_3D_ROI_ThresEdges], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], 1, [], [], [], WindowHandle, PoseOut1)</c>
<c>            </c>
<c>            </c>
<l>* #### Envio data de estado ############################################         </l>
<l>            Estado:=18</l>
<l>            Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* ###################################################################</l>
<l>* ################################################################### </l>
<c>            </c>
<c>            </c>
<l>            Ang_Obj:=0</l>
<l>            Find_Dinamic_Core (N_Model_To_Find, SFM_Core_Pallet, ObjectModel3D_Core_Pallet, Escena3D_RAW, Vector_Estado_Fx, SerialHandle, Modelo_3D_ROI_ThresEdges, WindowHandle, Parametros_Visualizacion, \
                               Valores_Visualizacion, Ang_Obj, Vector_ID_Core_by_Segment_Pallet, PoseMLS, Score_Refinado, Posicion3D_Objeto_REFIN, Obj_Detectado)</l>
<l>* ###################################################################</l>
<l>* ###################################################################</l>
<l>            Estado:=21</l>
<l>            Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<c>            </c>
<l>            if ( Obj_Detectado)</l>
<c>                </c>
<l>                AngC:=PoseMLS[3]</l>
<l>                AngB:=PoseMLS[4]</l>
<c>                </c>
<c>                </c>
<l>                if (AngB&gt;=270)</l>
<l>                    AngBCompl:=AngB-360</l>
<l>                    tuple_abs (AngBCompl, AngB)</l>
<l>                endif</l>
<c>                </c>
<c>                </c>
<l>                if (AngC&gt;=270)</l>
<l>                    AngCCompl:=AngC-360</l>
<l>                    tuple_abs (AngCCompl, AngC)</l>
<l>                endif</l>
<c>                </c>
<c>                *******************************************************************************                </c>
<l>                LimiteAngular:=3.5</l>
<c>                *******************************************************************************</c>
<c>                </c>
<l>                if ( AngB &gt;= LimiteAngular  or AngC&gt;=LimiteAngular )</l>
<c>                    </c>
<l>                    Send_Data_Info ('### ERROR ### Angulos B o C malo', SerialHandle)</l>
<l>                    Procesando:=0</l>
<l>                    Estado:=12</l>
<l>                    Resultado:=2</l>
<l>                    Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>                    Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>                    RepetirFoto:=false</l>
<l>                    Estado_Fx:=false</l>
<l>                    return()</l>
<c>                    </c>
<l>                endif</l>
<c>                </c>
<c>                </c>
<l>                Parametros_Visualizacion:=['disp_pose','color_attrib','lut','point_size']</l>
<l>                Valores_Visualizacion:= ['true','coord_z','rainbow',1]</l>
<l>                create_pose (200,50, 2690, 352, 0, 0, 'Rp+T', 'gba', 'point', PoseView)</l>
<l>                disp_object_model_3d (WindowHandle, [Posicion3D_Objeto_REFIN,Escena3D_RAW], [], PoseView, [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5])</l>
<l>                dev_disp_text (PoseMLS, 'window', 'top', 'left', 'black', [], [])</l>
<c>                </c>
<l>                clear_object_model_3d([   Posicion3D_Objeto_REFIN,Escena3D_RAW ])     </l>
<c>                </c>
<l>                write_pose (PoseMLS, 'C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/5.-Ing Software/3 Consolidado R1/PoseCirculares.dat')</l>
<c>                </c>
<l>                RepetirFoto:=false</l>
<c>                </c>
<c>                </c>
<l>* #### Envio data de estado ########################</l>
<l>                Estado:=11</l>
<l>                Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* ####################################################### </l>
<l>* ### Verifico el Eje Z sobre pasa el suelo.</l>
<l>* #######################################################    </l>
<c></c>
<c>                **************************************</c>
<l>                Limite_CamarPiso:=1707</l>
<c>                **************************************</c>
<c>                </c>
<l>                if ( PoseMLS[2]&gt;=Limite_CamarPiso)</l>
<l>                    Procesando:=0</l>
<l>                    Estado:=12</l>
<l>                    Resultado:=2</l>
<l>                    Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>                    Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>                    Send_Data_Info ('### ERROR #### Calculo muy cercano al piso. RIESGO de Colision',SerialHandle)</l>
<l>                    RepetirFoto:=false</l>
<l>                    return()</l>
<c>                    </c>
<l>                endif</l>
<c>                **********************************************</c>
<l>                ActivarOffset:=0</l>
<c>                **********************************************</c>
<l>                Delta_X:=(0 )*ActivarOffset</l>
<l>                Delta_Y:=(0)*ActivarOffset</l>
<l>                Delta_Z:=0   </l>
<c>                </c>
<c>                </c>
<l>                PoseMLS[0]:=PoseMLS[0]+Delta_X</l>
<l>                PoseMLS[1]:=PoseMLS[1]+Delta_Y</l>
<l>                PoseMLS[2]:=PoseMLS[2]+Delta_Z</l>
<c>                </c>
<l>*                 PoseMLS[3]:=0</l>
<l>*                 PoseMLS[4]:=0</l>
<c>                </c>
<l>                Send_Data_To_Robot(PoseMLS,SerialHandle)</l>
<c>                ***************************************</c>
<l>                Estado_Fx:=true</l>
<c>                </c>
<c>                </c>
<c>                </c>
<l>            else</l>
<l>                    Send_Data_Info ('### ERROR ### Entidad NO detectada\nRevisar porcentaje de Deteccion de esta entidad', SerialHandle)</l>
<c>                  </c>
<l>                Procesando:=1</l>
<l>                Estado:=12</l>
<l>                Resultado:=2</l>
<l>                Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>                Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>                RepetirFoto:=true</l>
<l>            endif</l>
<c>            </c>
<l>        endif</l>
<c>        </c>
<l>    endfor</l>
<l>catch (Exception)</l>
<l>    Send_Data_Error (Exception, SerialHandle, EstadoFx)  </l>
<c>    </c>
<l>endtry</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Find_Sector_Core_Bloque3">
<parameters>
<parameter id="Escena3D_RAW"/>
<parameter id="Estado_Fx"/>
<parameter id="Modelo3D_Select"/>
<parameter id="MyPose"/>
<parameter id="ObjectModel3D_Core_Pallet"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="Path_3D_Segmentos"/>
<parameter id="Path_CORE_ID"/>
<parameter id="Path_SFM_Segmentos"/>
<parameter id="Pituto"/>
<parameter id="ROI3D_rotate"/>
<parameter id="RepetirFoto"/>
<parameter id="SFM_Core_Pallet"/>
<parameter id="Sampling"/>
<parameter id="SerialHandle"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="Vector_Entidades_Segmento"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="Vector_Existencia_Core_New"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet"/>
<parameter id="Vector_Segmento"/>
<parameter id="Visualizar3D"/>
<parameter id="WindowHandle"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Centro_and_Esquina">
<interface>
<io>
<par name="Esquina_Left" base_type="iconic" dimension="0"/>
<par name="Xobj1" base_type="iconic" dimension="0"/>
<par name="Yobj1" base_type="iconic" dimension="0"/>
<par name="Zobj1" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Esquina_LeftOut" base_type="iconic" dimension="0"/>
</oo>
<oc>
<par name="row1" base_type="ctrl" dimension="0"/>
<par name="col1" base_type="ctrl" dimension="0"/>
<par name="CentroX" base_type="ctrl" dimension="0"/>
<par name="CentroY" base_type="ctrl" dimension="0"/>
<par name="CentroZ" base_type="ctrl" dimension="0"/>
<par name="Nelementos" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Esquina_LeftOut := Esquina_Left</l>
<l>shape_trans (Esquina_LeftOut, Esquina_LeftOut, 'rectangle2')</l>
<l>orientation_region (Esquina_LeftOut, Phi)</l>
<l>* Angulo:=Phi*180/3.1415 -90</l>
<l>* Phi:=0</l>
<l>area_center (Esquina_LeftOut, Area, Row, Column)</l>
<l>Nelementos:=|Area|</l>
<c></c>
<c></c>
<l>region_features (Esquina_LeftOut, 'row1', row1)</l>
<l>region_features (Esquina_LeftOut, 'column1', col1)</l>
<c></c>
<l>region_features (Esquina_LeftOut, 'row2', row2)</l>
<l>region_features (Esquina_LeftOut, 'column2', col2)</l>
<l>dev_set_line_width (10)</l>
<c></c>
<l>dev_get_window (WindowHandle)</l>
<l>disp_cross (WindowHandle, row1, col1, 6, 0)</l>
<l>disp_cross (WindowHandle, row2, col2, 6, 0)</l>
<c></c>
<c></c>
<l>get_grayval (Xobj1, Row, Column, CentroX)</l>
<l>get_grayval (Yobj1, Row, Column, CentroY)</l>
<l>get_grayval (Zobj1, Row, Column, CentroZ)</l>
<c></c>
<l>if (CentroX=0)    </l>
<l>    for OffsetX := 1 to 50 by 1      </l>
<l>        get_grayval (Xobj1, Row, Column+OffsetX, CentroX) </l>
<l>        if (CentroX !=0 )</l>
<l>            break</l>
<l>        endif</l>
<l>    endfor   </l>
<l>endif</l>
<c></c>
<l>if (CentroY=0)    </l>
<l>    for OffsetX := 1 to 50 by 1      </l>
<l>        get_grayval (Xobj1, Row, Column+OffsetX, CentroY) </l>
<l>        if (CentroY !=0 )</l>
<l>            break</l>
<l>        endif</l>
<l>    endfor   </l>
<l>endif</l>
<c></c>
<l>return ()</l>
<c></c>
<c></c>
<c></c>
</body>
<docu id="Get_Centro_and_Esquina">
<parameters>
<parameter id="CentroX"/>
<parameter id="CentroY"/>
<parameter id="CentroZ"/>
<parameter id="Esquina_Left"/>
<parameter id="Esquina_LeftOut"/>
<parameter id="Nelementos"/>
<parameter id="Xobj1"/>
<parameter id="Yobj1"/>
<parameter id="Zobj1"/>
<parameter id="col1"/>
<parameter id="row1"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Esquina_LeftRight">
<interface>
<io>
<par name="Img_Left_Esquina" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Esquina_Left" base_type="iconic" dimension="0"/>
<par name="Esquina_Right" base_type="iconic" dimension="0"/>
</oo>
</interface>
<body>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>gen_rectangle1 (ROI_0, -3.06, 694.54, 259.767, 951.393)</l>
<l>gen_rectangle1 (ROI_1, 2, 1066.41, 2, 1281.68)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>Umbral:=180</l>
<c></c>
<l>reduce_domain (Img_Left_Esquina, ROI_0, ImageReduced)</l>
<l>reduce_domain (Img_Left_Esquina, ROI_1, ImageReduced_rigth)</l>
<l>threshold (ImageReduced, Esquina, Umbral, 255)</l>
<l>threshold (ImageReduced_rigth, Esquina_rigth, 150, 255)</l>
<c></c>
<c></c>
<l>erosion_rectangle1 (Esquina, RegionErosion, 3, 3)</l>
<c></c>
<l>connection (RegionErosion, ConnectedRegions)</l>
<l>select_shape_std (ConnectedRegions, Esquina_Left, 'max_area',90)</l>
<c></c>
<c></c>
<l>erosion_rectangle1 (Esquina_rigth, RegionErosion, 3, 3)</l>
<c></c>
<l>connection (RegionErosion, ConnectedRegions)</l>
<l>select_shape_std (ConnectedRegions, Esquina_Right, 'max_area',90)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Esquina_LeftRight">
<parameters>
<parameter id="Esquina_Left"/>
<parameter id="Esquina_Right"/>
<parameter id="Img_Left_Esquina"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_Data_Estado">
<interface>
<ic>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="Estado" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>* ##### Envio de estado  #######################</l>
<l>*wait_seconds (0.1)</l>
<l>Valor_Variable:=Vector_Estado_Fx.at(Estado).at(0)</l>
<l>Tag_Destino:='_EV01_I_Estado'</l>
<c></c>
<l>Peticion     := 'HalconEstado'</l>
<l>Variable_OPC := Tag_Destino</l>
<l>Variable:=Vector_Estado_Fx.at(Estado).at(1)</l>
<l>Data:=Peticion+';'+Variable_OPC+';'+Variable</l>
<c></c>
<l>write_serial (SerialHandle, ords(Data))</l>
<c></c>
<l>Conteo_Espera:=0</l>
<l>VarSerial:=0</l>
<l>while(VarSerial&lt;1 and Conteo_Espera&lt;10)    </l>
<l>    read_serial (SerialHandle, 20, Nchar)</l>
<l>    Nchar:= chrt(Nchar)</l>
<l>    tuple_number (Nchar, Variable)</l>
<l>    VarSerial:=|Nchar|</l>
<l>    Conteo_Espera:=Conteo_Espera+1</l>
<l>endwhile</l>
<c></c>
<l>* #### Fin envio de estado ######################  </l>
<c></c>
<l>return ()</l>
</body>
<docu id="Send_Data_Estado">
<parameters>
<parameter id="Estado"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_Data_Info">
<interface>
<ic>
<par name="Mensaje" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>* ##### Envio de estado  #######################</l>
<l>try</l>
<c>    </c>
<l>Valor_Variable:=Mensaje</l>
<l>Tag_Destino:='_EV01_I_Estado'</l>
<c></c>
<l>Peticion     := 'HalconEstado'</l>
<l>Variable_OPC := Tag_Destino</l>
<l>Variable:=Mensaje</l>
<l>Data:=Peticion+';'+Variable_OPC+';'+Variable</l>
<c></c>
<l>write_serial (SerialHandle, ords(Data))</l>
<c></c>
<l>Conteo_Espera:=0</l>
<l>VarSerial:=0</l>
<l>while(VarSerial&lt;1 and Conteo_Espera&lt;10)    </l>
<l>    read_serial (SerialHandle, 20, Nchar)</l>
<l>    Nchar:= chrt(Nchar)</l>
<l>    tuple_number (Nchar, Variable)</l>
<l>    VarSerial:=|Nchar|</l>
<l>    Conteo_Espera:=Conteo_Espera+1</l>
<l>endwhile</l>
<c></c>
<c></c>
<c></c>
<l>catch (Exception)</l>
<l>endtry</l>
<c></c>
<c></c>
<l>* #### Fin envio de estado ######################  </l>
<c></c>
<l>return ()</l>
</body>
<docu id="Send_Data_Info">
<parameters>
<parameter id="Mensaje"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_Data_Error">
<interface>
<ic>
<par name="Exception" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="EstadoFx" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>    dev_get_exception_data (Exception, 'error_msg',    ErrorMsg0)</l>
<l>    dev_get_exception_data (Exception, 'procedure',    ErrorMsg1)</l>
<l>    dev_get_exception_data (Exception, 'operator',     ErrorMsg2)</l>
<l>    dev_get_exception_data (Exception, 'program_line', ErrorMsg3)</l>
<c>  </c>
<c>    </c>
<l>    MensajeError:='### ERROR ### '+ErrorMsg0 + ' IN '+ErrorMsg1+' IN FUNTION '+ErrorMsg2+' IN LINE '+ErrorMsg3</l>
<l>    Mensaje:=MensajeError</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<l>    EstadoFx:=false</l>
<l>    wait_seconds (0.05)</l>
<c>    * #### Envio data de estado ########################</c>
<l>    Procesando:=1</l>
<l>    Resultado:=2</l>
<l>    Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>    Estado_Fx:=1</l>
<l>* ################################################## </l>
<l>return ()</l>
</body>
<docu id="Send_Data_Error">
<parameters>
<parameter id="EstadoFx"/>
<parameter id="Exception"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_PatronToRobot">
<interface>
<ic>
<par name="PoseForCalibrationPlate" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>        Variable_Pos := ['X','Y','Z','C','B','A']</l>
<l>        for Index_Var := 0 to 5 by 1</l>
<l>            Tag_Destino:='_EV01_I_Eje'+Variable_Pos[Index_Var]</l>
<l>            Variable := PoseForCalibrationPlate[Index_Var]</l>
<l>            Send_EthernetIP_Data (Tag_Destino, Variable, SerialHandle)</l>
<c>          </c>
<l>        endfor</l>
<l>return ()</l>
</body>
<docu id="Send_PatronToRobot">
<parameters>
<parameter id="PoseForCalibrationPlate"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_SFM">
<interface>
<oc>
<par name="Modelo3D" base_type="ctrl" dimension="0"/>
<par name="SFM" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>read_object_model_3d ('D:/AI/Vision Artificial/4.-MAGOTTEAUX/21.-HandEye/3DBUFhandeye.om3', 1, [], [], Modelo3D, Status)</l>
<l>read_surface_model ('D:/AI/Vision Artificial/4.-MAGOTTEAUX/21.-HandEye/SFMBUFhandeye.sfm', SFM)</l>
<l>return ()</l>
</body>
<docu id="Get_SFM">
<parameters>
<parameter id="Modelo3D"/>
<parameter id="SFM"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_ObjInBasePose_COPY_1">
<interface>
<ic>
<par name="Pose_Refinada" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ObjInBasePose" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>ObjInCamPose := Pose_Refinada</l>
<c>* </c>
<l>read_pose ('C:/Users/Usuario/Dropbox (MIRS)/1.-Servidor Desarrollo Software/7.-Magotteaux/7.-HandEye/1.- Ensenso R1/ToolInCamPose_R1.dat', ToolInCamPose)</l>
<c>* </c>
<c>* </c>
<l>Get_Robot_Pose (SerialHandle, ToolInBasePose)</l>
<c>* </c>
<l>pose_invert (ToolInCamPose, CamInToolPose)</l>
<l>pose_compose (ToolInBasePose, CamInToolPose, CamInBasePose)</l>
<l>pose_compose (CamInBasePose, ObjInCamPose, ObjInBasePose)</l>
<l>return ()</l>
</body>
<docu id="Get_ObjInBasePose_COPY_1">
<parameters>
<parameter id="ObjInBasePose">
<description lang="es_ES">Objeto relativo a la base del robot</description>
</parameter>
<parameter id="Pose_Refinada">
<description lang="es_ES">Pose del objeto relativo a la camra</description>
</parameter>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="A01_Consolidado_Vision_R1">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="Path_SFM_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_3D_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_CORE_ID" base_type="ctrl" dimension="0"/>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="AcqHandle_Cam_0" base_type="ctrl" dimension="0"/>
<par name="Camera0_Parameters" base_type="ctrl" dimension="0"/>
<par name="Camera0_Pose" base_type="ctrl" dimension="0"/>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c></c>
<l>dev_close_window ()</l>
<l>Parametros_VisualizacionOut := Parametros_Visualizacion</l>
<l>Valores_VisualizacionOut := Valores_Visualizacion</l>
<l>dev_open_window (0, 0, 512, 512, 'black', WindowHandle)</l>
<c></c>
<l>Get_EstadoSerialBridge (EstadoSerialBridge)</l>
<l>Estado_Get_SFM_STL:=false</l>
<l>DerivadaCore_In:=['','']</l>
<l>DerivadaCore_Out:=['','']</l>
<l>ObjectModel3D_Core_Pallet:=[]</l>
<l>SFM_Core_Pallet:=[]</l>
<l>Objec3D:=[]</l>
<l>ObjectModel3D_Core_Pallet:=[]</l>
<l>CamerasConection:=[1,1]</l>
<l>EstadoFxBloque2:=false</l>
<l>_EBD_O_CmdDatos_Old:=0</l>
<l>_EBD_O_CmdDatos_New:=0</l>
<l>ESTEREO:=0</l>
<l>OPTICA:=1</l>
<l>EstadoFx:=0</l>
<c>**************************************</c>
<c>*Imagen de sleeve capturada</c>
<c>**************************************</c>
<c></c>
<l>Matrix_Sleeve:={ { [] } }</l>
<l>Matrix_Sleeve.at(0).at(0):='SleeveName'</l>
<l>Matrix_Sleeve.at(0).at(1):='TakePic'</l>
<l>Matrix_Sleeve.at(0).at(2):='FolderPath'</l>
<l>Matrix_Sleeve.at(0).at(3):='MangaPos'</l>
<c></c>
<l>for Index1 := 1 to 6 by 1</l>
<c>    </c>
<l>    Matrix_Sleeve.at(Index1).at(1) := false</l>
<l>    Matrix_Sleeve.at(Index1).at(2) := ''</l>
<l>    Matrix_Sleeve.at(Index1).at(3) :=''</l>
<l>endfor</l>
<c></c>
<l>Matrix_Localizadores:=[]</l>
<c></c>
<l>for Index2 := 1 to 11 by 1</l>
<l>    Matrix_Localizadores[Index2]:=0</l>
<c>    </c>
<l>endfor</l>
<l>Visualizar3D:=false</l>
<c></c>
<l>global tuple g_SignoPallet </l>
<l>global tuple g_Pallet_Actual </l>
<c>**************************************</c>
<l>g_SignoPallet[3]:=1</l>
<l>g_SignoPallet[5]:=-1</l>
<l>g_Pallet_Actual[0]:=0</l>
<l>Camara_conexion_Est:=true</l>
<l>Send_Data_Info ('#### Inicio  Sistema de Vision Robot 1 ####', SerialHandle)</l>
<l>Resultado:=0</l>
<l>Procesando:=0</l>
<l>Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<c></c>
<l>* ######################################################################################</l>
<l>ConteoCirculares:=0</l>
<l>ConteoFotoPatron:=1</l>
<l>* ######################################################################################</l>
<c></c>
<c>*********************************************************</c>
<c>* variablnes que indican si la adquisicion estuvo Ok</c>
<c>*********************************************************</c>
<l>g_Error_CamaraEst_Adq:=false</l>
<l>g_Error_CamaraOpt_Adq:=false</l>
<l>* ########################################################</l>
<c></c>
<c></c>
<c>*Variable a leer para activar la adquisicion de vision</c>
<l>Tag_Lectura:='_EV01_O_CmdDatos'         </l>
<l>Read_EthernetIP_Data (Tag_Lectura, SerialHandle, _EV1_O_CmdDatos)</l>
<c></c>
<c></c>
<l>Conteo_error:=0</l>
<l>while (_EV1_O_CmdDatos!=0)</l>
<l>    Read_EthernetIP_Data (Tag_Lectura, SerialHandle, _EV1_O_CmdDatos)</l>
<l>endwhile</l>
<c></c>
<c></c>
<c>*********************************************************************</c>
<c>* Lectura de BDD</c>
<c>* Se debe activar con una señal que active la HMI luedio de cargar la BDD por el operador</c>
<l>Estado:=19</l>
<l>BD_Dinamica (SerialHandle, Estado, Vector_Estado_Fx, Vector_ID_Core_by_Segment_Pallet_1, Vector_ID_Core_by_Segment_Pallet_2, Vector_ID_Core_by_Segment_Pallet_3,\
             Vector_ID_Core_by_Segment_Pallet_4, Vector_ID_Core_by_Segment_Pallet_5, Vector_ID_Core_by_Segment_Pallet_6)</l>
<l>BDD_Data:={ { [] } }</l>
<l>BDD_Data.at(0).at(0):='Pallet 1'</l>
<l>BDD_Data.at(0).at(1):='Pallet 2'</l>
<l>BDD_Data.at(0).at(2):='Pallet 3'</l>
<l>BDD_Data.at(0).at(3):='Pallet 4'</l>
<l>BDD_Data.at(0).at(2):='Pallet 5'</l>
<l>BDD_Data.at(0).at(3):='Pallet 6'</l>
<c></c>
<c></c>
<l>BDD_Data.at(1).at(0):=Vector_ID_Core_by_Segment_Pallet_1</l>
<l>BDD_Data.at(2).at(0):=Vector_ID_Core_by_Segment_Pallet_2</l>
<l>BDD_Data.at(3).at(0):=Vector_ID_Core_by_Segment_Pallet_3</l>
<l>BDD_Data.at(4).at(0):=Vector_ID_Core_by_Segment_Pallet_4</l>
<l>BDD_Data.at(5).at(0):=Vector_ID_Core_by_Segment_Pallet_5</l>
<l>BDD_Data.at(6).at(0):=Vector_ID_Core_by_Segment_Pallet_6</l>
<c></c>
<c>********************************************************************</c>
<c></c>
<c></c>
<c></c>
<l>while(true)</l>
<c>    </c>
<l>    try       </l>
<c>     * ######################################################################################   </c>
<l>        Estado_SubProceso:=0 </l>
<l>        Tag_Destino:='_EV01_I_Procesando'</l>
<l>        Valor_Variable:=Estado_SubProceso</l>
<l>        Send_EthernetIP_Data (Tag_Destino, Valor_Variable, SerialHandle)</l>
<c>        </c>
<c>        </c>
<c>        *********************************************</c>
<c>        * Cuando resultado es 2 lo tiro a 0</c>
<c>        *********************************************</c>
<l>        Tag_Destino:='_EV01_I_Resultado'</l>
<l>        Read_EthernetIP_Data (Tag_Destino, SerialHandle, Resultado_Vision)</l>
<c>        </c>
<l>        if (Resultado_Vision&gt;1)</l>
<l>            wait_seconds(0.1)</l>
<l>            Tag_Destino:='_EV01_I_Resultado'</l>
<l>            Send_EthernetIP_Data (Tag_Destino, Valor_Variable, SerialHandle)     </l>
<l>        endif   </l>
<c>      * ######################################################################################          </c>
<c>        </c>
<c>        *Variable a leer para activar la adquisicion de vision</c>
<l>        Tag_Lectura:='_EV01_O_CmdDatos'         </l>
<l>        Read_EthernetIP_Data (Tag_Lectura, SerialHandle, _EV1_O_CmdDatos)</l>
<c>        </c>
<l>        Conteo_error:=0</l>
<c>        </c>
<c>        ***************************************************************</c>
<c>        *    Verifico que el comando sea distinto de 0 </c>
<c>        ************************************************************** </c>
<l>        Send_Data_Info ('-------------&gt; Esperando que CMD sea 0 &lt;-------------', SerialHandle)</l>
<c>    * ############################################################################</c>
<l>    Get_Cores_BD (Path_CORE_ID, Path_SFM_Segmentos, Path_3D_Segmentos)           </l>
<c>    * ############################################################################</c>
<c>  </c>
<l>        CmdDatosIs_Not_Zero (_EV1_O_CmdDatos, Tag_Lectura, SerialHandle, NxLib, OPTICA, ESTEREO, AcqHandle_Cam_0, \
                             CamerasConection, Camera_1, Vector_Estado_Fx, g_Error_CamaraOpt_Adq, Camara_conexion_Est, _EV1_O_CmdDatos, NxLib, \
                             Camera_1, AcqHandle_Cam_0, BDD_Data_New, Existe_BDD_New, g_Error_CamaraOpt_Adq_New, \
                             Camara_conexion_Est)</l>
<c></c>
<c>        </c>
<c></c>
<l>        g_Error_CamaraOpt_Adq:=g_Error_CamaraOpt_Adq_New</l>
<c>        </c>
<c>        </c>
<l>        Get_Puntero_Cerrar_SistemaV1(SerialHandle, Cierra_Vision)</l>
<c>          </c>
<c>        ********************************************</c>
<c>        * Cerrar vision de buena manera</c>
<c>        ********************************************</c>
<l>        if (Cierra_Vision ='Cerrar_Programa')</l>
<l>              return()</l>
<l>        endif</l>
<c></c>
<c>        ********************************************</c>
<l>        if (Existe_BDD_New)           </l>
<l>            BDD_Data:=BDD_Data_New</l>
<l>        endif</l>
<c>        ********************************************</c>
<c> **       Read_EthernetIP_Data (Tag_Lectura, SerialHandle, _EV1_O_CmdDatos)    </c>
<l>        Read_EthernetIP_Data (Tag_Lectura, SerialHandle, _EBD_O_CmdDatos)        </l>
<l>        Read_EthernetIP_Data (Tag_Lectura, SerialHandle, Y_R01_PattEscaneado)   </l>
<l>        Get_PunteroBDD (SerialHandle, _EBD_O_CmdDatos_New)</l>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        **************************************************************</c>
<c>        </c>
<l>* #### Inicio de Procesamiento de Imagenes ########################      </l>
<l>        Estado_SubProceso:=1 </l>
<l>        Tag_Destino:='_EV01_I_Procesando'</l>
<l>        Valor_Variable:=Estado_SubProceso</l>
<l>        Send_EthernetIP_Data (Tag_Destino, Valor_Variable, SerialHandle)     </l>
<c>        </c>
<l>* ######################################################################################         </l>
<c>        </c>
<c>        </c>
<c>        </c>
<l>        Tag_Lectura:='Y_R01_PattEscaneado'         </l>
<l>        Read_EthernetIP_Data (Tag_Lectura, SerialHandle, Y_R01_PattEscaneado)</l>
<c>        </c>
<l>*         while (_EV1_O_CmdDatos='' or   Y_R01_PattEscaneado='' or _EBD_O_CmdDatos_New=' ')        </l>
<l>*         Read_EthernetIP_Data (Tag_Lectura, SerialHandle, _EV1_O_CmdDatos)    </l>
<l>*         Read_EthernetIP_Data (Tag_Lectura, SerialHandle, _EBD_O_CmdDatos)        </l>
<l>*         Read_EthernetIP_Data (Tag_Lectura, SerialHandle, Y_R01_PattEscaneado)   </l>
<l>*         Get_PunteroBDD (SerialHandle, _EBD_O_CmdDatos_New)</l>
<l>*         endwhile</l>
<c>        </c>
<c>        </c>
<l>* ######################################################################################</l>
<l>* ##################### Extraccion Dinamica de STL #####################################</l>
<l>* #################Si cambia el Modelo de la BD y si no es PIN Tapa o localizador ######   </l>
<l>* ######################################################################################      </l>
<c>        </c>
<c>        ************************************************************************************************************************************************    </c>
<c>        ************************************************************************************************************************************************    </c>
<c>        ************************************************************************************************************************************************    </c>
<l>*       Y_R01_PattEscaneado:='True'</l>
<l>        Derivada_BDD:=_EBD_O_CmdDatos_New-_EBD_O_CmdDatos_Old</l>
<c>        ************************************************************************************************************************************************    </c>
<c>        ************************************************************************************************************************************************    </c>
<c>        ************************************************************************************************************************************************    </c>
<c>        ************************************************************************************************************************************************    </c>
<c>     </c>
<l>* ######################################################################################</l>
<l>* ##################### BLOQUE 1########################################################</l>
<l>* #################Identificación de elementos en el pallet#############################</l>
<l>* ##### Input -&gt; RV_CmdFotogen #########################################################</l>
<l>* #####       -&gt; Imagen</l>
<l>* #####       -&gt; 'PV_Pallet_to_Scan'</l>
<l>* #####       -&gt; BD Cores</l>
<l>* #####################################################################################</l>
<c>        </c>
<c>        </c>
<c>        </c>
<l>        if (_EV1_O_CmdDatos = 300  or \
            _EV1_O_CmdDatos = 400   or \ 
            _EV1_O_CmdDatos = 500   or \
            _EV1_O_CmdDatos = 600   or \
            _EV1_O_CmdDatos = 700   or \
            _EV1_O_CmdDatos = 800     )</l>
<c>            </c>
<c>            </c>
<l>            dev_clear_window()</l>
<l>            Bloque_1 (Objeto_1_mangas, Vector_Estado_Fx, SerialHandle, _EV1_O_CmdDatos, \
                      Path_SFM_Segmentos, Path_3D_Segmentos, Path_CORE_ID, NxLib, Camera_1, BDD_Data, \
                      g_CamInBasePose1)</l>
<l>            ConteoCirculares:=0</l>
<c>            </c>
<c>            </c>
<l>            Matrix_Sleeve:={ { [] } }</l>
<l>            Matrix_Sleeve.at(0).at(0):='SleeveName'</l>
<l>            Matrix_Sleeve.at(0).at(1):='TakePic'</l>
<l>            Matrix_Sleeve.at(0).at(2):='FolderPath'</l>
<l>            Matrix_Sleeve.at(0).at(3):='MangaPos'</l>
<c>            </c>
<l>            for Index1 := 1 to 6 by 1</l>
<c>                </c>
<l>                Matrix_Sleeve.at(Index1).at(1) := false</l>
<l>                Matrix_Sleeve.at(Index1).at(2) := ''</l>
<l>                Matrix_Sleeve.at(Index1).at(3) :=''</l>
<l>            endfor</l>
<c>            </c>
<l>        endif  </l>
<c>        </c>
<c>        </c>
<l>* #####################################################################################</l>
<l>* #####################################################################################</l>
<c>        * Se envia de manera secuencial el numero de elementos de cada segmento  </c>
<c>        *                                       BLOQUE 0.1 </c>
<l>* #####################################################################################</l>
<l>* #####################################################################################</l>
<c>        </c>
<l>        Get_Segmento_AND_Pallet (_EV1_O_CmdDatos, Pallet, Pallet_int, Segmento)    </l>
<l>        g_Pallet_Actual[0]:=Pallet_int</l>
<l>        if (Pallet_int &gt;=1  and Segmento &gt;= 1   )</l>
<c>            </c>
<l>            Bloque_01_Send_Dinamic_Info_Pallet (Objeto_1_mangas, SerialHandle, _EV1_O_CmdDatos, \
                                                Path_CORE_ID, Path_3D_Segmentos, Path_SFM_Segmentos, Vector_Estado_Fx, NxLib, \
                                                Camera_1, Parametros_Visualizacion, Valores_Visualizacion, WindowHandle, Matrix_Sleeve,\
                                                ConteoCirculares, EstadoFx, g_CamInBasePose1, Matrix_Sleeve_Out, Camara_conexion_Est)</l>
<l>            Matrix_Sleeve:= Matrix_Sleeve_Out</l>
<c>            </c>
<c>            </c>
<l>        endif  </l>
<c>        </c>
<l>* ##############################FIN BLOQUE 1###########################################</l>
<c>     </c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<l>* ######################################################################################</l>
<l>* ##################### BLOQUE 2########################################################</l>
<l>* #################Identificación de elementos en el pallet#############################</l>
<l>* ##### Input -&gt; RV_CmdFotogen #########################################################</l>
<l>* #####       -&gt; Imagen</l>
<l>* #####       -&gt; 'PV_Pallet_to_Scan'</l>
<l>* #####       -&gt; BD Cores</l>
<l>* ######################################################################################</l>
<l>        if (_EV1_O_CmdDatos = 20 or _EV1_O_CmdDatos = 21 or _EV1_O_CmdDatos = 27)</l>
<c>            </c>
<c>            </c>
<l>            dev_clear_window()</l>
<l>            dev_set_line_width(1)</l>
<l>            Bloque_2_Smart (SerialHandle, Vector_Estado_Fx, AcqHandle_Cam_0, Camera0_Parameters, Camera0_Pose,\
                            ConteoFotoPatron, Estado_SubProceso, PoseForCalibrationPlate, ToolInCamPose,\
                            ToolInBasePose, ObjInBasePose, ConteoFotoPatron, g_Error_CamaraOpt_Adq) </l>
<c>           </c>
<c>            </c>
<l>            if (_EV1_O_CmdDatos = 27)</l>
<l>                ConteoFotoPatron:=1</l>
<l>            endif</l>
<c>            </c>
<l>        endif</l>
<l>* ##############################FIN BLOQUE 2############################################</l>
<c>        </c>
<c>        </c>
<c>        </c>
<c>  </c>
<c>        </c>
<c>        </c>
<c>        </c>
<c></c>
<c>        </c>
<c></c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<l>* ######################################################################################</l>
<l>* ##################### BLOQUE 3########################################################</l>
<l>* #################   SOLO Tomar Cores IRREGULARES e insertarlos #######################</l>
<l>* ##### Input -&gt; RV_CmdFotogen #########################################################</l>
<l>* #####       -&gt; RAM Base Datos</l>
<l>* #####       -&gt; 'PV_Pallet_to_Scan'</l>
<l>* #####       -</l>
<l>* ###################################################################################### </l>
<c>        **if (_EV1_O_CmdDatos &gt; 21 and _EV1_O_CmdDatos &lt;= 26  and Estado_Get_SFM_STL)   </c>
<l>        if (_EV1_O_CmdDatos &gt; 21 and _EV1_O_CmdDatos &lt;= 26  )</l>
<l>            dev_clear_window()</l>
<c>            </c>
<l>*            if (Derivada_BDD !=0 and Y_R01_PattEscaneado='True' )</l>
<c>                </c>
<l>                Get_Core_To_Use_Main (SerialHandle, Cod_Core_ToUse, FXcheck) </l>
<l>                conteoBDD:=0</l>
<l>                Limite:=3</l>
<l>                while(Cod_Core_ToUse=' ' and conteoBDD&lt;3)</l>
<l>                    Get_Core_To_Use_Main (SerialHandle, Cod_Core_ToUse, FXcheck)</l>
<l>                    conteoBDD:=conteoBDD+1</l>
<l>                endwhile</l>
<l>                DerivadaCore_Out[1] := Cod_Core_ToUse</l>
<c>                </c>
<c>                </c>
<l>                Get_Tipo_EntidadBDD (Cod_Core_ToUse, Is_a_Core)</l>
<c>                </c>
<l>                if (Is_a_Core and conteoBDD&lt; Limite)</l>
<c>                    **if (DerivadaCore_Out[1] != DerivadaCore_Out[0] )    </c>
<l>                    if (true )    </l>
<l>                        Objec3D:=|ObjectModel3D_Core_Pallet|</l>
<l>                        if (Objec3D&gt;0)</l>
<l>                            clear_object_model_3d (ObjectModel3D_Core_Pallet)</l>
<l>                            clear_surface_model (SFM_Core_Pallet)    </l>
<l>                        endif     </l>
<l>                        Get_3dModel_Core_Direct (SerialHandle, Path_CORE_ID, Path_3D_Segmentos, Path_SFM_Segmentos, Vector_Estado_Fx, DerivadaCore_In, \
                                          ObjectModel3D_Core_Pallet, SFM_Core_Pallet, Cod_Core_ToUse, ObjectModel3D_Core_Pallet, \
                                          SFM_Core_Pallet, Modelo3D_Select, Cod_Core_ToUse, DerivadaCore_Out)</l>
<c>                        </c>
<l>                        Send_Data_Info ('Seteo Espacial del SFM', SerialHandle)</l>
<l>                        set_surface_model_param (SFM_Core_Pallet, 'pose_restriction_reference_pose', [0,0,0,0,0,0,0])</l>
<l>                        Send_Data_Info ('Seteo Angular del SFM', SerialHandle)</l>
<l>                        set_surface_model_param (SFM_Core_Pallet, 'pose_restriction_max_angle_diff', rad(10))</l>
<l>                        Send_Data_Info ('Seteo Angular Finalizado', SerialHandle)</l>
<c>                        </c>
<l>                    endif</l>
<c>                    </c>
<l>                    DerivadaCore_In:=DerivadaCore_Out</l>
<l>                    Estado_Get_SFM_STL:=true</l>
<l>                endif </l>
<c>                </c>
<l>*            endif  </l>
<l>* #################################################################################</l>
<l>            Bloque_3 ( ModelImage, X, Y, Z, ImgLeftCamera, SerialHandle, NxLib, Camera_1, Parametros_Visualizacion, Valores_Visualizacion, \
                      Path_SFM_Segmentos, Path_3D_Segmentos, Path_CORE_ID, Vector_Estado_Fx, ObjectModel3D_Core_Pallet, SFM_Core_Pallet, \
                      Modelo3D_Select, WindowHandle, Cod_Core_ToUse, Matrix_Sleeve, ConteoCirculares, Matrix_Sleeve, ConteoCirculares)</l>
<c>            </c>
<l>                ConteoCirculares:=0</l>
<c></c>
<l>        endif</l>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<l>* ######################################################################################</l>
<l>* ##################### BLOQUE 3.1######################################################     </l>
<l>* ##### Input -&gt; Matrix_Sleeve #########################################################</l>
<l>* ##### Envio la data de las mangas    </l>
<l>* ######################################################################################     </l>
<l>        if (_EV1_O_CmdDatos &gt; 200 and _EV1_O_CmdDatos&lt;=250)</l>
<c>            </c>
<l>            Send_Data_Sleeve_To_Robot (_EV1_O_CmdDatos, Matrix_Sleeve, SerialHandle, Cod_Core_ToUse, Matrix_Sleeve)</l>
<c>            </c>
<l>        endif</l>
<c>        </c>
<l>        _EBD_O_CmdDatos_Old:=_EBD_O_CmdDatos_New</l>
<c>        </c>
<c>        </c>
<l>* ##############################FIN BLOQUE 3.1############################################</l>
<c>        </c>
<l>* ######################################################################################</l>
<l>* ##################### BLOQUE Extraccion Localizadores    #############################</l>
<l>* #################        Tomar Cores e insertarlos       #############################</l>
<l>* ##### Input -&gt; RV_CmdFotogen #########################################################</l>
<l>* #####       -&gt; PatternActual (BD)    </l>
<l>* ######################################################################################</l>
<l>        if (_EV1_O_CmdDatos &gt;= 30 and _EV1_O_CmdDatos &lt;= 49 )</l>
<l>            dev_clear_window()</l>
<l>            Bloque_localizadores_smart (SerialHandle, NxLib, Camera_1, Matrix_Localizadores)</l>
<c>            </c>
<l>        endif</l>
<c>        </c>
<l>* ##############################FIN BLOQUE Extraccion Localizadores ####################</l>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        **************************************************************        </c>
<c>        ***************************************************************</c>
<c>        *    Receta Automatica</c>
<c>        **************************************************************</c>
<c>        **************************************************************</c>
<c>        ******** VALOR BOOLEANO PARA AGUARDAR RECETA AUTOMATICA ******</c>
<l>        Receta:=false</l>
<l>        RECETA_AUTOMATICA (SerialHandle, Receta)   </l>
<c>        **************************************************************</c>
<c>        **************************************************************        </c>
<c>        **************************************************************        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        ***************************************************************</c>
<c>        *    Verifico que el comando sea 0 </c>
<c>        **************************************************************               </c>
<l>        CmdDatosIsZero (SerialHandle, Tag_Lectura, _EV1_O_CmdDatos)</l>
<c>        **************************************************************</c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<l>    catch (Exception)</l>
<c>        </c>
<l>        Send_Data_Error (Exception,SerialHandle,EstadoFx)</l>
<c>        </c>
<l>    endtry</l>
<c>    </c>
<c>    </c>
<l>endwhile</l>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
</body>
<docu id="A01_Consolidado_Vision_R1">
<parameters>
<parameter id="AcqHandle_Cam_0"/>
<parameter id="Camera0_Parameters"/>
<parameter id="Camera0_Pose"/>
<parameter id="Camera_1"/>
<parameter id="NxLib"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="Path_3D_Segmentos"/>
<parameter id="Path_CORE_ID"/>
<parameter id="Path_SFM_Segmentos"/>
<parameter id="SerialHandle"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="Vector_Estado_Fx"/>
</parameters>
</docu>
</procedure>
<procedure name="Find_SerialBridge">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>Bucle:=true</l>
<l>pathFile:='C:/DaFunk/InitFile.txt'</l>
<l>while (Bucle)</l>
<l>    try</l>
<l>        open_file(pathFile,'input',FileHandle)</l>
<l>*         fwrite_string(FileHandle,'Para escribir weas')</l>
<l>        fread_string(FileHandle,String,IsEOF) </l>
<l>*         fnew_line(FileHandle)</l>
<l>        close_file(FileHandle)</l>
<l>        if (String='True')</l>
<l>            Mensaje:='SerialBridge Detectado............'</l>
<l>            Send_Data_Info (Mensaje, SerialHandle)</l>
<l>            Bucle:=false</l>
<l>        endif</l>
<l>    catch (Exception )</l>
<c>        </c>
<l>    endtry</l>
<c>    </c>
<l>endwhile</l>
<l>return ()</l>
</body>
<docu id="Find_SerialBridge">
<parameters>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_EstadoSerialBridge">
<interface>
<oc>
<par name="EstadoSerialBridge" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>pathFile:='C:/DaFunk/InitFile.txt'</l>
<c></c>
<l>try</l>
<l>    open_file(pathFile,'input',FileHandle)</l>
<l>*     fwrite_string(FileHandle,'Para escribir weas')</l>
<l>    fread_string(FileHandle,EstadoSerialBridge,IsEOF) </l>
<l>*     fnew_line(FileHandle)</l>
<l>    close_file(FileHandle)</l>
<l>    if (EstadoSerialBridge='True')</l>
<l>        EstadoSerialBridge:=true</l>
<c>        </c>
<l>    else</l>
<l>        EstadoSerialBridge:=false</l>
<l>    endif</l>
<l>catch (Exception )</l>
<l>    EstadoSerialBridge:=false</l>
<c>   </c>
<l>endtry</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_EstadoSerialBridge">
<parameters>
<parameter id="EstadoSerialBridge"/>
</parameters>
</docu>
</procedure>
<procedure name="Verificate_Pose_RobotVision">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Pose_Refinada" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>                 Get_Pose_Tool (SerialHandle, realPoss)</l>
<l>                dev_inspect_ctrl (realPoss)</l>
<l>                Get_Pose_Tool (SerialHandle, ToolInBasePose)</l>
<l>                dev_inspect_ctrl (ToolInBasePose)</l>
<c>         </c>
<c>                * ************************************************************************************************************</c>
<c>                * Oriento el robot a como este la placa</c>
<c>                * ************************************************************************************************************</c>
<l>                read_pose ('C:/Users/Usuario/Dropbox (MIRS)/1.-Servidor Desarrollo Software/7.-Magotteaux/7.-HandEye/1.- Ensenso R1/ToolInCamPose_R1.dat', \
                           ToolInCamPose)</l>
<l>                pose_invert (ToolInCamPose, PoseInvert)</l>
<l>                dev_inspect_ctrl (PoseInvert)</l>
<l>                  pose_invert (PoseInvert, ToolInCamPose)</l>
<l>                dev_inspect_ctrl (ToolInCamPose)</l>
<l>               ObjInCamPose := Pose_Refinada</l>
<c>                </c>
<l>                pose_invert (ToolInCamPose, CamInToolPose)</l>
<l>                pose_compose (ToolInBasePose, CamInToolPose, CamInBasePose)</l>
<l>                pose_compose (CamInBasePose, ObjInCamPose, ObjInBasePose)</l>
<l>                convert_pose_type (ObjInBasePose, 'Rp+T', 'abg', 'point', ObjInBasePose)</l>
<l>                dev_inspect_ctrl (ObjInBasePose)</l>
<c>                </c>
<l>return ()</l>
</body>
<docu id="Verificate_Pose_RobotVision">
<parameters>
<parameter id="Pose_Refinada"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Image_Bloque3">
<interface>
<oo>
<par name="ModelImage" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
<par name="Z" base_type="iconic" dimension="0"/>
<par name="ImgLeftCamera" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="FOTO" base_type="ctrl" dimension="0"/>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
<par name="Cod_Core_ToUse" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
<par name="Camara_conexion_Est" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* Configuracion de Parametros</c>
<c></c>
<c></c>
<l>Get_TipoEntidad (Cod_Core_ToUse, Is_a_Core)</l>
<l>if (Is_a_Core)</l>
<l>    MinimumDisparity_Cam1:=-78</l>
<l>    NumberOfDisparities_Cam1:= 41</l>
<l>else</l>
<l>    MinimumDisparity_Cam1 := -64</l>
<l>    NumberOfDisparities_Cam1 := 128</l>
<l>endif</l>
<c></c>
<c></c>
<l>Projector:='true'</l>
<l>FrontLigth:='true'</l>
<l>AutoExposure:='false'</l>
<l>AutoGain:='false'</l>
<l>Exposure := 4.49</l>
<l>Gain:=3</l>
<l>FlexView:=4</l>
<l>Config_Parametros_Cam_R1 (NxLib, Camera_1, NumberOfDisparities_Cam1, MinimumDisparity_Cam1, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure, FlexView, TempCam)</l>
<c></c>
<l>* Get_Core_ToUse_From_BDD_Fast (SerialHandle, Cod_Core_ToUse, Pallet_To_Scan, Segmento_To_Scan, PitutoExist, FXcheck, Diametro)</l>
<c></c>
<l>Adq_Imagen (ModelImage, NxLib, Camera_1, Camara_conexion_Est)</l>
<c></c>
<l>if (not Camara_conexion_Est)</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    return()</l>
<c>    </c>
<l>endif</l>
<c></c>
<l>if (not Is_a_Core)</l>
<l>    set_framegrabber_param (NxLib, 'do_execute', 'EstimateDisparitySettings')</l>
<l>    get_framegrabber_param (NxLib, '//Execute/Default/Result/193216/MinimumDisparity', MinimumDisparity)</l>
<l>    get_framegrabber_param (NxLib, '//Execute/Default/Result/193216/NumberOfDisparities', NumberOfDisparities)</l>
<l>    Config_Parametros_Cam_R1_COPY_1 (NxLib, Camera_1, NumberOfDisparities, MinimumDisparity, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure, FlexView, TempCam)</l>
<l>    Adq_Imagen (ModelImage, NxLib, Camera_1, Camara_conexion_Est)</l>
<c>    </c>
<l>    Adq_XYZ_Img (ModelImage, X, Y, Z)</l>
<c>    </c>
<l>endif</l>
<c></c>
<c></c>
<c>***********************************************************************</c>
<c>****** Guardo las Imagenes ********************************************</c>
<l>get_system_time (MSecond, Second, Minute, Hour, Day, YDay, Month, Year)</l>
<c></c>
<l>Fecha:=Year+'_'+Month+'_'+Day+'_'+Hour+'_'+Minute+'_'+Second+'_'+MSecond</l>
<l>write_object (ModelImage, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 2/Img_'+Cod_Core_ToUse+'_'+Fecha)</l>
<l>if (false)</l>
<l>    read_object (ModelImage, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 2/Img_EJY_2019_10_4_16_43_15_880.hobj')</l>
<l>    read_object (ModelImage, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 2/Img_CLR_2019_10_28_14_22_17_470.hobj')</l>
<c>    </c>
<l>endif</l>
<c></c>
<c></c>
<c>*************************************************************************</c>
<l>Get_TipoEntidad (Cod_Core_ToUse, Is_a_Core)</l>
<l>Adq_XYZ_Img (ModelImage, X, Y, Z)</l>
<c></c>
<c></c>
<c>* Then is a  Sleeve</c>
<l>if (Is_a_Core)</l>
<c>    </c>
<c>     </c>
<l>    gen_rectangle1 (ROI_0, 82.7, 226.06, 645.9, 809.74)</l>
<l>   * Get_ROI (ROI_0, Segmento_To_Scan, Segmento_To_Scan_pal)</l>
<c>    </c>
<l>    reduce_domain (Z, ROI_0, Z)</l>
<c>    *******************************************************</c>
<c>    * Segmento el core de manera dinamica******************</c>
<l>*     median_image (Z, Z, 'circle', 3, 'mirrored') </l>
<c>    </c>
<c>    *Rango de deteccion  desde la camara </c>
<l>    RangoLow:=1030</l>
<l>    RangoHigh:=1710.0</l>
<l>    threshold (Z, Regions, RangoLow, RangoHigh)</l>
<l>    reduce_domain (Z, Regions, Z)</l>
<c>    </c>
<c>    </c>
<c>    ** Filtro el piso</c>
<l>    DitsiObjMax:=1706</l>
<l>    Segmentar_Core (Z, X, Y, Z, Entidad, DitsiObjMax, Estado_Funcion)</l>
<l>    Histagram_Filter (Z, X, Y, Z, Entidad, Estado_Funcion1)</l>
<c>    *******************************************************</c>
<l>    dilation_circle (Entidad, EntidadDilatada, 30.5)</l>
<l>    reduce_domain (Z, EntidadDilatada, Z)</l>
<c>    </c>
<l>*     select_obj(ModelImage, ImgLeftCamera, 1)</l>
<l>    dev_display (EntidadDilatada)</l>
<l>else</l>
<c>    </c>
<c>    </c>
<c>    *******************************************************</c>
<c>    * Segmento el core de manera dinamica******************</c>
<l>    DitsiObjMax:=2515.0</l>
<l>    Segmentar_Core (Z, X, Y, Z, Entidad, DitsiObjMax, Estado_Funcion)</l>
<c>    *******************************************************</c>
<l>    dilation_circle (Entidad, EntidadDilatada, 60.5)</l>
<l>    reduce_domain (Z, EntidadDilatada, Z)</l>
<c>    </c>
<l>    select_obj(ModelImage, ImgLeftCamera, 1)</l>
<l>    dev_display (EntidadDilatada)</l>
<c>    </c>
<l>endif</l>
<c></c>
<c></c>
<c></c>
<l>xyz_to_object_model_3d (X, Y, Z, Escena3D_RAW)</l>
<c></c>
<c>******************************************************************************************************************************</c>
<l>Debug_View:=0</l>
<l>Visualizar_3D ([ Escena3D_RAW], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Debug_View, [], [], [], WindowHandle, PoseOut1)</l>
<c></c>
<c></c>
<c></c>
<l>Parametros_VisualizacionOut := ['disp_pose','color_attrib','lut','disp_lines','point_size']</l>
<l>Valores_VisualizacionOut := ['false','coord_z','rainbow','true',1]</l>
<l>create_pose (250, 250, 3000, 0, 0, 0, 'Rp+T', 'gba', 'point', PoseView)</l>
<l>disp_object_model_3d (WindowHandle, Escena3D_RAW, [], PoseView, Parametros_VisualizacionOut, Valores_VisualizacionOut)</l>
<c>******************************************************************************************************************************</c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Image_Bloque3">
<parameters>
<parameter id="Camara_conexion_Est"/>
<parameter id="Camera_1"/>
<parameter id="Cod_Core_ToUse"/>
<parameter id="Escena3D_RAW"/>
<parameter id="FOTO"/>
<parameter id="ImgLeftCamera"/>
<parameter id="ModelImage"/>
<parameter id="NxLib"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="SerialHandle"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="WindowHandle"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_SprueExistence">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Pattern" base_type="ctrl" dimension="0"/>
<par name="PosicionRack" base_type="ctrl" dimension="0"/>
<par name="ExisteEnRack" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Tag_Lectura:='_EBD_I_PatternList'         </l>
<l>Read_EthernetIP_Data (Tag_Lectura, SerialHandle, Pattern)</l>
<c></c>
<c>********************************************</c>
<c>* Peticion de RamSprue</c>
<c>*********************************************</c>
<c></c>
<l>Peticion     := 'RamSprue'</l>
<l>Variable_OPC := Pattern</l>
<c></c>
<l>Data:=Peticion+';'+Variable_OPC</l>
<c></c>
<l>write_serial (SerialHandle, ords(Data))</l>
<c></c>
<l>wait_seconds (0.08)</l>
<c>*Numero de caracteres a leer</c>
<l>read_serial (SerialHandle, 20, Nchar)</l>
<l>Variable:= chrt(Nchar)</l>
<l>tuple_split (Variable, ';', Data)</l>
<c></c>
<l>Pattern:=Data[0]</l>
<l>PosicionRack:=Data[1]</l>
<l>if (Data[2]='O')</l>
<l>    ExisteEnRack:=true</l>
<l>elseif (Data[2]='X')</l>
<l>    ExisteEnRack:=false</l>
<l>endif</l>
<l>return ()</l>
</body>
<docu id="Get_SprueExistence">
<parameters>
<parameter id="ExisteEnRack"/>
<parameter id="Pattern"/>
<parameter id="PosicionRack"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Set_SprueExistence">
<interface>
<ic>
<par name="PatternName" base_type="ctrl" dimension="0"/>
<par name="Data" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>DataOut := Data</l>
<l>Peticion     := 'RamSprue'</l>
<l>Instruccion := 'Set_Sprue'</l>
<c></c>
<l>DataOut := Peticion+';'+Instruccion+';'+PatternName+';'+DataOut</l>
<c></c>
<l>write_serial (SerialHandle, ords(DataOut))</l>
<l>return ()</l>
</body>
<docu id="Set_SprueExistence">
<parameters>
<parameter id="Data"/>
<parameter id="PatternName"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_AlturaLocalizador">
<interface>
<io>
<par name="Zmred" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Minimo" base_type="ctrl" dimension="0"/>
<par name="Estado_Fx" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>Estado_Fx:=false</l>
<l>try</l>
<c>    </c>
<l>    Minimo_altura:=900</l>
<l>    Maxima_Altura:=1530</l>
<l>    threshold (Zmred, Localizadores, Minimo_altura, Maxima_Altura)  </l>
<l>    dev_display (Localizadores)</l>
<c>    </c>
<c>    </c>
<l>    erosion_circle (Localizadores, Localizadores, 5)</l>
<l>    reduce_domain (Zmred, Localizadores, posibles_Localizadores)</l>
<c>    </c>
<l>*     gauss_filter (posibles_Localizadores, posibles_Localizadores, 5)</l>
<l>    local_max (posibles_Localizadores, LocalMinima)        </l>
<l>    connection (LocalMinima, ConnectedRegions) </l>
<c>    </c>
<c>    </c>
<l>    area_center (ConnectedRegions, Area, Row, Column)        </l>
<l>    get_grayval (posibles_Localizadores, Row, Column, AlturaLocalizadores)        </l>
<c>    </c>
<l>    tuple_mean (AlturaLocalizadores, Minimo)</l>
<c>  **  tuple_min (AlturaLocalizadores, Minimo)</c>
<l>    Estado_Fx:=true</l>
<c>    </c>
<l>catch (Exception)</l>
<c>    </c>
<l>    Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<l>    Estado_Fx:=false</l>
<l>endtry</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_AlturaLocalizador">
<parameters>
<parameter id="Estado_Fx"/>
<parameter id="Minimo"/>
<parameter id="SerialHandle"/>
<parameter id="Zmred"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Zona_ROI">
<interface>
<io>
<par name="Zm" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Zmred" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="N_Localizador" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c></c>
<c></c>
<c>**read_image (ModelImage, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Localizadores/ModelImage881613.hobj')</c>
<l>switch (N_Localizador)</l>
<l>case 1:</l>
<c>    * ROI Zona 1</c>
<c></c>
<l>    gen_circle (ROI_0_V, 725.966, 1107.99, 20.3238)</l>
<l>    gen_circle (ROI_0, 725.966, 1106.75, 58.9316)</l>
<c></c>
<c>    </c>
<l>    difference (ROI_0, ROI_0_V, Zona1)</l>
<l>    reduce_domain (Zm, Zona1, Zmred)</l>
<l>    break</l>
<c></c>
<l>case 2:</l>
<c>    * ROI Zona 2   </c>
<c> </c>
<c>    </c>
<c>    </c>
<l>    gen_circle (ROI_1_V, 722.101, 861.821, 21.4418)</l>
<l>    gen_circle (ROI_1, 722.101, 861.462, 53.4014)</l>
<l>    difference (ROI_1, ROI_1_V, Zona2)</l>
<l>    reduce_domain (Zm, Zona2, Zmred)</l>
<l>    break</l>
<c></c>
<l>case 3:</l>
<c>    * ROI Zona 3</c>
<c></c>
<l> gen_circle (ROI_2_V, 719.185, 547.377, 21.9948)</l>
<l>    gen_circle (ROI_2, 719.185, 547.377, 62.4229)</l>
<c>    </c>
<c>   </c>
<c>    </c>
<l>    difference (ROI_2, ROI_2_V, Zona3)</l>
<l>    reduce_domain (Zm, Zona3, Zmred)</l>
<l>    break</l>
<l>case 4:</l>
<c>    * ROI Zona 4   </c>
<l>    gen_circle (ROI_3_V, 311.797, 1114.26, 26.379)   </l>
<l>    gen_circle (ROI_3, 313.243, 1112.52, 67.2246)</l>
<c>    </c>
<l>    difference (ROI_3, ROI_3_V, Zona4)</l>
<l>    reduce_domain (Zm, Zona4, Zmred)</l>
<l>    break</l>
<l>case 5:</l>
<c>    * ROI Zona 5</c>
<c>    </c>
<l>    gen_circle (ROI_4_V, 512.959, 393.812, 19.4173)</l>
<l>    gen_circle (ROI_4, 512.959, 393.812, 67.2016)</l>
<c></c>
<l>    difference (ROI_4, ROI_4_V, Zona5)</l>
<l>    reduce_domain (Zm, Zona5, Zmred)</l>
<c></c>
<l>    break</l>
<l>case 6:</l>
<c>    * ROI Zona 6</c>
<c>    </c>
<c>   </c>
<l>    gen_circle (ROI_5_V, 516.876, 722.099, 22.6132)</l>
<l>    gen_circle (ROI_5, 516.876, 722.099, 91.2462)</l>
<c></c>
<c>    </c>
<l>    difference (ROI_5, ROI_5_V, Zona6)</l>
<l>    reduce_domain (Zm, Zona6, Zmred)</l>
<l>    break</l>
<c></c>
<l>case 7:</l>
<c></c>
<c>    * ROI Zona 7</c>
<c>  </c>
<c>    </c>
<l>    gen_circle (ROI_6_V, 518.375, 1014.69, 26.713)</l>
<c>    </c>
<l>    gen_circle (ROI_6, 518.375, 1014.69, 86.6751)</l>
<c>    </c>
<l>    difference (ROI_6, ROI_6_V, Zona7)</l>
<l>    reduce_domain (Zm, Zona7, Zmred)</l>
<l>    break</l>
<c></c>
<l>case 8:</l>
<c></c>
<c>    * ROI Zona 8</c>
<c>  </c>
<l>    gen_circle (ROI_7_V, 720.242, 217.479, 37.0034)</l>
<l>    gen_circle (ROI_7, 720.242, 217.479, 102.114)</l>
<c></c>
<l>    difference (ROI_7, ROI_7_V, Zona8)</l>
<l>    reduce_domain (Zm, Zona8, Zmred)</l>
<l>    break</l>
<c></c>
<c></c>
<l>case 9:</l>
<c>    * ROI Zona 9</c>
<c>  </c>
<l>    gen_circle (ROI_8_V, 310.583, 866.749, 29.8114)</l>
<l>    gen_circle (ROI_8, 310.583, 866.749, 111.827)</l>
<c></c>
<c></c>
<l>    difference (ROI_8, ROI_8_V, Zona9)</l>
<l>    reduce_domain (Zm, Zona9, Zmred)</l>
<l>    break</l>
<c></c>
<l>case 10:</l>
<c>    * ROI Zona 10</c>
<c>    </c>
<c></c>
<c>    </c>
<l>    gen_circle (ROI_9, 308.077, 550.385, 117.427)</l>
<l>    gen_circle (ROI_9_V, 308.077, 550.385, 30.9328)</l>
<c>    </c>
<l>    difference (ROI_9, ROI_9_V, Zona10)</l>
<l>    reduce_domain (Zm, Zona10, Zmred)</l>
<l>    break</l>
<c></c>
<l>case 11:</l>
<c>    * ROI Zona 11</c>
<c>    </c>
<l>    gen_circle (ROI_10_V, 305.39, 218.648, 32.9966)</l>
<l>    gen_circle (ROI_10, 305.39, 218.648, 116.803)</l>
<c></c>
<c></c>
<c> </c>
<l>    difference (ROI_10, ROI_10_V, Zona11)</l>
<l>    reduce_domain (Zm, Zona11, Zmred)</l>
<c>   </c>
<l>    break</l>
<c></c>
<l>endswitch</l>
<c></c>
<c></c>
<c>*********************************************</c>
<c>** Filtro la imagen para eleiminar ruido</c>
<l> median_image (Zmred, ImageMedian, 'circle', 3, 'mirrored')</l>
<c>**********************************************************    </c>
<c> </c>
<c> </c>
<c> </c>
<l>return ()</l>
</body>
<docu id="Get_Zona_ROI">
<parameters>
<parameter id="N_Localizador"/>
<parameter id="Zm"/>
<parameter id="Zmred"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Picture">
<interface>
<oo>
<par name="Zm" base_type="iconic" dimension="0"/>
<par name="ImgLeftCamera" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* Configuracion de Parametros</c>
<l>MinimumDisparity_Cam1:=-43</l>
<l>NumberOfDisparities_Cam1:= 32</l>
<c></c>
<l>Projector:='true'</l>
<l>FrontLigth:='true'</l>
<l>AutoExposure:='true'</l>
<l>AutoGain:='true'</l>
<l>Exposure := 3.0</l>
<l>Gain:=1</l>
<l>FlexView:=1</l>
<l>Config_Parametros_Cam_R1 (NxLib, Camera_1, NumberOfDisparities_Cam1, MinimumDisparity_Cam1, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure, FlexView, TempCam)</l>
<c></c>
<c></c>
<l>Adq_Imagen (ModelImage, NxLib, Camera_1, Camara_conexion_Est)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c>*******************************************************************************        </c>
<l>* list_files ('D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Localizadores', 'files', Files)</l>
<l>* read_image (ModelImage, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Localizadores/ModelImage9101125.hobj')</l>
<c>*******************************************************************************         </c>
<l>dev_display (ModelImage)</l>
<c></c>
<l>Adq_XYZ_Img (ModelImage, Xm, Ym, Zm)</l>
<l>compose3 (Xm, Ym, Zm, MultiChannelImage)</l>
<l>select_obj(ModelImage, ImgLeftCamera, 1)</l>
<c></c>
<c></c>
<c></c>
<c>***********************************************************************</c>
<c>****** Guardo las Imagenes ********************************************</c>
<l>get_system_time (MSecond, Second, Minute, Hour, Day, YDay, Month, Year)</l>
<c></c>
<l>write_object (ModelImage, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Localizadores/ModelImage'+Month+Day+Hour+Second)</l>
<c></c>
<c></c>
<c></c>
<c>***********************************************************************</c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Picture">
<parameters>
<parameter id="Camera_1"/>
<parameter id="ImgLeftCamera"/>
<parameter id="NxLib"/>
<parameter id="Zm"/>
</parameters>
</docu>
</procedure>
<procedure name="Check_BasePose">
<interface>
<ic>
<par name="PoseForCalibrationPlate" base_type="ctrl" dimension="0"/>
<par name="ToolInCamPose" base_type="ctrl" dimension="0"/>
<par name="ToolInBasePose" base_type="ctrl" dimension="0"/>
<par name="Height" base_type="ctrl" dimension="0"/>
<par name="Width" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>       Get_Pose_Tool (SerialHandle, ToolInBasePose)</l>
<c>      </c>
<l>   *    create_pose (1780.63, 1568.38, 987.679, 180, 0, 0, 'Rp+T', 'abg', 'point', ToolInBasePose)</l>
<c>       </c>
<c>       </c>
<c>       </c>
<c>       </c>
<c>       </c>
<l>        dev_inspect_ctrl (ToolInBasePose)           </l>
<l>        read_pose ('C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/7.-HandEye/2. procilica/ToolInCamPose_Procilica.dat', \
                   ToolInCamPose)</l>
<l>        dev_inspect_ctrl (ToolInCamPose)</l>
<l>        pose_invert (ToolInCamPose, CamInToolPose)</l>
<c>        </c>
<l>        dev_inspect_ctrl (CamInToolPose)</l>
<l>        pose_invert (CamInToolPose, ToolInCamPose)</l>
<c>        </c>
<l> *       write_pose (ToolInCamPose, 'C:/Users/Usuario/Dropbox (MIRS)/1.-Servidor Desarrollo Software/7.-Magotteaux/7.-HandEye/2. procilica/ToolInCamPose_Procilica.dat')</l>
<c>        * ************************************************************************************************************</c>
<c>        * Lectura de Posicion de la herramienta del robot. Deberar ser por etehrnetIP</c>
<c>        * ************************************************************************************************************</c>
<c></c>
<c>        </c>
<c></c>
<l>ObjInCamPose := PoseForCalibrationPlate</l>
<c>        </c>
<l>        pose_invert (ToolInCamPose, CamInToolPose)</l>
<l>        pose_compose (ToolInBasePose, CamInToolPose, CamInBasePose)</l>
<l>        pose_compose (CamInBasePose, ObjInCamPose, ObjInBasePose)</l>
<l>        convert_pose_type (ObjInBasePose, 'Rp+T', 'abg', 'point', ObjInBasePose)</l>
<l>         dev_inspect_ctrl (ObjInBasePose)</l>
<c>         </c>
<l>         OsffetZ:=0</l>
<l>         ObjInBasePose[2]:=ObjInBasePose[2]+OsffetZ</l>
<c>    </c>
<c>        </c>
<l>        disp_cross (200000,  Height/2,Width/2, 1500, 0)</l>
<c>         </c>
<c>        * *************************************************************************************************************</c>
<c>        * Obtengo la posicion del objetpo a insertar, relativo a la herramienta.</c>
<c>        * ************************************************************************************************************       </c>
<l>*         Get_Pose_Punto_Insercion (PoseForCalibrationPlate, ToolInCamPose, ToolInBasePose, SerialHandle, ObjInBasePoseOut)</l>
<c>        </c>
<l>        Altura_Objetivo := 850</l>
<l>        Altura_Actual := PoseForCalibrationPlate[2]</l>
<l>        DeltaAltura := Altura_Actual-Altura_Objetivo</l>
<c>        </c>
<l>return ()</l>
</body>
<docu id="Check_BasePose">
<parameters>
<parameter id="Height"/>
<parameter id="PoseForCalibrationPlate"/>
<parameter id="SerialHandle"/>
<parameter id="ToolInBasePose"/>
<parameter id="ToolInCamPose"/>
<parameter id="Width"/>
</parameters>
</docu>
</procedure>
<procedure name="Bloque_1">
<interface>
<oo>
<par name="Objeto_1" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="_EV1_O_CmdDatos" base_type="ctrl" dimension="0"/>
<par name="Path_SFM_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_3D_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_CORE_ID" base_type="ctrl" dimension="0"/>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="BDD_Data" base_type="ctrl" dimension="2"/>
</ic>
<oc>
<par name="g_CamInBasePose1" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Estado:=19</l>
<l>Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<c>* Reseteo las variable de resultado</c>
<c></c>
<c></c>
<c></c>
<c></c>
<c>*************************************</c>
<c>* Inicializar variables de Es Apilado</c>
<c>*************************************</c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>* #######################################################################################</l>
<c>*1. *Si el pallet en 11, sigmifica que leo pallet 1</c>
<l>* #######################################################################################</l>
<c></c>
<l>Get_NPallet (_EV1_O_CmdDatos, N_Pallet_to_Scan)</l>
<c></c>
<l>*N_Pallet_to_Scan:=4</l>
<c></c>
<c></c>
<l>Get_DinamicDataPallet (N_Pallet_to_Scan, SerialHandle, Matrix_Pallet, FXcheck, ExisteAlgunApilado)</l>
<l>* #################################################################</l>
<l>* ##### Base Datos#################################################</l>
<c>* Vector que indica como esta distribuido los CORES en el pallet</c>
<c>* -&gt; Esto debe estar ingresado por el operador. &lt;-</c>
<c>* valor 0 es seccion A, 1B,2C...etc</c>
<l>* #################################################################</l>
<c></c>
<l>Vector_ID_Core_by_Segment_Pallet_1:=BDD_Data.at(1).at(0)</l>
<l>Vector_ID_Core_by_Segment_Pallet_2:=BDD_Data.at(2).at(0)</l>
<l>Vector_ID_Core_by_Segment_Pallet_3:=BDD_Data.at(3).at(0)</l>
<l>Vector_ID_Core_by_Segment_Pallet_4:=BDD_Data.at(4).at(0)</l>
<l>Vector_ID_Core_by_Segment_Pallet_5:=BDD_Data.at(5).at(0)</l>
<l>Vector_ID_Core_by_Segment_Pallet_6:=BDD_Data.at(6).at(0)</l>
<c></c>
<l>Is_a_Sleeve (BDD_Data.at(N_Pallet_to_Scan).at(0), IsA_Sleeve)</l>
<c></c>
<l>if (IsA_Sleeve and (N_Pallet_to_Scan =1 or N_Pallet_to_Scan=2))</l>
<c>    </c>
<c>    </c>
<l>    Mensaje:='### Error ### Pallet 1 o 2 Designado con Mangas'</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<l>    Estado_Fx:=false</l>
<l>    Resultado:=2</l>
<l>    Procesando:=1</l>
<l>    Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>    return ()</l>
<c>    </c>
<c></c>
<l>endif</l>
<c></c>
<c></c>
<c></c>
<l>Get_Core_Presence (Objeto_1, SerialHandle, Vector_Estado_Fx, Vector_ID_Core_by_Segment_Pallet_1, Vector_ID_Core_by_Segment_Pallet_2, \
                   Vector_ID_Core_by_Segment_Pallet_3, Vector_ID_Core_by_Segment_Pallet_4, Path_SFM_Segmentos, Path_3D_Segmentos, Path_CORE_ID,\
                   N_Pallet_to_Scan, NxLib, Camera_1, Vector_ID_Core_by_Segment_Pallet_5, Vector_ID_Core_by_Segment_Pallet_6, ExisteAlgunApilado,\
                   g_CamInBasePose1)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Bloque_1">
<parameters>
<parameter id="BDD_Data"/>
<parameter id="Camera_1"/>
<parameter id="NxLib"/>
<parameter id="Objeto_1"/>
<parameter id="Path_3D_Segmentos"/>
<parameter id="Path_CORE_ID"/>
<parameter id="Path_SFM_Segmentos"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="_EV1_O_CmdDatos"/>
<parameter id="g_CamInBasePose1"/>
</parameters>
</docu>
</procedure>
<procedure name="Bloque_3">
<interface>
<oo>
<par name="ModelImage" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
<par name="Z" base_type="iconic" dimension="0"/>
<par name="ImgLeftCamera" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Path_SFM_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_3D_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_CORE_ID" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="ObjectModel3D_Core_Pallet" base_type="ctrl" dimension="0"/>
<par name="SFM_Core_Pallet" base_type="ctrl" dimension="0"/>
<par name="Modelo3D_Select" base_type="ctrl" dimension="0"/>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
<par name="Cod_Core_ToUse" base_type="ctrl" dimension="0"/>
<par name="Matrix_Sleeve" base_type="ctrl" dimension="2"/>
<par name="ConteoCirculares" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Matrix_Sleeve_New" base_type="ctrl" dimension="2"/>
<par name="ConteoCirculares_New" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Mensaje:='Bloque 3 INICIADO.............'</l>
<l>Send_Data_Info (Mensaje, SerialHandle)</l>
<c></c>
<l>* #### Envio data de estado ########################</l>
<l>Procesando := 1</l>
<l>Resultado := 0</l>
<l>Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* # ################################################# </l>
<c>* Obtengo imagen del bloque a escanear</c>
<l>FOTO:=1</l>
<l>RepetirFoto:=true</l>
<l>ConteoRepeticion:=0</l>
<l>dev_get_window (WindowHandle)</l>
<c></c>
<c></c>
<l>Get_Core_ToUse_From_BDD_Fast (SerialHandle, Cod_Core_ToUse, Pallet_To_Scan, Segmento_To_Scan, PitutoExist,\
                              FXcheck, Diametro)</l>
<c></c>
<c>*************************************************************</c>
<l>ExitBloque3:=false</l>
<c></c>
<c>**************************************************************</c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>while(RepetirFoto )</l>
<l>    ConteoRepeticion:=ConteoRepeticion+1</l>
<l>    RepetirFoto:=false</l>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    **************************************</c>
<c>    *1° Segmento si es Core o Manga</c>
<c>    **************************************</c>
<l>    Get_TipoEntidad (Cod_Core_ToUse, Is_a_Core)</l>
<l>    if (Is_a_Core)</l>
<c>        * Es un Core *</c>
<l>        Get_Image_Bloque3 (ModelImage, X, Y, Z, ImgLeftCamera, NxLib, Camera_1, Parametros_Visualizacion, \
                           Valores_Visualizacion, FOTO, WindowHandle, Cod_Core_ToUse, SerialHandle, Escena3D_RAW, \
                           Camara_conexion_Est)</l>
<l>        if (not Camara_conexion_Est)</l>
<l>            Procesando := 1</l>
<l>            Resultado := 2</l>
<l>            Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>            Send_Data_Info('### ERROR ### Camara estereo desconectada', SerialHandle)  </l>
<c>            </c>
<l>            Estado_Fx:=0</l>
<l>        endif </l>
<l>    else</l>
<c>        * Es una Manga *    </c>
<c>        ** Busco en la matrix si existe esta manga</c>
<c>        </c>
<l>        Nelementos :=Matrix_Sleeve.length()</l>
<c>        </c>
<l>        for Index := 1 to Nelementos-1 by 1</l>
<c>            </c>
<l>            if (Matrix_Sleeve.at(Index).at(1) = false or  Matrix_Sleeve.at(Index).at(0) =  Cod_Core_ToUse)</l>
<l>                Matrix_Sleeve.at(Index).at(0) :=Cod_Core_ToUse</l>
<l>                IndexLast:= Index</l>
<l>                break</l>
<l>            endif</l>
<l>            IndexLast:= Index</l>
<l>        endfor</l>
<c>        </c>
<c>        </c>
<l>        Get_Image_Sleeve_Bloque3 (ModelImage, X, Y, Z, ImgLeftCamera, NxLib, Camera_1, Parametros_Visualizacion, Valores_Visualizacion, FOTO, WindowHandle, Cod_Core_ToUse, SerialHandle, Matrix_Sleeve, IndexLast,\
                                  Diametro, Escena3D_RAW, Matrix_Sleeve)</l>
<c>        </c>
<l>        Matrix_Sleeve_New:=Matrix_Sleeve</l>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<l>    endif</l>
<c>    </c>
<c>    </c>
<l>    dev_disp_text ('Foto Numero -&gt; '+FOTO, 'window', 'top', 'left', 'black', [], [])</l>
<l>    FOTO:=FOTO+1</l>
<l>* ###################################################################</l>
<l>* #### para saber que Core debo utilizar debo consultar a la RAM BD</l>
<l>* ###################################################################</l>
<l>    Mensaje:='Capturo datos de la ram BD'</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<c>    </c>
<c>    **   Get_Core_ToUse_From_BDD_Fast (SerialHandle, Cod_Core_ToUse, Pallet_To_Scan, \
    **                                  Segmento_To_Scan, PitutoExist, FXcheck)</c>
<c>    </c>
<c>    ** si no tengo datos de bbd salgo de la funcion. Previo envie estado de error        </c>
<l>    if (not FXcheck)</l>
<l>        Procesando := 1</l>
<l>        Resultado := 2</l>
<l>        Send_Data_Proceso (SerialHandle, Resultado, Procesando) </l>
<l>        return()</l>
<l>    endif</l>
<c>    </c>
<c>    </c>
<l>    Get_TipoEntidad (Cod_Core_ToUse, Entidad)</l>
<c>    </c>
<c>    </c>
<c>    ** Proteccion para no buscar pines</c>
<l>    if (Entidad)</l>
<c>        </c>
<l>* ####################################################################    </l>
<l>* ##### Paso la pose a CamInBasePose para virtualizar el ROI respecto#</l>
<l>* ##### al robot             #########################################</l>
<l>* ####################################################################   </l>
<c>        *Leo la pose de la esquina del pallet N</c>
<l>        NamePose:='Pallet_'+Pallet_To_Scan</l>
<l>        create_pose (0.1, 0.1, 0.1, 90, 90, 90, 'Rp+T', 'gba', 'point', Esquina_Pallet_Pose)</l>
<c>        </c>
<l>* ###################################################################    </l>
<l>* ######## Realizo el reconocimiento del patron #####################</l>
<l>* ################################################################### </l>
<c>        </c>
<l>        Vector_ID_Core_by_Segment_Palle_tofind:=Cod_Core_ToUse</l>
<l>        N_Pallet_to_Scan:=Pallet_To_Scan</l>
<l>        SegmentoPallet:=Segmento_To_Scan</l>
<l>        Pose_Esquina:=Esquina_Pallet_Pose</l>
<c>        </c>
<l>        Visualizar3D:=true</l>
<l>        Take_Core_In_Pallet (Z, X, Y, Escena3D_RAW, N_Pallet_to_Scan, Path_SFM_Segmentos, Path_3D_Segmentos, \
                             Vector_ID_Core_by_Segment_Palle_tofind, Path_CORE_ID, SerialHandle, Vector_Estado_Fx, \
                             Visualizar3D, SegmentoPallet, Pose_Esquina, PitutoExist, ObjectModel3D_Core_Pallet, SFM_Core_Pallet, \
                             Modelo3D_Select, WindowHandle, Estado_SubProceso_Get_Core_Presence_In_Pallet, RepetirFoto)</l>
<c>        </c>
<c>        </c>
<l>    else</l>
<c>        </c>
<c>        ****************************************************************</c>
<c>        ******** ANALISIS DE MANGAS DESACTIVADO EN ESTA SECCION*********</c>
<c>        ****************************************************************</c>
<l>*         Get_3dModel_Sleeve (SerialHandle, Path_CORE_ID, Path_3D_Segmentos,\
        Path_SFM_Segmentos, Vector_Estado_Fx, ObjectModel3D_Core_Pallet,\
        Cod_Core_ToUse, ObjectModel3D_Core_Pallet_Sleeve, \
        Modelo3D_Select, Cod_Core_ToUse)</l>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        **     get_SleeveImage (ModelImage, X, Y, Z, Matrix_Sleeve_New, Cod_Core_ToUse)</c>
<c>        </c>
<c>        * Generico</c>
<c>        </c>
<c>        **    Take_Sleeve_in_Pallet_Inteligence (Z, X, Y, ObjectModel3D_Core_Pallet_Sleeve, Escena3D_RAW, Parametros_Visualizacion,\
        Valores_Visualizacion, SerialHandle, Matrix_Sleeve_New, IndexLast, Diametro, g_CamInBasePose2, g_AltutaVirtualCamEstereo, Estado_Funcion, Matrix_Sleeve_New_Pos)</c>
<l>*         if (Estado_Funcion)</l>
<l>*         Matrix_Sleeve_New:=Matrix_Sleeve_New_Pos</l>
<l>*         Estado := 13</l>
<l>*         Procesando := 1</l>
<l>*         Resultado := 1</l>
<l>*         Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<c>        </c>
<l>*         Send_Data_Info('BLOQUE 3 FINALIZADO', SerialHandle)</l>
<l>*         else</l>
<l>*         Procesando := 1</l>
<l>*         Resultado := 2</l>
<l>*         Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>*         Send_Data_Info('BLOQUE 3 FINALIZADO con ERRORES!!!', SerialHandle)  </l>
<l>*         ConteoCirculares:=0</l>
<l>*         endif</l>
<c>        </c>
<c>        </c>
<l>*         clear_object_model_3d (ObjectModel3D_Core_Pallet_Sleeve)</l>
<c>        </c>
<l>*         if (not Estado_Funcion)</l>
<l>*         RepetirFoto:=true </l>
<l>*         endif</l>
<c>        </c>
<c>        </c>
<c>        </c>
<l>    endif</l>
<c>    </c>
<l>    RepetirFoto:=false</l>
<c>    </c>
<l>endwhile</l>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Bloque_3">
<parameters>
<parameter id="Camera_1"/>
<parameter id="Cod_Core_ToUse"/>
<parameter id="ConteoCirculares"/>
<parameter id="ConteoCirculares_New"/>
<parameter id="ImgLeftCamera"/>
<parameter id="Matrix_Sleeve"/>
<parameter id="Matrix_Sleeve_New"/>
<parameter id="ModelImage"/>
<parameter id="Modelo3D_Select"/>
<parameter id="NxLib"/>
<parameter id="ObjectModel3D_Core_Pallet"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="Path_3D_Segmentos"/>
<parameter id="Path_CORE_ID"/>
<parameter id="Path_SFM_Segmentos"/>
<parameter id="SFM_Core_Pallet"/>
<parameter id="SerialHandle"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="WindowHandle"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Bloque_Localizadores">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="Matrix_Localizadores" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c></c>
<c></c>
<l>Mensaje:='###### INICIO BLOQUE LOCALIZADORES ######'</l>
<l>Send_Data_Info (Mensaje, SerialHandle)</l>
<c></c>
<l>try</l>
<l>* #### Envio data de estado ########################</l>
<l>    Procesando := 1</l>
<l>    Resultado := 0</l>
<l>    Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* # ################################################# </l>
<c>    </c>
<l>    Tag_Lectura:='_EBD_I_SegmentoIr'         </l>
<l>    Read_EthernetIP_Data (Tag_Lectura, SerialHandle, N_Localizador)</l>
<c>    </c>
<l>    Get_Picture (Zm, ImgLeftCamera, NxLib, Camera_1)</l>
<c>    </c>
<l>* ##############################################</l>
<l>* #####  Make ROI ##############################        </l>
<l>    Get_Zona_ROI (Zm, Zmred, N_Localizador)</l>
<l>* #############################################       </l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    LocalizadoresMAX:=11</l>
<c>    </c>
<l>    for Index := 1 to LocalizadoresMAX by 1</l>
<l>* #####  Make ROI ##############################        </l>
<l>        Get_Zona_ROI (Zm, Zmred, Index)</l>
<l>* #############################################     </l>
<l>        Get_AlturaLocalizador (Zmred, SerialHandle, AlturaLocalizador, Estado_Fx)</l>
<l>        oFFSETZ:=5</l>
<l>        Matrix_Localizadores[Index] := AlturaLocalizador+oFFSETZ</l>
<l>    endfor</l>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    **********************************************************</c>
<c>    </c>
<c>    </c>
<l>    create_pose (Matrix_Localizadores[1],\
                 Matrix_Localizadores[2],\
                 Matrix_Localizadores[3],\
                 Matrix_Localizadores[4],\
                 Matrix_Localizadores[5],\
                 Matrix_Localizadores[6], 'Rp+T', 'gba', 'point', Bach1)</l>
<l>    create_pose (Matrix_Localizadores[7],\
                 Matrix_Localizadores[8],\
                 Matrix_Localizadores[9],\
                 Matrix_Localizadores[10],\
                 Matrix_Localizadores[11],\
                 0, 'Rp+T', 'gba', 'point', Bach2)   </l>
<c>    </c>
<c>    </c>
<l>    Send_Data_To_Robot (Bach1, SerialHandle)</l>
<l>    Send_Data_To_BDD_Pos (Bach2, SerialHandle)</l>
<c>    **********************************************************</c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    UmbralAlturaMin:=990</l>
<l>    UmbralAlturaMax:=1475</l>
<c>    </c>
<l>    if (Estado_Fx)</l>
<c>        </c>
<l>        if (AlturaLocalizador&lt; UmbralAlturaMin or AlturaLocalizador&gt;UmbralAlturaMax )</l>
<c>            </c>
<l>            Mensaje:='### ERROR ### Altura de Localizador Menor que Altura umbral -&gt; '+AlturaLocalizador +'[mm]'</l>
<l>            Send_Data_Info (Mensaje, SerialHandle)</l>
<l>* #### Envio data de estado ########################</l>
<l>            Procesando := 1</l>
<l>            Resultado := 2</l>
<l>            Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* # #################################################   </l>
<l>        else</l>
<l>            Delta:=8</l>
<l>            AlturaLocalizador:=AlturaLocalizador+Delta</l>
<l>            Mensaje:='Altura de Localizador Encontrada -&gt; '+AlturaLocalizador +' [mm] en Segmento -&gt;'+N_Localizador</l>
<l>            Send_Data_Info (Mensaje, SerialHandle)</l>
<c>            </c>
<c>            ***** Envio    informacion **************************       </c>
<l>            tagDestino:='_EV01_I_EjeZZ'</l>
<l>            ValorVariable:=AlturaLocalizador+3</l>
<l>            Send_EthernetIP_Data(tagDestino, ValorVariable, SerialHandle)</l>
<c>            </c>
<l>* #### Envio data de estado ########################</l>
<l>            Procesando := 1</l>
<l>            Resultado :=1</l>
<l>            Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* # ################################################# </l>
<c>            </c>
<l>        endif</l>
<l>    else</l>
<c>        </c>
<l>* #### Envio data de estado ########################</l>
<l>        Procesando := 1</l>
<l>        Resultado := 2</l>
<l>        Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* ################################################## </l>
<c>        </c>
<l>    endif</l>
<l>catch (Exception)</l>
<l>    Mensaje:='### ERROR ### Bloque Localizador '</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<l>    Send_Data_Error(Exception,SerialHandle,EstadoFx)</l>
<l>* #### Envio data de estado ########################</l>
<l>    Procesando := 1</l>
<l>    Resultado := 2</l>
<l>    Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* # #################################################   </l>
<l>endtry      </l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>Mensaje:='###### FIN  BLOQUE LOCALIZADORES ######'</l>
<l>Send_Data_Info (Mensaje, SerialHandle)</l>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Bloque_Localizadores">
<parameters>
<parameter id="Camera_1"/>
<parameter id="Matrix_Localizadores"/>
<parameter id="NxLib"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Bloque_Sprues">
<interface>
<ic>
<par name="_EV1_O_CmdDatos" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>        ********************************************************            </c>
<l>        N_Localizador :=50-_EV1_O_CmdDatos</l>
<c>        ********************************************************</c>
<c>       </c>
<l>        Get_SprueExistence (SerialHandle, Pattern, PosicionRack, ExisteEnRack)</l>
<c>        </c>
<c>        </c>
<l>        Tag_Lectura:='_EBD_I_PatternList'         </l>
<l>        Read_EthernetIP_Data (Tag_Lectura, SerialHandle, Pattern)</l>
<c>        </c>
<l>       TagDestino:='_EBD_I_SegmentoIr'</l>
<l>        Send_EthernetIP_Data(TagDestino,PosicionRack,SerialHandle)</l>
<c>        ********************************************</c>
<c>        * Peticion de RamSprue</c>
<c>        *********************************************</c>
<l>        PatternName:=Pattern</l>
<l>        Data:= 'O'        </l>
<l>        Set_SprueExistence (PatternName, Data, SerialHandle)</l>
<c>        </c>
<l>return ()</l>
</body>
<docu id="Bloque_Sprues">
<parameters>
<parameter id="SerialHandle"/>
<parameter id="_EV1_O_CmdDatos"/>
</parameters>
</docu>
</procedure>
<procedure name="Set_Core_Minus">
<interface>
<ic>
<par name="Cod_Core_ToUse" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="DataBdFull" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>    * </c>
<l>    Peticion := 'BaseDatos'</l>
<l>    Data := Peticion+';ActBdGlobal;'+Cod_Core_ToUse</l>
<c>    * </c>
<l>    write_serial (SerialHandle, ords(Data))</l>
<c>    * </c>
<c>   </c>
<c>    * Numero de caracteres a leer</c>
<c>    </c>
<l>        VarSerial:=0 </l>
<l>    Conteo:=0</l>
<l>    while(VarSerial&lt;1 and Conteo&lt;50)</l>
<c>       </c>
<c>        *Numero de caracteres a leer</c>
<l>        read_serial (SerialHandle, 120, Nchar)</l>
<l>        Nchar:= chrt(Nchar)</l>
<l>        tuple_number (Nchar, Variable)</l>
<l>        VarSerial:=|Nchar|</l>
<c>        </c>
<l>        tuple_split (Nchar, '#', DataBdFull)</l>
<c>       </c>
<l>          Conteo:=  Conteo+1</l>
<l>     FXcheck:=true</l>
<l>    endwhile</l>
<c>    </c>
<c>    </c>
<c>    </c>
<c></c>
<l>return ()</l>
</body>
<docu id="Set_Core_Minus">
<parameters>
<parameter id="Cod_Core_ToUse"/>
<parameter id="DataBdFull"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Set_MinusCores">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="FXcheck" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>FXcheck:=false</l>
<l>try</l>
<l>    Variable_BD := 'ram_actualproduction'</l>
<l>    Get_Pallet_BD (Variable_BD, SerialHandle, DataBD, FXcheck1)</l>
<c>    * </c>
<l>    Cod_Core_ToUse := DataBD[3]</l>
<l>    Cod_Core_ToUseAux := DataBD[3]</l>
<l>    Pallet_To_Scan := DataBD[15]</l>
<l>    Segmento_To_Scan := DataBD[16]</l>
<c>    </c>
<l>    wait_seconds(0.1)</l>
<c>    </c>
<l>   Set_Core_Minus (Cod_Core_ToUse, SerialHandle, DataBdFull)</l>
<l>                Cod_Core_ToUse   := DataBdFull[0]</l>
<l>                Pallet_To_Scan   := DataBdFull[1]</l>
<l>                Segmento_To_Scan := DataBdFull[2]</l>
<l>                CantidadCore := DataBdFull[3]</l>
<c>   </c>
<l>*                 Tag:='_EV01_I_CoreSinStock'</l>
<l>*    Send_EthernetIP_Data(Tag,Cod_Core_ToUse,SerialHandle)</l>
<c>   </c>
<l>              if (Cod_Core_ToUse='-1' or Cod_Core_ToUse='-1' and Pallet_To_Scan='-1' and Segmento_To_Scan='-1' )</l>
<l>                    FXcheck:=false</l>
<l>                    Mensaje:='### ERROR ### -&gt; Entidad Requerida -&gt; '+Cod_Core_ToUseAux+'con 0 &lt;- RAM base DATOS no CARGADA.'</l>
<l>                    Send_Data_Info (Mensaje, SerialHandle)</l>
<l>                endif    </l>
<l>    FXcheck:=true</l>
<c>  </c>
<c>    </c>
<l>catch (Exception)</l>
<c>    </c>
<l>    Mensaje:='### ERROR ### -&gt; Entidad Requerida -&gt; '+Cod_Core_ToUse+' &lt;- RAM base DATOS no CARGADA.'</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<l>    Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<l>    FXcheck:=false</l>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="Set_MinusCores">
<parameters>
<parameter id="FXcheck"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Cores">
<interface>
<oc>
<par name="Cores" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>list_files ('D:/AI/Vision Artificial/4.-MAGOTTEAUX/SFM_CORES', 'directories', Archivos)</l>
<c>* </c>
<l>Cores := ''</l>
<l>for Index1 := 0 to |Archivos|-1 by 1</l>
<c>    * </c>
<l>    tuple_split (Archivos[Index1], '\\', CoreAux)</l>
<l>    largo_CoreAux := |CoreAux|</l>
<l>    Cores[Index1] := CoreAux[largo_CoreAux-1]</l>
<c>    * </c>
<l>endfor</l>
<l>return ()</l>
</body>
<docu id="Get_Cores">
<parameters>
<parameter id="Cores"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_TipoEntidad">
<interface>
<ic>
<par name="Cod_Core_ToUse" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Entidad" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>    tuple_strrstr (Cod_Core_ToUse, 'sleeve', Entidad)</l>
<l>    tuple_strrstr (Cod_Core_ToUse, 'sleeve', Entidad1)</l>
<l>    tuple_strrstr (Cod_Core_ToUse, 'PIN', Entidad2)</l>
<l>    tuple_strrstr (Cod_Core_ToUse, 'SPRUE', Entidad3)</l>
<l>    tuple_strrstr (Cod_Core_ToUse, 'LOC', Entidad4)</l>
<c></c>
<l>     tuple_strrstr (Cod_Core_ToUse, 'NUM', NUMERO)</l>
<l>     tuple_strrstr (Cod_Core_ToUse, 'DOWEL', DOWEL)</l>
<l>tuple_strrstr (Cod_Core_ToUse, 'LID', LID)</l>
<c></c>
<c></c>
<l>    if ( Entidad=-1 and Entidad1=-1  and Entidad3=-1 and Entidad4=-1  and NUMERO=-1 and  DOWEL=-1 and LID=-1)</l>
<l>         Entidad:=true</l>
<l>    else</l>
<l>         Entidad:=false</l>
<c>        </c>
<l>    endif</l>
<c>    </c>
<l> return ()</l>
</body>
<docu id="Get_TipoEntidad">
<parameters>
<parameter id="Cod_Core_ToUse"/>
<parameter id="Entidad"/>
</parameters>
</docu>
</procedure>
<procedure name="Segmentar_Core">
<interface>
<io>
<par name="HeightMap" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
<par name="Z" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Entidad" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="DitsiObjMax" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Estado_Funcion" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Estado_Funcion := false</l>
<c>* </c>
<l>try</l>
<c>    * </c>
<c>    * ********************************************************</c>
<c>    * 1.-  !!!!!!!!! threshols dinamico!!!!!!!!!!!!!!!!!!!!!!!!!!</c>
<c>    * ********************************************************</c>
<c>    </c>
<l>    UmbralMaxThr:=DitsiObjMax</l>
<l>    threshold (HeightMap, Region, 900, UmbralMaxThr)</l>
<l>    escala := 255.0/UmbralMaxThr</l>
<l>    scale_image (HeightMap, HeightMap_Scalada, escala, 0)</l>
<l>    threshold (HeightMap_Scalada, HeightMap_Region, 0, 255)</l>
<l>    gray_histo_range (HeightMap_Region, HeightMap_Scalada, 0, 255, 256, Histo, BinSize)</l>
<l>    tuple_sum (Histo, Sum_Histo)</l>
<c>    * </c>
<l>* # #########################################################</l>
<l>* # ### Mientras mas grabnde menos sensible a cambios #######   </l>
<l>    Mascara := 1</l>
<l>* # ########################################################</l>
<c>    * </c>
<l>    Vector_Distribucion := []</l>
<l>    init_vector := 255</l>
<l>    flag_vector := 0</l>
<l>    aux_suma := 0.0</l>
<c>    * </c>
<l>    for Index := init_vector to 0 by -1</l>
<c>        * </c>
<l>        Vector_Distribucion[Index] := aux_suma+Histo[Index]*100.0/ Sum_Histo</l>
<l>        aux_suma := Vector_Distribucion[Index]</l>
<l>    endfor</l>
<c>    * </c>
<l>    Derivada := []</l>
<l>    Factor_Der := 1000</l>
<l>    Mascara := 1</l>
<l>    for Index := init_vector to 50 by -Mascara</l>
<c>        * </c>
<l>        Derivada[Index] := abs(Vector_Distribucion[Index]-Vector_Distribucion[Index-Mascara])*Factor_Der</l>
<c>        * </c>
<l>    endfor</l>
<c>    * </c>
<c>    * </c>
<c>    * *********************************************************</c>
<c>    * * Busco el primer cambio brusco de posicion *************</c>
<c>    * * El umbral de cambio es Aux_Val_Max ********************</c>
<c>    * *********************************************************</c>
<l>    create_funct_1d_array (Derivada, Function)</l>
<c>    </c>
<c> **  dev_inspect_ctrl (Function)</c>
<c>    ************************************************************************************************</c>
<l>    Aux_Val_Max := 30000</l>
<c>*****************************************************************************************************</c>
<l>    Flag_indx_max := 255</l>
<l>    for Index := init_vector to 50 by -Mascara</l>
<c>        * </c>
<l>        if (Derivada[Index]&gt;Aux_Val_Max)</l>
<l>            Aux_Val_Max := Derivada[Index]</l>
<l>            Flag_indx_max := Index</l>
<l>        endif</l>
<c>        * </c>
<l>    endfor</l>
<c></c>
<l>* # #########################################################</l>
<l>* # ######## Grado de proteccion para moverse entre el </l>
<l>* # ####### histograma</l>
<l>    index_protection := 3</l>
<l>* # #########################################################</l>
<c>    * </c>
<l>    Alt_Min := 110</l>
<l>    Alt_Max := Flag_indx_max+index_protection</l>
<l>    threshold (HeightMap_Scalada, Entidad, Alt_Min, Alt_Max)</l>
<c></c>
<l>    Estado_Funcion := true</l>
<l>catch (Exception)</l>
<l>    Estado_Funcion := false</l>
<c>    * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = Fx_Aux.ErrorCatch(HDevExpDefaultException1);</c>
<c>    * </c>
<l>endtry</l>
<c>* </c>
<c>* </c>
<l>return ()</l>
</body>
<docu id="Segmentar_Core">
<parameters>
<parameter id="DitsiObjMax"/>
<parameter id="Entidad"/>
<parameter id="Estado_Funcion"/>
<parameter id="HeightMap"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="convert_tuple_to_string">
<interface>
<ic>
<par name="Tuple" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="TupleAsString" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>if (Tuple == [])</l>
<l>    TupleAsString := '[]'</l>
<l>else</l>
<l>    Strings := '' + Tuple</l>
<c>    * Escape strings with '</c>
<l>    IsString := is_string_elem(Tuple)</l>
<l>    if (sum(IsString) &gt; 0)</l>
<l>        Idx := find(IsString,1)</l>
<l>        Strings[Idx] := '\'' + Strings[Idx] + '\''</l>
<l>    endif</l>
<c>    * Concat to a long tuple</c>
<l>    TupleAsString := '[' + sum('' + Strings[0:|Strings| - 2] + ', ') + Strings[|Strings| - 1] + ']'</l>
<l>endif</l>
<l>return ()</l>
</body>
<docu id="convert_tuple_to_string">
<abstract lang="en_US">Convert a tuple to a string, similar to how it is displayed in HDevelop.</abstract>
<short lang="en_US">Convert a tuple to a readable string.</short>
<short lang="es_ES">Convert a tuple to a readable string.</short>
<parameters>
<parameter id="Tuple"/>
<parameter id="TupleAsString">
<default_type>string</default_type>
<multivalue>false</multivalue>
<sem_type>string</sem_type>
<type_list>
<item>string</item>
</type_list>
</parameter>
</parameters>
</docu>
</procedure>
<procedure name="NotZeroModel">
<interface>
<ic>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Escena3D_RAWOut" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Escena3D_RAWOut := Escena3D_RAW</l>
<l>            get_object_model_3d_params (Escena3D_RAWOut, 'bounding_box1', GenParamValue)</l>
<c>            </c>
<l>            x_min:=GenParamValue[0]</l>
<l>            y_min:=GenParamValue[1]</l>
<l>            z_min:=GenParamValue[2]</l>
<l>            x_max:=GenParamValue[3]</l>
<l>            y_max:=GenParamValue[4]</l>
<l>            z_max:=GenParamValue[5]</l>
<c>            </c>
<l>            select_points_object_model_3d (Escena3D_RAWOut, 'point_coord_z', 300, 2500, Escena3D_RAWOut)</l>
<l>return ()</l>
</body>
<docu id="NotZeroModel">
<parameters>
<parameter id="Escena3D_RAW"/>
<parameter id="Escena3D_RAWOut"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Pallet_BD_COPY_1">
<interface>
<ic>
<par name="Variable_BD" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="DataBD" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<l>wait_seconds (0.005)</l>
<l>try</l>
<c></c>
<l>    Peticion := 'BaseDatos'</l>
<l>    Data := Peticion+';'+Variable_BD</l>
<c></c>
<l>    write_serial (SerialHandle, ords(Data))</l>
<c></c>
<c></c>
<l>    VarSerial := 0</l>
<l>    while (VarSerial&lt;1)</l>
<c></c>
<c>        * Numero de caracteres a leer</c>
<l>        read_serial (SerialHandle, 100, Nchar)</l>
<l>        Nchar := chrt(Nchar)</l>
<l>        tuple_number (Nchar, Variable)</l>
<l>        VarSerial := |Nchar|</l>
<c></c>
<l>        tuple_split (Nchar, '#', Substrings)</l>
<l>        tuple_split (Substrings, '||', DataBD)</l>
<c></c>
<l>    endwhile</l>
<c></c>
<c></c>
<l>catch (Exception)</l>
<l>endtry</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Pallet_BD_COPY_1">
<parameters>
<parameter id="DataBD"/>
<parameter id="SerialHandle"/>
<parameter id="Variable_BD"/>
</parameters>
</docu>
</procedure>
<procedure name="Segmentar_Sleeve">
<interface>
<io>
<par name="HeightMap" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
<par name="Z" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Entidad" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="DitsiObjMax" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Estado_Funcion" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Estado_Funcion := false</l>
<c>* </c>
<l>try</l>
<c>    * </c>
<c>    * ********************************************************</c>
<c>    * 1.-  !!!!!!!!! threshols dinamico!!!!!!!!!!!!!!!!!!!!!!!!!!</c>
<c>    * ********************************************************</c>
<c>    </c>
<l>    UmbralMaxThr:=DitsiObjMax</l>
<l>    threshold (HeightMap, Region, 900, UmbralMaxThr)</l>
<l>    escala := 255.0/UmbralMaxThr</l>
<l>    scale_image (HeightMap, HeightMap_Scalada, escala, 0)</l>
<l>    threshold (HeightMap_Scalada, HeightMap_Region, 0, 255)</l>
<l>    gray_histo_range (HeightMap_Region, HeightMap_Scalada, 0, 255, 256, Histo, BinSize)</l>
<l>    tuple_sum (Histo, Sum_Histo)</l>
<c>    * </c>
<l>* # #########################################################</l>
<l>* # ### Mientras mas grabnde menos sensible a cambios #######   </l>
<l>    Mascara := 1</l>
<l>* # ########################################################</l>
<c>    * </c>
<l>    Vector_Distribucion := []</l>
<l>    init_vector := 255</l>
<l>    flag_vector := 0</l>
<l>    aux_suma := 0.0</l>
<c>    * </c>
<l>    for Index := init_vector to 0 by -1</l>
<c>        * </c>
<l>        Vector_Distribucion[Index] := aux_suma+Histo[Index]*100.0/ Sum_Histo</l>
<l>        aux_suma := Vector_Distribucion[Index]</l>
<l>    endfor</l>
<c>    * </c>
<l>    Derivada := []</l>
<l>    Factor_Der := 10000</l>
<l>    Mascara := 1</l>
<l>    for Index := init_vector to 50 by -Mascara</l>
<c>        * </c>
<l>        Derivada[Index] := abs(Vector_Distribucion[Index]-Vector_Distribucion[Index-Mascara])*Factor_Der</l>
<c>        * </c>
<l>    endfor</l>
<c>    * </c>
<c>    * </c>
<c>    * *********************************************************</c>
<c>    * * Busco el primer cambio brusco de posicion *************</c>
<c>    * * El umbral de cambio es Aux_Val_Max ********************</c>
<c>    * *********************************************************</c>
<l>    create_funct_1d_array (Derivada, Function)</l>
<c>    </c>
<l>*     dev_inspect_ctrl (Function)</l>
<c>    ************************************************************************************************</c>
<l>    Aux_Val_Max := 4000</l>
<c>    *****************************************************************************************************</c>
<c>    </c>
<l>    Flag_indx_max := 255</l>
<l>    for Index := 50 to 255 by Mascara</l>
<c>        * </c>
<l>        if (Derivada[Index]&gt;Aux_Val_Max)</l>
<l>            Aux_Val_Max := Derivada[Index]</l>
<l>            Flag_indx_max := Index</l>
<l>            break</l>
<l>        endif</l>
<c>        * </c>
<l>    endfor</l>
<c>    </c>
<l>* # #########################################################</l>
<l>* # ######## Grado de proteccion para moverse entre el </l>
<l>* # ####### histograma</l>
<c>    </c>
<c>    * proteccion  utilizado en chile con mangas altas</c>
<l>*     index_protection := 2</l>
<c>    * proteccion  utilizado en USA con mangas de 2 pulgadas de alto</c>
<l>    index_protection := 1*0</l>
<l>* # #########################################################</l>
<c>    </c>
<l>    Alt_Min := 50</l>
<l>    Alt_Max := Flag_indx_max+index_protection</l>
<l>    threshold (HeightMap_Scalada, Entidad, Alt_Min, Alt_Max)</l>
<c>    </c>
<l>    Estado_Funcion := true</l>
<l>catch (Exception)</l>
<l>    Estado_Funcion := false</l>
<c>    * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = Fx_Aux.ErrorCatch(HDevExpDefaultException1);</c>
<c>    * </c>
<l>endtry</l>
<c>* </c>
<c>* </c>
<l>return ()</l>
</body>
<docu id="Segmentar_Sleeve">
<parameters>
<parameter id="DitsiObjMax"/>
<parameter id="Entidad"/>
<parameter id="Estado_Funcion"/>
<parameter id="HeightMap"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_Estado_Vision">
<interface>
<ic>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Estado" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c> * #### Envio data de estado ############################################         </c>
<c>           </c>
<l>            Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* ####################################################################### </l>
<l>return ()</l>
</body>
<docu id="Send_Estado_Vision">
<parameters>
<parameter id="Estado"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
</parameters>
</docu>
</procedure>
<procedure name="Histagram_Filter">
<interface>
<io>
<par name="HeightMap" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
<par name="Z" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Entidad" base_type="iconic" dimension="0"/>
</oo>
<oc>
<par name="Estado_Funcion" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Estado_Funcion := false</l>
<c></c>
<l>try</l>
<c></c>
<c>    * ********************************************************</c>
<c>    * 1.-  !!!!!!!!! threshols dinamico!!!!!!!!!!!!!!!!!!!!!!!!!!</c>
<c>    * ********************************************************</c>
<c></c>
<l>    UmbralMaxThr := 2800.0</l>
<l>    threshold (HeightMap, Region, 900, UmbralMaxThr)</l>
<l>    escala := 255.0/UmbralMaxThr</l>
<l>    scale_image (HeightMap, HeightMap_Scalada, escala, 0)</l>
<l>    threshold (HeightMap_Scalada, HeightMap_Region, 0, 255)</l>
<l>    gray_histo_range (HeightMap_Region, HeightMap_Scalada, 0, 255, 256, Histo, BinSize)</l>
<l>    tuple_sum (Histo, Sum_Histo)</l>
<c></c>
<l>* # #########################################################</l>
<l>* # ### Mientras mas grabnde menos sensible a cambios #######   </l>
<l>    Mascara := 1</l>
<l>* # ########################################################</l>
<c></c>
<l>    Vector_Distribucion := []</l>
<l>    init_vector := 255</l>
<l>    flag_vector := 0</l>
<l>    aux_suma := 0.0</l>
<c></c>
<l>    for Index := init_vector to 0 by -1</l>
<c></c>
<l>        Vector_Distribucion[Index] := aux_suma+Histo[Index]*100.0/ Sum_Histo</l>
<l>        aux_suma := Vector_Distribucion[Index]</l>
<l>    endfor</l>
<c></c>
<l>    Derivada := []</l>
<l>    Factor_Der := 1000</l>
<l>    Mascara := 1</l>
<l>    for Index := init_vector to 50 by -Mascara</l>
<c></c>
<l>        Derivada[Index] := abs(Vector_Distribucion[Index]-Vector_Distribucion[Index-Mascara])*Factor_Der</l>
<c></c>
<l>    endfor</l>
<c></c>
<c></c>
<c>    * *********************************************************</c>
<c>    * * Busco el primer cambio brusco de posicion *************</c>
<c>    * * El umbral de cambio es Aux_Val_Max ********************</c>
<c>    * *********************************************************</c>
<l>    create_funct_1d_array (Derivada, Function)</l>
<c></c>
<l>    *  dev_inspect_ctrl (Function)</l>
<c>    * ***********************************************************************************************</c>
<l>    Aux_Val_Max := 2000</l>
<c>    * ****************************************************************************************************</c>
<l>    Flag_indx_max := 255</l>
<l>    for Index := 50 to 255 by Mascara</l>
<c>* Busca el primer conjunto de elementos y sale</c>
<l>        if (Derivada[Index]&gt;Aux_Val_Max)</l>
<l>            Aux_Val_Max := Derivada[Index]</l>
<l>            Flag_indx_max := Index</l>
<l>            break</l>
<l>        endif</l>
<c></c>
<l>    endfor</l>
<c></c>
<l>* # #########################################################</l>
<l>* # ######## Grado de proteccion para moverse entre el </l>
<l>* # ####### histograma</l>
<l>    index_protection := 2</l>
<l>* # #########################################################</l>
<c></c>
<l>    Alt_Min := Flag_indx_max-index_protection</l>
<l>    Alt_Max := Flag_indx_max+index_protection</l>
<l>    threshold (HeightMap_Scalada, Entidad, Alt_Min, Alt_Max)</l>
<c></c>
<l>    Estado_Funcion := true</l>
<l>catch (Exception)</l>
<l>    Estado_Funcion := false</l>
<c>    * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = Fx_Aux.ErrorCatch(HDevExpDefaultException1);</c>
<c></c>
<l>endtry</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Histagram_Filter">
<parameters>
<parameter id="Entidad"/>
<parameter id="Estado_Funcion"/>
<parameter id="HeightMap"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Sub_Process_ImageCore">
<interface>
<io>
<par name="Z" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Estado_Funcion" base_type="ctrl" dimension="0"/>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
<par name="Estado_FuncionSub" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>XOut := X</l>
<l>YOut := Y</l>
<l>Estado_FuncionSub:=0</l>
<l>try</l>
<l>     threshold (Z, Regions, 1000, 2100)</l>
<c>    </c>
<l>    reduce_domain (Z, Regions, Zre)</l>
<l>    connection (Regions, ConnectedRegions)   </l>
<c>    </c>
<c>    **********************************************************************************</c>
<c>    *** Valor Antes del CORE -&gt;boa_stl</c>
<c>    ***select_shape (ConnectedRegions, SelectedRegions, 'struct_factor', 'and', 0,2.4)</c>
<c>    **********************************************************************************</c>
<c>    </c>
<c>    *****************************************************************************</c>
<c>    *** Valor NEcesario para detectar el core Boa Stl</c>
<l>     select_shape (ConnectedRegions, SelectedRegions, 'struct_factor', 'and', 0,4)</l>
<c>    *******************************************************************************</c>
<c>    </c>
<c>    </c>
<l>    area_center (SelectedRegions, Nregion, Row, Column)</l>
<l>     select_obj (SelectedRegions, RegionUnion, 1)</l>
<c>    </c>
<l>    for Index := 2 to |Nregion| by 1</l>
<c>        </c>
<l>        select_obj (SelectedRegions, ObjectSelected, Index)</l>
<l>        union2 (ObjectSelected, RegionUnion, RegionUnion)</l>
<c>        </c>
<l>    endfor</l>
<c>    </c>
<c></c>
<c>  </c>
<l>     dilation_circle (RegionUnion, RegionUnion, 15.5)</l>
<c>    </c>
<c>    </c>
<c></c>
<c>    </c>
<l>    reduce_domain (Z, RegionUnion, Zred)  </l>
<l>    reduce_domain (XOut, RegionUnion, XOut)</l>
<l>    reduce_domain (YOut, RegionUnion, YOut)</l>
<l>    dev_display (Zred)</l>
<c>    </c>
<l> *    Histagram_Filter (Zred, XOut, YOut, Zred, Entidad, Estado_FuncionSub)</l>
<c>   </c>
<c>     </c>
<l>*     connection (Entidad, ConnectedRegions)   </l>
<l>*     select_shape_std (ConnectedRegions, SelectedRegions, 'max_area', 90)</l>
<l>*     dilation_circle (SelectedRegions, SelectedRegions, 10.5)</l>
<l>*     reduce_domain (Z, SelectedRegions, Zred)  </l>
<l>*     reduce_domain (XOut, SelectedRegions, XOut)</l>
<l>*     reduce_domain (YOut, SelectedRegions, YOut)</l>
<c>     </c>
<l>    xyz_to_object_model_3d (XOut, YOut, Zred, Escena3D_RAW)</l>
<c>    </c>
<l>    Estado_FuncionSub:=1</l>
<c>    </c>
<l>catch (Exception)</l>
<l>  Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<l>    Estado_FuncionSub:=0</l>
<l>endtry</l>
<c>   </c>
<l>return ()</l>
</body>
<docu id="Sub_Process_ImageCore">
<parameters>
<parameter id="Escena3D_RAW"/>
<parameter id="Estado_Funcion"/>
<parameter id="Estado_FuncionSub"/>
<parameter id="SerialHandle"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Core_ToUse">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Cod_Core_ToUse" base_type="ctrl" dimension="0"/>
<par name="FXcheck" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>FXcheck := false</l>
<l>try</l>
<l>    Variable_BD := 'ram_actualproduction'</l>
<l>    Get_Pallet_BD (Variable_BD, SerialHandle, DataBD, FXcheck)</l>
<c></c>
<l>    if (not FXcheck)</l>
<l>        Exception:=[]</l>
<l>            Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<l>        return()</l>
<c>        </c>
<l>    endif</l>
<l>    Cod_Core_ToUse := DataBD[3]</l>
<l>    Cod_Core_ToUseAux := DataBD[3]</l>
<l>    Pallet_To_Scan := DataBD[15]</l>
<l>    Segmento_To_Scan := DataBD[16]</l>
<l>    PitutoExist := DataBD[5]</l>
<c></c>
<c></c>
<l>    FXcheck := true</l>
<c></c>
<c></c>
<l>catch (Exception)</l>
<c></c>
<l>    Mensaje := '### ERROR ### -&gt; Entidad Requerida. RAM base DATOS no CARGADA.'</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<l>   * Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<l>    FXcheck := false</l>
<l>endtry</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Core_ToUse">
<parameters>
<parameter id="Cod_Core_ToUse"/>
<parameter id="FXcheck"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Segmentar_Sleeve_COPY_1">
<interface>
<io>
<par name="HeightMap" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
<par name="Z" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Entidad" base_type="iconic" dimension="0"/>
</oo>
<oc>
<par name="Estado_Funcion" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Estado_Funcion := false</l>
<c></c>
<l>try</l>
<c></c>
<c>    * ********************************************************</c>
<c>    * 1.-  !!!!!!!!! threshols dinamico!!!!!!!!!!!!!!!!!!!!!!!!!!</c>
<c>    * ********************************************************</c>
<c></c>
<l>    UmbralMaxThr := 1600.0</l>
<l>    threshold (HeightMap, Region, 900, UmbralMaxThr)</l>
<l>    escala := 255.0/UmbralMaxThr</l>
<l>    scale_image (HeightMap, HeightMap_Scalada, escala, 0)</l>
<l>    threshold (HeightMap_Scalada, HeightMap_Region, 0, 255)</l>
<l>    gray_histo_range (HeightMap_Region, HeightMap_Scalada, 0, 255, 256, Histo, BinSize)</l>
<l>    tuple_sum (Histo, Sum_Histo)</l>
<c></c>
<l>* # #########################################################</l>
<l>* # ### Mientras mas grabnde menos sensible a cambios #######   </l>
<l>    Mascara := 1</l>
<l>* # ########################################################</l>
<c></c>
<l>    Vector_Distribucion := []</l>
<l>    init_vector := 255</l>
<l>    flag_vector := 0</l>
<l>    aux_suma := 0.0</l>
<c></c>
<l>    for Index := init_vector to 0 by -1</l>
<c></c>
<l>        Vector_Distribucion[Index] := aux_suma+Histo[Index]*100.0/ Sum_Histo</l>
<l>        aux_suma := Vector_Distribucion[Index]</l>
<l>    endfor</l>
<c></c>
<l>    Derivada := []</l>
<l>    Factor_Der := 10000</l>
<l>    Mascara := 1</l>
<l>    for Index := init_vector to 50 by -Mascara</l>
<c></c>
<l>        Derivada[Index] := abs(Vector_Distribucion[Index]-Vector_Distribucion[Index-Mascara])*Factor_Der</l>
<c></c>
<l>    endfor</l>
<c></c>
<c></c>
<c>    * *********************************************************</c>
<c>    * * Busco el primer cambio brusco de posicion *************</c>
<c>    * * El umbral de cambio es Aux_Val_Max ********************</c>
<c>    * *********************************************************</c>
<l>    create_funct_1d_array (Derivada, Function)</l>
<c></c>
<l>*     dev_inspect_ctrl (Function)</l>
<c>    * ***********************************************************************************************</c>
<l>    Aux_Val_Max := 60000</l>
<c>    * ****************************************************************************************************</c>
<l>    Flag_indx_max := 255</l>
<l>    for Index := init_vector to 50 by -Mascara</l>
<c></c>
<l>        if (Derivada[Index]&gt;Aux_Val_Max)</l>
<l>            Aux_Val_Max := Derivada[Index]</l>
<l>            Flag_indx_max := Index</l>
<l>        endif</l>
<c></c>
<l>    endfor</l>
<c></c>
<l>* # #########################################################</l>
<l>* # ######## Grado de proteccion para moverse entre el </l>
<l>* # ####### histograma</l>
<l>    index_protection := 20</l>
<l>* # #########################################################</l>
<c></c>
<l>    Alt_Min := 50</l>
<l>    Alt_Max := Flag_indx_max-index_protection</l>
<l>    threshold (HeightMap_Scalada, Entidad, Alt_Min, Alt_Max)</l>
<c></c>
<c></c>
<l>    Estado_Funcion := true</l>
<l>catch (Exception)</l>
<l>    Estado_Funcion := false</l>
<c>    * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = Fx_Aux.ErrorCatch(HDevExpDefaultException1);</c>
<c></c>
<l>endtry</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Segmentar_Sleeve_COPY_1">
<parameters>
<parameter id="Entidad"/>
<parameter id="Estado_Funcion"/>
<parameter id="HeightMap"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="NotZeroModel_3D">
<interface>
<ic>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Escena3D_RAWOut" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Escena3D_RAWOut := Escena3D_RAW</l>
<l>get_object_model_3d_params (Escena3D_RAWOut, 'bounding_box1', GenParamValue)</l>
<c></c>
<l>x_min := GenParamValue[0]</l>
<l>y_min := GenParamValue[1]</l>
<l>z_min := GenParamValue[2]</l>
<l>x_max := GenParamValue[3]</l>
<l>y_max := GenParamValue[4]</l>
<l>z_max := GenParamValue[5]</l>
<c></c>
<l>select_points_object_model_3d (Escena3D_RAWOut, 'point_coord_z', 500, 2500, Escena3D_RAWOut)</l>
<l>return ()</l>
</body>
<docu id="NotZeroModel_3D">
<parameters>
<parameter id="Escena3D_RAW"/>
<parameter id="Escena3D_RAWOut"/>
</parameters>
</docu>
</procedure>
<procedure name="Take_Sleeve_in_Pallet">
<interface>
<io>
<par name="Z" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="ObjectModel3D_Core_Pallet" base_type="ctrl" dimension="0"/>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Estado_Funcion" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>try</l>
<c>    </c>
<c></c>
<c>    </c>
<c>    * Segmento por histograma      </c>
<l>    DitsiObjMax:=2510.0</l>
<l>    Segmentar_Sleeve (Z, X, Y, Z, RegionSleeve, DitsiObjMax, Estado_Funcion)</l>
<c></c>
<l>    dilation_circle (RegionSleeve, RegionSleeve, 3.5)</l>
<c>    </c>
<l>    dev_get_window (WindowHandle)</l>
<c>    * Elimino el ruido de regiones pequeñas</c>
<l>    connection (RegionSleeve, SelectedRegions)</l>
<l>    fill_up (SelectedRegions, RegionFillUp)</l>
<c>    * busco hoyos</c>
<l>    connect_and_holes (SelectedRegions, NumConnected, NumHoles)</l>
<l>    complement (RegionSleeve, RegionComplement)</l>
<l>    connect_and_holes (RegionComplement, NumConnectedComplement, NumHolesComplement)</l>
<c>    </c>
<l>    connection (RegionComplement, ConnectedRegions1)</l>
<c>    * Separo solo por circularidad y area       </c>
<l>    select_shape (ConnectedRegions1, SelectedRegions1, ['circularity','area','struct_factor'], 'and', \
                  [0.61,5e3,0], [0.99,200e3,0.3])</l>
<c>    </c>
<l>    area_center (SelectedRegions1, Nelementos, Row, Column)</l>
<c>    </c>
<l>    dev_display (SelectedRegions1)</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    if (|Nelementos|&lt;1)</l>
<l>        dev_clear_window ()</l>
<c>        </c>
<l>        dev_disp_text (' #### Manga No Enontrada #### ', 'window', 10, 10, 'black', [], [])</l>
<l>        Procesando := 0</l>
<l>        Resultado := 2</l>
<l>        Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>        Send_Data_Info('BLOQUE 3 FINALIZADO con ### ERRORES ####', SerialHandle)  </l>
<c>        </c>
<l>        Estado_Funcion:=0</l>
<l>        return() </l>
<l>    endif</l>
<c>    </c>
<c>    </c>
<c>    * Busco el area mas gande ( se supone que todas son iguales)</c>
<l>    select_shape_std (SelectedRegions1, SelectedRegions2, 'max_area', 90)</l>
<l>    dilation_circle (SelectedRegions2, SelectedRegions2, 10.5)</l>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<l>*     erosion_circle (SelectedRegions2, SelectedRegions2, 15.5)</l>
<l>    reduce_domain (Z, SelectedRegions2, Zred)</l>
<l>    reduce_domain (Y, SelectedRegions2, Yred)</l>
<l>    reduce_domain (X, SelectedRegions2, Xred)</l>
<c>    </c>
<l>    xyz_to_object_model_3d (Xred, Yred, Zred, ObjectModel3D)</l>
<l>*    NotZeroModel_3D_Sleeve (ObjectModel3D, g_AltutaVirtualCamEstereo, ObjectModel3D)</l>
<l>*     Visualizar_3D ([ ObjectModel3D], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], 1, [], [], [], WindowHandle, PoseOut1)</l>
<c>    </c>
<c>    </c>
<l>    smooth_object_model_3d (ObjectModel3D, 'mls', 'mls_kNN', 50, SmoothObjectModel3D)</l>
<l>*     smooth_object_model_3d (SmoothObjectModel3D, 'mls', 'mls_kNN', 200, SmoothObjectModel3D)</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    get_object_model_3d_params (SmoothObjectModel3D, 'bounding_box1', BoxSlevee)</l>
<l>    get_object_model_3d_params (SmoothObjectModel3D, 'center', Centro)</l>
<c>    </c>
<l>    select_points_object_model_3d (SmoothObjectModel3D, 'point_coord_z', 500, BoxSlevee[2]+80, Escena3D_RAWOut)</l>
<l>    get_object_model_3d_params (Escena3D_RAWOut, 'center', CentroCortado)</l>
<c>    </c>
<c>    </c>
<l>*     Visualizar_3D ([ Escena3D_RAWOut], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], 1, [], [], [], WindowHandle, PoseOut1)</l>
<c>    ** </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    * Obtengo el modelo 3D de la manga y extarigo su altura.</c>
<l>    get_object_model_3d_params (ObjectModel3D_Core_Pallet, 'bounding_box1', Sleeve3DBox)</l>
<c>    </c>
<l>    Debug_View:=0</l>
<c>    **   Visualizar_3D ([ ObjectModel3D_Core_Pallet], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], 1, [], [], [], WindowHandle, PoseOut1)</c>
<c>    </c>
<c>    ***************************************************************************************      </c>
<l>    ZMinBase:=BoxSlevee[5]</l>
<c>    </c>
<l>    AltoNominal:=Sleeve3DBox[5]-Sleeve3DBox[2]</l>
<l>    tuple_abs (AltoNominal, AltoNominal)</l>
<c>    </c>
<c>    * desde la Base calculo la mirad de la manga.</c>
<l>    ZSleeve:=ZMinBase-AltoNominal*0.5</l>
<c>    </c>
<l>    Delta_X:=-10</l>
<l>    Delta_Y:=0</l>
<l>    Delta_Z:=0</l>
<c>    </c>
<l>    PosX:=Centro[0]+Delta_X</l>
<l>    PosY:=Centro[1]</l>
<l>    PosZ:=ZSleeve</l>
<c>    </c>
<l>    create_pose (PosX, PosY, PosZ, 0, 0, 0, 'Rp+T', 'gba', 'point', PosicionSleeve)        </l>
<c>    ***********************************************</c>
<c>    * Delimitar falsos Positivos </c>
<c>    ***********************************************</c>
<c>    </c>
<l>    Send_Data_To_Robot (PosicionSleeve, SerialHandle)</l>
<c>    </c>
<c>    ************************************************</c>
<c>    </c>
<l>    dev_display (Z)</l>
<l>    dev_display (SelectedRegions2)</l>
<l>    dev_display ( RegionSleeve)</l>
<l>    clear_object_model_3d ([ObjectModel3D,SmoothObjectModel3D])</l>
<c>    </c>
<l>    Estado := 13</l>
<l>    Procesando := 0</l>
<l>    Resultado := 1</l>
<l>    Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>    Send_Data_Info('BLOQUE 3 FINALIZADO', SerialHandle)</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>catch (Exception)</l>
<c>    </c>
<l>    Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<l>endtry</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Take_Sleeve_in_Pallet">
<parameters>
<parameter id="Escena3D_RAW"/>
<parameter id="Estado_Funcion"/>
<parameter id="ObjectModel3D_Core_Pallet"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="SerialHandle"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_3dModel_Core">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Path_CORE_ID" base_type="ctrl" dimension="0"/>
<par name="Path_3D_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_SFM_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="DerivadaCore_In" base_type="ctrl" dimension="0"/>
<par name="ObjectModel3D_Core_Pallet_In" base_type="ctrl" dimension="0"/>
<par name="SFM_Core_Pallet_In" base_type="ctrl" dimension="0"/>
<par name="Cod_Core" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ObjectModel3D_Core_Pallet_Out" base_type="ctrl" dimension="0"/>
<par name="SFM_Core_Pallet_Out" base_type="ctrl" dimension="0"/>
<par name="Modelo3D_Select" base_type="ctrl" dimension="0"/>
<par name="Cod_Core_ToUse" base_type="ctrl" dimension="0"/>
<par name="DerivadaCore_Out" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>* Get_Core_ToUse (SerialHandle, Cod_Core_ToUse, FXcheck)</l>
<l>DerivadaCore_Out:=DerivadaCore_In</l>
<l>Cod_Core_ToUse:=Cod_Core</l>
<l>DerivadaCore_Out[1] := Cod_Core_ToUse</l>
<l>if (DerivadaCore_Out[1] != DerivadaCore_Out[0])</l>
<c>    </c>
<c>    </c>
<l>    tuple_strrstr (Cod_Core_ToUse, 'PIN', PIN)</l>
<l>    tuple_strrstr (Cod_Core_ToUse, 'LOC', LOC)</l>
<l>    tuple_strrstr (Cod_Core_ToUse, 'SPRUE', SPRUE)</l>
<l>    tuple_strrstr (Cod_Core_ToUse, 'NUM', NUMERO)</l>
<l>    tuple_strrstr (Cod_Core_ToUse, 'DOWEL', DOWEL)</l>
<c>    </c>
<l>    try</l>
<c>        </c>
<l>        if ( DOWEL=-1 and NUMERO=-1 and PIN=-1 and LOC=-1 and SPRUE=-1 and Cod_Core_ToUse != ' ')   </l>
<l>            Get_SFM_STL (Cod_Core_ToUse, Path_CORE_ID, Path_3D_Segmentos, Path_SFM_Segmentos, Vector_Estado_Fx, SerialHandle, ObjectModel3D_Core_Pallet_Out, SFM_Core_Pallet_Out, Estado_Get_SFM_STL, Modelo3D_Select)</l>
<l>        endif</l>
<c>        </c>
<l>    catch (Exception)</l>
<c>        </c>
<l>        Send_Data_Error(Exception, SerialHandle, EstadoFx)</l>
<l>    endtry    </l>
<c>    </c>
<l>    DerivadaCore_Out[0] := DerivadaCore_Out[1]</l>
<l>endif</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_3dModel_Core">
<parameters>
<parameter id="Cod_Core"/>
<parameter id="Cod_Core_ToUse"/>
<parameter id="DerivadaCore_In"/>
<parameter id="DerivadaCore_Out"/>
<parameter id="Modelo3D_Select"/>
<parameter id="ObjectModel3D_Core_Pallet_In"/>
<parameter id="ObjectModel3D_Core_Pallet_Out"/>
<parameter id="Path_3D_Segmentos"/>
<parameter id="Path_CORE_ID"/>
<parameter id="Path_SFM_Segmentos"/>
<parameter id="SFM_Core_Pallet_In"/>
<parameter id="SFM_Core_Pallet_Out"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
</parameters>
</docu>
</procedure>
<procedure name="Find_Entity_3D_Image">
<interface>
<io>
<par name="Z" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="N_matches" base_type="ctrl" dimension="0"/>
<par name="SFM" base_type="ctrl" dimension="0"/>
<par name="Modelo_imagen_3d" base_type="ctrl" dimension="0"/>
<par name="Sampling_Find" base_type="ctrl" dimension="0"/>
<par name="Keypoint" base_type="ctrl" dimension="0"/>
<par name="MinScore" base_type="ctrl" dimension="0"/>
<par name="Perno_Ref_Cam0" base_type="ctrl" dimension="0"/>
<par name="Modelo_3D_ROI_ThresEdges" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="PoseMLS" base_type="ctrl" dimension="0"/>
<par name="ScoreMLS" base_type="ctrl" dimension="0"/>
<par name="PoseREFIN" base_type="ctrl" dimension="0"/>
<par name="ScoreREFIN" base_type="ctrl" dimension="0"/>
<par name="SurfaceMatchingResultID1" base_type="ctrl" dimension="0"/>
<par name="ObjectModel3DResultMLS" base_type="ctrl" dimension="0"/>
<par name="ObjectModel3DResultMLS_REFIN" base_type="ctrl" dimension="0"/>
<par name="Estado_Funcion" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* </c>
<l>Estado_Funcion := true</l>
<l>try</l>
<c>    * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = "Buscando Objeto";</c>
<c>    * </c>
<c>    * ***************************************</c>
<c>    * 1.Parametros de control</c>
<c>    * ***************************************</c>
<l>    GenParamName := ['num_matches','scene_normal_computation','pose_ref_scoring_dist_rel','score_type','3d_edges']</l>
<l>    GenParamValue := [N_matches   ,          'mls'           ,   0.01         ,'model_point_fraction' ,Modelo_3D_ROI_ThresEdges]</l>
<c>    </c>
<c></c>
<l>  read_image (Image, 'D:/20-Imagenes Produccion/GRISES/ModelImageGRIS1.hobj')</l>
<l>  select_obj (Image, Image, 1)</l>
<c>  </c>
<c>  </c>
<l>  reduce_domain (Image, Z, Image)</l>
<c>  </c>
<c>    * ***************************************</c>
<c>    * 2.Busqueda de entidad</c>
<c>    * ***************************************</c>
<l>    read_cam_par ('C:/Users/Usuario/Dropbox (MIRS)/1.-Servidor Desarrollo Software/7.-Magotteaux/7.-HandEye/1.- Ensenso R1/CamParamBase', CameraParam)</l>
<l>    set_surface_model_param (SFM, 'camera_parameter', CameraParam)</l>
<l>    create_pose (0, 0, 0, 0, 0, 0, 'Rp+T', 'gba', 'point', CameraPose)</l>
<l>set_surface_model_param (SFM, 'camera_pose', CameraPose)</l>
<c></c>
<c></c>
<l>    find_surface_model_image (Image, SFM, Modelo_imagen_3d, Sampling_Find, \
                              Keypoint, MinScore, 'false', GenParamName, GenParamValue, \
                              PoseMLS, ScoreMLS, SurfaceMatchingResultID1)</l>
<c>  </c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>     find_surface_model (SFM, Modelo_imagen_3d, Sampling_Find,\
                        Keypoint, MinScore, 'true', GenParamName,\
                        GenParamValue, PoseMLS, ScoreMLS, SurfaceMatchingResultID1)</l>
<c>    * ***************************************</c>
<l>    if (|PoseMLS|)</l>
<c>        </c>
<c>        </c>
<c>        * 3.Refinar busqueda</c>
<c>        * ***************************************</c>
<l>        refine_surface_model_pose (SFM, Modelo_imagen_3d, PoseMLS, 0, 'false', 'pose_ref_sub_sampling', 2, PoseREFIN, ScoreREFIN, SurfaceMatchingResultIDPose)</l>
<c>        * ***************************************</c>
<c>        * 4.Translacion de objeto</c>
<c>        * ***************************************</c>
<c></c>
<l>        rigid_trans_object_model_3d (Perno_Ref_Cam0, PoseMLS, ObjectModel3DResultMLS)</l>
<l>        rigid_trans_object_model_3d (Perno_Ref_Cam0, PoseREFIN, ObjectModel3DResultMLS_REFIN)</l>
<c>        * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = "Objeto encontrado con una PROBABILIDAD de " + hv_ScoreMLS*100.ToString() ;</c>
<l>        Estado_Funcion := true</l>
<l>        return()</l>
<c>        </c>
<l>    endif</l>
<c>    </c>
<l>    Estado_Funcion := false</l>
<l>catch (Exception)</l>
<c>       </c>
<l>    Estado_Funcion := false</l>
<c>    * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = Fx_Aux.ErrorCatch(HDevExpDefaultException1);</c>
<c>    * </c>
<l>endtry</l>
<c>* </c>
<c>* </c>
<l>return ()</l>
</body>
<docu id="Find_Entity_3D_Image">
<parameters>
<parameter id="Estado_Funcion"/>
<parameter id="Keypoint"/>
<parameter id="MinScore"/>
<parameter id="Modelo_3D_ROI_ThresEdges"/>
<parameter id="Modelo_imagen_3d"/>
<parameter id="N_matches"/>
<parameter id="ObjectModel3DResultMLS"/>
<parameter id="ObjectModel3DResultMLS_REFIN"/>
<parameter id="Perno_Ref_Cam0"/>
<parameter id="PoseMLS"/>
<parameter id="PoseREFIN"/>
<parameter id="SFM"/>
<parameter id="Sampling_Find"/>
<parameter id="ScoreMLS"/>
<parameter id="ScoreREFIN"/>
<parameter id="SurfaceMatchingResultID1"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Find_Entity_3D_COPY_1">
<interface>
<ic>
<par name="N_matches" base_type="ctrl" dimension="0"/>
<par name="SFM" base_type="ctrl" dimension="0"/>
<par name="Modelo_imagen_3d" base_type="ctrl" dimension="0"/>
<par name="Sampling_Find" base_type="ctrl" dimension="0"/>
<par name="Keypoint" base_type="ctrl" dimension="0"/>
<par name="MinScore" base_type="ctrl" dimension="0"/>
<par name="Perno_Ref_Cam0" base_type="ctrl" dimension="0"/>
<par name="Modelo_3D_ROI_ThresEdges" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="PoseMLS" base_type="ctrl" dimension="0"/>
<par name="ScoreMLS" base_type="ctrl" dimension="0"/>
<par name="PoseREFIN" base_type="ctrl" dimension="0"/>
<par name="ScoreREFIN" base_type="ctrl" dimension="0"/>
<par name="SurfaceMatchingResultID1" base_type="ctrl" dimension="0"/>
<par name="ObjectModel3DResultMLS" base_type="ctrl" dimension="0"/>
<par name="ObjectModel3DResultMLS_REFIN" base_type="ctrl" dimension="0"/>
<par name="Estado_Funcion" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>Estado_Funcion := true</l>
<l>try</l>
<c>    * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = "Buscando Objeto";</c>
<c></c>
<c>    * ***************************************</c>
<c>    * 1.Parametros de control</c>
<c>    * ***************************************</c>
<l>    GenParamName := ['num_matches','scene_normal_computation','pose_ref_scoring_dist_rel','score_type','3d_edges']</l>
<l>    GenParamValue := [N_matches   ,          'mls'           ,   0.01         ,'model_point_fraction' ,Modelo_3D_ROI_ThresEdges]</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c>    * ***************************************</c>
<c>    * 2.Busqueda de entidad</c>
<c>    * ***************************************</c>
<l>    find_surface_model (SFM, Modelo_imagen_3d, Sampling_Find, Keypoint, MinScore, 'true', GenParamName, GenParamValue, PoseMLS, ScoreMLS, SurfaceMatchingResultID1)</l>
<c>    * ***************************************</c>
<l>    if (|PoseMLS|)</l>
<c></c>
<c></c>
<c>        * 3.Refinar busqueda</c>
<c>        * ***************************************</c>
<l>        refine_surface_model_pose (SFM, Modelo_imagen_3d, PoseMLS, 0, 'false', 'pose_ref_sub_sampling', 2, PoseREFIN, ScoreREFIN, SurfaceMatchingResultIDPose)</l>
<c>        * ***************************************</c>
<c>        * 4.Translacion de objeto</c>
<c>        * ***************************************</c>
<c></c>
<l>        rigid_trans_object_model_3d (Perno_Ref_Cam0, PoseMLS, ObjectModel3DResultMLS)</l>
<l>        rigid_trans_object_model_3d (Perno_Ref_Cam0, PoseREFIN, ObjectModel3DResultMLS_REFIN)</l>
<c>        * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = "Objeto encontrado con una PROBABILIDAD de " + hv_ScoreMLS*100.ToString() ;</c>
<l>        Estado_Funcion := true</l>
<l>        return ()</l>
<c></c>
<l>    endif</l>
<c></c>
<l>    Estado_Funcion := false</l>
<l>catch (Exception)</l>
<c></c>
<l>    Estado_Funcion := false</l>
<c>    * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = Fx_Aux.ErrorCatch(HDevExpDefaultException1);</c>
<c></c>
<l>endtry</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Find_Entity_3D_COPY_1">
<parameters>
<parameter id="Estado_Funcion"/>
<parameter id="Keypoint"/>
<parameter id="MinScore"/>
<parameter id="Modelo_3D_ROI_ThresEdges"/>
<parameter id="Modelo_imagen_3d"/>
<parameter id="N_matches"/>
<parameter id="ObjectModel3DResultMLS"/>
<parameter id="ObjectModel3DResultMLS_REFIN"/>
<parameter id="Perno_Ref_Cam0"/>
<parameter id="PoseMLS"/>
<parameter id="PoseREFIN"/>
<parameter id="SFM"/>
<parameter id="Sampling_Find"/>
<parameter id="ScoreMLS"/>
<parameter id="ScoreREFIN"/>
<parameter id="SurfaceMatchingResultID1"/>
</parameters>
</docu>
</procedure>
<procedure name="Find_Dinamic_Core">
<interface>
<ic>
<par name="N_Model_To_Find" base_type="ctrl" dimension="0"/>
<par name="SFM_Core_Pallet" base_type="ctrl" dimension="0"/>
<par name="ObjectModel3D_Core_Pallet" base_type="ctrl" dimension="0"/>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Modelo_3D_ROI_ThresEdges" base_type="ctrl" dimension="0"/>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Ang_Obj" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="MyPose" base_type="ctrl" dimension="0"/>
<par name="Score_Refinado" base_type="ctrl" dimension="0"/>
<par name="Posicion3D_Objeto_REFIN" base_type="ctrl" dimension="0"/>
<par name="Obj_Detectado" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Angulos:=[]</l>
<l>Puntaje:=[]</l>
<c></c>
<l>IdexAng:=0</l>
<l>Poses_Finded:={ {[]}}</l>
<c>************************************************</c>
<c>* Delta Angular -&gt; +- 20°</c>
<c>************************************************</c>
<l>DeltaAngular:=10</l>
<c></c>
<l>matchinToFind:=10.0/10.0</l>
<c></c>
<c>************************************************************</c>
<c>* Por receta se debera agregar el % de deteccion  de cada Core</c>
<c>************************************************************</c>
<c></c>
<c></c>
<l>Get_PorcentajeBusqueda (Vector_ID_Core_by_Segment_Pallet, SerialHandle, \
                        Porcentaje)</l>
<c></c>
<c>**-&gt; solo para pruebas     Porcentaje:=0.001</c>
<l>if (Porcentaje=[])</l>
<c>    </c>
<l>    Obj_Detectado:=0</l>
<l>* #### Envio data de estado ########################</l>
<l>    Estado:=22</l>
<l>    Send_Data_Info('### ERROR ###. No existe Porcentaje de deteccion en tabla, para core -&gt; '+ Vector_ID_Core_by_Segment_Pallet,SerialHandle)</l>
<l>    return ()</l>
<l>* ################################################## </l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>endif</l>
<c></c>
<c></c>
<l>MinScore := Porcentaje</l>
<c></c>
<c></c>
<c>*************************************************************</c>
<c>* Modificacion de Puntaje por tipo de Core</c>
<c>*****************+********************************************</c>
<l>* Get_Core_To_Use_Main (SerialHandle, Cod_Core_ToUse, FXcheck) </l>
<c>**************************************************************</c>
<c>*   AGREGAR PARA CORES RAROS</c>
<c>****************************************************************</c>
<l>* Get_Core_ToUse_From_BDD_Fast (SerialHandle, Cod_Core_ToUse, Pallet_To_Scan, Segmento_To_Scan, PitutoExist, FXcheck, Diametro)</l>
<l>   surface_normals_object_model_3d (Escena3D_RAW, 'mls', [], [], Escena3D_RAW)</l>
<c>   </c>
<l>for KeyPointDin := 0.1 to matchinToFind by 0.1</l>
<c>    </c>
<c>    </c>
<c>    ****************************</c>
<c>    * Parametros de control</c>
<c>    ****************************</c>
<l>    DinamicSampling:=0.0095</l>
<l>    Sampling_Find := (1.0 -KeyPointDin)*DinamicSampling + 0.05</l>
<l>    Keypoint := KeyPointDin</l>
<c>    </c>
<l>    N_matches := N_Model_To_Find</l>
<l>    SFM:=SFM_Core_Pallet</l>
<l>    Mod_3D_Objeto:=ObjectModel3D_Core_Pallet</l>
<l>    Escena3D:=Escena3D_RAW</l>
<c>    </c>
<c>  ****************************</c>
<c>    * Si lo que busco es una Manga, Busco el objeto por Bordes</c>
<c>    ****************************  </c>
<l>    * Visualizar_3D ([ObjectModel3D_Core_Pallet,Modelo_3D_ROI_ThresEdges,Escena3D_RAW], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], 1, [], [], [], WindowHandle, PoseOut1)   </l>
<c>    ****************************</c>
<c>    </c>
<l>    Find_Dinamic_Entity_3D (N_matches, SFM, Escena3D, Sampling_Find, Keypoint,\
                            MinScore, Mod_3D_Objeto, Modelo_3D_ROI_ThresEdges, MyPose, ScoreMLS, \
                            Obj_Detectado)</l>
<c>    </c>
<l>    if (Obj_Detectado) </l>
<l>        dev_clear_window ()</l>
<l>        dev_get_window (WindowHandle)</l>
<l>        Angulos[IdexAng] := MyPose[5]</l>
<l>        Poses_Finded.at(IdexAng).at(0) := MyPose</l>
<l>        Angulos[IdexAng] := MyPose[5]</l>
<l>        Puntaje[IdexAng]:=ScoreMLS</l>
<l>        IdexAng:=IdexAng+1</l>
<c>        </c>
<c>        </c>
<l>        rigid_trans_object_model_3d (Mod_3D_Objeto, MyPose, Posicion3D_Objeto_REFIN)</l>
<c>        </c>
<c>        </c>
<l>        Parametros_Visualizacion:=['disp_pose','color_attrib','lut','point_size']</l>
<l>        Valores_Visualizacion:= ['true','coord_z','rainbow',1]</l>
<l>        create_pose (150,50, 1590, 352, 0, 0, 'Rp+T', 'gba', 'point', PoseView)</l>
<l>        disp_object_model_3d (WindowHandle, [Posicion3D_Objeto_REFIN,Escena3D_RAW], [], PoseView, [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5])</l>
<l>        dev_disp_text ('Puntaje - &gt; ' +ScoreMLS, 'window', 'top', 'left', 'black', [], [])</l>
<l>*         dev_disp_text (MyPose , 'window', 20, 400, 'black', [], [])</l>
<c>        </c>
<c>        </c>
<l>*         Visualizar_3D ([Posicion3D_Objeto_REFIN,Escena3D_RAW], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], 1, [], [], [], WindowHandle, PoseOut1)   </l>
<c>        </c>
<c>        </c>
<c>        </c>
<l>    endif</l>
<l>* ################################</l>
<c>    </c>
<c>    </c>
<l>endfor</l>
<c></c>
<c></c>
<l>if (|Angulos|&gt;0)</l>
<c>    </c>
<c>    </c>
<c>    * Convierto a angulos negativos</c>
<c>    * Sobre el limite convierto a Neg</c>
<c>    ***********************************</c>
<l>    LimiteAngular:=200</l>
<c>    ***********************************</c>
<l>    for Index := 0 to |Angulos|-1 by 1</l>
<l>        if (Angulos[Index]&gt;LimiteAngular)       </l>
<l>            Angulos[Index]:=Angulos[Index]-360   </l>
<l>        endif  </l>
<l>    endfor</l>
<c>    </c>
<l>    Dist_Angular:=[]</l>
<l>    for Index := 0 to |Angulos|-1 by 1         </l>
<l>        Dist_Angular[Index]:=Ang_Obj-Angulos[Index]   </l>
<l>    endfor</l>
<c>    </c>
<l>    tuple_abs (Dist_Angular, Dist_Angular_abs)</l>
<c>    </c>
<l>    AuxMenor:=Dist_Angular_abs[0]</l>
<l>    flag:=0</l>
<l>    for Index := 0 to |Dist_Angular_abs|-1 by 1         </l>
<l>        if (AuxMenor&gt;Dist_Angular_abs[Index])</l>
<l>            AuxMenor:=Dist_Angular_abs[Index]</l>
<l>            flag:=Index</l>
<l>        endif</l>
<l>    endfor</l>
<c>    </c>
<c>    </c>
<l>   *  Visualizar_3D ([Posicion3D_Objeto_REFIN,Escena3D_RAW], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], 1, [], [], [], WindowHandle, PoseOut1)</l>
<c>    </c>
<c>    </c>
<c>    *********************</c>
<c>    * MAX PUNTAJE</c>
<c>    *********************</c>
<l>*     tuple_max (Puntaje, MaxPuntaje)</l>
<c>    </c>
<l>*     for Index1 := 0 to |Puntaje|-1 by 1</l>
<c>    </c>
<l>*     if (MaxPuntaje=Puntaje[Index1])</l>
<l>*     flag:=Index1</l>
<l>*     endif</l>
<c>    </c>
<l>*     endfor</l>
<c>    </c>
<l>    if (AuxMenor&lt;=DeltaAngular)</l>
<c>        </c>
<l>        Obj_Detectado:=1 </l>
<l>        MyPose:=  Poses_Finded.at(flag).at(0)</l>
<c>        </c>
<c>        </c>
<l>*         if (CoresRaros)</l>
<l>*         MyPose[3] := 0</l>
<l>*         MyPose[4] := 0     </l>
<l>*         endif</l>
<c>        </c>
<c>        </c>
<l>        Score_Refinado:=Puntaje[flag]</l>
<c>        </c>
<l>        create_pose (150,50, 1590, 352, 0, 0, 'Rp+T', 'gba', 'point', PoseView)</l>
<l>        disp_object_model_3d (WindowHandle, [Posicion3D_Objeto_REFIN,Escena3D_RAW], [], PoseView, [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5])</l>
<l>        dev_disp_text ('Puntaje - &gt; ' +Score_Refinado, 'window', 'top', 'left', 'black', [], [])</l>
<c>        </c>
<c>        </c>
<l>         Visualizar_3D ([Posicion3D_Objeto_REFIN,Escena3D_RAW], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], 1, [], [], [], WindowHandle, PoseOut1)</l>
<c>        </c>
<l>        return()</l>
<l>    else</l>
<l>        Obj_Detectado:=0</l>
<l>* #### Envio data de estado ########################</l>
<l>        Estado:=22</l>
<l>        Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)   </l>
<l>* ################################################## </l>
<c>        </c>
<c>        </c>
<l>    endif</l>
<l>else</l>
<c>    </c>
<l>    Obj_Detectado:=0</l>
<l>* #### Envio data de estado ########################</l>
<l>    Estado:=22</l>
<l>    Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)   </l>
<l>* ################################################## </l>
<c>    </c>
<l>endif</l>
<c></c>
<l>* ####################################################################### </l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Find_Dinamic_Core">
<parameters>
<parameter id="Ang_Obj"/>
<parameter id="Escena3D_RAW"/>
<parameter id="Modelo_3D_ROI_ThresEdges"/>
<parameter id="MyPose"/>
<parameter id="N_Model_To_Find"/>
<parameter id="Obj_Detectado"/>
<parameter id="ObjectModel3D_Core_Pallet"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="Posicion3D_Objeto_REFIN"/>
<parameter id="SFM_Core_Pallet"/>
<parameter id="Score_Refinado"/>
<parameter id="SerialHandle"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet"/>
<parameter id="WindowHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Find_Dinamic_Entity_3D">
<interface>
<ic>
<par name="N_matches" base_type="ctrl" dimension="0"/>
<par name="SFM" base_type="ctrl" dimension="0"/>
<par name="Modelo_imagen_3d" base_type="ctrl" dimension="0"/>
<par name="Sampling_Find" base_type="ctrl" dimension="0"/>
<par name="Keypoint" base_type="ctrl" dimension="0"/>
<par name="MinScore" base_type="ctrl" dimension="0"/>
<par name="Perno_Ref_Cam0" base_type="ctrl" dimension="0"/>
<par name="Modelo_3D_ROI_ThresEdges" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="PoseMLS" base_type="ctrl" dimension="0"/>
<par name="ScoreMLS" base_type="ctrl" dimension="0"/>
<par name="Estado_Funcion" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* </c>
<l>Estado_Funcion := true</l>
<l>try</l>
<c>    * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = "Buscando Objeto";</c>
<c>    * </c>
<c>    * ***************************************</c>
<c>    * 1.Parametros de control</c>
<c>    * ***************************************</c>
<l>    GenParamName := ['num_matches','scene_normal_computation','pose_ref_scoring_dist_rel','score_type'          ,'3d_edges'              , '3d_edge_min_amplitude_abs','max_gap','viewpoint']</l>
<l>    GenParamValue := [N_matches   ,          'mls'           ,   0.01                    ,'model_point_fraction', Modelo_3D_ROI_ThresEdges, 13.7313                   ,  30     , '0 0 0']</l>
<l> *GenParamName := ['num_matches','scene_normal_computation','score_type'          ,'3d_edges'              , '3d_edge_min_amplitude_abs','max_gap','viewpoint']</l>
<l> *   GenParamValue := [N_matches   ,          'mls'        ,'model_point_fraction', Modelo_3D_ROI_ThresEdges, 13.7313                   ,  30     , '0 0 0']</l>
<c></c>
<c>    * </c>
<c>    * ***************************************</c>
<c>    * 2.Busqueda de entidad</c>
<c>    * ***************************************</c>
<l>    find_surface_model (SFM, Modelo_imagen_3d, Sampling_Find,\
                        Keypoint, MinScore, 'true', GenParamName,\
                        GenParamValue, PoseMLS, ScoreMLS, SurfaceMatchingResultID1)</l>
<c>    * ***************************************</c>
<l>    if (|PoseMLS|)</l>
<c> * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = "Objeto encontrado con una PROBABILIDAD de " + hv_ScoreMLS*100.ToString() ;</c>
<l>        Estado_Funcion := true</l>
<l>        return()</l>
<c>        </c>
<l>    endif</l>
<c>    </c>
<l>    Estado_Funcion := false</l>
<l>catch (Exception)</l>
<c>       </c>
<l>    Estado_Funcion := false</l>
<c>    * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = Fx_Aux.ErrorCatch(HDevExpDefaultException1);</c>
<c>    * </c>
<l>endtry</l>
<c>* </c>
<c>* </c>
<l>return ()</l>
</body>
<docu id="Find_Dinamic_Entity_3D">
<parameters>
<parameter id="Estado_Funcion"/>
<parameter id="Keypoint"/>
<parameter id="MinScore"/>
<parameter id="Modelo_3D_ROI_ThresEdges"/>
<parameter id="Modelo_imagen_3d"/>
<parameter id="N_matches"/>
<parameter id="Perno_Ref_Cam0"/>
<parameter id="PoseMLS"/>
<parameter id="SFM"/>
<parameter id="Sampling_Find"/>
<parameter id="ScoreMLS"/>
</parameters>
</docu>
</procedure>
<procedure name="Adq_XYZ_Img_COPY_1">
<interface>
<io>
<par name="ModelImage" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Xm" base_type="iconic" dimension="0"/>
<par name="Ym" base_type="iconic" dimension="0"/>
<par name="Zm" base_type="iconic" dimension="0"/>
</oo>
</interface>
<body>
<l>select_obj (ModelImage, XYZMAP, 3)</l>
<c></c>
<c>* Separate the X, Y and Z images</c>
<l>access_channel (XYZMAP, Xm, 1)</l>
<l>access_channel (XYZMAP, Ym, 2)</l>
<l>access_channel (XYZMAP, Zm, 3)</l>
<l>return ()</l>
</body>
<docu id="Adq_XYZ_Img_COPY_1">
<parameters>
<parameter id="ModelImage"/>
<parameter id="Xm"/>
<parameter id="Ym"/>
<parameter id="Zm"/>
</parameters>
</docu>
</procedure>
<procedure name="Segmentar_Core_COPY_1">
<interface>
<io>
<par name="HeightMap" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
<par name="Z" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Entidad" base_type="iconic" dimension="0"/>
</oo>
<oc>
<par name="Estado_Funcion" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Estado_Funcion := false</l>
<c></c>
<l>try</l>
<c></c>
<c>    * ********************************************************</c>
<c>    * 1.-  !!!!!!!!! threshols dinamico!!!!!!!!!!!!!!!!!!!!!!!!!!</c>
<c>    * ********************************************************</c>
<c></c>
<l>    UmbralMaxThr := 1600.0</l>
<l>    threshold (HeightMap, Region, 900, UmbralMaxThr)</l>
<l>    escala := 255.0/UmbralMaxThr</l>
<l>    scale_image (HeightMap, HeightMap_Scalada, escala, 0)</l>
<l>    threshold (HeightMap_Scalada, HeightMap_Region, 0, 255)</l>
<l>    gray_histo_range (HeightMap_Region, HeightMap_Scalada, 0, 255, 256, Histo, BinSize)</l>
<l>    tuple_sum (Histo, Sum_Histo)</l>
<c></c>
<l>* # #########################################################</l>
<l>* # ### Mientras mas grabnde menos sensible a cambios #######   </l>
<l>    Mascara := 1</l>
<l>* # ########################################################</l>
<c></c>
<l>    Vector_Distribucion := []</l>
<l>    init_vector := 255</l>
<l>    flag_vector := 0</l>
<l>    aux_suma := 0.0</l>
<c></c>
<l>    for Index := init_vector to 0 by -1</l>
<c></c>
<l>        Vector_Distribucion[Index] := aux_suma+Histo[Index]*100.0/ Sum_Histo</l>
<l>        aux_suma := Vector_Distribucion[Index]</l>
<l>    endfor</l>
<c></c>
<l>    Derivada := []</l>
<l>    Factor_Der := 1000</l>
<l>    Mascara := 1</l>
<l>    for Index := init_vector to 50 by -Mascara</l>
<c></c>
<l>        Derivada[Index] := abs(Vector_Distribucion[Index]-Vector_Distribucion[Index-Mascara])*Factor_Der</l>
<c></c>
<l>    endfor</l>
<c></c>
<c></c>
<c>    * *********************************************************</c>
<c>    * * Busco el primer cambio brusco de posicion *************</c>
<c>    * * El umbral de cambio es Aux_Val_Max ********************</c>
<c>    * *********************************************************</c>
<l>    create_funct_1d_array (Derivada, Function)</l>
<c></c>
<c>    * *   dev_inspect_ctrl (Function)</c>
<c>    * ***********************************************************************************************</c>
<l>    Aux_Val_Max := 30000</l>
<c>    * ****************************************************************************************************</c>
<l>    Flag_indx_max := 255</l>
<l>    for Index := init_vector to 50 by -Mascara</l>
<c></c>
<l>        if (Derivada[Index]&gt;Aux_Val_Max)</l>
<l>            Aux_Val_Max := Derivada[Index]</l>
<l>            Flag_indx_max := Index</l>
<l>        endif</l>
<c></c>
<l>    endfor</l>
<c></c>
<l>* # #########################################################</l>
<l>* # ######## Grado de proteccion para moverse entre el </l>
<l>* # ####### histograma</l>
<l>    index_protection := 4</l>
<l>* # #########################################################</l>
<c></c>
<l>    Alt_Min := 110</l>
<l>    Alt_Max := Flag_indx_max-index_protection</l>
<l>    threshold (HeightMap_Scalada, Entidad, Alt_Min, Alt_Max)</l>
<c></c>
<l>    Estado_Funcion := true</l>
<l>catch (Exception)</l>
<l>    Estado_Funcion := false</l>
<c>    * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = Fx_Aux.ErrorCatch(HDevExpDefaultException1);</c>
<c></c>
<l>endtry</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Segmentar_Core_COPY_1">
<parameters>
<parameter id="Entidad"/>
<parameter id="Estado_Funcion"/>
<parameter id="HeightMap"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Segmentar_Sleeve_COPY_2">
<interface>
<io>
<par name="HeightMap" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
<par name="Z" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Entidad" base_type="iconic" dimension="0"/>
</oo>
<oc>
<par name="Estado_Funcion" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Estado_Funcion := false</l>
<c></c>
<l>try</l>
<c></c>
<c>    * ********************************************************</c>
<c>    * 1.-  !!!!!!!!! threshols dinamico!!!!!!!!!!!!!!!!!!!!!!!!!!</c>
<c>    * ********************************************************</c>
<c></c>
<l>    UmbralMaxThr := 1600.0</l>
<l>    threshold (HeightMap, Region, 900, UmbralMaxThr)</l>
<l>    escala := 255.0/UmbralMaxThr</l>
<l>    scale_image (HeightMap, HeightMap_Scalada, escala, 0)</l>
<l>    threshold (HeightMap_Scalada, HeightMap_Region, 0, 255)</l>
<l>    gray_histo_range (HeightMap_Region, HeightMap_Scalada, 0, 255, 256, Histo, BinSize)</l>
<l>    tuple_sum (Histo, Sum_Histo)</l>
<c></c>
<l>* # #########################################################</l>
<l>* # ### Mientras mas grabnde menos sensible a cambios #######   </l>
<l>    Mascara := 1</l>
<l>* # ########################################################</l>
<c></c>
<l>    Vector_Distribucion := []</l>
<l>    init_vector := 255</l>
<l>    flag_vector := 0</l>
<l>    aux_suma := 0.0</l>
<c></c>
<l>    for Index := init_vector to 0 by -1</l>
<c></c>
<l>        Vector_Distribucion[Index] := aux_suma+Histo[Index]*100.0/ Sum_Histo</l>
<l>        aux_suma := Vector_Distribucion[Index]</l>
<l>    endfor</l>
<c></c>
<l>    Derivada := []</l>
<l>    Factor_Der := 10000</l>
<l>    Mascara := 1</l>
<l>    for Index := init_vector to 50 by -Mascara</l>
<c></c>
<l>        Derivada[Index] := abs(Vector_Distribucion[Index]-Vector_Distribucion[Index-Mascara])*Factor_Der</l>
<c></c>
<l>    endfor</l>
<c></c>
<c></c>
<c>    * *********************************************************</c>
<c>    * * Busco el primer cambio brusco de posicion *************</c>
<c>    * * El umbral de cambio es Aux_Val_Max ********************</c>
<c>    * *********************************************************</c>
<l>    create_funct_1d_array (Derivada, Function)</l>
<c></c>
<l>*     dev_inspect_ctrl (Function)</l>
<c>    * ***********************************************************************************************</c>
<l>    Aux_Val_Max := 60000</l>
<c>    * ****************************************************************************************************</c>
<c></c>
<l>    Flag_indx_max := 255</l>
<l>    for Index := init_vector to 50 by -Mascara</l>
<c></c>
<l>        if (Derivada[Index]&gt;Aux_Val_Max)</l>
<l>            Aux_Val_Max := Derivada[Index]</l>
<l>            Flag_indx_max := Index</l>
<l>        endif</l>
<c></c>
<l>    endfor</l>
<c></c>
<l>* # #########################################################</l>
<l>* # ######## Grado de proteccion para moverse entre el </l>
<l>* # ####### histograma</l>
<l>    index_protection := 20</l>
<l>* # #########################################################</l>
<c></c>
<l>    Alt_Min := 50</l>
<l>    Alt_Max := Flag_indx_max-index_protection</l>
<l>    threshold (HeightMap_Scalada, Entidad, Alt_Min, Alt_Max)</l>
<c></c>
<l>    Estado_Funcion := true</l>
<l>catch (Exception)</l>
<l>    Estado_Funcion := false</l>
<c>    * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = Fx_Aux.ErrorCatch(HDevExpDefaultException1);</c>
<c></c>
<l>endtry</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Segmentar_Sleeve_COPY_2">
<parameters>
<parameter id="Entidad"/>
<parameter id="Estado_Funcion"/>
<parameter id="HeightMap"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Core_To_Use_Main">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Cod_Core_ToUse" base_type="ctrl" dimension="0"/>
<par name="FXcheck" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>FXcheck := false</l>
<l>try</l>
<l>    Variable_BD := 'ram_actualproduction'</l>
<l>    Get_Pallet_BD (Variable_BD, SerialHandle, DataBD, FXcheck)</l>
<c></c>
<l>    if (not FXcheck)</l>
<l>        Exception:=[]</l>
<l>            Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<l>        return()</l>
<c>        </c>
<l>    endif</l>
<l>    Cod_Core_ToUse := DataBD[3]</l>
<l>    Cod_Core_ToUseAux := DataBD[3]</l>
<l>    Pallet_To_Scan := DataBD[15]</l>
<l>    Segmento_To_Scan := DataBD[16]</l>
<l>    PitutoExist := DataBD[5]</l>
<c></c>
<c></c>
<l>    FXcheck := true</l>
<c></c>
<c></c>
<l>catch (Exception)</l>
<c></c>
<l>    Mensaje := '### ERROR ### -&gt; Entidad Requerida. RAM base DATOS no CARGADA.'</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<l>   * Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<l>    FXcheck := false</l>
<l>endtry</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Core_To_Use_Main">
<parameters>
<parameter id="Cod_Core_ToUse"/>
<parameter id="FXcheck"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_EsquinasPattern">
<interface>
<ic>
<par name="Grayval" base_type="ctrl" dimension="0"/>
<par name="RowToFind" base_type="ctrl" dimension="0"/>
<par name="ColumToFind" base_type="ctrl" dimension="0"/>
<par name="Width" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="FilaPattern" base_type="ctrl" dimension="0"/>
<par name="ColumnasPattern" base_type="ctrl" dimension="0"/>
<par name="Ptr_Min" base_type="ctrl" dimension="0"/>
<par name="Ptr_Min2" base_type="ctrl" dimension="0"/>
<par name="Ptr_Min3" base_type="ctrl" dimension="0"/>
<par name="EsquinaDetectadas" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>GrayvalOut := Grayval</l>
<c>* </c>
<l>EsquinaDetectadas := false</l>
<l>try</l>
<c>    * </c>
<c>    * </c>
<c>    * </c>
<c>    * *************************************************</c>
<c>    * ** Umbral Corner Response</c>
<l>    Umbral := 2100</l>
<c>    * *************************************************</c>
<l>    Ptros := 0</l>
<l>    AuxPtr := 0</l>
<l>    for Idx := 0 to |GrayvalOut|-1 by 1</l>
<l>        if (GrayvalOut[Idx]&gt;Umbral)</l>
<l>            Ptros[AuxPtr] := Idx</l>
<l>            AuxPtr := AuxPtr+1</l>
<l>            GrayvalOut[Idx] := -1</l>
<l>        endif</l>
<l>    endfor</l>
<l>    Umbral := 0</l>
<l>    for Idx := 0 to |GrayvalOut|-1 by 1</l>
<l>        if (GrayvalOut[Idx]&gt;Umbral)</l>
<l>            Umbral := GrayvalOut[Idx]</l>
<l>            Ptros[3] := Idx</l>
<l>        endif</l>
<l>    endfor</l>
<c>    * </c>
<l>    for Idx := 0 to 3 by 1</l>
<l>        FilaPattern[Idx] := RowToFind[Ptros[Idx]]</l>
<l>        ColumnasPattern[Idx] := ColumToFind[Ptros[Idx]]</l>
<l>    endfor</l>
<l>    dev_get_window (WindowHandle)</l>
<c>   </c>
<c>    * </c>
<c>    * </c>
<l>    for Idx := 0 to 3 by 1</l>
<l>        tuple_pow (FilaPattern[Idx], 2, Pow1)</l>
<l>        tuple_pow (ColumnasPattern[Idx], 2, Pow2)</l>
<l>        tuple_sqrt (Pow1+Pow2, Sqrt)</l>
<l>        DistVectorial[Idx] := Sqrt</l>
<l>    endfor</l>
<c>    * </c>
<c>    * </c>
<l>    AuxMin := DistVectorial[0]</l>
<l>    Ptr_Min := 0</l>
<l>    for Idx := 0 to |DistVectorial|-1 by 1</l>
<l>        if (DistVectorial[Idx]&lt;AuxMin)</l>
<l>            Ptr_Min := Idx</l>
<l>            AuxMin := DistVectorial[Idx]</l>
<l>        endif</l>
<l>    endfor</l>
<c>    * </c>
<c>    * </c>
<c>    * </c>
<l>    for Idx := 0 to 3 by 1</l>
<l>        tuple_pow (FilaPattern[Idx], 2, Pow1)</l>
<l>        tuple_pow (Width-ColumnasPattern[Idx], 2, Pow2)</l>
<l>        tuple_sqrt (Pow1+Pow2, Sqrt)</l>
<l>        DistVectorial2[Idx] := Sqrt</l>
<l>    endfor</l>
<c>    * </c>
<l>    AuxMin2 := DistVectorial2[0]</l>
<l>    Ptr_Min2 := 0</l>
<l>    for Idx := 0 to |DistVectorial2|-1 by 1</l>
<l>        if (DistVectorial2[Idx]&lt;AuxMin2)</l>
<l>            Ptr_Min2 := Idx</l>
<l>            AuxMin2 := DistVectorial2[Idx]</l>
<l>        endif</l>
<l>    endfor</l>
<c>    * </c>
<c>    * </c>
<l>    for Idx := 0 to 3 by 1</l>
<l>        tuple_pow (Width-FilaPattern[Idx], 2, Pow1)</l>
<l>        tuple_pow (ColumnasPattern[Idx], 2, Pow2)</l>
<l>        tuple_sqrt (Pow1+Pow2, Sqrt)</l>
<l>        DistVectorial3[Idx] := Sqrt</l>
<l>    endfor</l>
<c>    * </c>
<l>    AuxMin3 := DistVectorial3[0]</l>
<l>    Ptr_Min3 := 0</l>
<l>    for Idx := 0 to |DistVectorial3|-1 by 1</l>
<l>        if (DistVectorial3[Idx]&lt;AuxMin3)</l>
<l>            Ptr_Min3 := Idx</l>
<l>            AuxMin3 := DistVectorial3[Idx]</l>
<l>        endif</l>
<l>    endfor</l>
<l>     disp_cross (WindowHandle, FilaPattern, ColumnasPattern, 50, 0)</l>
<l>    EsquinaDetectadas := true</l>
<l>catch (Exception)</l>
<l>    EsquinaDetectadas := false</l>
<c>    * </c>
<c>    * </c>
<l>endtry</l>
<c>* </c>
<c>* </c>
<l>return ()</l>
</body>
<docu id="Get_EsquinasPattern">
<parameters>
<parameter id="ColumToFind"/>
<parameter id="ColumnasPattern"/>
<parameter id="EsquinaDetectadas"/>
<parameter id="FilaPattern"/>
<parameter id="Grayval"/>
<parameter id="Ptr_Min"/>
<parameter id="Ptr_Min2"/>
<parameter id="Ptr_Min3"/>
<parameter id="RowToFind"/>
<parameter id="Width"/>
</parameters>
</docu>
</procedure>
<procedure name="Silple_Orientation">
<interface>
<io>
<par name="IMGris" base_type="iconic" dimension="0"/>
<par name="Zobj1" base_type="iconic" dimension="0"/>
<par name="Esquina_Left" base_type="iconic" dimension="0"/>
</io>
<oc>
<par name="Angulo" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<l>reduce_domain (IMGris, Esquina_Left, ImageReduced)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>shape_trans (Esquina_Left, RegionTrans, 'rectangle2')</l>
<c>* </c>
<c></c>
<c></c>
<l>gen_image_proto (Zobj1, Img1, 10)</l>
<l>gen_image_proto (Zobj1, Img2, 150)</l>
<l>reduce_domain (Img2, RegionTrans, ImageReduced2)</l>
<c>* </c>
<l>add_image (Img1, ImageReduced2, ImageResult, 1, 100)</l>
<l>paint_gray (ImageReduced2, Img1, MixedImage)</l>
<l>corner_response (MixedImage, ImageCorner, 3, 0.04)</l>
<c>* </c>
<c>* </c>
<c></c>
<c></c>
<l>*rotate_image (ImageCorner, ImageCorner, -2, 'constant')</l>
<c></c>
<l>threshold (ImageCorner, Regions2, 1000, 5000)</l>
<c>* </c>
<l>reduce_domain (ImageCorner, Regions2, ImageCorner)</l>
<c>* </c>
<l>local_max (ImageCorner, LocalMaxima1)</l>
<l>connection (LocalMaxima1, ConnectedRegions1)</l>
<l>area_center (ConnectedRegions1, Area1, RowToFind, ColumToFind)</l>
<l>get_grayval (ImageCorner, RowToFind, ColumToFind, Grayval)</l>
<l>create_funct_1d_array (Grayval, Function)</l>
<l>* dev_inspect_ctrl (Function)</l>
<c>* </c>
<l>get_image_size (ImageCorner, Width, Height)</l>
<c>* </c>
<c></c>
<c></c>
<l>Get_EsquinasPattern (Grayval, RowToFind, ColumToFind, Width, FilaPattern, ColumnasPattern, Ptr_Min, Ptr_Min2, Ptr_Min3, EsquinaDetectadas)</l>
<c>* </c>
<l>dev_get_window (WindowHandle)</l>
<c></c>
<c>* </c>
<c>* </c>
<l>angle_lx (RowToFind[1], ColumToFind[1], RowToFind[0], ColumToFind[0], Angle)</l>
<c>* </c>
<l>angle_lx (RowToFind[0], ColumToFind[0], RowToFind[1], ColumToFind[1], Angle2)</l>
<c>* </c>
<l>tuple_deg (Angle, Deg)</l>
<l>tuple_deg (Angle2, Deg2)</l>
<c></c>
<l>Angulos:=[Deg,Deg2]</l>
<l>tuple_abs (Angulos, Abs)</l>
<l>tuple_min (Abs, Min)</l>
<c></c>
<c></c>
<l>Flag:=0</l>
<l>for Index := 0 to |Angulos|-1 by 1</l>
<c>    </c>
<l>    if (Min=Abs[Index])</l>
<l>       Flag:=Index </l>
<l>    endif</l>
<c>    </c>
<l>endfor</l>
<c></c>
<c></c>
<l>Angulo:=Angulos[Flag]</l>
<c></c>
<l>dev_disp_text (Angulo, 'window', RowToFind[0]+50, ColumToFind[0], 'black', [], [])</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Silple_Orientation">
<parameters>
<parameter id="Angulo"/>
<parameter id="Esquina_Left"/>
<parameter id="IMGris"/>
<parameter id="Zobj1"/>
</parameters>
</docu>
</procedure>
<procedure name="Is_a_Sleeve">
<interface>
<ic>
<par name="Vector_ID_Core_by_Segment_Pallet" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="IsA_Sleeve" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>IsA_Sleeve:=0</l>
<l>TipoPallet:=0</l>
<l>for Index := 0 to |Vector_ID_Core_by_Segment_Pallet|-1 by 1</l>
<c>    </c>
<l>    Aux_Var:=Vector_ID_Core_by_Segment_Pallet[Index]</l>
<c>    </c>
<l>    tuple_strrstr(Aux_Var,'sleeve', SleevPosition)</l>
<c>    </c>
<c>    </c>
<l>    if (SleevPosition&gt;1)</l>
<c>        </c>
<l>        TipoPallet:=TipoPallet+1</l>
<l>    endif</l>
<c>    </c>
<c>    </c>
<l>endfor</l>
<c></c>
<l>if (TipoPallet&gt;0)</l>
<l>    IsA_Sleeve:=1</l>
<c>    </c>
<l>endif</l>
<l>return ()</l>
</body>
<docu id="Is_a_Sleeve">
<parameters>
<parameter id="IsA_Sleeve"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Pose_Pallet_Core">
<interface>
<io>
<par name="Img_Left_Esquina" base_type="iconic" dimension="0"/>
<par name="Zobj1" base_type="iconic" dimension="0"/>
<par name="Xobj1" base_type="iconic" dimension="0"/>
<par name="Yobj1" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Esquina_Left" base_type="iconic" dimension="0"/>
<par name="Esquina_Right" base_type="iconic" dimension="0"/>
<par name="ROI_2_0" base_type="iconic" dimension="0"/>
<par name="ROI_2_3" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Estado_Fx" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>dev_resize_window_fit_image(Img_Left_Esquina, 0, 0, 500, 500)</l>
<l>dev_set_line_width(2)</l>
<l>Get_Esquina_LeftRight (Img_Left_Esquina, Esquina_Left, Esquina_Right)</l>
<l>Get_Centro_and_Esquina (Esquina_Left, Xobj1, Yobj1, Zobj1, Esquina_Left, row1_L, col1_L, CentroX_L, CentroY_L, CentroZ_L, Nelementos_Left)</l>
<l>dev_set_line_width(2)</l>
<l>Silple_Orientation (Img_Left_Esquina, Zobj1, Esquina_Left, Angle)</l>
<c></c>
<l>*Get_Centro_and_Esquina (Esquina_Right, Xobj1, Yobj1, Zobj1, Esquina_Right, row1_R, col1_R, CentroX, CentroY, CentroZ, Nelementos_Rigth)</l>
<c></c>
<c>** Limito la distancia posible</c>
<l>Limite_Altura_Z := 1550.0</l>
<l>if ( CentroZ_L&gt;Limite_Altura_Z)</l>
<l>    Mensaje:='¡¡¡PELIGRO!!!  PALLET MUY CERCA DE LA CAMARA'</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<l>    Estado_Fx:=false</l>
<l>    Resultado:=2</l>
<l>    Procesando:=1</l>
<l>    Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>    return ()</l>
<l>endif</l>
<c></c>
<c></c>
<l>region_features (Esquina_Left, 'area', Area)</l>
<l>region_features (Esquina_Left, 'rectangularity', rectangularidad)</l>
<c></c>
<l>if (rectangularidad&lt;0.9 or Area&lt;9000 or Area&gt;11500)</l>
<l>    Mensaje:='¡¡¡PELIGRO!!!  Objeto detectado no cumple condiciones morfologicas. Revisar iluminacion'</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<l>    Estado_Fx:=false</l>
<l>    Resultado:=2</l>
<l>    Procesando:=1</l>
<l>    Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>    return ()</l>
<l>endif</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>if (Nelementos_Left = 1 )</l>
<c>    </c>
<c>********************************    </c>
<l>   Angle:=-Angle*0</l>
<c> ********************************   </c>
<l>    create_pose (CentroX_L, CentroY_L, CentroZ_L, 0, 0, -Angle, 'Rp+T', 'gba', 'point', Base_esquina)</l>
<c>    </c>
<c>    </c>
<l>    Send_Data_To_Robot (Base_esquina, SerialHandle)  </l>
<c>    </c>
<c>    </c>
<l>    Mensaje:='####################################'</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)    </l>
<l>    Mensaje:='Base Pallet -&gt; '+'  Ang Z -&gt; '+Angle+' # '+CentroX_L+' # '+ CentroY_L+' # '+ CentroZ_L </l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<l>    Mensaje:='####################################'</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<c> </c>
<c>    ** Altura desde la camara deseada ***</c>
<l>    TagToWrite:='_EV01_I_EjeZZ'</l>
<l>    Send_EthernetIP_Data(TagToWrite, 1100, SerialHandle)</l>
<c>    </c>
<l>    Estado_Fx:=true</l>
<c>    </c>
<c>    </c>
<l>else</l>
<l>    Mensaje:='NO SE ENCONTRO ESQUINA PALLET'</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<l>    Estado_Fx:=false</l>
<l>    Resultado:=2</l>
<l>    Procesando:=0</l>
<l>    Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>    return ()</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>endif</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Pose_Pallet_Core">
<parameters>
<parameter id="Esquina_Left"/>
<parameter id="Esquina_Right"/>
<parameter id="Estado_Fx"/>
<parameter id="Img_Left_Esquina"/>
<parameter id="ROI_2_0"/>
<parameter id="ROI_2_3"/>
<parameter id="SerialHandle"/>
<parameter id="Xobj1"/>
<parameter id="Yobj1"/>
<parameter id="Zobj1"/>
</parameters>
</docu>
</procedure>
<procedure name="Segmentar_Sleeve_pallet">
<interface>
<io>
<par name="HeightMap" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
<par name="Z" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Entidad" base_type="iconic" dimension="0"/>
</oo>
<oc>
<par name="Estado_Funcion" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Estado_Funcion := false</l>
<c>* </c>
<l>try</l>
<c>    * </c>
<c>    * ********************************************************</c>
<c>    * 1.-  !!!!!!!!! threshols dinamico!!!!!!!!!!!!!!!!!!!!!!!!!!</c>
<c>    * ********************************************************</c>
<c>    </c>
<l>    UmbralMaxThr:=2600.0</l>
<l>    threshold (HeightMap, Region, 900, UmbralMaxThr)</l>
<l>    escala := 255.0/UmbralMaxThr</l>
<l>    scale_image (HeightMap, HeightMap_Scalada, escala, 0)</l>
<l>    threshold (HeightMap_Scalada, HeightMap_Region, 0, 255)</l>
<l>    gray_histo_range (HeightMap_Region, HeightMap_Scalada, 0, 255, 256, Histo, BinSize)</l>
<l>    tuple_sum (Histo, Sum_Histo)</l>
<c>    * </c>
<l>* # #########################################################</l>
<l>* # ### Mientras mas grabnde menos sensible a cambios #######   </l>
<l>    Mascara := 1</l>
<l>* # ########################################################</l>
<c>    * </c>
<l>    Vector_Distribucion := []</l>
<l>    init_vector := 255</l>
<l>    flag_vector := 0</l>
<l>    aux_suma := 0.0</l>
<c>    * </c>
<l>    for Index := init_vector to 0 by -1</l>
<c>        * </c>
<l>        Vector_Distribucion[Index] := aux_suma+Histo[Index]*100.0/ Sum_Histo</l>
<l>        aux_suma := Vector_Distribucion[Index]</l>
<l>    endfor</l>
<c>    * </c>
<l>    Derivada := []</l>
<l>    Factor_Der := 10000</l>
<l>    Mascara := 1</l>
<l>    for Index := init_vector to 50 by -Mascara</l>
<c>        * </c>
<l>        Derivada[Index] := abs(Vector_Distribucion[Index]-Vector_Distribucion[Index-Mascara])*Factor_Der</l>
<c>        * </c>
<l>    endfor</l>
<c>    * </c>
<c>    * </c>
<c>    * *********************************************************</c>
<c>    * * Busco el primer cambio brusco de posicion *************</c>
<c>    * * El umbral de cambio es Aux_Val_Max ********************</c>
<c>    * *********************************************************</c>
<l>    create_funct_1d_array (Derivada, Function)</l>
<c>    </c>
<l>*  dev_inspect_ctrl (Function)</l>
<c>    ************************************************************************************************</c>
<l>    Aux_Val_Max := 20000</l>
<c>    *****************************************************************************************************</c>
<c>   </c>
<l>    Flag_indx_max := 255</l>
<l>    for Index := 20 to 255 by Mascara</l>
<c>        * </c>
<l>        if (Derivada[Index]&gt;Aux_Val_Max)</l>
<l>            Aux_Val_Max := Derivada[Index]</l>
<l>            Flag_indx_max := Index</l>
<l>            break</l>
<l>        endif</l>
<c>        * </c>
<l>    endfor</l>
<c></c>
<l>* # #########################################################</l>
<l>* # ######## Grado de proteccion para moverse entre el </l>
<l>* # ####### histograma</l>
<l>    index_protection := -0</l>
<l>* # #########################################################</l>
<c></c>
<l>    Alt_Min := 50</l>
<l>    Alt_Max := Flag_indx_max+index_protection</l>
<l>    threshold (HeightMap_Scalada, Entidad, Alt_Min, Alt_Max)</l>
<c></c>
<l>    Estado_Funcion := true</l>
<l>catch (Exception)</l>
<l>    Estado_Funcion := false</l>
<c>    * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = Fx_Aux.ErrorCatch(HDevExpDefaultException1);</c>
<c>    * </c>
<l>endtry</l>
<c>* </c>
<c>* </c>
<l>return ()</l>
</body>
<docu id="Segmentar_Sleeve_pallet">
<parameters>
<parameter id="Entidad"/>
<parameter id="Estado_Funcion"/>
<parameter id="HeightMap"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_Pase_Sleeve">
<interface>
<io>
<par name="Objeto_1" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Estado_Funcion" base_type="ctrl" dimension="0"/>
<par name="EstadoFx" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>try</l>
<c>    </c>
<l>*     decompose3 (Objeto_1, X, Y, Z)</l>
<c>    </c>
<l>*     threshold (Z, SelectedRegions, 1100, 2330)</l>
<c>      </c>
<l>*     area_center (SelectedRegions, Area2, Row2, Column2)</l>
<l>*     area_center (SelectedRegions, Area2, CentroPalletX, CentroPalletY)</l>
<c>    </c>
<c>    </c>
<l>*     get_grayval (Objeto_1,CentroPalletX, CentroPalletY, BaseSleeve)</l>
<c>    </c>
<l>*     PosX:=BaseSleeve[0]</l>
<l>*     PosY:=BaseSleeve[1]</l>
<l>*     PosZ:=BaseSleeve[2]</l>
<c>    </c>
<c>    </c>
<l>*     DistanciCamaraSuelo:=2430</l>
<l>*     PosZ:=DistanciCamaraSuelo</l>
<c>    </c>
<l>*     Offsety:=5</l>
<l>*     while(PosX=0 or PosY=0)  </l>
<l>*         Offsety:=Offsety+1</l>
<l>*         try</l>
<c>            </c>
<c>            </c>
<l>*             get_grayval (Objeto_1, Row2+10, Column2+Offsety, BaseSleeve)</l>
<l>*             PosX:=BaseSleeve[0]</l>
<l>*             PosY:=BaseSleeve[1]</l>
<l>*             PosZ:=BaseSleeve[2]</l>
<c>            </c>
<l>*         catch (Exception)</l>
<l>*             continue</l>
<l>*         endtry</l>
<c>        </c>
<c>        </c>
<l>*     endwhile</l>
<c>     </c>
<l>*     DistanciCamaraSuelo:=2430</l>
<l>*     PosZ:=DistanciCamaraSuelo</l>
<l>*     CorrimientoSegmento:=-250</l>
<l>*     create_pose (PosX+CorrimientoSegmento, PosY, PosZ, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose_Base_Sleeve)</l>
<c>    </c>
<c>    </c>
<l>*     reduce_domain (Z, SelectedRegions, ImageReduced)</l>
<l>*     dev_clear_window ()</l>
<l>*     dev_display (ImageReduced)</l>
<l>*     dev_get_window (WindowHandle)</l>
<l>*     disp_cross (WindowHandle, CentroPalletX, CentroPalletY, 500, 0)</l>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    ***********************************************</c>
<c>    * Delimitar falsos Positivos </c>
<c>    ***********************************************</c>
<l>    DistanciCamaraSuelo:=2600</l>
<l>   create_pose (0, 0, DistanciCamaraSuelo, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose_Base_Sleeve)</l>
<c>    </c>
<l>    Send_Data_To_Robot (Pose_Base_Sleeve, SerialHandle)</l>
<c>    </c>
<l>    Mensaje:='####################################'</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)    </l>
<l>    Mensaje:='Base Pallet -&gt; 0 # 0 # ' +DistanciCamaraSuelo</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<l>    Mensaje:='####################################'</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<c>    ************************************************</c>
<c>    </c>
<c>    ** Altura desde la camara deseada ***</c>
<l>    TagToWrite:='_EV01_I_EjeZZ'</l>
<l>    Send_EthernetIP_Data(TagToWrite, DistanciCamaraSuelo, SerialHandle)</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    EstadoFx:=1</l>
<l>    return ()</l>
<c>    </c>
<l>catch (Exception)</l>
<l>    Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<c>    </c>
<l>endtry</l>
<c></c>
<c></c>
</body>
<docu id="Send_Pase_Sleeve">
<parameters>
<parameter id="EstadoFx"/>
<parameter id="Estado_Funcion"/>
<parameter id="Objeto_1"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="OLDCODE">
<interface>
<io>
<par name="Z" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
<par name="Objeto_1" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>XOut := X</l>
<l>YOut := Y</l>
<l>ZOut := Z</l>
<c>*****************************************</c>
<c>*</c>
<c>****************************************</c>
<l>threshold (ZOut, Region, 200, 2500)</l>
<l>reduce_domain (ZOut, Region, ZOut)</l>
<c></c>
<l>gen_rectangle1 (ROI_0, 14.5, 135.75, 1022.5, 1048.25)</l>
<c></c>
<l>reduce_domain (XOut, ROI_0, XOut)</l>
<l>reduce_domain (YOut, ROI_0, YOut)</l>
<l>reduce_domain (ZOut, ROI_0, ZOut)</l>
<c></c>
<c></c>
<c>* Segmento por histograma      </c>
<l>Segmentar_Sleeve_pallet (ZOut, XOut, YOut, ZOut, RegionSleeve, Estado_Funcion)</l>
<c></c>
<l>dev_get_window (WindowHandle)</l>
<c>* Elimino el ruido de regiones pequeñas</c>
<l>connection (RegionSleeve, ConnectedRegions)</l>
<l>select_shape_std (ConnectedRegions, SelectedRegions, 'max_area', 90)</l>
<l>* erosion_circle (RegionSleeve, RegionErosion, 8.5)</l>
<c>* busco hoyos</c>
<c></c>
<l>shape_trans (SelectedRegions, RegionTrans, 'rectangle1')</l>
<l>reduce_domain (Objeto_1, RegionTrans, ImageReduced)</l>
<c></c>
<l>area_center (RegionTrans, Area, Row, Column)</l>
<c></c>
<c></c>
<l>get_grayval (ImageReduced, Row, Column, BaseSleeve)</l>
<c></c>
<l>PosX:=BaseSleeve[0]</l>
<l>PosY:=BaseSleeve[1]</l>
<l>PosZ:=BaseSleeve[2]</l>
<c></c>
<l>Offsety:=5</l>
<l>while(PosX=0 or PosY=0)        </l>
<l>    get_grayval (ImageReduced, Row+10, Column+Offsety, BaseSleeve)</l>
<l>    PosX:=BaseSleeve[0]</l>
<l>    PosY:=BaseSleeve[1]</l>
<l>    PosZ:=BaseSleeve[2]</l>
<l>    Offsety:=Offsety+1</l>
<c>    </c>
<l>endwhile</l>
<c></c>
<l>reduce_domain (ZOut, SelectedRegions, Zred)</l>
<l>gauss_filter (Zred, Zred, 5)</l>
<l>local_min (Zred, LocalMaxima)</l>
<l>connection (LocalMaxima, ConnectedRegions1)</l>
<l>area_center (ConnectedRegions1, Area1, Row1, Column1)</l>
<c></c>
<l>get_grayval (Zred, Row1, Column1, AlturaMaxima)</l>
<c></c>
<l>tuple_min (AlturaMaxima, Min)</l>
<l>ZObjective:=1800</l>
<l>Osffet_Z:=Min-ZObjective</l>
<c></c>
<l>create_pose (PosX, PosY, Osffet_Z, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose_Base_Sleeve)</l>
<c></c>
<l>dev_display (ImageReduced)</l>
<c>***********************************************</c>
<c>* Delimitar falsos Positivos </c>
<c>***********************************************</c>
<c></c>
<l>Send_Data_To_Robot (Pose_Base_Sleeve, SerialHandle)</l>
<c></c>
<l>Mensaje:='####################################'</l>
<l>Send_Data_Info (Mensaje, SerialHandle)    </l>
<l>Mensaje:='Base Pallet -&gt; '+PosX+' # '+ PosY+' # '+ Osffet_Z </l>
<l>Send_Data_Info (Mensaje, SerialHandle)</l>
<l>Mensaje:='####################################'</l>
<l>Send_Data_Info (Mensaje, SerialHandle)</l>
<c>************************************************</c>
<l>return ()</l>
</body>
<docu id="OLDCODE">
<parameters>
<parameter id="Objeto_1"/>
<parameter id="SerialHandle"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="get_CameraEstereoConection">
<interface>
<ic>
<par name="Conexion_Camara" base_type="ctrl" dimension="0"/>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ReintentosConecionEstereo" base_type="ctrl" dimension="0"/>
<par name="NxLibOut" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="Conexion_CamaraOut" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Conexion_CamaraOut := Conexion_Camara</l>
<l>NxLibOut := NxLib</l>
<l>ReintentosConecionEstereo :=1</l>
<l>while (not Conexion_CamaraOut and ReintentosConecionEstereo&lt;=3)</l>
<c>    </c>
<l>    close_framegrabber (NxLibOut)</l>
<c></c>
<l>    Conectar_Ensenso_N35 (24001, NxLibOut, Camera_1, Conexion_CamaraOut)</l>
<c></c>
<l>Send_Data_Info ('### Error Faltal #### Camara Estereo R1 NO Conectada ',SerialHandle)</l>
<l>Send_Data_Info ('### Error Faltal #### Reintento Numero -&gt;  '+ReintentosConecionEstereo,SerialHandle)</l>
<l>ReintentosConecionEstereo:=ReintentosConecionEstereo+1</l>
<c></c>
<l>endwhile</l>
<l>return ()</l>
</body>
<docu id="get_CameraEstereoConection">
<parameters>
<parameter id="Camera_1"/>
<parameter id="Conexion_Camara"/>
<parameter id="Conexion_CamaraOut"/>
<parameter id="NxLib"/>
<parameter id="NxLibOut"/>
<parameter id="ReintentosConecionEstereo"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Conectar_Ensenso_N35_COPY_2">
<interface>
<ic>
<par name="Puerto" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="Conexion_Camara" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>Conexion_Camara_1 := false</l>
<l>try</l>
<c></c>
<l>*     info_framegrabber ('Ensenso-NxLib', 'device', Information, ValueList)</l>
<l>*     info_framegrabber ('Ensenso-NxLib', 'info_boards', Information, Estado)</l>
<c></c>
<c>    * Inicializacion de Arbol y camara estereo</c>
<l>    open_framegrabber ('Ensenso-NxLib', 0, 0, 0, 0, 0, 0, 'default', 0, 'Raw', 'auto_grab_data=0', 'false', 'Item', '/', 0, 0, NxLib)</l>
<l>    open_framegrabber ('Ensenso-NxLib', 0, 0, 0, 0, 0, 0, 'default', 0, 'Raw', 'auto_grab_data=0', 'false', 'Stereo', '193216', 0, 0, Camera_1)</l>
<c></c>
<l>*     open_framegrabber ('Ensenso-NxLib', 0, 0, 0, 0, 0, 0, 'default', -1, 'default', -1, 'default', 'stereo', '193216', 0, 0, Camera_1)</l>
<c></c>
<c></c>
<c>    * Abro puerto TCP del Arbol</c>
<l>    set_framegrabber_param (NxLib, 'do_open_tcp_port', Puerto)</l>
<l>    Conexion_Camara := true</l>
<c></c>
<l>    return ()</l>
<l>catch (Exception)</l>
<l>    Conexion_Camara := false</l>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="Conectar_Ensenso_N35_COPY_2">
<parameters>
<parameter id="Camera_1"/>
<parameter id="Conexion_Camara"/>
<parameter id="NxLib"/>
<parameter id="Puerto"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_OpticaConection">
<interface>
<ic>
<par name="Conexion_Camara_0" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ReintentosConexionOptica" base_type="ctrl" dimension="0"/>
<par name="AcqHandle_Cam_0" base_type="ctrl" dimension="0"/>
<par name="Camera0_Parameters" base_type="ctrl" dimension="0"/>
<par name="Camera0_Pose" base_type="ctrl" dimension="0"/>
<par name="Conexion_Camara_0Out" base_type="ctrl" dimension="0"/>
<par name="CalTabFile" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Conexion_Camara_0Out := Conexion_Camara_0</l>
<l>ReintentosConexionOptica :=1</l>
<l>while (not Conexion_Camara_0Out and ReintentosConexionOptica&lt;=3)</l>
<c>    </c>
<c> </c>
<l>    Set_Config_Cam (AcqHandle_Cam_0, Camera0_Parameters, Camera0_Pose, Conexion_Camara_0Out, CalTabFile)</l>
<c></c>
<l>Send_Data_Info ('### Error Faltal #### Camara Optica R1 NO Conectada ',SerialHandle)</l>
<l>Send_Data_Info ('### Error Faltal #### Reintento Numero -&gt;  '+ReintentosConexionOptica,SerialHandle)</l>
<l>ReintentosConexionOptica:=ReintentosConexionOptica+1</l>
<c></c>
<l>endwhile</l>
<l>return ()</l>
</body>
<docu id="Get_OpticaConection">
<parameters>
<parameter id="AcqHandle_Cam_0"/>
<parameter id="CalTabFile"/>
<parameter id="Camera0_Parameters"/>
<parameter id="Camera0_Pose"/>
<parameter id="Conexion_Camara_0"/>
<parameter id="Conexion_Camara_0Out"/>
<parameter id="ReintentosConexionOptica"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="IsCamerasOnline">
<interface>
<ic>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="AcqHandle_Cam_0" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="CamerasConection_In" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="CamerasConection" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>CamerasConection:=CamerasConection_In</l>
<l>try</l>
<c>    </c>
<l>    get_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Status/Available', EstatusCamara)</l>
<c>    </c>
<l>    if (EstatusCamara='true')</l>
<l>        CamerasConection[0]:=0</l>
<l>        Tag:='_EV01_I_BitVida_CamEster'</l>
<l>        Send_EthernetIP_Data (Tag, 0, SerialHandle)</l>
<l>    else</l>
<l>        Tag:='_EV01_I_BitVida_CamEster' </l>
<l>        Send_EthernetIP_Data (Tag, 1, SerialHandle)</l>
<l>        CamerasConection[0]:=1</l>
<l>    endif</l>
<c>    </c>
<c>    </c>
<l>catch (Exception)</l>
<l>    CamerasConection[0]:=0</l>
<l>    Tag:='_EV01_I_BitVida_CamEster'</l>
<l>    Send_EthernetIP_Data (Tag, 0, SerialHandle)</l>
<l>endtry</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>try</l>
<l>    get_framegrabber_param (AcqHandle_Cam_0, 'DeviceTemperature', ConexionOptica)</l>
<l>    Tag:='_EV01_I_BitVida_CamOpt'</l>
<l>    Send_EthernetIP_Data (Tag, 1, SerialHandle)</l>
<l>    CamerasConection[1]:=1  </l>
<l>catch (Exception)</l>
<l>    CamerasConection[1]:=0    </l>
<l>    Tag:='_EV01_I_BitVida_CamOpt'</l>
<l>    Send_EthernetIP_Data (Tag, 0, SerialHandle)</l>
<c>    </c>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="IsCamerasOnline">
<parameters>
<parameter id="AcqHandle_Cam_0"/>
<parameter id="CamerasConection"/>
<parameter id="CamerasConection_In"/>
<parameter id="NxLib"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Pallet_Bd_Fast">
<interface>
<ic>
<par name="Variable_BD" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="DataBD" base_type="ctrl" dimension="0"/>
<par name="FXcheck" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<l>wait_seconds(0.005)</l>
<l>try</l>
<c>    * </c>
<l>    Peticion := 'BaseDatos'</l>
<l>    Data := Peticion+';'+Variable_BD</l>
<c>    * </c>
<l>    write_serial (SerialHandle, ords(Data))</l>
<c></c>
<l>wait_seconds (0.10)</l>
<l>    VarSerial:=0 </l>
<l>    Conteo:=0</l>
<l>    while(VarSerial&lt;1 and Conteo&lt;50)</l>
<c>       </c>
<c>        *Numero de caracteres a leer</c>
<l>        read_serial (SerialHandle, 150, Nchar)</l>
<l>        Nchar:= chrt(Nchar)</l>
<l>        tuple_number (Nchar, Variable)</l>
<l>        VarSerial:=|Nchar|</l>
<c>        </c>
<l>        tuple_split (Nchar, '#', Substrings)</l>
<l>        tuple_split (Substrings, '||', DataBD)</l>
<l>          Conteo:=  Conteo+1</l>
<l>     FXcheck:=true</l>
<l>    endwhile</l>
<c></c>
<l>    if (Conteo&gt;=10)</l>
<c>        </c>
<l>        FXcheck:=false</l>
<l>    else</l>
<l>        FXcheck:=true</l>
<l>    endif</l>
<c></c>
<l>catch (Exception)</l>
<c>    </c>
<l>endtry</l>
<c>* </c>
<c>* </c>
<c>* </c>
<c>* </c>
<l>return ()</l>
</body>
<docu id="Get_Pallet_Bd_Fast">
<parameters>
<parameter id="DataBD"/>
<parameter id="FXcheck"/>
<parameter id="SerialHandle"/>
<parameter id="Variable_BD"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Core_ToUse_From_BDD_Fast">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Cod_Core_ToUse" base_type="ctrl" dimension="0"/>
<par name="Pallet_To_Scan" base_type="ctrl" dimension="0"/>
<par name="Segmento_To_Scan" base_type="ctrl" dimension="0"/>
<par name="PitutoExist" base_type="ctrl" dimension="0"/>
<par name="FXcheck" base_type="ctrl" dimension="0"/>
<par name="Diametro" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>FXcheck:=false</l>
<l>for Index := 1 to 5 by 1</l>
<c>    </c>
<c></c>
<l>try</l>
<l>    Variable_BD := 'ram_actualproduction'</l>
<l>        Get_Pallet_Bd_Fast (Variable_BD, SerialHandle, DataBD, FXcheck)</l>
<c>    * </c>
<l>    Cod_Core_ToUse := DataBD[3]</l>
<l>    Cod_Core_ToUseAux := DataBD[3]</l>
<l>    Pallet_To_Scan := DataBD[15]</l>
<l>    Segmento_To_Scan := DataBD[16]</l>
<l>    PitutoExist:=DataBD[5]</l>
<l>    Diametro:=DataBD[12]</l>
<c>    </c>
<l>    tuple_number (Diametro, Diametro)</l>
<c></c>
<l>    FXcheck:=true</l>
<c>  </c>
<l>    return ()</l>
<l>catch (Exception)</l>
<c>    </c>
<l>   * Mensaje:='### ERROR ### -&gt; Entidad Requerida -&gt; '+Cod_Core_ToUse+' &lt;- RAM base DATOS no CARGADA.'</l>
<l>  *  Send_Data_Info (Mensaje, SerialHandle)</l>
<l>    Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<l>    FXcheck:=false</l>
<l>endtry</l>
<l>endfor</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Core_ToUse_From_BDD_Fast">
<parameters>
<parameter id="Cod_Core_ToUse"/>
<parameter id="Diametro"/>
<parameter id="FXcheck"/>
<parameter id="Pallet_To_Scan"/>
<parameter id="PitutoExist"/>
<parameter id="Segmento_To_Scan"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="NotZeroModel_3D_Sleeve">
<interface>
<ic>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
<par name="g_AltutaVirtualCamEstereo" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Escena3D_RAWOut" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Escena3D_RAWOut := Escena3D_RAW</l>
<l>get_object_model_3d_params (Escena3D_RAWOut, 'bounding_box1', GenParamValue)</l>
<c></c>
<l>x_min := GenParamValue[0]</l>
<l>y_min := GenParamValue[1]</l>
<l>z_min := GenParamValue[2]</l>
<l>x_max := GenParamValue[3]</l>
<l>y_max := GenParamValue[4]</l>
<l>z_max := GenParamValue[5]</l>
<c></c>
<l>select_points_object_model_3d (Escena3D_RAWOut, 'point_coord_z', 500+g_AltutaVirtualCamEstereo, 2900+g_AltutaVirtualCamEstereo, Escena3D_RAWOut)</l>
<l>return ()</l>
</body>
<docu id="NotZeroModel_3D_Sleeve">
<parameters>
<parameter id="Escena3D_RAW"/>
<parameter id="Escena3D_RAWOut"/>
<parameter id="g_AltutaVirtualCamEstereo"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Robot_Pose_COPY_1">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ToolInBasePose" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>try</l>
<c></c>
<l>    Escalamiento := 1</l>
<l>    Tag_Lectura := '_EV01_O_EjeX'</l>
<l>    Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>    tuple_real (RV_CmdFotogen, Number)</l>
<l>    Number := (Number)/10000.0 - 4000.0</l>
<l>*     dev_inspect_ctrl (Number)</l>
<l>    posx := Number</l>
<c></c>
<l>    Tag_Lectura := '_EV01_O_EjeY'</l>
<l>    Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>    tuple_real (RV_CmdFotogen, Number)</l>
<l>    Number := (Number)/10000.0 - 4000.0</l>
<l>    posy := Number</l>
<c></c>
<l>    Tag_Lectura := '_EV01_O_EjeZ'</l>
<l>    Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>    tuple_real (RV_CmdFotogen, Number)</l>
<l>    Number := (Number)/10000.0 - 4000.0</l>
<l>    posz := Number</l>
<c></c>
<l>    Tag_Lectura := '_EV01_O_EjeC'</l>
<l>    Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>    tuple_real (RV_CmdFotogen, Number)</l>
<l>    Number := (Number)/10000.0 - 4000.0</l>
<l>    Roll := Number</l>
<c></c>
<l>    Tag_Lectura := '_EV01_O_EjeB'</l>
<l>    Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<c></c>
<l>    tuple_real (RV_CmdFotogen, Number)</l>
<l>    Number := (Number)/10000.0 - 4000</l>
<l>    Pitch := Number</l>
<c></c>
<l>    Tag_Lectura := '_EV01_O_EjeA'</l>
<l>    Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>    tuple_real (RV_CmdFotogen, Number)</l>
<c></c>
<l>    Number := (Number)/10000 - 4000</l>
<l>    Yaw := Number</l>
<c></c>
<c>    * Read pose of tool in robot base coordinates (ToolInBasePose)</c>
<l>    create_pose (posx, posy, posz, Roll, Pitch, Yaw, 'Rp+T', 'abg', 'point', ToolInBasePose)</l>
<c></c>
<l>*     dev_inspect_ctrl (ToolInBasePose)</l>
<l>    return ()</l>
<c></c>
<l>catch (Exception)</l>
<c></c>
<c></c>
<l>endtry</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
</body>
<docu id="Get_Robot_Pose_COPY_1">
<parameters>
<parameter id="SerialHandle"/>
<parameter id="ToolInBasePose"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Tipo_EntidadBDD">
<interface>
<ic>
<par name="Cod_Core_ToUse" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Entidad" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>    tuple_strrstr (Cod_Core_ToUse, 'PIN', Entidad2)</l>
<l>    tuple_strrstr (Cod_Core_ToUse, 'SPRUE', Entidad3)</l>
<l>    tuple_strrstr (Cod_Core_ToUse, 'LOC', Entidad4)</l>
<c></c>
<l>     tuple_strrstr (Cod_Core_ToUse, 'NUM', NUMERO)</l>
<l>     tuple_strrstr (Cod_Core_ToUse, 'DOWEL', DOWEL)</l>
<l>     tuple_strrstr (Cod_Core_ToUse, 'LID', LID)</l>
<c></c>
<c></c>
<l>    if ( Entidad2=-1 and Entidad3=-1 and Entidad4=-1  and NUMERO=-1 and  DOWEL=-1 and LID=-1)</l>
<l>         Entidad:=true</l>
<l>    else</l>
<l>         Entidad:=false</l>
<c>        </c>
<l>    endif</l>
<c>    </c>
<l> return ()</l>
</body>
<docu id="Get_Tipo_EntidadBDD">
<parameters>
<parameter id="Cod_Core_ToUse"/>
<parameter id="Entidad"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Pallet_Bd_Fast_COPY_1">
<interface>
<ic>
<par name="Variable_BD" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="DataBD" base_type="ctrl" dimension="0"/>
<par name="FXcheck" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<l>wait_seconds (0.005)</l>
<l>try</l>
<c></c>
<l>    Peticion := 'BaseDatos'</l>
<l>    Data := Peticion+';'+Variable_BD</l>
<c></c>
<l>    write_serial (SerialHandle, ords(Data))</l>
<c></c>
<l>    wait_seconds (0.10)</l>
<l>    VarSerial := 0</l>
<l>    Conteo := 0</l>
<l>    while (VarSerial&lt;1 and Conteo&lt;50)</l>
<c></c>
<c>        * Numero de caracteres a leer</c>
<l>        read_serial (SerialHandle, 150, Nchar)</l>
<l>        Nchar := chrt(Nchar)</l>
<l>        tuple_number (Nchar, Variable)</l>
<l>        VarSerial := |Nchar|</l>
<c></c>
<l>        tuple_split (Nchar, '#', Substrings)</l>
<l>        tuple_split (Substrings, '||', DataBD)</l>
<l>        Conteo := Conteo+1</l>
<l>        FXcheck := true</l>
<l>    endwhile</l>
<c></c>
<l>    if (Conteo&gt;=10)</l>
<c></c>
<l>        FXcheck := false</l>
<l>    else</l>
<l>        FXcheck := true</l>
<l>    endif</l>
<c></c>
<l>catch (Exception)</l>
<c></c>
<l>endtry</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Pallet_Bd_Fast_COPY_1">
<parameters>
<parameter id="DataBD"/>
<parameter id="FXcheck"/>
<parameter id="SerialHandle"/>
<parameter id="Variable_BD"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Core_ToUse_From_BDD_Fast_COPY_1">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Cod_Core_ToUse" base_type="ctrl" dimension="0"/>
<par name="Pallet_To_Scan" base_type="ctrl" dimension="0"/>
<par name="Segmento_To_Scan" base_type="ctrl" dimension="0"/>
<par name="PitutoExist" base_type="ctrl" dimension="0"/>
<par name="FXcheck" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>FXcheck := false</l>
<l>for Index := 1 to 5 by 1</l>
<c></c>
<c></c>
<l>    try</l>
<l>        Variable_BD := 'ram_actualproduction'</l>
<l>        Get_Pallet_Bd_Fast_COPY_1 (Variable_BD, SerialHandle, DataBD, FXcheck)</l>
<c></c>
<l>        Cod_Core_ToUse := DataBD[3]</l>
<l>        Cod_Core_ToUseAux := DataBD[3]</l>
<l>        Pallet_To_Scan := DataBD[15]</l>
<l>        Segmento_To_Scan := DataBD[16]</l>
<l>        PitutoExist := DataBD[5]</l>
<c></c>
<c></c>
<l>        FXcheck := true</l>
<c></c>
<l>        return ()</l>
<l>    catch (Exception)</l>
<c></c>
<l>*         Mensaje := '### ERROR ### -&gt; Entidad Requerida -&gt; '+Cod_Core_ToUse+' &lt;- RAM base DATOS no CARGADA.'</l>
<l>*         Send_Data_Info (Mensaje, SerialHandle)</l>
<l>        Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<l>        FXcheck := false</l>
<l>    endtry</l>
<l>endfor</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Core_ToUse_From_BDD_Fast_COPY_1">
<parameters>
<parameter id="Cod_Core_ToUse"/>
<parameter id="FXcheck"/>
<parameter id="Pallet_To_Scan"/>
<parameter id="PitutoExist"/>
<parameter id="Segmento_To_Scan"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Pallet_BD_COPY_2">
<interface>
<ic>
<par name="Variable_BD" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="DataBD" base_type="ctrl" dimension="0"/>
<par name="FXcheck" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<l>wait_seconds (0.005)</l>
<l>try</l>
<c></c>
<l>    Peticion := 'BaseDatos'</l>
<l>    Data := Peticion+';'+Variable_BD</l>
<c></c>
<l>    write_serial (SerialHandle, ords(Data))</l>
<c></c>
<l>    wait_seconds (0.10)</l>
<l>    VarSerial := 0</l>
<l>    Conteo := 0</l>
<l>    while (VarSerial&lt;1 and Conteo&lt;50)</l>
<c></c>
<c>        * Numero de caracteres a leer</c>
<l>        read_serial (SerialHandle, 500, Nchar)</l>
<l>        Nchar := chrt(Nchar)</l>
<l>        tuple_number (Nchar, Variable)</l>
<l>        VarSerial := |Nchar|</l>
<c></c>
<l>        tuple_split (Nchar, '#', Substrings)</l>
<l>        tuple_split (Substrings, '||', DataBD)</l>
<l>        Conteo := Conteo+1</l>
<l>        FXcheck := true</l>
<l>    endwhile</l>
<c></c>
<l>    if (Conteo&gt;=10)</l>
<c></c>
<l>        FXcheck := false</l>
<l>    else</l>
<l>        FXcheck := true</l>
<l>    endif</l>
<c></c>
<l>catch (Exception)</l>
<c></c>
<l>endtry</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Pallet_BD_COPY_2">
<parameters>
<parameter id="DataBD"/>
<parameter id="FXcheck"/>
<parameter id="SerialHandle"/>
<parameter id="Variable_BD"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Core_ToUse_From_BDD_Fast_COPY_2">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Cod_Core_ToUse" base_type="ctrl" dimension="0"/>
<par name="Pallet_To_Scan" base_type="ctrl" dimension="0"/>
<par name="Segmento_To_Scan" base_type="ctrl" dimension="0"/>
<par name="PitutoExist" base_type="ctrl" dimension="0"/>
<par name="FXcheck" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>FXcheck := false</l>
<l>for Index := 1 to 5 by 1</l>
<c></c>
<c></c>
<l>    try</l>
<l>        Variable_BD := 'ram_actualproduction'</l>
<l>        Get_Pallet_Bd_Fast_COPY_1 (Variable_BD, SerialHandle, DataBD, FXcheck)</l>
<c></c>
<l>        Cod_Core_ToUse := DataBD[3]</l>
<l>        Cod_Core_ToUseAux := DataBD[3]</l>
<l>        Pallet_To_Scan := DataBD[15]</l>
<l>        Segmento_To_Scan := DataBD[16]</l>
<l>        PitutoExist := DataBD[5]</l>
<c></c>
<c></c>
<l>        FXcheck := true</l>
<c></c>
<l>        return ()</l>
<l>    catch (Exception)</l>
<c></c>
<l>*         Mensaje := '### ERROR ### -&gt; Entidad Requerida -&gt; '+Cod_Core_ToUse+' &lt;- RAM base DATOS no CARGADA.'</l>
<l>*         Send_Data_Info (Mensaje, SerialHandle)</l>
<l>        Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<l>        FXcheck := false</l>
<l>    endtry</l>
<l>endfor</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Core_ToUse_From_BDD_Fast_COPY_2">
<parameters>
<parameter id="Cod_Core_ToUse"/>
<parameter id="FXcheck"/>
<parameter id="Pallet_To_Scan"/>
<parameter id="PitutoExist"/>
<parameter id="Segmento_To_Scan"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Adq_Imagen_COPY_1">
<interface>
<oo>
<par name="ModelImage" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>set_framegrabber_param (NxLib, 'do_execute', 'Capture')</l>
<l>set_framegrabber_param (NxLib, 'do_execute', 'ComputeDisparityMap')</l>
<l>set_framegrabber_param (NxLib, 'do_execute', 'ComputePointMap')</l>
<c></c>
<l>* set_framegrabber_param (Camera, 'grab_data_items', ['Images/Rectified/Left','Images/Rectified/Right','Images/PointMap'])</l>
<c></c>
<l>grab_data (ModelImage, Regions, Contours, Camera, Data)</l>
<l>return ()</l>
</body>
<docu id="Adq_Imagen_COPY_1">
<parameters>
<parameter id="Camera"/>
<parameter id="ModelImage"/>
<parameter id="NxLib"/>
</parameters>
</docu>
</procedure>
<procedure name="Take_Core_In_Pallet_COPY_1">
<interface>
<io>
<par name="Z" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
<par name="N_Pallet_to_Scan" base_type="ctrl" dimension="0"/>
<par name="Path_SFM_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_3D_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_Tofind" base_type="ctrl" dimension="0"/>
<par name="Path_CORE_ID" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="Visualizar3D" base_type="ctrl" dimension="0"/>
<par name="SegmentoPallet" base_type="ctrl" dimension="0"/>
<par name="Pose_Esquina" base_type="ctrl" dimension="0"/>
<par name="PitutoExist" base_type="ctrl" dimension="0"/>
<par name="ObjectModel3D_Core_Pallet" base_type="ctrl" dimension="0"/>
<par name="SFM_Core_Pallet" base_type="ctrl" dimension="0"/>
<par name="Modelo3D_Select" base_type="ctrl" dimension="0"/>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Estado_SubProceso" base_type="ctrl" dimension="0"/>
<par name="RepetirFoto" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Parametros_Visualizacion := ['colored','disp_pose','point_size']</l>
<l>Valores_Visualizacion := [  12  ,'true',1]</l>
<c></c>
<c></c>
<c>* *****************************************</c>
<c>* 1.- Obtengo el ROI3D del PALLET</c>
<c>* *****************************************</c>
<l>Vector_Segmento := ['A','B','C','D','E','F','G','H','I']</l>
<c></c>
<c></c>
<l>try</l>
<l>    Get_ROI3D_Pallet (ROI3D_NullFrame, ROI3D_rotate)</l>
<l>catch (Exception)</l>
<c></c>
<l>    Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<l>*     throw (MensajeError)</l>
<c></c>
<l>* # ### Envio data de estado ########################</l>
<c></c>
<l>    Estado := 5</l>
<l>    Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<c></c>
<l>* # ################################################# </l>
<c></c>
<l>    return ()</l>
<l>endtry</l>
<c></c>
<l>* # #### ROTO EL ROI 3D ######</l>
<c></c>
<l>try</l>
<l>* # ####################################################################################</l>
<c>    * Funcion que Lee la pose guardada en el Bloque 0, y que referencia la orientacion de la camara</c>
<l>* # ####################################################################################</l>
<l>    Get_Rotate_ROI3D (Pose_Esquina, ROI3D_rotate, Pose_Segmentos, ROI3D_rotate)</l>
<l>*     Visualizar_3D ([Escena3D_RAW], Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, [], [], ['Modelo'], WindowHandle, PoseOut1)</l>
<c></c>
<l>catch (Exception)</l>
<c></c>
<l>    Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<l>    return ()</l>
<l>endtry</l>
<c></c>
<l>* # ###################################################################</l>
<l>* # ###################################################################</l>
<l>* # ################ BUSQUEDA DE CORES EN EL PALLET ###################</l>
<l>* # ###################################################################</l>
<l>* # ###################################################################</l>
<c>* 3.- Encuentro el orden y los segementos en que estan distribuidos los cores en el applet</c>
<c></c>
<l>Vector_Entidades_Segmento := Vector_ID_Core_by_Segment_Pallet_Tofind+';'+SegmentoPallet</l>
<c></c>
<l>try</l>
<c></c>
<c>    * ********************************************************</c>
<c>    * ROI 3D sectorizado de cada elemento</c>
<c>    * Busco de manera sectorizada cara core en el pallet</c>
<c>    * ********************************************************</c>
<c>    * Estructura de vector</c>
<l>* # ###########################</l>
<l>* # ## CORE ## Existencia #####</l>
<l>* # ###########################</l>
<c></c>
<c>    * *****************************************************************************</c>
<c>    * ******* Proceso el entorno 3D para eliminar ruido  **************************</c>
<c>    * *****************************************************************************</c>
<l>    Sub_Process_ImageCore (Z, X, Y, SerialHandle, Estado_Funcion, Escena3D_RAW, Estado_FuncionSub)</l>
<l>    if (Estado_FuncionSub)</l>
<c></c>
<c></c>
<c></c>
<c>        * *********************************</c>
<c>        * REVISAR ORIENTACION</c>
<c>        * ************************</c>
<l>        if (PitutoExist ='Yes')</l>
<l>            Pituto := true</l>
<l>        endif</l>
<l>        Pituto := true</l>
<c></c>
<l>*         Visualizar_3D ([Escena3D_RAW], Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, [], [], ['Modelo'], WindowHandle, PoseOut1)</l>
<c></c>
<c></c>
<c>        * **********************************************</c>
<c></c>
<l>*         smooth_object_model_3d (Escena3D_RAW, 'mls', 'mls_kNN', 50, Escena3D_RAW)</l>
<l>*         Visualizar_3D ([Escena3D_RAW], Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, [], [], ['Modelo'], WindowHandle, PoseOut1)</l>
<c></c>
<c></c>
<l>        Sampling := 0.02</l>
<l>        Send_Data_Info ('### -&gt; Iniciando Busqueda de Entidad ###', SerialHandle)</l>
<l>        Find_Sector_Core_Bloque3 (Z, Vector_ID_Core_by_Segment_Pallet_Tofind, Vector_Entidades_Segmento, Path_CORE_ID, Path_3D_Segmentos, Path_SFM_Segmentos, ROI3D_rotate, Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, Vector_Segmento, Escena3D_RAW, Sampling, SerialHandle, Vector_Estado_Fx, Pituto, ObjectModel3D_Core_Pallet, SFM_Core_Pallet, Modelo3D_Select, WindowHandle, Vector_Existencia_Core_New, Estado_Fx, RepetirFoto, MyPose)</l>
<c></c>
<c>        * ****************************</c>
<l>*         return ()</l>
<c>        * ***************************</c>
<c></c>
<c></c>
<c></c>
<l>        if (RepetirFoto)</l>
<l>            clear_object_model_3d ([ROI3D_rotate,ROI3D_NullFrame,Escena3D_RAW])</l>
<l>            return ()</l>
<l>        endif</l>
<l>* # ### Envio data de estado ########################</l>
<l>        if (Estado_Fx)</l>
<l>            Estado := 13</l>
<l>            Procesando := 0</l>
<l>            Resultado := 1</l>
<l>            Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>            Send_Data_Info ('BLOQUE 3 FINALIZADO', SerialHandle)</l>
<c></c>
<c>            * ***************************************</c>
<c>            * Descuento 1 el stock ingresado en BD</c>
<l>            Set_MinusCores_COPY_1 (SerialHandle, FXcheck)</l>
<c>            * ***************************************</c>
<c></c>
<l>        else</l>
<l>            Procesando := 0</l>
<l>            Resultado := 2</l>
<l>            Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>            Send_Data_Info ('BLOQUE 3 FINALIZADO con ### ERRORES ####', SerialHandle)</l>
<l>        endif</l>
<l>    else</l>
<l>        Procesando := 0</l>
<l>        Resultado := 2</l>
<l>*         Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>        Send_Data_Info ('BLOQUE 3 FINALIZADO con ### ERRORES ####', SerialHandle)</l>
<l>    endif</l>
<c>    * Borrar 3D</c>
<l>    clear_object_model_3d ([ROI3D_rotate,ROI3D_NullFrame,Escena3D_RAW])</l>
<c></c>
<l>* # ################################################# </l>
<c></c>
<l>catch (Exception)</l>
<l>    Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<c></c>
<l>    return ()</l>
<l>endtry</l>
<c></c>
<c>* ****************************************</c>
<c></c>
<l>return ()</l>
</body>
<docu id="Take_Core_In_Pallet_COPY_1">
<parameters>
<parameter id="Escena3D_RAW"/>
<parameter id="Estado_SubProceso"/>
<parameter id="Modelo3D_Select"/>
<parameter id="N_Pallet_to_Scan"/>
<parameter id="ObjectModel3D_Core_Pallet"/>
<parameter id="Path_3D_Segmentos"/>
<parameter id="Path_CORE_ID"/>
<parameter id="Path_SFM_Segmentos"/>
<parameter id="PitutoExist"/>
<parameter id="Pose_Esquina"/>
<parameter id="RepetirFoto"/>
<parameter id="SFM_Core_Pallet"/>
<parameter id="SegmentoPallet"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_Tofind"/>
<parameter id="Visualizar3D"/>
<parameter id="WindowHandle"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Config_Parametros_Cam_R1_COPY_1">
<interface>
<ic>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera" base_type="ctrl" dimension="0"/>
<par name="NumberOfDisparities" base_type="ctrl" dimension="0"/>
<par name="MinimumDisparity" base_type="ctrl" dimension="0"/>
<par name="Projector" base_type="ctrl" dimension="0"/>
<par name="FrontLigth" base_type="ctrl" dimension="0"/>
<par name="AutoExposure" base_type="ctrl" dimension="0"/>
<par name="AutoGain" base_type="ctrl" dimension="0"/>
<par name="Gain" base_type="ctrl" dimension="0"/>
<par name="Exposure" base_type="ctrl" dimension="0"/>
<par name="FlexView" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="TempCam" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c>* Configuracion de parametros.</c>
<l>set_framegrabber_param (Camera, 'grab_data_items', ['Images/Rectified/Left', 'Images/Raw/Left', 'Images/PointMap'])</l>
<c></c>
<c></c>
<c>* Parametros para habilitar funciones directas de la camara</c>
<l>set_framegrabber_param (NxLib, 'Execute/Parameters/InitialTrigger', 'All')</l>
<c>* Proyector random de texturas</c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/Projector', Projector)</l>
<c>* Iluminacion</c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/FrontLight', FrontLigth)</l>
<c></c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/AutoExposure', AutoExposure)</l>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/AutoGain', AutoGain)</l>
<c></c>
<c></c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/Exposure', Exposure)</l>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/Gain', Gain)</l>
<c></c>
<c>* ******************************************************************************************************</c>
<c></c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/DisparityMap/StereoMatching/NumberOfDisparities', NumberOfDisparities)</l>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/DisparityMap/StereoMatching/MinimumDisparity', MinimumDisparity)</l>
<c>* N° de imagenes de captura</c>
<l>set_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Parameters/Capture/FlexView', FlexView)</l>
<c>* Temperatura de camara</c>
<l>get_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Sensor/Temperature', TempCam)</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Config_Parametros_Cam_R1_COPY_1">
<parameters>
<parameter id="AutoExposure"/>
<parameter id="AutoGain"/>
<parameter id="Camera"/>
<parameter id="Exposure"/>
<parameter id="FlexView"/>
<parameter id="FrontLigth"/>
<parameter id="Gain"/>
<parameter id="MinimumDisparity"/>
<parameter id="NumberOfDisparities"/>
<parameter id="NxLib"/>
<parameter id="Projector"/>
<parameter id="TempCam"/>
</parameters>
</docu>
</procedure>
<procedure name="Find_Dinamic_Entity_3D_COPY_1">
<interface>
<ic>
<par name="N_matches" base_type="ctrl" dimension="0"/>
<par name="SFM" base_type="ctrl" dimension="0"/>
<par name="Modelo_imagen_3d" base_type="ctrl" dimension="0"/>
<par name="Sampling_Find" base_type="ctrl" dimension="0"/>
<par name="Keypoint" base_type="ctrl" dimension="0"/>
<par name="MinScore" base_type="ctrl" dimension="0"/>
<par name="Perno_Ref_Cam0" base_type="ctrl" dimension="0"/>
<par name="Modelo_3D_ROI_ThresEdges" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="PoseMLS" base_type="ctrl" dimension="0"/>
<par name="ScoreMLS" base_type="ctrl" dimension="0"/>
<par name="Estado_Funcion" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>Estado_Funcion := true</l>
<l>try</l>
<c>    * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = "Buscando Objeto";</c>
<c></c>
<c>    * ***************************************</c>
<c>    * 1.Parametros de control</c>
<c>    * ***************************************</c>
<l>    GenParamName := ['num_matches','scene_normal_computation','pose_ref_scoring_dist_rel','score_type'          ,'3d_edges'              , '3d_edge_min_amplitude_abs','max_gap','viewpoint']</l>
<l>    GenParamValue := [N_matches   ,          'mls'           ,   0.01                    ,'model_point_fraction', Modelo_3D_ROI_ThresEdges, 13.7313                   ,  30     , '0 0 0']</l>
<l>    GenParamName := ['num_matches','scene_normal_computation','score_type'          ,'3d_edges'              , '3d_edge_min_amplitude_abs','max_gap','viewpoint']</l>
<l>    GenParamValue := [N_matches   ,          'mls'        ,'model_point_fraction', Modelo_3D_ROI_ThresEdges, 13.7313                   ,  30     , '0 0 0']</l>
<c></c>
<c></c>
<c>    * ***************************************</c>
<c>    * 2.Busqueda de entidad</c>
<c>    * ***************************************</c>
<l>    find_surface_model (SFM, Modelo_imagen_3d, Sampling_Find, Keypoint, MinScore, 'true', GenParamName, GenParamValue, PoseMLS, ScoreMLS, SurfaceMatchingResultID1)</l>
<c>    * ***************************************</c>
<l>    if (|PoseMLS|)</l>
<c>        * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = "Objeto encontrado con una PROBABILIDAD de " + hv_ScoreMLS*100.ToString() ;</c>
<l>        Estado_Funcion := true</l>
<l>        return ()</l>
<c></c>
<l>    endif</l>
<c></c>
<l>    Estado_Funcion := false</l>
<l>catch (Exception)</l>
<c></c>
<l>    Estado_Funcion := false</l>
<c>    * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = Fx_Aux.ErrorCatch(HDevExpDefaultException1);</c>
<c></c>
<l>endtry</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Find_Dinamic_Entity_3D_COPY_1">
<parameters>
<parameter id="Estado_Funcion"/>
<parameter id="Keypoint"/>
<parameter id="MinScore"/>
<parameter id="Modelo_3D_ROI_ThresEdges"/>
<parameter id="Modelo_imagen_3d"/>
<parameter id="N_matches"/>
<parameter id="Perno_Ref_Cam0"/>
<parameter id="PoseMLS"/>
<parameter id="SFM"/>
<parameter id="Sampling_Find"/>
<parameter id="ScoreMLS"/>
</parameters>
</docu>
</procedure>
<procedure name="Set_Core_Minus_COPY_1">
<interface>
<ic>
<par name="Cod_Core_ToUse" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="DataBdFull" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>Peticion := 'BaseDatos'</l>
<l>Data := Peticion+';ActBdGlobal;'+Cod_Core_ToUse</l>
<c></c>
<l>write_serial (SerialHandle, ords(Data))</l>
<c></c>
<c></c>
<c>* Numero de caracteres a leer</c>
<c></c>
<l>VarSerial := 0</l>
<l>Conteo := 0</l>
<l>while (VarSerial&lt;1 and Conteo&lt;50)</l>
<c></c>
<c>    * Numero de caracteres a leer</c>
<l>    read_serial (SerialHandle, 120, Nchar)</l>
<l>    Nchar := chrt(Nchar)</l>
<l>    tuple_number (Nchar, Variable)</l>
<l>    VarSerial := |Nchar|</l>
<c></c>
<l>    tuple_split (Nchar, '#', DataBdFull)</l>
<c></c>
<l>    Conteo := Conteo+1</l>
<l>    FXcheck := true</l>
<l>endwhile</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Set_Core_Minus_COPY_1">
<parameters>
<parameter id="Cod_Core_ToUse"/>
<parameter id="DataBdFull"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Segmentar_Sleeve_COPY_3">
<interface>
<io>
<par name="HeightMap" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
<par name="Z" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Entidad" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="DitsiObjMax" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Estado_Funcion" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Estado_Funcion := false</l>
<c></c>
<l>try</l>
<c></c>
<c>    * ********************************************************</c>
<c>    * 1.-  !!!!!!!!! threshols dinamico!!!!!!!!!!!!!!!!!!!!!!!!!!</c>
<c>    * ********************************************************</c>
<c></c>
<l>    UmbralMaxThr := DitsiObjMax</l>
<l>    threshold (HeightMap, Region, 900, UmbralMaxThr)</l>
<l>    escala := 255.0/UmbralMaxThr</l>
<l>    scale_image (HeightMap, HeightMap_Scalada, escala, 0)</l>
<l>    threshold (HeightMap_Scalada, HeightMap_Region, 0, 255)</l>
<l>    gray_histo_range (HeightMap_Region, HeightMap_Scalada, 0, 255, 256, Histo, BinSize)</l>
<l>    tuple_sum (Histo, Sum_Histo)</l>
<c></c>
<l>* # #########################################################</l>
<l>* # ### Mientras mas grabnde menos sensible a cambios #######   </l>
<l>    Mascara := 1</l>
<l>* # ########################################################</l>
<c></c>
<l>    Vector_Distribucion := []</l>
<l>    init_vector := 255</l>
<l>    flag_vector := 0</l>
<l>    aux_suma := 0.0</l>
<c></c>
<l>    for Index := init_vector to 0 by -1</l>
<c></c>
<l>        Vector_Distribucion[Index] := aux_suma+Histo[Index]*100.0/ Sum_Histo</l>
<l>        aux_suma := Vector_Distribucion[Index]</l>
<l>    endfor</l>
<c></c>
<l>    Derivada := []</l>
<l>    Factor_Der := 10000</l>
<l>    Mascara := 1</l>
<l>    for Index := init_vector to 50 by -Mascara</l>
<c></c>
<l>        Derivada[Index] := abs(Vector_Distribucion[Index]-Vector_Distribucion[Index-Mascara])*Factor_Der</l>
<c></c>
<l>    endfor</l>
<c></c>
<c></c>
<c>    * *********************************************************</c>
<c>    * * Busco el primer cambio brusco de posicion *************</c>
<c>    * * El umbral de cambio es Aux_Val_Max ********************</c>
<c>    * *********************************************************</c>
<l>    create_funct_1d_array (Derivada, Function)</l>
<c></c>
<l>*     dev_inspect_ctrl (Function)</l>
<c>    * ***********************************************************************************************</c>
<l>    Aux_Val_Max := 4000</l>
<c>    * ****************************************************************************************************</c>
<c></c>
<l>    Flag_indx_max := 255</l>
<l>    for Index := 50 to 255 by Mascara</l>
<c></c>
<l>        if (Derivada[Index]&gt;Aux_Val_Max)</l>
<l>            Aux_Val_Max := Derivada[Index]</l>
<l>            Flag_indx_max := Index</l>
<l>            break</l>
<l>        endif</l>
<c></c>
<l>    endfor</l>
<c></c>
<l>* # #########################################################</l>
<l>* # ######## Grado de proteccion para moverse entre el </l>
<l>* # ####### histograma</l>
<l>    index_protection := 8</l>
<l>* # #########################################################</l>
<c></c>
<l>    Alt_Min := 50</l>
<l>    Alt_Max := Flag_indx_max+index_protection</l>
<l>    threshold (HeightMap_Scalada, Entidad, Alt_Min, Alt_Max)</l>
<c></c>
<l>    Estado_Funcion := true</l>
<l>catch (Exception)</l>
<l>    Estado_Funcion := false</l>
<c>    * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = Fx_Aux.ErrorCatch(HDevExpDefaultException1);</c>
<c></c>
<l>endtry</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Segmentar_Sleeve_COPY_3">
<parameters>
<parameter id="DitsiObjMax"/>
<parameter id="Entidad"/>
<parameter id="Estado_Funcion"/>
<parameter id="HeightMap"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Set_MinusCores_COPY_1">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="FXcheck" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>FXcheck := false</l>
<l>try</l>
<l>    Variable_BD := 'ram_actualproduction'</l>
<l>    Get_Pallet_BD_COPY_2 (Variable_BD, SerialHandle, DataBD, FXcheck1)</l>
<c></c>
<l>    Cod_Core_ToUse := DataBD[3]</l>
<l>    Cod_Core_ToUseAux := DataBD[3]</l>
<l>    Pallet_To_Scan := DataBD[15]</l>
<l>    Segmento_To_Scan := DataBD[16]</l>
<c></c>
<l>    wait_seconds (0.1)</l>
<c></c>
<l>    Set_Core_Minus_COPY_1 (Cod_Core_ToUse, SerialHandle, DataBdFull)</l>
<l>    Cod_Core_ToUse := DataBdFull[0]</l>
<l>    Pallet_To_Scan := DataBdFull[1]</l>
<l>    Segmento_To_Scan := DataBdFull[2]</l>
<l>    CantidadCore := DataBdFull[3]</l>
<c></c>
<l>*     Tag := '_EV01_I_CoreSinStock'</l>
<l>*     Send_EthernetIP_Data (Tag, Cod_Core_ToUse, SerialHandle)</l>
<c></c>
<l>    if (Cod_Core_ToUse='-1' or Cod_Core_ToUse='-1' and Pallet_To_Scan='-1' and Segmento_To_Scan='-1')</l>
<l>        FXcheck := false</l>
<l>        Mensaje := '### ERROR ### -&gt; Entidad Requerida -&gt; '+Cod_Core_ToUseAux+'con 0 &lt;- RAM base DATOS no CARGADA.'</l>
<l>        Send_Data_Info (Mensaje, SerialHandle)</l>
<l>    endif</l>
<l>    FXcheck := true</l>
<c></c>
<c></c>
<l>catch (Exception)</l>
<c></c>
<l>    Mensaje := '### ERROR ### -&gt; Entidad Requerida -&gt; '+Cod_Core_ToUse+' &lt;- RAM base DATOS no CARGADA.'</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<l>    Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<l>    FXcheck := false</l>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="Set_MinusCores_COPY_1">
<parameters>
<parameter id="FXcheck"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Segmentar_Core_COPY_2">
<interface>
<io>
<par name="HeightMap" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
<par name="Z" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Entidad" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="DitsiObjMax" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Estado_Funcion" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Estado_Funcion := false</l>
<c></c>
<l>try</l>
<c></c>
<c>    * ********************************************************</c>
<c>    * 1.-  !!!!!!!!! threshols dinamico!!!!!!!!!!!!!!!!!!!!!!!!!!</c>
<c>    * ********************************************************</c>
<c></c>
<l>    UmbralMaxThr := DitsiObjMax</l>
<l>    threshold (HeightMap, Region, 900, UmbralMaxThr)</l>
<l>    escala := 255.0/UmbralMaxThr</l>
<l>    scale_image (HeightMap, HeightMap_Scalada, escala, 0)</l>
<l>    threshold (HeightMap_Scalada, HeightMap_Region, 0, 255)</l>
<l>    gray_histo_range (HeightMap_Region, HeightMap_Scalada, 0, 255, 256, Histo, BinSize)</l>
<l>    tuple_sum (Histo, Sum_Histo)</l>
<c></c>
<l>* # #########################################################</l>
<l>* # ### Mientras mas grabnde menos sensible a cambios #######   </l>
<l>    Mascara := 1</l>
<l>* # ########################################################</l>
<c></c>
<l>    Vector_Distribucion := []</l>
<l>    init_vector := 255</l>
<l>    flag_vector := 0</l>
<l>    aux_suma := 0.0</l>
<c></c>
<l>    for Index := init_vector to 0 by -1</l>
<c></c>
<l>        Vector_Distribucion[Index] := aux_suma+Histo[Index]*100.0/ Sum_Histo</l>
<l>        aux_suma := Vector_Distribucion[Index]</l>
<l>    endfor</l>
<c></c>
<l>    Derivada := []</l>
<l>    Factor_Der := 1000</l>
<l>    Mascara := 1</l>
<l>    for Index := init_vector to 50 by -Mascara</l>
<c></c>
<l>        Derivada[Index] := abs(Vector_Distribucion[Index]-Vector_Distribucion[Index-Mascara])*Factor_Der</l>
<c></c>
<l>    endfor</l>
<c></c>
<c></c>
<c>    * *********************************************************</c>
<c>    * * Busco el primer cambio brusco de posicion *************</c>
<c>    * * El umbral de cambio es Aux_Val_Max ********************</c>
<c>    * *********************************************************</c>
<l>    create_funct_1d_array (Derivada, Function)</l>
<c></c>
<c>    * *   dev_inspect_ctrl (Function)</c>
<c>    * ***********************************************************************************************</c>
<l>    Aux_Val_Max := 30000</l>
<c>    * ****************************************************************************************************</c>
<l>    Flag_indx_max := 255</l>
<l>    for Index := init_vector to 50 by -Mascara</l>
<c></c>
<l>        if (Derivada[Index]&gt;Aux_Val_Max)</l>
<l>            Aux_Val_Max := Derivada[Index]</l>
<l>            Flag_indx_max := Index</l>
<l>        endif</l>
<c></c>
<l>    endfor</l>
<c></c>
<l>* # #########################################################</l>
<l>* # ######## Grado de proteccion para moverse entre el </l>
<l>* # ####### histograma</l>
<l>    index_protection := 3</l>
<l>* # #########################################################</l>
<c></c>
<l>    Alt_Min := 110</l>
<l>    Alt_Max := Flag_indx_max-index_protection</l>
<l>    threshold (HeightMap_Scalada, Entidad, Alt_Min, Alt_Max)</l>
<c></c>
<l>    Estado_Funcion := true</l>
<l>catch (Exception)</l>
<l>    Estado_Funcion := false</l>
<c>    * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = Fx_Aux.ErrorCatch(HDevExpDefaultException1);</c>
<c></c>
<l>endtry</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Segmentar_Core_COPY_2">
<parameters>
<parameter id="DitsiObjMax"/>
<parameter id="Entidad"/>
<parameter id="Estado_Funcion"/>
<parameter id="HeightMap"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Core_ToUse_From_BDD_Fast_COPY_3">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Cod_Core_ToUse" base_type="ctrl" dimension="0"/>
<par name="Pallet_To_Scan" base_type="ctrl" dimension="0"/>
<par name="Segmento_To_Scan" base_type="ctrl" dimension="0"/>
<par name="PitutoExist" base_type="ctrl" dimension="0"/>
<par name="FXcheck" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>FXcheck := false</l>
<l>for Index := 1 to 5 by 1</l>
<c></c>
<c></c>
<l>    try</l>
<l>        Variable_BD := 'ram_actualproduction'</l>
<l>        Get_Pallet_Bd_Fast_COPY_1 (Variable_BD, SerialHandle, DataBD, FXcheck)</l>
<c></c>
<l>        Cod_Core_ToUse := DataBD[3]</l>
<l>        Cod_Core_ToUseAux := DataBD[3]</l>
<l>        Pallet_To_Scan := DataBD[15]</l>
<l>        Segmento_To_Scan := DataBD[16]</l>
<l>        PitutoExist := DataBD[5]</l>
<c></c>
<c></c>
<l>        FXcheck := true</l>
<c></c>
<l>        return ()</l>
<l>    catch (Exception)</l>
<c></c>
<l>*         Mensaje := '### ERROR ### -&gt; Entidad Requerida -&gt; '+Cod_Core_ToUse+' &lt;- RAM base DATOS no CARGADA.'</l>
<l>*         Send_Data_Info (Mensaje, SerialHandle)</l>
<l>        Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<l>        FXcheck := false</l>
<l>    endtry</l>
<l>endfor</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Core_ToUse_From_BDD_Fast_COPY_3">
<parameters>
<parameter id="Cod_Core_ToUse"/>
<parameter id="FXcheck"/>
<parameter id="Pallet_To_Scan"/>
<parameter id="PitutoExist"/>
<parameter id="Segmento_To_Scan"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Core_ToUse_From_BDD_Fast_COPY_4">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Cod_Core_ToUse" base_type="ctrl" dimension="0"/>
<par name="Pallet_To_Scan" base_type="ctrl" dimension="0"/>
<par name="Segmento_To_Scan" base_type="ctrl" dimension="0"/>
<par name="PitutoExist" base_type="ctrl" dimension="0"/>
<par name="FXcheck" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>FXcheck := false</l>
<l>for Index := 1 to 5 by 1</l>
<c></c>
<c></c>
<l>    try</l>
<l>        Variable_BD := 'ram_actualproduction'</l>
<l>        Get_Pallet_Bd_Fast_COPY_1 (Variable_BD, SerialHandle, DataBD, FXcheck)</l>
<c></c>
<l>        Cod_Core_ToUse := DataBD[3]</l>
<l>        Cod_Core_ToUseAux := DataBD[3]</l>
<l>        Pallet_To_Scan := DataBD[15]</l>
<l>        Segmento_To_Scan := DataBD[16]</l>
<l>        PitutoExist := DataBD[5]</l>
<c></c>
<c></c>
<l>        FXcheck := true</l>
<c></c>
<l>        return ()</l>
<l>    catch (Exception)</l>
<c></c>
<l>*         Mensaje := '### ERROR ### -&gt; Entidad Requerida -&gt; '+Cod_Core_ToUse+' &lt;- RAM base DATOS no CARGADA.'</l>
<l>*         Send_Data_Info (Mensaje, SerialHandle)</l>
<l>        Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<l>        FXcheck := false</l>
<l>    endtry</l>
<l>endfor</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Core_ToUse_From_BDD_Fast_COPY_4">
<parameters>
<parameter id="Cod_Core_ToUse"/>
<parameter id="FXcheck"/>
<parameter id="Pallet_To_Scan"/>
<parameter id="PitutoExist"/>
<parameter id="Segmento_To_Scan"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Image_Bloque3_Fast">
<interface>
<oo>
<par name="ModelImage" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
<par name="Z" base_type="iconic" dimension="0"/>
<par name="ImgLeftCamera" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="FOTO" base_type="ctrl" dimension="0"/>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
<par name="Cod_Core_ToUse" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
<par name="MinimumDisparity" base_type="ctrl" dimension="0"/>
<par name="NumberOfDisparities" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* Configuracion de Parametros</c>
<c></c>
<c></c>
<c></c>
<l>  get_framegrabber_param (NxLib, '//Execute/Default/Result/193216/MinimumDisparity', MinimumDisparity)</l>
<l>  get_framegrabber_param (NxLib, '//Execute/Default/Result/193216/NumberOfDisparities', NumberOfDisparities)</l>
<c>    </c>
<c>    </c>
<c></c>
<l>Get_TipoEntidad (Cod_Core_ToUse, Is_a_Core)</l>
<l>if (Is_a_Core)</l>
<l>    MinimumDisparity_Cam1:=-35</l>
<l>    NumberOfDisparities_Cam1:= 128</l>
<l>else</l>
<l>    MinimumDisparity_Cam1 := -77</l>
<l>    NumberOfDisparities_Cam1 := 32</l>
<l>endif</l>
<c></c>
<c></c>
<l>Projector:='true'</l>
<l>FrontLigth:='true'</l>
<l>AutoExposure:='false'</l>
<l>AutoGain:='false'</l>
<l>Exposure := 4.49</l>
<l>Gain:=1</l>
<l>FlexView:=2</l>
<l>Config_Parametros_Cam_R1 (NxLib, Camera_1, NumberOfDisparities_Cam1, MinimumDisparity_Cam1, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure, FlexView, TempCam)</l>
<c></c>
<l>Get_Core_ToUse_From_BDD_Fast (SerialHandle, Cod_Core_ToUse, Pallet_To_Scan, Segmento_To_Scan, PitutoExist, FXcheck, Diametro)</l>
<c></c>
<l>Adq_Imagen (ModelImage, NxLib, Camera_1, Camara_conexion_Est)</l>
<c></c>
<l>if (not Is_a_Core)</l>
<l>    set_framegrabber_param (NxLib, 'do_execute', 'EstimateDisparitySettings')</l>
<l>    get_framegrabber_param (NxLib, '//Execute/Default/Result/193216/MinimumDisparity', MinimumDisparity)</l>
<l>    get_framegrabber_param (NxLib, '//Execute/Default/Result/193216/NumberOfDisparities', NumberOfDisparities)</l>
<l>    Config_Parametros_Cam_R1 (NxLib, Camera_1, NumberOfDisparities, MinimumDisparity, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure, FlexView, TempCam)</l>
<l>    Adq_Imagen (ModelImage, NxLib, Camera_1, Camara_conexion_Est)</l>
<c>    </c>
<l>    Adq_XYZ_Img (ModelImage, X, Y, Z)</l>
<c>    </c>
<l>endif</l>
<c></c>
<c></c>
<c>***********************************************************************</c>
<c>****** Guardo las Imagenes ********************************************</c>
<l>get_system_time (MSecond, Second, Minute, Hour, Day, YDay, Month, Year)</l>
<c></c>
<l>Fecha:=Year+'_'+Month+'_'+Day+'_'+Hour+'_'+Minute+'_'+Second+'_'+MSecond</l>
<l>write_object (ModelImage, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 2/Img_'+Cod_Core_ToUse+'_'+Fecha)</l>
<c></c>
<l>* read_image (ModelImage, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 2/Img_9x10 Tube sleeve_2019_8_12_16_17_2_572.hobj')</l>
<l>* read_object (ModelImage, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 2/Img_CLR_2019_8_12_15_51_16_259.hobj')</l>
<c>************************************************************************</c>
<l>Get_TipoEntidad (Cod_Core_ToUse, Is_a_Core)</l>
<l>Adq_XYZ_Img (ModelImage, X, Y, Z)</l>
<c></c>
<c></c>
<c>* Then is a  Sleeve</c>
<l>if (Is_a_Core)</l>
<c>    </c>
<l>    gen_rectangle1 (ROI_1, 270, 300, 986.193, 870)</l>
<c>    </c>
<c>    </c>
<l>    reduce_domain (Z, ROI_1, Z)</l>
<c>    *******************************************************</c>
<c>    * Segmento el dore de manera dinamica******************</c>
<l>    DitsiObjMax:=1600.0</l>
<l>    Segmentar_Core (Z, X, Y, Z, Entidad, DitsiObjMax, Estado_Funcion)</l>
<c>    *******************************************************</c>
<l>    dilation_circle (Entidad, EntidadDilatada, 30.5)</l>
<l>    reduce_domain (Z, EntidadDilatada, Z)</l>
<c>    </c>
<l>    select_obj(ModelImage, ImgLeftCamera, 1)</l>
<l>    dev_display (EntidadDilatada)</l>
<l>else</l>
<c>    </c>
<c>    </c>
<c>    *******************************************************</c>
<c>    * Segmento el dore de manera dinamica******************</c>
<l>    DitsiObjMax:=2515.0</l>
<l>    Segmentar_Core (Z, X, Y, Z, Entidad, DitsiObjMax, Estado_Funcion)</l>
<c>    *******************************************************</c>
<l>    dilation_circle (Entidad, EntidadDilatada, 60.5)</l>
<l>    reduce_domain (Z, EntidadDilatada, Z)</l>
<c>    </c>
<l>    select_obj(ModelImage, ImgLeftCamera, 1)</l>
<l>    dev_display (EntidadDilatada)</l>
<c>    </c>
<l>endif</l>
<c></c>
<c></c>
<c></c>
<l>xyz_to_object_model_3d (X, Y, Z, Escena3D_RAW)</l>
<c></c>
<c>******************************************************************************************************************************</c>
<l>Debug_View:=0</l>
<l>Visualizar_3D ([ Escena3D_RAW], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Debug_View, [], [], [], WindowHandle, PoseOut1)</l>
<c></c>
<c></c>
<c></c>
<l>Parametros_VisualizacionOut := ['disp_pose','color_attrib','lut','disp_lines','point_size']</l>
<l>Valores_VisualizacionOut := ['false','coord_z','rainbow','true',1]</l>
<l>create_pose (100, 100, 3000, 0, 0, 0, 'Rp+T', 'gba', 'point', PoseView)</l>
<l>disp_object_model_3d (WindowHandle, Escena3D_RAW, [], PoseView, Parametros_VisualizacionOut, Valores_VisualizacionOut)</l>
<c>******************************************************************************************************************************</c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Image_Bloque3_Fast">
<parameters>
<parameter id="Camera_1"/>
<parameter id="Cod_Core_ToUse"/>
<parameter id="Escena3D_RAW"/>
<parameter id="FOTO"/>
<parameter id="ImgLeftCamera"/>
<parameter id="MinimumDisparity"/>
<parameter id="ModelImage"/>
<parameter id="NumberOfDisparities"/>
<parameter id="NxLib"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="SerialHandle"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="WindowHandle"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_3dModel_Sleeve">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Path_CORE_ID" base_type="ctrl" dimension="0"/>
<par name="Path_3D_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_SFM_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="ObjectModel3D_Core_Pallet_In" base_type="ctrl" dimension="0"/>
<par name="Cod_Core" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ObjectModel3D_Core_Pallet_Out" base_type="ctrl" dimension="0"/>
<par name="Modelo3D_Select" base_type="ctrl" dimension="0"/>
<par name="Cod_Core_ToUse" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>*Get_Core_ToUse (SerialHandle, Cod_Core_ToUse, FXcheck)</l>
<c></c>
<l>Cod_Core_ToUse:=Cod_Core</l>
<c></c>
<l>    tuple_strrstr (Cod_Core_ToUse, 'PIN', PIN)</l>
<l>    tuple_strrstr (Cod_Core_ToUse, 'LOC', LOC)</l>
<l>    tuple_strrstr (Cod_Core_ToUse, 'SPRUE', SPRUE)</l>
<l>     tuple_strrstr (Cod_Core_ToUse, 'NUM', NUMERO)</l>
<l>     tuple_strrstr (Cod_Core_ToUse, 'DOWEL', DOWEL)</l>
<c>    </c>
<l>    try</l>
<c>  </c>
<l>        if ( DOWEL=-1 and NUMERO=-1 and PIN=-1 and LOC=-1 and SPRUE=-1 and Cod_Core_ToUse != ' ')   </l>
<l>        Get_STL_Sleeve (Cod_Core_ToUse, Path_CORE_ID, Path_3D_Segmentos,\
                        Path_SFM_Segmentos, Vector_Estado_Fx, SerialHandle, \
                        ObjectModel3D_Core_Pallet_Out, Estado_Get_SFM_STL, Modelo3D_Select)</l>
<l>        endif</l>
<c>        </c>
<l>    catch (Exception)</l>
<c>        </c>
<l>        Send_Data_Error(Exception, SerialHandle, EstadoFx)</l>
<l>    endtry         </l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_3dModel_Sleeve">
<parameters>
<parameter id="Cod_Core"/>
<parameter id="Cod_Core_ToUse"/>
<parameter id="Modelo3D_Select"/>
<parameter id="ObjectModel3D_Core_Pallet_In"/>
<parameter id="ObjectModel3D_Core_Pallet_Out"/>
<parameter id="Path_3D_Segmentos"/>
<parameter id="Path_CORE_ID"/>
<parameter id="Path_SFM_Segmentos"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_SFM_STL">
<interface>
<ic>
<par name="Vector_ID_Core_by_Segment_Pallet" base_type="ctrl" dimension="0"/>
<par name="Path_CORE_ID" base_type="ctrl" dimension="0"/>
<par name="Path_3D_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_SFM_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ObjectModel3D_Core_Pallet" base_type="ctrl" dimension="0"/>
<par name="SFM_Core_Pallet" base_type="ctrl" dimension="0"/>
<par name="Estado_Get_SFM_STL" base_type="ctrl" dimension="0"/>
<par name="Modelo3D_Select" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Estado_Get_SFM_STL:=false</l>
<l>try</l>
<c>    </c>
<l>    Core_Find_by_User := Vector_ID_Core_by_Segment_Pallet</l>
<c>    </c>
<l>    if (Core_Find_by_User='')</l>
<l>        Estado_Get_SFM_STL:=false</l>
<l>        return()</l>
<l>    endif</l>
<c>    </c>
<l>    Index_Core:=[]</l>
<l>    Core_Get:=false</l>
<c>    </c>
<l>    for Index_Core_find := 0 to |Path_CORE_ID|-1 by 1</l>
<c>        </c>
<l>        if (Path_CORE_ID[Index_Core_find] = Core_Find_by_User)</l>
<l>            Index_Core :=  Index_Core_find  </l>
<l>            Core_Get:=true</l>
<l>        endif</l>
<l>    endfor</l>
<c>    </c>
<l>    if (not Core_Get)</l>
<c>        </c>
<c>        </c>
<c>        </c>
<l>          Send_Data_Info ('Surface File Leido  -------&gt; '+Core_Find_by_User, SerialHandle)</l>
<c>   </c>
<c>  </c>
<l>        return()</l>
<c>        </c>
<l>    endif</l>
<c>    </c>
<c>    </c>
<l>    Send_Estado_Vision (Vector_Estado_Fx, SerialHandle, 24)   </l>
<l>    read_object_model_3d (Path_3D_Segmentos[Index_Core], 1, [], [], ObjectModel3D_Core_Pallet, Status)</l>
<l>    Send_Estado_Vision (Vector_Estado_Fx, SerialHandle, 25)</l>
<l>    read_surface_model (Path_SFM_Segmentos[Index_Core], SFM_Core_Pallet)</l>
<l>    Send_Data_Info ('Surface File Leido  -------&gt; '+Core_Find_by_User, SerialHandle)</l>
<c>    </c>
<l>    Modelo3D_Select:=Path_3D_Segmentos[Index_Core]</l>
<c>    </c>
<c>    </c>
<l>    Estado_Get_SFM_STL:=true</l>
<c>    </c>
<l>catch (Exception)</l>
<c>    </c>
<c>    </c>
<c></c>
<l>        Send_Data_Info ('### ERROR ### NO se pudo leer el modelo 3D o el SFM de ' + Core_Find_by_User, SerialHandle)</l>
<c>   </c>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="Get_SFM_STL">
<parameters>
<parameter id="Estado_Get_SFM_STL"/>
<parameter id="Modelo3D_Select"/>
<parameter id="ObjectModel3D_Core_Pallet"/>
<parameter id="Path_3D_Segmentos"/>
<parameter id="Path_CORE_ID"/>
<parameter id="Path_SFM_Segmentos"/>
<parameter id="SFM_Core_Pallet"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_STL_Sleeve">
<interface>
<ic>
<par name="Vector_ID_Core_by_Segment_Pallet" base_type="ctrl" dimension="0"/>
<par name="Path_CORE_ID" base_type="ctrl" dimension="0"/>
<par name="Path_3D_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_SFM_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ObjectModel3D_Core_Pallet" base_type="ctrl" dimension="0"/>
<par name="Estado_Get_SFM_STL" base_type="ctrl" dimension="0"/>
<par name="Modelo3D_Select" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Estado_Get_SFM_STL:=false</l>
<l>try</l>
<c>    </c>
<l>    Core_Find_by_User := Vector_ID_Core_by_Segment_Pallet</l>
<c>    </c>
<l>    if (Core_Find_by_User='')</l>
<l>        Estado_Get_SFM_STL:=false</l>
<l>        return()</l>
<l>    endif</l>
<c>    </c>
<l>    Index_Core:=[]</l>
<l>    Core_Get:=false</l>
<c>    </c>
<l>    for Index_Core_find := 0 to |Path_CORE_ID|-1 by 1</l>
<c>        </c>
<l>        if (Path_CORE_ID[Index_Core_find] = Core_Find_by_User)</l>
<l>            Index_Core :=  Index_Core_find  </l>
<l>            Core_Get:=true</l>
<l>        endif</l>
<l>    endfor</l>
<c>    </c>
<l>    if (not Core_Get)</l>
<c>        </c>
<c>        </c>
<c>        </c>
<l>        throw ('CORE NO EXISTE EN BD')</l>
<c>        </c>
<c>        </c>
<c>        </c>
<l>        return()</l>
<c>        </c>
<l>    endif</l>
<c>    </c>
<c>    </c>
<l>    Send_Estado_Vision (Vector_Estado_Fx, SerialHandle, 24)   </l>
<l>    read_object_model_3d (Path_3D_Segmentos[Index_Core], 1, [], [], ObjectModel3D_Core_Pallet, Status)</l>
<l>*    Send_Estado_Vision (Vector_Estado_Fx, SerialHandle, 25)</l>
<l>*    read_surface_model (Path_SFM_Segmentos[Index_Core], SFM_Core_Pallet)</l>
<l>*    Send_Data_Info ('Surface File Leido '+Core_Find_by_User, SerialHandle)</l>
<c>    </c>
<l>    Modelo3D_Select:=Path_3D_Segmentos[Index_Core]</l>
<c>    </c>
<c>    </c>
<l>    Estado_Get_SFM_STL:=true</l>
<c>    </c>
<l>catch (Exception)</l>
<c>    </c>
<c>    </c>
<l>    throw ('NO se pudo leer el modelo 3D o el SFM de ' + Core_Find_by_User)</l>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="Get_STL_Sleeve">
<parameters>
<parameter id="Estado_Get_SFM_STL"/>
<parameter id="Modelo3D_Select"/>
<parameter id="ObjectModel3D_Core_Pallet"/>
<parameter id="Path_3D_Segmentos"/>
<parameter id="Path_CORE_ID"/>
<parameter id="Path_SFM_Segmentos"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Core_ToUse_From_BDD_Fast_COPY_5">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Cod_Core_ToUse" base_type="ctrl" dimension="0"/>
<par name="Pallet_To_Scan" base_type="ctrl" dimension="0"/>
<par name="Segmento_To_Scan" base_type="ctrl" dimension="0"/>
<par name="PitutoExist" base_type="ctrl" dimension="0"/>
<par name="FXcheck" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>FXcheck := false</l>
<l>for Index := 1 to 5 by 1</l>
<c></c>
<c></c>
<l>    try</l>
<l>        Variable_BD := 'ram_actualproduction'</l>
<l>        Get_Pallet_Bd_Fast_COPY_1 (Variable_BD, SerialHandle, DataBD, FXcheck)</l>
<c></c>
<l>        Cod_Core_ToUse := DataBD[3]</l>
<l>        Cod_Core_ToUseAux := DataBD[3]</l>
<l>        Pallet_To_Scan := DataBD[15]</l>
<l>        Segmento_To_Scan := DataBD[16]</l>
<l>        PitutoExist := DataBD[5]</l>
<c></c>
<c></c>
<l>        FXcheck := true</l>
<c></c>
<l>        return ()</l>
<l>    catch (Exception)</l>
<c></c>
<l>*         Mensaje := '### ERROR ### -&gt; Entidad Requerida -&gt; '+Cod_Core_ToUse+' &lt;- RAM base DATOS no CARGADA.'</l>
<l>*         Send_Data_Info (Mensaje, SerialHandle)</l>
<l>        Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<l>        FXcheck := false</l>
<l>    endtry</l>
<l>endfor</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Core_ToUse_From_BDD_Fast_COPY_5">
<parameters>
<parameter id="Cod_Core_ToUse"/>
<parameter id="FXcheck"/>
<parameter id="Pallet_To_Scan"/>
<parameter id="PitutoExist"/>
<parameter id="Segmento_To_Scan"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Image_Sleeve_Bloque3">
<interface>
<oo>
<par name="ModelImage" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
<par name="Z" base_type="iconic" dimension="0"/>
<par name="ImgLeftCamera" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="FOTO" base_type="ctrl" dimension="0"/>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
<par name="Cod_Core_ToUse" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Matrix_Sleeve" base_type="ctrl" dimension="2"/>
<par name="IndexLast" base_type="ctrl" dimension="0"/>
<par name="Diametro" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
<par name="Matrix_Sleeve_New" base_type="ctrl" dimension="2"/>
</oc>
</interface>
<body>
<c>* Configuracion de Parametros</c>
<c></c>
<l>Matrix_Sleeve_New:=Matrix_Sleeve</l>
<c></c>
<l>MinimumDisparity_Cam1 := -64</l>
<l>NumberOfDisparities_Cam1 := 128</l>
<c></c>
<c></c>
<c></c>
<l>Projector:='true'</l>
<l>FrontLigth:='true'</l>
<l>AutoExposure:='true'</l>
<l>AutoGain:='true'</l>
<l>Exposure := 4.49</l>
<l>Gain:=3</l>
<l>FlexView:=1</l>
<l>Config_Parametros_Cam_R1 (NxLib, Camera_1, NumberOfDisparities_Cam1, MinimumDisparity_Cam1, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure, FlexView, TempCam)</l>
<c></c>
<l>Get_Core_ToUse_From_BDD_Fast (SerialHandle, Cod_Core_ToUse, Pallet_To_Scan, Segmento_To_Scan, PitutoExist,\
                              FXcheck, Diametro)</l>
<c></c>
<l>Adq_Imagen (ModelImage, NxLib, Camera_1, Camara_conexion_Est)</l>
<c></c>
<c></c>
<l>set_framegrabber_param (NxLib, 'do_execute', 'EstimateDisparitySettings')</l>
<l>get_framegrabber_param (NxLib, '//Execute/Default/Result/193216/MinimumDisparity', MinimumDisparity)</l>
<l>get_framegrabber_param (NxLib, '//Execute/Default/Result/193216/NumberOfDisparities', NumberOfDisparities)</l>
<c></c>
<c></c>
<l>FlexView:=8</l>
<l>Config_Parametros_Cam_R1 (NxLib, Camera_1, NumberOfDisparities, MinimumDisparity, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure, FlexView, TempCam)</l>
<l>Adq_Imagen (ModelImage, NxLib, Camera_1, Camara_conexion_Est)</l>
<l>Adq_Imagen (ModelImage, NxLib, Camera_1, Camara_conexion_Est)</l>
<l>Adq_XYZ_Img (ModelImage, X, Y, Z)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c>***********************************************************************</c>
<c>****** Guardo las Imagenes ********************************************</c>
<l>get_system_time (MSecond, Second, Minute, Hour, Day, YDay, Month, Year)</l>
<c></c>
<c></c>
<l>Path_base:='D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 2/'</l>
<l>Fecha:=Year+'_'+Month+'_'+Day+'_'+Hour+'_'+Minute+'_'+Second+'_'+MSecond</l>
<l>PathFile:='Img_'+Cod_Core_ToUse+'_'+Fecha</l>
<l>PathFile:='Img_6x4x8 ND sleeve_2019_8_15_9_36_50_814.hobj'</l>
<c></c>
<c></c>
<l> write_object (ModelImage, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 2/Img_'+Cod_Core_ToUse+'_'+Fecha)</l>
<c>****  read_object (ModelImage, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 2/Img_6x2.9x8 ND sleeve_2019_9_13_9_36_18_445.hobj')</c>
<c>*************************************************************************</c>
<l>Get_TipoEntidad (Cod_Core_ToUse, Is_a_Core)</l>
<l>Adq_XYZ_Img (ModelImage, X, Y, Z)</l>
<c></c>
<l>get_image_size (X, Width, Height)</l>
<l>*dev_resize_window_fit_image (X, 0, 0,  Width, Height)</l>
<c></c>
<c>*******************************************************</c>
<c>* Segmento el dore de manera dinamica******************</c>
<l>DitsiObjMax:=2515.0</l>
<l>Segmentar_Core (Z, X, Y, Z, Entidad, DitsiObjMax, Estado_Funcion)</l>
<c>*******************************************************</c>
<c></c>
<c></c>
<c>    </c>
<l>dilation_circle (Entidad, EntidadDilatada, Diametro)</l>
<l>reduce_domain (Z, EntidadDilatada, Z)</l>
<c></c>
<l>select_obj(ModelImage, ImgLeftCamera, 1)</l>
<l>dev_display (EntidadDilatada)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>xyz_to_object_model_3d (X, Y, Z, Escena3D_RAW)</l>
<c></c>
<c>******************************************************************************************************************************</c>
<l>Debug_View:=0</l>
<l>Visualizar_3D ([ Escena3D_RAW], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Debug_View, [], [], [], WindowHandle, PoseOut1)</l>
<c></c>
<c></c>
<l>dev_resize_window_fit_image (X, 0, 0, -1, -1)</l>
<l>Parametros_VisualizacionOut := ['disp_pose','color_attrib','lut','disp_lines','point_size']</l>
<l>Valores_VisualizacionOut := ['false','coord_z','rainbow','true',1]</l>
<l>create_pose (250, 100, 3500, 0, 0, 0, 'Rp+T', 'gba', 'point', PoseView)</l>
<l>disp_object_model_3d (WindowHandle, Escena3D_RAW, [], PoseView, Parametros_VisualizacionOut, Valores_VisualizacionOut)</l>
<c>******************************************************************************************************************************</c>
<c></c>
<c></c>
<c></c>
<c></c>
<c>***********************************************</c>
<c>* Foto pallet N sacada</c>
<c>*************************************************</c>
<l>Matrix_Sleeve_New.at(IndexLast).at(1) :=true</l>
<l>Matrix_Sleeve_New.at(IndexLast).at(2) :=Path_base+PathFile</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Image_Sleeve_Bloque3">
<parameters>
<parameter id="Camera_1"/>
<parameter id="Cod_Core_ToUse"/>
<parameter id="Diametro"/>
<parameter id="Escena3D_RAW"/>
<parameter id="FOTO"/>
<parameter id="ImgLeftCamera"/>
<parameter id="IndexLast"/>
<parameter id="Matrix_Sleeve"/>
<parameter id="Matrix_Sleeve_New"/>
<parameter id="ModelImage"/>
<parameter id="NxLib"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="SerialHandle"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="WindowHandle"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Core_ToUse_From_BDD_Fast_COPY_6">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Cod_Core_ToUse" base_type="ctrl" dimension="0"/>
<par name="Pallet_To_Scan" base_type="ctrl" dimension="0"/>
<par name="Segmento_To_Scan" base_type="ctrl" dimension="0"/>
<par name="PitutoExist" base_type="ctrl" dimension="0"/>
<par name="FXcheck" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>FXcheck := false</l>
<l>for Index := 1 to 5 by 1</l>
<c></c>
<c></c>
<l>    try</l>
<l>        Variable_BD := 'ram_actualproduction'</l>
<l>        Get_Pallet_Bd_Fast_COPY_1 (Variable_BD, SerialHandle, DataBD, FXcheck)</l>
<c></c>
<l>        Cod_Core_ToUse := DataBD[3]</l>
<l>        Cod_Core_ToUseAux := DataBD[3]</l>
<l>        Pallet_To_Scan := DataBD[15]</l>
<l>        Segmento_To_Scan := DataBD[16]</l>
<l>        PitutoExist := DataBD[5]</l>
<c></c>
<c></c>
<l>        FXcheck := true</l>
<c></c>
<l>        return ()</l>
<l>    catch (Exception)</l>
<c></c>
<l>*         Mensaje := '### ERROR ### -&gt; Entidad Requerida -&gt; '+Cod_Core_ToUse+' &lt;- RAM base DATOS no CARGADA.'</l>
<l>*         Send_Data_Info (Mensaje, SerialHandle)</l>
<l>        Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<l>        FXcheck := false</l>
<l>    endtry</l>
<l>endfor</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Core_ToUse_From_BDD_Fast_COPY_6">
<parameters>
<parameter id="Cod_Core_ToUse"/>
<parameter id="FXcheck"/>
<parameter id="Pallet_To_Scan"/>
<parameter id="PitutoExist"/>
<parameter id="Segmento_To_Scan"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Save_Path_SleeveImg">
<interface>
<ic>
<par name="PathFile" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>PathLog:='D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/SleeveImg.txt'</l>
<l>   open_file(PathLog,'output',FileHandle)</l>
<l>   fwrite_string(FileHandle,PathFile)</l>
<l>   fnew_line(FileHandle)</l>
<l>   close_file(FileHandle)</l>
<l>return ()</l>
</body>
<docu id="Save_Path_SleeveImg">
<parameters>
<parameter id="PathFile"/>
</parameters>
</docu>
</procedure>
<procedure name="get_SleeveImage">
<interface>
<io>
<par name="ModelImage" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
<par name="Z" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="Matrix_Sleeve_New" base_type="ctrl" dimension="2"/>
<par name="Cod_Core_ToUse" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>        * Busco dependiendo del path de la manga, la imagen que corresponde</c>
<l>         Nelementos :=Matrix_Sleeve_New.length()</l>
<l>        for Index1 := 1 to Nelementos-1 by 1</l>
<c>            </c>
<c>            </c>
<l>            if (Cod_Core_ToUse = Matrix_Sleeve_New.at(Index1).at(0))</l>
<l>                Path_to_Img :=Matrix_Sleeve_New.at(Index1).at(2)</l>
<l>                break</l>
<l>            endif</l>
<l>        endfor</l>
<c>        </c>
<l>        read_image (Image,Path_to_Img)</l>
<l>           Adq_XYZ_Img (Image, X, Y, Z)</l>
<c>   </c>
<c>           *******************************************************</c>
<c>* Segmento el dore de manera dinamica******************</c>
<l>DitsiObjMax:=2515.0</l>
<l>Segmentar_Core (Z, X, Y, Z, SleevePos, DitsiObjMax, Estado_Funcion)</l>
<c>*******************************************************</c>
<l>dilation_circle (SleevePos, EntidadDilatada, 60.5)</l>
<l>reduce_domain (Z, EntidadDilatada, Z)</l>
<c></c>
<l>select_obj(ModelImage, ImgLeftCamera, 1)</l>
<l>dev_display (EntidadDilatada)</l>
<l>return ()</l>
</body>
<docu id="get_SleeveImage">
<parameters>
<parameter id="Cod_Core_ToUse"/>
<parameter id="Matrix_Sleeve_New"/>
<parameter id="ModelImage"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Take_Sleeve_in_Pallet_Inteligence">
<interface>
<io>
<par name="Z" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="ObjectModel3D_Core_Pallet" base_type="ctrl" dimension="0"/>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Matrix_Sleeve_New" base_type="ctrl" dimension="2"/>
<par name="IndexLast" base_type="ctrl" dimension="0"/>
<par name="Diametro" base_type="ctrl" dimension="0"/>
<par name="g_CamInBasePose2" base_type="ctrl" dimension="0"/>
<par name="g_AltutaVirtualCamEstereo" base_type="ctrl" dimension="0"/>
<par name="Diametro_Interno" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Estado_Funcion" base_type="ctrl" dimension="0"/>
<par name="Matrix_Sleeve_New_Pos" base_type="ctrl" dimension="2"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<l>try</l>
<c>    </c>
<l>*     read_image (ModelImage, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 2/Img_9x6.3x10 ND sleeve_2019_10_4_11_49_13_709.hobj')</l>
<c>    </c>
<l>*     Adq_XYZ_Img (ModelImage, X, Y, Z)</l>
<c>    </c>
<c>    </c>
<c>    * Segmento por histograma      </c>
<l>    DitsiObjMax:=2680.0+g_AltutaVirtualCamEstereo</l>
<l>    Segmentar_Sleeve (Z, X, Y, Z, RegionSleeve, DitsiObjMax, Estado_Funcion)</l>
<c>    </c>
<l>    dilation_circle (RegionSleeve, RegionSleeve, 1.5)</l>
<c>    </c>
<l>    dev_get_window (WindowHandle)</l>
<c>    * Elimino el ruido de regiones pequeñas</c>
<l>    connection (RegionSleeve, SelectedRegions)</l>
<l>    select_shape (SelectedRegions, SelectedRegions, 'area', 'and', \
                  500, 1e10)</l>
<c>    </c>
<l>    sort_region (SelectedRegions, SelectedRegions, 'first_point', 'true', 'row')</l>
<c>    </c>
<c>    </c>
<l>    threshold (Z, Region, g_AltutaVirtualCamEstereo+50, 3e3+g_AltutaVirtualCamEstereo)</l>
<l>    connection (Region, Region)</l>
<l>    select_shape_std (Region, Region, 'max_area', 90)</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    fill_up (Region, Region)</l>
<l>    shape_trans (Region, RegionTrans, 'rectangle1')</l>
<c>    </c>
<l>    erosion_rectangle1 (RegionTrans, RegionErosion, 41, 41)</l>
<l>    difference (RegionTrans, RegionErosion, RegionDifference)</l>
<c>    </c>
<c>    </c>
<l>    union2 (RegionSleeve, RegionDifference, RegionSleeve)</l>
<c>    </c>
<c>    * busco hoyos</c>
<l>    connect_and_holes (RegionSleeve, NumConnected, NumHoles)</l>
<l>    complement (RegionSleeve, RegionComplement)</l>
<l>    connect_and_holes (RegionComplement, NumConnectedComplement, NumHolesComplement)</l>
<c>    </c>
<l>    connection (RegionComplement, ConnectedRegions1)</l>
<c>    * Separo solo por circularidad y area       </c>
<l>    select_shape (ConnectedRegions1, SelectedRegions1, ['circularity','area','struct_factor'], 'and', \
                  [0.2,1e3,0], [0.99,200e3,0.9])</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    sort_region (SelectedRegions1, SelectedRegions1, 'first_point', 'true', 'row')  </l>
<l>    area_center (SelectedRegions1, Nelementos, Row, Column)</l>
<c>    </c>
<l>    dev_display (SelectedRegions1)</l>
<c>    </c>
<l>    if (|Nelementos|&lt;1)</l>
<l>        dev_clear_window ()</l>
<c>        </c>
<l>        dev_disp_text (' #### Manga No Enontrada #### ', 'window', 10, 10, 'black', [], [])</l>
<l>        Procesando := 0</l>
<l>        Resultado := 2</l>
<l>        Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>        Send_Data_Info('BLOQUE 3 FINALIZADO con ### ERRORES ####', SerialHandle)  </l>
<c>        </c>
<l>        Estado_Funcion:=0</l>
<l>        return() </l>
<l>    endif</l>
<c>    </c>
<l>    disp_cross (WindowHandle, Row, Column, 50, 0)</l>
<c>    </c>
<l>    compose3 (X, Y, Z, MultiChannelImage)</l>
<c>    </c>
<l>    get_grayval (MultiChannelImage, Row, Column, VectorMangas)</l>
<c>    </c>
<c>    </c>
<c>    **********************************</c>
<c>    *Alturas</c>
<l>    Vector_Z:=[]</l>
<c>    **********************************</c>
<c>    </c>
<l>    for Index := 1 to |Nelementos| by 1</l>
<c>        </c>
<c>        </c>
<l>        select_obj (SelectedRegions1, ObjectSelected, Index)</l>
<c>        </c>
<c>        </c>
<l>        dev_display (ObjectSelected)</l>
<c>        </c>
<l>        region_features (ObjectSelected, 'ra', Value)</l>
<c>        </c>
<l>*         Dilatacion:= Diametro*0.12</l>
<l>*         dilation_circle (ObjectSelected, ObjectSelected, Dilatacion)</l>
<c>        </c>
<l>        Get_sleeve_Vector (ObjectSelected, Z, Y, X, SelectedRegions2, Zred, Yred, Xred, Parametros_Visualizacion, Valores_Visualizacion, WindowHandle, ObjectModel3D_Core_Pallet, Diametro, g_CamInBasePose2, SerialHandle, g_AltutaVirtualCamEstereo, Diametro_Interno, PosX, PosY, PosZ, PosicionSleeve)</l>
<c>        </c>
<l>        Matrix_Sleeve_New.at(IndexLast).at(Index+2):=  PosX+';'+PosY+';'+PosZ</l>
<c>        </c>
<l>        Mensaje:='Manga '+Index+' Capturada -&gt; '+ PosX+'&lt;-&gt;'+PosY+'&lt;-&gt;'+PosZ</l>
<l>        Send_Data_Info (Mensaje, SerialHandle)</l>
<c>        </c>
<l>        Vector_Z[Index-1]:=PosZ</l>
<c>        </c>
<l>    endfor</l>
<c>    </c>
<c></c>
<c>    </c>
<c>    ***********************************************************</c>
<c>    * Proteccion de Altura</c>
<c>    * LA desviacion estandar de la altura de las mangas debe ser relativamente cercana</c>
<c>    ***********************************************************</c>
<c>    * Umbral de diferencia entre mangas</c>
<l>    Umbral_Diff:=10</l>
<c>    </c>
<l>    largoVector:=|Vector_Z|-1</l>
<l>    for i := 0 to largoVector by 1</l>
<c>    </c>
<l>        for j := 0 to largoVector by 1</l>
<l>           Diff:= Vector_Z[i]-Vector_Z[j]  </l>
<l>           tuple_abs (Diff, Diff_Abs)</l>
<c>           </c>
<l>           if (Diff_Abs&gt;=Umbral_Diff)</l>
<l>                Mensaje:='#####################################################################'</l>
<l>                Send_Data_Info (Mensaje, SerialHandle)</l>
<l>                Mensaje:='### ERROR ### Altura en Z de las bases de las mangas no son coherentes. Se debe RE-ESCANEAR'</l>
<l>                Send_Data_Info (Mensaje, SerialHandle)</l>
<l>                Mensaje:='#####################################################################'</l>
<l>                Send_Data_Info (Mensaje, SerialHandle)</l>
<c>                </c>
<l>                Estado_Funcion:=false</l>
<c>        </c>
<l>                Procesando := 1</l>
<l>                Resultado := 2</l>
<l>                Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>                ConteoCirculares:=0</l>
<l>                Estado_Fx:=0</l>
<c>                </c>
<l>                return()</l>
<c>           </c>
<l>           endif</l>
<c>           </c>
<l>        endfor</l>
<c>        </c>
<c>        </c>
<l>    endfor</l>
<c>    </c>
<c>    </c>
<l>                Mensaje:='#####################################################################'</l>
<l>                Send_Data_Info (Mensaje, SerialHandle)</l>
<l>                Mensaje:='Altura en Z de las bases de las mangas son coherentes.'</l>
<l>                Send_Data_Info (Mensaje, SerialHandle)</l>
<l>                Mensaje:='#####################################################################'</l>
<l>                Send_Data_Info (Mensaje, SerialHandle)</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    Matrix_Sleeve_New_Pos :=   Matrix_Sleeve_New</l>
<c>    </c>
<c>    </c>
<l>    Estado_Funcion:=true</l>
<c>    </c>
<c>    </c>
<l>catch (Exception)</l>
<c>    </c>
<l>    Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<c>    </c>
<l>    Estado_Funcion:=false</l>
<l>endtry</l>
<c></c>
<l>return ()</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c>***********************************************************************************</c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>try</l>
<c>    </c>
<c>    </c>
<l>    read_object (ModelImage, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 2/Img_9x6.3x10 ND sleeve_2019_8_10_19_16_12_144.hobj')</l>
<l>    read_object (ModelImage, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 2/Img_9x6.3x10 ND sleeve_2019_8_10_19_34_26_108.hobj')</l>
<l>    Adq_XYZ_Img (ModelImage, X, Y, Z)</l>
<c>    </c>
<c>    * Segmento por histograma      </c>
<l>    DitsiObjMax:=2624.0</l>
<l>    Segmentar_Sleeve (Z, X, Y, Z, RegionSleeve, DitsiObjMax, Estado_Funcion)</l>
<c>    </c>
<l>    dilation_circle (RegionSleeve, RegionSleeve, 3.5)</l>
<c>    </c>
<l>    dev_get_window (WindowHandle)</l>
<c>    * Elimino el ruido de regiones pequeñas</c>
<l>    connection (RegionSleeve, SelectedRegions)</l>
<l>    sort_region (SelectedRegions, SelectedRegions, 'first_point', 'true', 'row')</l>
<c>    </c>
<l>    select_shape (SelectedRegions, SelectedRegions, 'area', 'and', \
                  1e3, 200e7)</l>
<c>    </c>
<c>    </c>
<c>    * Separo solo por circularidad y area       </c>
<l>    select_shape (SelectedRegions, SelectedRegions1, ['circularity','area'], 'and', \
                  [0.1,1e3], [0.99,200e6])</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    sort_region (SelectedRegions1, SelectedRegions1, 'first_point', 'true', 'row')  </l>
<l>    area_center (SelectedRegions1, Nelementos, Row, Column)</l>
<c>    </c>
<l>    dev_display (SelectedRegions1)</l>
<c>    </c>
<l>    if (|Nelementos|&lt;1)</l>
<l>        dev_clear_window ()</l>
<c>        </c>
<l>        dev_disp_text (' #### Manga No Enontrada #### ', 'window', 10, 10, 'black', [], [])</l>
<l>        Procesando := 0</l>
<l>        Resultado := 2</l>
<l>        Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>        Send_Data_Info('BLOQUE 3 FINALIZADO con ### ERRORES ####', SerialHandle)  </l>
<c>        </c>
<l>        Estado_Funcion:=0</l>
<l>        return() </l>
<l>    endif</l>
<c>    </c>
<l>    disp_cross (WindowHandle, Row, Column, 50, 0)</l>
<c>    </c>
<l>    compose3 (X, Y, Z, MultiChannelImage)</l>
<c>    </c>
<l>    get_grayval (MultiChannelImage, Row, Column, VectorMangas)</l>
<c>    </c>
<c>    </c>
<l>    for Index := 1 to |Nelementos| by 1</l>
<c>        </c>
<c>        </c>
<l>        select_obj (SelectedRegions1, ObjectSelected, Index)</l>
<c>        </c>
<c>        </c>
<l>        dev_display (ObjectSelected)</l>
<c>        </c>
<l>        Get_sleeve_Vector (ObjectSelected, Z, Y, X, SelectedRegions2, Zred, Yred, Xred, Parametros_Visualizacion, Valores_Visualizacion, WindowHandle, ObjectModel3D_Core_Pallet, Diametro, g_CamInBasePose2, SerialHandle, g_AltutaVirtualCamEstereo, Diametro_Interno, PosX, PosY, PosZ, PosicionSleeve)</l>
<c>        </c>
<l>        Matrix_Sleeve_New.at(IndexLast).at(Index+2):=  PosX+';'+PosY+';'+PosZ</l>
<c>        </c>
<l>        Mensaje:='Manga '+Index+' Capturada -&gt; '+ PosX+'&lt;-&gt;'+PosY+'&lt;-&gt;'+PosZ</l>
<l>        Send_Data_Info (Mensaje, SerialHandle)</l>
<c>        </c>
<c>        </c>
<l>    endfor</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    Matrix_Sleeve_New_Pos :=   Matrix_Sleeve_New</l>
<c>    </c>
<c>    </c>
<l>    Estado_Funcion:=true</l>
<c>    </c>
<c>    </c>
<l>catch (Exception)</l>
<c>    </c>
<l>    Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<c>    </c>
<l>    Estado_Funcion:=false</l>
<l>endtry</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Take_Sleeve_in_Pallet_Inteligence">
<parameters>
<parameter id="Diametro"/>
<parameter id="Diametro_Interno"/>
<parameter id="Escena3D_RAW"/>
<parameter id="Estado_Funcion"/>
<parameter id="IndexLast"/>
<parameter id="Matrix_Sleeve_New"/>
<parameter id="Matrix_Sleeve_New_Pos"/>
<parameter id="ObjectModel3D_Core_Pallet"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="SerialHandle"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
<parameter id="g_AltutaVirtualCamEstereo"/>
<parameter id="g_CamInBasePose2"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_sleeve_Vector">
<interface>
<io>
<par name="SelectedRegions1" base_type="iconic" dimension="0"/>
<par name="Z" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="SelectedRegions2" base_type="iconic" dimension="0"/>
<par name="Zred" base_type="iconic" dimension="0"/>
<par name="Yred" base_type="iconic" dimension="0"/>
<par name="Xred" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
<par name="ObjectModel3D_Core_Pallet" base_type="ctrl" dimension="0"/>
<par name="Diametro" base_type="ctrl" dimension="0"/>
<par name="g_CamInBasePose2" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="g_AltutaVirtualCamEstereo" base_type="ctrl" dimension="0"/>
<par name="Diametro_Interno" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="PosX" base_type="ctrl" dimension="0"/>
<par name="PosY" base_type="ctrl" dimension="0"/>
<par name="PosZ" base_type="ctrl" dimension="0"/>
<par name="PosicionSleeve" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>Parametros_Visualizacion := ['disp_pose','color_attrib','lut','disp_lines','point_size']</l>
<l>Valores_Visualizacion := ['false','coord_z','rainbow','true',1]</l>
<c></c>
<c>* Busco el area mas gande ( se supone que todas son iguales)</c>
<l>select_shape_std (SelectedRegions1, SelectedRegions2, 'max_area', 90)</l>
<l>dilation_circle (SelectedRegions2, SelectedRegions2, 10.5)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>reduce_domain (Z, SelectedRegions2, Zred)</l>
<l>reduce_domain (Y, SelectedRegions2, Yred)</l>
<l>reduce_domain (X, SelectedRegions2, Xred)</l>
<c></c>
<c></c>
<l>Get_Max_Altura_Mangas (Zred, ImageGauss, LocalMaxima, ConnectedRegions,\
                       g_AltutaVirtualCamEstereo, AlturaBase)</l>
<c></c>
<c></c>
<c></c>
<l>xyz_to_object_model_3d (Xred, Yred, Zred, ObjectModel3D)</l>
<c></c>
<c></c>
<l>NotZeroModel_3D_Sleeve (ObjectModel3D, g_AltutaVirtualCamEstereo, ObjectModel3D)</l>
<c></c>
<c></c>
<l>smooth_object_model_3d (ObjectModel3D, 'mls', 'mls_kNN', 5, SmoothObjectModel3D)</l>
<c></c>
<c>*************************************************</c>
<l>NumNeighbors:=15</l>
<l>get_object_model_3d_params (SmoothObjectModel3D, 'neighbor_distance ' + NumNeighbors, DistanceDistribution)</l>
<l>get_object_model_3d_params (SmoothObjectModel3D, 'num_points', NumPoints)</l>
<c></c>
<l>InlierRate := 70</l>
<l>Distance := sort(DistanceDistribution)[|DistanceDistribution| * InlierRate / 100]</l>
<c></c>
<c></c>
<l>select_points_object_model_3d (ObjectModel3D, 'num_neighbors ' + Distance, 15, NumPoints, SmoothObjectModel3D)</l>
<l>* Visualizar_3D ([ SmoothObjectModel3D], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,1], 1, [], [], [], WindowHandle, PoseOut1)</l>
<c></c>
<c>********************************************************************</c>
<c>* Calculo de orientacion de manga</c>
<c>*********************************************************************</c>
<c></c>
<c></c>
<c></c>
<c></c>
<c>**********************************************************************</c>
<c></c>
<c></c>
<c></c>
<l>get_object_model_3d_params (SmoothObjectModel3D, 'bounding_box1', BoxSlevee)</l>
<l>get_object_model_3d_params (SmoothObjectModel3D, 'center', Centro)</l>
<c></c>
<l>select_points_object_model_3d (SmoothObjectModel3D, 'point_coord_z', 500, BoxSlevee[2]+80, Escena3D_RAWOut)</l>
<l>get_object_model_3d_params (Escena3D_RAWOut, 'center', Centro)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>* Visualizar_3D ([ Escena3D_RAWOut], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,1], 1, [], [], [], WindowHandle, PoseOut1)</l>
<c></c>
<c></c>
<c></c>
<c>* Obtengo el modelo 3D de la manga y extarigo su altura.</c>
<l>get_object_model_3d_params (ObjectModel3D_Core_Pallet, 'bounding_box1', Sleeve3DBox)</l>
<l>AltoNominal:=Sleeve3DBox[5]-Sleeve3DBox[2]</l>
<l>tuple_abs (AltoNominal, AltoNominal)</l>
<c></c>
<c>***************************************************************************************     </c>
<c></c>
<l>create_pose (Centro[0], Centro[1], Centro[2], 0, 0, 0, 'Rp+T', 'gba', 'point', Pose2)</l>
<l>Lx:=Sleeve3DBox[0]-Sleeve3DBox[3]</l>
<l>Ly:=Sleeve3DBox[1]-Sleeve3DBox[4]</l>
<l>Lz:=Sleeve3DBox[2]-Sleeve3DBox[5]</l>
<c></c>
<l>tuple_abs (Lx, Lx)</l>
<l>tuple_abs (Ly, Ly)</l>
<l>tuple_abs (Lz, Lz)</l>
<c></c>
<l>gen_box_object_model_3d (Pose2, Lx, Ly, Lz, ObjectModel3D2)</l>
<c></c>
<l>gen_sphere_object_model_3d (Pose2,Diametro_Interno*0.5, ESFERA)</l>
<c></c>
<l> Visualizar_3D ([ Escena3D_RAWOut,ESFERA,ObjectModel3D], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.4], 1, [], [], [], WindowHandle, PoseOut1)</l>
<c></c>
<c></c>
<c>*****************************************************************************************</c>
<l>ZMinBase:=AlturaBase</l>
<c></c>
<c>* desde la Base calculo la mitad de la manga.</c>
<c></c>
<l>ZSleeve:=ZMinBase-AltoNominal*0.45</l>
<c></c>
<c></c>
<c></c>
<l>*######################################</l>
<c>* OFFSET PARA TOMAR MANGA</c>
<l>*######################################</l>
<l>Delta_X:=0</l>
<l>Delta_Y:=0</l>
<l>Delta_Z:=0</l>
<l>*######################################</l>
<l>PosX:=Centro[0]+Delta_X</l>
<l>PosY:=Centro[1]+Delta_Y</l>
<l>PosZ:=(ZSleeve- g_AltutaVirtualCamEstereo) +Delta_Z</l>
<c></c>
<l>create_pose (PosX, PosY, PosZ, 0, 0, 0, 'Rp+T', 'gba', 'point', PosicionSleeve)     </l>
<l>return ()</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c>******************************************************************************************</c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>if (false)</l>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    * Busco el area mas gande ( se supone que todas son iguales)</c>
<l>    select_shape_std (SelectedRegions1, SelectedRegions2, 'max_area', 90)</l>
<l>*     dilation_circle (SelectedRegions2, SelectedRegions2, 10.5)</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    reduce_domain (Y, SelectedRegions2, Yred)</l>
<l>    reduce_domain (X, SelectedRegions2, Xred)</l>
<c>    </c>
<l>    reduce_domain (Z, SelectedRegions2, Zred)</l>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    Histagram_Filter (Zred, X, Y, Zred, Region_SupManga, Estado_Funcion)</l>
<c>    ****************************************************</c>
<l>    erosion_circle (Region_SupManga, Region_SupManga, 1)</l>
<c>    ********************************************************</c>
<l>    closing_circle (Region_SupManga, Region_SupManga, 3.5)</l>
<l>    opening_circle (Region_SupManga, Region_SupManga, 3.5)</l>
<c>    </c>
<l>    connection (Region_SupManga, ConnectedRegions1)</l>
<l>    select_shape_std (ConnectedRegions1, SelectedRegions, 'max_area', 90)</l>
<c>    </c>
<l>    reduce_domain (Zred, SelectedRegions, Zred)</l>
<l>    reduce_domain (Yred, SelectedRegions, Yred)</l>
<l>    reduce_domain (Xred, SelectedRegions, Xred)</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    Get_Max_Altura_Mangas (Zred, ImageGauss, LocalMaxima, ConnectedRegions, g_AltutaVirtualCamEstereo, AlturaBase)</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    xyz_to_object_model_3d (Xred, Yred, Zred, ObjectModel3D)</l>
<l>    NotZeroModel_3D_Sleeve (ObjectModel3D, g_AltutaVirtualCamEstereo, ObjectModel3D)</l>
<c>    </c>
<c>    </c>
<l>    smooth_object_model_3d (ObjectModel3D, 'mls', 'mls_kNN', 80, SmoothObjectModel3D)</l>
<l>    smooth_object_model_3d (SmoothObjectModel3D, 'mls', 'mls_kNN', 80, SmoothObjectModel3D)</l>
<l>    get_object_model_3d_params (SmoothObjectModel3D, 'bounding_box1', BoxSlevee)</l>
<l>    select_points_object_model_3d (SmoothObjectModel3D, 'point_coord_z', 500, BoxSlevee[2]+25, SmoothObjectModel3D)</l>
<c>    </c>
<l>    Visualizar_3D ([ SmoothObjectModel3D], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], 1, [], [], [], WindowHandle, PoseOut1)</l>
<c>    </c>
<l>    get_object_model_3d_params (SmoothObjectModel3D, 'bounding_box1', BoxSlevee)</l>
<l>    get_object_model_3d_params (SmoothObjectModel3D, 'center', Centro)</l>
<c>    ** (min_x, min_y, min_z, max_x, max_y, max_z)</c>
<l>    Diametro_en_X:=BoxSlevee[3]-BoxSlevee[0]</l>
<l>    Diametro_en_Y:=BoxSlevee[4]-BoxSlevee[1]</l>
<l>    AltoNominal_raw:=BoxSlevee[5]-BoxSlevee[2]</l>
<c>    </c>
<c>    </c>
<l>    tuple_abs (Diametro_en_X, Diametro_en_X_abs)</l>
<l>    tuple_abs (Diametro_en_Y, Diametro_en_Y_abs)</l>
<l>    tuple_abs (AltoNominal_raw, AltoNominal_raw_abs)</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    smallest_bounding_box_object_model_3d (SmoothObjectModel3D, 'axis_aligned', Pose1, Length1, Length2, Length3)</l>
<c>    </c>
<c>    </c>
<l>    gen_box_object_model_3d (Pose1, Length1, Length2, Length3, ObjectModel3D1)</l>
<c>    </c>
<l>    Visualizar_3D ([ SmoothObjectModel3D,ObjectModel3D1], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], 1, [], [], [], WindowHandle, PoseOut1)</l>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    * Obtengo el modelo 3D de la manga y extarigo su altura.</c>
<l>    get_object_model_3d_params (ObjectModel3D_Core_Pallet, 'bounding_box1', Sleeve3DBox)</l>
<l>    Diametro_Nominal_en_X:=Sleeve3DBox[3]-Sleeve3DBox[0]</l>
<l>    Diametro_Nominal_en_Y:=Sleeve3DBox[4]-Sleeve3DBox[1]</l>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    Error_ejeX:=Diametro_en_X-Diametro_Nominal_en_X</l>
<l>    Error_ejeY:=Diametro_en_Y-Diametro_Nominal_en_Y</l>
<l>    tuple_abs (Error_ejeX, Error_ejeX)</l>
<l>    tuple_abs (Error_ejeY, Error_ejeY)</l>
<c>    </c>
<l>    if (Centro[0]&lt;0)</l>
<l>        Error_ejeX:=-Error_ejeX</l>
<l>    elseif (Centro[0]&gt;=0)</l>
<l>        Error_ejeX:=Error_ejeX</l>
<l>    endif</l>
<c>    </c>
<c>    </c>
<l>    if (Centro[1]&lt;0)</l>
<l>        Error_ejeY:=-Error_ejeY</l>
<l>    elseif (Centro[1]&gt;=0)</l>
<l>        Error_ejeY:=Error_ejeY</l>
<l>    endif</l>
<c>    </c>
<c>    </c>
<l>    create_pose (Error_ejeX, Error_ejeY, 0, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose)</l>
<l>    rigid_trans_object_model_3d (SmoothObjectModel3D, Pose, ObjectModel3DRigidTrans)</l>
<l>    Visualizar_3D ([ ObjectModel3DRigidTrans,ObjectModel3D1], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], 1, [], [], [], WindowHandle, PoseOut1)</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    AltoNominal:=Sleeve3DBox[5]-Sleeve3DBox[2]</l>
<l>    tuple_abs (AltoNominal, AltoNominal)</l>
<c>    </c>
<c>    ***************************************************************************************     </c>
<l>    AlturaSupManga:=Centro[2]-g_AltutaVirtualCamEstereo</l>
<c>    </c>
<l>    ZSleeve:=AlturaSupManga+AltoNominal*0.20</l>
<c>    </c>
<c>    *****************************************************************************************</c>
<c>    </c>
<c>    * desde la Base calculo la mitad de la manga.</c>
<c>    </c>
<c>    </c>
<l>    Delta_X:=0</l>
<l>    Delta_Y:=0</l>
<l>    Delta_Z:=0</l>
<c>    </c>
<l>    PosX:=Centro[0]+Delta_X+Error_ejeX</l>
<l>    PosY:=Centro[1]+Delta_Y+Error_ejeY</l>
<l>    PosZ:=ZSleeve+Delta_Z</l>
<c>    </c>
<l>    create_pose (PosX, PosY, PosZ, 0, 0, 0, 'Rp+T', 'gba', 'point', PosicionSleeve)     </l>
<c>    </c>
<c>    </c>
<l>    return ()</l>
<c>    </c>
<c>    </c>
<l>endif</l>
</body>
<docu id="Get_sleeve_Vector">
<parameters>
<parameter id="Diametro"/>
<parameter id="Diametro_Interno"/>
<parameter id="ObjectModel3D_Core_Pallet"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="PosX"/>
<parameter id="PosY"/>
<parameter id="PosZ"/>
<parameter id="PosicionSleeve"/>
<parameter id="SelectedRegions1"/>
<parameter id="SelectedRegions2"/>
<parameter id="SerialHandle"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="WindowHandle"/>
<parameter id="X"/>
<parameter id="Xred"/>
<parameter id="Y"/>
<parameter id="Yred"/>
<parameter id="Z"/>
<parameter id="Zred"/>
<parameter id="g_AltutaVirtualCamEstereo"/>
<parameter id="g_CamInBasePose2"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_Data_Sleeve_To_Robot">
<interface>
<ic>
<par name="_EV1_O_CmdDatos" base_type="ctrl" dimension="0"/>
<par name="Matrix_Sleeve" base_type="ctrl" dimension="2"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Cod_Core_ToUse" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Matrix_Sleeve_New" base_type="ctrl" dimension="2"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<l>try</l>
<l>    Get_Core_ToUse_From_BDD_Fast_COPY_8 (SerialHandle, Cod_Core_ToUse, Pallet_To_Scan, \
                                         Segmento_To_Scan, PitutoExist, FXcheck)</l>
<c>    </c>
<c>    </c>
<l>    MangaToRead:=_EV1_O_CmdDatos-200</l>
<l>    TagToWrite:='_EBD_I_NumEntidad'</l>
<c>    </c>
<c>    </c>
<c>    ********************************</c>
<l>    MangaToRead    :=4*MangaToRead-3</l>
<l>    MangaToReadNOW :=4*MangaToRead-3</l>
<c>    ********************************</c>
<c></c>
<l>* #### Envio data de estado ########################</l>
<l>    Procesando := 1</l>
<l>    Resultado := 0</l>
<l>    Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* # ################################################# </l>
<c>    </c>
<l>    Matrix_Poses:={ { [] } }</l>
<l>    Matrix_Poses.at(0).at(0):='Poses'</l>
<c>    </c>
<l>    Nelementos :=Matrix_Sleeve.at(1).length()</l>
<c>    </c>
<c>    </c>
<l>    MangasTotales:=(Nelementos-3)</l>
<l>    if (MangaToRead&gt;MangasTotales)</l>
<c>        </c>
<c>        * NumEntidad de Manga - &gt; 255 Fin de envio de datos.</c>
<l>        ValorTag:=255</l>
<l>        Send_EthernetIP_Data (TagToWrite,ValorTag, SerialHandle)</l>
<l>* #### Envio data de estado ########################</l>
<l>        Procesando := 0</l>
<l>        Resultado := 1</l>
<l>        Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* # ################################################# </l>
<c>        </c>
<c>        </c>
<c>        </c>
<l>        Matrix_Sleeve:={ { [] } }</l>
<l>        Matrix_Sleeve.at(0).at(0):='SleeveName'</l>
<l>        Matrix_Sleeve.at(0).at(1):='TakePic'</l>
<l>        Matrix_Sleeve.at(0).at(2):='FolderPath'</l>
<l>        Matrix_Sleeve.at(0).at(3):='MangaPos'</l>
<c>        </c>
<c>        </c>
<l>        for Index1 := 1 to 6 by 1</l>
<c>            </c>
<l>            Matrix_Sleeve.at(Index1).at(1) := false</l>
<l>            Matrix_Sleeve.at(Index1).at(2) := ''</l>
<l>            Matrix_Sleeve.at(Index1).at(3) :=''</l>
<l>        endfor</l>
<c>        </c>
<l>        Matrix_Sleeve_New:=Matrix_Sleeve</l>
<c></c>
<l>        return()</l>
<c>        </c>
<l>    endif</l>
<c>    </c>
<l>    for Index := 1 to Nelementos-1 by 1</l>
<c>        </c>
<l>        if ( Matrix_Sleeve.at(Index).at(0) =  Cod_Core_ToUse)</l>
<l>            IndexLast:= Index</l>
<l>            break</l>
<l>        endif</l>
<l>        IndexLast:= Index</l>
<l>    endfor</l>
<c>    </c>
<c>    </c>
<l>    MangaToRead:=MangaToRead+2</l>
<c>    *********************************</c>
<c>    * Busco si existen los elementos</c>
<c>    *********************************</c>
<c>    </c>
<l>    IndexPoses:=0</l>
<l>    for Index := MangaToRead to (MangaToRead+4) by 1</l>
<c>        </c>
<c>        </c>
<l>        try</l>
<l>            ValorValido:=   Matrix_Sleeve.at(IndexLast).at(Index)</l>
<l>            IndexLastVAlue:= Index</l>
<l>            tuple_split (ValorValido, ';', ValorValido)</l>
<l>            tuple_number (ValorValido, ValorValido)</l>
<c>            </c>
<c>            </c>
<l>            Matrix_Poses.at(1).at(IndexPoses):=ValorValido</l>
<l>            IndexPoses:=IndexPoses+1</l>
<l>        catch (Exception)</l>
<l>            break</l>
<l>        endtry</l>
<c>        </c>
<c>        </c>
<l>    endfor</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    Max_Batch_Size:=4</l>
<l>    IndexMaximos:=(MangaToReadNOW+3)</l>
<l>    if (IndexPoses&gt;IndexMaximos)</l>
<l>        IndexPoses:=Max_Batch_Size</l>
<l>    endif</l>
<c>    </c>
<c>    </c>
<l>    switch (IndexPoses)</l>
<c>        </c>
<c>        </c>
<l>    case 0:</l>
<c>        </c>
<l>        ValorTag:=255</l>
<l>        Send_EthernetIP_Data (TagToWrite,ValorTag, SerialHandle)</l>
<l>        break</l>
<c>        </c>
<c>        </c>
<l>    case 1:</l>
<l>        PosXYZ1:= Matrix_Poses.at(1).at(0)</l>
<l>        create_pose (PosXYZ1[0], PosXYZ1[1],PosXYZ1[2], \
                     0, 0, 0, 'Rp+T', 'gba', 'point', PoseSleeve)</l>
<c>        </c>
<l>        Send_Data_To_Robot (PoseSleeve, SerialHandle)</l>
<c>        </c>
<l>        create_pose (0, 0,0,\
                     0, 0,0, 'Rp+T', 'gba', 'point', PoseSleeve2)     </l>
<l>        Send_Data_To_BDD_Pos(PoseSleeve2, SerialHandle)</l>
<c>        </c>
<c>        * NumEntidad de Manga - &gt; 3</c>
<l>        ValorTag:=3</l>
<l>        Send_EthernetIP_Data (TagToWrite, ValorTag, SerialHandle)</l>
<l>        break</l>
<c>        </c>
<c>        </c>
<c>        </c>
<l>    case 2:</l>
<l>        PosXYZ1:= Matrix_Poses.at(1).at(0)</l>
<l>        PosXYZ2:= Matrix_Poses.at(1).at(1)</l>
<l>        create_pose (PosXYZ1[0], PosXYZ1[1],PosXYZ1[2],\
                     PosXYZ2[2], PosXYZ2[1],PosXYZ2[0], 'Rp+T', 'gba', 'point', PoseSleeve)</l>
<l>        Send_Data_To_Robot (PoseSleeve, SerialHandle)</l>
<c>        </c>
<l>        create_pose (0, 0,0,\
                     0, 0,0, 'Rp+T', 'gba', 'point', PoseSleeve2)     </l>
<l>        Send_Data_To_BDD_Pos(PoseSleeve2, SerialHandle)</l>
<c>        </c>
<c>        * NumEntidad de Manga - &gt; 3</c>
<l>        ValorTag:=3</l>
<l>        Send_EthernetIP_Data (TagToWrite, ValorTag, SerialHandle)    </l>
<l>        break</l>
<c>        </c>
<c>        </c>
<l>    case 3:</l>
<c>        </c>
<l>        PosXYZ1:= Matrix_Poses.at(1).at(0)</l>
<l>        PosXYZ2:= Matrix_Poses.at(1).at(1)</l>
<l>        PosXYZ3:= Matrix_Poses.at(1).at(2)</l>
<l>        create_pose (PosXYZ1[0], PosXYZ1[1],PosXYZ1[2],\
                     PosXYZ2[2], PosXYZ2[1],PosXYZ2[0], 'Rp+T', 'gba', 'point', PoseSleeve)</l>
<c>        </c>
<l>        create_pose (PosXYZ3[0], PosXYZ3[1],PosXYZ3[2],\
                     0,0,0, 'Rp+T', 'gba', 'point', PoseSleeve2)   </l>
<c>        </c>
<l>        Send_Data_To_Robot (PoseSleeve, SerialHandle)</l>
<l>        Send_Data_To_BDD_Pos(PoseSleeve2, SerialHandle)</l>
<c>        * NumEntidad de Manga - &gt; 3</c>
<l>        ValorTag:=3</l>
<l>        Send_EthernetIP_Data (TagToWrite, ValorTag, SerialHandle)</l>
<c>        </c>
<l>        break</l>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<l>    case 4:</l>
<c>        </c>
<l>        PosXYZ1:= Matrix_Poses.at(1).at(0)</l>
<l>        PosXYZ2:= Matrix_Poses.at(1).at(1)</l>
<l>        PosXYZ3:= Matrix_Poses.at(1).at(2)</l>
<l>        PosXYZ4:= Matrix_Poses.at(1).at(3)</l>
<l>        create_pose (PosXYZ1[0], PosXYZ1[1],PosXYZ1[2],\
                     PosXYZ2[2], PosXYZ2[1],PosXYZ2[0], 'Rp+T', 'gba', 'point', PoseSleeve)</l>
<c>        </c>
<l>        create_pose (PosXYZ3[0], PosXYZ3[1],PosXYZ3[2],\
                     PosXYZ4[2], PosXYZ4[1],PosXYZ4[0], 'Rp+T', 'gba', 'point', PoseSleeve2)   </l>
<c>        </c>
<l>        Send_Data_To_Robot (PoseSleeve, SerialHandle)</l>
<l>        Send_Data_To_BDD_Pos(PoseSleeve2, SerialHandle)</l>
<c>        * NumEntidad de Manga - &gt; 3</c>
<l>        ValorTag:=3</l>
<l>        Send_EthernetIP_Data (TagToWrite, ValorTag, SerialHandle)</l>
<c>        </c>
<l>        Mensaje:='#####  ENVIO DE DATOS MANGAS TERMINADO #####'</l>
<l>        Send_Data_Info (Mensaje, SerialHandle)</l>
<c>        </c>
<c>        </c>
<l>        break</l>
<c>        </c>
<l>    endswitch</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>* #### Envio data de estado ########################</l>
<l>    Procesando := 0</l>
<l>    Resultado := 1</l>
<l>    Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* # ################################################# </l>
<c>    </c>
<l>catch (Exception)</l>
<c>    </c>
<c>    </c>
<l>    Send_Data_Error(Exception,SerialHandle,EstadoFx)</l>
<l>    Mensaje:='#####  ERROR EN ENVIO DE DATOS MANGAS  #####'</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<l>endtry</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Send_Data_Sleeve_To_Robot">
<parameters>
<parameter id="Cod_Core_ToUse"/>
<parameter id="Matrix_Sleeve"/>
<parameter id="Matrix_Sleeve_New"/>
<parameter id="SerialHandle"/>
<parameter id="_EV1_O_CmdDatos"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_Data_To_BDD_Pos">
<interface>
<ic>
<par name="Pose_Refinada" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>    convert_pose_type (Pose_Refinada, 'Rp+T', 'abg', 'point', Pose_Refinada_Tp2)</l>
<l>    for Index := 0 to |Pose_Refinada|-2 by 1</l>
<l>        VR_PosicionEsquinaPallet[Index]:=Pose_Refinada[Index]      </l>
<l>    endfor</l>
<c>   </c>
<c>   </c>
<c>    ********************************</c>
<c>    * Enviar por ETHERNETIP</c>
<c>    ********************************</c>
<l>    Variable_Pos:=['X','Y','Z','C','B','A']</l>
<l>    for Index_Var:= 0 to |VR_PosicionEsquinaPallet|-1 by 1</l>
<l>        Tag_Destino:='_EBD_I_Eje'+Variable_Pos[Index_Var]</l>
<l>        Variable:=VR_PosicionEsquinaPallet[Index_Var]</l>
<l>        Send_EthernetIP_Data (Tag_Destino, Variable, SerialHandle)</l>
<c>     </c>
<l>    endfor</l>
<l>return ()</l>
<c></c>
<c></c>
</body>
<docu id="Send_Data_To_BDD_Pos">
<parameters>
<parameter id="Pose_Refinada"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Bloque_localizadores_smart">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="Matrix_Localizadores" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c></c>
<c></c>
<l>Mensaje:='###### INICIO BLOQUE LOCALIZADORES ######'</l>
<l>Send_Data_Info (Mensaje, SerialHandle)</l>
<c></c>
<c></c>
<l>try</l>
<c>    </c>
<c></c>
<c></c>
<c></c>
<l>* #### Envio data de estado ########################</l>
<l>    Procesando := 1</l>
<l>    Resultado := 0</l>
<l>    Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* # ################################################# </l>
<c>    </c>
<l>    Tag_Lectura:='_EBD_I_SegmentoIr'         </l>
<l>    Read_EthernetIP_Data (Tag_Lectura, SerialHandle, N_Localizador)</l>
<c>   </c>
<l>       Get_Picture (Zm, ImgLeftCamera, NxLib, Camera_1)</l>
<c>    </c>
<c>       </c>
<c>   </c>
<c>    </c>
<l>    LocalizadoresMAX:=11</l>
<l>    OffsetZ:=3</l>
<c>    </c>
<l>    for Index := 1 to LocalizadoresMAX by 1</l>
<l>* #####  Make ROI ##############################        </l>
<l>        Get_Zona_ROI (Zm, Zmred, Index)</l>
<l>* #############################################     </l>
<l>        Get_AlturaLocalizador (Zmred, SerialHandle, AlturaLocalizador, Estado_Fx)</l>
<l>        Matrix_Localizadores[Index] := AlturaLocalizador+OffsetZ</l>
<l>    endfor</l>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    **********************************************************</c>
<c>    </c>
<c>    </c>
<l>    create_pose (Matrix_Localizadores[1],\
                 Matrix_Localizadores[2],\
                 Matrix_Localizadores[3],\
                 Matrix_Localizadores[6],\
                 Matrix_Localizadores[5],\
                 Matrix_Localizadores[4], 'Rp+T', 'gba', 'point', Bach1)</l>
<c>    </c>
<c>    </c>
<l>    create_pose (Matrix_Localizadores[7],\
                 Matrix_Localizadores[8],\
                 Matrix_Localizadores[9],\
                 0,\
                 Matrix_Localizadores[11],\
                 Matrix_Localizadores[10],\
                 'Rp+T', 'gba', 'point', Bach2)   </l>
<c>    </c>
<c>    **********************************************************      </c>
<l>    Send_Data_To_Robot (Bach1, SerialHandle)</l>
<l>    Send_Data_To_BDD_Pos (Bach2, SerialHandle)</l>
<c>    **********************************************************</c>
<c>    </c>
<c>    </c>
<l>* #### Envio data de estado ########################</l>
<l>    Procesando := 1</l>
<l>    Resultado :=1</l>
<l>    Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* # ################################################# </l>
<c>    </c>
<l>  for Index1 := 1 to LocalizadoresMAX by 1</l>
<l>        Mensaje:='### Altura de Localizador Pos '+Index1+' -&gt; '+Matrix_Localizadores[Index1]+' [mm]'</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)  </l>
<c>      </c>
<l>  endfor</l>
<c>    </c>
<c></c>
<l>    Mensaje:='###### FIN  BLOQUE LOCALIZADORES ######'</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<c>    </c>
<l>catch (Exception)</l>
<c>    </c>
<l>    Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<c>    </c>
<l>endtry</l>
<c>    </c>
<l>    return ()</l>
</body>
<docu id="Bloque_localizadores_smart">
<parameters>
<parameter id="Camera_1"/>
<parameter id="Matrix_Localizadores"/>
<parameter id="NxLib"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Bloque_2_Smart">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="AcqHandle" base_type="ctrl" dimension="0"/>
<par name="CameraParameters" base_type="ctrl" dimension="0"/>
<par name="CameraPose" base_type="ctrl" dimension="0"/>
<par name="ConteoFotoPatron" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Estado_SubProceso" base_type="ctrl" dimension="0"/>
<par name="PoseForCalibrationPlate" base_type="ctrl" dimension="0"/>
<par name="ToolInCamPose" base_type="ctrl" dimension="0"/>
<par name="ToolInBasePose" base_type="ctrl" dimension="0"/>
<par name="ObjInBasePoseOut" base_type="ctrl" dimension="0"/>
<par name="ConteoFotoPatron_New" base_type="ctrl" dimension="0"/>
<par name="g_Error_CamaraOpt_Adq" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>CameraPoseOut := CameraPose</l>
<l>Mensaje:='Inicio BLOQUE 2. Busqueda de patron en Pattern'</l>
<l>Send_Data_Info (Mensaje, SerialHandle)</l>
<c></c>
<l>* # ### Envio data de estado ########################</l>
<l>Estado := 1</l>
<l>Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>Resultado := 0</l>
<l>Procesando := 1</l>
<l>Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* # #################################################</l>
<c></c>
<c></c>
<l>delatGan:=3</l>
<l>ExposureTime:=100E3</l>
<l>Ganancia:=20</l>
<c></c>
<l>N_Busquedas:=8</l>
<c></c>
<l>errorZ_dentroMargen:=true</l>
<c></c>
<l>for Index := 1 to N_Busquedas by 1</l>
<c>    </c>
<c>    </c>
<l>    Get_Smart_Patron (Image, Vector_Estado_Fx, SerialHandle, ExposureTime,\
                      Ganancia, AcqHandle, ConteoFotoPatron,\
                      errorZ_dentroMargen, Index, Estado, Exception, ConteoFotoPatron_New, errorZ_dentroMargen, g_Error_CamaraOpt_Adq)</l>
<c>    </c>
<c>    </c>
<l>    if (g_Error_CamaraOpt_Adq)</l>
<l>        Resultado := 2</l>
<l>        Procesando := 1</l>
<l>        ConteoFotoPatron_New:=1</l>
<l>        Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>        Mensaje:='### ERROR ### Camara Desconectada'</l>
<l>        Send_Data_Info (Mensaje, SerialHandle)</l>
<l>        return ()</l>
<c>        </c>
<l>    endif</l>
<c>    </c>
<l>    if (Estado)</l>
<c>        </c>
<l>        if (not errorZ_dentroMargen)</l>
<l>            Resultado := 2</l>
<l>            Procesando := 1</l>
<l>            Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>            ConteoFotoPatron_New:=1</l>
<l>        endif</l>
<l>        return()</l>
<l>    endif</l>
<c>    </c>
<l>*   Ganancia:=Ganancia+delatGan</l>
<l>    ExposureTime:=ExposureTime+50E3</l>
<l>endfor</l>
<c></c>
<c></c>
<c></c>
<l>Resultado := 2</l>
<l>Procesando := 1</l>
<l>ConteoFotoPatron:=1</l>
<l>ConteoFotoPatron_New:=ConteoFotoPatron</l>
<l>Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>Mensaje:='### ERROR ### patron no encontrado'</l>
<l>Send_Data_Info (Mensaje, SerialHandle)</l>
<c></c>
<c></c>
<l>return ()</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
</body>
<docu id="Bloque_2_Smart">
<parameters>
<parameter id="AcqHandle"/>
<parameter id="CameraParameters"/>
<parameter id="CameraPose"/>
<parameter id="ConteoFotoPatron"/>
<parameter id="ConteoFotoPatron_New"/>
<parameter id="Estado_SubProceso"/>
<parameter id="ObjInBasePoseOut"/>
<parameter id="PoseForCalibrationPlate"/>
<parameter id="SerialHandle"/>
<parameter id="ToolInBasePose"/>
<parameter id="ToolInCamPose"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="g_Error_CamaraOpt_Adq"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Smart_Patron">
<interface>
<oo>
<par name="Image" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="ExposureTime" base_type="ctrl" dimension="0"/>
<par name="Ganancia" base_type="ctrl" dimension="0"/>
<par name="AcqHandle" base_type="ctrl" dimension="0"/>
<par name="ConteoFotoPatron" base_type="ctrl" dimension="0"/>
<par name="errorZ_dentroMargen" base_type="ctrl" dimension="0"/>
<par name="Index" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Estado" base_type="ctrl" dimension="0"/>
<par name="Exception" base_type="ctrl" dimension="0"/>
<par name="ConteoFotoPatron_New" base_type="ctrl" dimension="0"/>
<par name="errorZ_dentroMargen_New" base_type="ctrl" dimension="0"/>
<par name="g_Error_CamaraOpt_Adq" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>try</l>
<l>    FotoN:=1</l>
<l>    Time:=ExposureTime</l>
<l>    Gain:=Ganancia</l>
<l>    Set_exposure_Time_cam_0 (AcqHandle, Time, Gain) </l>
<l>    Get_Image (Image, AcqHandle, g_Error_CamaraOpt_Adq)</l>
<c>    </c>
<l>    if ( g_Error_CamaraOpt_Adq)</l>
<l>        Resultado := 2</l>
<l>        Procesando := 1</l>
<l>        Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>        ConteoFotoPatron_New:=0</l>
<l>        Mensaje:='### ERROR ### Conexion de optica Perdida'</l>
<l>        Send_Data_Info (Mensaje, SerialHandle)</l>
<c>        </c>
<l>        return ()</l>
<l>    endif</l>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<l>* ###########################################  </l>
<l>* ###########################################  </l>
<l>* ###########################################  </l>
<c>    </c>
<l>    dev_resize_window_fit_image(Image, 0, 0, 500, 500)</l>
<l>    dev_display (Image)</l>
<l>    get_image_size (Image, Width, Height)</l>
<c>    </c>
<c>    </c>
<c>    ***********************************************************************</c>
<c>    ****** Guardo las Imagenes ********************************************</c>
<l>    get_system_time (MSecond, Second, Minute, Hour, Day, YDay, Month, Year)</l>
<c>    </c>
<l>    write_object (Image, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/Imagen'+Month+Day+Hour+Second)</l>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    ***  read_image (Image, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/Imagen217938.hobj')</c>
<c>    </c>
<c>    ************************************************************************</c>
<c>    * **************************************************</c>
<c>    * Hand Eye Apunto al Descriptor</c>
<c>    * **************************************************</c>
<l>    Mensaje:='Cargando descriptores de distorcion y de patron'</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<c>    </c>
<l>    Calibration:='5x5_10'</l>
<l>    CalTabFile := 'C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/6.- Caltab Din3/Caltab'+Calibration+'.descr'</l>
<c>    </c>
<l>    Get_Cam_Parameters (StartCamParam, CameraPoseOut)</l>
<c>    </c>
<c>    </c>
<c>    * **************************************************</c>
<l>* # ### Envio data de estado ########################</l>
<l>    Estado := 16</l>
<l>    Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* # #################################################</l>
<c>    * </c>
<l>    Get_Pose_Caltab_Smart (Image, StartCamParam, \
                           CalTabFile, SerialHandle, PoseForCalibrationPlate, EstadoFx, ExceptionFile)</l>
<c>    </c>
<l>     dev_get_window (WindowHandle)</l>
<l>     disp_message (WindowHandle, 'Conteo Fotos -&gt; '+ConteoFotoPatron, 'window', 460, 12, 'black', 'true')</l>
<c>            </c>
<c>    </c>
<c>   </c>
<l>    if (EstadoFx)</l>
<c>        </c>
<c>        ***********************</c>
<l>        errorZ_dentroMargen_New:=true</l>
<l>        PosicionEnZ:=PoseForCalibrationPlate[2]   </l>
<c>        ***********************</c>
<l>        umbral:=3       </l>
<c>        ***********************</c>
<l>        Z_Objetivo:=1625.0</l>
<c>        ***********************</c>
<c>        </c>
<l>        Error_Z:=Z_Objetivo-PosicionEnZ</l>
<l>        disp_message (WindowHandle, 'Error de Altura -&gt; '+Error_Z, 'window', 12, 12, 'black', 'true')</l>
<l>        tuple_abs (Error_Z, Error_Z)</l>
<c>        </c>
<l>        ConteoFotoPatron:=ConteoFotoPatron+1</l>
<l>        ConteoFotoPatron_New:=ConteoFotoPatron</l>
<c>        </c>
<l>        if (Error_Z &gt; umbral and ConteoFotoPatron&gt;3)</l>
<c>            </c>
<l>            Mensaje:='####### ERROR. ####### Z threshold exceeds Maximum' </l>
<l>            disp_message (WindowHandle, Mensaje, 'window', 40, 12, 'black', 'true')</l>
<c>            </c>
<l>            Send_Data_Info (Mensaje, SerialHandle)</l>
<l>            errorZ_dentroMargen_New:=false</l>
<l>            ConteoFotoPatron:=1</l>
<l>            ConteoFotoPatron_New:=ConteoFotoPatron</l>
<l>            return ()</l>
<c>            </c>
<l>        elseif ( PoseForCalibrationPlate[5]&gt;45 and PoseForCalibrationPlate[5]&lt;315)</l>
<l>            Distancia_Cero := PoseForCalibrationPlate[5]</l>
<l>            Mensaje:='####### ERROR. ####### Patron detectado AL REVEZ' </l>
<l>            Send_Data_Info (Mensaje, SerialHandle)</l>
<l>            errorZ_dentroMargen_New:=false</l>
<l>            ConteoFotoPatron:=1</l>
<l>            ConteoFotoPatron_New:=ConteoFotoPatron</l>
<l>            return ()</l>
<c>            </c>
<l>        elseif (ConteoFotoPatron&gt;3)</l>
<l>            ConteoFotoPatron:=1</l>
<l>            ConteoFotoPatron_New:=ConteoFotoPatron</l>
<c>            </c>
<l>        endif</l>
<c>            </c>
<l>            Estado := 14</l>
<l>            Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<c>            * *******************************</c>
<c>            * Enviar por ETHERNETIP</c>
<c>            * *******************************      </c>
<c>            * # ### Envio data de estado ########################</c>
<l>            Estado := 17</l>
<l>            Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<c>            * # #################################################</c>
<c>            </c>
<c>            </c>
<l>            Send_Data_To_Robot(PoseForCalibrationPlate, SerialHandle)       </l>
<l>            Resultado := 1</l>
<l>            Procesando := 1</l>
<l>            Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<c>            * # #################################################</c>
<l>            Estado:=EstadoFx</l>
<c>       </c>
<c>        </c>
<l>    else</l>
<c>        </c>
<l>        Estado:=false</l>
<l>        Mensaje:='####### FIN BLOQUE 2. ERROR en Busqueda N°-&gt;'+Index+' de patron #######' </l>
<l>        Send_Data_Info (Mensaje, SerialHandle)</l>
<c>        </c>
<l>        ConteoFotoPatron_New:=0</l>
<c>        </c>
<l>    endif</l>
<c>    </c>
<c>    </c>
<l>*     Exception:= ExceptionFile</l>
<c>    </c>
<c>    </c>
<l>    return ()</l>
<c>    </c>
<l>catch (Exception)</l>
<c>    </c>
<l>*     write_object (Image, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/ImagenNODECT_'+Month+Day+Hour+Second)</l>
<l>    Resultado := 2</l>
<l>    Procesando := 1</l>
<l>    Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>    ConteoFotoPatron_New:=1</l>
<c>    </c>
<l>    return ()</l>
<c>    </c>
<l>* # #################################################</l>
<c>    </c>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="Get_Smart_Patron">
<parameters>
<parameter id="AcqHandle"/>
<parameter id="ConteoFotoPatron"/>
<parameter id="ConteoFotoPatron_New"/>
<parameter id="Estado"/>
<parameter id="Exception"/>
<parameter id="ExposureTime"/>
<parameter id="Ganancia"/>
<parameter id="Image"/>
<parameter id="Index"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="errorZ_dentroMargen"/>
<parameter id="errorZ_dentroMargen_New"/>
<parameter id="g_Error_CamaraOpt_Adq"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Pose_Caltab_Smart">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="CameraParameters" base_type="ctrl" dimension="0"/>
<par name="CalTabFile" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="PoseForCalibrationPlate" base_type="ctrl" dimension="0"/>
<par name="EstadoFx" base_type="ctrl" dimension="0"/>
<par name="ExceptionFile" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c>**CameraParameters := ['area_scan_polynomial', 0.018406, 262.218, -603708.2, 1.62832e+008, -0.0279007, 0.0239709, 5.48842e-006, 5.5e-006, 2450.41, 1628.48, 4896, 3264]</c>
<c></c>
<c>**gen_cam_par_area_scan_division (0.018406, 0, 5.2e-006, 5.2e-006, 640, 512, 1280, 1024, CameraParam)</c>
<l>gen_cam_par_area_scan_polynomial (0.018406, \
                                  262.218, -603708.2, 1.62832e8,\
                                  -0.0279007, 0.023709, \
                                  5.48842e-6, 5.5e-6, \
                                  2450.41, 1628.48,\
                                  4896, 3264, CameraParam)</l>
<l>try</l>
<l>    ImageOut := Image</l>
<c>    </c>
<l>    dev_get_window (WindowHandle)</l>
<c>    </c>
<l>    create_calib_data ('hand_eye_moving_cam', 1, 1, CalibDataID)</l>
<c>    </c>
<c>    </c>
<c>    **   gen_cam_par_area_scan_polynomial (0.018406, \
    262.218, -603708.2, 1.62832e8,\
    -0.0279007, 0.023709, \
    5.48842e-6, 5.5e-6, \
    2450.41, 1628.48,\
    4896, 3264, CameraParam)</c>
<c>    </c>
<c>    </c>
<l>    set_calib_data_cam_param (CalibDataID, 0, [], CameraParameters)</l>
<l>    set_calib_data_calib_object (CalibDataID, 0, CalTabFile)</l>
<l>    set_calib_data (CalibDataID, 'model', 'general', 'optimization_method', 'nonlinear')</l>
<c>    * </c>
<l>    find_calib_object (ImageOut, CalibDataID, 0, 0, 0, [], [])</l>
<c>    </c>
<l>*     find_caltab (Image, CalPlate, CalTabFile, 11, 100, 20)</l>
<l>*     find_marks_and_pose (Image, CalPlate, CalTabFile, CameraParameters, 128, 10, 18, 0.9, 15, 100, RCoord1, CCoord1, StartPose)</l>
<l>*     dev_set_color ('blue')</l>
<l>*     disp_cross (200000, RCoord1, CCoord1, 40, StartPose[5])</l>
<c>    * </c>
<l>    get_calib_data_observ_contours (Caltab, CalibDataID, 'caltab', 0, 0, 0)</l>
<l>    get_calib_data_observ_points (CalibDataID, 0, 0, 0, RCoord, CCoord, Index, PoseForCalibrationPlate)</l>
<l>    disp_cross (WindowHandle, RCoord, CCoord, 50, 0)</l>
<c>    * *****************************************************************</c>
<c>    * Si quiero [mm]</c>
<l>    dev_set_colored (3)</l>
<l>    disp_3d_coord_system (WindowHandle, CameraParameters, PoseForCalibrationPlate, 0.20)</l>
<c>    </c>
<c>    *****************************   </c>
<l>    OsffetX:= (3.07)*0</l>
<l>    OsffetY:= (-1.23)*0</l>
<l>    OsffetZ:= (0)*0</l>
<c>    *****************************</c>
<c>    </c>
<l>    PoseForCalibrationPlate[0]:=PoseForCalibrationPlate[0]+OsffetX*1e-3</l>
<l>    PoseForCalibrationPlate[1]:=PoseForCalibrationPlate[1]+OsffetY*1e-3</l>
<l>    PoseForCalibrationPlate[2]:=PoseForCalibrationPlate[2]+OsffetZ*1e-3</l>
<c>    </c>
<c>    *****************************</c>
<c>    </c>
<l>    PoseForCalibrationPlate[0:2] := PoseForCalibrationPlate[0:2]*1000  </l>
<l>    PoseForCalibrationPlate[3]:= PoseForCalibrationPlate[3]*0</l>
<l>    PoseForCalibrationPlate[4]:=PoseForCalibrationPlate[4]*0</l>
<c>    </c>
<l>*     dev_inspect_ctrl(PoseForCalibrationPlate)</l>
<l>    PoseDisplay:=PoseForCalibrationPlate</l>
<l>    ObjInCamPose:=PoseForCalibrationPlate</l>
<c>    </c>
<c>    * ****************************************************************</c>
<c>    </c>
<l>    Length := |RCoord|</l>
<l>    texto[0] := 'Org X: '</l>
<l>    texto[1] := 'Org Y: '</l>
<l>    texto[2] := 'Org Z: '</l>
<l>    texto[3] := 'Org C: '</l>
<l>    texto[4] := 'Org B: '</l>
<l>    texto[5] := 'Org A: '</l>
<l>    texto[6] := ' '</l>
<c>    * </c>
<l>    N_ossf := 13</l>
<l>    dev_disp_text (texto+PoseDisplay, 'image', RCoord[Length-N_ossf], CCoord[Length-N_ossf], 'black', 'box_color', '#ffffff77')</l>
<c>    </c>
<l>    clear_calib_data (CalibDataID)</l>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<l>*     create_pose (146.76	,-240.08	,124.95	, 0,0,0, 'Rp+T', 'abg', 'point', CamInToolPose)   </l>
<l>*     create_pose (-2131.04	,1016.65	,934.05,	90,	0,	-180, 'Rp+T', 'gba', 'point', CamInBasePose)</l>
<c>    </c>
<l>*     create_pose (-2162.5	,1004.00	,-690, 90, 0, -180, 'Rp+T', 'abg', 'point', ObjInBaseReal)</l>
<c>    </c>
<l>*     pose_compose (CamInBasePose, ObjInCamPose, ObjInBasePose)</l>
<c>   </c>
<l>*     Error :=ObjInBaseReal-ObjInBasePose</l>
<c>    </c>
<l>*     dev_inspect_ctrl (ObjInBaseReal)</l>
<l>*     dev_inspect_ctrl (ObjInBasePose)</l>
<l>*     dev_inspect_ctrl (Error)</l>
<c>    </c>
<c>    </c>
<l>    EstadoFx:=true</l>
<l>catch (Exception)</l>
<l>    EstadoFx:=false</l>
<l>    ExceptionFile:=Exception</l>
<c>    </c>
<l>endtry</l>
<c>* </c>
<l>return ()</l>
<c>* </c>
<c>* </c>
</body>
<docu id="Get_Pose_Caltab_Smart">
<parameters>
<parameter id="CalTabFile"/>
<parameter id="CameraParameters"/>
<parameter id="EstadoFx"/>
<parameter id="ExceptionFile"/>
<parameter id="Image"/>
<parameter id="PoseForCalibrationPlate"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Pose_Caltab_Smart_COPY_1">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="CameraParameters" base_type="ctrl" dimension="0"/>
<par name="CalTabFile" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="PoseForCalibrationPlate" base_type="ctrl" dimension="0"/>
<par name="EstadoFx" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>try</l>
<l>    ImageOut := Image</l>
<c></c>
<l>    dev_get_window (WindowHandle)</l>
<c></c>
<l>    create_calib_data ('hand_eye_moving_cam', 1, 1, CalibDataID)</l>
<l>    set_calib_data_cam_param (CalibDataID, 0, [], CameraParameters)</l>
<l>    set_calib_data_calib_object (CalibDataID, 0, CalTabFile)</l>
<l>    set_calib_data (CalibDataID, 'model', 'general', 'optimization_method', 'nonlinear')</l>
<c></c>
<l>    find_calib_object (ImageOut, CalibDataID, 0, 0, 0, [], [])</l>
<c></c>
<l>*     find_caltab (Image, CalPlate, CalTabFile, 11, 100, 20)</l>
<l>*     find_marks_and_pose (Image, CalPlate, CalTabFile, CameraParameters, 128, 10, 18, 0.9, 15, 100, RCoord1, CCoord1, StartPose)</l>
<l>*     dev_set_color ('blue')</l>
<l>*     disp_cross (200000, RCoord1, CCoord1, 40, StartPose[5])</l>
<c></c>
<l>    get_calib_data_observ_contours (Caltab, CalibDataID, 'caltab', 0, 0, 0)</l>
<l>    get_calib_data_observ_points (CalibDataID, 0, 0, 0, RCoord, CCoord, Index, PoseForCalibrationPlate)</l>
<l>    disp_cross (WindowHandle, RCoord, CCoord, 50, 0)</l>
<c>    * *****************************************************************</c>
<c>    * Si quiero [mm]</c>
<l>    dev_set_colored (3)</l>
<l>    disp_3d_coord_system (WindowHandle, CameraParameters, PoseForCalibrationPlate, 0.20)</l>
<c></c>
<c>    * ****************************</c>
<l>    OsffetX := 23.8</l>
<l>    OsffetY := 17.19</l>
<l>    OsffetZ := 5.08</l>
<c>    * ****************************</c>
<c></c>
<l>    PoseForCalibrationPlate[0] := PoseForCalibrationPlate[0]+OsffetX*1e-3</l>
<l>    PoseForCalibrationPlate[1] := PoseForCalibrationPlate[1]+OsffetY*1e-3</l>
<l>    PoseForCalibrationPlate[2] := PoseForCalibrationPlate[2]+OsffetZ*1e-3</l>
<c></c>
<c>    * ****************************</c>
<c></c>
<l>    PoseForCalibrationPlate[0:2] := PoseForCalibrationPlate[0:2]*1000</l>
<l>    PoseForCalibrationPlate[3] := PoseForCalibrationPlate[3]*0</l>
<l>    PoseForCalibrationPlate[4] := PoseForCalibrationPlate[4]*0</l>
<c></c>
<c></c>
<l>*     dev_inspect_ctrl (PoseForCalibrationPlate)</l>
<l>    PoseDisplay := PoseForCalibrationPlate</l>
<c></c>
<c></c>
<c></c>
<c>    * ****************************************************************</c>
<c></c>
<l>*     dev_inspect_ctrl (PoseForCalibrationPlate)</l>
<c></c>
<c></c>
<c></c>
<l>    Length := |RCoord|</l>
<l>    texto[0] := 'Org X: '</l>
<l>    texto[1] := 'Org Y: '</l>
<l>    texto[2] := 'Org Z: '</l>
<l>    texto[3] := 'Org C: '</l>
<l>    texto[4] := 'Org B: '</l>
<l>    texto[5] := 'Org A: '</l>
<l>    texto[6] := ' '</l>
<c></c>
<l>    N_ossf := 13</l>
<l>    dev_disp_text (texto+PoseDisplay, 'image', RCoord[Length-N_ossf], CCoord[Length-N_ossf], 'black', 'box_color', '#ffffff77')</l>
<c></c>
<l>    clear_calib_data (CalibDataID)</l>
<c></c>
<c></c>
<l>    EstadoFx := true</l>
<l>catch (Exception)</l>
<l>    EstadoFx := false</l>
<c></c>
<c></c>
<l>endtry</l>
<c></c>
<l>return ()</l>
<c></c>
<c></c>
</body>
<docu id="Get_Pose_Caltab_Smart_COPY_1">
<parameters>
<parameter id="CalTabFile"/>
<parameter id="CameraParameters"/>
<parameter id="EstadoFx"/>
<parameter id="Image"/>
<parameter id="PoseForCalibrationPlate"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Min_Altura">
<interface>
<io>
<par name="Zred" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="ImageGauss" base_type="iconic" dimension="0"/>
<par name="LocalMaxima" base_type="iconic" dimension="0"/>
<par name="ConnectedRegions" base_type="iconic" dimension="0"/>
</oo>
<oc>
<par name="AlturaBase" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>gauss_filter (Zred, ImageGauss, 11)</l>
<l>gauss_filter (ImageGauss, ImageGauss, 11)</l>
<c></c>
<c></c>
<l>local_max (ImageGauss, LocalMaxima)</l>
<l>connection (LocalMaxima, ConnectedRegions)</l>
<l>area_center (ConnectedRegions, Area, Row, Column)</l>
<l>get_grayval (ImageGauss, Row, Column, Grayval)</l>
<c></c>
<l>tuple_max (Grayval, AlturaBase)</l>
<l>return ()</l>
</body>
<docu id="Get_Min_Altura">
<parameters>
<parameter id="AlturaBase"/>
<parameter id="ConnectedRegions"/>
<parameter id="ImageGauss"/>
<parameter id="LocalMaxima"/>
<parameter id="Zred"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Max_Altura">
<interface>
<io>
<par name="Zred" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="ImageGauss" base_type="iconic" dimension="0"/>
<par name="LocalMaxima" base_type="iconic" dimension="0"/>
<par name="ConnectedRegions" base_type="iconic" dimension="0"/>
</oo>
<oc>
<par name="AlturaBase" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>gauss_filter (Zred, ImageGauss, 11)</l>
<l>gauss_filter (ImageGauss, ImageGauss, 11)</l>
<c></c>
<c></c>
<l>local_max (ImageGauss, LocalMaxima)</l>
<l>connection (LocalMaxima, ConnectedRegions)</l>
<l>area_center (ConnectedRegions, Area, Row, Column)</l>
<l>get_grayval (ImageGauss, Row, Column, Grayval)</l>
<c></c>
<l>tuple_max (Grayval, AlturaBase)</l>
<l>return ()</l>
</body>
<docu id="Get_Max_Altura">
<parameters>
<parameter id="AlturaBase"/>
<parameter id="ConnectedRegions"/>
<parameter id="ImageGauss"/>
<parameter id="LocalMaxima"/>
<parameter id="Zred"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_EsquinasPattern_COPY_1">
<interface>
<ic>
<par name="Grayval" base_type="ctrl" dimension="0"/>
<par name="RowToFind" base_type="ctrl" dimension="0"/>
<par name="ColumToFind" base_type="ctrl" dimension="0"/>
<par name="Width" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="FilaPattern" base_type="ctrl" dimension="0"/>
<par name="ColumnasPattern" base_type="ctrl" dimension="0"/>
<par name="Ptr_Min" base_type="ctrl" dimension="0"/>
<par name="Ptr_Min2" base_type="ctrl" dimension="0"/>
<par name="Ptr_Min3" base_type="ctrl" dimension="0"/>
<par name="EsquinaDetectadas" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>GrayvalOut := Grayval</l>
<c></c>
<c></c>
<l>dev_get_window (WindowHandle)</l>
<l>EsquinaDetectadas := false</l>
<l>try</l>
<c></c>
<c></c>
<c></c>
<c>    * *************************************************</c>
<c>    * ** Umbral Corner Response</c>
<l>    Umbral := 2100</l>
<c>    * *************************************************</c>
<l>    Ptros := 0</l>
<l>    AuxPtr := 0</l>
<l>    for Idx := 0 to |GrayvalOut|-1 by 1</l>
<l>        if (GrayvalOut[Idx]&gt;Umbral)</l>
<l>            Ptros[AuxPtr] := Idx</l>
<l>            AuxPtr := AuxPtr+1</l>
<l>            GrayvalOut[Idx] := -1</l>
<l>        endif</l>
<l>    endfor</l>
<l>    Umbral := 0</l>
<l>    for Idx := 0 to |GrayvalOut|-1 by 1</l>
<l>        if (GrayvalOut[Idx]&gt;Umbral)</l>
<l>            Umbral := GrayvalOut[Idx]</l>
<l>            Ptros[3] := Idx</l>
<l>        endif</l>
<l>    endfor</l>
<c></c>
<l>    for Idx := 0 to 3 by 1</l>
<l>        FilaPattern[Idx] := RowToFind[Ptros[Idx]]</l>
<l>        ColumnasPattern[Idx] := ColumToFind[Ptros[Idx]]</l>
<l>    endfor</l>
<c></c>
<l>    disp_cross (WindowHandle, FilaPattern, ColumnasPattern, 50, 0)</l>
<c></c>
<c></c>
<l>    for Idx := 0 to 3 by 1</l>
<l>        tuple_pow (FilaPattern[Idx], 2, Pow1)</l>
<l>        tuple_pow (ColumnasPattern[Idx], 2, Pow2)</l>
<l>        tuple_sqrt (Pow1+Pow2, Sqrt)</l>
<l>        DistVectorial[Idx] := Sqrt</l>
<l>    endfor</l>
<c></c>
<c></c>
<l>    AuxMin := DistVectorial[0]</l>
<l>    Ptr_Min := 0</l>
<l>    for Idx := 0 to |DistVectorial|-1 by 1</l>
<l>        if (DistVectorial[Idx]&lt;AuxMin)</l>
<l>            Ptr_Min := Idx</l>
<l>            AuxMin := DistVectorial[Idx]</l>
<l>        endif</l>
<l>    endfor</l>
<c></c>
<c></c>
<c></c>
<l>    for Idx := 0 to 3 by 1</l>
<l>        tuple_pow (FilaPattern[Idx], 2, Pow1)</l>
<l>        tuple_pow (Width-ColumnasPattern[Idx], 2, Pow2)</l>
<l>        tuple_sqrt (Pow1+Pow2, Sqrt)</l>
<l>        DistVectorial2[Idx] := Sqrt</l>
<l>    endfor</l>
<c></c>
<l>    AuxMin2 := DistVectorial2[0]</l>
<l>    Ptr_Min2 := 0</l>
<l>    for Idx := 0 to |DistVectorial2|-1 by 1</l>
<l>        if (DistVectorial2[Idx]&lt;AuxMin2)</l>
<l>            Ptr_Min2 := Idx</l>
<l>            AuxMin2 := DistVectorial2[Idx]</l>
<l>        endif</l>
<l>    endfor</l>
<c></c>
<c></c>
<l>    for Idx := 0 to 3 by 1</l>
<l>        tuple_pow (Width-FilaPattern[Idx], 2, Pow1)</l>
<l>        tuple_pow (ColumnasPattern[Idx], 2, Pow2)</l>
<l>        tuple_sqrt (Pow1+Pow2, Sqrt)</l>
<l>        DistVectorial3[Idx] := Sqrt</l>
<l>    endfor</l>
<c></c>
<l>    AuxMin3 := DistVectorial3[0]</l>
<l>    Ptr_Min3 := 0</l>
<l>    for Idx := 0 to |DistVectorial3|-1 by 1</l>
<l>        if (DistVectorial3[Idx]&lt;AuxMin3)</l>
<l>            Ptr_Min3 := Idx</l>
<l>            AuxMin3 := DistVectorial3[Idx]</l>
<l>        endif</l>
<l>    endfor</l>
<c></c>
<l>    EsquinaDetectadas := true</l>
<l>catch (Exception)</l>
<l>    EsquinaDetectadas := false</l>
<c></c>
<c></c>
<l>endtry</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_EsquinasPattern_COPY_1">
<parameters>
<parameter id="ColumToFind"/>
<parameter id="ColumnasPattern"/>
<parameter id="EsquinaDetectadas"/>
<parameter id="FilaPattern"/>
<parameter id="Grayval"/>
<parameter id="Ptr_Min"/>
<parameter id="Ptr_Min2"/>
<parameter id="Ptr_Min3"/>
<parameter id="RowToFind"/>
<parameter id="Width"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Core_ToUse_From_BDD_Fast_COPY_7">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Cod_Core_ToUse" base_type="ctrl" dimension="0"/>
<par name="Pallet_To_Scan" base_type="ctrl" dimension="0"/>
<par name="Segmento_To_Scan" base_type="ctrl" dimension="0"/>
<par name="PitutoExist" base_type="ctrl" dimension="0"/>
<par name="FXcheck" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>FXcheck := false</l>
<l>for Index := 1 to 5 by 1</l>
<c></c>
<c></c>
<l>    try</l>
<l>        Variable_BD := 'ram_actualproduction'</l>
<l>        Get_Pallet_Bd_Fast_COPY_1 (Variable_BD, SerialHandle, DataBD, FXcheck)</l>
<c></c>
<l>        Cod_Core_ToUse := DataBD[3]</l>
<l>        Cod_Core_ToUseAux := DataBD[3]</l>
<l>        Pallet_To_Scan := DataBD[15]</l>
<l>        Segmento_To_Scan := DataBD[16]</l>
<l>        PitutoExist := DataBD[5]</l>
<c></c>
<c></c>
<l>        FXcheck := true</l>
<c></c>
<l>        return ()</l>
<l>    catch (Exception)</l>
<c></c>
<l>*         Mensaje := '### ERROR ### -&gt; Entidad Requerida -&gt; '+Cod_Core_ToUse+' &lt;- RAM base DATOS no CARGADA.'</l>
<l>*         Send_Data_Info (Mensaje, SerialHandle)</l>
<l>        Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<l>        FXcheck := false</l>
<l>    endtry</l>
<l>endfor</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Core_ToUse_From_BDD_Fast_COPY_7">
<parameters>
<parameter id="Cod_Core_ToUse"/>
<parameter id="FXcheck"/>
<parameter id="Pallet_To_Scan"/>
<parameter id="PitutoExist"/>
<parameter id="Segmento_To_Scan"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Core_ToUse_From_BDD_Fast_COPY_8">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Cod_Core_ToUse" base_type="ctrl" dimension="0"/>
<par name="Pallet_To_Scan" base_type="ctrl" dimension="0"/>
<par name="Segmento_To_Scan" base_type="ctrl" dimension="0"/>
<par name="PitutoExist" base_type="ctrl" dimension="0"/>
<par name="FXcheck" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>FXcheck := false</l>
<l>for Index := 1 to 5 by 1</l>
<c></c>
<c></c>
<l>    try</l>
<l>        Variable_BD := 'ram_actualproduction'</l>
<l>        Get_Pallet_Bd_Fast_COPY_1 (Variable_BD, SerialHandle, DataBD, FXcheck)</l>
<c></c>
<l>        Cod_Core_ToUse := DataBD[3]</l>
<l>        Cod_Core_ToUseAux := DataBD[3]</l>
<l>        Pallet_To_Scan := DataBD[15]</l>
<l>        Segmento_To_Scan := DataBD[16]</l>
<l>        PitutoExist := DataBD[5]</l>
<c></c>
<c></c>
<l>        FXcheck := true</l>
<c></c>
<l>        return ()</l>
<l>    catch (Exception)</l>
<c></c>
<l>*         Mensaje := '### ERROR ### -&gt; Entidad Requerida -&gt; '+Cod_Core_ToUse+' &lt;- RAM base DATOS no CARGADA.'</l>
<l>*         Send_Data_Info (Mensaje, SerialHandle)</l>
<l>        Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<l>        FXcheck := false</l>
<l>    endtry</l>
<l>endfor</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Core_ToUse_From_BDD_Fast_COPY_8">
<parameters>
<parameter id="Cod_Core_ToUse"/>
<parameter id="FXcheck"/>
<parameter id="Pallet_To_Scan"/>
<parameter id="PitutoExist"/>
<parameter id="Segmento_To_Scan"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_PunteroBDD">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="VarSerial" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>    </c>
<c></c>
<l>try</l>
<c>    * </c>
<l>    Peticion := 'BaseDatos;PunteroBDD'</l>
<c>  </c>
<l>    write_serial (SerialHandle, ords(Peticion))</l>
<c></c>
<c></c>
<l>    DatoOk:=0 </l>
<l>    Conteo:=0</l>
<l>    while(DatoOk&lt;1 and Conteo&lt;50)</l>
<c>       </c>
<c>        *Numero de caracteres a leer</c>
<l>        read_serial (SerialHandle, 10, Nchar)</l>
<l>        Nchar:= chrt(Nchar)</l>
<l>        DatoOk:=|Nchar|</l>
<l>        tuple_number (Nchar, VarSerial)</l>
<l>          Conteo:=  Conteo+1</l>
<l>     FXcheck:=true</l>
<l>    endwhile</l>
<c></c>
<l>    if (Conteo&gt;=10)</l>
<c>        </c>
<l>        FXcheck:=false</l>
<l>    else</l>
<l>        FXcheck:=true</l>
<l>    endif</l>
<c></c>
<l>catch (Exception)</l>
<l>    Send_Data_Error (Exception, SerialHandle, FXcheck)</l>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="Get_PunteroBDD">
<parameters>
<parameter id="SerialHandle"/>
<parameter id="VarSerial"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_PunteroBDD_COPY_1">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="VarSerial" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<l>try</l>
<c></c>
<l>    Peticion := 'BaseDatos;PunteroBDD'</l>
<c></c>
<l>    write_serial (SerialHandle, ords(Peticion))</l>
<c></c>
<c></c>
<l>    DatoOk := 0</l>
<l>    Conteo := 0</l>
<l>    while (DatoOk&lt;1 and Conteo&lt;50)</l>
<c></c>
<c>        * Numero de caracteres a leer</c>
<l>        read_serial (SerialHandle, 10, Nchar)</l>
<l>        Nchar := chrt(Nchar)</l>
<l>        DatoOk := |Nchar|</l>
<l>        tuple_number (Nchar, VarSerial)</l>
<l>        Conteo := Conteo+1</l>
<l>        FXcheck := true</l>
<l>    endwhile</l>
<c></c>
<l>    if (Conteo&gt;=10)</l>
<c></c>
<l>        FXcheck := false</l>
<l>    else</l>
<l>        FXcheck := true</l>
<l>    endif</l>
<c></c>
<l>catch (Exception)</l>
<c></c>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="Get_PunteroBDD_COPY_1">
<parameters>
<parameter id="SerialHandle"/>
<parameter id="VarSerial"/>
</parameters>
</docu>
</procedure>
<procedure name="RECETA_AUTOMATICA">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Receta" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>  </c>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    while(Receta)</l>
<c>*********************************</c>
<c>*     ENTIDAD A GUARDAR</c>
<c>*********************************       </c>
<l>     Entidad:='MANGA'</l>
<c>*********************************  </c>
<c>     </c>
<l>        Get_Robot_Pose(SerialHandle,ToolInBasePoseIni)   </l>
<c>        </c>
<l>        while(Receta)</l>
<c>            </c>
<l>            Get_Robot_Pose_COPY_1(SerialHandle,ToolInBasePose)</l>
<l>            dev_inspect_ctrl (ToolInBasePose)</l>
<l>            Derivada:=ToolInBasePoseIni-ToolInBasePose</l>
<c>            </c>
<l>            TodosCeros:=0</l>
<l>            for Index := 0 to |ToolInBasePose|-1 by 1</l>
<l>                if (Derivada[Index] != 0)</l>
<l>                    TodosCeros:=TodosCeros+1     </l>
<l>                endif</l>
<c>                </c>
<l>            endfor</l>
<c>            </c>
<c>            </c>
<l>            if (TodosCeros&gt;0)</l>
<c>                </c>
<l>                Get_Robot_Pose(SerialHandle,ToolInBasePose)</l>
<l>                Get_Robot_Pose(SerialHandle,ToolInBasePose)</l>
<l>                Get_Robot_Pose(SerialHandle,ToolInBasePose)</l>
<l>                open_file('C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/1.- BD/Receta.csv','append',FileHandle)</l>
<c>                </c>
<c>                </c>
<l>                OffsetZ:=0</l>
<c>           </c>
<l>                Zpos:=ToolInBasePose[2]+OffsetZ</l>
<c>                </c>
<l>                Datos:=Entidad+';'+ToolInBasePose[0]+';'+ToolInBasePose[1]+';'+Zpos+';'+ToolInBasePose[5]+';'+ToolInBasePose[4]+';'+ToolInBasePose[3]</l>
<l>                fwrite_string(FileHandle,Datos)</l>
<l>                fnew_line(FileHandle)</l>
<l>                close_file(FileHandle)</l>
<c>                </c>
<l>            endif</l>
<c>            </c>
<l>            ToolInBasePoseIni:=ToolInBasePose</l>
<c>            </c>
<c>            </c>
<l>        endwhile</l>
<l>    endwhile</l>
<l>return ()</l>
</body>
<docu id="RECETA_AUTOMATICA">
<parameters>
<parameter id="Receta"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Is_Camera_Online">
<interface>
<ic>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="AcqHandle_Cam_0" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="CamerasConection_In" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="CamerasConection" base_type="ctrl" dimension="0"/>
<par name="Exception" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>try</l>
<c>    </c>
<l>    IsCamerasOnline (NxLib, AcqHandle_Cam_0, SerialHandle, CamerasConection_In, CamerasConection)</l>
<c>    </c>
<l>    if (CamerasConection[0]=0 )</l>
<c>        </c>
<l>        Send_Data_Info ('### ERROR ### CAMARA  ESTEREO DESCONECTADA', SerialHandle)</l>
<c>        </c>
<l>    endif</l>
<l>    if ( CamerasConection[1] = 0)</l>
<c>        </c>
<l>        Send_Data_Info ('### ERROR ### CAMARA  OPTICA DESCONECTADA', SerialHandle)</l>
<c>        </c>
<l>    endif</l>
<c>    </c>
<l>catch (Exception)</l>
<c>    </c>
<l>endtry</l>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Is_Camera_Online">
<parameters>
<parameter id="AcqHandle_Cam_0"/>
<parameter id="CamerasConection"/>
<parameter id="CamerasConection_In"/>
<parameter id="Exception"/>
<parameter id="NxLib"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Pose_Caltab_Smart_COPY_2">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="CameraParameters" base_type="ctrl" dimension="0"/>
<par name="CalTabFile" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="PoseForCalibrationPlate" base_type="ctrl" dimension="0"/>
<par name="EstadoFx" base_type="ctrl" dimension="0"/>
<par name="ExceptionFile" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>try</l>
<l>    ImageOut := Image</l>
<c></c>
<l>    dev_get_window (WindowHandle)</l>
<c></c>
<l>    create_calib_data ('hand_eye_moving_cam', 1, 1, CalibDataID)</l>
<l>    set_calib_data_cam_param (CalibDataID, 0, [], CameraParameters)</l>
<l>    set_calib_data_calib_object (CalibDataID, 0, CalTabFile)</l>
<l>    set_calib_data (CalibDataID, 'model', 'general', 'optimization_method', 'nonlinear')</l>
<c></c>
<l>    find_calib_object (ImageOut, CalibDataID, 0, 0, 0, [], [])</l>
<c></c>
<l>*     find_caltab (Image, CalPlate, CalTabFile, 11, 100, 20)</l>
<l>*     find_marks_and_pose (Image, CalPlate, CalTabFile, CameraParameters, 128, 10, 18, 0.9, 15, 100, RCoord1, CCoord1, StartPose)</l>
<l>*     dev_set_color ('blue')</l>
<l>*     disp_cross (200000, RCoord1, CCoord1, 40, StartPose[5])</l>
<c></c>
<l>    get_calib_data_observ_contours (Caltab, CalibDataID, 'caltab', 0, 0, 0)</l>
<l>    get_calib_data_observ_points (CalibDataID, 0, 0, 0, RCoord, CCoord, Index, PoseForCalibrationPlate)</l>
<l>    disp_cross (WindowHandle, RCoord, CCoord, 50, 0)</l>
<c>    * *****************************************************************</c>
<c>    * Si quiero [mm]</c>
<l>    dev_set_colored (3)</l>
<l>    disp_3d_coord_system (WindowHandle, CameraParameters, PoseForCalibrationPlate, 0.20)</l>
<c></c>
<c>    * ****************************</c>
<l>    OsffetX := 23.8</l>
<l>    OsffetY := 17.19</l>
<l>    OsffetZ := 5.08</l>
<c>    * ****************************</c>
<c></c>
<l>    PoseForCalibrationPlate[0] := PoseForCalibrationPlate[0]+OsffetX*1e-3</l>
<l>    PoseForCalibrationPlate[1] := PoseForCalibrationPlate[1]+OsffetY*1e-3</l>
<l>    PoseForCalibrationPlate[2] := PoseForCalibrationPlate[2]+OsffetZ*1e-3</l>
<c></c>
<c>    * ****************************</c>
<c></c>
<l>    PoseForCalibrationPlate[0:2] := PoseForCalibrationPlate[0:2]*1000</l>
<l>    PoseForCalibrationPlate[3] := PoseForCalibrationPlate[3]*0</l>
<l>    PoseForCalibrationPlate[4] := PoseForCalibrationPlate[4]*0</l>
<c></c>
<c></c>
<l>*     dev_inspect_ctrl (PoseForCalibrationPlate)</l>
<l>    PoseDisplay := PoseForCalibrationPlate</l>
<c></c>
<c></c>
<c></c>
<c>    * ****************************************************************</c>
<c></c>
<l>*     dev_inspect_ctrl (PoseForCalibrationPlate)</l>
<c></c>
<c></c>
<c></c>
<l>    Length := |RCoord|</l>
<l>    texto[0] := 'Org X: '</l>
<l>    texto[1] := 'Org Y: '</l>
<l>    texto[2] := 'Org Z: '</l>
<l>    texto[3] := 'Org C: '</l>
<l>    texto[4] := 'Org B: '</l>
<l>    texto[5] := 'Org A: '</l>
<l>    texto[6] := ' '</l>
<c></c>
<l>    N_ossf := 13</l>
<l>    dev_disp_text (texto+PoseDisplay, 'image', RCoord[Length-N_ossf], CCoord[Length-N_ossf], 'black', 'box_color', '#ffffff77')</l>
<c></c>
<l>    clear_calib_data (CalibDataID)</l>
<c></c>
<c></c>
<l>    EstadoFx := true</l>
<l>catch (Exception)</l>
<l>    EstadoFx := false</l>
<l>    ExceptionFile := Exception</l>
<c></c>
<l>endtry</l>
<c></c>
<l>return ()</l>
<c></c>
<c></c>
</body>
<docu id="Get_Pose_Caltab_Smart_COPY_2">
<parameters>
<parameter id="CalTabFile"/>
<parameter id="CameraParameters"/>
<parameter id="EstadoFx"/>
<parameter id="ExceptionFile"/>
<parameter id="Image"/>
<parameter id="PoseForCalibrationPlate"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_Position_A_Ciegas">
<interface>
<ic>
<par name="Cod_Core_ToUse" base_type="ctrl" dimension="0"/>
<par name="ConteoCirculares" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="PoseMLS" base_type="ctrl" dimension="0"/>
<par name="Delta_X" base_type="ctrl" dimension="0"/>
<par name="Delta_Y" base_type="ctrl" dimension="0"/>
<par name="Delta_Z" base_type="ctrl" dimension="0"/>
<par name="Estado" base_type="ctrl" dimension="0"/>
<par name="Procesando" base_type="ctrl" dimension="0"/>
<par name="Resultado" base_type="ctrl" dimension="0"/>
<par name="ConteoCircularesOut" base_type="ctrl" dimension="0"/>
<par name="ConteoCirculares_New" base_type="ctrl" dimension="0"/>
<par name="ExitBloque3" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>ConteoCircularesOut := ConteoCirculares</l>
<l>if (Cod_Core_ToUse='VSAA')</l>
<c>    </c>
<l>    if (ConteoCircularesOut&gt;0)</l>
<l>        read_pose ('C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/5.-Ing Software/3 Consolidado R1/PoseCirculares.dat', \
                   PoseMLS)</l>
<c>        </c>
<l>        Delta_X:= (  -5   )*1</l>
<l>        Delta_Y:=(-3     -7)*1</l>
<l>        Delta_Z:=-3.5   +2</l>
<c>        </c>
<c>        </c>
<l>        PoseMLS[0]:=PoseMLS[0]+Delta_X</l>
<l>        PoseMLS[1]:=PoseMLS[1]+Delta_Y</l>
<l>        PoseMLS[2] := PoseMLS[2]+Delta_Z+12.7*ConteoCircularesOut</l>
<c>        </c>
<c>        </c>
<l>        Send_Data_To_Robot(PoseMLS,SerialHandle)</l>
<c>        </c>
<l>        Estado := 13</l>
<l>        Procesando := 0</l>
<l>        Resultado := 1</l>
<l>        Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>        Send_Data_Info('BLOQUE 3 FINALIZADO', SerialHandle)</l>
<c>        </c>
<l>        ConteoCircularesOut := ConteoCircularesOut+1</l>
<l>        ConteoCirculares_New := ConteoCircularesOut</l>
<c>        </c>
<l>       ExitBloque3:=true</l>
<l>        return()</l>
<l>    endif</l>
<c>    </c>
<l>    ConteoCircularesOut := ConteoCircularesOut+1</l>
<l>    ConteoCirculares_New := ConteoCircularesOut</l>
<l>endif</l>
<c></c>
<c></c>
<l>if (Cod_Core_ToUse='EHS')</l>
<c>    </c>
<l>    if (ConteoCircularesOut&gt;0)</l>
<l>        read_pose ('C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/5.-Ing Software/3 Consolidado R1/PoseCirculares.dat', \
                   PoseMLS)</l>
<c>        </c>
<l>        Delta_X:= (  -5   )*1</l>
<l>        Delta_Y:=(-3     -7)*1</l>
<l>        Delta_Z:=-3.5   +2</l>
<c>        </c>
<c>        </c>
<l>        PoseMLS[0]:=PoseMLS[0]+Delta_X</l>
<l>        PoseMLS[1]:=PoseMLS[1]+Delta_Y</l>
<l>        PoseMLS[2] := PoseMLS[2]+Delta_Z+14.6*ConteoCircularesOut</l>
<c>        </c>
<c>        </c>
<l>        Send_Data_To_Robot(PoseMLS,SerialHandle)</l>
<c>        </c>
<l>        Estado := 13</l>
<l>        Procesando := 0</l>
<l>        Resultado := 1</l>
<l>        Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>        Send_Data_Info('BLOQUE 3 FINALIZADO', SerialHandle)</l>
<c>        </c>
<l>        ConteoCircularesOut := ConteoCircularesOut+1</l>
<l>        ConteoCirculares_New := ConteoCircularesOut</l>
<c>        </c>
<c>        </c>
<l>        ExitBloque3:=true</l>
<l>        return()</l>
<l>    endif</l>
<c>    </c>
<l>    ConteoCircularesOut := ConteoCircularesOut+1</l>
<l>    ConteoCirculares_New := ConteoCircularesOut</l>
<c>    </c>
<l>endif</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Send_Position_A_Ciegas">
<parameters>
<parameter id="Cod_Core_ToUse"/>
<parameter id="ConteoCirculares"/>
<parameter id="ConteoCircularesOut"/>
<parameter id="ConteoCirculares_New"/>
<parameter id="Delta_X"/>
<parameter id="Delta_Y"/>
<parameter id="Delta_Z"/>
<parameter id="Estado"/>
<parameter id="ExitBloque3"/>
<parameter id="PoseMLS"/>
<parameter id="Procesando"/>
<parameter id="Resultado"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Segmento">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="Pose_Esquina" base_type="ctrl" dimension="0"/>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Visualizar3D" base_type="ctrl" dimension="0"/>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Vector_Segmento" base_type="ctrl" dimension="0"/>
<par name="ROI3D_NullFrame" base_type="ctrl" dimension="0"/>
<par name="ROI3D_rotate" base_type="ctrl" dimension="0"/>
<par name="Exception" base_type="ctrl" dimension="0"/>
<par name="EstadoFx" base_type="ctrl" dimension="0"/>
<par name="Estado" base_type="ctrl" dimension="0"/>
<par name="Pose_Segmentos" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Vector_Segmento := ['A','B','C','D','E','F','G','H','I']</l>
<c></c>
<c></c>
<l>try</l>
<l>    Get_ROI3D_Pallet (ROI3D_NullFrame, ROI3D_rotate)</l>
<l>catch (Exception)</l>
<c>    </c>
<l>    Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<l>*     throw (MensajeError)</l>
<c>    * </c>
<l>* # ### Envio data de estado ########################</l>
<c>    </c>
<l>    Estado := 5</l>
<l>    Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<c>    </c>
<l>* # ################################################# </l>
<c>    </c>
<l>    return ()</l>
<l>endtry</l>
<c></c>
<l>* # #### ROTO EL ROI 3D ######</l>
<c>* </c>
<l>try</l>
<l>* #####################################################################################</l>
<c>    * Funcion que Lee la pose guardada en el Bloque 0, y que referencia la orientacion de la camara</c>
<l>* #####################################################################################</l>
<l>    Get_Rotate_ROI3D (Pose_Esquina, ROI3D_rotate, Pose_Segmentos, ROI3D_rotate)</l>
<l>*     Visualizar_3D ([Escena3D_RAW], Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, [], [], ['Modelo'], WindowHandle, PoseOut1)</l>
<c>    * </c>
<l>catch (Exception)</l>
<c>    </c>
<l>    Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<l>    return ()</l>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="Get_Segmento">
<parameters>
<parameter id="Escena3D_RAW"/>
<parameter id="Estado"/>
<parameter id="EstadoFx"/>
<parameter id="Exception"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="Pose_Esquina"/>
<parameter id="Pose_Segmentos"/>
<parameter id="ROI3D_NullFrame"/>
<parameter id="ROI3D_rotate"/>
<parameter id="SerialHandle"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="Vector_Segmento"/>
<parameter id="Visualizar3D"/>
<parameter id="WindowHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Max_Altura_Mangas">
<interface>
<io>
<par name="Zred" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="ImageGauss" base_type="iconic" dimension="0"/>
<par name="LocalMaxima" base_type="iconic" dimension="0"/>
<par name="ConnectedRegions" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="g_AltutaVirtualCamEstereo" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="AlturaBase" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>try</l>
<c>    </c>
<l>    threshold (Zred, Region, g_AltutaVirtualCamEstereo+10, 3000+g_AltutaVirtualCamEstereo)</l>
<l>    region_features (Region, 'width', DiametroPx)</l>
<c>    </c>
<l>    erosion_circle (Region, RegionErosion, DiametroPx*0.1)</l>
<l>    reduce_domain (Zred, RegionErosion, Zred)</l>
<c>    </c>
<l>    gauss_filter (Zred, ImageGauss, 11)</l>
<l>    gauss_filter (ImageGauss, ImageGauss, 11)</l>
<c>    </c>
<c>    </c>
<l>    local_max (ImageGauss, LocalMaxima)</l>
<l>    connection (LocalMaxima, ConnectedRegions)</l>
<l>    area_center (ConnectedRegions, Area, Row, Column)</l>
<l>    get_grayval (ImageGauss, Row, Column, Grayval)</l>
<c>    </c>
<l>    tuple_max (Grayval, AlturaBase)</l>
<l>    return ()</l>
<l>catch (Exception)</l>
<c>    </c>
<c>    </c>
<l>endtry</l>
<c></c>
</body>
<docu id="Get_Max_Altura_Mangas">
<parameters>
<parameter id="AlturaBase"/>
<parameter id="ConnectedRegions"/>
<parameter id="ImageGauss"/>
<parameter id="LocalMaxima"/>
<parameter id="Zred"/>
<parameter id="g_AltutaVirtualCamEstereo"/>
</parameters>
</docu>
</procedure>
<procedure name="Silple_Orientation_COPY_1">
<interface>
<io>
<par name="IMGris" base_type="iconic" dimension="0"/>
<par name="Zobj1" base_type="iconic" dimension="0"/>
</io>
<oc>
<par name="Deg" base_type="ctrl" dimension="0"/>
<par name="Deg2" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>gen_rectangle1 (ROI_0, 10.5239, 4.60367, 387.787, 233.248)</l>
<l>reduce_domain (IMGris, ROI_0, ImageReduced)</l>
<l>threshold (ImageReduced, Regions, 141, 207)</l>
<l>connection (Regions, ConnectedRegions)</l>
<l>select_shape_std (ConnectedRegions, SelectedRegions, 'max_area', 70)</l>
<c></c>
<l>shape_trans (SelectedRegions, RegionTrans, 'rectangle2')</l>
<c></c>
<l>gen_image_proto (Zobj1, Img1, 10)</l>
<l>gen_image_proto (Zobj1, Img2, 150)</l>
<l>reduce_domain (Img2, RegionTrans, ImageReduced2)</l>
<c></c>
<l>add_image (Img1, ImageReduced2, ImageResult, 1, 100)</l>
<l>paint_gray (ImageReduced2, Img1, MixedImage)</l>
<l>corner_response (MixedImage, ImageCorner, 3, 0.04)</l>
<c></c>
<c></c>
<c></c>
<l>threshold (ImageCorner, Regions2, 1000, 5000)</l>
<c></c>
<l>reduce_domain (ImageCorner, Regions2, ImageCorner)</l>
<c></c>
<l>local_max (ImageCorner, LocalMaxima1)</l>
<l>connection (LocalMaxima1, ConnectedRegions1)</l>
<l>area_center (ConnectedRegions1, Area1, RowToFind, ColumToFind)</l>
<l>get_grayval (ImageCorner, RowToFind, ColumToFind, Grayval)</l>
<l>create_funct_1d_array (Grayval, Function)</l>
<l>* dev_inspect_ctrl (Function)</l>
<c></c>
<l>get_image_size (ImageCorner, Width, Height)</l>
<c></c>
<l>Get_EsquinasPattern_COPY_2 (Grayval, RowToFind, ColumToFind, Width, FilaPattern, ColumnasPattern, Ptr_Min, Ptr_Min2, Ptr_Min3, EsquinaDetectadas)</l>
<c></c>
<c></c>
<l>disp_cross (200000, RowToFind[0], ColumToFind[0], 6, 0)</l>
<l>disp_cross (200000, RowToFind[1], ColumToFind[1], 6, 0)</l>
<c></c>
<c></c>
<c></c>
<l>angle_lx (RowToFind[1], ColumToFind[1], RowToFind[0], ColumToFind[0], Angle)</l>
<c></c>
<l>angle_lx (RowToFind[0], ColumToFind[0], RowToFind[1], ColumToFind[1], Angle2)</l>
<c></c>
<l>tuple_deg (Angle, Deg)</l>
<l>tuple_deg (Angle2, Deg2)</l>
<c></c>
<l>dev_disp_text (Deg2, 'window', RowToFind[0], ColumToFind[0], 'black', [], [])</l>
<l>return ()</l>
</body>
<docu id="Silple_Orientation_COPY_1">
<parameters>
<parameter id="Deg"/>
<parameter id="Deg2"/>
<parameter id="IMGris"/>
<parameter id="Zobj1"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_EsquinasPattern_COPY_2">
<interface>
<ic>
<par name="Grayval" base_type="ctrl" dimension="0"/>
<par name="RowToFind" base_type="ctrl" dimension="0"/>
<par name="ColumToFind" base_type="ctrl" dimension="0"/>
<par name="Width" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="FilaPattern" base_type="ctrl" dimension="0"/>
<par name="ColumnasPattern" base_type="ctrl" dimension="0"/>
<par name="Ptr_Min" base_type="ctrl" dimension="0"/>
<par name="Ptr_Min2" base_type="ctrl" dimension="0"/>
<par name="Ptr_Min3" base_type="ctrl" dimension="0"/>
<par name="EsquinaDetectadas" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>GrayvalOut := Grayval</l>
<c></c>
<l>EsquinaDetectadas := false</l>
<l>try</l>
<c></c>
<c></c>
<c></c>
<c>    * *************************************************</c>
<c>    * ** Umbral Corner Response</c>
<l>    Umbral := 2100</l>
<c>    * *************************************************</c>
<l>    Ptros := 0</l>
<l>    AuxPtr := 0</l>
<l>    for Idx := 0 to |GrayvalOut|-1 by 1</l>
<l>        if (GrayvalOut[Idx]&gt;Umbral)</l>
<l>            Ptros[AuxPtr] := Idx</l>
<l>            AuxPtr := AuxPtr+1</l>
<l>            GrayvalOut[Idx] := -1</l>
<l>        endif</l>
<l>    endfor</l>
<l>    Umbral := 0</l>
<l>    for Idx := 0 to |GrayvalOut|-1 by 1</l>
<l>        if (GrayvalOut[Idx]&gt;Umbral)</l>
<l>            Umbral := GrayvalOut[Idx]</l>
<l>            Ptros[3] := Idx</l>
<l>        endif</l>
<l>    endfor</l>
<c></c>
<l>    for Idx := 0 to 3 by 1</l>
<l>        FilaPattern[Idx] := RowToFind[Ptros[Idx]]</l>
<l>        ColumnasPattern[Idx] := ColumToFind[Ptros[Idx]]</l>
<l>    endfor</l>
<l>    dev_get_window (WindowHandle)</l>
<l>    disp_cross (WindowHandle, FilaPattern, ColumnasPattern, 50, 0)</l>
<c></c>
<c></c>
<l>    for Idx := 0 to 3 by 1</l>
<l>        tuple_pow (FilaPattern[Idx], 2, Pow1)</l>
<l>        tuple_pow (ColumnasPattern[Idx], 2, Pow2)</l>
<l>        tuple_sqrt (Pow1+Pow2, Sqrt)</l>
<l>        DistVectorial[Idx] := Sqrt</l>
<l>    endfor</l>
<c></c>
<c></c>
<l>    AuxMin := DistVectorial[0]</l>
<l>    Ptr_Min := 0</l>
<l>    for Idx := 0 to |DistVectorial|-1 by 1</l>
<l>        if (DistVectorial[Idx]&lt;AuxMin)</l>
<l>            Ptr_Min := Idx</l>
<l>            AuxMin := DistVectorial[Idx]</l>
<l>        endif</l>
<l>    endfor</l>
<c></c>
<c></c>
<c></c>
<l>    for Idx := 0 to 3 by 1</l>
<l>        tuple_pow (FilaPattern[Idx], 2, Pow1)</l>
<l>        tuple_pow (Width-ColumnasPattern[Idx], 2, Pow2)</l>
<l>        tuple_sqrt (Pow1+Pow2, Sqrt)</l>
<l>        DistVectorial2[Idx] := Sqrt</l>
<l>    endfor</l>
<c></c>
<l>    AuxMin2 := DistVectorial2[0]</l>
<l>    Ptr_Min2 := 0</l>
<l>    for Idx := 0 to |DistVectorial2|-1 by 1</l>
<l>        if (DistVectorial2[Idx]&lt;AuxMin2)</l>
<l>            Ptr_Min2 := Idx</l>
<l>            AuxMin2 := DistVectorial2[Idx]</l>
<l>        endif</l>
<l>    endfor</l>
<c></c>
<c></c>
<l>    for Idx := 0 to 3 by 1</l>
<l>        tuple_pow (Width-FilaPattern[Idx], 2, Pow1)</l>
<l>        tuple_pow (ColumnasPattern[Idx], 2, Pow2)</l>
<l>        tuple_sqrt (Pow1+Pow2, Sqrt)</l>
<l>        DistVectorial3[Idx] := Sqrt</l>
<l>    endfor</l>
<c></c>
<l>    AuxMin3 := DistVectorial3[0]</l>
<l>    Ptr_Min3 := 0</l>
<l>    for Idx := 0 to |DistVectorial3|-1 by 1</l>
<l>        if (DistVectorial3[Idx]&lt;AuxMin3)</l>
<l>            Ptr_Min3 := Idx</l>
<l>            AuxMin3 := DistVectorial3[Idx]</l>
<l>        endif</l>
<l>    endfor</l>
<c></c>
<l>    EsquinaDetectadas := true</l>
<l>catch (Exception)</l>
<l>    EsquinaDetectadas := false</l>
<c></c>
<c></c>
<l>endtry</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_EsquinasPattern_COPY_2">
<parameters>
<parameter id="ColumToFind"/>
<parameter id="ColumnasPattern"/>
<parameter id="EsquinaDetectadas"/>
<parameter id="FilaPattern"/>
<parameter id="Grayval"/>
<parameter id="Ptr_Min"/>
<parameter id="Ptr_Min2"/>
<parameter id="Ptr_Min3"/>
<parameter id="RowToFind"/>
<parameter id="Width"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Centro_and_Esquina_COPY_1">
<interface>
<io>
<par name="Esquina_Left" base_type="iconic" dimension="0"/>
<par name="Xobj1" base_type="iconic" dimension="0"/>
<par name="Yobj1" base_type="iconic" dimension="0"/>
<par name="Zobj1" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Esquina_LeftOut" base_type="iconic" dimension="0"/>
</oo>
<oc>
<par name="row1" base_type="ctrl" dimension="0"/>
<par name="col1" base_type="ctrl" dimension="0"/>
<par name="CentroX" base_type="ctrl" dimension="0"/>
<par name="CentroY" base_type="ctrl" dimension="0"/>
<par name="CentroZ" base_type="ctrl" dimension="0"/>
<par name="Nelementos" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Esquina_LeftOut := Esquina_Left</l>
<l>shape_trans (Esquina_LeftOut, Esquina_LeftOut, 'rectangle2')</l>
<l>orientation_region (Esquina_LeftOut, Phi)</l>
<l>* Angulo := Phi*180/3.1415 -90</l>
<l>* Phi := 0</l>
<l>area_center (Esquina_LeftOut, Area, Row, Column)</l>
<l>Nelementos := |Area|</l>
<l>* dev_set_line_width (7)</l>
<l>* Length := 80</l>
<l>* disp_arrow (200000, Row, Column, Row + cos(Phi ) * Length, Column + sin(Phi  ) * Length, 3)</l>
<c></c>
<c></c>
<l>region_features (Esquina_LeftOut, 'row1', row1)</l>
<l>region_features (Esquina_LeftOut, 'column1', col1)</l>
<c></c>
<l>region_features (Esquina_LeftOut, 'row2', row2)</l>
<l>region_features (Esquina_LeftOut, 'column2', col2)</l>
<l>dev_set_line_width (10)</l>
<c></c>
<l>dev_get_window (WindowHandle)</l>
<l>disp_cross (WindowHandle, row1, col1, 6, 0)</l>
<l>disp_cross (WindowHandle, row2, col2, 6, 0)</l>
<c></c>
<c></c>
<l>get_grayval (Xobj1, Row, Column, CentroX)</l>
<l>get_grayval (Yobj1, Row, Column, CentroY)</l>
<l>get_grayval (Zobj1, Row, Column, CentroZ)</l>
<l>return ()</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>get_image_size (Zobj1, Width, Height)</l>
<l>gen_image_const (Image, 'byte', Width, Height)</l>
<c></c>
<l>gen_image_proto (Zobj1, Img1, 10)</l>
<l>gen_image_proto (Zobj1, Img2, 150)</l>
<l>reduce_domain (Img2, Esquina_LeftOut, ImageReduced2)</l>
<c></c>
<l>add_image (Img1, ImageReduced2, ImageResult, 1, 100)</l>
<l>paint_gray (ImageReduced2, Img1, MixedImage)</l>
<l>corner_response (MixedImage, ImageCorner, 3, 0.04)</l>
<c></c>
<l>local_max (ImageCorner, LocalMaxima)</l>
<c></c>
<l>threshold (ImageCorner, Regions2, 1000, 5000)</l>
<c></c>
<l>reduce_domain (ImageCorner, Regions2, ImageCorner)</l>
<c></c>
<l>local_max (ImageCorner, LocalMaxima1)</l>
<l>connection (LocalMaxima1, ConnectedRegions1)</l>
<l>area_center (ConnectedRegions1, Area1, RowToFind, ColumToFind)</l>
<l>get_grayval (ImageCorner, RowToFind, ColumToFind, Grayval)</l>
<l>create_funct_1d_array (Grayval, Function)</l>
<c></c>
<c></c>
<l>Get_EsquinasPattern_COPY_3 (Grayval, RowToFind, ColumToFind, Width, FilaPattern, ColumnasPattern, Ptr_Min, Ptr_Min2, Ptr_Min3, EsquinaDetectadas)</l>
<c></c>
<l>disp_cross (WindowHandle, RowToFind[Ptr_Min3], ColumToFind[Ptr_Min3], 50, 0)</l>
<c></c>
<c></c>
<c></c>
<l>angle_lx (RowToFind[Ptr_Min2], ColumToFind[Ptr_Min2], RowToFind[Ptr_Min], ColumToFind[Ptr_Min], Angle)</l>
<l>tuple_deg (Angle, Angle)</l>
<c></c>
</body>
<docu id="Get_Centro_and_Esquina_COPY_1">
<parameters>
<parameter id="CentroX"/>
<parameter id="CentroY"/>
<parameter id="CentroZ"/>
<parameter id="Esquina_Left"/>
<parameter id="Esquina_LeftOut"/>
<parameter id="Nelementos"/>
<parameter id="Xobj1"/>
<parameter id="Yobj1"/>
<parameter id="Zobj1"/>
<parameter id="col1"/>
<parameter id="row1"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_EsquinasPattern_COPY_3">
<interface>
<ic>
<par name="Grayval" base_type="ctrl" dimension="0"/>
<par name="RowToFind" base_type="ctrl" dimension="0"/>
<par name="ColumToFind" base_type="ctrl" dimension="0"/>
<par name="Width" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="FilaPattern" base_type="ctrl" dimension="0"/>
<par name="ColumnasPattern" base_type="ctrl" dimension="0"/>
<par name="Ptr_Min" base_type="ctrl" dimension="0"/>
<par name="Ptr_Min2" base_type="ctrl" dimension="0"/>
<par name="Ptr_Min3" base_type="ctrl" dimension="0"/>
<par name="EsquinaDetectadas" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>GrayvalOut := Grayval</l>
<c></c>
<l>EsquinaDetectadas := false</l>
<l>try</l>
<c></c>
<c></c>
<c></c>
<c>    * *************************************************</c>
<c>    * ** Umbral Corner Response</c>
<l>    Umbral := 2100</l>
<c>    * *************************************************</c>
<l>    Ptros := 0</l>
<l>    AuxPtr := 0</l>
<l>    for Idx := 0 to |GrayvalOut|-1 by 1</l>
<l>        if (GrayvalOut[Idx]&gt;Umbral)</l>
<l>            Ptros[AuxPtr] := Idx</l>
<l>            AuxPtr := AuxPtr+1</l>
<l>            GrayvalOut[Idx] := -1</l>
<l>        endif</l>
<l>    endfor</l>
<l>    Umbral := 0</l>
<l>    for Idx := 0 to |GrayvalOut|-1 by 1</l>
<l>        if (GrayvalOut[Idx]&gt;Umbral)</l>
<l>            Umbral := GrayvalOut[Idx]</l>
<l>            Ptros[3] := Idx</l>
<l>        endif</l>
<l>    endfor</l>
<c></c>
<l>    for Idx := 0 to 3 by 1</l>
<l>        FilaPattern[Idx] := RowToFind[Ptros[Idx]]</l>
<l>        ColumnasPattern[Idx] := ColumToFind[Ptros[Idx]]</l>
<l>    endfor</l>
<l>    dev_get_window (WindowHandle)</l>
<c></c>
<c></c>
<c></c>
<l>    for Idx := 0 to 3 by 1</l>
<l>        tuple_pow (FilaPattern[Idx], 2, Pow1)</l>
<l>        tuple_pow (ColumnasPattern[Idx], 2, Pow2)</l>
<l>        tuple_sqrt (Pow1+Pow2, Sqrt)</l>
<l>        DistVectorial[Idx] := Sqrt</l>
<l>    endfor</l>
<c></c>
<c></c>
<l>    AuxMin := DistVectorial[0]</l>
<l>    Ptr_Min := 0</l>
<l>    for Idx := 0 to |DistVectorial|-1 by 1</l>
<l>        if (DistVectorial[Idx]&lt;AuxMin)</l>
<l>            Ptr_Min := Idx</l>
<l>            AuxMin := DistVectorial[Idx]</l>
<l>        endif</l>
<l>    endfor</l>
<c></c>
<c></c>
<c></c>
<l>    for Idx := 0 to 3 by 1</l>
<l>        tuple_pow (FilaPattern[Idx], 2, Pow1)</l>
<l>        tuple_pow (Width-ColumnasPattern[Idx], 2, Pow2)</l>
<l>        tuple_sqrt (Pow1+Pow2, Sqrt)</l>
<l>        DistVectorial2[Idx] := Sqrt</l>
<l>    endfor</l>
<c></c>
<l>    AuxMin2 := DistVectorial2[0]</l>
<l>    Ptr_Min2 := 0</l>
<l>    for Idx := 0 to |DistVectorial2|-1 by 1</l>
<l>        if (DistVectorial2[Idx]&lt;AuxMin2)</l>
<l>            Ptr_Min2 := Idx</l>
<l>            AuxMin2 := DistVectorial2[Idx]</l>
<l>        endif</l>
<l>    endfor</l>
<c></c>
<c></c>
<l>    for Idx := 0 to 3 by 1</l>
<l>        tuple_pow (Width-FilaPattern[Idx], 2, Pow1)</l>
<l>        tuple_pow (ColumnasPattern[Idx], 2, Pow2)</l>
<l>        tuple_sqrt (Pow1+Pow2, Sqrt)</l>
<l>        DistVectorial3[Idx] := Sqrt</l>
<l>    endfor</l>
<c></c>
<l>    AuxMin3 := DistVectorial3[0]</l>
<l>    Ptr_Min3 := 0</l>
<l>    for Idx := 0 to |DistVectorial3|-1 by 1</l>
<l>        if (DistVectorial3[Idx]&lt;AuxMin3)</l>
<l>            Ptr_Min3 := Idx</l>
<l>            AuxMin3 := DistVectorial3[Idx]</l>
<l>        endif</l>
<l>    endfor</l>
<l>    disp_cross (WindowHandle, FilaPattern, ColumnasPattern, 50, 0)</l>
<l>    EsquinaDetectadas := true</l>
<l>catch (Exception)</l>
<l>    EsquinaDetectadas := false</l>
<c></c>
<c></c>
<l>endtry</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_EsquinasPattern_COPY_3">
<parameters>
<parameter id="ColumToFind"/>
<parameter id="ColumnasPattern"/>
<parameter id="EsquinaDetectadas"/>
<parameter id="FilaPattern"/>
<parameter id="Grayval"/>
<parameter id="Ptr_Min"/>
<parameter id="Ptr_Min2"/>
<parameter id="Ptr_Min3"/>
<parameter id="RowToFind"/>
<parameter id="Width"/>
</parameters>
</docu>
</procedure>
<procedure name="Silple_Orientation_COPY_2">
<interface>
<io>
<par name="IMGris" base_type="iconic" dimension="0"/>
<par name="Zobj1" base_type="iconic" dimension="0"/>
<par name="Esquina_Left" base_type="iconic" dimension="0"/>
</io>
<oc>
<par name="Angulo" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>try</l>
<c></c>
<l>    reduce_domain (IMGris, Esquina_Left, ImageReduced)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>    shape_trans (Esquina_Left, RegionTrans, 'rectangle2')</l>
<c></c>
<c></c>
<c></c>
<l>    gen_image_proto (Zobj1, Img1, 10)</l>
<l>    gen_image_proto (Zobj1, Img2, 150)</l>
<l>    reduce_domain (Img2, RegionTrans, ImageReduced2)</l>
<c></c>
<l>    add_image (Img1, ImageReduced2, ImageResult, 1, 100)</l>
<l>    paint_gray (ImageReduced2, Img1, MixedImage)</l>
<l>    corner_response (MixedImage, ImageCorner, 3, 0.04)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>*     rotate_image (ImageCorner, ImageCorner, -2, 'constant')</l>
<c></c>
<l>    threshold (ImageCorner, Regions2, 1000, 5000)</l>
<c></c>
<l>    reduce_domain (ImageCorner, Regions2, ImageCorner)</l>
<c></c>
<l>    local_max (ImageCorner, LocalMaxima1)</l>
<l>    connection (LocalMaxima1, ConnectedRegions1)</l>
<l>    area_center (ConnectedRegions1, Area1, RowToFind, ColumToFind)</l>
<l>    get_grayval (ImageCorner, RowToFind, ColumToFind, Grayval)</l>
<l>    create_funct_1d_array (Grayval, Function)</l>
<l>*     dev_inspect_ctrl (Function)</l>
<c></c>
<l>    get_image_size (ImageCorner, Width, Height)</l>
<c></c>
<c></c>
<c></c>
<l>    Get_EsquinasPattern_COPY_3 (Grayval, RowToFind, ColumToFind, Width, FilaPattern, ColumnasPattern, Ptr_Min, Ptr_Min2, Ptr_Min3, EsquinaDetectadas)</l>
<c></c>
<l>    dev_get_window (WindowHandle)</l>
<l>    disp_cross (WindowHandle, RowToFind[0], ColumToFind[0], 50, 0)</l>
<l>    disp_cross (WindowHandle, RowToFind[1], ColumToFind[1], 50, 0)</l>
<l>    disp_cross (WindowHandle, RowToFind[2], ColumToFind[2], 50, 0)</l>
<l>    disp_cross (WindowHandle, RowToFind[3], ColumToFind[3], 50, 0)</l>
<c></c>
<c></c>
<c></c>
<l>    angle_lx (RowToFind[1], ColumToFind[1], RowToFind[0], ColumToFind[0], Angle)</l>
<c></c>
<l>    angle_lx (RowToFind[0], ColumToFind[0], RowToFind[1], ColumToFind[1], Angle2)</l>
<c></c>
<l>    tuple_deg (Angle, Deg)</l>
<l>    tuple_deg (Angle2, Deg2)</l>
<c></c>
<l>    Angulos := [Deg,Deg2]</l>
<l>    tuple_abs (Angulos, Abs)</l>
<l>    tuple_min (Abs, Min)</l>
<c></c>
<c></c>
<l>    Flag := 0</l>
<l>    for Index := 0 to |Angulos|-1 by 1</l>
<c></c>
<l>        if (Min=Abs[Index])</l>
<l>            Flag := Index</l>
<l>        endif</l>
<c></c>
<l>    endfor</l>
<c></c>
<c></c>
<l>    Angulo := Angulos[Flag]</l>
<c></c>
<l>    dev_disp_text (Angulo, 'window', RowToFind[0], ColumToFind[0], 'black', [], [])</l>
<c></c>
<c></c>
<c></c>
<l>catch (Exception)</l>
<l>endtry</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Silple_Orientation_COPY_2">
<parameters>
<parameter id="Angulo"/>
<parameter id="Esquina_Left"/>
<parameter id="IMGris"/>
<parameter id="Zobj1"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_NPallet">
<interface>
<ic>
<par name="_EV1_O_CmdDatos" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="N_Pallet_to_Scan" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>       switch (_EV1_O_CmdDatos)</l>
<c>           </c>
<l>       case 300:</l>
<l>           N_Pallet_to_Scan:=1</l>
<l>           break</l>
<c>           </c>
<l>       case 400:</l>
<l>           N_Pallet_to_Scan:=2</l>
<l>           break           </l>
<l>       case 500:</l>
<l>           N_Pallet_to_Scan:=3</l>
<l>           break</l>
<c>           </c>
<l>        case 600:</l>
<l>           N_Pallet_to_Scan:=4</l>
<l>           break</l>
<c>           </c>
<l>       case 700:</l>
<l>           N_Pallet_to_Scan:=5</l>
<l>           break           </l>
<l>       case 800:</l>
<l>           N_Pallet_to_Scan:=6</l>
<l>           break         </l>
<c>           </c>
<c>           </c>
<c>           </c>
<l>       endswitch</l>
<l>return ()</l>
</body>
<docu id="Get_NPallet">
<parameters>
<parameter id="N_Pallet_to_Scan"/>
<parameter id="_EV1_O_CmdDatos"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_DinamicDataPallet">
<interface>
<ic>
<par name="N_Pallet_to_Scan" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Matrix_Pallet" base_type="ctrl" dimension="2"/>
<par name="FXcheck" base_type="ctrl" dimension="0"/>
<par name="ExisteAlgunApilado" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<c></c>
<l>try</l>
<c>    * </c>
<l>    Peticion := 'BaseDatos'</l>
<l>    SubRutina :='Get_GlobalPallet'</l>
<l>    Data := Peticion+';'+SubRutina+';'+N_Pallet_to_Scan</l>
<c>    * </c>
<l>    write_serial (SerialHandle, ords(Data))</l>
<c>    </c>
<c>    </c>
<l>    Matrix_Pallet:={ { [] } }</l>
<l>    Matrix_Pallet.at(0).at(0):='CodCore'</l>
<l>    Matrix_Pallet.at(0).at(1):='Pallet'</l>
<l>    Matrix_Pallet.at(0).at(2):='Segmento'</l>
<l>    Matrix_Pallet.at(0).at(3):='Cantidad'</l>
<l>    Matrix_Pallet.at(0).at(4):='Codificacion'</l>
<l>    Matrix_Pallet.at(0).at(5):='¿EsApilado?'</l>
<c>    </c>
<c>    </c>
<l>    wait_seconds (0.10)</l>
<l>    VarSerial:=0 </l>
<l>    Conteo:=0</l>
<l>    while(VarSerial&lt;1 and Conteo&lt;50)</l>
<c>        </c>
<c>        *Numero de caracteres a leer</c>
<l>        read_serial (SerialHandle, 500, Nchar)</l>
<l>        Nchar:= chrt(Nchar)</l>
<l>        tuple_number (Nchar, Variable)</l>
<l>        VarSerial:=|Nchar|</l>
<c>        </c>
<l>        if (Variable ='###ERROR###')</l>
<l>            FXcheck:=false</l>
<l>            return()</l>
<l>        endif</l>
<l>        tuple_split (Nchar, '#', Substrings)</l>
<l>*         tuple_split (Substrings, ';', DataBD)</l>
<l>        Conteo:=  Conteo+1</l>
<l>        FXcheck:=true</l>
<l>    endwhile</l>
<c>    </c>
<l>    if (Conteo&gt;=10)</l>
<c>        </c>
<l>        FXcheck:=false</l>
<l>    else</l>
<l>        FXcheck:=true</l>
<c>        </c>
<l>        ExisteAlgunApilado := false</l>
<l>        for Index := 0 to |Substrings|-1 by 1</l>
<c>            </c>
<c>            </c>
<l>            tuple_split (Substrings[Index], ';', DataBD)</l>
<c>            </c>
<l>            Matrix_Pallet.at(Index+1).at(0):=DataBD[0]</l>
<l>            Matrix_Pallet.at(Index+1).at(1):=DataBD[1]</l>
<l>            Matrix_Pallet.at(Index+1).at(2):=DataBD[2]</l>
<l>            Matrix_Pallet.at(Index+1).at(3):=DataBD[3]</l>
<l>            Matrix_Pallet.at(Index+1).at(4):=DataBD[4]</l>
<l>            Matrix_Pallet.at(Index+1).at(5):=DataBD[5]   </l>
<c>            </c>
<c>            ********************************************</c>
<c>            * Valores de TipoDeCore </c>
<c>            ********************************************</c>
<l>            if (DataBD[5]='1')</l>
<l>                ExisteAlgunApilado := 1</l>
<l>            elseif(DataBD[5]='0')</l>
<l>                ExisteAlgunApilado := 0</l>
<l>            elseif(DataBD[5]='2')</l>
<c>                * Indico si es core vertical</c>
<l>                ExisteAlgunApilado := 2   </l>
<l>            endif</l>
<c>            ********************************************</c>
<c>            </c>
<l>        endfor</l>
<c>        </c>
<l>    endif</l>
<c></c>
<l>catch (Exception)</l>
<c>    </c>
<l>endtry</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_DinamicDataPallet">
<parameters>
<parameter id="ExisteAlgunApilado"/>
<parameter id="FXcheck"/>
<parameter id="Matrix_Pallet"/>
<parameter id="N_Pallet_to_Scan"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Bolean">
<interface>
<ic>
<par name="SacaFoto" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="SacaFotoOut" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>SacaFotoOut := SacaFoto</l>
<l>        if (SacaFotoOut='False')</l>
<l>            SacaFotoOut := 0</l>
<l>        elseif (SacaFotoOut ='True')</l>
<l>            SacaFotoOut := 1</l>
<l>        endif</l>
<l>return ()</l>
</body>
<docu id="Get_Bolean">
<parameters>
<parameter id="SacaFoto"/>
<parameter id="SacaFotoOut"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Pose_Tool_COPY_1">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ToolInBasePose" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>wait_seconds (0.1)</l>
<c></c>
<l>try</l>
<c></c>
<l>    I := 0</l>
<c>    * Leo Posicion del robot</c>
<l>    disp_message (200000, 'NO MOVER ROBOT', 'window', 30, 12, 'black', 'true')</l>
<c></c>
<l>    Tag_Lectura := '_EV01_O_EjeX'</l>
<l>    Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>    tuple_real (RV_CmdFotogen, Number)</l>
<l>    Number := (Number)/10000.0 - 4000.0</l>
<c></c>
<l>    posx[I] := Number</l>
<c></c>
<c></c>
<l>    wait_seconds (0.1)</l>
<c></c>
<c></c>
<l>    Tag_Lectura := '_EV01_O_EjeY'</l>
<l>    Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>    tuple_real (RV_CmdFotogen, Number)</l>
<l>    Number := (Number)/10000.0 - 4000.0</l>
<l>    posy[I] := Number</l>
<l>    wait_seconds (0.1)</l>
<l>    Tag_Lectura := '_EV01_O_EjeZ'</l>
<l>    Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>    tuple_real (RV_CmdFotogen, Number)</l>
<l>    Number := (Number)/10000.0 - 4000.0</l>
<l>    posz[I] := Number</l>
<l>    wait_seconds (0.1)</l>
<l>    Tag_Lectura := '_EV01_O_EjeC'</l>
<l>    Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>    tuple_real (RV_CmdFotogen, Number)</l>
<l>    Number := (Number)/10000.0 - 4000.0</l>
<l>    Roll[I] := Number</l>
<l>    wait_seconds (0.1)</l>
<l>    Tag_Lectura := '_EV01_O_EjeB'</l>
<l>    Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>    wait_seconds (0.1)</l>
<l>    tuple_real (RV_CmdFotogen, Number)</l>
<l>    Number := (Number)/10000.0 - 4000</l>
<l>    Pitch[I] := Number</l>
<l>    wait_seconds (0.1)</l>
<l>    Tag_Lectura := '_EV01_O_EjeA'</l>
<l>    Read_EthernetIP_Data (Tag_Lectura, SerialHandle, RV_CmdFotogen)</l>
<l>    tuple_real (RV_CmdFotogen, Number)</l>
<l>    wait_seconds (0.1)</l>
<l>    Number := (Number)/10000 - 4000</l>
<l>    Yaw[I] := Number</l>
<c></c>
<c>    * Read pose of tool in robot base coordinates (ToolInBasePose)</c>
<l>    create_pose (posx[I], posy[I], posz[I], Roll[I], Pitch[I], Yaw[I], 'Rp+T', 'abg', 'point', ToolInBasePose)</l>
<c></c>
<l>catch (Exception)</l>
<c></c>
<l>    ToolInBasePose := []</l>
<l>    create_pose (-1, -1, -1, -1, -1, -1, 'Rp+T', 'abg', 'point', ToolInBasePose)</l>
<c></c>
<l>endtry</l>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Pose_Tool_COPY_1">
<parameters>
<parameter id="SerialHandle"/>
<parameter id="ToolInBasePose"/>
</parameters>
</docu>
</procedure>
<procedure name="Silple_Orientation_COPY_3">
<interface>
<io>
<par name="IMGris" base_type="iconic" dimension="0"/>
<par name="Zobj1" base_type="iconic" dimension="0"/>
<par name="Esquina_Left" base_type="iconic" dimension="0"/>
</io>
<oc>
<par name="Angulo" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<l>reduce_domain (IMGris, Esquina_Left, ImageReduced)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>shape_trans (Esquina_Left, RegionTrans, 'rectangle2')</l>
<c></c>
<c></c>
<c></c>
<l>gen_image_proto (Zobj1, Img1, 10)</l>
<l>gen_image_proto (Zobj1, Img2, 150)</l>
<l>reduce_domain (Img2, RegionTrans, ImageReduced2)</l>
<c></c>
<l>add_image (Img1, ImageReduced2, ImageResult, 1, 100)</l>
<l>paint_gray (ImageReduced2, Img1, MixedImage)</l>
<l>corner_response (MixedImage, ImageCorner, 3, 0.04)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>* rotate_image (ImageCorner, ImageCorner, -2, 'constant')</l>
<c></c>
<l>threshold (ImageCorner, Regions2, 1000, 5000)</l>
<c></c>
<l>reduce_domain (ImageCorner, Regions2, ImageCorner)</l>
<c></c>
<l>local_max (ImageCorner, LocalMaxima1)</l>
<l>connection (LocalMaxima1, ConnectedRegions1)</l>
<l>area_center (ConnectedRegions1, Area1, RowToFind, ColumToFind)</l>
<l>get_grayval (ImageCorner, RowToFind, ColumToFind, Grayval)</l>
<l>create_funct_1d_array (Grayval, Function)</l>
<l>* dev_inspect_ctrl (Function)</l>
<c></c>
<l>get_image_size (ImageCorner, Width, Height)</l>
<c></c>
<c></c>
<c></c>
<l>Get_EsquinasPattern_COPY_3 (Grayval, RowToFind, ColumToFind, Width, FilaPattern, ColumnasPattern, Ptr_Min, Ptr_Min2, Ptr_Min3, EsquinaDetectadas)</l>
<c></c>
<l>dev_get_window (WindowHandle)</l>
<c></c>
<c></c>
<c></c>
<l>angle_lx (RowToFind[1], ColumToFind[1], RowToFind[0], ColumToFind[0], Angle)</l>
<c></c>
<l>angle_lx (RowToFind[0], ColumToFind[0], RowToFind[1], ColumToFind[1], Angle2)</l>
<c></c>
<l>tuple_deg (Angle, Deg)</l>
<l>tuple_deg (Angle2, Deg2)</l>
<c></c>
<l>Angulos := [Deg,Deg2]</l>
<l>tuple_abs (Angulos, Abs)</l>
<l>tuple_min (Abs, Min)</l>
<c></c>
<c></c>
<l>Flag := 0</l>
<l>for Index := 0 to |Angulos|-1 by 1</l>
<c></c>
<l>    if (Min=Abs[Index])</l>
<l>        Flag := Index</l>
<l>    endif</l>
<c></c>
<l>endfor</l>
<c></c>
<c></c>
<l>Angulo := Angulos[Flag]</l>
<c></c>
<l>dev_disp_text (Angulo, 'window', RowToFind[0]+50, ColumToFind[0], 'black', [], [])</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Silple_Orientation_COPY_3">
<parameters>
<parameter id="Angulo"/>
<parameter id="Esquina_Left"/>
<parameter id="IMGris"/>
<parameter id="Zobj1"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_DinamicDataPallet_COPY_1">
<interface>
<ic>
<par name="N_Pallet_to_Scan" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Matrix_Pallet" base_type="ctrl" dimension="2"/>
<par name="FXcheck" base_type="ctrl" dimension="0"/>
<par name="ExisteAlgunApilado" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<c></c>
<l>try</l>
<c></c>
<l>    Peticion := 'BaseDatos'</l>
<l>    SubRutina := 'Get_GlobalPallet'</l>
<l>    Data := Peticion+';'+SubRutina+';'+N_Pallet_to_Scan</l>
<c></c>
<l>    write_serial (SerialHandle, ords(Data))</l>
<c></c>
<c></c>
<l>    Matrix_Pallet := { { [] } }</l>
<l>    Matrix_Pallet.at(0).at(0) := 'CodCore'</l>
<l>    Matrix_Pallet.at(0).at(1) := 'Pallet'</l>
<l>    Matrix_Pallet.at(0).at(2) := 'Segmento'</l>
<l>    Matrix_Pallet.at(0).at(3) := 'Cantidad'</l>
<l>    Matrix_Pallet.at(0).at(4) := 'Codificacion'</l>
<l>    Matrix_Pallet.at(0).at(4) := '¿EsApilado?'</l>
<c></c>
<c></c>
<l>    wait_seconds (0.10)</l>
<l>    VarSerial := 0</l>
<l>    Conteo := 0</l>
<l>    while (VarSerial&lt;1 and Conteo&lt;50)</l>
<c></c>
<c>        * Numero de caracteres a leer</c>
<l>        read_serial (SerialHandle, 800, Nchar)</l>
<l>        Nchar := chrt(Nchar)</l>
<l>        tuple_number (Nchar, Variable)</l>
<l>        VarSerial := |Nchar|</l>
<c></c>
<l>        tuple_split (Nchar, '#', Substrings)</l>
<l>*         tuple_split (Substrings, ';', DataBD)</l>
<l>        Conteo := Conteo+1</l>
<l>        FXcheck := true</l>
<l>    endwhile</l>
<c></c>
<l>    if (Conteo&gt;=10)</l>
<c></c>
<l>        FXcheck := false</l>
<l>    else</l>
<l>        FXcheck := true</l>
<c></c>
<l>        ExisteAlgunApilado := false</l>
<l>        for Index := 0 to |Substrings|-1 by 1</l>
<c></c>
<c></c>
<l>            tuple_split (Substrings[Index], ';', DataBD)</l>
<c></c>
<l>            Matrix_Pallet.at(Index+1).at(0) := DataBD[0]</l>
<l>            Matrix_Pallet.at(Index+1).at(1) := DataBD[1]</l>
<l>            Matrix_Pallet.at(Index+1).at(2) := DataBD[2]</l>
<l>            Matrix_Pallet.at(Index+1).at(3) := DataBD[3]</l>
<l>            Matrix_Pallet.at(Index+1).at(4) := DataBD[4]</l>
<l>            Matrix_Pallet.at(Index+1).at(5) := DataBD[5]</l>
<l>            if (DataBD[5]='1')</l>
<l>                ExisteAlgunApilado := true</l>
<l>            endif</l>
<c></c>
<l>        endfor</l>
<c></c>
<l>    endif</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>catch (Exception)</l>
<c></c>
<l>endtry</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_DinamicDataPallet_COPY_1">
<parameters>
<parameter id="ExisteAlgunApilado"/>
<parameter id="FXcheck"/>
<parameter id="Matrix_Pallet"/>
<parameter id="N_Pallet_to_Scan"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Stl_Object_Core">
<interface>
<ic>
<par name="Vector_ID_Core_by_Segment_Pallet" base_type="ctrl" dimension="0"/>
<par name="Path_CORE_ID" base_type="ctrl" dimension="0"/>
<par name="Path_3D_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_SFM_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ObjectModel3D_Core_Pallet" base_type="ctrl" dimension="0"/>
<par name="Estado_Get_SFM_STL" base_type="ctrl" dimension="0"/>
<par name="Modelo3D_Select" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Estado_Get_SFM_STL:=false</l>
<l>try</l>
<c>    </c>
<l>    Core_Find_by_User := Vector_ID_Core_by_Segment_Pallet</l>
<c>    </c>
<l>    if (Core_Find_by_User='')</l>
<l>        Estado_Get_SFM_STL:=false</l>
<l>        return()</l>
<l>    endif</l>
<c>    </c>
<l>    Index_Core:=[]</l>
<l>    Core_Get:=false</l>
<c>    </c>
<l>    for Index_Core_find := 0 to |Path_CORE_ID|-1 by 1</l>
<c>        </c>
<l>        if (Path_CORE_ID[Index_Core_find] = Core_Find_by_User)</l>
<l>            Index_Core :=  Index_Core_find  </l>
<l>            Core_Get:=true</l>
<l>        endif</l>
<l>    endfor</l>
<c>    </c>
<l>    if (not Core_Get)</l>
<c>        </c>
<c>        </c>
<l>            Send_Data_Info ('### ERROR ### No se encuentra la Ruta del modelo 3D  -&gt; '+Core_Find_by_User+' &lt;- \nVerificar que los nombres coincidan en la base de datos dinamica y estaica', SerialHandle)</l>
<c>    * no es   throw ('CORE NO EXISTE EN BD')</c>
<c>        </c>
<c>        </c>
<c>        </c>
<l>        return()</l>
<c>        </c>
<l>    endif</l>
<c>    </c>
<c>    </c>
<l>    Send_Estado_Vision (Vector_Estado_Fx, SerialHandle, 24)   </l>
<l>    read_object_model_3d (Path_3D_Segmentos[Index_Core], 1, [], [], ObjectModel3D_Core_Pallet, Status)</l>
<l>    Send_Data_Info ('Modelo 3D Leido  -------&gt; '+Core_Find_by_User, SerialHandle)</l>
<c>    </c>
<l>    Modelo3D_Select:=Path_3D_Segmentos[Index_Core]</l>
<c>    </c>
<c>    </c>
<l>    Estado_Get_SFM_STL:=true</l>
<c>    </c>
<l>catch (Exception)</l>
<c>    </c>
<l>          Send_Data_Info ('### ERROR ### No se encuentra la Ruta del modelo 3D  -&gt; '+Core_Find_by_User+' &lt;- \nVerificar que los nombres coincidan en la base de datos dinamica y estaica', SerialHandle)</l>
<l>   endtry</l>
<l>return ()</l>
</body>
<docu id="Get_Stl_Object_Core">
<parameters>
<parameter id="Estado_Get_SFM_STL"/>
<parameter id="Modelo3D_Select"/>
<parameter id="ObjectModel3D_Core_Pallet"/>
<parameter id="Path_3D_Segmentos"/>
<parameter id="Path_CORE_ID"/>
<parameter id="Path_SFM_Segmentos"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_DimencionesCore">
<interface>
<ic>
<par name="ObjectModel3D_Core" base_type="ctrl" dimension="0"/>
<par name="IsA_Sleeve" base_type="ctrl" dimension="0"/>
<par name="PosibleManga" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="AltoTotal_Core" base_type="ctrl" dimension="0"/>
<par name="AnchoTotal_Core" base_type="ctrl" dimension="0"/>
<par name="LargoTotal_Core" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>             get_object_model_3d_params (ObjectModel3D_Core, 'center', CentroModelo)</l>
<l>    get_object_model_3d_params (ObjectModel3D_Core, 'bounding_box1', XYZ)</l>
<c>    </c>
<l>    AltoTotal:=XYZ[2]-XYZ[5]</l>
<l>    AnchoTotal:=XYZ[0]-XYZ[3]</l>
<l>    LargoTotal:=XYZ[1]-XYZ[4]</l>
<c>            </c>
<l>    tuple_abs(AltoTotal, AltoTotal_Core)</l>
<l>    tuple_abs(AnchoTotal, AnchoTotal_Core)    </l>
<l>    tuple_abs(LargoTotal, LargoTotal_Core)</l>
<c>    </c>
<c>    **********************************************</c>
<c>    * Obtengo el Diametro del Core desde la BDD</c>
<c>    **********************************************</c>
<l>    Get_DiametroInternoCore_from_BDE(PosibleManga,SerialHandle, AnchoTotal_Core)</l>
<c>    </c>
<l>    tuple_number (AnchoTotal_Core, AnchoTotal_Core)</l>
<c></c>
<c>    </c>
<l>      if (IsA_Sleeve)       </l>
<l>        Get_DiametroInternoCore_from_BDE(PosibleManga,SerialHandle, AnchoTotal_Core)</l>
<l>        tuple_number (AnchoTotal_Core, AnchoTotal_Core)</l>
<l>    endif</l>
<c></c>
<c>    </c>
<c>    </c>
<c></c>
<c></c>
<c></c>
<l>return () </l>
</body>
<docu id="Get_DimencionesCore">
<parameters>
<parameter id="AltoTotal_Core"/>
<parameter id="AnchoTotal_Core"/>
<parameter id="IsA_Sleeve"/>
<parameter id="LargoTotal_Core"/>
<parameter id="ObjectModel3D_Core"/>
<parameter id="PosibleManga"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_VectorVariables">
<interface>
<oc>
<par name="Vector_Variables" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>                Vector_Variables	[	0	]:=		'_EV01_I_CodEntidad'</l>
<l>                Vector_Variables	[	1	]:=		'_EBD_I_PalletIr'</l>
<l>                Vector_Variables	[	2	]:=		'_EBD_I_SegmentoIr'</l>
<l>                Vector_Variables	[	3	]:=		'_EBD_I_EjeY'</l>
<l>                Vector_Variables	[	4	]:=		'_EV01_I_EsApilado'</l>
<l>                Vector_Variables	[	5	]:=		'_EBD_I_EjeZ'</l>
<l>                Vector_Variables	[	6	]:=		'_EBD_I_EjeA'</l>
<l>                Vector_Variables	[	7	]:=		'_EBD_I_Diametro'</l>
<l>return ()</l>
</body>
<docu id="Get_VectorVariables">
<parameters>
<parameter id="Vector_Variables"/>
</parameters>
</docu>
</procedure>
<procedure name="Bloque_3_seccion_0">
<interface>
<io>
<par name="Objeto_1_mangas" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="ModelImage" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
<par name="Z" base_type="iconic" dimension="0"/>
<par name="ImgLeftCamera" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Path_SFM_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_3D_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_CORE_ID" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="ObjectModel3D_Core_Pallet" base_type="ctrl" dimension="0"/>
<par name="SFM_Core_Pallet" base_type="ctrl" dimension="0"/>
<par name="Modelo3D_Select" base_type="ctrl" dimension="0"/>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
<par name="Cod_Core_ToUse" base_type="ctrl" dimension="0"/>
<par name="Matrix_Sleeve" base_type="ctrl" dimension="2"/>
<par name="ConteoCirculares" base_type="ctrl" dimension="0"/>
<par name="Pallet_To_Scan" base_type="ctrl" dimension="0"/>
<par name="Segmento_To_Scan" base_type="ctrl" dimension="0"/>
<par name="g_CamInBasePose1" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Matrix_Sleeve_New" base_type="ctrl" dimension="2"/>
<par name="ConteoCirculares_New" base_type="ctrl" dimension="0"/>
<par name="Estado_Fx" base_type="ctrl" dimension="0"/>
<par name="Camara_conexion_Est" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Mensaje:='Bloque 3 INICIADO.............'</l>
<l>Send_Data_Info (Mensaje, SerialHandle)</l>
<c></c>
<c></c>
<l>* # ################################################# </l>
<c>* Obtengo imagen del bloque a escanear</c>
<l>FOTO:=1</l>
<l>RepetirFoto:=true</l>
<l>ConteoRepeticion:=0</l>
<l>dev_get_window (WindowHandle)</l>
<l>Estado_Fx:=0</l>
<l>Estado_Funcion:=0</l>
<l>g_AltutaVirtualCamEstereo:=0</l>
<c></c>
<l>while(RepetirFoto )</l>
<l>    ConteoRepeticion:=ConteoRepeticion+1</l>
<l>    RepetirFoto:=false</l>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    **************************************</c>
<c>    *1° Segmento si es Core o Manga</c>
<c>    **************************************</c>
<l>    Get_TipoEntidad (Cod_Core_ToUse, Is_a_Core)</l>
<l>    if (Is_a_Core)</l>
<c>        * Es un Core *</c>
<l>        Get_Image_Bloque3_Segmento0 (ModelImage, X, Y, Z, ImgLeftCamera, NxLib, Camera_1, Parametros_Visualizacion, Valores_Visualizacion, FOTO, WindowHandle, Cod_Core_ToUse, SerialHandle, Segmento_To_Scan, Escena3D_RAW, Camara_conexion_Est)</l>
<c>        </c>
<l>        if (not Camara_conexion_Est)</l>
<l>           wait_seconds (1)</l>
<l>            Get_Image_Bloque3_Segmento0 (ModelImage, X, Y, Z, ImgLeftCamera, NxLib, Camera_1, Parametros_Visualizacion, Valores_Visualizacion, FOTO, WindowHandle, Cod_Core_ToUse, SerialHandle, Segmento_To_Scan, Escena3D_RAW, Camara_conexion_Est)</l>
<c>        </c>
<l>        endif</l>
<c></c>
<l>         if (not Camara_conexion_Est)</l>
<l>            Procesando := 1</l>
<l>            Resultado := 2</l>
<l>            Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>            Send_Data_Info('### ERROR ### Camara estereo desconectada', SerialHandle)  </l>
<c>            </c>
<l>            Estado_Fx:=0</l>
<l>        endif</l>
<l>    else</l>
<c>        **************************************</c>
<c>        * ES UNA MANGA</c>
<c>        **************************************</c>
<l>        IsA_Sleeve:=1</l>
<c>        ** Busco en la matrix si existe esta manga</c>
<c>        </c>
<l>        Nelementos :=Matrix_Sleeve.length()</l>
<c>        </c>
<l>        for Index := 1 to Nelementos-1 by 1</l>
<c>            </c>
<l>            if (Matrix_Sleeve.at(Index).at(1) = false or  Matrix_Sleeve.at(Index).at(0) =  Cod_Core_ToUse)</l>
<l>                Matrix_Sleeve.at(Index).at(0) :=Cod_Core_ToUse</l>
<l>                IndexLast:= Index</l>
<l>                break</l>
<l>            endif</l>
<l>            IndexLast:= Index</l>
<l>        endfor</l>
<c>        </c>
<l>        Get_DimencionesCore (ObjectModel3D_Core_Pallet, IsA_Sleeve, Cod_Core_ToUse, SerialHandle, AltoTotal_Core, Diametro, LargoTotal_Core)</l>
<c>        </c>
<l>        Get_DiametroInternoCore_from_BDE (Cod_Core_ToUse, SerialHandle, Diametro_Interno)</l>
<c>        </c>
<c>        </c>
<l>        Get_Image_Sleeve_Bloque3_Seccion0 (Objeto_1_mangas, ModelImage, X, Y, Z, ImgLeftCamera, NxLib, \
                                           Camera_1, Parametros_Visualizacion, Valores_Visualizacion, FOTO, WindowHandle,\
                                           Cod_Core_ToUse, SerialHandle, Matrix_Sleeve, IndexLast, Diametro, Diametro_Interno,\
                                           g_CamInBasePose1, Escena3D_RAW, Matrix_Sleeve, g_AltutaVirtualCamEstereo)</l>
<c>        </c>
<l>        Matrix_Sleeve_New:=Matrix_Sleeve</l>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<l>    endif</l>
<c>    </c>
<c>    </c>
<l>    dev_disp_text ('Foto Numero -&gt; '+FOTO, 'window', 'top', 'left', 'black', [], [])</l>
<l>    FOTO:=FOTO+1</l>
<l>* ###################################################################</l>
<l>* #### para saber que Core debo utilizar debo consultar a la RAM BD</l>
<l>* ###################################################################</l>
<l>    Mensaje:='Capturo datos de la ram BD'</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    Get_TipoEntidad (Cod_Core_ToUse, Entidad)</l>
<c>    </c>
<c>    </c>
<c>    ** Proteccion para no buscar pines</c>
<l>    if (Entidad)</l>
<c>        </c>
<l>* ####################################################################    </l>
<l>* ##### Paso la pose a CamInBasePose para virtualizar el ROI respecto#</l>
<l>* ##### al robot             #########################################</l>
<l>* ####################################################################   </l>
<c>        *Leo la pose de la esquina del pallet N</c>
<l>        NamePose:='Pallet_'</l>
<l>        create_pose (0.1, 0.1, 0.1, 90, 90, 90, 'Rp+T', 'gba', 'point', Esquina_Pallet_Pose)</l>
<c>        </c>
<l>* ###################################################################    </l>
<l>* ######## Realizo el reconocimiento del patron #####################</l>
<l>* ################################################################### </l>
<c>        </c>
<l>        Vector_ID_Core_by_Segment_Palle_tofind:=Cod_Core_ToUse</l>
<l>        N_Pallet_to_Scan:=Pallet_To_Scan</l>
<l>        SegmentoPallet:=Segmento_To_Scan</l>
<l>        Pose_Esquina:=Esquina_Pallet_Pose</l>
<l>        PitutoExist:=1</l>
<l>        Visualizar3D:=true</l>
<c>        </c>
<c>        </c>
<l>        Take_Core_In_Pallet_Segmento0 (Z, X, Y, Escena3D_RAW, N_Pallet_to_Scan, Path_SFM_Segmentos, Path_3D_Segmentos, Vector_ID_Core_by_Segment_Palle_tofind, Path_CORE_ID, SerialHandle, Vector_Estado_Fx, Visualizar3D, SegmentoPallet, Pose_Esquina, PitutoExist, ObjectModel3D_Core_Pallet, SFM_Core_Pallet, Modelo3D_Select, WindowHandle, Estado_Funcion, g_AltutaVirtualCamEstereo, Estado_SubProceso, RepetirFoto)</l>
<c>        </c>
<l>        if (Estado_SubProceso)</l>
<c>            </c>
<l>            Estado_Fx:=Estado_SubProceso</l>
<l>        else</l>
<l>            Estado_Fx:=Estado_SubProceso</l>
<l>            Send_Data_Info('BLOQUE 3 FINALIZADO con ERRORES!!!', SerialHandle)  </l>
<l>            ConteoCirculares:=0</l>
<l>            Estado_Fx:=0</l>
<l>        endif</l>
<l>    else</l>
<c>        </c>
<c>        ***********************************************</c>
<c>        ******** ROI Altura ***************************</c>
<c>        ***********************************************</c>
<c>        </c>
<l>        Get_3dModel_Sleeve (SerialHandle, Path_CORE_ID, Path_3D_Segmentos,\
                            Path_SFM_Segmentos, Vector_Estado_Fx, ObjectModel3D_Core_Pallet,\
                            Cod_Core_ToUse, ObjectModel3D_Core_Pallet_Sleeve, \
                            Modelo3D_Select, Cod_Core_ToUse)</l>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        **      get_SleeveImage (ModelImage, X, Y, Z, Matrix_Sleeve_New, Cod_Core_ToUse)</c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        * Generico</c>
<l>        Take_Sleeve_in_Pallet_Inteligence (Z, X, Y, ObjectModel3D_Core_Pallet_Sleeve, Escena3D_RAW, Parametros_Visualizacion, Valores_Visualizacion, SerialHandle, Matrix_Sleeve_New, IndexLast, Diametro, g_CamInBasePose1, g_AltutaVirtualCamEstereo, Diametro_Interno, Estado_Funcion, Matrix_Sleeve_New_Pos)</l>
<l>        if (Estado_Funcion)</l>
<l>            Matrix_Sleeve_New:=Matrix_Sleeve_New_Pos</l>
<l>*             Estado := 13</l>
<l>*             Procesando := 1</l>
<l>*             Resultado := 1</l>
<l>*             Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<c>            </c>
<l>            Send_Data_Info('BLOQUE 3 FINALIZADO', SerialHandle)</l>
<l>        else</l>
<l>            Procesando := 1</l>
<l>            Resultado := 2</l>
<l>            Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>            Send_Data_Info('BLOQUE 3 FINALIZADO con ERRORES!!!', SerialHandle)  </l>
<l>            ConteoCirculares:=0</l>
<l>            Estado_Fx:=0</l>
<l>        endif</l>
<c>        </c>
<c>        </c>
<l>        clear_object_model_3d (ObjectModel3D_Core_Pallet_Sleeve)</l>
<c>        </c>
<l>        if (not Estado_Funcion)</l>
<l>            RepetirFoto:=true </l>
<l>        endif</l>
<c>        </c>
<c>        </c>
<c>        </c>
<l>    endif</l>
<c>    </c>
<l>    RepetirFoto:=false</l>
<c>    </c>
<l>endwhile</l>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Bloque_3_seccion_0">
<parameters>
<parameter id="Camara_conexion_Est"/>
<parameter id="Camera_1"/>
<parameter id="Cod_Core_ToUse"/>
<parameter id="ConteoCirculares"/>
<parameter id="ConteoCirculares_New"/>
<parameter id="Estado_Fx"/>
<parameter id="ImgLeftCamera"/>
<parameter id="Matrix_Sleeve"/>
<parameter id="Matrix_Sleeve_New"/>
<parameter id="ModelImage"/>
<parameter id="Modelo3D_Select"/>
<parameter id="NxLib"/>
<parameter id="ObjectModel3D_Core_Pallet"/>
<parameter id="Objeto_1_mangas"/>
<parameter id="Pallet_To_Scan"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="Path_3D_Segmentos"/>
<parameter id="Path_CORE_ID"/>
<parameter id="Path_SFM_Segmentos"/>
<parameter id="SFM_Core_Pallet"/>
<parameter id="Segmento_To_Scan"/>
<parameter id="SerialHandle"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="WindowHandle"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
<parameter id="g_CamInBasePose1"/>
</parameters>
</docu>
</procedure>
<procedure name="Take_Core_In_Pallet_COPY_2">
<interface>
<io>
<par name="Z" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
<par name="N_Pallet_to_Scan" base_type="ctrl" dimension="0"/>
<par name="Path_SFM_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_3D_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_Tofind" base_type="ctrl" dimension="0"/>
<par name="Path_CORE_ID" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="Visualizar3D" base_type="ctrl" dimension="0"/>
<par name="SegmentoPallet" base_type="ctrl" dimension="0"/>
<par name="Pose_Esquina" base_type="ctrl" dimension="0"/>
<par name="PitutoExist" base_type="ctrl" dimension="0"/>
<par name="ObjectModel3D_Core_Pallet" base_type="ctrl" dimension="0"/>
<par name="SFM_Core_Pallet" base_type="ctrl" dimension="0"/>
<par name="Modelo3D_Select" base_type="ctrl" dimension="0"/>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Estado_SubProceso" base_type="ctrl" dimension="0"/>
<par name="RepetirFoto" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Parametros_Visualizacion := ['colored','disp_pose','point_size']</l>
<l>Valores_Visualizacion := [  12  ,'true',1]</l>
<c></c>
<c></c>
<c>* *****************************************</c>
<c>* 1.- Obtengo el ROI3D del PALLET</c>
<c>* *****************************************</c>
<l>Get_Segmento_COPY_1 (SerialHandle, Vector_Estado_Fx, Pose_Esquina, Escena3D_RAW, Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, WindowHandle, Vector_Segmento, ROI3D_NullFrame, ROI3D_rotate, Exception, EstadoFx, Estado, Pose_Segmentos)</l>
<c></c>
<l>* # ###################################################################</l>
<l>* # ###################################################################</l>
<l>* # ################ BUSQUEDA DE CORES EN EL PALLET ###################</l>
<l>* # ###################################################################</l>
<l>* # ###################################################################</l>
<c>* 3.- Encuentro el orden y los segementos en que estan distribuidos los cores en el applet</c>
<c></c>
<l>Vector_Entidades_Segmento := Vector_ID_Core_by_Segment_Pallet_Tofind+';'+SegmentoPallet</l>
<c></c>
<l>try</l>
<c></c>
<c>    * ********************************************************</c>
<c>    * ROI 3D sectorizado de cada elemento</c>
<c>    * Busco de manera sectorizada cara core en el pallet</c>
<c>    * ********************************************************</c>
<c>    * Estructura de vector</c>
<l>* # ###########################</l>
<l>* # ## CORE ## Existencia #####</l>
<l>* # ###########################</l>
<c></c>
<c>    * *****************************************************************************</c>
<c>    * ******* Proceso el entorno 3D para eliminar ruido  **************************</c>
<c>    * *****************************************************************************</c>
<l>    Sub_Process_ImageCore (Z, X, Y, SerialHandle, Estado_Funcion, Escena3D_RAW, Estado_FuncionSub)</l>
<l>    if (Estado_FuncionSub)</l>
<c></c>
<c></c>
<c></c>
<c>        * ************************</c>
<c>        * REVISAR ORIENTACION</c>
<c>        * ************************</c>
<l>        if (PitutoExist ='Yes')</l>
<l>            Pituto := true</l>
<l>        endif</l>
<c></c>
<l>        Pituto := true</l>
<c></c>
<c></c>
<c>        * **********************************************</c>
<c></c>
<l>*         smooth_object_model_3d (Escena3D_RAW, 'mls', 'mls_kNN', 50, Escena3D_RAW)</l>
<l>*         Visualizar_3D ([Escena3D_RAW], Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, [], [], ['Modelo'], WindowHandle, PoseOut1)</l>
<c></c>
<c></c>
<l>        Sampling := 0.02</l>
<l>        Send_Data_Info ('### -&gt; Iniciando Busqueda de Entidad ###', SerialHandle)</l>
<l>        Find_Sector_Core_Bloque3 (Z, Vector_ID_Core_by_Segment_Pallet_Tofind, Vector_Entidades_Segmento, Path_CORE_ID, Path_3D_Segmentos, Path_SFM_Segmentos, ROI3D_rotate, Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, Vector_Segmento, Escena3D_RAW, Sampling, SerialHandle, Vector_Estado_Fx, Pituto, ObjectModel3D_Core_Pallet, SFM_Core_Pallet, Modelo3D_Select, WindowHandle, Vector_Existencia_Core_New, Estado_Fx, RepetirFoto, MyPose)</l>
<c></c>
<c>        * ****************************</c>
<l>*         return ()</l>
<c>        * ***************************</c>
<c></c>
<c></c>
<c></c>
<l>        if (RepetirFoto)</l>
<l>            clear_object_model_3d ([ROI3D_rotate,ROI3D_NullFrame,Escena3D_RAW])</l>
<l>            return ()</l>
<l>        endif</l>
<l>* # ### Envio data de estado ########################</l>
<l>        if (Estado_Fx)</l>
<l>            Estado := 13</l>
<l>            Procesando := 0</l>
<l>            Resultado := 1</l>
<l>            Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>            Send_Data_Info ('BLOQUE 3 FINALIZADO', SerialHandle)</l>
<c></c>
<c>            * ***************************************</c>
<c>            * Descuento 1 el stock ingresado en BD</c>
<l>            Set_MinusCores_COPY_2 (SerialHandle, FXcheck)</l>
<c>            * ***************************************</c>
<c></c>
<l>        else</l>
<l>            Procesando := 0</l>
<l>            Resultado := 2</l>
<l>            Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>            Send_Data_Info ('BLOQUE 3 FINALIZADO con ### ERRORES ####', SerialHandle)</l>
<l>        endif</l>
<l>    else</l>
<l>        Procesando := 0</l>
<l>        Resultado := 2</l>
<l>*         Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>        Send_Data_Info ('BLOQUE 3 FINALIZADO con ### ERRORES ####', SerialHandle)</l>
<l>    endif</l>
<c>    * Borrar 3D</c>
<l>    clear_object_model_3d ([ROI3D_rotate,ROI3D_NullFrame,Escena3D_RAW])</l>
<c></c>
<l>* # ################################################# </l>
<c></c>
<l>catch (Exception)</l>
<l>    Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<c></c>
<l>    return ()</l>
<l>endtry</l>
<c></c>
<c>* ****************************************</c>
<c></c>
<l>return ()</l>
</body>
<docu id="Take_Core_In_Pallet_COPY_2">
<parameters>
<parameter id="Escena3D_RAW"/>
<parameter id="Estado_SubProceso"/>
<parameter id="Modelo3D_Select"/>
<parameter id="N_Pallet_to_Scan"/>
<parameter id="ObjectModel3D_Core_Pallet"/>
<parameter id="Path_3D_Segmentos"/>
<parameter id="Path_CORE_ID"/>
<parameter id="Path_SFM_Segmentos"/>
<parameter id="PitutoExist"/>
<parameter id="Pose_Esquina"/>
<parameter id="RepetirFoto"/>
<parameter id="SFM_Core_Pallet"/>
<parameter id="SegmentoPallet"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_Tofind"/>
<parameter id="Visualizar3D"/>
<parameter id="WindowHandle"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Set_MinusCores_COPY_2">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="FXcheck" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>FXcheck := false</l>
<l>try</l>
<l>    Variable_BD := 'ram_actualproduction'</l>
<l>    Get_Pallet_BD_COPY_2 (Variable_BD, SerialHandle, DataBD, FXcheck1)</l>
<c></c>
<l>    Cod_Core_ToUse := DataBD[3]</l>
<l>    Cod_Core_ToUseAux := DataBD[3]</l>
<l>    Pallet_To_Scan := DataBD[15]</l>
<l>    Segmento_To_Scan := DataBD[16]</l>
<c></c>
<l>    wait_seconds (0.1)</l>
<c></c>
<l>    Set_Core_Minus_COPY_1 (Cod_Core_ToUse, SerialHandle, DataBdFull)</l>
<l>    Cod_Core_ToUse := DataBdFull[0]</l>
<l>    Pallet_To_Scan := DataBdFull[1]</l>
<l>    Segmento_To_Scan := DataBdFull[2]</l>
<l>    CantidadCore := DataBdFull[3]</l>
<c></c>
<l>*     Tag := '_EV01_I_CoreSinStock'</l>
<l>*     Send_EthernetIP_Data (Tag, Cod_Core_ToUse, SerialHandle)</l>
<c></c>
<l>    if (Cod_Core_ToUse='-1' or Cod_Core_ToUse='-1' and Pallet_To_Scan='-1' and Segmento_To_Scan='-1')</l>
<l>        FXcheck := false</l>
<l>        Mensaje := '### ERROR ### -&gt; Entidad Requerida -&gt; '+Cod_Core_ToUseAux+'con 0 &lt;- RAM base DATOS no CARGADA.'</l>
<l>        Send_Data_Info (Mensaje, SerialHandle)</l>
<l>    endif</l>
<l>    FXcheck := true</l>
<c></c>
<c></c>
<l>catch (Exception)</l>
<c></c>
<l>    Mensaje := '### ERROR ### -&gt; Entidad Requerida -&gt; '+Cod_Core_ToUse+' &lt;- RAM base DATOS no CARGADA.'</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<l>    Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<l>    FXcheck := false</l>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="Set_MinusCores_COPY_2">
<parameters>
<parameter id="FXcheck"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Segmentar_Core_COPY_3">
<interface>
<io>
<par name="HeightMap" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
<par name="Z" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Entidad" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="DitsiObjMax" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Estado_Funcion" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Estado_Funcion := false</l>
<c></c>
<l>try</l>
<c></c>
<c>    * ********************************************************</c>
<c>    * 1.-  !!!!!!!!! threshols dinamico!!!!!!!!!!!!!!!!!!!!!!!!!!</c>
<c>    * ********************************************************</c>
<c></c>
<l>    UmbralMaxThr := DitsiObjMax</l>
<l>    threshold (HeightMap, Region, 900, UmbralMaxThr)</l>
<l>    escala := 255.0/UmbralMaxThr</l>
<l>    scale_image (HeightMap, HeightMap_Scalada, escala, 0)</l>
<l>    threshold (HeightMap_Scalada, HeightMap_Region, 0, 255)</l>
<l>    gray_histo_range (HeightMap_Region, HeightMap_Scalada, 0, 255, 256, Histo, BinSize)</l>
<l>    tuple_sum (Histo, Sum_Histo)</l>
<c></c>
<l>* # #########################################################</l>
<l>* # ### Mientras mas grabnde menos sensible a cambios #######   </l>
<l>    Mascara := 1</l>
<l>* # ########################################################</l>
<c></c>
<l>    Vector_Distribucion := []</l>
<l>    init_vector := 255</l>
<l>    flag_vector := 0</l>
<l>    aux_suma := 0.0</l>
<c></c>
<l>    for Index := init_vector to 0 by -1</l>
<c></c>
<l>        Vector_Distribucion[Index] := aux_suma+Histo[Index]*100.0/ Sum_Histo</l>
<l>        aux_suma := Vector_Distribucion[Index]</l>
<l>    endfor</l>
<c></c>
<l>    Derivada := []</l>
<l>    Factor_Der := 1000</l>
<l>    Mascara := 1</l>
<l>    for Index := init_vector to 50 by -Mascara</l>
<c></c>
<l>        Derivada[Index] := abs(Vector_Distribucion[Index]-Vector_Distribucion[Index-Mascara])*Factor_Der</l>
<c></c>
<l>    endfor</l>
<c></c>
<c></c>
<c>    * *********************************************************</c>
<c>    * * Busco el primer cambio brusco de posicion *************</c>
<c>    * * El umbral de cambio es Aux_Val_Max ********************</c>
<c>    * *********************************************************</c>
<l>    create_funct_1d_array (Derivada, Function)</l>
<c></c>
<c>    * *  dev_inspect_ctrl (Function)</c>
<c>    * ***********************************************************************************************</c>
<l>    Aux_Val_Max := 30000</l>
<c>    * ****************************************************************************************************</c>
<l>    Flag_indx_max := 255</l>
<l>    for Index := init_vector to 50 by -Mascara</l>
<c></c>
<l>        if (Derivada[Index]&gt;Aux_Val_Max)</l>
<l>            Aux_Val_Max := Derivada[Index]</l>
<l>            Flag_indx_max := Index</l>
<l>        endif</l>
<c></c>
<l>    endfor</l>
<c></c>
<l>* # #########################################################</l>
<l>* # ######## Grado de proteccion para moverse entre el </l>
<l>* # ####### histograma</l>
<l>    index_protection := 3</l>
<l>* # #########################################################</l>
<c></c>
<l>    Alt_Min := 110</l>
<l>    Alt_Max := Flag_indx_max+index_protection</l>
<l>    threshold (HeightMap_Scalada, Entidad, Alt_Min, Alt_Max)</l>
<c></c>
<l>    Estado_Funcion := true</l>
<l>catch (Exception)</l>
<l>    Estado_Funcion := false</l>
<c>    * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = Fx_Aux.ErrorCatch(HDevExpDefaultException1);</c>
<c></c>
<l>endtry</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Segmentar_Core_COPY_3">
<parameters>
<parameter id="DitsiObjMax"/>
<parameter id="Entidad"/>
<parameter id="Estado_Funcion"/>
<parameter id="HeightMap"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Core_ToUse_From_BDD_Fast_COPY_9">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Cod_Core_ToUse" base_type="ctrl" dimension="0"/>
<par name="Pallet_To_Scan" base_type="ctrl" dimension="0"/>
<par name="Segmento_To_Scan" base_type="ctrl" dimension="0"/>
<par name="PitutoExist" base_type="ctrl" dimension="0"/>
<par name="FXcheck" base_type="ctrl" dimension="0"/>
<par name="Diametro" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>FXcheck := false</l>
<l>for Index := 1 to 5 by 1</l>
<c></c>
<c></c>
<l>    try</l>
<l>        Variable_BD := 'ram_actualproduction'</l>
<l>        Get_Pallet_Bd_Fast_COPY_1 (Variable_BD, SerialHandle, DataBD, FXcheck)</l>
<c></c>
<l>        Cod_Core_ToUse := DataBD[3]</l>
<l>        Cod_Core_ToUseAux := DataBD[3]</l>
<l>        Pallet_To_Scan := DataBD[15]</l>
<l>        Segmento_To_Scan := DataBD[16]</l>
<l>        PitutoExist := DataBD[5]</l>
<l>        Diametro := DataBD[12]</l>
<c></c>
<l>        tuple_number (Diametro, Diametro)</l>
<c></c>
<l>        FXcheck := true</l>
<c></c>
<l>        return ()</l>
<l>    catch (Exception)</l>
<c></c>
<l>*         Mensaje := '### ERROR ### -&gt; Entidad Requerida -&gt; '+Cod_Core_ToUse+' &lt;- RAM base DATOS no CARGADA.'</l>
<l>*         Send_Data_Info (Mensaje, SerialHandle)</l>
<l>        Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<l>        FXcheck := false</l>
<l>    endtry</l>
<l>endfor</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Core_ToUse_From_BDD_Fast_COPY_9">
<parameters>
<parameter id="Cod_Core_ToUse"/>
<parameter id="Diametro"/>
<parameter id="FXcheck"/>
<parameter id="Pallet_To_Scan"/>
<parameter id="PitutoExist"/>
<parameter id="Segmento_To_Scan"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Find_Dinamic_Entity_3D_COPY_2">
<interface>
<ic>
<par name="N_matches" base_type="ctrl" dimension="0"/>
<par name="SFM" base_type="ctrl" dimension="0"/>
<par name="Modelo_imagen_3d" base_type="ctrl" dimension="0"/>
<par name="Sampling_Find" base_type="ctrl" dimension="0"/>
<par name="Keypoint" base_type="ctrl" dimension="0"/>
<par name="MinScore" base_type="ctrl" dimension="0"/>
<par name="Perno_Ref_Cam0" base_type="ctrl" dimension="0"/>
<par name="Modelo_3D_ROI_ThresEdges" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="PoseMLS" base_type="ctrl" dimension="0"/>
<par name="ScoreMLS" base_type="ctrl" dimension="0"/>
<par name="Estado_Funcion" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>Estado_Funcion := true</l>
<l>try</l>
<c>    * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = "Buscando Objeto";</c>
<c></c>
<c>    * ***************************************</c>
<c>    * 1.Parametros de control</c>
<c>    * ***************************************</c>
<l>    GenParamName := ['num_matches','scene_normal_computation','pose_ref_scoring_dist_rel','score_type'          ,'3d_edges'              , '3d_edge_min_amplitude_abs','max_gap','viewpoint']</l>
<l>    GenParamValue := [N_matches   ,          'mls'           ,   0.01                    ,'model_point_fraction', Modelo_3D_ROI_ThresEdges, 13.7313                   ,  30     , '0 0 0']</l>
<l>*     GenParamName := ['num_matches','scene_normal_computation','score_type'          ,'3d_edges'              , '3d_edge_min_amplitude_abs','max_gap','viewpoint']</l>
<l>*     GenParamValue := [N_matches   ,          'mls'        ,'model_point_fraction', Modelo_3D_ROI_ThresEdges, 13.7313                   ,  30     , '0 0 0']</l>
<c></c>
<c></c>
<c>    * ***************************************</c>
<c>    * 2.Busqueda de entidad</c>
<c>    * ***************************************</c>
<l>    find_surface_model (SFM, Modelo_imagen_3d, Sampling_Find, Keypoint, MinScore, 'true', GenParamName, GenParamValue, PoseMLS, ScoreMLS, SurfaceMatchingResultID1)</l>
<c>    * ***************************************</c>
<l>    if (|PoseMLS|)</l>
<c>        * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = "Objeto encontrado con una PROBABILIDAD de " + hv_ScoreMLS*100.ToString() ;</c>
<l>        Estado_Funcion := true</l>
<l>        return ()</l>
<c></c>
<l>    endif</l>
<c></c>
<l>    Estado_Funcion := false</l>
<l>catch (Exception)</l>
<c></c>
<l>    Estado_Funcion := false</l>
<c>    * * --&gt; descomentar EN c#  Fx_Aux.DataLogError = Fx_Aux.ErrorCatch(HDevExpDefaultException1);</c>
<c></c>
<l>endtry</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Find_Dinamic_Entity_3D_COPY_2">
<parameters>
<parameter id="Estado_Funcion"/>
<parameter id="Keypoint"/>
<parameter id="MinScore"/>
<parameter id="Modelo_3D_ROI_ThresEdges"/>
<parameter id="Modelo_imagen_3d"/>
<parameter id="N_matches"/>
<parameter id="Perno_Ref_Cam0"/>
<parameter id="PoseMLS"/>
<parameter id="SFM"/>
<parameter id="Sampling_Find"/>
<parameter id="ScoreMLS"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Segmento_COPY_1">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="Pose_Esquina" base_type="ctrl" dimension="0"/>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Visualizar3D" base_type="ctrl" dimension="0"/>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Vector_Segmento" base_type="ctrl" dimension="0"/>
<par name="ROI3D_NullFrame" base_type="ctrl" dimension="0"/>
<par name="ROI3D_rotate" base_type="ctrl" dimension="0"/>
<par name="Exception" base_type="ctrl" dimension="0"/>
<par name="EstadoFx" base_type="ctrl" dimension="0"/>
<par name="Estado" base_type="ctrl" dimension="0"/>
<par name="Pose_Segmentos" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Vector_Segmento := ['A','B','C','D','E','F','G','H','I']</l>
<c></c>
<c></c>
<l>try</l>
<l>    Get_ROI3D_Pallet (ROI3D_NullFrame, ROI3D_rotate)</l>
<l>catch (Exception)</l>
<c></c>
<l>    Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<l>*     throw (MensajeError)</l>
<c></c>
<l>* # ### Envio data de estado ########################</l>
<c></c>
<l>    Estado := 5</l>
<l>    Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<c></c>
<l>* # ################################################# </l>
<c></c>
<l>    return ()</l>
<l>endtry</l>
<c></c>
<l>* # #### ROTO EL ROI 3D ######</l>
<c></c>
<l>try</l>
<l>* # ####################################################################################</l>
<c>    * Funcion que Lee la pose guardada en el Bloque 0, y que referencia la orientacion de la camara</c>
<l>* # ####################################################################################</l>
<l>    Get_Rotate_ROI3D (Pose_Esquina, ROI3D_rotate, Pose_Segmentos, ROI3D_rotate)</l>
<l>*     Visualizar_3D ([Escena3D_RAW], Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, [], [], ['Modelo'], WindowHandle, PoseOut1)</l>
<c></c>
<l>catch (Exception)</l>
<c></c>
<l>    Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<l>    return ()</l>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="Get_Segmento_COPY_1">
<parameters>
<parameter id="Escena3D_RAW"/>
<parameter id="Estado"/>
<parameter id="EstadoFx"/>
<parameter id="Exception"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="Pose_Esquina"/>
<parameter id="Pose_Segmentos"/>
<parameter id="ROI3D_NullFrame"/>
<parameter id="ROI3D_rotate"/>
<parameter id="SerialHandle"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="Vector_Segmento"/>
<parameter id="Visualizar3D"/>
<parameter id="WindowHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Image_Bloque3_Segmento0">
<interface>
<oo>
<par name="ModelImage" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
<par name="Z" base_type="iconic" dimension="0"/>
<par name="ImgLeftCamera" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="FOTO" base_type="ctrl" dimension="0"/>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
<par name="Cod_Core_ToUse" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Segmento_To_Scan" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
<par name="Camara_conexion_Est" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* Configuracion de Parametros</c>
<c></c>
<c></c>
<l>Get_TipoEntidad (Cod_Core_ToUse, Is_a_Core)</l>
<l>if (Is_a_Core)</l>
<l>    MinimumDisparity_Cam1:=-78</l>
<l>    NumberOfDisparities_Cam1:= 41</l>
<l>else</l>
<l>    MinimumDisparity_Cam1 := -64</l>
<l>    NumberOfDisparities_Cam1 := 128</l>
<l>endif</l>
<c></c>
<c></c>
<l>Projector:='true'</l>
<l>FrontLigth:='true'</l>
<l>AutoExposure:='false'</l>
<l>AutoGain:='false'</l>
<l>Exposure := 4.49</l>
<l>Gain:=2</l>
<l>FlexView:=4</l>
<l>Config_Parametros_Cam_R1 (NxLib, Camera_1, NumberOfDisparities_Cam1, MinimumDisparity_Cam1, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure, FlexView, TempCam)</l>
<c></c>
<l>* Get_Core_ToUse_From_BDD_Fast (SerialHandle, Cod_Core_ToUse, Pallet_To_Scan, Segmento_To_Scan, PitutoExist, FXcheck, Diametro)</l>
<c></c>
<l>Adq_Imagen (ModelImage, NxLib, Camera_1, Camara_conexion_Est)</l>
<c></c>
<l>if (not Camara_conexion_Est)</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    return()</l>
<c>    </c>
<l>endif</l>
<c></c>
<c></c>
<l>if (not Is_a_Core)</l>
<l>    set_framegrabber_param (NxLib, 'do_execute', 'EstimateDisparitySettings')</l>
<l>    get_framegrabber_param (NxLib, '//Execute/Default/Result/193216/MinimumDisparity', MinimumDisparity)</l>
<l>    get_framegrabber_param (NxLib, '//Execute/Default/Result/193216/NumberOfDisparities', NumberOfDisparities)</l>
<l>    Config_Parametros_Cam_R1 (NxLib, Camera_1, NumberOfDisparities, MinimumDisparity, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure, FlexView, TempCam)</l>
<l>    Adq_Imagen (ModelImage, NxLib, Camera_1, Camara_conexion_Est)</l>
<c>    </c>
<l>    Adq_XYZ_Img (ModelImage, X, Y, Z)</l>
<c>    </c>
<l>endif</l>
<c></c>
<c></c>
<c>***********************************************************************</c>
<c>****** Guardo las Imagenes ********************************************</c>
<l>get_system_time (MSecond, Second, Minute, Hour, Day, YDay, Month, Year)</l>
<c></c>
<l>Fecha:=Year+'_'+Month+'_'+Day+'_'+Hour+'_'+Minute+'_'+Second+'_'+MSecond</l>
<l> write_object (ModelImage, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 2/Img_'+Cod_Core_ToUse+'_'+Fecha)</l>
<l>if (false)</l>
<l>    read_object (ModelImage, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 2/Img_EJY_2019_10_4_16_43_15_880.hobj')</l>
<l>    read_object (ModelImage, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 2/Img_CLR_2019_10_28_14_22_17_470.hobj')</l>
<c>    </c>
<l>endif</l>
<c></c>
<c></c>
<c>*************************************************************************</c>
<l>Get_TipoEntidad (Cod_Core_ToUse, Is_a_Core)</l>
<l>Adq_XYZ_Img (ModelImage, X, Y, Z)</l>
<c></c>
<c></c>
<c>* Then is a  Sleeve</c>
<l>if (Is_a_Core)</l>
<c>    </c>
<c>    </c>
<l>    Get_ROI (ROI_0, Segmento_To_Scan, Segmento_To_Scan_pal)</l>
<c>    </c>
<l>    reduce_domain (Z, ROI_0, Z)</l>
<c>    *******************************************************</c>
<c>    * Segmento el core de manera dinamica******************</c>
<l>*     median_image (Z, Z, 'circle', 3, 'mirrored') </l>
<c>    </c>
<c>    *Rango de deteccion  desde la camara </c>
<l>    RangoLow:=1030</l>
<l>    RangoHigh:=1710.0</l>
<l>    threshold (Z, Regions, RangoLow, RangoHigh)</l>
<l>    reduce_domain (Z, Regions, Z)</l>
<c>    </c>
<c>    </c>
<c>    ** Filtro el piso</c>
<l>    DitsiObjMax:=1706</l>
<l>    Segmentar_Core (Z, X, Y, Z, Entidad, DitsiObjMax, Estado_Funcion)</l>
<l>    Histagram_Filter (Z, X, Y, Z, Entidad, Estado_Funcion1)</l>
<c>    *******************************************************</c>
<l>    dilation_circle (Entidad, EntidadDilatada, 30.5)</l>
<l>    reduce_domain (Z, EntidadDilatada, Z)</l>
<c>    </c>
<l>*     select_obj(ModelImage, ImgLeftCamera, 1)</l>
<l>    dev_display (EntidadDilatada)</l>
<l>else</l>
<c>    </c>
<c>    </c>
<c>    *******************************************************</c>
<c>    * Segmento el core de manera dinamica******************</c>
<l>    DitsiObjMax:=2515.0</l>
<l>    Segmentar_Core (Z, X, Y, Z, Entidad, DitsiObjMax, Estado_Funcion)</l>
<c>    *******************************************************</c>
<l>    dilation_circle (Entidad, EntidadDilatada, 60.5)</l>
<l>    reduce_domain (Z, EntidadDilatada, Z)</l>
<c>    </c>
<l>    select_obj(ModelImage, ImgLeftCamera, 1)</l>
<l>    dev_display (EntidadDilatada)</l>
<c>    </c>
<l>endif</l>
<c></c>
<c></c>
<c></c>
<l>xyz_to_object_model_3d (X, Y, Z, Escena3D_RAW)</l>
<c></c>
<c>******************************************************************************************************************************</c>
<l>dev_resize_window_fit_image(X, 0, 0, 500, 500)</l>
<l>Debug_View:=1</l>
<l>Visualizar_3D ([ Escena3D_RAW], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Debug_View, [], [], [], WindowHandle, PoseOut1)</l>
<c></c>
<c></c>
<c></c>
<l>Parametros_VisualizacionOut := ['disp_pose','color_attrib','lut','disp_lines','point_size']</l>
<l>Valores_VisualizacionOut := ['false','coord_z','rainbow','true',1]</l>
<l>create_pose (100, 300, 3000, 0, 0, 0, 'Rp+T', 'gba', 'point', PoseView)</l>
<l>disp_object_model_3d (WindowHandle, Escena3D_RAW, [], PoseView, Parametros_VisualizacionOut, Valores_VisualizacionOut)</l>
<c>******************************************************************************************************************************</c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Image_Bloque3_Segmento0">
<parameters>
<parameter id="Camara_conexion_Est"/>
<parameter id="Camera_1"/>
<parameter id="Cod_Core_ToUse"/>
<parameter id="Escena3D_RAW"/>
<parameter id="FOTO"/>
<parameter id="ImgLeftCamera"/>
<parameter id="ModelImage"/>
<parameter id="NxLib"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="Segmento_To_Scan"/>
<parameter id="SerialHandle"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="WindowHandle"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Take_Core_In_Pallet_Segmento0">
<interface>
<io>
<par name="Z" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
<par name="N_Pallet_to_Scan" base_type="ctrl" dimension="0"/>
<par name="Path_SFM_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_3D_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_Tofind" base_type="ctrl" dimension="0"/>
<par name="Path_CORE_ID" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="Visualizar3D" base_type="ctrl" dimension="0"/>
<par name="SegmentoPallet" base_type="ctrl" dimension="0"/>
<par name="Pose_Esquina" base_type="ctrl" dimension="0"/>
<par name="PitutoExist" base_type="ctrl" dimension="0"/>
<par name="ObjectModel3D_Core_Pallet" base_type="ctrl" dimension="0"/>
<par name="SFM_Core_Pallet" base_type="ctrl" dimension="0"/>
<par name="Modelo3D_Select" base_type="ctrl" dimension="0"/>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
<par name="Estado_Fx" base_type="ctrl" dimension="0"/>
<par name="g_AltutaVirtualCamEstereo" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Estado_SubProceso" base_type="ctrl" dimension="0"/>
<par name="RepetirFoto" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Parametros_Visualizacion := ['colored','disp_pose','point_size']</l>
<l>Valores_Visualizacion := [  12  ,'true',1]</l>
<c></c>
<c></c>
<c>* *****************************************</c>
<c>* 1.- Obtengo el ROI3D del PALLET</c>
<c>* *****************************************</c>
<l>Get_Segmento (SerialHandle, Vector_Estado_Fx, Pose_Esquina, Escena3D_RAW, Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, WindowHandle, Vector_Segmento, ROI3D_NullFrame, ROI3D_rotate, Exception, EstadoFx, Estado, Pose_Segmentos)</l>
<c></c>
<l>* # ###################################################################</l>
<l>* # ###################################################################</l>
<l>* # ################ BUSQUEDA DE CORES EN EL PALLET ###################</l>
<l>* # ###################################################################</l>
<l>* # ###################################################################</l>
<c>* 3.- Encuentro el orden y los segementos en que estan distribuidos los cores en el applet</c>
<c></c>
<l>Vector_Entidades_Segmento := Vector_ID_Core_by_Segment_Pallet_Tofind+';'+SegmentoPallet</l>
<c></c>
<l>try</l>
<c>    </c>
<c>    * ********************************************************</c>
<c>    * ROI 3D sectorizado de cada elemento</c>
<c>    * Busco de manera sectorizada cara core en el pallet</c>
<c>    * ********************************************************</c>
<c>    * Estructura de vector</c>
<l>* # ###########################</l>
<l>* # ## CORE ## Existencia #####</l>
<l>* # ###########################</l>
<c>    </c>
<c>    ******************************************************************************</c>
<c>    ******** Proceso el entorno 3D para eliminar ruido  **************************</c>
<c>    ******************************************************************************</c>
<l> *   Sub_Process_ImageCore (Z, X, Y, SerialHandle, Estado_Funcion,\
                           Escena3D_RAW, Estado_FuncionSub)</l>
<l>    if(true)</l>
<c>        </c>
<l>        Pituto:=true</l>
<c>        ***********************************************</c>
<c>        </c>
<l>*         smooth_object_model_3d (Escena3D_RAW, 'mls', 'mls_kNN', 50, Escena3D_RAW)</l>
<l>*         Visualizar_3D ([Escena3D_RAW], Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, [], [], ['Modelo'], WindowHandle, PoseOut1)</l>
<c>        </c>
<c>        </c>
<l>        Sampling := 0.02 </l>
<l>        Send_Data_Info ('### -&gt; Iniciando Busqueda de Entidad ###',SerialHandle)</l>
<l>        Find_Sector_Core_Bloque3 (Z, Vector_ID_Core_by_Segment_Pallet_Tofind, Vector_Entidades_Segmento, Path_CORE_ID, Path_3D_Segmentos, Path_SFM_Segmentos, ROI3D_rotate, \
                                  Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, Vector_Segmento, Escena3D_RAW, Sampling, SerialHandle, Vector_Estado_Fx, Pituto, \
                                  ObjectModel3D_Core_Pallet, SFM_Core_Pallet, Modelo3D_Select, WindowHandle, Vector_Existencia_Core_New, Estado_Fx, RepetirFoto, MyPose)</l>
<c>        </c>
<c>        *****************************</c>
<l>         Estado_SubProceso:=Estado_Fx</l>
<c>        ****************************</c>
<c>        </c>
<c>        </c>
<c>        </c>
<l>        if(RepetirFoto)</l>
<l>            clear_object_model_3d ([ROI3D_rotate,ROI3D_NullFrame,Escena3D_RAW])</l>
<l>            return()</l>
<l>        endif</l>
<l>* # ### Envio data de estado ########################</l>
<l>        if (Estado_Fx)</l>
<l>            Estado := 13</l>
<l>Estado_SubProceso:=Estado_Fx</l>
<l>            Send_Data_Info('BLOQUE 3 FINALIZADO', SerialHandle)</l>
<c>            </c>
<c>            ****************************************</c>
<c>            *Descuento 1 el stock ingresado en BD                </c>
<l>         *   Set_MinusCores (SerialHandle, FXcheck)</l>
<c>            ****************************************</c>
<c>            </c>
<l>        else</l>
<l>            Procesando := 1</l>
<l>            Resultado := 2</l>
<l>            Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>            Send_Data_Info('BLOQUE 3 FINALIZADO con ### ERRORES ####', SerialHandle)  </l>
<l>        endif</l>
<l>    else</l>
<l>        Procesando := 1</l>
<l>        Resultado := 2</l>
<l>*         Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>        Send_Data_Info('BLOQUE 3 FINALIZADO con ### ERRORES ####', SerialHandle)  </l>
<l>    endif   </l>
<c>    * Borrar 3D</c>
<l>    clear_object_model_3d ([ROI3D_rotate,ROI3D_NullFrame,Escena3D_RAW])</l>
<c>    *</c>
<l>* # ################################################# </l>
<c>    * </c>
<l>catch (Exception)</l>
<l>    Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<c>    </c>
<l>    return ()</l>
<l>endtry</l>
<c>* </c>
<c>* ****************************************</c>
<c></c>
<l>return ()</l>
</body>
<docu id="Take_Core_In_Pallet_Segmento0">
<parameters>
<parameter id="Escena3D_RAW"/>
<parameter id="Estado_Fx"/>
<parameter id="Estado_SubProceso"/>
<parameter id="Modelo3D_Select"/>
<parameter id="N_Pallet_to_Scan"/>
<parameter id="ObjectModel3D_Core_Pallet"/>
<parameter id="Path_3D_Segmentos"/>
<parameter id="Path_CORE_ID"/>
<parameter id="Path_SFM_Segmentos"/>
<parameter id="PitutoExist"/>
<parameter id="Pose_Esquina"/>
<parameter id="RepetirFoto"/>
<parameter id="SFM_Core_Pallet"/>
<parameter id="SegmentoPallet"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_Tofind"/>
<parameter id="Visualizar3D"/>
<parameter id="WindowHandle"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
<parameter id="g_AltutaVirtualCamEstereo"/>
</parameters>
</docu>
</procedure>
<procedure name="Bloque_01_Send_Dinamic_Info_Pallet">
<interface>
<io>
<par name="Objeto_1_mangas" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="_EV1_O_CmdDatos" base_type="ctrl" dimension="0"/>
<par name="Path_CORE_ID" base_type="ctrl" dimension="0"/>
<par name="Path_3D_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_SFM_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
<par name="Matrix_Sleeve" base_type="ctrl" dimension="2"/>
<par name="ConteoCirculares" base_type="ctrl" dimension="0"/>
<par name="EstadoFx" base_type="ctrl" dimension="0"/>
<par name="g_CamInBasePose1" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Matrix_SleeveOut" base_type="ctrl" dimension="2"/>
<par name="Camara_conexion_Est" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>EstadoFx:=1</l>
<l>try</l>
<c>    </c>
<c>    </c>
<l>    Send_Data_Info ('-------------&gt; Bloque 1.1 de Envio de datos Iniciado &lt;-------------', SerialHandle)</l>
<c>    </c>
<l>    ConteoCircularesOut := ConteoCirculares</l>
<l>    Matrix_SleeveOut := Matrix_Sleeve</l>
<c>    </c>
<c>    ****************************</c>
<c>    *Reinicio Variables</c>
<c>    ****************************</c>
<l>    Get_VectorVariables (Vector_Variables)</l>
<c>    ***************************************</c>
<c>    *Envio datos de los elementos</c>
<c>    ***************************************</c>
<c>    *Envio los primeros 5 elementoss</c>
<l>    tuple_int (|Vector_Variables|, N_Elementos)</l>
<c>    </c>
<c>    </c>
<l>    for Index := 0 to N_Elementos-1 by 1              </l>
<l>        Tag_To_Write:=Vector_Variables[Index]</l>
<l>        Valor_Variable:=0</l>
<l>        tuple_number (Valor_Variable, Valor_Variable)</l>
<l>        Send_EthernetIP_Data (Tag_To_Write, Valor_Variable, SerialHandle)  </l>
<l>    endfor</l>
<c>    *************************************    </c>
<c>    </c>
<l>    Get_Segmento_AND_Pallet (_EV1_O_CmdDatos, Pallet, N_Pallet_to_Scan, Segmento)   </l>
<c>    </c>
<c>    </c>
<l>    IdexVector:=Segmento</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    Get_DinamicDataPallet (N_Pallet_to_Scan, SerialHandle, Matrix_Pallet, FXcheck, ExisteAlgunApilado)</l>
<l>    PosibleManga:=Matrix_Pallet.at(1).at(0)</l>
<l>    Is_a_Sleeve (PosibleManga, IsA_Sleeve)</l>
<c>    </c>
<l>    ElementosMatrix:=Matrix_Pallet.length()-1</l>
<c>    </c>
<l>    if (IdexVector&gt;ElementosMatrix and  (not IsA_Sleeve) )</l>
<c>        </c>
<l>        TagToWrite:='_EBD_I_NumEntidad'</l>
<l>        ValorTag:=255</l>
<l>        Send_EthernetIP_Data (TagToWrite,ValorTag, SerialHandle)</l>
<l>        Send_Data_Info ('-------------&gt; No existen mas elementos que Enviar. &lt;-------------', SerialHandle)</l>
<c>        * #### Envio data de estado ########################</c>
<l>        Resultado:=1</l>
<l>        Procesando:=0</l>
<l>        Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>        Send_Data_Info ('-------------&gt; Envio de datos Finalizados &lt;-------------', SerialHandle)</l>
<c>        </c>
<l>        return ()</l>
<c>        </c>
<l>    else</l>
<c>        </c>
<c>        **************************************</c>
<c>        * Por defecto la entidad es un core</c>
<c>        **************************************</c>
<l>        TagToWrite:='_EBD_I_NumEntidad'</l>
<l>        ValorTag:=2</l>
<l>        Send_EthernetIP_Data (TagToWrite,ValorTag, SerialHandle)</l>
<c>        </c>
<l>    endif</l>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    *******************************************************************</c>
<c>    * Obtengo los datos de la Matrix de Sleeve</c>
<c>    *******************************************************************</c>
<l>    ElementosMatrixSleeve :=Matrix_Sleeve.at(1).length()</l>
<l>    IndexDatos:=3</l>
<l>    ElementosMatrixSleeve:=ElementosMatrixSleeve-IndexDatos</l>
<l>    ExisteData :=Matrix_Sleeve.at(1).at(3)</l>
<c>    </c>
<l>    if (ExisteData!='')</l>
<l>        if (ElementosMatrixSleeve&gt;=IdexVector and IsA_Sleeve )</l>
<c>            </c>
<l>            Send_Data_Info ('-------------&gt; Envio Data  Ram Mangas Index-&gt; '+IdexVector, SerialHandle)          </l>
<l>            Send_Data_Ordenado_Manga (Matrix_Pallet, Path_CORE_ID, Path_3D_Segmentos, Path_SFM_Segmentos, Vector_Estado_Fx, SerialHandle, Tag_To_Write, Valor_Variable, N_Elementos, Vector_Variables)</l>
<c>            </c>
<c>            </c>
<l>            PosicionManga:= Matrix_Sleeve.at(1).at(IndexDatos+IdexVector-1)</l>
<l>            tuple_split (PosicionManga, ';', PosicionManga)</l>
<l>            tuple_number (PosicionManga, PosicionManga)</l>
<c>            </c>
<l>            create_pose (PosicionManga[0], PosicionManga[1], PosicionManga[2], 0, 0, 0, 'Rp+T', 'gba', 'point', PosicionManga_to_Robot)</l>
<c>            </c>
<l>            Send_Data_To_Robot(PosicionManga_to_Robot,SerialHandle)</l>
<c>            </c>
<c>            </c>
<c>            </c>
<l>            IdexVector:=1</l>
<c>            </c>
<l>            Tag_Destino:='_EV01_I_Pallet'+N_Pallet_to_Scan+'ZValid.'+1</l>
<l>            Estado_SubProceso:=false            </l>
<c>            *****************************************************************</c>
<l>            Valor_Variable:=1</l>
<c>            *****************************************************************</c>
<l>            Send_EthernetIP_Data (Tag_Destino, Valor_Variable, SerialHandle)            </l>
<c>            *****************************************************************</c>
<c>            * Es Manga</c>
<c>            *****************************************************************</c>
<l>            TagToWrite:='_EBD_I_NumEntidad'</l>
<l>            ValorTag:=3</l>
<l>            Send_EthernetIP_Data (TagToWrite,ValorTag, SerialHandle)</l>
<c></c>
<c>            * #### Envio data de estado ########################</c>
<l>            Resultado:=1</l>
<l>            Procesando:=1</l>
<l>            Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>            Send_Data_Info ('-------------&gt; Bloque de Envio de datos Finalizado &lt;-------------', SerialHandle)</l>
<c></c>
<l>            return()</l>
<c>            </c>
<c>            </c>
<l>        elseif(IsA_Sleeve)</l>
<c>            </c>
<l>            TagToWrite:='_EBD_I_NumEntidad'</l>
<l>            ValorTag:=255</l>
<l>            Send_EthernetIP_Data (TagToWrite,ValorTag, SerialHandle)</l>
<l>            Send_Data_Info ('-------------&gt; No existen mas elementos que Enviar. &lt;-------------', SerialHandle)</l>
<l>* #### Envio data de estado ########################</l>
<l>            Resultado:=1</l>
<l>            Procesando:=1</l>
<l>            Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>            Send_Data_Info ('-------------&gt; Envio de datos Finalizados &lt;-------------', SerialHandle)</l>
<c>            </c>
<l>            return ()</l>
<c>            </c>
<c>            </c>
<l>        endif</l>
<l>    endif</l>
<c> </c>
<c>    *******************************************************************</c>
<l>    DataSelect:= Matrix_Pallet.at(IdexVector)    </l>
<c>    *******************************************************************</c>
<c>    * Defino si el core es apilado  o Vertical</c>
<c>    *******************************************************************</c>
<c>    * Considerar Core Vertical como 55 *&lt;---------------------------</c>
<c>    ***********************************</c>
<l>    tuple_number (DataSelect.at(5), ExisteApilado_en_Segemento)            </l>
<c>    *******************************************************************</c>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    Get_Stl_Object_Core (DataSelect.at(0), Path_CORE_ID, Path_3D_Segmentos, Path_SFM_Segmentos, Vector_Estado_Fx, SerialHandle, \
                         ObjectModel3D_Core, Estado_Get_SFM_STL, Modelo3D_Select)</l>
<c>    </c>
<l>    Get_DimencionesCore (ObjectModel3D_Core, IsA_Sleeve, DataSelect.at(0), SerialHandle, AltoTotal_Core, \
                         AnchoTotal_Core, LargoTotal_Core)</l>
<c>    </c>
<c>    </c>
<l>    clear_object_model_3d (ObjectModel3D_Core)</l>
<c>    </c>
<c>    </c>
<c>    ** Codificacion Core</c>
<l>    DataSelect_Ordenado[0] :=DataSelect.at(4)</l>
<l>    DataSelect_Ordenado[1] :=DataSelect.at(1)</l>
<l>    DataSelect_Ordenado[2] :=DataSelect.at(2)</l>
<l>    DataSelect_Ordenado[3] :=DataSelect.at(3)</l>
<l>    DataSelect_Ordenado[4] :=DataSelect.at(5)</l>
<l>    DataSelect_Ordenado[5] :=AltoTotal_Core</l>
<l>    DataSelect_Ordenado[6] :=0</l>
<l>    DataSelect_Ordenado[7] :=AnchoTotal_Core</l>
<c>    </c>
<c>    </c>
<c>    ****************************************************************************************</c>
<l>    Send_EthernetIP_Data (Tag_To_Write, Valor_Variable, SerialHandle)  </l>
<c>    * Envio los eleemntos</c>
<l>    for Index := 0 to N_Elementos-1 by 1               </l>
<l>        Tag_To_Write:=Vector_Variables[Index]</l>
<l>        Valor_Variable:=DataSelect_Ordenado[Index]</l>
<l>        tuple_number (Valor_Variable, Valor_Variable)</l>
<l>        Send_EthernetIP_Data (Tag_To_Write, Valor_Variable, SerialHandle)  </l>
<l>    endfor</l>
<c>    ****************************************************************************************     </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c></c>
<c>    </c>
<c>    </c>
<c></c>
<c>    </c>
<c></c>
<c>    </c>
<c>    </c>
<c></c>
<l>* ################################################################################################### </l>
<l>* ###### Constantes de Apilados y verticales ########################################################    </l>
<l>    Core_Apilado  := 1</l>
<l>    Core_Vertical := 2</l>
<l>* ###################################################################################################</l>
<c>*                         ES UN CORE APILADO?</c>
<l>* ###################################################################################################</l>
<l>    if (ExisteApilado_en_Segemento=Core_Apilado)</l>
<c></c>
<c>        *Bloque que saca foto de apilados</c>
<l>        Get_SFM_STL (DataSelect.at(0), Path_CORE_ID, Path_3D_Segmentos, Path_SFM_Segmentos, Vector_Estado_Fx, SerialHandle,\
                     ObjectModel3D_Core_Pallet, SFM_Core_Pallet, Estado_Get_SFM_STL, Modelo3D_Select)</l>
<c>        </c>
<c>        </c>
<c>       </c>
<l>        Send_Data_Info ('Seteo Espacial del SFM', SerialHandle)</l>
<l>        set_surface_model_param (SFM_Core_Pallet, 'pose_restriction_reference_pose', [0,0,0,0,0,0,0])</l>
<l>        Send_Data_Info ('Seteo Angular del SFM', SerialHandle)</l>
<l>        set_surface_model_param (SFM_Core_Pallet, 'pose_restriction_max_angle_diff', rad(10))</l>
<l>        Send_Data_Info ('Seteo Angular Finalizado', SerialHandle)</l>
<c>        </c>
<c>       </c>
<l>        SacaFoto:=false</l>
<l>        UmbralError:=500</l>
<l>        Conteo_Error := 0</l>
<c>        </c>
<c>        ******************************************************        </c>
<l>        Resultado:=1</l>
<l>        Procesando:=0</l>
<l>        Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<c>        </c>
<c>        ***********************************************************************************</c>
<c>        * Espero a que el robot se posicione en el segmento</c>
<c>        ***********************************************************************************</c>
<l>        while(SacaFoto = 0 and Conteo_Error &lt;= UmbralError)        </l>
<l>            tagLectura:='_EV01_I_FotoApilado'   </l>
<l>            Read_EthernetIP_Data(tagLectura,SerialHandle,SacaFoto)</l>
<c>            </c>
<l>            Get_Bolean (SacaFoto, SacaFoto)</l>
<c>            </c>
<l>            Conteo_Error:=Conteo_Error+1</l>
<c>            </c>
<l>        endwhile</l>
<c>        </c>
<c>        ******************************************************        </c>
<l>        Resultado:=0</l>
<l>        Procesando:=1</l>
<l>        Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<c>        </c>
<c>        ***********************************************************************************       </c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<l>        if (Conteo_Error&gt;=UmbralError)</l>
<l>            Send_Data_Info('#### Error ####  Robot no llego a posicion de foto en segmento  ',SerialHandle)            </l>
<c>            ****************************</c>
<c>            *make something</c>
<c>            *****************************            </c>
<l>            Resultado:=2</l>
<l>            Procesando:=0</l>
<l>            Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>            Send_Data_Info ('-------------&gt;###ERROR### Bloque de Envio de datos Finalizado &lt;-------------', SerialHandle)</l>
<l>            return ()</l>
<l>        endif</l>
<c>        </c>
<c>        </c>
<c>        *************************************************************</c>
<c>        * Foto a Segmento</c>
<c>        ************************************************************</c>
<l>        tuple_number (DataSelect_Ordenado[1], Pallet_To_Scan)   </l>
<l>        tuple_number (DataSelect_Ordenado[2], Segmento_To_Scan)</l>
<c>        </c>
<l>        Bloque_3_seccion_0 (Objeto_1_mangas, ModelImage, X, Y, Z, ImgLeftCamera, \
                            SerialHandle, NxLib, Camera_1, Parametros_Visualizacion, Valores_Visualizacion,\
                            Path_SFM_Segmentos, Path_3D_Segmentos, Path_CORE_ID, Vector_Estado_Fx, ObjectModel3D_Core_Pallet, \
                            SFM_Core_Pallet, Modelo3D_Select, WindowHandle, DataSelect.at(0), Matrix_SleeveOut, ConteoCircularesOut,\
                            Pallet_To_Scan, Segmento_To_Scan, g_CamInBasePose1, Matrix_SleeveOut, ConteoCircularesOut, Estado_Fx,\
                            Camara_conexion_Est)</l>
<c>        </c>
<c>        * Camara desconectada</c>
<l>        if (not Camara_conexion_Est)</l>
<l>            return()</l>
<l>        endif</l>
<c>        </c>
<l>        if ( Estado_Fx)</l>
<c>            ***********************************************</c>
<c>            *REVISAR Get_DinamicCoreData</c>
<c>            *obsERVACION : CUANDO TIENE 2 CORES REPETIDOS  b</c>
<c>            *en distintos segementos entrega la posicion del 1°</c>
<c>            ************************************************         </c>
<l>            Get_DinamicCoreData (N_Pallet_to_Scan, SerialHandle, Segmento, FXcheck1, Segmento_Core_Actual)          </l>
<l>            Index_Segmento:=2</l>
<l>            Segmento:=DataSelect.at(Index_Segmento)</l>
<l>            tuple_number (Segmento, Segmento_Core_Actual)</l>
<c>            **********************************************************</c>
<l>            Tag_Destino:='_EV01_I_Pallet'+N_Pallet_to_Scan+'ZValid.'+Segmento_Core_Actual</l>
<l>            Estado_SubProceso:=false            </l>
<c>            *************************</c>
<l>            Valor_Variable:=1</l>
<c>            *************************</c>
<l>            Send_EthernetIP_Data (Tag_Destino, Valor_Variable, SerialHandle)</l>
<c>               </c>
<l>        else</l>
<l>            Get_DinamicCoreData (N_Pallet_to_Scan, SerialHandle, Segmento, FXcheck1, Segmento_Core_Actual)          </l>
<l>            Tag_Destino:='_EV01_I_Pallet'+N_Pallet_to_Scan+'ZValid.'+Segmento_Core_Actual</l>
<l>            Estado_SubProceso:=false            </l>
<c>            *************************</c>
<l>            Valor_Variable:=0</l>
<c>            *************************</c>
<l>            Send_EthernetIP_Data (Tag_Destino, Valor_Variable, SerialHandle)</l>
<c>           </c>
<l>            Send_Data_Info ('-&gt; ### Seccion '+Segmento_Core_Actual+' del Pallet '+N_Pallet_to_Scan+' NO VALIDADA ###', SerialHandle)       </l>
<c>            </c>
<c>            </c>
<l>            Send_Data_Info ('-------------&gt; Bloque de Envio de datos Finalizado &lt;-------------', SerialHandle)       </l>
<l>            Send_Data_Info ('-----&gt; ### ERROR ### en Bloque de Deteccion. Envio de datos Finalizado &lt;------', SerialHandle)</l>
<l>            return ()</l>
<c>            </c>
<c>            </c>
<c>            </c>
<l>        endif</l>
<c>   </c>
<l>        Get_AlturaPisoPromedio (Z, ImageGauss, Regions, ConnectedRegions, SelectedRegions, ImageReduced, LocalMaxima, ImageReduced1, ConnectedRegions1, Dist_CamaraoPiso)</l>
<c>        </c>
<l>        DataSelect_Ordenado[6] :=Dist_CamaraoPiso</l>
<c>        ***************************************</c>
<c>        *Envio datos de los elementos</c>
<c>        ***************************************</c>
<c>        *Envio los primeros 7 elementoss</c>
<l>        for Index := 0 to 7 by 1              </l>
<l>            Tag_To_Write:=Vector_Variables[Index]</l>
<l>            Valor_Variable:=DataSelect_Ordenado[Index]</l>
<l>            tuple_number (Valor_Variable, Valor_Variable)</l>
<l>            Send_EthernetIP_Data (Tag_To_Write, Valor_Variable, SerialHandle)  </l>
<l>        endfor</l>
<c>        </c>
<c>        </c>
<c>        </c>
<l>* ###################################################################################################</l>
<c>*                         ES UNA MANGA?</c>
<l>* ###################################################################################################  </l>
<l>    elseif (IsA_Sleeve)</l>
<c>        *********************************************************</c>
<c>        * Si es una manga Genero la matrix de mangas y el vector</c>
<c>        *********************************************************</c>
<c>        </c>
<c>        </c>
<c>     </c>
<l>        Get_SFM_STL (DataSelect.at(0), Path_CORE_ID, Path_3D_Segmentos, Path_SFM_Segmentos, Vector_Estado_Fx, SerialHandle,\
                     ObjectModel3D_Core_Pallet, SFM_Core_Pallet, Estado_Get_SFM_STL, Modelo3D_Select)</l>
<c>        </c>
<c>     </c>
<l>        tuple_number (DataSelect_Ordenado[1], Pallet_To_Scan)   </l>
<l>        tuple_number (DataSelect_Ordenado[2], Segmento_To_Scan)</l>
<c>        </c>
<l>        Bloque_3_seccion_0 (Objeto_1_mangas, ModelImage, X, Y, Z, ImgLeftCamera, SerialHandle, NxLib, Camera_1, \
                            Parametros_Visualizacion, Valores_Visualizacion, Path_SFM_Segmentos, Path_3D_Segmentos,\
                            Path_CORE_ID, Vector_Estado_Fx, ObjectModel3D_Core_Pallet, SFM_Core_Pallet, Modelo3D_Select,\
                            WindowHandle, DataSelect.at(0), Matrix_Sleeve, ConteoCircularesOut, Pallet_To_Scan, Segmento_To_Scan, \
                            g_CamInBasePose1, Matrix_Sleeve, ConteoCircularesOut, Estado_Fx1, Camara_conexion_Est1)</l>
<c>        </c>
<l>        Matrix_SleeveOut:=Matrix_Sleeve</l>
<c>        </c>
<l>        ExisteData :=Matrix_Sleeve.at(1).at(3)</l>
<c>        </c>
<l>        clear_object_model_3d (ObjectModel3D_Core_Pallet)</l>
<l>        clear_surface_model(SFM_Core_Pallet)</l>
<c>        </c>
<l>        if (ExisteData!='')</l>
<c>            </c>
<c>            *************************************</c>
<c>            *Enviar informacion al robot</c>
<c>            *************************************</c>
<l>            tuple_split (ExisteData, ';', DataManga)</l>
<l>            tuple_number (DataManga, DataManga)</l>
<c>            </c>
<l>            create_pose (DataManga[0],DataManga[1],DataManga[2], 0, 0, 0, 'Rp+T', 'gba', 'point', PoseManga)    </l>
<l>            Send_Data_To_Robot (PoseManga, SerialHandle)</l>
<c>            </c>
<c>            </c>
<l>            Tag_To_Write:=Vector_Variables[3]</l>
<l>            Valor_Variable:=1</l>
<l>            tuple_number (Valor_Variable, Valor_Variable)</l>
<l>            Send_EthernetIP_Data (Tag_To_Write, Valor_Variable, SerialHandle)  </l>
<c>            </c>
<c>            </c>
<l>            TagToWrite:='_EBD_I_NumEntidad'</l>
<l>            ValorTag:=3</l>
<l>            Send_EthernetIP_Data (TagToWrite,ValorTag, SerialHandle)</l>
<c>            </c>
<c>            * Habilito la seccion</c>
<l>            Variable_PLC_Existencia:='_EV01_I_Pallet'+N_Pallet_to_Scan+'ZValid.'</l>
<l>            Tag_Destino:=Variable_PLC_Existencia+1</l>
<c>            *************************</c>
<l>            Valor_Variable:=1</l>
<c>            *************************</c>
<l>            Send_EthernetIP_Data (Tag_Destino, Valor_Variable, SerialHandle)</l>
<c></c>
<c>            *************************************</c>
<l>        else</l>
<c>             * Habilito la seccion</c>
<l>            Variable_PLC_Existencia:='_EV01_I_Pallet'+N_Pallet_to_Scan+'ZValid.'</l>
<l>            Tag_Destino:=Variable_PLC_Existencia+1</l>
<c>            *************************</c>
<l>            Valor_Variable:=0</l>
<c>            *************************</c>
<l>            Send_EthernetIP_Data (Tag_Destino, Valor_Variable, SerialHandle)</l>
<c>            </c>
<c>            </c>
<l>                Resultado:=2</l>
<l>                Procesando:=1</l>
<l>                Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>                Send_Data_Info ('-------------&gt; No existen Mangas detectadas &lt;-------------', SerialHandle)</l>
<c></c>
<l>                return ()</l>
<c>                </c>
<l>        endif</l>
<c>        </c>
<l>    elseif  (ExisteApilado_en_Segemento=Core_Apilado)</l>
<l>* ###################################################################################################</l>
<c>*                         DETECCION DE CORES VERTICALES </c>
<c>*                                  PENDIENTE</c>
<l>* ###################################################################################################  </l>
<l>    else</l>
<c>        </c>
<c>        ***************************************</c>
<c>        *Envio datos de los elementos</c>
<c>        ***************************************</c>
<c>        *Envio los primeros 5 elementoss</c>
<l>        for Index := 0 to 7 by 1              </l>
<l>            Tag_To_Write:=Vector_Variables[Index]</l>
<l>            Valor_Variable:=DataSelect_Ordenado[Index]</l>
<l>            tuple_number (Valor_Variable, Valor_Variable)</l>
<l>            Send_EthernetIP_Data (Tag_To_Write, Valor_Variable, SerialHandle)  </l>
<l>        endfor</l>
<c>        </c>
<l>            Get_DinamicCoreData (N_Pallet_to_Scan, SerialHandle, Segmento, FXcheck1, Segmento_Core_Actual)          </l>
<l>            Tag_Destino:='_EV01_I_Pallet'+N_Pallet_to_Scan+'ZValid.'+Segmento_Core_Actual</l>
<l>            Estado_SubProceso:=false            </l>
<c>            *************************</c>
<l>            Valor_Variable:=1</l>
<c>            *************************</c>
<l>            Send_EthernetIP_Data (Tag_Destino, Valor_Variable, SerialHandle)</l>
<c>        </c>
<l>    endif</l>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<l>* #### Envio data de estado ########################</l>
<l>    Resultado:=1</l>
<l>    Procesando:=1</l>
<l>    Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>    Send_Data_Info ('-------------&gt; Bloque de Envio de datos Finalizado &lt;-------------', SerialHandle)</l>
<c>    </c>
<l>    try</l>
<c>        </c>
<l>        clear_object_model_3d (ObjectModel3D_Core_Pallet)</l>
<l>        clear_surface_model(SFM_Core_Pallet)</l>
<l>    catch (Exception)</l>
<c>       </c>
<l>    endtry</l>
<c>    </c>
<l>catch (Exception)</l>
<c>    </c>
<l>    Send_Data_Error(Exception, SerialHandle, EstadoFx)</l>
<l>endtry</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Bloque_01_Send_Dinamic_Info_Pallet">
<parameters>
<parameter id="Camara_conexion_Est"/>
<parameter id="Camera_1"/>
<parameter id="ConteoCirculares"/>
<parameter id="EstadoFx"/>
<parameter id="Matrix_Sleeve"/>
<parameter id="Matrix_SleeveOut"/>
<parameter id="NxLib"/>
<parameter id="Objeto_1_mangas"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="Path_3D_Segmentos"/>
<parameter id="Path_CORE_ID"/>
<parameter id="Path_SFM_Segmentos"/>
<parameter id="SerialHandle"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="WindowHandle"/>
<parameter id="_EV1_O_CmdDatos"/>
<parameter id="g_CamInBasePose1"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Segmento_AND_Pallet">
<interface>
<ic>
<par name="_EV1_O_CmdDatos" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Pallet" base_type="ctrl" dimension="0"/>
<par name="Pallet_int" base_type="ctrl" dimension="0"/>
<par name="Segmento" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>        tuple_real (_EV1_O_CmdDatos, Pallet)</l>
<l>        Pallet:=Pallet/100.0</l>
<l>        tuple_int (Pallet, Pallet_int)        </l>
<c>     </c>
<l>        Segmento:=(Pallet-Pallet_int)*100.0</l>
<l>        tuple_int (Segmento+0.009, Segmento)</l>
<l>           Pallet_int:=Pallet_int-2</l>
<l>return ()</l>
</body>
<docu id="Get_Segmento_AND_Pallet">
<parameters>
<parameter id="Pallet"/>
<parameter id="Pallet_int"/>
<parameter id="Segmento"/>
<parameter id="_EV1_O_CmdDatos"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_VectorVariables_COPY_1">
<interface>
<oc>
<par name="Vector_Variables" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Vector_Variables[	0	] := '_EBD_I_EjeX'</l>
<l>Vector_Variables[	1	] := '_EBD_I_PalletIr'</l>
<l>Vector_Variables[	2	] := '_EBD_I_SegmentoIr'</l>
<l>Vector_Variables[	3	] := '_EBD_I_EjeY'</l>
<l>Vector_Variables[	4	] := '_EV01_I_EsApilado'</l>
<l>Vector_Variables[	5	] := '_EBD_I_EjeZ'</l>
<l>Vector_Variables[	6	] := '_EBD_I_EjeA'</l>
<l>Vector_Variables[	7	] := '_EV01_I_FotoApilado'</l>
<l>Vector_Variables[	8	] := '_EV01_I_EjeA'</l>
<l>Vector_Variables[	9	] := '_EV01_I_EjeB'</l>
<l>Vector_Variables[	10	] := '_EV01_I_EjeC'</l>
<l>Vector_Variables[	11	] := '_EV01_I_EjeX'</l>
<l>Vector_Variables[	12	] := '_EV01_I_EjeY'</l>
<l>Vector_Variables[	13	] := '_EV01_I_EjeZ'</l>
<l>return ()</l>
</body>
<docu id="Get_VectorVariables_COPY_1">
<parameters>
<parameter id="Vector_Variables"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_AlturaPisoPromedio">
<interface>
<io>
<par name="Z" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="ImageGauss" base_type="iconic" dimension="0"/>
<par name="Regions" base_type="iconic" dimension="0"/>
<par name="ConnectedRegions" base_type="iconic" dimension="0"/>
<par name="SelectedRegions" base_type="iconic" dimension="0"/>
<par name="ImageReduced" base_type="iconic" dimension="0"/>
<par name="LocalMaxima" base_type="iconic" dimension="0"/>
<par name="ImageReduced1" base_type="iconic" dimension="0"/>
<par name="ConnectedRegions1" base_type="iconic" dimension="0"/>
</oo>
<oc>
<par name="Dist_CamaraoPiso" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>    gauss_filter (Z, ImageGauss, 11)</l>
<l>    gauss_filter (ImageGauss, ImageGauss, 11)</l>
<l>    gauss_filter (ImageGauss, ImageGauss, 11)</l>
<l>    auto_threshold (ImageGauss, Regions, 2)</l>
<l>*     connection (Regions, ConnectedRegions)</l>
<l>*     select_shape_std (ConnectedRegions, SelectedRegions, 'max_area', 70)</l>
<c>    </c>
<l>*    reduce_domain (ImageGauss, SelectedRegions, ImageReduced)</l>
<c>    </c>
<c>    </c>
<l>    local_max (ImageGauss, LocalMaxima)</l>
<l>    reduce_domain (ImageGauss, LocalMaxima, ImageReduced1)</l>
<l>    connection (ImageReduced1, ConnectedRegions1)</l>
<l>    area_center (ConnectedRegions1, Area, Row, Column)</l>
<l>    get_grayval (ImageReduced1, Row, Column, Grayval)</l>
<c>    </c>
<l>    tuple_max (Grayval, Max)</l>
<c></c>
<l>    Dist_CamaraoPiso:=Max</l>
<l>return ()</l>
</body>
<docu id="Get_AlturaPisoPromedio">
<parameters>
<parameter id="ConnectedRegions"/>
<parameter id="ConnectedRegions1"/>
<parameter id="Dist_CamaraoPiso"/>
<parameter id="ImageGauss"/>
<parameter id="ImageReduced"/>
<parameter id="ImageReduced1"/>
<parameter id="LocalMaxima"/>
<parameter id="Regions"/>
<parameter id="SelectedRegions"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Core_ToUse_From_BDD_Fast_COPY_10">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Cod_Core_ToUse" base_type="ctrl" dimension="0"/>
<par name="Pallet_To_Scan" base_type="ctrl" dimension="0"/>
<par name="Segmento_To_Scan" base_type="ctrl" dimension="0"/>
<par name="PitutoExist" base_type="ctrl" dimension="0"/>
<par name="FXcheck" base_type="ctrl" dimension="0"/>
<par name="Diametro" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>FXcheck := false</l>
<l>for Index := 1 to 5 by 1</l>
<c></c>
<c></c>
<l>    try</l>
<l>        Variable_BD := 'ram_actualproduction'</l>
<l>        Get_Pallet_Bd_Fast_COPY_1 (Variable_BD, SerialHandle, DataBD, FXcheck)</l>
<c></c>
<l>        Cod_Core_ToUse := DataBD[3]</l>
<l>        Cod_Core_ToUseAux := DataBD[3]</l>
<l>        Pallet_To_Scan := DataBD[15]</l>
<l>        Segmento_To_Scan := DataBD[16]</l>
<l>        PitutoExist := DataBD[5]</l>
<l>        Diametro := DataBD[12]</l>
<c></c>
<l>        tuple_number (Diametro, Diametro)</l>
<c></c>
<l>        FXcheck := true</l>
<c></c>
<l>        return ()</l>
<l>    catch (Exception)</l>
<c></c>
<l>*         Mensaje := '### ERROR ### -&gt; Entidad Requerida -&gt; '+Cod_Core_ToUse+' &lt;- RAM base DATOS no CARGADA.'</l>
<l>*         Send_Data_Info (Mensaje, SerialHandle)</l>
<l>        Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<l>        FXcheck := false</l>
<l>    endtry</l>
<l>endfor</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Core_ToUse_From_BDD_Fast_COPY_10">
<parameters>
<parameter id="Cod_Core_ToUse"/>
<parameter id="Diametro"/>
<parameter id="FXcheck"/>
<parameter id="Pallet_To_Scan"/>
<parameter id="PitutoExist"/>
<parameter id="Segmento_To_Scan"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Take_Core_In_Pallet_Segmento0_COPY_1">
<interface>
<io>
<par name="Z" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
<par name="N_Pallet_to_Scan" base_type="ctrl" dimension="0"/>
<par name="Path_SFM_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_3D_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Vector_ID_Core_by_Segment_Pallet_Tofind" base_type="ctrl" dimension="0"/>
<par name="Path_CORE_ID" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="Visualizar3D" base_type="ctrl" dimension="0"/>
<par name="SegmentoPallet" base_type="ctrl" dimension="0"/>
<par name="Pose_Esquina" base_type="ctrl" dimension="0"/>
<par name="PitutoExist" base_type="ctrl" dimension="0"/>
<par name="ObjectModel3D_Core_Pallet" base_type="ctrl" dimension="0"/>
<par name="SFM_Core_Pallet" base_type="ctrl" dimension="0"/>
<par name="Modelo3D_Select" base_type="ctrl" dimension="0"/>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Estado_SubProceso" base_type="ctrl" dimension="0"/>
<par name="RepetirFoto" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Parametros_Visualizacion := ['colored','disp_pose','point_size']</l>
<l>Valores_Visualizacion := [  12  ,'true',1]</l>
<c></c>
<c></c>
<c>* *****************************************</c>
<c>* 1.- Obtengo el ROI3D del PALLET</c>
<c>* *****************************************</c>
<l>Get_Segmento_COPY_1 (SerialHandle, Vector_Estado_Fx, Pose_Esquina, Escena3D_RAW, Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, WindowHandle, Vector_Segmento, ROI3D_NullFrame, ROI3D_rotate, Exception, EstadoFx, Estado, Pose_Segmentos)</l>
<c></c>
<l>* # ###################################################################</l>
<l>* # ###################################################################</l>
<l>* # ################ BUSQUEDA DE CORES EN EL PALLET ###################</l>
<l>* # ###################################################################</l>
<l>* # ###################################################################</l>
<c>* 3.- Encuentro el orden y los segementos en que estan distribuidos los cores en el applet</c>
<c></c>
<l>Vector_Entidades_Segmento := Vector_ID_Core_by_Segment_Pallet_Tofind+';'+SegmentoPallet</l>
<c></c>
<l>try</l>
<c></c>
<c>    * ********************************************************</c>
<c>    * ROI 3D sectorizado de cada elemento</c>
<c>    * Busco de manera sectorizada cara core en el pallet</c>
<c>    * ********************************************************</c>
<c>    * Estructura de vector</c>
<l>* # ###########################</l>
<l>* # ## CORE ## Existencia #####</l>
<l>* # ###########################</l>
<c></c>
<c>    * *****************************************************************************</c>
<c>    * ******* Proceso el entorno 3D para eliminar ruido  **************************</c>
<c>    * *****************************************************************************</c>
<l>    Sub_Process_ImageCore (Z, X, Y, SerialHandle, Estado_Funcion, Escena3D_RAW, Estado_FuncionSub)</l>
<l>    if (Estado_FuncionSub)</l>
<c></c>
<c></c>
<c></c>
<c>        * ************************</c>
<c>        * REVISAR ORIENTACION</c>
<c>        * ************************</c>
<l>        if (PitutoExist ='Yes')</l>
<l>            Pituto := true</l>
<l>        endif</l>
<c></c>
<l>        Pituto := true</l>
<c></c>
<c></c>
<c>        * **********************************************</c>
<c></c>
<l>*         smooth_object_model_3d (Escena3D_RAW, 'mls', 'mls_kNN', 50, Escena3D_RAW)</l>
<l>*         Visualizar_3D ([Escena3D_RAW], Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, [], [], ['Modelo'], WindowHandle, PoseOut1)</l>
<c></c>
<c></c>
<l>        Sampling := 0.02</l>
<l>        Send_Data_Info ('### -&gt; Iniciando Busqueda de Entidad ###', SerialHandle)</l>
<l>        Find_Sector_Core_Bloque3 (Z, Vector_ID_Core_by_Segment_Pallet_Tofind, Vector_Entidades_Segmento, Path_CORE_ID, Path_3D_Segmentos, Path_SFM_Segmentos, ROI3D_rotate, Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, Vector_Segmento, Escena3D_RAW, Sampling, SerialHandle, Vector_Estado_Fx, Pituto, ObjectModel3D_Core_Pallet, SFM_Core_Pallet, Modelo3D_Select, WindowHandle, Vector_Existencia_Core_New, Estado_Fx, RepetirFoto, MyPose)</l>
<c></c>
<c>        * ****************************</c>
<l>*         return ()</l>
<c>        * ***************************</c>
<c></c>
<c></c>
<c></c>
<l>        if (RepetirFoto)</l>
<l>            clear_object_model_3d ([ROI3D_rotate,ROI3D_NullFrame,Escena3D_RAW])</l>
<l>            return ()</l>
<l>        endif</l>
<l>* # ### Envio data de estado ########################</l>
<l>        if (Estado_Fx)</l>
<l>            Estado := 13</l>
<c></c>
<l>            Send_Data_Info ('BLOQUE 3 FINALIZADO', SerialHandle)</l>
<c></c>
<c>            * ***************************************</c>
<c>            * Descuento 1 el stock ingresado en BD</c>
<l>*             Set_MinusCores (SerialHandle, FXcheck)</l>
<c>            * ***************************************</c>
<c></c>
<l>        else</l>
<l>            Procesando := 0</l>
<l>            Resultado := 2</l>
<l>            Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>            Send_Data_Info ('BLOQUE 3 FINALIZADO con ### ERRORES ####', SerialHandle)</l>
<l>        endif</l>
<l>    else</l>
<l>        Procesando := 0</l>
<l>        Resultado := 2</l>
<l>*         Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>        Send_Data_Info ('BLOQUE 3 FINALIZADO con ### ERRORES ####', SerialHandle)</l>
<l>    endif</l>
<c>    * Borrar 3D</c>
<l>    clear_object_model_3d ([ROI3D_rotate,ROI3D_NullFrame,Escena3D_RAW])</l>
<c></c>
<l>* # ################################################# </l>
<c></c>
<l>catch (Exception)</l>
<l>    Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<c></c>
<l>    return ()</l>
<l>endtry</l>
<c></c>
<c>* ****************************************</c>
<c></c>
<l>return ()</l>
</body>
<docu id="Take_Core_In_Pallet_Segmento0_COPY_1">
<parameters>
<parameter id="Escena3D_RAW"/>
<parameter id="Estado_SubProceso"/>
<parameter id="Modelo3D_Select"/>
<parameter id="N_Pallet_to_Scan"/>
<parameter id="ObjectModel3D_Core_Pallet"/>
<parameter id="Path_3D_Segmentos"/>
<parameter id="Path_CORE_ID"/>
<parameter id="Path_SFM_Segmentos"/>
<parameter id="PitutoExist"/>
<parameter id="Pose_Esquina"/>
<parameter id="RepetirFoto"/>
<parameter id="SFM_Core_Pallet"/>
<parameter id="SegmentoPallet"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet_Tofind"/>
<parameter id="Visualizar3D"/>
<parameter id="WindowHandle"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Image_Sleeve_Bloque3_Seccion0">
<interface>
<io>
<par name="Objeto_1_mangas" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="ModelImage" base_type="iconic" dimension="0"/>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
<par name="Z" base_type="iconic" dimension="0"/>
<par name="ImgLeftCamera" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="FOTO" base_type="ctrl" dimension="0"/>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
<par name="Cod_Core_ToUse" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Matrix_Sleeve" base_type="ctrl" dimension="2"/>
<par name="IndexLast" base_type="ctrl" dimension="0"/>
<par name="Diametro" base_type="ctrl" dimension="0"/>
<par name="Diametro_Interno" base_type="ctrl" dimension="0"/>
<par name="g_CamInBasePose1" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
<par name="Matrix_Sleeve_New" base_type="ctrl" dimension="2"/>
<par name="g_AltutaVirtualCamEstereo" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* Configuracion de Parametros</c>
<c></c>
<c></c>
<l>Matrix_Sleeve_New:=Matrix_Sleeve</l>
<c></c>
<l>MinimumDisparity_Cam1 := -64</l>
<l>NumberOfDisparities_Cam1 := 128</l>
<c></c>
<c></c>
<c></c>
<l>Projector:='true'</l>
<l>FrontLigth:='true'</l>
<l>AutoExposure:='true'</l>
<l>AutoGain:='true'</l>
<l>Exposure := 4.49</l>
<l>Gain:=3</l>
<l>FlexView:=1</l>
<l>Config_Parametros_Cam_R1 (NxLib, Camera_1, NumberOfDisparities_Cam1, MinimumDisparity_Cam1, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure, FlexView, TempCam)</l>
<c></c>
<c></c>
<c></c>
<l>Adq_Imagen (ModelImage, NxLib, Camera_1, Camara_conexion_Est)</l>
<c></c>
<c></c>
<l>set_framegrabber_param (NxLib, 'do_execute', 'EstimateDisparitySettings')</l>
<l>get_framegrabber_param (NxLib, '//Execute/Default/Result/193216/MinimumDisparity', MinimumDisparity)</l>
<l>get_framegrabber_param (NxLib, '//Execute/Default/Result/193216/NumberOfDisparities', NumberOfDisparities)</l>
<c></c>
<c></c>
<l>FlexView:=8</l>
<l>Config_Parametros_Cam_R1 (NxLib, Camera_1, NumberOfDisparities, MinimumDisparity, Projector, FrontLigth, AutoExposure, AutoGain, Gain, Exposure, FlexView, TempCam)</l>
<l>Adq_Imagen (ModelImage, NxLib, Camera_1, Camara_conexion_Est)</l>
<l>Adq_Imagen (ModelImage, NxLib, Camera_1, Camara_conexion_Est)</l>
<l>Adq_XYZ_Img (ModelImage, X, Y, Z)</l>
<c></c>
<c></c>
<c></c>
<l>concat_obj (Objeto_1_mangas, Objeto_1_mangas, ModelImage)</l>
<l>concat_obj (Objeto_1_mangas, ModelImage, ModelImage)</l>
<c></c>
<c></c>
<c>********************************************</c>
<l>Adq_Imagen (ModelImage2, NxLib, Camera_1, Camara_conexion_Est3)</l>
<l>Adq_XYZ_Img (ModelImage2, X, Y, Z)</l>
<c>***********************************************</c>
<c></c>
<c></c>
<c></c>
<l>* read_image (ModelImage, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/NuevaPosicionMangas/Foto1hobj.hobj')</l>
<l>* read_image (ModelImage2, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/NuevaPosicionMangas/Foto2hobj.hobj')</l>
<c></c>
<l>* write_object (ModelImage, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 2/Img_OBJ1'+Cod_Core_ToUse+'_'+Fecha)</l>
<l>* write_object (ModelImage2, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 2/Img_OBJ2'+Cod_Core_ToUse+'_'+Fecha)</l>
<l>Get_ImagenMangasResultante (ModelImage, ModelImage2, X, Y, Z, ModelImage, \
                            SerialHandle, g_CamInBasePose1, Escena3D_RAW,\
                            g_AltutaVirtualCamEstereo)</l>
<c>***write_object (ModelImage, Escena3D_RAW)</c>
<c></c>
<c></c>
<l>* read_image (ModelImage, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 2/Img_6x4x8 ND sleeve_2019_10_9_19_33_53_175.hobj')</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c>***********************************************************************</c>
<c>****** Guardo las Imagenes ********************************************</c>
<l>get_system_time (MSecond, Second, Minute, Hour, Day, YDay, Month, Year)</l>
<c></c>
<c></c>
<l>Path_base:='D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 2/'</l>
<l>Fecha:=Year+'_'+Month+'_'+Day+'_'+Hour+'_'+Minute+'_'+Second+'_'+MSecond</l>
<l>PathFile:='Img_'+Cod_Core_ToUse+'_'+Fecha</l>
<l>PathFile:='Img_6x4x8 ND sleeve_2019_8_15_9_36_50_814.hobj'</l>
<c></c>
<c></c>
<l>write_object (ModelImage, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 2/Img_'+Cod_Core_ToUse+'_'+Fecha)</l>
<l>* read_object (ModelImage, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 2/Img_6x6 Tube -HB6 sleeve_2019_10_9_19_34_18_18.hobj')</l>
<c></c>
<c></c>
<c>*************************************************************************</c>
<l>Get_TipoEntidad (Cod_Core_ToUse, Is_a_Core)</l>
<l>Adq_XYZ_Img (ModelImage, X, Y, Z)</l>
<c></c>
<l>get_image_size (X, Width, Height)</l>
<l>* dev_resize_window_fit_image (X, 0, 0,  Width, Height)</l>
<c></c>
<c>*******************************************************</c>
<c>* Segmento el dore de manera dinamica******************</c>
<l>DitsiObjMax:=2240+g_AltutaVirtualCamEstereo</l>
<l>Segmentar_Core (Z, X, Y, Z, Entidad, DitsiObjMax, Estado_Funcion)</l>
<c>*******************************************************</c>
<c></c>
<c></c>
<c></c>
<l>dilation_circle (Entidad, EntidadDilatada, Diametro*0.1)</l>
<l>reduce_domain (Z, EntidadDilatada, Z)</l>
<c></c>
<l>* select_obj(ModelImage, ImgLeftCamera, 1)</l>
<l>dev_display (EntidadDilatada)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>xyz_to_object_model_3d (X, Y, Z, Escena3D_RAW)</l>
<c></c>
<c>******************************************************************************************************************************</c>
<c></c>
<l>* dev_resize_window_fit_image (X, 0, 0, -1, -1)</l>
<l>Parametros_VisualizacionOut := ['disp_pose','color_attrib','lut','disp_lines','point_size']</l>
<l>Valores_VisualizacionOut := ['false','coord_z','rainbow','true',1]</l>
<l>create_pose (500,500, 10000, 0, 0, 0, 'Rp+T', 'gba', 'point', PoseView)</l>
<l>disp_object_model_3d (WindowHandle, Escena3D_RAW, [], PoseView, Parametros_VisualizacionOut, Valores_VisualizacionOut)</l>
<c>******************************************************************************************************************************</c>
<l>Debug_View:=0</l>
<l>Visualizar_3D ([ Escena3D_RAW], [Parametros_VisualizacionOut,'alpha'], [Valores_VisualizacionOut,1], Debug_View, [], [], [], WindowHandle, PoseOut1)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c>***********************************************</c>
<c>* Foto pallet N sacada</c>
<c>*************************************************</c>
<l>Matrix_Sleeve_New.at(IndexLast).at(1) :=true</l>
<l>Matrix_Sleeve_New.at(IndexLast).at(2) :=Path_base+PathFile</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Image_Sleeve_Bloque3_Seccion0">
<parameters>
<parameter id="Camera_1"/>
<parameter id="Cod_Core_ToUse"/>
<parameter id="Diametro"/>
<parameter id="Diametro_Interno"/>
<parameter id="Escena3D_RAW"/>
<parameter id="FOTO"/>
<parameter id="ImgLeftCamera"/>
<parameter id="IndexLast"/>
<parameter id="Matrix_Sleeve"/>
<parameter id="Matrix_Sleeve_New"/>
<parameter id="ModelImage"/>
<parameter id="NxLib"/>
<parameter id="Objeto_1_mangas"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="SerialHandle"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="WindowHandle"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
<parameter id="g_AltutaVirtualCamEstereo"/>
<parameter id="g_CamInBasePose1"/>
</parameters>
</docu>
</procedure>
<procedure name="CmdDatosIsZero">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Tag_Lectura" base_type="ctrl" dimension="0"/>
<par name="_EV1_O_CmdDatos" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>        Tag_Lectura:='_EV01_O_CmdDatos'         </l>
<l>        Read_EthernetIP_Data (Tag_Lectura, SerialHandle, _EV1_O_CmdDatos)           </l>
<l>        Conteo_error:=0</l>
<l>        while (_EV1_O_CmdDatos!=0)</l>
<l>            Read_EthernetIP_Data (Tag_Lectura, SerialHandle, _EV1_O_CmdDatos)</l>
<l>        endwhile</l>
<l>return ()</l>
</body>
<docu id="CmdDatosIsZero">
<parameters>
<parameter id="SerialHandle"/>
<parameter id="Tag_Lectura"/>
<parameter id="_EV1_O_CmdDatos"/>
</parameters>
</docu>
</procedure>
<procedure name="CmdDatosIs_Not_Zero">
<interface>
<ic>
<par name="_EV1_O_CmdDatos" base_type="ctrl" dimension="0"/>
<par name="Tag_Lectura" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="OPTICA" base_type="ctrl" dimension="0"/>
<par name="ESTEREO" base_type="ctrl" dimension="0"/>
<par name="AcqHandle_Cam_0" base_type="ctrl" dimension="0"/>
<par name="CamerasConection" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="g_Error_CamaraOpt_Adq" base_type="ctrl" dimension="0"/>
<par name="Camara_conexion_Est" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="_EV1_O_CmdDatosOut" base_type="ctrl" dimension="0"/>
<par name="NxLib_New" base_type="ctrl" dimension="0"/>
<par name="Camera_1_New" base_type="ctrl" dimension="0"/>
<par name="AcqHandle_Cam_0_New" base_type="ctrl" dimension="0"/>
<par name="BDD_Data_New" base_type="ctrl" dimension="2"/>
<par name="Existe_BDD_New" base_type="ctrl" dimension="0"/>
<par name="g_Error_CamaraOpt_Adq_New" base_type="ctrl" dimension="0"/>
<par name="Camara_conexion_Est_New" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>_EV1_O_CmdDatosOut := _EV1_O_CmdDatos</l>
<l>try</l>
<c>    *************************************************</c>
<l>           g_Error_CamaraOpt_Adq_New:=g_Error_CamaraOpt_Adq</l>
<c>           **************************************************</c>
<l>    Existe_BDD_New :=false</l>
<l>    while (_EV1_O_CmdDatosOut=0)</l>
<c>        </c>
<l>        Read_EthernetIP_Data (Tag_Lectura, SerialHandle, _EV1_O_CmdDatosOut)</l>
<c></c>
<c>        </c>
<l>* #######################################################################################</l>
<l>* ##################### BLOQUE Camera Conection             #############################       </l>
<c> * #######################################################################################       </c>
<l>        Is_Camera_Online (NxLib, AcqHandle_Cam_0, SerialHandle, CamerasConection, CamerasConection, Exception)</l>
<c>  </c>
<l>        if (CamerasConection[OPTICA]=0 or g_Error_CamaraOpt_Adq = true)</l>
<c>            </c>
<l>            Send_Data_Info ('-------------&gt; Cerrando Camara Optica', SerialHandle)</l>
<c>            </c>
<l>            try</l>
<l>                Close_Camera_0 (AcqHandle_Cam_0)    </l>
<l>            catch (Exception)</l>
<l>            endtry</l>
<l>            try</l>
<l>                Close_Camera_0 (AcqHandle_Cam_0)    </l>
<l>            catch (Exception)</l>
<l>            endtry</l>
<c>            </c>
<l>            AcqHandle_Cam_0:=[]</l>
<c>            </c>
<l>            Segundos :=5</l>
<l>            Send_Data_Info ('-------------&gt; Esperando '+Segundos+'[Seg] de reconexion', SerialHandle)</l>
<c>            </c>
<l>            wait_seconds(Segundos)</l>
<l>            Send_Data_Info ('-------------&gt; Conectando....', SerialHandle)</l>
<c>            </c>
<l>            Set_Config_Cam (AcqHandle_Cam_0, Camera0_Parameters, Camera0_Pose, Conexion_Camara_0, CalTabFile)  </l>
<l>            Is_Camera_Online (NxLib, AcqHandle_Cam_0, SerialHandle, CamerasConection, CamerasConection, Exception)</l>
<c>            </c>
<c>            </c>
<l>            if (CamerasConection[OPTICA]=1)</l>
<l>                Send_Data_Info ('-------------&gt;### EXITO ### Camara Optica Conectada &lt;-------------', SerialHandle)  </l>
<l>                AcqHandle_Cam_0_New:=AcqHandle_Cam_0</l>
<l>                Time:=100000</l>
<l>                Gain:=25</l>
<l>                Set_exposure_Time_cam_0 (AcqHandle_Cam_0_New, Time, Gain)           </l>
<l>                Get_Image (Image, AcqHandle_Cam_0, g_Error_CamaraOpt_Adq)</l>
<l>                dev_display (Image)</l>
<c></c>
<l>                g_Error_CamaraOpt_Adq_New:=g_Error_CamaraOpt_Adq</l>
<c>                </c>
<l>            else</l>
<l>                Send_Data_Info ('-------------&gt;### ERROR ### No se logro conectar camara optica. &lt;-------------', SerialHandle)  </l>
<c>                </c>
<l>            endif</l>
<c>            </c>
<l>        endif</l>
<c>        </c>
<c>        *****************************************************</c>
<l>        g_Error_CamaraOpt_Adq_New:=g_Error_CamaraOpt_Adq</l>
<l>                Camara_conexion_Est_New:=  Camara_conexion_Est</l>
<c>        *****************************************************</c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<c></c>
<c>        </c>
<c>        </c>
<l>        if (CamerasConection[ESTEREO]=0 or (not Camara_conexion_Est))</l>
<c>            </c>
<c>            </c>
<l>            Send_Data_Info ('-------------&gt; Cerrando Camara Estereo', SerialHandle)</l>
<c>            </c>
<l>            try    </l>
<l>                Close_Camera_1 (Camera_1, NxLib, Camera_1, NxLib_1)</l>
<l>            catch (Exception)</l>
<l>            endtry</l>
<c>            </c>
<l>            Camera_1:=[]</l>
<l>            NxLib:=[]</l>
<c>            </c>
<l>            Segundos :=30</l>
<l>            Send_Data_Info ('-------------&gt; Esperando '+Segundos+'[Seg] de reconexion', SerialHandle)</l>
<c>            </c>
<l>            wait_seconds(Segundos)</l>
<l>            Send_Data_Info ('-------------&gt; Conectando....', SerialHandle)</l>
<c>            </c>
<l>            Conectar_Ensenso_N35 (24001, NxLib, Camera_1, Conexion_Camara)</l>
<c>            </c>
<l>            Is_Camera_Online (NxLib, AcqHandle_Cam_0, SerialHandle, CamerasConection, CamerasConection, Exception)</l>
<c>            </c>
<c>            </c>
<l>            if (CamerasConection[ESTEREO]=1)</l>
<l>                Send_Data_Info ('-------------&gt;### EXITO ### Camara Estereo Conectada &lt;-------------', SerialHandle) </l>
<l>                Camara_conexion_Est_New:= not Camara_conexion_Est</l>
<c>                </c>
<l>            else</l>
<l>                Send_Data_Info ('-------------&gt;### ERROR ### No se logro conectar camara Estereo. &lt;-------------', SerialHandle)  </l>
<c>                </c>
<c>                </c>
<l>            endif</l>
<c>            </c>
<l>            NxLib_New:=NxLib</l>
<l>            Camera_1_New:=Camera_1</l>
<c>            </c>
<l>        endif</l>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        ***************************************************************************************</c>
<c>        ****************** si es 1, se carga la BDD de los pallets***********************</c>
<c>        ***    Read_EthernetIP_Data ('_EBD_I_CambioPattern', SerialHandle, _EV1_O_BDD)</c>
<c>        ***************************************************************************************</c>
<c>        </c>
<l>        Get_Puntero_Carga_BDD (SerialHandle, _EBD_Data_ON)</l>
<c>        </c>
<c>        </c>
<l>        EstadoBDD:=|_EBD_Data_ON|</l>
<c>        </c>
<l>        if (EstadoBDD )</l>
<c>            </c>
<l>            if (_EBD_Data_ON=1)</l>
<l>                Estado:=2</l>
<l>                BD_Dinamica (SerialHandle, Estado, Vector_Estado_Fx, Vector_ID_Core_by_Segment_Pallet_1, Vector_ID_Core_by_Segment_Pallet_2, Vector_ID_Core_by_Segment_Pallet_3,\
                             Vector_ID_Core_by_Segment_Pallet_4, Vector_ID_Core_by_Segment_Pallet_5, Vector_ID_Core_by_Segment_Pallet_6)</l>
<l>                BDD_Data:={ { [] } }</l>
<l>                BDD_Data.at(0).at(0):='Pallet 1'</l>
<l>                BDD_Data.at(0).at(1):='Pallet 2'</l>
<l>                BDD_Data.at(0).at(2):='Pallet 3'</l>
<l>                BDD_Data.at(0).at(3):='Pallet 4'</l>
<l>                BDD_Data.at(0).at(2):='Pallet 5'</l>
<l>                BDD_Data.at(0).at(3):='Pallet 6'</l>
<c>                </c>
<c>                </c>
<l>                BDD_Data.at(1).at(0):=Vector_ID_Core_by_Segment_Pallet_1</l>
<l>                BDD_Data.at(2).at(0):=Vector_ID_Core_by_Segment_Pallet_2</l>
<l>                BDD_Data.at(3).at(0):=Vector_ID_Core_by_Segment_Pallet_3</l>
<l>                BDD_Data.at(4).at(0):=Vector_ID_Core_by_Segment_Pallet_4</l>
<l>                BDD_Data.at(5).at(0):=Vector_ID_Core_by_Segment_Pallet_5</l>
<l>                BDD_Data.at(6).at(0):=Vector_ID_Core_by_Segment_Pallet_6</l>
<c>                </c>
<l>                BDD_Data_New :=BDD_Data</l>
<l>                Set_Puntero_Carga_BDD (SerialHandle)</l>
<l>                Send_Data_Info ('-------------&gt; ACTUALIZACION CORRECTA DE BDD PALLET &lt;------- ', SerialHandle)  </l>
<c>                </c>
<l>                Existe_BDD_New:=true</l>
<l>            endif</l>
<l>        endif</l>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        ***************************************************************************************</c>
<c>        ***   CERRAR SISTEMA</c>
<c>        ***************************************************************************************</c>
<c>             </c>
<l>        Get_Puntero_Cerrar_SistemaV1(SerialHandle, Cierra_Vision)</l>
<c>        </c>
<l>        if (Cierra_Vision ='Cerrar_Programa')</l>
<l>          Send_Data_Info ('######### Cerrando Sistema de Vision 1 #############', SerialHandle)  </l>
<l>            return ()</l>
<l>        elseif(Cierra_Vision ='Take_Foto')</l>
<l>          Send_Data_Info ('######### Adquiriendo Fotografia de Calibracion OPTICA #############', SerialHandle)  </l>
<c>          * ASigno valor para entrar a bloque 2</c>
<l>          _EV1_O_CmdDatosOut:=27</l>
<l>       *   break</l>
<l>        endif</l>
<c>        </c>
<c>        </c>
<c>        </c>
<c>        </c>
<l>    endwhile</l>
<c>    </c>
<c>    </c>
<l>catch (Exception)</l>
<c>    </c>
<l>    Send_Data_Error (Exception, SerialHandle, EstadoFx)</l>
<l>endtry</l>
<c></c>
<l>Send_Data_Info ('-------------&gt;Comando -----&gt; '+_EV1_O_CmdDatosOut, SerialHandle)  </l>
<c></c>
<c></c>
<l>AcqHandle_Cam_0_New:=AcqHandle_Cam_0</l>
<l>NxLib_New:=NxLib</l>
<l>Camera_1_New:=Camera_1</l>
<c></c>
<l>return ()</l>
</body>
<docu id="CmdDatosIs_Not_Zero">
<parameters>
<parameter id="AcqHandle_Cam_0"/>
<parameter id="AcqHandle_Cam_0_New"/>
<parameter id="BDD_Data_New"/>
<parameter id="Camara_conexion_Est"/>
<parameter id="Camara_conexion_Est_New"/>
<parameter id="Camera_1"/>
<parameter id="Camera_1_New"/>
<parameter id="CamerasConection"/>
<parameter id="ESTEREO"/>
<parameter id="Existe_BDD_New"/>
<parameter id="NxLib"/>
<parameter id="NxLib_New"/>
<parameter id="OPTICA"/>
<parameter id="SerialHandle"/>
<parameter id="Tag_Lectura"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="_EV1_O_CmdDatos"/>
<parameter id="_EV1_O_CmdDatosOut"/>
<parameter id="g_Error_CamaraOpt_Adq"/>
<parameter id="g_Error_CamaraOpt_Adq_New"/>
</parameters>
</docu>
</procedure>
<procedure name="Test_STR">
<interface>
<ic>
<par name="DataToSend" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Index" base_type="ctrl" dimension="0"/>
<par name="DataToSendOut" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>try</l>
<c>    </c>
<l>    DataToSendOut := DataToSend</l>
<l>for Index := 1 to 80 by 1</l>
<c>     </c>
<l>    DataToSendOut := DataToSendOut+'A'</l>
<c>    </c>
<c>    </c>
<l>endfor</l>
<c></c>
<l>for Index := 1 to 2 by 1</l>
<c>     </c>
<l>    DataToSendOut := DataToSendOut+'X'</l>
<c>    </c>
<c>    </c>
<l>endfor</l>
<c></c>
<c></c>
<l>catch (Exception)</l>
<l>asd:=0</l>
<l>endtry</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Test_STR">
<parameters>
<parameter id="DataToSend"/>
<parameter id="DataToSendOut"/>
<parameter id="Index"/>
</parameters>
</docu>
</procedure>
<procedure name="Visualizar_3D_COPY_1">
<interface>
<ic>
<par name="Modelo3D" base_type="ctrl" dimension="0"/>
<par name="Parametros_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Valores_Visualizacion" base_type="ctrl" dimension="0"/>
<par name="Visualizar" base_type="ctrl" dimension="0"/>
<par name="PoseIn" base_type="ctrl" dimension="0"/>
<par name="Title" base_type="ctrl" dimension="0"/>
<par name="Label" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Pose" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>if (Visualizar)</l>
<l>    dev_get_window (WindowHandle)</l>
<l>    visualize_object_model_3d (WindowHandle, [Modelo3D], [], [], Parametros_Visualizacion, Valores_Visualizacion, Title, Label, [], Pose)</l>
<l>endif</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Visualizar_3D_COPY_1">
<parameters>
<parameter id="Label"/>
<parameter id="Modelo3D"/>
<parameter id="Parametros_Visualizacion"/>
<parameter id="Pose"/>
<parameter id="PoseIn"/>
<parameter id="Title"/>
<parameter id="Valores_Visualizacion"/>
<parameter id="Visualizar"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_ImagenMangasResultante">
<interface>
<io>
<par name="Image1" base_type="iconic" dimension="0"/>
<par name="Image2" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Xm" base_type="iconic" dimension="0"/>
<par name="Ym" base_type="iconic" dimension="0"/>
<par name="Zm" base_type="iconic" dimension="0"/>
<par name="Escena2D_RAW" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="g_CamInBasePose1" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
<par name="g_AltutaVirtualCamEstereo" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Adq_XYZ_Img (Image1, X1, Y1, Z1)</l>
<l>Adq_XYZ_Img (Image2, X2, Y2, Z2)</l>
<c></c>
<l>Get_Robot_Pose(SerialHandle,g_CamInBasePose2)</l>
<c></c>
<c></c>
<l>deffPose:=g_CamInBasePose2-g_CamInBasePose1</l>
<c></c>
<c></c>
<c>**************************************</c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>xyz_to_object_model_3d (X1, Y1, Z1, ObjectModel3D_1)</l>
<l>xyz_to_object_model_3d (X2, Y2, Z2, ObjectModel3D2)</l>
<c></c>
<c></c>
<c></c>
<c>*******************************</c>
<c>*</c>
<c>*******************************</c>
<c></c>
<l>ValorC_2 := g_CamInBasePose2[3]</l>
<l>Get_Diff_angular (ValorC_2, ValorMin_C)</l>
<l>ValorB_2 := g_CamInBasePose2[4]</l>
<l>Get_Diff_angular (ValorB_2, ValorMin_B)</l>
<l>ValorA_2 := g_CamInBasePose2[5]</l>
<l>Get_Diff_angular (ValorA_2, ValorMin_A)</l>
<c></c>
<c></c>
<c></c>
<l>tuple_abs (deffPose, deffPose)</l>
<c></c>
<l>for Index := 0 to 1 by 1</l>
<l>    if (deffPose[Index]&gt;380)</l>
<l>        tuple_dist:=deffPose[Index]</l>
<l>        break</l>
<l>    endif</l>
<c>    </c>
<l>endfor</l>
<c></c>
<c></c>
<l>tuple_abs (tuple_dist, MovRobot)</l>
<c></c>
<c></c>
<c></c>
<l>*MovRobot := -400</l>
<l>create_pose (0, -MovRobot, 0, -ValorMin_C, -ValorMin_B, -ValorMin_A, 'Rp+T', 'gba', 'point', Pose_Translado)</l>
<c></c>
<c></c>
<l> *create_pose (0, MovRobot, 0, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose_Translado)</l>
<c></c>
<c></c>
<c></c>
<l>rigid_trans_object_model_3d (ObjectModel3D_1, Pose_Translado, ObjectModel3D_1_New)</l>
<c></c>
<l>union_object_model_3d ([ObjectModel3D_1_New,ObjectModel3D2], 'points_surface', Escena3D_RAW)</l>
<l>Parametros_Visualizacion := ['disp_pose','color_attrib','lut','disp_lines','point_size']</l>
<l>Valores_Visualizacion := ['true','coord_z','rainbow','true',1]</l>
<c></c>
<l>* Parametros_Visualizacion:=['colored','disp_pose','point_size']</l>
<l>* Valores_Visualizacion:= [  12  ,'true',1]</l>
<c></c>
<c></c>
<l> DebugView :=1</l>
<l>* Visualizar_3D_COPY_1 ([ObjectModel3D_1_New,ObjectModel3D2], Parametros_Visualizacion, Valores_Visualizacion, DebugView, [], [], [],\
                      PoseOut1)</l>
<c></c>
<l>Visualizar_3D_COPY_1 ([Escena3D_RAW], Parametros_Visualizacion, Valores_Visualizacion, DebugView, [], [], [],\
                      PoseOut1)</l>
<c></c>
<c></c>
<c></c>
<l>get_image_size (X2, Width, Height)</l>
<l>get_image_size (X2, WidthOrg, HeightOrg)</l>
<l>Nfotos := 1</l>
<l>Width := Width*Nfotos</l>
<l>Height := Height*Nfotos</l>
<l>PixelSize := 5.3e-006</l>
<c></c>
<c>*************************************</c>
<c>*Revizar y poner parametros de foto 3d no optica</c>
<c>*************************************</c>
<l>gen_cam_par_area_scan_division (12e-3, 0,PixelSize, PixelSize,\
                                Width/2, Height/2, Width, Height, CameraParam)</l>
<c></c>
<l>*gen_cam_par_area_scan_polynomial (7/1000.0, 0, 0, 0, 0, 0, PixelSize, PixelSize, \
                                  WidthOrg/2, \
                                  Nfotos*HeightOrg/2, Width, Height, CameraParam)</l>
<c></c>
<c>**************************************************************************************</c>
<c>* Muevo virtualmente la camara en Z para tener una imagen completa sin distorcion</c>
<l>g_AltutaVirtualCamEstereo:=2000</l>
<c>**************************************************************************************</c>
<l>create_pose (0, 0, g_AltutaVirtualCamEstereo, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose1)</l>
<l>object_model_3d_to_xyz (Xm, Ym, Zm, Escena3D_RAW, 'cartesian', CameraParam, Pose1)</l>
<c></c>
<c></c>
<l>compose3 (Xm, Ym, Zm, Escena2D_RAW)</l>
<l>concat_obj (Escena2D_RAW,Escena2D_RAW,Escena2D_RAW)</l>
<l>concat_obj (Escena2D_RAW,Escena2D_RAW,Escena2D_RAW)</l>
<c></c>
<l>clear_object_model_3d ([ObjectModel3D_1,ObjectModel3D2])</l>
<l>return ()</l>
</body>
<docu id="Get_ImagenMangasResultante">
<parameters>
<parameter id="Escena2D_RAW"/>
<parameter id="Escena3D_RAW"/>
<parameter id="Image1"/>
<parameter id="Image2"/>
<parameter id="SerialHandle"/>
<parameter id="Xm"/>
<parameter id="Ym"/>
<parameter id="Zm"/>
<parameter id="g_AltutaVirtualCamEstereo"/>
<parameter id="g_CamInBasePose1"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_Data_Proceso_COPY_1">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Resultado" base_type="ctrl" dimension="0"/>
<par name="Procesando" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c></c>
<l>* # #### Envio de Procesando  #######################</l>
<l>Estado_SubProceso := Procesando</l>
<l>Tag_Destino := '_EV01_I_Procesando'</l>
<l>Valor_Variable := Estado_SubProceso</l>
<l>Send_EthernetIP_Data (Tag_Destino, Valor_Variable, SerialHandle)</l>
<l>* # ### Fin envio de Resultado ######################  </l>
<c></c>
<c></c>
<c></c>
<l>* # #### Envio de Resultado  #######################</l>
<l>* # [1] = Bien [2] = falla</l>
<l>Tag_Destino := '_EV01_I_Resultado'</l>
<l>Variable_On := Resultado</l>
<l>Send_Estado_Subproceso (Variable_On, SerialHandle, Tag_Destino)</l>
<l>* # ### Fin envio de Resultado ######################  </l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Send_Data_Proceso_COPY_1">
<parameters>
<parameter id="Procesando"/>
<parameter id="Resultado"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_DiametroInternoCore_from_BDE">
<interface>
<ic>
<par name="Core" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Diametro" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>        try</l>
<c>    * </c>
<l>    Peticion := 'BaseDatos'</l>
<l>    SubRutina :='Get_DiametroCore'</l>
<c>    </c>
<l>    Data := Peticion+';'+SubRutina+';'+Core</l>
<c>    * </c>
<l>    write_serial (SerialHandle, ords(Data))</l>
<c></c>
<c>    </c>
<c></c>
<c></c>
<l>    VarSerial:=0 </l>
<l>    Conteo:=0</l>
<l>    while(VarSerial&lt;1 and Conteo&lt;50)</l>
<c>       </c>
<c>        *Numero de caracteres a leer</c>
<l>        read_serial (SerialHandle, 10, Nchar)</l>
<l>        Nchar:= chrt(Nchar)</l>
<l>        tuple_number (Nchar, Variable)</l>
<l>        VarSerial:=|Nchar|</l>
<c>        </c>
<l>        Diametro := Variable</l>
<c>        </c>
<l>        if (Variable ='###ERROR###')</l>
<l>             Send_Data_Info ('### ERROR ### Entidad -&gt; '+Core+'&lt;-\n -----------&gt; NO EXISTE\nEn la lista de Base Datos Dinamica. Verifica las bases de Datos', SerialHandle)</l>
<l>            FXcheck:=false</l>
<l>            return()</l>
<l>        endif</l>
<c></c>
<l>      *  tuple_split (Substrings, ';', DataBD)</l>
<l>          Conteo:=  Conteo+1</l>
<l>     FXcheck:=true</l>
<l>    endwhile</l>
<c></c>
<c></c>
<l>    if (Diametro=[])</l>
<l>        Send_Data_Info ('### ERROR ### Entidad -&gt; '+Core+'&lt;-\n -----------&gt; NO EXISTE\nEn la lista de Base Datos Dinamica. Verifica las bases de Datos', SerialHandle)</l>
<c>      </c>
<l>    else</l>
<l>       Send_Data_Info ('-------------&gt; Diametro Solicitado ----&gt; '+Diametro+' [mm]', SerialHandle)</l>
<c>       </c>
<l>    endif</l>
<c>    </c>
<c>    </c>
<c>           </c>
<c>    </c>
<l>catch (Exception)</l>
<c>    </c>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="Get_DiametroInternoCore_from_BDE">
<parameters>
<parameter id="Core"/>
<parameter id="Diametro"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_DiametroInternoCore_from_BDE_COPY_1">
<interface>
<ic>
<par name="Core" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Diametro" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>try</l>
<c></c>
<l>    Peticion := 'BaseDatos'</l>
<l>    SubRutina := 'Get_DiametroCore'</l>
<c></c>
<l>    Data := Peticion+';'+SubRutina+';'+Core</l>
<c></c>
<l>    write_serial (SerialHandle, ords(Data))</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>    VarSerial := 0</l>
<l>    Conteo := 0</l>
<l>    while (VarSerial&lt;1 and Conteo&lt;50)</l>
<c></c>
<c>        * Numero de caracteres a leer</c>
<l>        read_serial (SerialHandle, 10, Nchar)</l>
<l>        Nchar := chrt(Nchar)</l>
<l>        tuple_number (Nchar, Variable)</l>
<l>        VarSerial := |Nchar|</l>
<c></c>
<l>        Diametro := Variable</l>
<c></c>
<l>        if (Variable ='###ERROR###')</l>
<l>            FXcheck := false</l>
<l>            return ()</l>
<l>        endif</l>
<c></c>
<l>*         tuple_split (Substrings, ';', DataBD)</l>
<l>        Conteo := Conteo+1</l>
<l>        FXcheck := true</l>
<l>    endwhile</l>
<c></c>
<c></c>
<l>catch (Exception)</l>
<c></c>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="Get_DiametroInternoCore_from_BDE_COPY_1">
<parameters>
<parameter id="Core"/>
<parameter id="Diametro"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_PunteroBDD_COPY_2">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="VarSerial" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<l>try</l>
<c></c>
<l>    Peticion := 'BaseDatos;PunteroBDD'</l>
<c></c>
<l>    write_serial (SerialHandle, ords(Peticion))</l>
<c></c>
<c></c>
<l>    DatoOk := 0</l>
<l>    Conteo := 0</l>
<l>    while (DatoOk&lt;1 and Conteo&lt;50)</l>
<c></c>
<c>        * Numero de caracteres a leer</c>
<l>        read_serial (SerialHandle, 10, Nchar)</l>
<l>        Nchar := chrt(Nchar)</l>
<l>        DatoOk := |Nchar|</l>
<l>        tuple_number (Nchar, VarSerial)</l>
<l>        Conteo := Conteo+1</l>
<l>        FXcheck := true</l>
<l>    endwhile</l>
<c></c>
<l>    if (Conteo&gt;=10)</l>
<c></c>
<l>        FXcheck := false</l>
<l>    else</l>
<l>        FXcheck := true</l>
<l>    endif</l>
<c></c>
<l>catch (Exception)</l>
<l>    Send_Data_Error (Exception, SerialHandle, FXcheck)</l>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="Get_PunteroBDD_COPY_2">
<parameters>
<parameter id="SerialHandle"/>
<parameter id="VarSerial"/>
</parameters>
</docu>
</procedure>
<procedure name="NotZeroModel_3D_Sleeve_COPY_1">
<interface>
<ic>
<par name="Escena3D_RAW" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Escena3D_RAWOut" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Escena3D_RAWOut := Escena3D_RAW</l>
<l>get_object_model_3d_params (Escena3D_RAWOut, 'bounding_box1', GenParamValue)</l>
<c></c>
<l>x_min := GenParamValue[0]</l>
<l>y_min := GenParamValue[1]</l>
<l>z_min := GenParamValue[2]</l>
<l>x_max := GenParamValue[3]</l>
<l>y_max := GenParamValue[4]</l>
<l>z_max := GenParamValue[5]</l>
<c></c>
<l>select_points_object_model_3d (Escena3D_RAWOut, 'point_coord_z', 500, 2700, Escena3D_RAWOut)</l>
<l>return ()</l>
</body>
<docu id="NotZeroModel_3D_Sleeve_COPY_1">
<parameters>
<parameter id="Escena3D_RAW"/>
<parameter id="Escena3D_RAWOut"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Max_Altura_Mangas_COPY_1">
<interface>
<io>
<par name="Zred" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="ImageGauss" base_type="iconic" dimension="0"/>
<par name="LocalMaxima" base_type="iconic" dimension="0"/>
<par name="ConnectedRegions" base_type="iconic" dimension="0"/>
</oo>
<oc>
<par name="AlturaBase" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>threshold (Zred, Region, 10, 3000)</l>
<l>region_features (Region, 'width', DiametroPx)</l>
<c></c>
<l>erosion_circle (Region, RegionErosion, DiametroPx*0.1)</l>
<l>reduce_domain (Zred, RegionErosion, Zred)</l>
<c></c>
<l>gauss_filter (Zred, ImageGauss, 11)</l>
<l>gauss_filter (ImageGauss, ImageGauss, 11)</l>
<c></c>
<c></c>
<l>local_max (ImageGauss, LocalMaxima)</l>
<l>connection (LocalMaxima, ConnectedRegions)</l>
<l>area_center (ConnectedRegions, Area, Row, Column)</l>
<l>get_grayval (ImageGauss, Row, Column, Grayval)</l>
<c></c>
<l>tuple_max (Grayval, AlturaBase)</l>
<l>return ()</l>
</body>
<docu id="Get_Max_Altura_Mangas_COPY_1">
<parameters>
<parameter id="AlturaBase"/>
<parameter id="ConnectedRegions"/>
<parameter id="ImageGauss"/>
<parameter id="LocalMaxima"/>
<parameter id="Zred"/>
</parameters>
</docu>
</procedure>
<procedure name="Silple_Orientation_COPY_4">
<interface>
<io>
<par name="IMGris" base_type="iconic" dimension="0"/>
<par name="Zobj1" base_type="iconic" dimension="0"/>
<par name="Esquina_Left" base_type="iconic" dimension="0"/>
</io>
<oc>
<par name="Angulo" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<l>reduce_domain (IMGris, Esquina_Left, ImageReduced)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>shape_trans (Esquina_Left, RegionTrans, 'rectangle2')</l>
<c></c>
<c></c>
<c></c>
<l>gen_image_proto (Zobj1, Img1, 10)</l>
<l>gen_image_proto (Zobj1, Img2, 150)</l>
<l>reduce_domain (Img2, RegionTrans, ImageReduced2)</l>
<c></c>
<l>add_image (Img1, ImageReduced2, ImageResult, 1, 100)</l>
<l>paint_gray (ImageReduced2, Img1, MixedImage)</l>
<l>corner_response (MixedImage, ImageCorner, 3, 0.04)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>* rotate_image (ImageCorner, ImageCorner, -2, 'constant')</l>
<c></c>
<l>threshold (ImageCorner, Regions2, 1000, 5000)</l>
<c></c>
<l>reduce_domain (ImageCorner, Regions2, ImageCorner)</l>
<c></c>
<l>local_max (ImageCorner, LocalMaxima1)</l>
<l>connection (LocalMaxima1, ConnectedRegions1)</l>
<l>area_center (ConnectedRegions1, Area1, RowToFind, ColumToFind)</l>
<l>get_grayval (ImageCorner, RowToFind, ColumToFind, Grayval)</l>
<l>create_funct_1d_array (Grayval, Function)</l>
<l>* dev_inspect_ctrl (Function)</l>
<c></c>
<l>get_image_size (ImageCorner, Width, Height)</l>
<c></c>
<c></c>
<c></c>
<l>Get_EsquinasPattern_COPY_3 (Grayval, RowToFind, ColumToFind, Width, FilaPattern, ColumnasPattern, Ptr_Min, Ptr_Min2, Ptr_Min3, EsquinaDetectadas)</l>
<c></c>
<l>dev_get_window (WindowHandle)</l>
<c></c>
<c></c>
<c></c>
<l>angle_lx (RowToFind[1], ColumToFind[1], RowToFind[0], ColumToFind[0], Angle)</l>
<c></c>
<l>angle_lx (RowToFind[0], ColumToFind[0], RowToFind[1], ColumToFind[1], Angle2)</l>
<c></c>
<l>tuple_deg (Angle, Deg)</l>
<l>tuple_deg (Angle2, Deg2)</l>
<c></c>
<l>Angulos := [Deg,Deg2]</l>
<l>tuple_abs (Angulos, Abs)</l>
<l>tuple_min (Abs, Min)</l>
<c></c>
<c></c>
<l>Flag := 0</l>
<l>for Index := 0 to |Angulos|-1 by 1</l>
<c></c>
<l>    if (Min=Abs[Index])</l>
<l>        Flag := Index</l>
<l>    endif</l>
<c></c>
<l>endfor</l>
<c></c>
<c></c>
<l>Angulo := Angulos[Flag]</l>
<c></c>
<l>dev_disp_text (Angulo, 'window', RowToFind[0]+50, ColumToFind[0], 'black', [], [])</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Silple_Orientation_COPY_4">
<parameters>
<parameter id="Angulo"/>
<parameter id="Esquina_Left"/>
<parameter id="IMGris"/>
<parameter id="Zobj1"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Pose_Caltab_Smart_COPY_3">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="CameraParameters" base_type="ctrl" dimension="0"/>
<par name="CalTabFile" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="PoseForCalibrationPlate" base_type="ctrl" dimension="0"/>
<par name="EstadoFx" base_type="ctrl" dimension="0"/>
<par name="ExceptionFile" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>try</l>
<l>    ImageOut := Image</l>
<c></c>
<l>    dev_get_window (WindowHandle)</l>
<c></c>
<l>    create_calib_data ('hand_eye_moving_cam', 1, 1, CalibDataID)</l>
<l>    set_calib_data_cam_param (CalibDataID, 0, [], CameraParameters)</l>
<l>    set_calib_data_calib_object (CalibDataID, 0, CalTabFile)</l>
<l>    set_calib_data (CalibDataID, 'model', 'general', 'optimization_method', 'nonlinear')</l>
<c></c>
<l>    find_calib_object (ImageOut, CalibDataID, 0, 0, 0, [], [])</l>
<c></c>
<l>*     find_caltab (Image, CalPlate, CalTabFile, 11, 100, 20)</l>
<l>*     find_marks_and_pose (Image, CalPlate, CalTabFile, CameraParameters, 128, 10, 18, 0.9, 15, 100, RCoord1, CCoord1, StartPose)</l>
<l>*     dev_set_color ('blue')</l>
<l>*     disp_cross (200000, RCoord1, CCoord1, 40, StartPose[5])</l>
<c></c>
<l>    get_calib_data_observ_contours (Caltab, CalibDataID, 'caltab', 0, 0, 0)</l>
<l>    get_calib_data_observ_points (CalibDataID, 0, 0, 0, RCoord, CCoord, Index, PoseForCalibrationPlate)</l>
<l>    disp_cross (WindowHandle, RCoord, CCoord, 50, 0)</l>
<c>    * *****************************************************************</c>
<c>    * Si quiero [mm]</c>
<l>    dev_set_colored (3)</l>
<l>    disp_3d_coord_system (WindowHandle, CameraParameters, PoseForCalibrationPlate, 0.20)</l>
<c></c>
<c>    * ****************************</c>
<l>    OsffetX := 16.25</l>
<l>    OsffetY := 18.19</l>
<l>    OsffetZ := 5.08</l>
<c>    * ****************************</c>
<c></c>
<l>    PoseForCalibrationPlate[0] := PoseForCalibrationPlate[0]+OsffetX*1e-3</l>
<l>    PoseForCalibrationPlate[1] := PoseForCalibrationPlate[1]+OsffetY*1e-3</l>
<l>    PoseForCalibrationPlate[2] := PoseForCalibrationPlate[2]+OsffetZ*1e-3</l>
<c></c>
<c>    * ****************************</c>
<c></c>
<l>    PoseForCalibrationPlate[0:2] := PoseForCalibrationPlate[0:2]*1000</l>
<l>    PoseForCalibrationPlate[3] := PoseForCalibrationPlate[3]*0</l>
<l>    PoseForCalibrationPlate[4] := PoseForCalibrationPlate[4]*0</l>
<c></c>
<c></c>
<l>*     dev_inspect_ctrl (PoseForCalibrationPlate)</l>
<l>    PoseDisplay := PoseForCalibrationPlate</l>
<c></c>
<c></c>
<c></c>
<c>    * ****************************************************************</c>
<c></c>
<l>*     dev_inspect_ctrl (PoseForCalibrationPlate)</l>
<c></c>
<c></c>
<c></c>
<l>    Length := |RCoord|</l>
<l>    texto[0] := 'Org X: '</l>
<l>    texto[1] := 'Org Y: '</l>
<l>    texto[2] := 'Org Z: '</l>
<l>    texto[3] := 'Org C: '</l>
<l>    texto[4] := 'Org B: '</l>
<l>    texto[5] := 'Org A: '</l>
<l>    texto[6] := ' '</l>
<c></c>
<l>    N_ossf := 13</l>
<l>    dev_disp_text (texto+PoseDisplay, 'image', RCoord[Length-N_ossf], CCoord[Length-N_ossf], 'black', 'box_color', '#ffffff77')</l>
<c></c>
<l>    clear_calib_data (CalibDataID)</l>
<c></c>
<c></c>
<l>    EstadoFx := true</l>
<l>catch (Exception)</l>
<l>    EstadoFx := false</l>
<l>    ExceptionFile := Exception</l>
<c></c>
<l>endtry</l>
<c></c>
<l>return ()</l>
<c></c>
<c></c>
</body>
<docu id="Get_Pose_Caltab_Smart_COPY_3">
<parameters>
<parameter id="CalTabFile"/>
<parameter id="CameraParameters"/>
<parameter id="EstadoFx"/>
<parameter id="ExceptionFile"/>
<parameter id="Image"/>
<parameter id="PoseForCalibrationPlate"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Smart_Patron_COPY_1">
<interface>
<oo>
<par name="Image" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="ExposureTime" base_type="ctrl" dimension="0"/>
<par name="Ganancia" base_type="ctrl" dimension="0"/>
<par name="AcqHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Estado" base_type="ctrl" dimension="0"/>
<par name="Exception" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>try</l>
<c></c>
<l>    Time := ExposureTime</l>
<l>    Gain := Ganancia</l>
<l>    Set_exposure_Time_cam_0 (AcqHandle, Time, Gain)</l>
<c></c>
<l>    Get_Image (Image, AcqHandle, g_Error_CamaraOpt_Adq)</l>
<l>    dev_display (Image)</l>
<l>    get_image_size (Image, Width, Height)</l>
<c></c>
<c></c>
<c>    * **********************************************************************</c>
<c>    * ***** Guardo las Imagenes ********************************************</c>
<l>    get_system_time (MSecond, Second, Minute, Hour, Day, YDay, Month, Year)</l>
<c></c>
<l>    write_object (Image, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/Imagen'+Month+Day+Hour+Second)</l>
<c></c>
<l>*     read_image (Image, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/Imagen941134.hobj')</l>
<c></c>
<c></c>
<c></c>
<c>    * ***********************************************************************</c>
<c>    * **************************************************</c>
<c>    * Hand Eye Apunto al Descriptor</c>
<c>    * **************************************************</c>
<l>    Mensaje := 'Cargando descriptores de distorcion y de patron'</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<c></c>
<l>    Calibration := '5x5_10'</l>
<l>    CalTabFile := 'C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/6.- Caltab Din3/Caltab'+Calibration+'.descr'</l>
<l>    Get_Cam_Parameters (StartCamParam, CameraPoseOut)</l>
<c></c>
<c></c>
<c>    * **************************************************</c>
<l>* # ### Envio data de estado ########################</l>
<l>    Estado := 16</l>
<l>    Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* # #################################################</l>
<c></c>
<l>    Get_Pose_Caltab_Smart_COPY_3 (Image, StartCamParam, CalTabFile, SerialHandle, PoseForCalibrationPlate, EstadoFx, ExceptionFile)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>    if (EstadoFx)</l>
<l>        Estado := 14</l>
<l>        Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<c>        * *******************************</c>
<c>        * Enviar por ETHERNETIP</c>
<c>        * *******************************</c>
<l>* # ### Envio data de estado ########################</l>
<l>        Estado := 17</l>
<l>        Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* # #################################################</l>
<c></c>
<c></c>
<l>        Send_Data_To_Robot (PoseForCalibrationPlate, SerialHandle)</l>
<l>        Resultado := 1</l>
<l>        Procesando := 1</l>
<l>        Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* # #################################################</l>
<l>        Estado := EstadoFx</l>
<c></c>
<l>    else</l>
<l>        Estado := false</l>
<l>        Mensaje := '####### FIN BLOQUE 2. Busqueda de patron en Pattern FALLIDA #######'</l>
<l>        Send_Data_Info (Mensaje, SerialHandle)</l>
<l>    endif</l>
<c></c>
<c></c>
<l>    Exception := ExceptionFile</l>
<c></c>
<c></c>
<l>    return ()</l>
<c></c>
<l>catch (Exception)</l>
<c></c>
<l>    write_object (Image, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/ImagenNODECT_'+Month+Day+Hour+Second)</l>
<c></c>
<c></c>
<l>    return ()</l>
<c></c>
<l>* # #################################################</l>
<c></c>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="Get_Smart_Patron_COPY_1">
<parameters>
<parameter id="AcqHandle"/>
<parameter id="Estado"/>
<parameter id="Exception"/>
<parameter id="ExposureTime"/>
<parameter id="Ganancia"/>
<parameter id="Image"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Smart_Patron_COPY_2">
<interface>
<oo>
<par name="Image" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="ExposureTime" base_type="ctrl" dimension="0"/>
<par name="Ganancia" base_type="ctrl" dimension="0"/>
<par name="AcqHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Estado" base_type="ctrl" dimension="0"/>
<par name="Exception" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>try</l>
<c></c>
<l>    Time := ExposureTime</l>
<l>    Gain := Ganancia</l>
<l>    Set_exposure_Time_cam_0 (AcqHandle, Time, Gain)</l>
<c></c>
<l>    Get_Image (Image, AcqHandle, g_Error_CamaraOpt_Adq)</l>
<l>    dev_display (Image)</l>
<l>    get_image_size (Image, Width, Height)</l>
<c></c>
<c></c>
<c>    * **********************************************************************</c>
<c>    * ***** Guardo las Imagenes ********************************************</c>
<l>    get_system_time (MSecond, Second, Minute, Hour, Day, YDay, Month, Year)</l>
<c></c>
<l>    write_object (Image, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/Imagen'+Month+Day+Hour+Second)</l>
<c></c>
<l>*     read_image (Image, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/Imagen941134.hobj')</l>
<c></c>
<c></c>
<c></c>
<c>    * ***********************************************************************</c>
<c>    * **************************************************</c>
<c>    * Hand Eye Apunto al Descriptor</c>
<c>    * **************************************************</c>
<l>    Mensaje := 'Cargando descriptores de distorcion y de patron'</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<c></c>
<l>    Calibration := '5x5_10'</l>
<l>    CalTabFile := 'C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/6.- Caltab Din3/Caltab'+Calibration+'.descr'</l>
<l>    Get_Cam_Parameters (StartCamParam, CameraPoseOut)</l>
<c></c>
<c></c>
<c>    * **************************************************</c>
<l>* # ### Envio data de estado ########################</l>
<l>    Estado := 16</l>
<l>    Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* # #################################################</l>
<c></c>
<l>    Get_Pose_Caltab_Smart_COPY_3 (Image, StartCamParam, CalTabFile, SerialHandle, PoseForCalibrationPlate, EstadoFx, ExceptionFile)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>    if (EstadoFx)</l>
<l>        Estado := 14</l>
<l>        Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<c>        * *******************************</c>
<c>        * Enviar por ETHERNETIP</c>
<c>        * *******************************</c>
<l>* # ### Envio data de estado ########################</l>
<l>        Estado := 17</l>
<l>        Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* # #################################################</l>
<c></c>
<c></c>
<l>        Send_Data_To_Robot (PoseForCalibrationPlate, SerialHandle)</l>
<l>        Resultado := 1</l>
<l>        Procesando := 1</l>
<l>        Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* # #################################################</l>
<l>        Estado := EstadoFx</l>
<c></c>
<l>    else</l>
<l>        Estado := false</l>
<l>        Mensaje := '####### FIN BLOQUE 2. Busqueda de patron en Pattern FALLIDA #######'</l>
<l>        Send_Data_Info (Mensaje, SerialHandle)</l>
<l>    endif</l>
<c></c>
<c></c>
<l>    Exception := ExceptionFile</l>
<c></c>
<c></c>
<l>    return ()</l>
<c></c>
<l>catch (Exception)</l>
<c></c>
<l>    write_object (Image, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/ImagenNODECT_'+Month+Day+Hour+Second)</l>
<c></c>
<c></c>
<l>    return ()</l>
<c></c>
<l>* # #################################################</l>
<c></c>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="Get_Smart_Patron_COPY_2">
<parameters>
<parameter id="AcqHandle"/>
<parameter id="Estado"/>
<parameter id="Exception"/>
<parameter id="ExposureTime"/>
<parameter id="Ganancia"/>
<parameter id="Image"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Smart_Patron_COPY_3">
<interface>
<oo>
<par name="Image" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="ExposureTime" base_type="ctrl" dimension="0"/>
<par name="Ganancia" base_type="ctrl" dimension="0"/>
<par name="AcqHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Estado" base_type="ctrl" dimension="0"/>
<par name="Exception" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>try</l>
<c></c>
<l>    Time := ExposureTime</l>
<l>    Gain := Ganancia</l>
<l>    Set_exposure_Time_cam_0 (AcqHandle, Time, Gain)</l>
<c></c>
<l>    Get_Image (Image, AcqHandle, g_Error_CamaraOpt_Adq)</l>
<l>    dev_display (Image)</l>
<l>    get_image_size (Image, Width, Height)</l>
<c></c>
<c></c>
<c>    * **********************************************************************</c>
<c>    * ***** Guardo las Imagenes ********************************************</c>
<l>    get_system_time (MSecond, Second, Minute, Hour, Day, YDay, Month, Year)</l>
<c></c>
<l>    write_object (Image, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/Imagen'+Month+Day+Hour+Second)</l>
<c></c>
<l>*     read_image (Image, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/Imagen941134.hobj')</l>
<c></c>
<c></c>
<c></c>
<c>    * ***********************************************************************</c>
<c>    * **************************************************</c>
<c>    * Hand Eye Apunto al Descriptor</c>
<c>    * **************************************************</c>
<l>    Mensaje := 'Cargando descriptores de distorcion y de patron'</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<c></c>
<l>    Calibration := '5x5_10'</l>
<l>    CalTabFile := 'C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/6.- Caltab Din3/Caltab'+Calibration+'.descr'</l>
<l>    Get_Cam_Parameters (StartCamParam, CameraPoseOut)</l>
<c></c>
<c></c>
<c>    * **************************************************</c>
<l>* # ### Envio data de estado ########################</l>
<l>    Estado := 16</l>
<l>    Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* # #################################################</l>
<c></c>
<l>    Get_Pose_Caltab_Smart_COPY_3 (Image, StartCamParam, CalTabFile, SerialHandle, PoseForCalibrationPlate, EstadoFx, ExceptionFile)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>    if (EstadoFx)</l>
<l>        Estado := 14</l>
<l>        Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<c>        * *******************************</c>
<c>        * Enviar por ETHERNETIP</c>
<c>        * *******************************</c>
<l>* # ### Envio data de estado ########################</l>
<l>        Estado := 17</l>
<l>        Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* # #################################################</l>
<c></c>
<c></c>
<l>        Send_Data_To_Robot (PoseForCalibrationPlate, SerialHandle)</l>
<l>        Resultado := 1</l>
<l>        Procesando := 1</l>
<l>        Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* # #################################################</l>
<l>        Estado := EstadoFx</l>
<c></c>
<l>    else</l>
<l>        Estado := false</l>
<l>        Mensaje := '####### FIN BLOQUE 2. Busqueda de patron en Pattern FALLIDA #######'</l>
<l>        Send_Data_Info (Mensaje, SerialHandle)</l>
<l>    endif</l>
<c></c>
<c></c>
<l>    Exception := ExceptionFile</l>
<c></c>
<c></c>
<l>    return ()</l>
<c></c>
<l>catch (Exception)</l>
<c></c>
<l>    write_object (Image, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/ImagenNODECT_'+Month+Day+Hour+Second)</l>
<c></c>
<c></c>
<l>    return ()</l>
<c></c>
<l>* # #################################################</l>
<c></c>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="Get_Smart_Patron_COPY_3">
<parameters>
<parameter id="AcqHandle"/>
<parameter id="Estado"/>
<parameter id="Exception"/>
<parameter id="ExposureTime"/>
<parameter id="Ganancia"/>
<parameter id="Image"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Smart_Patron_COPY_4">
<interface>
<oo>
<par name="Image" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="ExposureTime" base_type="ctrl" dimension="0"/>
<par name="Ganancia" base_type="ctrl" dimension="0"/>
<par name="AcqHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Estado" base_type="ctrl" dimension="0"/>
<par name="Exception" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>try</l>
<c></c>
<l>    Time := ExposureTime</l>
<l>    Gain := Ganancia</l>
<l>    Set_exposure_Time_cam_0 (AcqHandle, Time, Gain)</l>
<c></c>
<l>    Get_Image (Image, AcqHandle, g_Error_CamaraOpt_Adq)</l>
<l>    dev_display (Image)</l>
<l>    get_image_size (Image, Width, Height)</l>
<c></c>
<c></c>
<c>    * **********************************************************************</c>
<c>    * ***** Guardo las Imagenes ********************************************</c>
<l>    get_system_time (MSecond, Second, Minute, Hour, Day, YDay, Month, Year)</l>
<c></c>
<l>    write_object (Image, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/Imagen'+Month+Day+Hour+Second)</l>
<c></c>
<l>*     read_image (Image, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/Imagen941134.hobj')</l>
<c></c>
<c></c>
<c></c>
<c>    * ***********************************************************************</c>
<c>    * **************************************************</c>
<c>    * Hand Eye Apunto al Descriptor</c>
<c>    * **************************************************</c>
<l>    Mensaje := 'Cargando descriptores de distorcion y de patron'</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<c></c>
<l>    Calibration := '5x5_10'</l>
<l>    CalTabFile := 'C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/6.- Caltab Din3/Caltab'+Calibration+'.descr'</l>
<l>    Get_Cam_Parameters (StartCamParam, CameraPoseOut)</l>
<c></c>
<c></c>
<c>    * **************************************************</c>
<l>* # ### Envio data de estado ########################</l>
<l>    Estado := 16</l>
<l>    Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* # #################################################</l>
<c></c>
<l>    Get_Pose_Caltab_Smart_COPY_3 (Image, StartCamParam, CalTabFile, SerialHandle, PoseForCalibrationPlate, EstadoFx, ExceptionFile)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>    if (EstadoFx)</l>
<l>        Estado := 14</l>
<l>        Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<c>        * *******************************</c>
<c>        * Enviar por ETHERNETIP</c>
<c>        * *******************************</c>
<l>* # ### Envio data de estado ########################</l>
<l>        Estado := 17</l>
<l>        Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* # #################################################</l>
<c></c>
<c></c>
<l>        Send_Data_To_Robot (PoseForCalibrationPlate, SerialHandle)</l>
<l>        Resultado := 1</l>
<l>        Procesando := 1</l>
<l>        Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* # #################################################</l>
<l>        Estado := EstadoFx</l>
<c></c>
<l>    else</l>
<l>        Estado := false</l>
<l>        Mensaje := '####### FIN BLOQUE 2. Busqueda de patron en Pattern FALLIDA #######'</l>
<l>        Send_Data_Info (Mensaje, SerialHandle)</l>
<l>    endif</l>
<c></c>
<c></c>
<l>    Exception := ExceptionFile</l>
<c></c>
<c></c>
<l>    return ()</l>
<c></c>
<l>catch (Exception)</l>
<c></c>
<l>    write_object (Image, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/ImagenNODECT_'+Month+Day+Hour+Second)</l>
<c></c>
<c></c>
<l>    return ()</l>
<c></c>
<l>* # #################################################</l>
<c></c>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="Get_Smart_Patron_COPY_4">
<parameters>
<parameter id="AcqHandle"/>
<parameter id="Estado"/>
<parameter id="Exception"/>
<parameter id="ExposureTime"/>
<parameter id="Ganancia"/>
<parameter id="Image"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Smart_Patron_COPY_5">
<interface>
<oo>
<par name="Image" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="ExposureTime" base_type="ctrl" dimension="0"/>
<par name="Ganancia" base_type="ctrl" dimension="0"/>
<par name="AcqHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Estado" base_type="ctrl" dimension="0"/>
<par name="Exception" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>try</l>
<c></c>
<l>    Time := ExposureTime</l>
<l>    Gain := Ganancia</l>
<l>    Set_exposure_Time_cam_0 (AcqHandle, Time, Gain)</l>
<c></c>
<l>    Get_Image (Image, AcqHandle, g_Error_CamaraOpt_Adq)</l>
<l>    dev_display (Image)</l>
<l>    get_image_size (Image, Width, Height)</l>
<c></c>
<c></c>
<c>    * **********************************************************************</c>
<c>    * ***** Guardo las Imagenes ********************************************</c>
<l>    get_system_time (MSecond, Second, Minute, Hour, Day, YDay, Month, Year)</l>
<c></c>
<l>    write_object (Image, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/Imagen'+Month+Day+Hour+Second)</l>
<c></c>
<l>*     read_image (Image, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/Imagen941134.hobj')</l>
<c></c>
<c></c>
<c></c>
<c>    * ***********************************************************************</c>
<c>    * **************************************************</c>
<c>    * Hand Eye Apunto al Descriptor</c>
<c>    * **************************************************</c>
<l>    Mensaje := 'Cargando descriptores de distorcion y de patron'</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<c></c>
<l>    Calibration := '5x5_10'</l>
<l>    CalTabFile := 'C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/6.- Caltab Din3/Caltab'+Calibration+'.descr'</l>
<l>    Get_Cam_Parameters (StartCamParam, CameraPoseOut)</l>
<c></c>
<c></c>
<c>    * **************************************************</c>
<l>* # ### Envio data de estado ########################</l>
<l>    Estado := 16</l>
<l>    Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* # #################################################</l>
<c></c>
<l>    Get_Pose_Caltab_Smart_COPY_3 (Image, StartCamParam, CalTabFile, SerialHandle, PoseForCalibrationPlate, EstadoFx, ExceptionFile)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>    if (EstadoFx)</l>
<l>        Estado := 14</l>
<l>        Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<c>        * *******************************</c>
<c>        * Enviar por ETHERNETIP</c>
<c>        * *******************************</c>
<l>* # ### Envio data de estado ########################</l>
<l>        Estado := 17</l>
<l>        Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* # #################################################</l>
<c></c>
<c></c>
<l>        Send_Data_To_Robot (PoseForCalibrationPlate, SerialHandle)</l>
<l>        Resultado := 1</l>
<l>        Procesando := 1</l>
<l>        Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* # #################################################</l>
<l>        Estado := EstadoFx</l>
<c></c>
<l>    else</l>
<l>        Estado := false</l>
<l>        Mensaje := '####### FIN BLOQUE 2. Busqueda de patron en Pattern FALLIDA #######'</l>
<l>        Send_Data_Info (Mensaje, SerialHandle)</l>
<l>    endif</l>
<c></c>
<c></c>
<l>    Exception := ExceptionFile</l>
<c></c>
<c></c>
<l>    return ()</l>
<c></c>
<l>catch (Exception)</l>
<c></c>
<l>    write_object (Image, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/ImagenNODECT_'+Month+Day+Hour+Second)</l>
<c></c>
<c></c>
<l>    return ()</l>
<c></c>
<l>* # #################################################</l>
<c></c>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="Get_Smart_Patron_COPY_5">
<parameters>
<parameter id="AcqHandle"/>
<parameter id="Estado"/>
<parameter id="Exception"/>
<parameter id="ExposureTime"/>
<parameter id="Ganancia"/>
<parameter id="Image"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Smart_Patron_COPY_6">
<interface>
<oo>
<par name="Image" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="ExposureTime" base_type="ctrl" dimension="0"/>
<par name="Ganancia" base_type="ctrl" dimension="0"/>
<par name="AcqHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Estado" base_type="ctrl" dimension="0"/>
<par name="Exception" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>try</l>
<c></c>
<l>    Time := ExposureTime</l>
<l>    Gain := Ganancia</l>
<l>    Set_exposure_Time_cam_0 (AcqHandle, Time, Gain)</l>
<c></c>
<l>    Get_Image (Image, AcqHandle, g_Error_CamaraOpt_Adq)</l>
<l>    dev_display (Image)</l>
<l>    get_image_size (Image, Width, Height)</l>
<c></c>
<c></c>
<c>    * **********************************************************************</c>
<c>    * ***** Guardo las Imagenes ********************************************</c>
<l>    get_system_time (MSecond, Second, Minute, Hour, Day, YDay, Month, Year)</l>
<c></c>
<l>    write_object (Image, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/Imagen'+Month+Day+Hour+Second)</l>
<c></c>
<l>*     read_image (Image, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/Imagen941134.hobj')</l>
<c></c>
<c></c>
<c></c>
<c>    * ***********************************************************************</c>
<c>    * **************************************************</c>
<c>    * Hand Eye Apunto al Descriptor</c>
<c>    * **************************************************</c>
<l>    Mensaje := 'Cargando descriptores de distorcion y de patron'</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<c></c>
<l>    Calibration := '5x5_10'</l>
<l>    CalTabFile := 'C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/6.- Caltab Din3/Caltab'+Calibration+'.descr'</l>
<l>    Get_Cam_Parameters (StartCamParam, CameraPoseOut)</l>
<c></c>
<c></c>
<c>    * **************************************************</c>
<l>* # ### Envio data de estado ########################</l>
<l>    Estado := 16</l>
<l>    Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* # #################################################</l>
<c></c>
<l>    Get_Pose_Caltab_Smart_COPY_3 (Image, StartCamParam, CalTabFile, SerialHandle, PoseForCalibrationPlate, EstadoFx, ExceptionFile)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>    if (EstadoFx)</l>
<l>        Estado := 14</l>
<l>        Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<c>        * *******************************</c>
<c>        * Enviar por ETHERNETIP</c>
<c>        * *******************************</c>
<l>* # ### Envio data de estado ########################</l>
<l>        Estado := 17</l>
<l>        Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* # #################################################</l>
<c></c>
<c></c>
<l>        Send_Data_To_Robot (PoseForCalibrationPlate, SerialHandle)</l>
<l>        Resultado := 1</l>
<l>        Procesando := 1</l>
<l>        Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* # #################################################</l>
<l>        Estado := EstadoFx</l>
<c></c>
<l>    else</l>
<l>        Estado := false</l>
<l>        Mensaje := '####### FIN BLOQUE 2. Busqueda de patron en Pattern FALLIDA #######'</l>
<l>        Send_Data_Info (Mensaje, SerialHandle)</l>
<l>    endif</l>
<c></c>
<c></c>
<l>    Exception := ExceptionFile</l>
<c></c>
<c></c>
<l>    return ()</l>
<c></c>
<l>catch (Exception)</l>
<c></c>
<l>    write_object (Image, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/ImagenNODECT_'+Month+Day+Hour+Second)</l>
<c></c>
<c></c>
<l>    return ()</l>
<c></c>
<l>* # #################################################</l>
<c></c>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="Get_Smart_Patron_COPY_6">
<parameters>
<parameter id="AcqHandle"/>
<parameter id="Estado"/>
<parameter id="Exception"/>
<parameter id="ExposureTime"/>
<parameter id="Ganancia"/>
<parameter id="Image"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Smart_Patron_COPY_7">
<interface>
<oo>
<par name="Image" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="ExposureTime" base_type="ctrl" dimension="0"/>
<par name="Ganancia" base_type="ctrl" dimension="0"/>
<par name="AcqHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Estado" base_type="ctrl" dimension="0"/>
<par name="Exception" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>try</l>
<c></c>
<l>    Time := ExposureTime</l>
<l>    Gain := Ganancia</l>
<l>    Set_exposure_Time_cam_0 (AcqHandle, Time, Gain)</l>
<c></c>
<l>    Get_Image (Image, AcqHandle, g_Error_CamaraOpt_Adq)</l>
<l>    dev_display (Image)</l>
<l>    get_image_size (Image, Width, Height)</l>
<c></c>
<c></c>
<c>    * **********************************************************************</c>
<c>    * ***** Guardo las Imagenes ********************************************</c>
<l>    get_system_time (MSecond, Second, Minute, Hour, Day, YDay, Month, Year)</l>
<c></c>
<l>    write_object (Image, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/Imagen'+Month+Day+Hour+Second)</l>
<c></c>
<l>*     read_image (Image, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/Imagen941134.hobj')</l>
<c></c>
<c></c>
<c></c>
<c>    * ***********************************************************************</c>
<c>    * **************************************************</c>
<c>    * Hand Eye Apunto al Descriptor</c>
<c>    * **************************************************</c>
<l>    Mensaje := 'Cargando descriptores de distorcion y de patron'</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<c></c>
<l>    Calibration := '5x5_10'</l>
<l>    CalTabFile := 'C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/6.- Caltab Din3/Caltab'+Calibration+'.descr'</l>
<l>    Get_Cam_Parameters (StartCamParam, CameraPoseOut)</l>
<c></c>
<c></c>
<c>    * **************************************************</c>
<l>* # ### Envio data de estado ########################</l>
<l>    Estado := 16</l>
<l>    Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* # #################################################</l>
<c></c>
<l>    Get_Pose_Caltab_Smart_COPY_3 (Image, StartCamParam, CalTabFile, SerialHandle, PoseForCalibrationPlate, EstadoFx, ExceptionFile)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>    if (EstadoFx)</l>
<l>        Estado := 14</l>
<l>        Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<c>        * *******************************</c>
<c>        * Enviar por ETHERNETIP</c>
<c>        * *******************************</c>
<l>* # ### Envio data de estado ########################</l>
<l>        Estado := 17</l>
<l>        Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* # #################################################</l>
<c></c>
<c></c>
<l>        Send_Data_To_Robot (PoseForCalibrationPlate, SerialHandle)</l>
<l>        Resultado := 1</l>
<l>        Procesando := 1</l>
<l>        Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* # #################################################</l>
<l>        Estado := EstadoFx</l>
<c></c>
<l>    else</l>
<l>        Estado := false</l>
<l>        Mensaje := '####### FIN BLOQUE 2. Busqueda de patron en Pattern FALLIDA #######'</l>
<l>        Send_Data_Info (Mensaje, SerialHandle)</l>
<l>    endif</l>
<c></c>
<c></c>
<l>    Exception := ExceptionFile</l>
<c></c>
<c></c>
<l>    return ()</l>
<c></c>
<l>catch (Exception)</l>
<c></c>
<l>    write_object (Image, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/ImagenNODECT_'+Month+Day+Hour+Second)</l>
<c></c>
<c></c>
<l>    return ()</l>
<c></c>
<l>* # #################################################</l>
<c></c>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="Get_Smart_Patron_COPY_7">
<parameters>
<parameter id="AcqHandle"/>
<parameter id="Estado"/>
<parameter id="Exception"/>
<parameter id="ExposureTime"/>
<parameter id="Ganancia"/>
<parameter id="Image"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Smart_Patron_COPY_8">
<interface>
<oo>
<par name="Image" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="ExposureTime" base_type="ctrl" dimension="0"/>
<par name="Ganancia" base_type="ctrl" dimension="0"/>
<par name="AcqHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Estado" base_type="ctrl" dimension="0"/>
<par name="Exception" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>try</l>
<c></c>
<l>    Time := ExposureTime</l>
<l>    Gain := Ganancia</l>
<l>    Set_exposure_Time_cam_0 (AcqHandle, Time, Gain)</l>
<c></c>
<l>    Get_Image (Image, AcqHandle, g_Error_CamaraOpt_Adq)</l>
<l>    dev_display (Image)</l>
<l>    get_image_size (Image, Width, Height)</l>
<c></c>
<c></c>
<c>    * **********************************************************************</c>
<c>    * ***** Guardo las Imagenes ********************************************</c>
<l>    get_system_time (MSecond, Second, Minute, Hour, Day, YDay, Month, Year)</l>
<c></c>
<l>    write_object (Image, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/Imagen'+Month+Day+Hour+Second)</l>
<c></c>
<l>*     read_image (Image, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/Imagen941134.hobj')</l>
<c></c>
<c></c>
<c></c>
<c>    * ***********************************************************************</c>
<c>    * **************************************************</c>
<c>    * Hand Eye Apunto al Descriptor</c>
<c>    * **************************************************</c>
<l>    Mensaje := 'Cargando descriptores de distorcion y de patron'</l>
<l>    Send_Data_Info (Mensaje, SerialHandle)</l>
<c></c>
<l>    Calibration := '5x5_10'</l>
<l>    CalTabFile := 'C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/6.- Caltab Din3/Caltab'+Calibration+'.descr'</l>
<l>    Get_Cam_Parameters (StartCamParam, CameraPoseOut)</l>
<c></c>
<c></c>
<c>    * **************************************************</c>
<l>* # ### Envio data de estado ########################</l>
<l>    Estado := 16</l>
<l>    Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* # #################################################</l>
<c></c>
<l>    Get_Pose_Caltab_Smart_COPY_3 (Image, StartCamParam, CalTabFile, SerialHandle, PoseForCalibrationPlate, EstadoFx, ExceptionFile)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>    if (EstadoFx)</l>
<l>        Estado := 14</l>
<l>        Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<c>        * *******************************</c>
<c>        * Enviar por ETHERNETIP</c>
<c>        * *******************************</c>
<l>* # ### Envio data de estado ########################</l>
<l>        Estado := 17</l>
<l>        Send_Data_Estado (Vector_Estado_Fx, Estado, SerialHandle)</l>
<l>* # #################################################</l>
<c></c>
<c></c>
<l>        Send_Data_To_Robot (PoseForCalibrationPlate, SerialHandle)</l>
<l>        Resultado := 1</l>
<l>        Procesando := 1</l>
<l>        Send_Data_Proceso (SerialHandle, Resultado, Procesando)</l>
<l>* # #################################################</l>
<l>        Estado := EstadoFx</l>
<c></c>
<l>    else</l>
<l>        Estado := false</l>
<l>        Mensaje := '####### FIN BLOQUE 2. Busqueda de patron en Pattern FALLIDA #######'</l>
<l>        Send_Data_Info (Mensaje, SerialHandle)</l>
<l>    endif</l>
<c></c>
<c></c>
<l>    Exception := ExceptionFile</l>
<c></c>
<c></c>
<l>    return ()</l>
<c></c>
<l>catch (Exception)</l>
<c></c>
<l>    write_object (Image, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/ImagenNODECT_'+Month+Day+Hour+Second)</l>
<c></c>
<c></c>
<l>    return ()</l>
<c></c>
<l>* # #################################################</l>
<c></c>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="Get_Smart_Patron_COPY_8">
<parameters>
<parameter id="AcqHandle"/>
<parameter id="Estado"/>
<parameter id="Exception"/>
<parameter id="ExposureTime"/>
<parameter id="Ganancia"/>
<parameter id="Image"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
</parameters>
</docu>
</procedure>
<procedure name="Send_Data_Ordenado_Manga">
<interface>
<ic>
<par name="Matrix_Pallet" base_type="ctrl" dimension="2"/>
<par name="Path_CORE_ID" base_type="ctrl" dimension="0"/>
<par name="Path_3D_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_SFM_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Tag_To_Write" base_type="ctrl" dimension="0"/>
<par name="Valor_Variable" base_type="ctrl" dimension="0"/>
<par name="N_Elementos" base_type="ctrl" dimension="0"/>
<par name="Vector_Variables" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>Tag_To_WriteOut := Tag_To_Write</l>
<l>Valor_VariableOut := Valor_Variable</l>
<l>            IndexVectorManga:=1</l>
<l>                DataSelect:= Matrix_Pallet.at(IndexVectorManga)</l>
<l>    tuple_number (DataSelect.at(5), ExisteApilado_en_Segemento)            </l>
<l>    Get_Stl_Object_Core (DataSelect.at(0), Path_CORE_ID, Path_3D_Segmentos, Path_SFM_Segmentos, Vector_Estado_Fx, SerialHandle, \
                         ObjectModel3D_Core, Estado_Get_SFM_STL, Modelo3D_Select)</l>
<l>    IsA_Sleeve:=1</l>
<l>Get_DimencionesCore (ObjectModel3D_Core, IsA_Sleeve, DataSelect.at(0), SerialHandle, AltoTotal_Core, AnchoTotal_Core, LargoTotal_Core)</l>
<c>    </c>
<l>    clear_object_model_3d (ObjectModel3D_Core)</l>
<c>    </c>
<c>    </c>
<c>    ** Codificacion Core</c>
<l>    DataSelect_Ordenado[0] :=DataSelect.at(4)</l>
<l>    DataSelect_Ordenado[1] :=DataSelect.at(1)</l>
<l>    DataSelect_Ordenado[2] :=DataSelect.at(2)</l>
<l>    DataSelect_Ordenado[3] :=1</l>
<l>    DataSelect_Ordenado[4] :=DataSelect.at(5)</l>
<l>    DataSelect_Ordenado[5] :=AltoTotal_Core</l>
<l>    DataSelect_Ordenado[6] :=0</l>
<l>    DataSelect_Ordenado[7] :=AnchoTotal_Core</l>
<c>    </c>
<c>    </c>
<c>    ****************************************************************************************</c>
<l>            Send_EthernetIP_Data (Tag_To_WriteOut, Valor_VariableOut, SerialHandle)</l>
<c>    * Envio los eleemntos</c>
<l>    for Index := 0 to N_Elementos-1 by 1               </l>
<l>                Tag_To_WriteOut := Vector_Variables[Index]</l>
<l>                Valor_VariableOut := DataSelect_Ordenado[Index]</l>
<l>                tuple_number (Valor_VariableOut, Valor_VariableOut)</l>
<l>                Send_EthernetIP_Data (Tag_To_WriteOut, Valor_VariableOut, SerialHandle)</l>
<l>    endfor</l>
<c>    ****************************************************************************************     </c>
<c>    </c>
<c>    </c>
<c>    </c>
<l>return ()</l>
</body>
<docu id="Send_Data_Ordenado_Manga">
<parameters>
<parameter id="Matrix_Pallet"/>
<parameter id="N_Elementos"/>
<parameter id="Path_3D_Segmentos"/>
<parameter id="Path_CORE_ID"/>
<parameter id="Path_SFM_Segmentos"/>
<parameter id="SerialHandle"/>
<parameter id="Tag_To_Write"/>
<parameter id="Valor_Variable"/>
<parameter id="Vector_Estado_Fx"/>
<parameter id="Vector_Variables"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_DiametroInternoCore_from_BDE_COPY_2">
<interface>
<ic>
<par name="Core" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Diametro" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>try</l>
<c></c>
<l>    Peticion := 'BaseDatos'</l>
<l>    SubRutina := 'Get_DiametroCore'</l>
<c></c>
<l>    Data := Peticion+';'+SubRutina+';'+Core</l>
<c></c>
<l>    write_serial (SerialHandle, ords(Data))</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>    VarSerial := 0</l>
<l>    Conteo := 0</l>
<l>    while (VarSerial&lt;1 and Conteo&lt;50)</l>
<c></c>
<c>        * Numero de caracteres a leer</c>
<l>        read_serial (SerialHandle, 10, Nchar)</l>
<l>        Nchar := chrt(Nchar)</l>
<l>        tuple_number (Nchar, Variable)</l>
<l>        VarSerial := |Nchar|</l>
<c></c>
<l>        Diametro := Variable</l>
<c></c>
<l>        if (Variable ='###ERROR###')</l>
<l>            FXcheck := false</l>
<l>            return ()</l>
<l>        endif</l>
<c></c>
<l>*         tuple_split (Substrings, ';', DataBD)</l>
<l>        Conteo := Conteo+1</l>
<l>        FXcheck := true</l>
<l>    endwhile</l>
<c></c>
<c></c>
<l>    Send_Data_Info ('-------------&gt; Diametro Solicitado ----&gt; '+Diametro+' [mm]', SerialHandle)</l>
<c></c>
<c></c>
<l>catch (Exception)</l>
<c></c>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="Get_DiametroInternoCore_from_BDE_COPY_2">
<parameters>
<parameter id="Core"/>
<parameter id="Diametro"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_DinamicCoreData">
<interface>
<ic>
<par name="N_Pallet_to_Scan" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Segmento" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="FXcheck" base_type="ctrl" dimension="0"/>
<par name="Segmento_Core_Actual" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>       </c>
<c>       </c>
<c>      </c>
<l>try</l>
<c>    * </c>
<l>    Peticion := 'BaseDatos'</l>
<l>    SubRutina :='Get_Core_Segmento'</l>
<l>    Data := Peticion+';'+SubRutina+';'+N_Pallet_to_Scan+';'+Segmento</l>
<c>    </c>
<c>    * </c>
<l>    write_serial (SerialHandle, ords(Data))</l>
<c></c>
<c>    </c>
<c></c>
<c></c>
<l>wait_seconds (0.10)</l>
<l>    VarSerial:=0 </l>
<l>    Conteo:=0</l>
<l>    while(VarSerial&lt;1 and Conteo&lt;50)</l>
<c>       </c>
<c>        *Numero de caracteres a leer</c>
<l>        read_serial (SerialHandle, 500, Nchar)</l>
<l>        Nchar:= chrt(Nchar)</l>
<l>        tuple_number (Nchar, Segmento_Core_Actual)</l>
<l>        VarSerial:=|Nchar|</l>
<c>        </c>
<l>        if (Segmento_Core_Actual ='###ERROR###')</l>
<l>            FXcheck:=false</l>
<l>            return()</l>
<l>        endif</l>
<c></c>
<l>      *  tuple_split (Substrings, ';', DataBD)</l>
<l>          Conteo:=  Conteo+1</l>
<l>     FXcheck:=true</l>
<l>    endwhile</l>
<c></c>
<l>    if (Conteo&gt;=10)</l>
<c>        </c>
<l>        FXcheck:=false</l>
<l>    else</l>
<l>        FXcheck:=true</l>
<c>   </c>
<l>    endif</l>
<c></c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<l>catch (Exception)</l>
<c>    </c>
<l>endtry</l>
<c>      </c>
<l>return ()</l>
</body>
<docu id="Get_DinamicCoreData">
<parameters>
<parameter id="FXcheck"/>
<parameter id="N_Pallet_to_Scan"/>
<parameter id="Segmento"/>
<parameter id="Segmento_Core_Actual"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_PorcentajeBusqueda">
<interface>
<ic>
<par name="Vector_ID_Core_by_Segment_Pallet" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Porcentaje" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>        try</l>
<c>    * </c>
<l>    Peticion := 'BaseDatos'</l>
<l>    SubRutina :='Get_Porcentaje_Entd'</l>
<c>    </c>
<l>    Data := Peticion+';'+SubRutina+';'+Vector_ID_Core_by_Segment_Pallet</l>
<c>    * </c>
<l>    write_serial (SerialHandle, ords(Data))</l>
<c></c>
<c>    </c>
<c></c>
<c></c>
<l>    VarSerial:=0 </l>
<l>    Conteo:=0</l>
<l>    while(VarSerial&lt;1 and Conteo&lt;50)</l>
<c>       </c>
<c>        *Numero de caracteres a leer</c>
<l>        read_serial (SerialHandle, 10, Nchar)</l>
<l>        Nchar:= chrt(Nchar)</l>
<l>        tuple_number (Nchar, Variable)</l>
<l>        VarSerial:=|Nchar|</l>
<c>        </c>
<l>        Porcentaje := Variable</l>
<c>        </c>
<l>        if (Variable ='###ERROR###')</l>
<l>            FXcheck:=false</l>
<l>            return()</l>
<l>        endif</l>
<c></c>
<l>      *  tuple_split (Substrings, ';', DataBD)</l>
<l>          Conteo:=  Conteo+1</l>
<l>     FXcheck:=true</l>
<l>    endwhile</l>
<c></c>
<c> </c>
<c>    </c>
<l>catch (Exception)</l>
<c>    </c>
<l>    Porcentaje:=1</l>
<c>    </c>
<l>endtry</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_PorcentajeBusqueda">
<parameters>
<parameter id="Porcentaje"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_ID_Core_by_Segment_Pallet"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Diff_angular">
<interface>
<ic>
<par name="ValorA_2" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ValorMin" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<l>tuple_abs (ValorA_2, ValorA_2abs)</l>
<l>diff_[0] := 0-ValorA_2abs</l>
<l>diff_[1] := 90-ValorA_2abs</l>
<l>diff_[2] := 180-ValorA_2abs</l>
<l>diff_[3] := 270-ValorA_2abs</l>
<l>tuple_abs (diff_, Abs)</l>
<l>tuple_min (Abs, Min)</l>
<c></c>
<c></c>
<c></c>
<l>for Index := 0 to 3 by 1</l>
<l>    if (Min=Abs[Index])</l>
<l>        ValorMin:=diff_[Index]</l>
<l>        tuple_real (ValorMin, ValorMin)</l>
<l>        tuple_real (diff_[Index], ValorMin_real)  </l>
<l>        Signo := Abs[Index]/ValorMin_real</l>
<l>        ValorMin:=Abs[Index]*Signo</l>
<c>        </c>
<c>        </c>
<l>        break</l>
<l>    endif</l>
<l>endfor</l>
<l>return ()</l>
</body>
<docu id="Get_Diff_angular">
<parameters>
<parameter id="ValorA_2"/>
<parameter id="ValorMin"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Puntero_Carga_BDD">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="VarSerial" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>    </c>
<c></c>
<l>try</l>
<c>    * </c>
<l>    Peticion := 'BaseDatos;Dinamica'</l>
<c>  </c>
<l>    write_serial (SerialHandle, ords(Peticion))</l>
<c></c>
<c></c>
<l>    DatoOk:=0 </l>
<l>    Conteo:=0</l>
<l>    while(DatoOk&lt;1 and Conteo&lt;50)</l>
<c>       </c>
<c>        *Numero de caracteres a leer</c>
<l>        read_serial (SerialHandle, 10, Nchar)</l>
<l>        Nchar:= chrt(Nchar)</l>
<l>        DatoOk:=|Nchar|</l>
<l>        tuple_number (Nchar, VarSerial)</l>
<l>          Conteo:=  Conteo+1</l>
<l>     FXcheck:=true</l>
<l>    endwhile</l>
<c></c>
<l>    if (Conteo&gt;=10)</l>
<c>        </c>
<l>        FXcheck:=false</l>
<l>    else</l>
<l>        FXcheck:=true</l>
<l>    endif</l>
<c></c>
<l>catch (Exception)</l>
<l>    VarSerial:=0</l>
<l>  *  Send_Data_Error (Exception, SerialHandle, FXcheck)</l>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="Get_Puntero_Carga_BDD">
<parameters>
<parameter id="SerialHandle"/>
<parameter id="VarSerial"/>
</parameters>
</docu>
</procedure>
<procedure name="Set_Puntero_Carga_BDD">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>    </c>
<c></c>
<l>try</l>
<c>    * </c>
<l>    Peticion := 'BaseDatos;Set_BDD_DinVal'</l>
<c>  </c>
<l>    write_serial (SerialHandle, ords(Peticion))</l>
<c></c>
<c></c>
<l>    DatoOk:=0 </l>
<l>    Conteo:=0</l>
<l>    while(DatoOk&lt;1 and Conteo&lt;50)</l>
<c>       </c>
<c>        *Numero de caracteres a leer</c>
<l>        read_serial (SerialHandle, 10, Nchar)</l>
<l>        Nchar:= chrt(Nchar)</l>
<l>        DatoOk:=|Nchar|</l>
<c>  </c>
<l>          Conteo:=  Conteo+1</l>
<l>     FXcheck:=true</l>
<l>    endwhile</l>
<c></c>
<l>    if (Conteo&gt;=10)</l>
<c>        </c>
<l>        FXcheck:=false</l>
<l>    else</l>
<l>        FXcheck:=true</l>
<l>    endif</l>
<c></c>
<l>catch (Exception)</l>
<l>    Send_Data_Error (Exception, SerialHandle, FXcheck)</l>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="Set_Puntero_Carga_BDD">
<parameters>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Conectar_Ensenso_N35_SendMsj">
<interface>
<ic>
<par name="Puerto" base_type="ctrl" dimension="0"/>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="NxLib" base_type="ctrl" dimension="0"/>
<par name="Camera_1" base_type="ctrl" dimension="0"/>
<par name="Conexion_Camara" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* </c>
<l>Conexion_Camara_1 := false</l>
<l>try</l>
<c>    * </c>
<l> *   info_framegrabber ('Ensenso-NxLib', 'device', Information, ValueList)</l>
<l> *   info_framegrabber ('Ensenso-NxLib', 'info_boards', Information, Estado)</l>
<c>    </c>
<c>    * Inicializacion de Arbol y camara estereo</c>
<l>    open_framegrabber ('Ensenso-NxLib', 0, 0, 0, 0, 0, 0, 'default', 0, 'Raw', 'auto_grab_data=0', 'false', 'Item', '/', 0, 0, NxLib)</l>
<c>  </c>
<c>    </c>
<c>    </c>
<l>    CamaraDisponible:=false</l>
<l>     while (not CamaraDisponible)</l>
<c>         </c>
<l>          get_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Status/Available', EstatusCamara)</l>
<c>        </c>
<l>          if (EstatusCamara='true')</l>
<l>              CamaraDisponible:=true</l>
<l>               Send_Data_Info('-&gt; Camara Estereo R1 NO Disponible...Esperando Disponibilidad &lt;-',SerialHandle)</l>
<l>          endif</l>
<c></c>
<l>     endwhile</l>
<c>    </c>
<l>     Send_Data_Info('-&gt; Camara Estereo R1 Conectada &lt;-',SerialHandle)</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    open_framegrabber ('Ensenso-NxLib', 0, 0, 0, 0, 0, 0, 'default', 0, 'Raw', 'auto_grab_data=0', 'false', 'Stereo','193216', 0, 0, Camera_1)</l>
<c>    </c>
<l>*    open_framegrabber ('Ensenso-NxLib', 0, 0, 0, 0, 0, 0, 'default', -1, 'default', -1, 'default', 'stereo', '193216', 0, 0, Camera_1)</l>
<c>*</c>
<c>    </c>
<c>    * Abro puerto TCP del Arbol</c>
<l>    set_framegrabber_param(NxLib, 'do_open_tcp_port', Puerto)</l>
<l>    Conexion_Camara := true</l>
<c>    * </c>
<l>    return ()</l>
<l>catch (Exception)</l>
<l>    Conexion_Camara := false</l>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="Conectar_Ensenso_N35_SendMsj">
<parameters>
<parameter id="Camera_1"/>
<parameter id="Conexion_Camara"/>
<parameter id="NxLib"/>
<parameter id="Puerto"/>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Puntero_Cerrar_SistemaV1">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="VarSerial" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>    </c>
<c></c>
<l>try</l>
<c>    * </c>
<l>    Peticion := 'BaseDatos;CerrarVision_Uno'</l>
<c>  </c>
<l>    write_serial (SerialHandle, ords(Peticion))</l>
<c></c>
<c></c>
<l>    DatoOk:=0 </l>
<l>    Conteo:=0</l>
<l>    while(DatoOk&lt;1 and Conteo&lt;50)</l>
<c>       </c>
<c>        *Numero de caracteres a leer</c>
<l>        read_serial (SerialHandle, 40, Nchar)</l>
<l>        Nchar:= chrt(Nchar)</l>
<l>        DatoOk:=|Nchar|</l>
<l>        VarSerial:=Nchar</l>
<l>          Conteo:=  Conteo+1</l>
<l>     FXcheck:=true</l>
<l>    endwhile</l>
<c></c>
<l>    if (Conteo&gt;=10)</l>
<c>        </c>
<l>        FXcheck:=false</l>
<l>    else</l>
<l>        FXcheck:=true</l>
<l>    endif</l>
<c></c>
<l>catch (Exception)</l>
<l>    VarSerial:=0</l>
<l>  *  Send_Data_Error (Exception, SerialHandle, FXcheck)</l>
<l>endtry</l>
<c></c>
<c></c>
<l>if (VarSerial='Cerrar_Programa')</l>
<c>    </c>
<l>   return ()</l>
<l>endif</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Puntero_Cerrar_SistemaV1">
<parameters>
<parameter id="SerialHandle"/>
<parameter id="VarSerial"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Puntero_Cerrar_SistemaV1_COPY_1">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="VarSerial" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<l>try</l>
<c></c>
<l>    Peticion := 'BaseDatos;CerrarVision_Uno'</l>
<c></c>
<l>    write_serial (SerialHandle, ords(Peticion))</l>
<c></c>
<c></c>
<l>    DatoOk := 0</l>
<l>    Conteo := 0</l>
<l>    while (DatoOk&lt;1 and Conteo&lt;50)</l>
<c></c>
<c>        * Numero de caracteres a leer</c>
<l>        read_serial (SerialHandle, 40, Nchar)</l>
<l>        Nchar := chrt(Nchar)</l>
<l>        DatoOk := |Nchar|</l>
<l>        VarSerial := Nchar</l>
<l>        Conteo := Conteo+1</l>
<l>        FXcheck := true</l>
<l>    endwhile</l>
<c></c>
<l>    if (Conteo&gt;=10)</l>
<c></c>
<l>        FXcheck := false</l>
<l>    else</l>
<l>        FXcheck := true</l>
<l>    endif</l>
<c></c>
<l>catch (Exception)</l>
<l>    VarSerial := 0</l>
<l>*     Send_Data_Error (Exception, SerialHandle, FXcheck)</l>
<l>endtry</l>
<c></c>
<c></c>
<l>if (VarSerial='Cerrar_Programa')</l>
<c></c>
<l>    return ()</l>
<l>else</l>
<l>    VarSerial := 'MantenVision'</l>
<l>endif</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_Puntero_Cerrar_SistemaV1_COPY_1">
<parameters>
<parameter id="SerialHandle"/>
<parameter id="VarSerial"/>
</parameters>
</docu>
</procedure>
<procedure name="Set_Puntero_Cerrar_SistemaV1">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>    </c>
<c></c>
<l>try</l>
<c>    * </c>
<l>    Peticion := 'BaseDatos;Abrir_ProgramaV1'</l>
<c>  </c>
<l>    write_serial (SerialHandle, ords(Peticion))</l>
<c></c>
<c></c>
<l>    DatoOk:=0 </l>
<l>    Conteo:=0</l>
<l>    while(DatoOk&lt;1 and Conteo&lt;50)</l>
<c>       </c>
<c>        *Numero de caracteres a leer</c>
<l>        read_serial (SerialHandle, 10, Nchar)</l>
<l>        Nchar:= chrt(Nchar)</l>
<l>        DatoOk:=|Nchar|</l>
<c>  </c>
<l>          Conteo:=  Conteo+1</l>
<l>     FXcheck:=true</l>
<l>    endwhile</l>
<c></c>
<l>    if (Conteo&gt;=10)</l>
<c>        </c>
<l>        FXcheck:=false</l>
<l>    else</l>
<l>        FXcheck:=true</l>
<l>    endif</l>
<c></c>
<l>catch (Exception)</l>
<l>    Send_Data_Error (Exception, SerialHandle, FXcheck)</l>
<l>endtry</l>
<l>return ()</l>
</body>
<docu id="Set_Puntero_Cerrar_SistemaV1">
<parameters>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_Available_EstereoCam">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c></c>
<c></c>
<l>while (true)</l>
<c>    </c>
<l>try</l>
<c>   </c>
<c>    * Inicializacion de Arbol y camara estereo</c>
<l>    open_framegrabber ('Ensenso-NxLib', 0, 0, 0, 0, 0, 0, 'default', 0, 'Raw', 'auto_grab_data=0', 'false', 'Item', '/', 0, 0, NxLib)</l>
<l>    set_framegrabber_param(NxLib, 'do_open_tcp_port', 24100)</l>
<c>    </c>
<c>    </c>
<l>    CamaraDisponible:=false</l>
<l>    while (not CamaraDisponible)</l>
<c>        </c>
<l>        get_framegrabber_param (NxLib, '//Cameras/BySerialNo/193216/Status/Available', EstatusCamara)</l>
<c>        </c>
<l>        if (EstatusCamara='true')</l>
<l>            CamaraDisponible:=true</l>
<l>             Send_Data_Info('-&gt; Camara Estereo Disponible... &lt;-',SerialHandle)</l>
<l>             close_framegrabber (NxLib)</l>
<l>             return()</l>
<c>             </c>
<l>        else</l>
<c></c>
<l>             close_framegrabber (NxLib)</l>
<c>             </c>
<l>             Send_Data_Info('-&gt; Camara Estereo R1 NO Disponible...Esperando Disponibilidad &lt;-',SerialHandle)</l>
<c>            </c>
<l>        endif</l>
<c>        </c>
<l>    endwhile</l>
<c>    </c>
<l>    close_framegrabber (NxLib)</l>
<c>    </c>
<l>catch (Exception)</l>
<l>    close_framegrabber (NxLib)</l>
<l>endtry</l>
<c></c>
<c></c>
<l>endwhile</l>
<l>return ()</l>
</body>
<docu id="Get_Available_EstereoCam">
<parameters>
<parameter id="SerialHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_ROI">
<interface>
<oo>
<par name="ROI_0" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="Segmento_To_Scan" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Segmento_To_Scan_pal" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>    tuple_number (Segmento_To_Scan, Segmento_To_Scan_pal)</l>
<c>   </c>
<l>    switch (Segmento_To_Scan_pal)</l>
<c>      </c>
<l>          case 1:  </l>
<c>        </c>
<c>       </c>
<c>        </c>
<l>    gen_rectangle1 (ROI_0, 287.5, 238.86, 789.26, 755.98)</l>
<l>        break</l>
<c>                </c>
<l>    case 2:  </l>
<c>        </c>
<c>       </c>
<l>        gen_rectangle1 (ROI_0, 259.34, 251.66, 750.86, 768.78)</l>
<l>        break</l>
<c>                </c>
<l>    case 3:  </l>
<c>        </c>
<l>        gen_rectangle1 (ROI_0, 287.5, 215.82, 761.1, 738.06)</l>
<c>      </c>
<l>        break</l>
<c>             </c>
<l>    case 4:  </l>
<c>        </c>
<c>       </c>
<l>        gen_rectangle1 (ROI_0, 85.26, 272.14, 604.94, 791.82)</l>
<l>        break   </l>
<c>        </c>
<l>    case 5:  </l>
<c>        </c>
<l>        gen_rectangle1 (ROI_0, 92.94, 251.66, 625.42, 766.22)</l>
<l>        break</l>
<c>        </c>
<c>        </c>
<c></c>
<l>    case 6:  </l>
<l>               gen_rectangle1 (ROI_0, 118.54, 200.46, 622.86, 730.38)</l>
<c>   </c>
<l>        break       </l>
<c>        </c>
<c>        </c>
<l>    case 7:</l>
<c>        </c>
<l>        gen_rectangle1 (ROI_0, 0.78, 243.98, 425.74, 789.26)</l>
<l>        break</l>
<c>        </c>
<c>        </c>
<l>    case 8:  </l>
<l>        gen_rectangle1 (ROI_0, 3.34, 226.06, 456.46, 789.26)</l>
<l>        break</l>
<l>    case 9:</l>
<l>        gen_rectangle1 (ROI_0, 0.78, 220.94, 487.18, 697.1)</l>
<l>        break</l>
<c>        </c>
<c>        </c>
<c>        </c>
<l>    endswitch</l>
<c>    </c>
<l>return ()</l>
</body>
<docu id="Get_ROI">
<parameters>
<parameter id="ROI_0"/>
<parameter id="Segmento_To_Scan"/>
<parameter id="Segmento_To_Scan_pal"/>
</parameters>
</docu>
</procedure>
<procedure name="Get_3dModel_Core_Direct">
<interface>
<ic>
<par name="SerialHandle" base_type="ctrl" dimension="0"/>
<par name="Path_CORE_ID" base_type="ctrl" dimension="0"/>
<par name="Path_3D_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Path_SFM_Segmentos" base_type="ctrl" dimension="0"/>
<par name="Vector_Estado_Fx" base_type="ctrl" dimension="2"/>
<par name="DerivadaCore_In" base_type="ctrl" dimension="0"/>
<par name="ObjectModel3D_Core_Pallet_In" base_type="ctrl" dimension="0"/>
<par name="SFM_Core_Pallet_In" base_type="ctrl" dimension="0"/>
<par name="Cod_Core" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ObjectModel3D_Core_Pallet_Out" base_type="ctrl" dimension="0"/>
<par name="SFM_Core_Pallet_Out" base_type="ctrl" dimension="0"/>
<par name="Modelo3D_Select" base_type="ctrl" dimension="0"/>
<par name="Cod_Core_ToUse" base_type="ctrl" dimension="0"/>
<par name="DerivadaCore_Out" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>* Get_Core_ToUse (SerialHandle, Cod_Core_ToUse, FXcheck)</l>
<l>DerivadaCore_Out:=DerivadaCore_In</l>
<l>Cod_Core_ToUse:=Cod_Core</l>
<l>DerivadaCore_Out[1] := Cod_Core_ToUse</l>
<l>*if (DerivadaCore_Out[1] != DerivadaCore_Out[0])</l>
<l>if (true)    </l>
<c>    </c>
<l>    tuple_strrstr (Cod_Core_ToUse, 'PIN', PIN)</l>
<l>    tuple_strrstr (Cod_Core_ToUse, 'LOC', LOC)</l>
<l>    tuple_strrstr (Cod_Core_ToUse, 'SPRUE', SPRUE)</l>
<l>    tuple_strrstr (Cod_Core_ToUse, 'NUM', NUMERO)</l>
<l>    tuple_strrstr (Cod_Core_ToUse, 'DOWEL', DOWEL)</l>
<c>    </c>
<l>    try</l>
<c>        </c>
<l>        if ( DOWEL=-1 and NUMERO=-1 and PIN=-1 and LOC=-1 and SPRUE=-1 and Cod_Core_ToUse != ' ')   </l>
<l>            Get_SFM_STL (Cod_Core_ToUse, Path_CORE_ID, Path_3D_Segmentos, Path_SFM_Segmentos, Vector_Estado_Fx, SerialHandle, ObjectModel3D_Core_Pallet_Out, SFM_Core_Pallet_Out, Estado_Get_SFM_STL, Modelo3D_Select)</l>
<l>        endif</l>
<c>        </c>
<l>    catch (Exception)</l>
<c>        </c>
<l>        Send_Data_Error(Exception, SerialHandle, EstadoFx)</l>
<l>    endtry    </l>
<c>    </c>
<l>    DerivadaCore_Out[0] := DerivadaCore_Out[1]</l>
<l>endif</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="Get_3dModel_Core_Direct">
<parameters>
<parameter id="Cod_Core"/>
<parameter id="Cod_Core_ToUse"/>
<parameter id="DerivadaCore_In"/>
<parameter id="DerivadaCore_Out"/>
<parameter id="Modelo3D_Select"/>
<parameter id="ObjectModel3D_Core_Pallet_In"/>
<parameter id="ObjectModel3D_Core_Pallet_Out"/>
<parameter id="Path_3D_Segmentos"/>
<parameter id="Path_CORE_ID"/>
<parameter id="Path_SFM_Segmentos"/>
<parameter id="SFM_Core_Pallet_In"/>
<parameter id="SFM_Core_Pallet_Out"/>
<parameter id="SerialHandle"/>
<parameter id="Vector_Estado_Fx"/>
</parameters>
</docu>
</procedure>
</hdevelop>
