//
// File generated by HDevelop for HALCON/.NET (C#) Version 18.11.1.1
// Non-ASCII strings in this file are encoded in UTF-8.
// 
// Please note that non-ASCII characters in string constants are exported
// as octal codes in order to guarantee that the strings are correctly
// created on all systems, independent on any compiler settings.
// 
// Source files with different encoding should not be mixed in one project.
//
//  This file is intended to be used with the HDevelopTemplate or
//  HDevelopTemplateWPF projects located under %HALCONEXAMPLES%\c#

using System;
using System.Windows.Forms;
using HalconDotNet;

public partial class HDevelopExport
{
  public HTuple hv_ExpDefaultWinHandle;

  HTuple  g_CamInBasePose1;
  HTuple  g_CamInBasePose2;
  HTuple  g_SignoPallet;
  HTuple  g_Pallet_Actual;
  HTuple  g_Error_CamaraEst_Adq;
  HTuple  g_Error_CamaraOpt_Adq;
  HTuple  gIsSinglePose;
  HTuple  gTerminationButtonLabel;
  HTuple  gInfoDecor;
  HTuple  gInfoPos;
  HTuple  gTitlePos;
  HTuple  gTitleDecor;
  HTuple  gAlphaDeselected;
  HTuple  gDispObjOffset;
  HTuple  gLabelsDecor;
  HTuple  gUsesOpenGL;
  public void HDevelopStop()
  {
    MessageBox.Show("Press button to continue", "Program stop");
  }

  HTuple ExpGetGlobalVar_g_CamInBasePose1()
  {
    return g_CamInBasePose1;
  }
  void ExpSetGlobalVar_g_CamInBasePose1(HTuple val)
  {
    if (g_CamInBasePose1!=null)
      g_CamInBasePose1.Dispose();
    g_CamInBasePose1 = val;
  }

  HTuple ExpGetGlobalVar_g_CamInBasePose2()
  {
    return g_CamInBasePose2;
  }
  void ExpSetGlobalVar_g_CamInBasePose2(HTuple val)
  {
    if (g_CamInBasePose2!=null)
      g_CamInBasePose2.Dispose();
    g_CamInBasePose2 = val;
  }

  HTuple ExpGetGlobalVar_g_SignoPallet()
  {
    return g_SignoPallet;
  }
  void ExpSetGlobalVar_g_SignoPallet(HTuple val)
  {
    if (g_SignoPallet!=null)
      g_SignoPallet.Dispose();
    g_SignoPallet = val;
  }

  HTuple ExpGetGlobalVar_g_Pallet_Actual()
  {
    return g_Pallet_Actual;
  }
  void ExpSetGlobalVar_g_Pallet_Actual(HTuple val)
  {
    if (g_Pallet_Actual!=null)
      g_Pallet_Actual.Dispose();
    g_Pallet_Actual = val;
  }

  HTuple ExpGetGlobalVar_g_Error_CamaraEst_Adq()
  {
    return g_Error_CamaraEst_Adq;
  }
  void ExpSetGlobalVar_g_Error_CamaraEst_Adq(HTuple val)
  {
    if (g_Error_CamaraEst_Adq!=null)
      g_Error_CamaraEst_Adq.Dispose();
    g_Error_CamaraEst_Adq = val;
  }

  HTuple ExpGetGlobalVar_g_Error_CamaraOpt_Adq()
  {
    return g_Error_CamaraOpt_Adq;
  }
  void ExpSetGlobalVar_g_Error_CamaraOpt_Adq(HTuple val)
  {
    if (g_Error_CamaraOpt_Adq!=null)
      g_Error_CamaraOpt_Adq.Dispose();
    g_Error_CamaraOpt_Adq = val;
  }

  HTuple ExpGetGlobalVar_gIsSinglePose()
  {
    return gIsSinglePose;
  }
  void ExpSetGlobalVar_gIsSinglePose(HTuple val)
  {
    if (gIsSinglePose!=null)
      gIsSinglePose.Dispose();
    gIsSinglePose = val;
  }

  HTuple ExpGetGlobalVar_gTerminationButtonLabel()
  {
    return gTerminationButtonLabel;
  }
  void ExpSetGlobalVar_gTerminationButtonLabel(HTuple val)
  {
    if (gTerminationButtonLabel!=null)
      gTerminationButtonLabel.Dispose();
    gTerminationButtonLabel = val;
  }

  HTuple ExpGetGlobalVar_gInfoDecor()
  {
    return gInfoDecor;
  }
  void ExpSetGlobalVar_gInfoDecor(HTuple val)
  {
    if (gInfoDecor!=null)
      gInfoDecor.Dispose();
    gInfoDecor = val;
  }

  HTuple ExpGetGlobalVar_gInfoPos()
  {
    return gInfoPos;
  }
  void ExpSetGlobalVar_gInfoPos(HTuple val)
  {
    if (gInfoPos!=null)
      gInfoPos.Dispose();
    gInfoPos = val;
  }

  HTuple ExpGetGlobalVar_gTitlePos()
  {
    return gTitlePos;
  }
  void ExpSetGlobalVar_gTitlePos(HTuple val)
  {
    if (gTitlePos!=null)
      gTitlePos.Dispose();
    gTitlePos = val;
  }

  HTuple ExpGetGlobalVar_gTitleDecor()
  {
    return gTitleDecor;
  }
  void ExpSetGlobalVar_gTitleDecor(HTuple val)
  {
    if (gTitleDecor!=null)
      gTitleDecor.Dispose();
    gTitleDecor = val;
  }

  HTuple ExpGetGlobalVar_gAlphaDeselected()
  {
    return gAlphaDeselected;
  }
  void ExpSetGlobalVar_gAlphaDeselected(HTuple val)
  {
    if (gAlphaDeselected!=null)
      gAlphaDeselected.Dispose();
    gAlphaDeselected = val;
  }

  HTuple ExpGetGlobalVar_gDispObjOffset()
  {
    return gDispObjOffset;
  }
  void ExpSetGlobalVar_gDispObjOffset(HTuple val)
  {
    if (gDispObjOffset!=null)
      gDispObjOffset.Dispose();
    gDispObjOffset = val;
  }

  HTuple ExpGetGlobalVar_gLabelsDecor()
  {
    return gLabelsDecor;
  }
  void ExpSetGlobalVar_gLabelsDecor(HTuple val)
  {
    if (gLabelsDecor!=null)
      gLabelsDecor.Dispose();
    gLabelsDecor = val;
  }

  HTuple ExpGetGlobalVar_gUsesOpenGL()
  {
    return gUsesOpenGL;
  }
  void ExpSetGlobalVar_gUsesOpenGL(HTuple val)
  {
    if (gUsesOpenGL!=null)
      gUsesOpenGL.Dispose();
    gUsesOpenGL = val;
  }

  // Procedures 
  // Chapter: Graphics / Output
  // Short Description: Reflect the pose change that was introduced by the user by moving the mouse 
  public void analyze_graph_event (HObject ho_BackgroundImage, HTuple hv_MouseMapping, 
      HTuple hv_Button, HTuple hv_Row, HTuple hv_Column, HTuple hv_WindowHandle, HTuple hv_WindowHandleBuffer, 
      HTuple hv_VirtualTrackball, HTuple hv_TrackballSize, HTuple hv_SelectedObjectIn, 
      HTuple hv_Scene3D, HTuple hv_AlphaOrig, HTuple hv_ObjectModel3DID, HTuple hv_CamParam, 
      HTuple hv_Labels, HTuple hv_Title, HTuple hv_Information, HTuple hv_GenParamName, 
      HTuple hv_GenParamValue, HTuple hv_PosesIn, HTuple hv_ButtonHoldIn, HTuple hv_TBCenter, 
      HTuple hv_TBSize, HTuple hv_WindowCenteredRotationlIn, HTuple hv_MaxNumModels, 
      out HTuple hv_PosesOut, out HTuple hv_SelectedObjectOut, out HTuple hv_ButtonHoldOut, 
      out HTuple hv_WindowCenteredRotationOut)
  {




    // Local iconic variables 

    HObject ho_ImageDump=null;

    // Local control variables 

    HTuple ExpTmpLocalVar_gIsSinglePose = new HTuple();
    HTuple hv_VisualizeTB = new HTuple(), hv_InvLog2 = new HTuple();
    HTuple hv_Seconds = new HTuple(), hv_ModelIndex = new HTuple();
    HTuple hv_Exception1 = new HTuple(), hv_HomMat3DIdentity = new HTuple();
    HTuple hv_NumModels = new HTuple(), hv_Width = new HTuple();
    HTuple hv_Height = new HTuple(), hv_MinImageSize = new HTuple();
    HTuple hv_TrackballRadiusPixel = new HTuple(), hv_TrackballCenterRow = new HTuple();
    HTuple hv_TrackballCenterCol = new HTuple(), hv_NumChannels = new HTuple();
    HTuple hv_ColorImage = new HTuple(), hv_BAnd = new HTuple();
    HTuple hv_SensFactor = new HTuple(), hv_IsButtonTrans = new HTuple();
    HTuple hv_IsButtonRot = new HTuple(), hv_IsButtonDist = new HTuple();
    HTuple hv_MRow1 = new HTuple(), hv_MCol1 = new HTuple();
    HTuple hv_ButtonLoop = new HTuple(), hv_MRow2 = new HTuple();
    HTuple hv_MCol2 = new HTuple(), hv_PX = new HTuple(), hv_PY = new HTuple();
    HTuple hv_PZ = new HTuple(), hv_QX1 = new HTuple(), hv_QY1 = new HTuple();
    HTuple hv_QZ1 = new HTuple(), hv_QX2 = new HTuple(), hv_QY2 = new HTuple();
    HTuple hv_QZ2 = new HTuple(), hv_Len = new HTuple(), hv_Dist = new HTuple();
    HTuple hv_Translate = new HTuple(), hv_Index = new HTuple();
    HTuple hv_PoseIn = new HTuple(), hv_HomMat3DIn = new HTuple();
    HTuple hv_HomMat3DOut = new HTuple(), hv_PoseOut = new HTuple();
    HTuple hv_Indices = new HTuple(), hv_Sequence = new HTuple();
    HTuple hv_Mod = new HTuple(), hv_SequenceReal = new HTuple();
    HTuple hv_Sequence2Int = new HTuple(), hv_Selected = new HTuple();
    HTuple hv_InvSelected = new HTuple(), hv_Exception = new HTuple();
    HTuple hv_DRow = new HTuple(), hv_TranslateZ = new HTuple();
    HTuple hv_MX1 = new HTuple(), hv_MY1 = new HTuple(), hv_MX2 = new HTuple();
    HTuple hv_MY2 = new HTuple(), hv_RelQuaternion = new HTuple();
    HTuple hv_HomMat3DRotRel = new HTuple(), hv_HomMat3DInTmp1 = new HTuple();
    HTuple hv_HomMat3DInTmp = new HTuple(), hv_PosesOut2 = new HTuple();
    HTuple   hv_Column_COPY_INP_TMP = new HTuple(hv_Column);
    HTuple   hv_PosesIn_COPY_INP_TMP = new HTuple(hv_PosesIn);
    HTuple   hv_Row_COPY_INP_TMP = new HTuple(hv_Row);
    HTuple   hv_TBCenter_COPY_INP_TMP = new HTuple(hv_TBCenter);
    HTuple   hv_TBSize_COPY_INP_TMP = new HTuple(hv_TBSize);

    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ImageDump);
    hv_PosesOut = new HTuple();
    hv_SelectedObjectOut = new HTuple();
    hv_ButtonHoldOut = new HTuple();
    hv_WindowCenteredRotationOut = new HTuple();
    try
    {
      //This procedure reflects
      //- the pose change that was introduced by the user by
      //  moving the mouse
      //- the selection of a single object
      //
      //global tuple gIsSinglePose
      //
      hv_ButtonHoldOut.Dispose();
      hv_ButtonHoldOut = new HTuple(hv_ButtonHoldIn);
      hv_PosesOut.Dispose();
      hv_PosesOut = new HTuple(hv_PosesIn_COPY_INP_TMP);
      hv_SelectedObjectOut.Dispose();
      hv_SelectedObjectOut = new HTuple(hv_SelectedObjectIn);
      hv_WindowCenteredRotationOut.Dispose();
      hv_WindowCenteredRotationOut = new HTuple(hv_WindowCenteredRotationlIn);
      hv_VisualizeTB.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_VisualizeTB = new HTuple(((hv_SelectedObjectOut.TupleMax()
          )).TupleNotEqual(0));
      }
      hv_InvLog2.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_InvLog2 = 1.0/((new HTuple(2)).TupleLog()
          );
      }
      //
      if ((int)(new HTuple(hv_Button.TupleEqual(hv_MouseMapping.TupleSelect(6)))) != 0)
      {
        if ((int)(hv_ButtonHoldOut) != 0)
        {
          ho_ImageDump.Dispose();

          hv_Column_COPY_INP_TMP.Dispose();
          hv_PosesIn_COPY_INP_TMP.Dispose();
          hv_Row_COPY_INP_TMP.Dispose();
          hv_TBCenter_COPY_INP_TMP.Dispose();
          hv_TBSize_COPY_INP_TMP.Dispose();
          hv_VisualizeTB.Dispose();
          hv_InvLog2.Dispose();
          hv_Seconds.Dispose();
          hv_ModelIndex.Dispose();
          hv_Exception1.Dispose();
          hv_HomMat3DIdentity.Dispose();
          hv_NumModels.Dispose();
          hv_Width.Dispose();
          hv_Height.Dispose();
          hv_MinImageSize.Dispose();
          hv_TrackballRadiusPixel.Dispose();
          hv_TrackballCenterRow.Dispose();
          hv_TrackballCenterCol.Dispose();
          hv_NumChannels.Dispose();
          hv_ColorImage.Dispose();
          hv_BAnd.Dispose();
          hv_SensFactor.Dispose();
          hv_IsButtonTrans.Dispose();
          hv_IsButtonRot.Dispose();
          hv_IsButtonDist.Dispose();
          hv_MRow1.Dispose();
          hv_MCol1.Dispose();
          hv_ButtonLoop.Dispose();
          hv_MRow2.Dispose();
          hv_MCol2.Dispose();
          hv_PX.Dispose();
          hv_PY.Dispose();
          hv_PZ.Dispose();
          hv_QX1.Dispose();
          hv_QY1.Dispose();
          hv_QZ1.Dispose();
          hv_QX2.Dispose();
          hv_QY2.Dispose();
          hv_QZ2.Dispose();
          hv_Len.Dispose();
          hv_Dist.Dispose();
          hv_Translate.Dispose();
          hv_Index.Dispose();
          hv_PoseIn.Dispose();
          hv_HomMat3DIn.Dispose();
          hv_HomMat3DOut.Dispose();
          hv_PoseOut.Dispose();
          hv_Indices.Dispose();
          hv_Sequence.Dispose();
          hv_Mod.Dispose();
          hv_SequenceReal.Dispose();
          hv_Sequence2Int.Dispose();
          hv_Selected.Dispose();
          hv_InvSelected.Dispose();
          hv_Exception.Dispose();
          hv_DRow.Dispose();
          hv_TranslateZ.Dispose();
          hv_MX1.Dispose();
          hv_MY1.Dispose();
          hv_MX2.Dispose();
          hv_MY2.Dispose();
          hv_RelQuaternion.Dispose();
          hv_HomMat3DRotRel.Dispose();
          hv_HomMat3DInTmp1.Dispose();
          hv_HomMat3DInTmp.Dispose();
          hv_PosesOut2.Dispose();

          return;
        }
        //Ctrl (16) + Alt (32) + left mouse button (1) => Toggle rotation center position
        //If WindowCenteredRotation is not 1, set it to 1, otherwise, set it to 2
        hv_Seconds.Dispose();
        HOperatorSet.CountSeconds(out hv_Seconds);
        if ((int)(new HTuple(hv_WindowCenteredRotationOut.TupleEqual(1))) != 0)
        {
          hv_WindowCenteredRotationOut.Dispose();
          hv_WindowCenteredRotationOut = 2;
        }
        else
        {
          hv_WindowCenteredRotationOut.Dispose();
          hv_WindowCenteredRotationOut = 1;
        }
        hv_ButtonHoldOut.Dispose();
        hv_ButtonHoldOut = 1;
        ho_ImageDump.Dispose();

        hv_Column_COPY_INP_TMP.Dispose();
        hv_PosesIn_COPY_INP_TMP.Dispose();
        hv_Row_COPY_INP_TMP.Dispose();
        hv_TBCenter_COPY_INP_TMP.Dispose();
        hv_TBSize_COPY_INP_TMP.Dispose();
        hv_VisualizeTB.Dispose();
        hv_InvLog2.Dispose();
        hv_Seconds.Dispose();
        hv_ModelIndex.Dispose();
        hv_Exception1.Dispose();
        hv_HomMat3DIdentity.Dispose();
        hv_NumModels.Dispose();
        hv_Width.Dispose();
        hv_Height.Dispose();
        hv_MinImageSize.Dispose();
        hv_TrackballRadiusPixel.Dispose();
        hv_TrackballCenterRow.Dispose();
        hv_TrackballCenterCol.Dispose();
        hv_NumChannels.Dispose();
        hv_ColorImage.Dispose();
        hv_BAnd.Dispose();
        hv_SensFactor.Dispose();
        hv_IsButtonTrans.Dispose();
        hv_IsButtonRot.Dispose();
        hv_IsButtonDist.Dispose();
        hv_MRow1.Dispose();
        hv_MCol1.Dispose();
        hv_ButtonLoop.Dispose();
        hv_MRow2.Dispose();
        hv_MCol2.Dispose();
        hv_PX.Dispose();
        hv_PY.Dispose();
        hv_PZ.Dispose();
        hv_QX1.Dispose();
        hv_QY1.Dispose();
        hv_QZ1.Dispose();
        hv_QX2.Dispose();
        hv_QY2.Dispose();
        hv_QZ2.Dispose();
        hv_Len.Dispose();
        hv_Dist.Dispose();
        hv_Translate.Dispose();
        hv_Index.Dispose();
        hv_PoseIn.Dispose();
        hv_HomMat3DIn.Dispose();
        hv_HomMat3DOut.Dispose();
        hv_PoseOut.Dispose();
        hv_Indices.Dispose();
        hv_Sequence.Dispose();
        hv_Mod.Dispose();
        hv_SequenceReal.Dispose();
        hv_Sequence2Int.Dispose();
        hv_Selected.Dispose();
        hv_InvSelected.Dispose();
        hv_Exception.Dispose();
        hv_DRow.Dispose();
        hv_TranslateZ.Dispose();
        hv_MX1.Dispose();
        hv_MY1.Dispose();
        hv_MX2.Dispose();
        hv_MY2.Dispose();
        hv_RelQuaternion.Dispose();
        hv_HomMat3DRotRel.Dispose();
        hv_HomMat3DInTmp1.Dispose();
        hv_HomMat3DInTmp.Dispose();
        hv_PosesOut2.Dispose();

        return;
      }
      if ((int)((new HTuple(hv_Button.TupleEqual(hv_MouseMapping.TupleSelect(5)))).TupleAnd(
          new HTuple((new HTuple(hv_ObjectModel3DID.TupleLength())).TupleLessEqual(
          hv_MaxNumModels)))) != 0)
      {
        if ((int)(hv_ButtonHoldOut) != 0)
        {
          ho_ImageDump.Dispose();

          hv_Column_COPY_INP_TMP.Dispose();
          hv_PosesIn_COPY_INP_TMP.Dispose();
          hv_Row_COPY_INP_TMP.Dispose();
          hv_TBCenter_COPY_INP_TMP.Dispose();
          hv_TBSize_COPY_INP_TMP.Dispose();
          hv_VisualizeTB.Dispose();
          hv_InvLog2.Dispose();
          hv_Seconds.Dispose();
          hv_ModelIndex.Dispose();
          hv_Exception1.Dispose();
          hv_HomMat3DIdentity.Dispose();
          hv_NumModels.Dispose();
          hv_Width.Dispose();
          hv_Height.Dispose();
          hv_MinImageSize.Dispose();
          hv_TrackballRadiusPixel.Dispose();
          hv_TrackballCenterRow.Dispose();
          hv_TrackballCenterCol.Dispose();
          hv_NumChannels.Dispose();
          hv_ColorImage.Dispose();
          hv_BAnd.Dispose();
          hv_SensFactor.Dispose();
          hv_IsButtonTrans.Dispose();
          hv_IsButtonRot.Dispose();
          hv_IsButtonDist.Dispose();
          hv_MRow1.Dispose();
          hv_MCol1.Dispose();
          hv_ButtonLoop.Dispose();
          hv_MRow2.Dispose();
          hv_MCol2.Dispose();
          hv_PX.Dispose();
          hv_PY.Dispose();
          hv_PZ.Dispose();
          hv_QX1.Dispose();
          hv_QY1.Dispose();
          hv_QZ1.Dispose();
          hv_QX2.Dispose();
          hv_QY2.Dispose();
          hv_QZ2.Dispose();
          hv_Len.Dispose();
          hv_Dist.Dispose();
          hv_Translate.Dispose();
          hv_Index.Dispose();
          hv_PoseIn.Dispose();
          hv_HomMat3DIn.Dispose();
          hv_HomMat3DOut.Dispose();
          hv_PoseOut.Dispose();
          hv_Indices.Dispose();
          hv_Sequence.Dispose();
          hv_Mod.Dispose();
          hv_SequenceReal.Dispose();
          hv_Sequence2Int.Dispose();
          hv_Selected.Dispose();
          hv_InvSelected.Dispose();
          hv_Exception.Dispose();
          hv_DRow.Dispose();
          hv_TranslateZ.Dispose();
          hv_MX1.Dispose();
          hv_MY1.Dispose();
          hv_MX2.Dispose();
          hv_MY2.Dispose();
          hv_RelQuaternion.Dispose();
          hv_HomMat3DRotRel.Dispose();
          hv_HomMat3DInTmp1.Dispose();
          hv_HomMat3DInTmp.Dispose();
          hv_PosesOut2.Dispose();

          return;
        }
        //Ctrl (16) + left mouse button (1) => Select an object
        try
        {
          HOperatorSet.SetScene3dParam(hv_Scene3D, "object_index_persistence", "true");
          HOperatorSet.DisplayScene3d(hv_ExpDefaultWinHandle, hv_Scene3D, 0);
          hv_ModelIndex.Dispose();
          HOperatorSet.GetDisplayScene3dInfo(hv_ExpDefaultWinHandle, hv_Scene3D, 
              hv_Row_COPY_INP_TMP, hv_Column_COPY_INP_TMP, "object_index", out hv_ModelIndex);
          HOperatorSet.SetScene3dParam(hv_Scene3D, "object_index_persistence", "false");
        }
        // catch (Exception1) 
        catch (HalconException HDevExpDefaultException1)
        {
          HDevExpDefaultException1.ToHTuple(out hv_Exception1);
          //* NO OpenGL, no selection possible
          ho_ImageDump.Dispose();

          hv_Column_COPY_INP_TMP.Dispose();
          hv_PosesIn_COPY_INP_TMP.Dispose();
          hv_Row_COPY_INP_TMP.Dispose();
          hv_TBCenter_COPY_INP_TMP.Dispose();
          hv_TBSize_COPY_INP_TMP.Dispose();
          hv_VisualizeTB.Dispose();
          hv_InvLog2.Dispose();
          hv_Seconds.Dispose();
          hv_ModelIndex.Dispose();
          hv_Exception1.Dispose();
          hv_HomMat3DIdentity.Dispose();
          hv_NumModels.Dispose();
          hv_Width.Dispose();
          hv_Height.Dispose();
          hv_MinImageSize.Dispose();
          hv_TrackballRadiusPixel.Dispose();
          hv_TrackballCenterRow.Dispose();
          hv_TrackballCenterCol.Dispose();
          hv_NumChannels.Dispose();
          hv_ColorImage.Dispose();
          hv_BAnd.Dispose();
          hv_SensFactor.Dispose();
          hv_IsButtonTrans.Dispose();
          hv_IsButtonRot.Dispose();
          hv_IsButtonDist.Dispose();
          hv_MRow1.Dispose();
          hv_MCol1.Dispose();
          hv_ButtonLoop.Dispose();
          hv_MRow2.Dispose();
          hv_MCol2.Dispose();
          hv_PX.Dispose();
          hv_PY.Dispose();
          hv_PZ.Dispose();
          hv_QX1.Dispose();
          hv_QY1.Dispose();
          hv_QZ1.Dispose();
          hv_QX2.Dispose();
          hv_QY2.Dispose();
          hv_QZ2.Dispose();
          hv_Len.Dispose();
          hv_Dist.Dispose();
          hv_Translate.Dispose();
          hv_Index.Dispose();
          hv_PoseIn.Dispose();
          hv_HomMat3DIn.Dispose();
          hv_HomMat3DOut.Dispose();
          hv_PoseOut.Dispose();
          hv_Indices.Dispose();
          hv_Sequence.Dispose();
          hv_Mod.Dispose();
          hv_SequenceReal.Dispose();
          hv_Sequence2Int.Dispose();
          hv_Selected.Dispose();
          hv_InvSelected.Dispose();
          hv_Exception.Dispose();
          hv_DRow.Dispose();
          hv_TranslateZ.Dispose();
          hv_MX1.Dispose();
          hv_MY1.Dispose();
          hv_MX2.Dispose();
          hv_MY2.Dispose();
          hv_RelQuaternion.Dispose();
          hv_HomMat3DRotRel.Dispose();
          hv_HomMat3DInTmp1.Dispose();
          hv_HomMat3DInTmp.Dispose();
          hv_PosesOut2.Dispose();

          return;
        }
        if ((int)(new HTuple(hv_ModelIndex.TupleEqual(-1))) != 0)
        {
          //Background click:
          if ((int)(new HTuple(((hv_SelectedObjectOut.TupleSum())).TupleEqual(new HTuple(hv_SelectedObjectOut.TupleLength()
              )))) != 0)
          {
            //If all objects are already selected, deselect all
            hv_SelectedObjectOut.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_SelectedObjectOut = HTuple.TupleGenConst(
                new HTuple(hv_ObjectModel3DID.TupleLength()),0);
            }
          }
          else
          {
            //Otherwise select all
            hv_SelectedObjectOut.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_SelectedObjectOut = HTuple.TupleGenConst(
                new HTuple(hv_ObjectModel3DID.TupleLength()),1);
            }
          }
        }
        else
        {
          //Object click:
          if (hv_SelectedObjectOut == null)
            hv_SelectedObjectOut = new HTuple();
          hv_SelectedObjectOut[hv_ModelIndex] = ((hv_SelectedObjectOut.TupleSelect(
              hv_ModelIndex))).TupleNot();
        }
        hv_ButtonHoldOut.Dispose();
        hv_ButtonHoldOut = 1;
      }
      else
      {
        //Change the pose
        hv_HomMat3DIdentity.Dispose();
        HOperatorSet.HomMat3dIdentity(out hv_HomMat3DIdentity);
        hv_NumModels.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_NumModels = new HTuple(hv_ObjectModel3DID.TupleLength()
            );
        }
        hv_Width.Dispose();
        get_cam_par_data(hv_CamParam, "image_width", out hv_Width);
        hv_Height.Dispose();
        get_cam_par_data(hv_CamParam, "image_height", out hv_Height);
        hv_MinImageSize.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_MinImageSize = ((hv_Width.TupleConcat(
            hv_Height))).TupleMin();
        }
        hv_TrackballRadiusPixel.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_TrackballRadiusPixel = (hv_TrackballSize*hv_MinImageSize)/2.0;
        }
        //Set trackball fixed in the center of the window
        hv_TrackballCenterRow.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_TrackballCenterRow = hv_Height/2;
        }
        hv_TrackballCenterCol.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_TrackballCenterCol = hv_Width/2;
        }
        if ((int)(new HTuple((new HTuple(hv_ObjectModel3DID.TupleLength())).TupleLess(
            hv_MaxNumModels))) != 0)
        {
          if ((int)(new HTuple(hv_WindowCenteredRotationOut.TupleEqual(1))) != 0)
          {
            hv_TBCenter_COPY_INP_TMP.Dispose();hv_TBSize_COPY_INP_TMP.Dispose();
            get_trackball_center_fixed(hv_SelectedObjectIn, hv_TrackballCenterRow, 
                hv_TrackballCenterCol, hv_TrackballRadiusPixel, hv_Scene3D, hv_ObjectModel3DID, 
                hv_PosesIn_COPY_INP_TMP, hv_WindowHandleBuffer, hv_CamParam, hv_GenParamName, 
                hv_GenParamValue, out hv_TBCenter_COPY_INP_TMP, out hv_TBSize_COPY_INP_TMP);
          }
          else
          {
            hv_TBCenter_COPY_INP_TMP.Dispose();hv_TBSize_COPY_INP_TMP.Dispose();
            get_trackball_center(hv_SelectedObjectIn, hv_TrackballRadiusPixel, hv_ObjectModel3DID, 
                hv_PosesIn_COPY_INP_TMP, out hv_TBCenter_COPY_INP_TMP, out hv_TBSize_COPY_INP_TMP);
          }
        }
        if ((int)((new HTuple(((hv_SelectedObjectOut.TupleMin())).TupleEqual(0))).TupleAnd(
            new HTuple(((hv_SelectedObjectOut.TupleMax())).TupleEqual(1)))) != 0)
        {
          //At this point, multiple objects do not necessary have the same
          //pose any more. Consequently, we have to return a tuple of poses
          //as output of visualize_object_model_3d
          ExpTmpLocalVar_gIsSinglePose = 0;
          ExpSetGlobalVar_gIsSinglePose(ExpTmpLocalVar_gIsSinglePose);
        }
        hv_NumChannels.Dispose();
        HOperatorSet.CountChannels(ho_BackgroundImage, out hv_NumChannels);
        hv_ColorImage.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_ColorImage = new HTuple(hv_NumChannels.TupleEqual(
            3));
        }
        //Alt (32) => lower sensitivity
        hv_BAnd.Dispose();
        HOperatorSet.TupleRsh(hv_Button, 5, out hv_BAnd);
        if ((int)(hv_BAnd%2) != 0)
        {
          hv_SensFactor.Dispose();
          hv_SensFactor = 0.1;
        }
        else
        {
          hv_SensFactor.Dispose();
          hv_SensFactor = 1.0;
        }
        hv_IsButtonTrans.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_IsButtonTrans = (new HTuple(((hv_MouseMapping.TupleSelect(
            0))).TupleEqual(hv_Button))).TupleOr(new HTuple(((32+(hv_MouseMapping.TupleSelect(
            0)))).TupleEqual(hv_Button)));
        }
        hv_IsButtonRot.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_IsButtonRot = (new HTuple(((hv_MouseMapping.TupleSelect(
            1))).TupleEqual(hv_Button))).TupleOr(new HTuple(((32+(hv_MouseMapping.TupleSelect(
            1)))).TupleEqual(hv_Button)));
        }
        hv_IsButtonDist.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_IsButtonDist = (new HTuple((new HTuple((new HTuple((new HTuple((new HTuple(((hv_MouseMapping.TupleSelect(
            2))).TupleEqual(hv_Button))).TupleOr(new HTuple(((32+(hv_MouseMapping.TupleSelect(
            2)))).TupleEqual(hv_Button))))).TupleOr(new HTuple(((hv_MouseMapping.TupleSelect(
            3))).TupleEqual(hv_Button))))).TupleOr(new HTuple(((32+(hv_MouseMapping.TupleSelect(
            3)))).TupleEqual(hv_Button))))).TupleOr(new HTuple(((hv_MouseMapping.TupleSelect(
            4))).TupleEqual(hv_Button))))).TupleOr(new HTuple(((32+(hv_MouseMapping.TupleSelect(
            4)))).TupleEqual(hv_Button)));
        }
        if ((int)(hv_IsButtonTrans) != 0)
        {
          //Translate in XY-direction
          hv_MRow1.Dispose();
          hv_MRow1 = new HTuple(hv_Row_COPY_INP_TMP);
          hv_MCol1.Dispose();
          hv_MCol1 = new HTuple(hv_Column_COPY_INP_TMP);
          while ((int)(hv_IsButtonTrans) != 0)
          {
            try
            {
              hv_Row_COPY_INP_TMP.Dispose();hv_Column_COPY_INP_TMP.Dispose();hv_ButtonLoop.Dispose();
              HOperatorSet.GetMpositionSubPix(hv_ExpDefaultWinHandle, out hv_Row_COPY_INP_TMP, 
                  out hv_Column_COPY_INP_TMP, out hv_ButtonLoop);
              hv_IsButtonTrans.Dispose();
              using (HDevDisposeHelper dh = new HDevDisposeHelper())
              {
              hv_IsButtonTrans = new HTuple(hv_ButtonLoop.TupleEqual(
                  hv_Button));
              }
              hv_MRow2.Dispose();
              using (HDevDisposeHelper dh = new HDevDisposeHelper())
              {
              hv_MRow2 = hv_MRow1+((hv_Row_COPY_INP_TMP-hv_MRow1)*hv_SensFactor);
              }
              hv_MCol2.Dispose();
              using (HDevDisposeHelper dh = new HDevDisposeHelper())
              {
              hv_MCol2 = hv_MCol1+((hv_Column_COPY_INP_TMP-hv_MCol1)*hv_SensFactor);
              }
              hv_PX.Dispose();hv_PY.Dispose();hv_PZ.Dispose();hv_QX1.Dispose();hv_QY1.Dispose();hv_QZ1.Dispose();
              HOperatorSet.GetLineOfSight(hv_MRow1, hv_MCol1, hv_CamParam, out hv_PX, 
                  out hv_PY, out hv_PZ, out hv_QX1, out hv_QY1, out hv_QZ1);
              hv_PX.Dispose();hv_PY.Dispose();hv_PZ.Dispose();hv_QX2.Dispose();hv_QY2.Dispose();hv_QZ2.Dispose();
              HOperatorSet.GetLineOfSight(hv_MRow2, hv_MCol2, hv_CamParam, out hv_PX, 
                  out hv_PY, out hv_PZ, out hv_QX2, out hv_QY2, out hv_QZ2);
              hv_Len.Dispose();
              using (HDevDisposeHelper dh = new HDevDisposeHelper())
              {
              hv_Len = ((((hv_QX1*hv_QX1)+(hv_QY1*hv_QY1))+(hv_QZ1*hv_QZ1))).TupleSqrt()
                  ;
              }
              hv_Dist.Dispose();
              using (HDevDisposeHelper dh = new HDevDisposeHelper())
              {
              hv_Dist = (((((hv_TBCenter_COPY_INP_TMP.TupleSelect(
                  0))*(hv_TBCenter_COPY_INP_TMP.TupleSelect(0)))+((hv_TBCenter_COPY_INP_TMP.TupleSelect(
                  1))*(hv_TBCenter_COPY_INP_TMP.TupleSelect(1))))+((hv_TBCenter_COPY_INP_TMP.TupleSelect(
                  2))*(hv_TBCenter_COPY_INP_TMP.TupleSelect(2))))).TupleSqrt();
              }
              hv_Translate.Dispose();
              using (HDevDisposeHelper dh = new HDevDisposeHelper())
              {
              hv_Translate = ((((((hv_QX2-hv_QX1)).TupleConcat(
                  hv_QY2-hv_QY1))).TupleConcat(hv_QZ2-hv_QZ1))*hv_Dist)/hv_Len;
              }
              hv_PosesOut.Dispose();
              hv_PosesOut = new HTuple();
              if ((int)(new HTuple(hv_NumModels.TupleLessEqual(hv_MaxNumModels))) != 0)
              {
                HTuple end_val110 = hv_NumModels-1;
                HTuple step_val110 = 1;
                for (hv_Index=0; hv_Index.Continue(end_val110, step_val110); hv_Index = hv_Index.TupleAdd(step_val110))
                {
                  hv_PoseIn.Dispose();
                  using (HDevDisposeHelper dh = new HDevDisposeHelper())
                  {
                  hv_PoseIn = hv_PosesIn_COPY_INP_TMP.TupleSelectRange(
                      hv_Index*7,(hv_Index*7)+6);
                  }
                  if ((int)(hv_SelectedObjectOut.TupleSelect(hv_Index)) != 0)
                  {
                    hv_HomMat3DIn.Dispose();
                    HOperatorSet.PoseToHomMat3d(hv_PoseIn, out hv_HomMat3DIn);
                    using (HDevDisposeHelper dh = new HDevDisposeHelper())
                    {
                    hv_HomMat3DOut.Dispose();
                    HOperatorSet.HomMat3dTranslate(hv_HomMat3DIn, hv_Translate.TupleSelect(
                        0), hv_Translate.TupleSelect(1), hv_Translate.TupleSelect(
                        2), out hv_HomMat3DOut);
                    }
                    hv_PoseOut.Dispose();
                    HOperatorSet.HomMat3dToPose(hv_HomMat3DOut, out hv_PoseOut);
                    HOperatorSet.SetScene3dInstancePose(hv_Scene3D, hv_Index, hv_PoseOut);
                  }
                  else
                  {
                    hv_PoseOut.Dispose();
                    hv_PoseOut = new HTuple(hv_PoseIn);
                  }
                  using (HDevDisposeHelper dh = new HDevDisposeHelper())
                  {
                  {
                  HTuple 
                    ExpTmpLocalVar_PosesOut = hv_PosesOut.TupleConcat(
                      hv_PoseOut);
                  hv_PosesOut.Dispose();
                  hv_PosesOut = ExpTmpLocalVar_PosesOut;
                  }
                  }
                }
              }
              else
              {
                hv_Indices.Dispose();
                HOperatorSet.TupleFind(hv_SelectedObjectOut, 1, out hv_Indices);
                hv_PoseIn.Dispose();
                using (HDevDisposeHelper dh = new HDevDisposeHelper())
                {
                hv_PoseIn = hv_PosesIn_COPY_INP_TMP.TupleSelectRange(
                    (hv_Indices.TupleSelect(0))*7,((hv_Indices.TupleSelect(0))*7)+6);
                }
                hv_HomMat3DIn.Dispose();
                HOperatorSet.PoseToHomMat3d(hv_PoseIn, out hv_HomMat3DIn);
                using (HDevDisposeHelper dh = new HDevDisposeHelper())
                {
                hv_HomMat3DOut.Dispose();
                HOperatorSet.HomMat3dTranslate(hv_HomMat3DIn, hv_Translate.TupleSelect(
                    0), hv_Translate.TupleSelect(1), hv_Translate.TupleSelect(2), 
                    out hv_HomMat3DOut);
                }
                hv_PoseOut.Dispose();
                HOperatorSet.HomMat3dToPose(hv_HomMat3DOut, out hv_PoseOut);
                hv_Sequence.Dispose();
                using (HDevDisposeHelper dh = new HDevDisposeHelper())
                {
                hv_Sequence = HTuple.TupleGenSequence(
                    0,(hv_NumModels*7)-1,1);
                }
                hv_Mod.Dispose();
                HOperatorSet.TupleMod(hv_Sequence, 7, out hv_Mod);
                hv_SequenceReal.Dispose();
                using (HDevDisposeHelper dh = new HDevDisposeHelper())
                {
                hv_SequenceReal = HTuple.TupleGenSequence(
                    0,hv_NumModels-(1.0/7.0),1.0/7.0);
                }
                hv_Sequence2Int.Dispose();
                using (HDevDisposeHelper dh = new HDevDisposeHelper())
                {
                hv_Sequence2Int = hv_SequenceReal.TupleInt()
                    ;
                }
                hv_Selected.Dispose();
                HOperatorSet.TupleSelect(hv_SelectedObjectOut, hv_Sequence2Int, out hv_Selected);
                hv_InvSelected.Dispose();
                using (HDevDisposeHelper dh = new HDevDisposeHelper())
                {
                hv_InvSelected = 1-hv_Selected;
                }
                hv_PosesOut.Dispose();
                HOperatorSet.TupleSelect(hv_PoseOut, hv_Mod, out hv_PosesOut);
                using (HDevDisposeHelper dh = new HDevDisposeHelper())
                {
                {
                HTuple 
                  ExpTmpLocalVar_PosesOut = (hv_PosesOut*hv_Selected)+(hv_PosesIn_COPY_INP_TMP*hv_InvSelected);
                hv_PosesOut.Dispose();
                hv_PosesOut = ExpTmpLocalVar_PosesOut;
                }
                }
                using (HDevDisposeHelper dh = new HDevDisposeHelper())
                {
                HOperatorSet.SetScene3dInstancePose(hv_Scene3D, HTuple.TupleGenSequence(
                    0,hv_NumModels-1,1), hv_PosesOut);
                }
              }
              using (HDevDisposeHelper dh = new HDevDisposeHelper())
              {
              dump_image_output(ho_BackgroundImage, hv_ExpDefaultWinHandle, hv_Scene3D, 
                  hv_AlphaOrig, hv_ObjectModel3DID, hv_GenParamName, hv_GenParamValue, 
                  hv_CamParam, hv_PosesOut, hv_ColorImage, hv_Title, hv_Information, 
                  hv_Labels, hv_VisualizeTB, "true", hv_TrackballCenterRow, hv_TrackballCenterCol, 
                  hv_TBSize_COPY_INP_TMP, hv_SelectedObjectOut, new HTuple(hv_WindowCenteredRotationOut.TupleEqual(
                  1)), hv_TBCenter_COPY_INP_TMP);
              }
              ho_ImageDump.Dispose();
              HOperatorSet.DumpWindowImage(out ho_ImageDump, hv_ExpDefaultWinHandle);
              //dev_set_window(...);
              HOperatorSet.DispObj(ho_ImageDump, hv_ExpDefaultWinHandle);
              //
              hv_MRow1.Dispose();
              hv_MRow1 = new HTuple(hv_Row_COPY_INP_TMP);
              hv_MCol1.Dispose();
              hv_MCol1 = new HTuple(hv_Column_COPY_INP_TMP);
              hv_PosesIn_COPY_INP_TMP.Dispose();
              hv_PosesIn_COPY_INP_TMP = new HTuple(hv_PosesOut);
            }
            // catch (Exception) 
            catch (HalconException HDevExpDefaultException1)
            {
              HDevExpDefaultException1.ToHTuple(out hv_Exception);
              //Keep waiting
            }
          }
        }
        else if ((int)(hv_IsButtonDist) != 0)
        {
          //Change the Z distance
          hv_MRow1.Dispose();
          hv_MRow1 = new HTuple(hv_Row_COPY_INP_TMP);
          while ((int)(hv_IsButtonDist) != 0)
          {
            try
            {
              hv_Row_COPY_INP_TMP.Dispose();hv_Column_COPY_INP_TMP.Dispose();hv_ButtonLoop.Dispose();
              HOperatorSet.GetMpositionSubPix(hv_ExpDefaultWinHandle, out hv_Row_COPY_INP_TMP, 
                  out hv_Column_COPY_INP_TMP, out hv_ButtonLoop);
              hv_IsButtonDist.Dispose();
              using (HDevDisposeHelper dh = new HDevDisposeHelper())
              {
              hv_IsButtonDist = new HTuple(hv_ButtonLoop.TupleEqual(
                  hv_Button));
              }
              hv_MRow2.Dispose();
              hv_MRow2 = new HTuple(hv_Row_COPY_INP_TMP);
              hv_DRow.Dispose();
              using (HDevDisposeHelper dh = new HDevDisposeHelper())
              {
              hv_DRow = hv_MRow2-hv_MRow1;
              }
              hv_Dist.Dispose();
              using (HDevDisposeHelper dh = new HDevDisposeHelper())
              {
              hv_Dist = (((((hv_TBCenter_COPY_INP_TMP.TupleSelect(
                  0))*(hv_TBCenter_COPY_INP_TMP.TupleSelect(0)))+((hv_TBCenter_COPY_INP_TMP.TupleSelect(
                  1))*(hv_TBCenter_COPY_INP_TMP.TupleSelect(1))))+((hv_TBCenter_COPY_INP_TMP.TupleSelect(
                  2))*(hv_TBCenter_COPY_INP_TMP.TupleSelect(2))))).TupleSqrt();
              }
              hv_TranslateZ.Dispose();
              using (HDevDisposeHelper dh = new HDevDisposeHelper())
              {
              hv_TranslateZ = (((-hv_Dist)*hv_DRow)*0.003)*hv_SensFactor;
              }
              if (hv_TBCenter_COPY_INP_TMP == null)
                hv_TBCenter_COPY_INP_TMP = new HTuple();
              hv_TBCenter_COPY_INP_TMP[2] = (hv_TBCenter_COPY_INP_TMP.TupleSelect(
                  2))+hv_TranslateZ;
              hv_PosesOut.Dispose();
              hv_PosesOut = new HTuple();
              if ((int)(new HTuple(hv_NumModels.TupleLessEqual(hv_MaxNumModels))) != 0)
              {
                HTuple end_val164 = hv_NumModels-1;
                HTuple step_val164 = 1;
                for (hv_Index=0; hv_Index.Continue(end_val164, step_val164); hv_Index = hv_Index.TupleAdd(step_val164))
                {
                  hv_PoseIn.Dispose();
                  using (HDevDisposeHelper dh = new HDevDisposeHelper())
                  {
                  hv_PoseIn = hv_PosesIn_COPY_INP_TMP.TupleSelectRange(
                      hv_Index*7,(hv_Index*7)+6);
                  }
                  if ((int)(hv_SelectedObjectOut.TupleSelect(hv_Index)) != 0)
                  {
                    //Transform the whole scene or selected object only
                    hv_HomMat3DIn.Dispose();
                    HOperatorSet.PoseToHomMat3d(hv_PoseIn, out hv_HomMat3DIn);
                    hv_HomMat3DOut.Dispose();
                    HOperatorSet.HomMat3dTranslate(hv_HomMat3DIn, 0, 0, hv_TranslateZ, 
                        out hv_HomMat3DOut);
                    hv_PoseOut.Dispose();
                    HOperatorSet.HomMat3dToPose(hv_HomMat3DOut, out hv_PoseOut);
                    HOperatorSet.SetScene3dInstancePose(hv_Scene3D, hv_Index, hv_PoseOut);
                  }
                  else
                  {
                    hv_PoseOut.Dispose();
                    hv_PoseOut = new HTuple(hv_PoseIn);
                  }
                  using (HDevDisposeHelper dh = new HDevDisposeHelper())
                  {
                  {
                  HTuple 
                    ExpTmpLocalVar_PosesOut = hv_PosesOut.TupleConcat(
                      hv_PoseOut);
                  hv_PosesOut.Dispose();
                  hv_PosesOut = ExpTmpLocalVar_PosesOut;
                  }
                  }
                }
              }
              else
              {
                hv_Indices.Dispose();
                HOperatorSet.TupleFind(hv_SelectedObjectOut, 1, out hv_Indices);
                hv_PoseIn.Dispose();
                using (HDevDisposeHelper dh = new HDevDisposeHelper())
                {
                hv_PoseIn = hv_PosesIn_COPY_INP_TMP.TupleSelectRange(
                    (hv_Indices.TupleSelect(0))*7,((hv_Indices.TupleSelect(0))*7)+6);
                }
                hv_HomMat3DIn.Dispose();
                HOperatorSet.PoseToHomMat3d(hv_PoseIn, out hv_HomMat3DIn);
                hv_HomMat3DOut.Dispose();
                HOperatorSet.HomMat3dTranslate(hv_HomMat3DIn, 0, 0, hv_TranslateZ, 
                    out hv_HomMat3DOut);
                hv_PoseOut.Dispose();
                HOperatorSet.HomMat3dToPose(hv_HomMat3DOut, out hv_PoseOut);
                hv_Sequence.Dispose();
                using (HDevDisposeHelper dh = new HDevDisposeHelper())
                {
                hv_Sequence = HTuple.TupleGenSequence(
                    0,(hv_NumModels*7)-1,1);
                }
                hv_Mod.Dispose();
                HOperatorSet.TupleMod(hv_Sequence, 7, out hv_Mod);
                hv_SequenceReal.Dispose();
                using (HDevDisposeHelper dh = new HDevDisposeHelper())
                {
                hv_SequenceReal = HTuple.TupleGenSequence(
                    0,hv_NumModels-(1.0/7.0),1.0/7.0);
                }
                hv_Sequence2Int.Dispose();
                using (HDevDisposeHelper dh = new HDevDisposeHelper())
                {
                hv_Sequence2Int = hv_SequenceReal.TupleInt()
                    ;
                }
                hv_Selected.Dispose();
                HOperatorSet.TupleSelect(hv_SelectedObjectOut, hv_Sequence2Int, out hv_Selected);
                hv_InvSelected.Dispose();
                using (HDevDisposeHelper dh = new HDevDisposeHelper())
                {
                hv_InvSelected = 1-hv_Selected;
                }
                hv_PosesOut.Dispose();
                HOperatorSet.TupleSelect(hv_PoseOut, hv_Mod, out hv_PosesOut);
                using (HDevDisposeHelper dh = new HDevDisposeHelper())
                {
                {
                HTuple 
                  ExpTmpLocalVar_PosesOut = (hv_PosesOut*hv_Selected)+(hv_PosesIn_COPY_INP_TMP*hv_InvSelected);
                hv_PosesOut.Dispose();
                hv_PosesOut = ExpTmpLocalVar_PosesOut;
                }
                }
                using (HDevDisposeHelper dh = new HDevDisposeHelper())
                {
                HOperatorSet.SetScene3dInstancePose(hv_Scene3D, HTuple.TupleGenSequence(
                    0,hv_NumModels-1,1), hv_PosesOut);
                }
              }
              dump_image_output(ho_BackgroundImage, hv_ExpDefaultWinHandle, hv_Scene3D, 
                  hv_AlphaOrig, hv_ObjectModel3DID, hv_GenParamName, hv_GenParamValue, 
                  hv_CamParam, hv_PosesOut, hv_ColorImage, hv_Title, hv_Information, 
                  hv_Labels, hv_VisualizeTB, "true", hv_TrackballCenterRow, hv_TrackballCenterCol, 
                  hv_TBSize_COPY_INP_TMP, hv_SelectedObjectOut, hv_WindowCenteredRotationOut, 
                  hv_TBCenter_COPY_INP_TMP);
              ho_ImageDump.Dispose();
              HOperatorSet.DumpWindowImage(out ho_ImageDump, hv_ExpDefaultWinHandle);
              //dev_set_window(...);
              HOperatorSet.DispObj(ho_ImageDump, hv_ExpDefaultWinHandle);
              //
              hv_MRow1.Dispose();
              hv_MRow1 = new HTuple(hv_Row_COPY_INP_TMP);
              hv_PosesIn_COPY_INP_TMP.Dispose();
              hv_PosesIn_COPY_INP_TMP = new HTuple(hv_PosesOut);
            }
            // catch (Exception) 
            catch (HalconException HDevExpDefaultException1)
            {
              HDevExpDefaultException1.ToHTuple(out hv_Exception);
              //Keep waiting
            }
          }
        }
        else if ((int)(hv_IsButtonRot) != 0)
        {
          //Rotate the object
          hv_MRow1.Dispose();
          hv_MRow1 = new HTuple(hv_Row_COPY_INP_TMP);
          hv_MCol1.Dispose();
          hv_MCol1 = new HTuple(hv_Column_COPY_INP_TMP);
          while ((int)(hv_IsButtonRot) != 0)
          {
            try
            {
              hv_Row_COPY_INP_TMP.Dispose();hv_Column_COPY_INP_TMP.Dispose();hv_ButtonLoop.Dispose();
              HOperatorSet.GetMpositionSubPix(hv_ExpDefaultWinHandle, out hv_Row_COPY_INP_TMP, 
                  out hv_Column_COPY_INP_TMP, out hv_ButtonLoop);
              hv_IsButtonRot.Dispose();
              using (HDevDisposeHelper dh = new HDevDisposeHelper())
              {
              hv_IsButtonRot = new HTuple(hv_ButtonLoop.TupleEqual(
                  hv_Button));
              }
              hv_MRow2.Dispose();
              hv_MRow2 = new HTuple(hv_Row_COPY_INP_TMP);
              hv_MCol2.Dispose();
              hv_MCol2 = new HTuple(hv_Column_COPY_INP_TMP);
              //Transform the pixel coordinates to relative image coordinates
              hv_MX1.Dispose();
              using (HDevDisposeHelper dh = new HDevDisposeHelper())
              {
              hv_MX1 = (hv_TrackballCenterCol-hv_MCol1)/(0.5*hv_MinImageSize);
              }
              hv_MY1.Dispose();
              using (HDevDisposeHelper dh = new HDevDisposeHelper())
              {
              hv_MY1 = (hv_TrackballCenterRow-hv_MRow1)/(0.5*hv_MinImageSize);
              }
              hv_MX2.Dispose();
              using (HDevDisposeHelper dh = new HDevDisposeHelper())
              {
              hv_MX2 = (hv_TrackballCenterCol-hv_MCol2)/(0.5*hv_MinImageSize);
              }
              hv_MY2.Dispose();
              using (HDevDisposeHelper dh = new HDevDisposeHelper())
              {
              hv_MY2 = (hv_TrackballCenterRow-hv_MRow2)/(0.5*hv_MinImageSize);
              }
              //Compute the quaternion rotation that corresponds to the mouse
              //movement
              hv_RelQuaternion.Dispose();
              trackball(hv_MX1, hv_MY1, hv_MX2, hv_MY2, hv_VirtualTrackball, hv_TrackballSize, 
                  hv_SensFactor, out hv_RelQuaternion);
              //Transform the quaternion to a rotation matrix
              hv_HomMat3DRotRel.Dispose();
              HOperatorSet.QuatToHomMat3d(hv_RelQuaternion, out hv_HomMat3DRotRel);
              hv_PosesOut.Dispose();
              hv_PosesOut = new HTuple();
              if ((int)(new HTuple(hv_NumModels.TupleLessEqual(hv_MaxNumModels))) != 0)
              {
                HTuple end_val226 = hv_NumModels-1;
                HTuple step_val226 = 1;
                for (hv_Index=0; hv_Index.Continue(end_val226, step_val226); hv_Index = hv_Index.TupleAdd(step_val226))
                {
                  hv_PoseIn.Dispose();
                  using (HDevDisposeHelper dh = new HDevDisposeHelper())
                  {
                  hv_PoseIn = hv_PosesIn_COPY_INP_TMP.TupleSelectRange(
                      hv_Index*7,(hv_Index*7)+6);
                  }
                  if ((int)(hv_SelectedObjectOut.TupleSelect(hv_Index)) != 0)
                  {
                    //Transform the whole scene or selected object only
                    hv_HomMat3DIn.Dispose();
                    HOperatorSet.PoseToHomMat3d(hv_PoseIn, out hv_HomMat3DIn);
                    using (HDevDisposeHelper dh = new HDevDisposeHelper())
                    {
                    HTuple ExpTmpOutVar_0;
                    HOperatorSet.HomMat3dTranslate(hv_HomMat3DIn, -(hv_TBCenter_COPY_INP_TMP.TupleSelect(
                        0)), -(hv_TBCenter_COPY_INP_TMP.TupleSelect(1)), -(hv_TBCenter_COPY_INP_TMP.TupleSelect(
                        2)), out ExpTmpOutVar_0);
                    hv_HomMat3DIn.Dispose();
                    hv_HomMat3DIn = ExpTmpOutVar_0;
                    }
                    {
                    HTuple ExpTmpOutVar_0;
                    HOperatorSet.HomMat3dCompose(hv_HomMat3DRotRel, hv_HomMat3DIn, 
                        out ExpTmpOutVar_0);
                    hv_HomMat3DIn.Dispose();
                    hv_HomMat3DIn = ExpTmpOutVar_0;
                    }
                    using (HDevDisposeHelper dh = new HDevDisposeHelper())
                    {
                    hv_HomMat3DOut.Dispose();
                    HOperatorSet.HomMat3dTranslate(hv_HomMat3DIn, hv_TBCenter_COPY_INP_TMP.TupleSelect(
                        0), hv_TBCenter_COPY_INP_TMP.TupleSelect(1), hv_TBCenter_COPY_INP_TMP.TupleSelect(
                        2), out hv_HomMat3DOut);
                    }
                    hv_PoseOut.Dispose();
                    HOperatorSet.HomMat3dToPose(hv_HomMat3DOut, out hv_PoseOut);
                    HOperatorSet.SetScene3dInstancePose(hv_Scene3D, hv_Index, hv_PoseOut);
                  }
                  else
                  {
                    hv_PoseOut.Dispose();
                    hv_PoseOut = new HTuple(hv_PoseIn);
                  }
                  using (HDevDisposeHelper dh = new HDevDisposeHelper())
                  {
                  {
                  HTuple 
                    ExpTmpLocalVar_PosesOut = hv_PosesOut.TupleConcat(
                      hv_PoseOut);
                  hv_PosesOut.Dispose();
                  hv_PosesOut = ExpTmpLocalVar_PosesOut;
                  }
                  }
                }
              }
              else
              {
                hv_Indices.Dispose();
                HOperatorSet.TupleFind(hv_SelectedObjectOut, 1, out hv_Indices);
                hv_PoseIn.Dispose();
                using (HDevDisposeHelper dh = new HDevDisposeHelper())
                {
                hv_PoseIn = hv_PosesIn_COPY_INP_TMP.TupleSelectRange(
                    (hv_Indices.TupleSelect(0))*7,((hv_Indices.TupleSelect(0))*7)+6);
                }
                hv_HomMat3DIn.Dispose();
                HOperatorSet.PoseToHomMat3d(hv_PoseIn, out hv_HomMat3DIn);
                using (HDevDisposeHelper dh = new HDevDisposeHelper())
                {
                hv_HomMat3DInTmp1.Dispose();
                HOperatorSet.HomMat3dTranslate(hv_HomMat3DIn, -(hv_TBCenter_COPY_INP_TMP.TupleSelect(
                    0)), -(hv_TBCenter_COPY_INP_TMP.TupleSelect(1)), -(hv_TBCenter_COPY_INP_TMP.TupleSelect(
                    2)), out hv_HomMat3DInTmp1);
                }
                hv_HomMat3DInTmp.Dispose();
                HOperatorSet.HomMat3dCompose(hv_HomMat3DRotRel, hv_HomMat3DInTmp1, 
                    out hv_HomMat3DInTmp);
                using (HDevDisposeHelper dh = new HDevDisposeHelper())
                {
                hv_HomMat3DOut.Dispose();
                HOperatorSet.HomMat3dTranslate(hv_HomMat3DInTmp, hv_TBCenter_COPY_INP_TMP.TupleSelect(
                    0), hv_TBCenter_COPY_INP_TMP.TupleSelect(1), hv_TBCenter_COPY_INP_TMP.TupleSelect(
                    2), out hv_HomMat3DOut);
                }
                hv_PoseOut.Dispose();
                HOperatorSet.HomMat3dToPose(hv_HomMat3DOut, out hv_PoseOut);
                hv_Sequence.Dispose();
                using (HDevDisposeHelper dh = new HDevDisposeHelper())
                {
                hv_Sequence = HTuple.TupleGenSequence(
                    0,(hv_NumModels*7)-1,1);
                }
                hv_Mod.Dispose();
                HOperatorSet.TupleMod(hv_Sequence, 7, out hv_Mod);
                hv_SequenceReal.Dispose();
                using (HDevDisposeHelper dh = new HDevDisposeHelper())
                {
                hv_SequenceReal = HTuple.TupleGenSequence(
                    0,hv_NumModels-(1.0/7.0),1.0/7.0);
                }
                hv_Sequence2Int.Dispose();
                using (HDevDisposeHelper dh = new HDevDisposeHelper())
                {
                hv_Sequence2Int = hv_SequenceReal.TupleInt()
                    ;
                }
                hv_Selected.Dispose();
                HOperatorSet.TupleSelect(hv_SelectedObjectOut, hv_Sequence2Int, out hv_Selected);
                hv_InvSelected.Dispose();
                using (HDevDisposeHelper dh = new HDevDisposeHelper())
                {
                hv_InvSelected = 1-hv_Selected;
                }
                hv_PosesOut.Dispose();
                HOperatorSet.TupleSelect(hv_PoseOut, hv_Mod, out hv_PosesOut);
                hv_PosesOut2.Dispose();
                using (HDevDisposeHelper dh = new HDevDisposeHelper())
                {
                hv_PosesOut2 = (hv_PosesOut*hv_Selected)+(hv_PosesIn_COPY_INP_TMP*hv_InvSelected);
                }
                hv_PosesOut.Dispose();
                hv_PosesOut = new HTuple(hv_PosesOut2);
                using (HDevDisposeHelper dh = new HDevDisposeHelper())
                {
                HOperatorSet.SetScene3dInstancePose(hv_Scene3D, HTuple.TupleGenSequence(
                    0,hv_NumModels-1,1), hv_PosesOut);
                }
              }
              dump_image_output(ho_BackgroundImage, hv_ExpDefaultWinHandle, hv_Scene3D, 
                  hv_AlphaOrig, hv_ObjectModel3DID, hv_GenParamName, hv_GenParamValue, 
                  hv_CamParam, hv_PosesOut, hv_ColorImage, hv_Title, hv_Information, 
                  hv_Labels, hv_VisualizeTB, "true", hv_TrackballCenterRow, hv_TrackballCenterCol, 
                  hv_TBSize_COPY_INP_TMP, hv_SelectedObjectOut, hv_WindowCenteredRotationOut, 
                  hv_TBCenter_COPY_INP_TMP);
              ho_ImageDump.Dispose();
              HOperatorSet.DumpWindowImage(out ho_ImageDump, hv_ExpDefaultWinHandle);
              //dev_set_window(...);
              HOperatorSet.DispObj(ho_ImageDump, hv_ExpDefaultWinHandle);
              //
              hv_MRow1.Dispose();
              hv_MRow1 = new HTuple(hv_Row_COPY_INP_TMP);
              hv_MCol1.Dispose();
              hv_MCol1 = new HTuple(hv_Column_COPY_INP_TMP);
              hv_PosesIn_COPY_INP_TMP.Dispose();
              hv_PosesIn_COPY_INP_TMP = new HTuple(hv_PosesOut);
            }
            // catch (Exception) 
            catch (HalconException HDevExpDefaultException1)
            {
              HDevExpDefaultException1.ToHTuple(out hv_Exception);
              //Keep waiting
            }
          }
        }
        hv_PosesOut.Dispose();
        hv_PosesOut = new HTuple(hv_PosesIn_COPY_INP_TMP);
      }
      ho_ImageDump.Dispose();

      hv_Column_COPY_INP_TMP.Dispose();
      hv_PosesIn_COPY_INP_TMP.Dispose();
      hv_Row_COPY_INP_TMP.Dispose();
      hv_TBCenter_COPY_INP_TMP.Dispose();
      hv_TBSize_COPY_INP_TMP.Dispose();
      hv_VisualizeTB.Dispose();
      hv_InvLog2.Dispose();
      hv_Seconds.Dispose();
      hv_ModelIndex.Dispose();
      hv_Exception1.Dispose();
      hv_HomMat3DIdentity.Dispose();
      hv_NumModels.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_MinImageSize.Dispose();
      hv_TrackballRadiusPixel.Dispose();
      hv_TrackballCenterRow.Dispose();
      hv_TrackballCenterCol.Dispose();
      hv_NumChannels.Dispose();
      hv_ColorImage.Dispose();
      hv_BAnd.Dispose();
      hv_SensFactor.Dispose();
      hv_IsButtonTrans.Dispose();
      hv_IsButtonRot.Dispose();
      hv_IsButtonDist.Dispose();
      hv_MRow1.Dispose();
      hv_MCol1.Dispose();
      hv_ButtonLoop.Dispose();
      hv_MRow2.Dispose();
      hv_MCol2.Dispose();
      hv_PX.Dispose();
      hv_PY.Dispose();
      hv_PZ.Dispose();
      hv_QX1.Dispose();
      hv_QY1.Dispose();
      hv_QZ1.Dispose();
      hv_QX2.Dispose();
      hv_QY2.Dispose();
      hv_QZ2.Dispose();
      hv_Len.Dispose();
      hv_Dist.Dispose();
      hv_Translate.Dispose();
      hv_Index.Dispose();
      hv_PoseIn.Dispose();
      hv_HomMat3DIn.Dispose();
      hv_HomMat3DOut.Dispose();
      hv_PoseOut.Dispose();
      hv_Indices.Dispose();
      hv_Sequence.Dispose();
      hv_Mod.Dispose();
      hv_SequenceReal.Dispose();
      hv_Sequence2Int.Dispose();
      hv_Selected.Dispose();
      hv_InvSelected.Dispose();
      hv_Exception.Dispose();
      hv_DRow.Dispose();
      hv_TranslateZ.Dispose();
      hv_MX1.Dispose();
      hv_MY1.Dispose();
      hv_MX2.Dispose();
      hv_MY2.Dispose();
      hv_RelQuaternion.Dispose();
      hv_HomMat3DRotRel.Dispose();
      hv_HomMat3DInTmp1.Dispose();
      hv_HomMat3DInTmp.Dispose();
      hv_PosesOut2.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_ImageDump.Dispose();

      hv_Column_COPY_INP_TMP.Dispose();
      hv_PosesIn_COPY_INP_TMP.Dispose();
      hv_Row_COPY_INP_TMP.Dispose();
      hv_TBCenter_COPY_INP_TMP.Dispose();
      hv_TBSize_COPY_INP_TMP.Dispose();
      hv_VisualizeTB.Dispose();
      hv_InvLog2.Dispose();
      hv_Seconds.Dispose();
      hv_ModelIndex.Dispose();
      hv_Exception1.Dispose();
      hv_HomMat3DIdentity.Dispose();
      hv_NumModels.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_MinImageSize.Dispose();
      hv_TrackballRadiusPixel.Dispose();
      hv_TrackballCenterRow.Dispose();
      hv_TrackballCenterCol.Dispose();
      hv_NumChannels.Dispose();
      hv_ColorImage.Dispose();
      hv_BAnd.Dispose();
      hv_SensFactor.Dispose();
      hv_IsButtonTrans.Dispose();
      hv_IsButtonRot.Dispose();
      hv_IsButtonDist.Dispose();
      hv_MRow1.Dispose();
      hv_MCol1.Dispose();
      hv_ButtonLoop.Dispose();
      hv_MRow2.Dispose();
      hv_MCol2.Dispose();
      hv_PX.Dispose();
      hv_PY.Dispose();
      hv_PZ.Dispose();
      hv_QX1.Dispose();
      hv_QY1.Dispose();
      hv_QZ1.Dispose();
      hv_QX2.Dispose();
      hv_QY2.Dispose();
      hv_QZ2.Dispose();
      hv_Len.Dispose();
      hv_Dist.Dispose();
      hv_Translate.Dispose();
      hv_Index.Dispose();
      hv_PoseIn.Dispose();
      hv_HomMat3DIn.Dispose();
      hv_HomMat3DOut.Dispose();
      hv_PoseOut.Dispose();
      hv_Indices.Dispose();
      hv_Sequence.Dispose();
      hv_Mod.Dispose();
      hv_SequenceReal.Dispose();
      hv_Sequence2Int.Dispose();
      hv_Selected.Dispose();
      hv_InvSelected.Dispose();
      hv_Exception.Dispose();
      hv_DRow.Dispose();
      hv_TranslateZ.Dispose();
      hv_MX1.Dispose();
      hv_MY1.Dispose();
      hv_MX2.Dispose();
      hv_MY2.Dispose();
      hv_RelQuaternion.Dispose();
      hv_HomMat3DRotRel.Dispose();
      hv_HomMat3DInTmp1.Dispose();
      hv_HomMat3DInTmp.Dispose();
      hv_PosesOut2.Dispose();

      throw HDevExpDefaultException;
    }
  }

  // Chapter: Graphics / Parameters
  public void color_string_to_rgb (HTuple hv_Color, out HTuple hv_RGB)
  {



    // Local iconic variables 

    HObject ho_Rectangle, ho_Image;

    // Local control variables 

    HTuple hv_WindowHandleBuffer = new HTuple();
    HTuple hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Rectangle);
    HOperatorSet.GenEmptyObj(out ho_Image);
    hv_RGB = new HTuple();
    try
    {
      //open_window(...);
      HOperatorSet.SetPart(hv_ExpDefaultWinHandle, 0, 0, -1, -1);
      ho_Rectangle.Dispose();
      HOperatorSet.GenRectangle1(out ho_Rectangle, 0, 0, 0, 0);
      try
      {
        HOperatorSet.SetColor(hv_ExpDefaultWinHandle, hv_Color);
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_Exception.Dispose();
        hv_Exception = "Wrong value of control parameter Color (must be a valid color string)";
        throw new HalconException(hv_Exception);
      }
      HOperatorSet.DispObj(ho_Rectangle, hv_ExpDefaultWinHandle);
      ho_Image.Dispose();
      HOperatorSet.DumpWindowImage(out ho_Image, hv_ExpDefaultWinHandle);
      //close_window(...);
      hv_RGB.Dispose();
      HOperatorSet.GetGrayval(ho_Image, 0, 0, out hv_RGB);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      {
      HTuple 
        ExpTmpLocalVar_RGB = hv_RGB+(
          (new HTuple(0)).TupleConcat(0)).TupleConcat(0);
      hv_RGB.Dispose();
      hv_RGB = ExpTmpLocalVar_RGB;
      }
      }
      ho_Rectangle.Dispose();
      ho_Image.Dispose();

      hv_WindowHandleBuffer.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_Rectangle.Dispose();
      ho_Image.Dispose();

      hv_WindowHandleBuffer.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  // Chapter: Graphics / Output
  // Short Description: Determine the optimum distance of the object to obtain a reasonable visualization 
  public void determine_optimum_pose_distance (HTuple hv_ObjectModel3DID, HTuple hv_CamParam, 
      HTuple hv_ImageCoverage, HTuple hv_PoseIn, out HTuple hv_PoseOut)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Rows = new HTuple(), hv_Cols = new HTuple();
    HTuple hv_MinMinZ = new HTuple(), hv_BB = new HTuple();
    HTuple hv_Index = new HTuple(), hv_CurrBB = new HTuple();
    HTuple hv_Exception = new HTuple(), hv_Seq = new HTuple();
    HTuple hv_DXMax = new HTuple(), hv_DYMax = new HTuple();
    HTuple hv_DZMax = new HTuple(), hv_Diameter = new HTuple();
    HTuple hv_ZAdd = new HTuple(), hv_BBX0 = new HTuple();
    HTuple hv_BBX1 = new HTuple(), hv_BBY0 = new HTuple();
    HTuple hv_BBY1 = new HTuple(), hv_BBZ0 = new HTuple();
    HTuple hv_BBZ1 = new HTuple(), hv_X = new HTuple(), hv_Y = new HTuple();
    HTuple hv_Z = new HTuple(), hv_HomMat3DIn = new HTuple();
    HTuple hv_QX_In = new HTuple(), hv_QY_In = new HTuple();
    HTuple hv_QZ_In = new HTuple(), hv_PoseInter = new HTuple();
    HTuple hv_HomMat3D = new HTuple(), hv_QX = new HTuple();
    HTuple hv_QY = new HTuple(), hv_QZ = new HTuple(), hv_Cx = new HTuple();
    HTuple hv_Cy = new HTuple(), hv_DR = new HTuple(), hv_DC = new HTuple();
    HTuple hv_MaxDist = new HTuple(), hv_HomMat3DRotate = new HTuple();
    HTuple hv_ImageWidth = new HTuple(), hv_ImageHeight = new HTuple();
    HTuple hv_MinImageSize = new HTuple(), hv_Zs = new HTuple();
    HTuple hv_ZDiff = new HTuple(), hv_ScaleZ = new HTuple();
    HTuple hv_ZNew = new HTuple();
    // Initialize local and output iconic variables 
    hv_PoseOut = new HTuple();
    try
    {
      //Determine the optimum distance of the object to obtain
      //a reasonable visualization
      //
      hv_Rows.Dispose();
      hv_Rows = new HTuple();
      hv_Cols.Dispose();
      hv_Cols = new HTuple();
      hv_MinMinZ.Dispose();
      hv_MinMinZ = 1e30;
      hv_BB.Dispose();
      hv_BB = new HTuple();
      for (hv_Index=0; (int)hv_Index<=(int)((new HTuple(hv_ObjectModel3DID.TupleLength()
          ))-1); hv_Index = (int)hv_Index + 1)
      {
        try
        {
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_CurrBB.Dispose();
          HOperatorSet.GetObjectModel3dParams(hv_ObjectModel3DID.TupleSelect(hv_Index), 
              "bounding_box1", out hv_CurrBB);
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_BB = hv_BB.TupleConcat(
              hv_CurrBB);
          hv_BB.Dispose();
          hv_BB = ExpTmpLocalVar_BB;
          }
          }
        }
        // catch (Exception) 
        catch (HalconException HDevExpDefaultException1)
        {
          HDevExpDefaultException1.ToHTuple(out hv_Exception);
          //3D object model is empty / has no bounding box -> ignore it
        }
      }
      if ((int)(new HTuple(((((((hv_BB.TupleAbs())).TupleConcat(0))).TupleSum())).TupleEqual(
          0.0))) != 0)
      {
        hv_BB.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_BB = new HTuple();
        hv_BB = hv_BB.TupleConcat(-((new HTuple(HTuple.TupleRand(
            3)*1e-20)).TupleAbs()));
        hv_BB = hv_BB.TupleConcat((new HTuple(HTuple.TupleRand(
            3)*1e-20)).TupleAbs());
        }
      }
      //Calculate diameter over all objects to be visualized
      hv_Seq.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Seq = HTuple.TupleGenSequence(
          0,(new HTuple(hv_BB.TupleLength()))-1,6);
      }
      hv_DXMax.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_DXMax = (((hv_BB.TupleSelect(
          hv_Seq+3))).TupleMax())-(((hv_BB.TupleSelect(hv_Seq))).TupleMin());
      }
      hv_DYMax.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_DYMax = (((hv_BB.TupleSelect(
          hv_Seq+4))).TupleMax())-(((hv_BB.TupleSelect(hv_Seq+1))).TupleMin());
      }
      hv_DZMax.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_DZMax = (((hv_BB.TupleSelect(
          hv_Seq+5))).TupleMax())-(((hv_BB.TupleSelect(hv_Seq+2))).TupleMin());
      }
      hv_Diameter.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Diameter = ((((hv_DXMax*hv_DXMax)+(hv_DYMax*hv_DYMax))+(hv_DZMax*hv_DZMax))).TupleSqrt()
          ;
      }
      //Allow the visualization of single points or extremely small objects
      hv_ZAdd.Dispose();
      hv_ZAdd = 0.0;
      if ((int)(new HTuple(((hv_Diameter.TupleMax())).TupleLess(1e-10))) != 0)
      {
        hv_ZAdd.Dispose();
        hv_ZAdd = 0.01;
      }
      //Set extremely small diameters to 1e-10 to avoid CZ == 0.0, which would lead
      //to projection errors
      if ((int)(new HTuple(((hv_Diameter.TupleMin())).TupleLess(1e-10))) != 0)
      {
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Diameter = hv_Diameter-(((((((hv_Diameter-1e-10)).TupleSgn()
            )-1)).TupleSgn())*1e-10);
        hv_Diameter.Dispose();
        hv_Diameter = ExpTmpLocalVar_Diameter;
        }
        }
      }
      //Move all points infront of the camera
      hv_BBX0.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_BBX0 = hv_BB.TupleSelect(
          hv_Seq+0);
      }
      hv_BBX1.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_BBX1 = hv_BB.TupleSelect(
          hv_Seq+3);
      }
      hv_BBY0.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_BBY0 = hv_BB.TupleSelect(
          hv_Seq+1);
      }
      hv_BBY1.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_BBY1 = hv_BB.TupleSelect(
          hv_Seq+4);
      }
      hv_BBZ0.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_BBZ0 = hv_BB.TupleSelect(
          hv_Seq+2);
      }
      hv_BBZ1.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_BBZ1 = hv_BB.TupleSelect(
          hv_Seq+5);
      }
      hv_X.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_X = new HTuple();
      hv_X = hv_X.TupleConcat(hv_BBX0, hv_BBX0, hv_BBX0, hv_BBX0, hv_BBX1, hv_BBX1, hv_BBX1, hv_BBX1);
      }
      hv_Y.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Y = new HTuple();
      hv_Y = hv_Y.TupleConcat(hv_BBY0, hv_BBY0, hv_BBY1, hv_BBY1, hv_BBY0, hv_BBY0, hv_BBY1, hv_BBY1);
      }
      hv_Z.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Z = new HTuple();
      hv_Z = hv_Z.TupleConcat(hv_BBZ0, hv_BBZ1, hv_BBZ0, hv_BBZ1, hv_BBZ0, hv_BBZ1, hv_BBZ0, hv_BBZ1);
      }
      hv_HomMat3DIn.Dispose();
      HOperatorSet.PoseToHomMat3d(hv_PoseIn, out hv_HomMat3DIn);
      hv_QX_In.Dispose();hv_QY_In.Dispose();hv_QZ_In.Dispose();
      HOperatorSet.AffineTransPoint3d(hv_HomMat3DIn, hv_X, hv_Y, hv_Z, out hv_QX_In, 
          out hv_QY_In, out hv_QZ_In);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_PoseInter.Dispose();
      HOperatorSet.PoseCompose(((((new HTuple(0)).TupleConcat(0)).TupleConcat((-(hv_QZ_In.TupleMin()
          ))+(2*(hv_Diameter.TupleMax()))))).TupleConcat((((new HTuple(0)).TupleConcat(
          0)).TupleConcat(0)).TupleConcat(0)), hv_PoseIn, out hv_PoseInter);
      }
      hv_HomMat3D.Dispose();
      HOperatorSet.PoseToHomMat3d(hv_PoseInter, out hv_HomMat3D);
      //Determine the maximum extension of the projection
      hv_QX.Dispose();hv_QY.Dispose();hv_QZ.Dispose();
      HOperatorSet.AffineTransPoint3d(hv_HomMat3D, hv_X, hv_Y, hv_Z, out hv_QX, out hv_QY, 
          out hv_QZ);
      hv_Rows.Dispose();hv_Cols.Dispose();
      HOperatorSet.Project3dPoint(hv_QX, hv_QY, hv_QZ, hv_CamParam, out hv_Rows, 
          out hv_Cols);
      hv_MinMinZ.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_MinMinZ = hv_QZ.TupleMin()
          ;
      }
      hv_Cx.Dispose();
      get_cam_par_data(hv_CamParam, "cx", out hv_Cx);
      hv_Cy.Dispose();
      get_cam_par_data(hv_CamParam, "cy", out hv_Cy);
      hv_DR.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_DR = hv_Rows-hv_Cy;
      }
      hv_DC.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_DC = hv_Cols-hv_Cx;
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      {
      HTuple 
        ExpTmpLocalVar_DR = (hv_DR.TupleMax()
          )-(hv_DR.TupleMin());
      hv_DR.Dispose();
      hv_DR = ExpTmpLocalVar_DR;
      }
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      {
      HTuple 
        ExpTmpLocalVar_DC = (hv_DC.TupleMax()
          )-(hv_DC.TupleMin());
      hv_DC.Dispose();
      hv_DC = ExpTmpLocalVar_DC;
      }
      }
      hv_MaxDist.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_MaxDist = (((hv_DR*hv_DR)+(hv_DC*hv_DC))).TupleSqrt()
          ;
      }
      //
      if ((int)(new HTuple(hv_MaxDist.TupleLess(1e-10))) != 0)
      {
        //If the object has no extension in the above projection (looking along
        //a line), we determine the extension of the object in a rotated view
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_HomMat3DRotate.Dispose();
        HOperatorSet.HomMat3dRotateLocal(hv_HomMat3D, (new HTuple(90)).TupleRad()
            , "x", out hv_HomMat3DRotate);
        }
        hv_QX.Dispose();hv_QY.Dispose();hv_QZ.Dispose();
        HOperatorSet.AffineTransPoint3d(hv_HomMat3DRotate, hv_X, hv_Y, hv_Z, out hv_QX, 
            out hv_QY, out hv_QZ);
        hv_Rows.Dispose();hv_Cols.Dispose();
        HOperatorSet.Project3dPoint(hv_QX, hv_QY, hv_QZ, hv_CamParam, out hv_Rows, 
            out hv_Cols);
        hv_DR.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_DR = hv_Rows-hv_Cy;
        }
        hv_DC.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_DC = hv_Cols-hv_Cx;
        }
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_DR = (hv_DR.TupleMax()
            )-(hv_DR.TupleMin());
        hv_DR.Dispose();
        hv_DR = ExpTmpLocalVar_DR;
        }
        }
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_DC = (hv_DC.TupleMax()
            )-(hv_DC.TupleMin());
        hv_DC.Dispose();
        hv_DC = ExpTmpLocalVar_DC;
        }
        }
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_MaxDist = ((hv_MaxDist.TupleConcat(
            (((hv_DR*hv_DR)+(hv_DC*hv_DC))).TupleSqrt()))).TupleMax();
        hv_MaxDist.Dispose();
        hv_MaxDist = ExpTmpLocalVar_MaxDist;
        }
        }
      }
      //
      hv_ImageWidth.Dispose();
      get_cam_par_data(hv_CamParam, "image_width", out hv_ImageWidth);
      hv_ImageHeight.Dispose();
      get_cam_par_data(hv_CamParam, "image_height", out hv_ImageHeight);
      hv_MinImageSize.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_MinImageSize = ((hv_ImageWidth.TupleConcat(
          hv_ImageHeight))).TupleMin();
      }
      //
      hv_Z.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Z = hv_PoseInter.TupleSelect(
          2);
      }
      hv_Zs.Dispose();
      hv_Zs = new HTuple(hv_MinMinZ);
      hv_ZDiff.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_ZDiff = hv_Z-hv_Zs;
      }
      hv_ScaleZ.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_ScaleZ = hv_MaxDist/(((0.5*hv_MinImageSize)*hv_ImageCoverage)*2.0);
      }
      hv_ZNew.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_ZNew = ((hv_ScaleZ*hv_Zs)+hv_ZDiff)+hv_ZAdd;
      }
      hv_PoseOut.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_PoseOut = hv_PoseInter.TupleReplace(
          2,hv_ZNew);
      }
      //

      hv_Rows.Dispose();
      hv_Cols.Dispose();
      hv_MinMinZ.Dispose();
      hv_BB.Dispose();
      hv_Index.Dispose();
      hv_CurrBB.Dispose();
      hv_Exception.Dispose();
      hv_Seq.Dispose();
      hv_DXMax.Dispose();
      hv_DYMax.Dispose();
      hv_DZMax.Dispose();
      hv_Diameter.Dispose();
      hv_ZAdd.Dispose();
      hv_BBX0.Dispose();
      hv_BBX1.Dispose();
      hv_BBY0.Dispose();
      hv_BBY1.Dispose();
      hv_BBZ0.Dispose();
      hv_BBZ1.Dispose();
      hv_X.Dispose();
      hv_Y.Dispose();
      hv_Z.Dispose();
      hv_HomMat3DIn.Dispose();
      hv_QX_In.Dispose();
      hv_QY_In.Dispose();
      hv_QZ_In.Dispose();
      hv_PoseInter.Dispose();
      hv_HomMat3D.Dispose();
      hv_QX.Dispose();
      hv_QY.Dispose();
      hv_QZ.Dispose();
      hv_Cx.Dispose();
      hv_Cy.Dispose();
      hv_DR.Dispose();
      hv_DC.Dispose();
      hv_MaxDist.Dispose();
      hv_HomMat3DRotate.Dispose();
      hv_ImageWidth.Dispose();
      hv_ImageHeight.Dispose();
      hv_MinImageSize.Dispose();
      hv_Zs.Dispose();
      hv_ZDiff.Dispose();
      hv_ScaleZ.Dispose();
      hv_ZNew.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Rows.Dispose();
      hv_Cols.Dispose();
      hv_MinMinZ.Dispose();
      hv_BB.Dispose();
      hv_Index.Dispose();
      hv_CurrBB.Dispose();
      hv_Exception.Dispose();
      hv_Seq.Dispose();
      hv_DXMax.Dispose();
      hv_DYMax.Dispose();
      hv_DZMax.Dispose();
      hv_Diameter.Dispose();
      hv_ZAdd.Dispose();
      hv_BBX0.Dispose();
      hv_BBX1.Dispose();
      hv_BBY0.Dispose();
      hv_BBY1.Dispose();
      hv_BBZ0.Dispose();
      hv_BBZ1.Dispose();
      hv_X.Dispose();
      hv_Y.Dispose();
      hv_Z.Dispose();
      hv_HomMat3DIn.Dispose();
      hv_QX_In.Dispose();
      hv_QY_In.Dispose();
      hv_QZ_In.Dispose();
      hv_PoseInter.Dispose();
      hv_HomMat3D.Dispose();
      hv_QX.Dispose();
      hv_QY.Dispose();
      hv_QZ.Dispose();
      hv_Cx.Dispose();
      hv_Cy.Dispose();
      hv_DR.Dispose();
      hv_DC.Dispose();
      hv_MaxDist.Dispose();
      hv_HomMat3DRotate.Dispose();
      hv_ImageWidth.Dispose();
      hv_ImageHeight.Dispose();
      hv_MinImageSize.Dispose();
      hv_Zs.Dispose();
      hv_ZDiff.Dispose();
      hv_ScaleZ.Dispose();
      hv_ZNew.Dispose();

      throw HDevExpDefaultException;
    }
  }

  // Chapter: Develop
  // Short Description: Changes the size of a graphics window with a given maximum and minimum extent such that it preserves the aspect ratio of the given image 
  public void dev_resize_window_fit_image (HObject ho_Image, HTuple hv_Row, HTuple hv_Column, 
      HTuple hv_WidthLimit, HTuple hv_HeightLimit)
  {




    // Local iconic variables 

    // Local control variables 

    HTuple hv_MinWidth = new HTuple(), hv_MaxWidth = new HTuple();
    HTuple hv_MinHeight = new HTuple(), hv_MaxHeight = new HTuple();
    HTuple hv_ResizeFactor = new HTuple(), hv_Pointer = new HTuple();
    HTuple hv_Type = new HTuple(), hv_ImageWidth = new HTuple();
    HTuple hv_ImageHeight = new HTuple(), hv_TempWidth = new HTuple();
    HTuple hv_TempHeight = new HTuple(), hv_WindowWidth = new HTuple();
    HTuple hv_WindowHeight = new HTuple();
    // Initialize local and output iconic variables 
    try
    {
      //This procedure adjusts the size of the current window
      //such that it fits into the limits specified by WidthLimit
      //and HeightLimit, but also maintains the correct image aspect ratio.
      //
      //If it is impossible to match the minimum and maximum extent requirements
      //at the same time (f.e. if the image is very long but narrow),
      //the maximum value gets a higher priority,
      //
      //Parse input tuple WidthLimit
      if ((int)((new HTuple((new HTuple(hv_WidthLimit.TupleLength())).TupleEqual(
          0))).TupleOr(new HTuple(hv_WidthLimit.TupleLess(0)))) != 0)
      {
        hv_MinWidth.Dispose();
        hv_MinWidth = 500;
        hv_MaxWidth.Dispose();
        hv_MaxWidth = 800;
      }
      else if ((int)(new HTuple((new HTuple(hv_WidthLimit.TupleLength())).TupleEqual(
          1))) != 0)
      {
        hv_MinWidth.Dispose();
        hv_MinWidth = 0;
        hv_MaxWidth.Dispose();
        hv_MaxWidth = new HTuple(hv_WidthLimit);
      }
      else
      {
        hv_MinWidth.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_MinWidth = hv_WidthLimit.TupleSelect(
            0);
        }
        hv_MaxWidth.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_MaxWidth = hv_WidthLimit.TupleSelect(
            1);
        }
      }
      //Parse input tuple HeightLimit
      if ((int)((new HTuple((new HTuple(hv_HeightLimit.TupleLength())).TupleEqual(
          0))).TupleOr(new HTuple(hv_HeightLimit.TupleLess(0)))) != 0)
      {
        hv_MinHeight.Dispose();
        hv_MinHeight = 400;
        hv_MaxHeight.Dispose();
        hv_MaxHeight = 600;
      }
      else if ((int)(new HTuple((new HTuple(hv_HeightLimit.TupleLength())).TupleEqual(
          1))) != 0)
      {
        hv_MinHeight.Dispose();
        hv_MinHeight = 0;
        hv_MaxHeight.Dispose();
        hv_MaxHeight = new HTuple(hv_HeightLimit);
      }
      else
      {
        hv_MinHeight.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_MinHeight = hv_HeightLimit.TupleSelect(
            0);
        }
        hv_MaxHeight.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_MaxHeight = hv_HeightLimit.TupleSelect(
            1);
        }
      }
      //
      //Test, if window size has to be changed.
      hv_ResizeFactor.Dispose();
      hv_ResizeFactor = 1;
      hv_Pointer.Dispose();hv_Type.Dispose();hv_ImageWidth.Dispose();hv_ImageHeight.Dispose();
      HOperatorSet.GetImagePointer1(ho_Image, out hv_Pointer, out hv_Type, out hv_ImageWidth, 
          out hv_ImageHeight);
      //First, expand window to the minimum extents (if necessary).
      if ((int)((new HTuple(hv_MinWidth.TupleGreater(hv_ImageWidth))).TupleOr(new HTuple(hv_MinHeight.TupleGreater(
          hv_ImageHeight)))) != 0)
      {
        hv_ResizeFactor.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_ResizeFactor = (((((hv_MinWidth.TupleReal()
            )/hv_ImageWidth)).TupleConcat((hv_MinHeight.TupleReal())/hv_ImageHeight))).TupleMax()
            ;
        }
      }
      hv_TempWidth.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_TempWidth = hv_ImageWidth*hv_ResizeFactor;
      }
      hv_TempHeight.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_TempHeight = hv_ImageHeight*hv_ResizeFactor;
      }
      //Then, shrink window to maximum extents (if necessary).
      if ((int)((new HTuple(hv_MaxWidth.TupleLess(hv_TempWidth))).TupleOr(new HTuple(hv_MaxHeight.TupleLess(
          hv_TempHeight)))) != 0)
      {
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_ResizeFactor = hv_ResizeFactor*((((((hv_MaxWidth.TupleReal()
            )/hv_TempWidth)).TupleConcat((hv_MaxHeight.TupleReal())/hv_TempHeight))).TupleMin()
            );
        hv_ResizeFactor.Dispose();
        hv_ResizeFactor = ExpTmpLocalVar_ResizeFactor;
        }
        }
      }
      hv_WindowWidth.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_WindowWidth = hv_ImageWidth*hv_ResizeFactor;
      }
      hv_WindowHeight.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_WindowHeight = hv_ImageHeight*hv_ResizeFactor;
      }
      //Resize window
      //dev_set_window_extents(...);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.SetPart(hv_ExpDefaultWinHandle, 0, 0, hv_ImageHeight-1, hv_ImageWidth-1);
      }

      hv_MinWidth.Dispose();
      hv_MaxWidth.Dispose();
      hv_MinHeight.Dispose();
      hv_MaxHeight.Dispose();
      hv_ResizeFactor.Dispose();
      hv_Pointer.Dispose();
      hv_Type.Dispose();
      hv_ImageWidth.Dispose();
      hv_ImageHeight.Dispose();
      hv_TempWidth.Dispose();
      hv_TempHeight.Dispose();
      hv_WindowWidth.Dispose();
      hv_WindowHeight.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_MinWidth.Dispose();
      hv_MaxWidth.Dispose();
      hv_MinHeight.Dispose();
      hv_MaxHeight.Dispose();
      hv_ResizeFactor.Dispose();
      hv_Pointer.Dispose();
      hv_Type.Dispose();
      hv_ImageWidth.Dispose();
      hv_ImageHeight.Dispose();
      hv_TempWidth.Dispose();
      hv_TempHeight.Dispose();
      hv_WindowWidth.Dispose();
      hv_WindowHeight.Dispose();

      throw HDevExpDefaultException;
    }
  }

  // Chapter: Develop
  // Short Description: Switch dev_update_pc, dev_update_var and dev_update_window to 'off'. 
  public void dev_update_off ()
  {

    // Initialize local and output iconic variables 
    //This procedure sets different update settings to 'off'.
    //This is useful to get the best performance and reduce overhead.
    //
    // dev_update_pc(...); only in hdevelop
    // dev_update_var(...); only in hdevelop
    // dev_update_window(...); only in hdevelop


    return;
  }

  // Chapter: Graphics / Output
  // Short Description: Display the axes of a 3d coordinate system 
  public void disp_3d_coord_system (HTuple hv_WindowHandle, HTuple hv_CamParam, HTuple hv_Pose, 
      HTuple hv_CoordAxesLength)
  {



    // Local iconic variables 

    HObject ho_Arrows;

    // Local control variables 

    HTuple hv_CameraType = new HTuple(), hv_IsTelecentric = new HTuple();
    HTuple hv_TransWorld2Cam = new HTuple(), hv_OrigCamX = new HTuple();
    HTuple hv_OrigCamY = new HTuple(), hv_OrigCamZ = new HTuple();
    HTuple hv_Row0 = new HTuple(), hv_Column0 = new HTuple();
    HTuple hv_X = new HTuple(), hv_Y = new HTuple(), hv_Z = new HTuple();
    HTuple hv_RowAxX = new HTuple(), hv_ColumnAxX = new HTuple();
    HTuple hv_RowAxY = new HTuple(), hv_ColumnAxY = new HTuple();
    HTuple hv_RowAxZ = new HTuple(), hv_ColumnAxZ = new HTuple();
    HTuple hv_Distance = new HTuple(), hv_HeadLength = new HTuple();
    HTuple hv_Red = new HTuple(), hv_Green = new HTuple();
    HTuple hv_Blue = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Arrows);
    try
    {
      //This procedure displays a 3D coordinate system.
      //It needs the procedure gen_arrow_contour_xld.
      //
      //Input parameters:
      //WindowHandle: The window where the coordinate system shall be displayed
      //CamParam: The camera paramters
      //Pose: The pose to be displayed
      //CoordAxesLength: The length of the coordinate axes in world coordinates
      //
      //Check, if Pose is a correct pose tuple.
      if ((int)(new HTuple((new HTuple(hv_Pose.TupleLength())).TupleNotEqual(7))) != 0)
      {
        ho_Arrows.Dispose();

        hv_CameraType.Dispose();
        hv_IsTelecentric.Dispose();
        hv_TransWorld2Cam.Dispose();
        hv_OrigCamX.Dispose();
        hv_OrigCamY.Dispose();
        hv_OrigCamZ.Dispose();
        hv_Row0.Dispose();
        hv_Column0.Dispose();
        hv_X.Dispose();
        hv_Y.Dispose();
        hv_Z.Dispose();
        hv_RowAxX.Dispose();
        hv_ColumnAxX.Dispose();
        hv_RowAxY.Dispose();
        hv_ColumnAxY.Dispose();
        hv_RowAxZ.Dispose();
        hv_ColumnAxZ.Dispose();
        hv_Distance.Dispose();
        hv_HeadLength.Dispose();
        hv_Red.Dispose();
        hv_Green.Dispose();
        hv_Blue.Dispose();

        return;
      }
      hv_CameraType.Dispose();
      get_cam_par_data(hv_CamParam, "camera_type", out hv_CameraType);
      hv_IsTelecentric.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_IsTelecentric = new HTuple(((hv_CameraType.TupleStrstr(
          "telecentric"))).TupleNotEqual(-1));
      }
      if ((int)((new HTuple(((hv_Pose.TupleSelect(2))).TupleEqual(0.0))).TupleAnd(
          hv_IsTelecentric.TupleNot())) != 0)
      {
        //For projective cameras:
        //Poses with Z position zero cannot be projected
        //(that would lead to a division by zero error).
        ho_Arrows.Dispose();

        hv_CameraType.Dispose();
        hv_IsTelecentric.Dispose();
        hv_TransWorld2Cam.Dispose();
        hv_OrigCamX.Dispose();
        hv_OrigCamY.Dispose();
        hv_OrigCamZ.Dispose();
        hv_Row0.Dispose();
        hv_Column0.Dispose();
        hv_X.Dispose();
        hv_Y.Dispose();
        hv_Z.Dispose();
        hv_RowAxX.Dispose();
        hv_ColumnAxX.Dispose();
        hv_RowAxY.Dispose();
        hv_ColumnAxY.Dispose();
        hv_RowAxZ.Dispose();
        hv_ColumnAxZ.Dispose();
        hv_Distance.Dispose();
        hv_HeadLength.Dispose();
        hv_Red.Dispose();
        hv_Green.Dispose();
        hv_Blue.Dispose();

        return;
      }
      //Convert to pose to a transformation matrix
      hv_TransWorld2Cam.Dispose();
      HOperatorSet.PoseToHomMat3d(hv_Pose, out hv_TransWorld2Cam);
      //Project the world origin into the image
      hv_OrigCamX.Dispose();hv_OrigCamY.Dispose();hv_OrigCamZ.Dispose();
      HOperatorSet.AffineTransPoint3d(hv_TransWorld2Cam, 0, 0, 0, out hv_OrigCamX, 
          out hv_OrigCamY, out hv_OrigCamZ);
      hv_Row0.Dispose();hv_Column0.Dispose();
      HOperatorSet.Project3dPoint(hv_OrigCamX, hv_OrigCamY, hv_OrigCamZ, hv_CamParam, 
          out hv_Row0, out hv_Column0);
      //Project the coordinate axes into the image
      hv_X.Dispose();hv_Y.Dispose();hv_Z.Dispose();
      HOperatorSet.AffineTransPoint3d(hv_TransWorld2Cam, hv_CoordAxesLength, 0, 0, 
          out hv_X, out hv_Y, out hv_Z);
      hv_RowAxX.Dispose();hv_ColumnAxX.Dispose();
      HOperatorSet.Project3dPoint(hv_X, hv_Y, hv_Z, hv_CamParam, out hv_RowAxX, out hv_ColumnAxX);
      hv_X.Dispose();hv_Y.Dispose();hv_Z.Dispose();
      HOperatorSet.AffineTransPoint3d(hv_TransWorld2Cam, 0, hv_CoordAxesLength, 0, 
          out hv_X, out hv_Y, out hv_Z);
      hv_RowAxY.Dispose();hv_ColumnAxY.Dispose();
      HOperatorSet.Project3dPoint(hv_X, hv_Y, hv_Z, hv_CamParam, out hv_RowAxY, out hv_ColumnAxY);
      hv_X.Dispose();hv_Y.Dispose();hv_Z.Dispose();
      HOperatorSet.AffineTransPoint3d(hv_TransWorld2Cam, 0, 0, hv_CoordAxesLength, 
          out hv_X, out hv_Y, out hv_Z);
      hv_RowAxZ.Dispose();hv_ColumnAxZ.Dispose();
      HOperatorSet.Project3dPoint(hv_X, hv_Y, hv_Z, hv_CamParam, out hv_RowAxZ, out hv_ColumnAxZ);
      //
      //Generate an XLD contour for each axis
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Distance.Dispose();
      HOperatorSet.DistancePp(((hv_Row0.TupleConcat(hv_Row0))).TupleConcat(hv_Row0), 
          ((hv_Column0.TupleConcat(hv_Column0))).TupleConcat(hv_Column0), ((hv_RowAxX.TupleConcat(
          hv_RowAxY))).TupleConcat(hv_RowAxZ), ((hv_ColumnAxX.TupleConcat(hv_ColumnAxY))).TupleConcat(
          hv_ColumnAxZ), out hv_Distance);
      }
      hv_HeadLength.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_HeadLength = (((((((hv_Distance.TupleMax()
          )/12.0)).TupleConcat(5.0))).TupleMax())).TupleInt();
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      ho_Arrows.Dispose();
      gen_arrow_contour_xld(out ho_Arrows, ((hv_Row0.TupleConcat(hv_Row0))).TupleConcat(
          hv_Row0), ((hv_Column0.TupleConcat(hv_Column0))).TupleConcat(hv_Column0), 
          ((hv_RowAxX.TupleConcat(hv_RowAxY))).TupleConcat(hv_RowAxZ), ((hv_ColumnAxX.TupleConcat(
          hv_ColumnAxY))).TupleConcat(hv_ColumnAxZ), hv_HeadLength, hv_HeadLength);
      }
      //
      //Display coordinate system
      HOperatorSet.DispXld(ho_Arrows, hv_ExpDefaultWinHandle);
      //
      hv_Red.Dispose();hv_Green.Dispose();hv_Blue.Dispose();
      HOperatorSet.GetRgb(hv_ExpDefaultWinHandle, out hv_Red, out hv_Green, out hv_Blue);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.SetRgb(hv_ExpDefaultWinHandle, hv_Red.TupleSelect(0), hv_Green.TupleSelect(
          0), hv_Blue.TupleSelect(0));
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.SetTposition(hv_ExpDefaultWinHandle, hv_RowAxX+3, hv_ColumnAxX+3);
      }
      HOperatorSet.WriteString(hv_ExpDefaultWinHandle, "X");
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.SetRgb(hv_ExpDefaultWinHandle, hv_Red.TupleSelect(1%(new HTuple(hv_Red.TupleLength()
          ))), hv_Green.TupleSelect(1%(new HTuple(hv_Green.TupleLength()))), hv_Blue.TupleSelect(
          1%(new HTuple(hv_Blue.TupleLength()))));
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.SetTposition(hv_ExpDefaultWinHandle, hv_RowAxY+3, hv_ColumnAxY+3);
      }
      HOperatorSet.WriteString(hv_ExpDefaultWinHandle, "Y");
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.SetRgb(hv_ExpDefaultWinHandle, hv_Red.TupleSelect(2%(new HTuple(hv_Red.TupleLength()
          ))), hv_Green.TupleSelect(2%(new HTuple(hv_Green.TupleLength()))), hv_Blue.TupleSelect(
          2%(new HTuple(hv_Blue.TupleLength()))));
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.SetTposition(hv_ExpDefaultWinHandle, hv_RowAxZ+3, hv_ColumnAxZ+3);
      }
      HOperatorSet.WriteString(hv_ExpDefaultWinHandle, "Z");
      HOperatorSet.SetRgb(hv_ExpDefaultWinHandle, hv_Red, hv_Green, hv_Blue);
      ho_Arrows.Dispose();

      hv_CameraType.Dispose();
      hv_IsTelecentric.Dispose();
      hv_TransWorld2Cam.Dispose();
      hv_OrigCamX.Dispose();
      hv_OrigCamY.Dispose();
      hv_OrigCamZ.Dispose();
      hv_Row0.Dispose();
      hv_Column0.Dispose();
      hv_X.Dispose();
      hv_Y.Dispose();
      hv_Z.Dispose();
      hv_RowAxX.Dispose();
      hv_ColumnAxX.Dispose();
      hv_RowAxY.Dispose();
      hv_ColumnAxY.Dispose();
      hv_RowAxZ.Dispose();
      hv_ColumnAxZ.Dispose();
      hv_Distance.Dispose();
      hv_HeadLength.Dispose();
      hv_Red.Dispose();
      hv_Green.Dispose();
      hv_Blue.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_Arrows.Dispose();

      hv_CameraType.Dispose();
      hv_IsTelecentric.Dispose();
      hv_TransWorld2Cam.Dispose();
      hv_OrigCamX.Dispose();
      hv_OrigCamY.Dispose();
      hv_OrigCamZ.Dispose();
      hv_Row0.Dispose();
      hv_Column0.Dispose();
      hv_X.Dispose();
      hv_Y.Dispose();
      hv_Z.Dispose();
      hv_RowAxX.Dispose();
      hv_ColumnAxX.Dispose();
      hv_RowAxY.Dispose();
      hv_ColumnAxY.Dispose();
      hv_RowAxZ.Dispose();
      hv_ColumnAxZ.Dispose();
      hv_Distance.Dispose();
      hv_HeadLength.Dispose();
      hv_Red.Dispose();
      hv_Green.Dispose();
      hv_Blue.Dispose();

      throw HDevExpDefaultException;
    }
  }

  // Chapter: Graphics / Output
  // Short Description: Displays a continue button. 
  public void disp_continue_button (HTuple hv_WindowHandle)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_ContinueMessage = new HTuple(), hv_Exception = new HTuple();
    HTuple hv_Row = new HTuple(), hv_Column = new HTuple();
    HTuple hv_Width = new HTuple(), hv_Height = new HTuple();
    HTuple hv_Ascent = new HTuple(), hv_Descent = new HTuple();
    HTuple hv_TextWidth = new HTuple(), hv_TextHeight = new HTuple();
    // Initialize local and output iconic variables 
    try
    {
      //This procedure displays a 'Continue' text button
      //in the lower right corner of the screen.
      //It uses the procedure disp_message.
      //
      //Input parameters:
      //WindowHandle: The window, where the text shall be displayed
      //
      //Use the continue message set in the global variable gTerminationButtonLabel.
      //If this variable is not defined, set a standard text instead.
      //global tuple gTerminationButtonLabel
      try
      {
        hv_ContinueMessage.Dispose();
        hv_ContinueMessage = new HTuple(ExpGetGlobalVar_gTerminationButtonLabel());
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_ContinueMessage.Dispose();
        hv_ContinueMessage = "Continue";
      }
      //Display the continue button
      hv_Row.Dispose();hv_Column.Dispose();hv_Width.Dispose();hv_Height.Dispose();
      HOperatorSet.GetWindowExtents(hv_ExpDefaultWinHandle, out hv_Row, out hv_Column, 
          out hv_Width, out hv_Height);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Ascent.Dispose();hv_Descent.Dispose();hv_TextWidth.Dispose();hv_TextHeight.Dispose();
      HOperatorSet.GetStringExtents(hv_ExpDefaultWinHandle, (" "+hv_ContinueMessage)+" ", 
          out hv_Ascent, out hv_Descent, out hv_TextWidth, out hv_TextHeight);
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      disp_text_button(hv_ExpDefaultWinHandle, hv_ContinueMessage, "window", (hv_Height-hv_TextHeight)-22, 
          (hv_Width-hv_TextWidth)-12, "black", "#f28f26");
      }

      hv_ContinueMessage.Dispose();
      hv_Exception.Dispose();
      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_Ascent.Dispose();
      hv_Descent.Dispose();
      hv_TextWidth.Dispose();
      hv_TextHeight.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_ContinueMessage.Dispose();
      hv_Exception.Dispose();
      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_Ascent.Dispose();
      hv_Descent.Dispose();
      hv_TextWidth.Dispose();
      hv_TextHeight.Dispose();

      throw HDevExpDefaultException;
    }
  }

  // Chapter: Graphics / Text
  // Short Description: This procedure writes a text message. 
  public void disp_message (HTuple hv_WindowHandle, HTuple hv_String, HTuple hv_CoordSystem, 
      HTuple hv_Row, HTuple hv_Column, HTuple hv_Color, HTuple hv_Box)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_GenParamName = new HTuple(), hv_GenParamValue = new HTuple();
    HTuple   hv_Color_COPY_INP_TMP = new HTuple(hv_Color);
    HTuple   hv_Column_COPY_INP_TMP = new HTuple(hv_Column);
    HTuple   hv_CoordSystem_COPY_INP_TMP = new HTuple(hv_CoordSystem);
    HTuple   hv_Row_COPY_INP_TMP = new HTuple(hv_Row);

    // Initialize local and output iconic variables 
    try
    {
      //This procedure displays text in a graphics window.
      //
      //Input parameters:
      //WindowHandle: The WindowHandle of the graphics window, where
      //   the message should be displayed
      //String: A tuple of strings containing the text message to be displayed
      //CoordSystem: If set to 'window', the text position is given
      //   with respect to the window coordinate system.
      //   If set to 'image', image coordinates are used.
      //   (This may be useful in zoomed images.)
      //Row: The row coordinate of the desired text position
      //   A tuple of values is allowed to display text at different
      //   positions.
      //Column: The column coordinate of the desired text position
      //   A tuple of values is allowed to display text at different
      //   positions.
      //Color: defines the color of the text as string.
      //   If set to [], '' or 'auto' the currently set color is used.
      //   If a tuple of strings is passed, the colors are used cyclically...
      //   - if |Row| == |Column| == 1: for each new textline
      //   = else for each text position.
      //Box: If Box[0] is set to 'true', the text is written within an orange box.
      //     If set to' false', no box is displayed.
      //     If set to a color string (e.g. 'white', '#FF00CC', etc.),
      //       the text is written in a box of that color.
      //     An optional second value for Box (Box[1]) controls if a shadow is displayed:
      //       'true' -> display a shadow in a default color
      //       'false' -> display no shadow
      //       otherwise -> use given string as color string for the shadow color
      //
      //It is possible to display multiple text strings in a single call.
      //In this case, some restrictions apply:
      //- Multiple text positions can be defined by specifying a tuple
      //  with multiple Row and/or Column coordinates, i.e.:
      //  - |Row| == n, |Column| == n
      //  - |Row| == n, |Column| == 1
      //  - |Row| == 1, |Column| == n
      //- If |Row| == |Column| == 1,
      //  each element of String is display in a new textline.
      //- If multiple positions or specified, the number of Strings
      //  must match the number of positions, i.e.:
      //  - Either |String| == n (each string is displayed at the
      //                          corresponding position),
      //  - or     |String| == 1 (The string is displayed n times).
      //
      //
      //Convert the parameters for disp_text.
      if ((int)((new HTuple(hv_Row_COPY_INP_TMP.TupleEqual(new HTuple()))).TupleOr(
          new HTuple(hv_Column_COPY_INP_TMP.TupleEqual(new HTuple())))) != 0)
      {

        hv_Color_COPY_INP_TMP.Dispose();
        hv_Column_COPY_INP_TMP.Dispose();
        hv_CoordSystem_COPY_INP_TMP.Dispose();
        hv_Row_COPY_INP_TMP.Dispose();
        hv_GenParamName.Dispose();
        hv_GenParamValue.Dispose();

        return;
      }
      if ((int)(new HTuple(hv_Row_COPY_INP_TMP.TupleEqual(-1))) != 0)
      {
        hv_Row_COPY_INP_TMP.Dispose();
        hv_Row_COPY_INP_TMP = 12;
      }
      if ((int)(new HTuple(hv_Column_COPY_INP_TMP.TupleEqual(-1))) != 0)
      {
        hv_Column_COPY_INP_TMP.Dispose();
        hv_Column_COPY_INP_TMP = 12;
      }
      //
      //Convert the parameter Box to generic parameters.
      hv_GenParamName.Dispose();
      hv_GenParamName = new HTuple();
      hv_GenParamValue.Dispose();
      hv_GenParamValue = new HTuple();
      if ((int)(new HTuple((new HTuple(hv_Box.TupleLength())).TupleGreater(0))) != 0)
      {
        if ((int)(new HTuple(((hv_Box.TupleSelect(0))).TupleEqual("false"))) != 0)
        {
          //Display no box
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_GenParamName = hv_GenParamName.TupleConcat(
              "box");
          hv_GenParamName.Dispose();
          hv_GenParamName = ExpTmpLocalVar_GenParamName;
          }
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_GenParamValue = hv_GenParamValue.TupleConcat(
              "false");
          hv_GenParamValue.Dispose();
          hv_GenParamValue = ExpTmpLocalVar_GenParamValue;
          }
          }
        }
        else if ((int)(new HTuple(((hv_Box.TupleSelect(0))).TupleNotEqual(
            "true"))) != 0)
        {
          //Set a color other than the default.
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_GenParamName = hv_GenParamName.TupleConcat(
              "box_color");
          hv_GenParamName.Dispose();
          hv_GenParamName = ExpTmpLocalVar_GenParamName;
          }
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_GenParamValue = hv_GenParamValue.TupleConcat(
              hv_Box.TupleSelect(0));
          hv_GenParamValue.Dispose();
          hv_GenParamValue = ExpTmpLocalVar_GenParamValue;
          }
          }
        }
      }
      if ((int)(new HTuple((new HTuple(hv_Box.TupleLength())).TupleGreater(1))) != 0)
      {
        if ((int)(new HTuple(((hv_Box.TupleSelect(1))).TupleEqual("false"))) != 0)
        {
          //Display no shadow.
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_GenParamName = hv_GenParamName.TupleConcat(
              "shadow");
          hv_GenParamName.Dispose();
          hv_GenParamName = ExpTmpLocalVar_GenParamName;
          }
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_GenParamValue = hv_GenParamValue.TupleConcat(
              "false");
          hv_GenParamValue.Dispose();
          hv_GenParamValue = ExpTmpLocalVar_GenParamValue;
          }
          }
        }
        else if ((int)(new HTuple(((hv_Box.TupleSelect(1))).TupleNotEqual(
            "true"))) != 0)
        {
          //Set a shadow color other than the default.
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_GenParamName = hv_GenParamName.TupleConcat(
              "shadow_color");
          hv_GenParamName.Dispose();
          hv_GenParamName = ExpTmpLocalVar_GenParamName;
          }
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_GenParamValue = hv_GenParamValue.TupleConcat(
              hv_Box.TupleSelect(1));
          hv_GenParamValue.Dispose();
          hv_GenParamValue = ExpTmpLocalVar_GenParamValue;
          }
          }
        }
      }
      //Restore default CoordSystem behavior.
      if ((int)(new HTuple(hv_CoordSystem_COPY_INP_TMP.TupleNotEqual("window"))) != 0)
      {
        hv_CoordSystem_COPY_INP_TMP.Dispose();
        hv_CoordSystem_COPY_INP_TMP = "image";
      }
      //
      if ((int)(new HTuple(hv_Color_COPY_INP_TMP.TupleEqual(""))) != 0)
      {
        //disp_text does not accept an empty string for Color.
        hv_Color_COPY_INP_TMP.Dispose();
        hv_Color_COPY_INP_TMP = new HTuple();
      }
      //
      HOperatorSet.DispText(hv_ExpDefaultWinHandle, hv_String, hv_CoordSystem_COPY_INP_TMP, 
          hv_Row_COPY_INP_TMP, hv_Column_COPY_INP_TMP, hv_Color_COPY_INP_TMP, hv_GenParamName, 
          hv_GenParamValue);

      hv_Color_COPY_INP_TMP.Dispose();
      hv_Column_COPY_INP_TMP.Dispose();
      hv_CoordSystem_COPY_INP_TMP.Dispose();
      hv_Row_COPY_INP_TMP.Dispose();
      hv_GenParamName.Dispose();
      hv_GenParamValue.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Color_COPY_INP_TMP.Dispose();
      hv_Column_COPY_INP_TMP.Dispose();
      hv_CoordSystem_COPY_INP_TMP.Dispose();
      hv_Row_COPY_INP_TMP.Dispose();
      hv_GenParamName.Dispose();
      hv_GenParamValue.Dispose();

      throw HDevExpDefaultException;
    }
  }

  // Chapter: Graphics / Output
  // Short Description: Can replace disp_object_model_3d if there is no OpenGL available. 
  public void disp_object_model_no_opengl (out HObject ho_ModelContours, HTuple hv_ObjectModel3DID, 
      HTuple hv_GenParamName, HTuple hv_GenParamValue, HTuple hv_WindowHandleBuffer, 
      HTuple hv_CamParam, HTuple hv_PosesOut)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Idx = new HTuple(), hv_CustomParamName = new HTuple();
    HTuple hv_CustomParamValue = new HTuple(), hv_Font = new HTuple();
    HTuple hv_IndicesDispBackGround = new HTuple(), hv_Indices = new HTuple();
    HTuple hv_ImageWidth = new HTuple(), hv_HasPolygons = new HTuple();
    HTuple hv_HasTri = new HTuple(), hv_HasPoints = new HTuple();
    HTuple hv_HasLines = new HTuple(), hv_NumPoints = new HTuple();
    HTuple hv_IsPrimitive = new HTuple(), hv_Center = new HTuple();
    HTuple hv_Diameter = new HTuple(), hv_OpenGlHiddenSurface = new HTuple();
    HTuple hv_CenterX = new HTuple(), hv_CenterY = new HTuple();
    HTuple hv_CenterZ = new HTuple(), hv_PosObjectsZ = new HTuple();
    HTuple hv_I = new HTuple(), hv_Pose = new HTuple(), hv_HomMat3DObj = new HTuple();
    HTuple hv_PosObjCenterX = new HTuple(), hv_PosObjCenterY = new HTuple();
    HTuple hv_PosObjCenterZ = new HTuple(), hv_PosObjectsX = new HTuple();
    HTuple hv_PosObjectsY = new HTuple(), hv_Color = new HTuple();
    HTuple hv_Indices1 = new HTuple(), hv_Indices2 = new HTuple();
    HTuple hv_J = new HTuple(), hv_Indices3 = new HTuple();
    HTuple hv_HomMat3D = new HTuple(), hv_SampledObjectModel3D = new HTuple();
    HTuple hv_X = new HTuple(), hv_Y = new HTuple(), hv_Z = new HTuple();
    HTuple hv_HomMat3D1 = new HTuple(), hv_Qx = new HTuple();
    HTuple hv_Qy = new HTuple(), hv_Qz = new HTuple(), hv_Row = new HTuple();
    HTuple hv_Column = new HTuple(), hv_ObjectModel3DConvexHull = new HTuple();
    HTuple hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ModelContours);
    try
    {
      //This procedure allows to use project_object_model_3d to simulate a disp_object_model_3d
      //call for small objects. Large objects are sampled down to display.
      hv_Idx.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Idx = hv_GenParamName.TupleFind(
          "point_size");
      }
      if ((int)((new HTuple(hv_Idx.TupleLength())).TupleAnd(new HTuple(hv_Idx.TupleNotEqual(
          -1)))) != 0)
      {
        hv_CustomParamName.Dispose();
        hv_CustomParamName = "point_size";
        hv_CustomParamValue.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_CustomParamValue = hv_GenParamValue.TupleSelect(
            hv_Idx);
        }
        if ((int)(new HTuple(hv_CustomParamValue.TupleEqual(1))) != 0)
        {
          hv_CustomParamValue.Dispose();
          hv_CustomParamValue = 0;
        }
      }
      else
      {
        hv_CustomParamName.Dispose();
        hv_CustomParamName = new HTuple();
        hv_CustomParamValue.Dispose();
        hv_CustomParamValue = new HTuple();
      }
      hv_Font.Dispose();
      HOperatorSet.GetFont(hv_ExpDefaultWinHandle, out hv_Font);
      hv_IndicesDispBackGround.Dispose();
      HOperatorSet.TupleFind(hv_GenParamName, "disp_background", out hv_IndicesDispBackGround);
      if ((int)(new HTuple(hv_IndicesDispBackGround.TupleNotEqual(-1))) != 0)
      {
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Indices.Dispose();
        HOperatorSet.TupleFind(hv_GenParamName.TupleSelect(hv_IndicesDispBackGround), 
            "false", out hv_Indices);
        }
        if ((int)(new HTuple(hv_Indices.TupleNotEqual(-1))) != 0)
        {
          HOperatorSet.ClearWindow(hv_ExpDefaultWinHandle);
        }
      }
      set_display_font(hv_ExpDefaultWinHandle, 11, "mono", "false", "false");
      hv_ImageWidth.Dispose();
      get_cam_par_data(hv_CamParam, "image_width", out hv_ImageWidth);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      disp_message(hv_ExpDefaultWinHandle, "OpenGL missing!", "image", 5, hv_ImageWidth-130, 
          "red", "false");
      }
      HOperatorSet.SetFont(hv_ExpDefaultWinHandle, hv_Font);
      hv_HasPolygons.Dispose();
      HOperatorSet.GetObjectModel3dParams(hv_ObjectModel3DID, "has_polygons", out hv_HasPolygons);
      hv_HasTri.Dispose();
      HOperatorSet.GetObjectModel3dParams(hv_ObjectModel3DID, "has_triangles", out hv_HasTri);
      hv_HasPoints.Dispose();
      HOperatorSet.GetObjectModel3dParams(hv_ObjectModel3DID, "has_points", out hv_HasPoints);
      hv_HasLines.Dispose();
      HOperatorSet.GetObjectModel3dParams(hv_ObjectModel3DID, "has_lines", out hv_HasLines);
      hv_NumPoints.Dispose();
      HOperatorSet.GetObjectModel3dParams(hv_ObjectModel3DID, "num_points", out hv_NumPoints);
      hv_IsPrimitive.Dispose();
      HOperatorSet.GetObjectModel3dParams(hv_ObjectModel3DID, "has_primitive_data", 
          out hv_IsPrimitive);
      hv_Center.Dispose();
      HOperatorSet.GetObjectModel3dParams(hv_ObjectModel3DID, "center", out hv_Center);
      hv_Diameter.Dispose();
      HOperatorSet.GetObjectModel3dParams(hv_ObjectModel3DID, "diameter", out hv_Diameter);
      hv_OpenGlHiddenSurface.Dispose();
      HOperatorSet.GetSystem("opengl_hidden_surface_removal_enable", out hv_OpenGlHiddenSurface);
      HOperatorSet.SetSystem("opengl_hidden_surface_removal_enable", "false");
      //Sort the objects by inverse z
      hv_CenterX.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_CenterX = hv_Center.TupleSelect(
          HTuple.TupleGenSequence(0,(new HTuple(hv_Center.TupleLength()))-1,3));
      }
      hv_CenterY.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_CenterY = hv_Center.TupleSelect(
          HTuple.TupleGenSequence(0,(new HTuple(hv_Center.TupleLength()))-1,3)+1);
      }
      hv_CenterZ.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_CenterZ = hv_Center.TupleSelect(
          HTuple.TupleGenSequence(0,(new HTuple(hv_Center.TupleLength()))-1,3)+2);
      }
      hv_PosObjectsZ.Dispose();
      hv_PosObjectsZ = new HTuple();
      if ((int)(new HTuple((new HTuple(hv_PosesOut.TupleLength())).TupleGreater(7))) != 0)
      {
        for (hv_I=0; (int)hv_I<=(int)((new HTuple(hv_ObjectModel3DID.TupleLength()
            ))-1); hv_I = (int)hv_I + 1)
        {
          hv_Pose.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Pose = hv_PosesOut.TupleSelectRange(
              hv_I*7,(hv_I*7)+6);
          }
          hv_HomMat3DObj.Dispose();
          HOperatorSet.PoseToHomMat3d(hv_Pose, out hv_HomMat3DObj);
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_PosObjCenterX.Dispose();hv_PosObjCenterY.Dispose();hv_PosObjCenterZ.Dispose();
          HOperatorSet.AffineTransPoint3d(hv_HomMat3DObj, hv_CenterX.TupleSelect(
              hv_I), hv_CenterY.TupleSelect(hv_I), hv_CenterZ.TupleSelect(hv_I), 
              out hv_PosObjCenterX, out hv_PosObjCenterY, out hv_PosObjCenterZ);
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_PosObjectsZ = hv_PosObjectsZ.TupleConcat(
              hv_PosObjCenterZ);
          hv_PosObjectsZ.Dispose();
          hv_PosObjectsZ = ExpTmpLocalVar_PosObjectsZ;
          }
          }
        }
      }
      else
      {
        hv_Pose.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Pose = hv_PosesOut.TupleSelectRange(
            0,6);
        }
        hv_HomMat3DObj.Dispose();
        HOperatorSet.PoseToHomMat3d(hv_Pose, out hv_HomMat3DObj);
        hv_PosObjectsX.Dispose();hv_PosObjectsY.Dispose();hv_PosObjectsZ.Dispose();
        HOperatorSet.AffineTransPoint3d(hv_HomMat3DObj, hv_CenterX, hv_CenterY, hv_CenterZ, 
            out hv_PosObjectsX, out hv_PosObjectsY, out hv_PosObjectsZ);
      }
      hv_Idx.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Idx = (new HTuple(hv_PosObjectsZ.TupleSortIndex()
          )).TupleInverse();
      }
      hv_Color.Dispose();
      hv_Color = "white";
      HOperatorSet.SetColor(hv_ExpDefaultWinHandle, hv_Color);
      if ((int)(new HTuple((new HTuple(hv_GenParamName.TupleLength())).TupleGreater(
          0))) != 0)
      {
        hv_Indices1.Dispose();
        HOperatorSet.TupleFind(hv_GenParamName, "colored", out hv_Indices1);
        hv_Indices2.Dispose();
        HOperatorSet.TupleFind(hv_GenParamName, "color", out hv_Indices2);
        if ((int)(new HTuple(((hv_Indices1.TupleSelect(0))).TupleNotEqual(-1))) != 0)
        {
          if ((int)(new HTuple(((hv_GenParamValue.TupleSelect(hv_Indices1.TupleSelect(
              0)))).TupleEqual(3))) != 0)
          {
            hv_Color.Dispose();
            hv_Color = new HTuple();
            hv_Color[0] = "red";
            hv_Color[1] = "green";
            hv_Color[2] = "blue";
          }
          else if ((int)(new HTuple(((hv_GenParamValue.TupleSelect(hv_Indices1.TupleSelect(
              0)))).TupleEqual(6))) != 0)
          {
            hv_Color.Dispose();
            hv_Color = new HTuple();
            hv_Color[0] = "red";
            hv_Color[1] = "green";
            hv_Color[2] = "blue";
            hv_Color[3] = "cyan";
            hv_Color[4] = "magenta";
            hv_Color[5] = "yellow";
          }
          else if ((int)(new HTuple(((hv_GenParamValue.TupleSelect(hv_Indices1.TupleSelect(
              0)))).TupleEqual(12))) != 0)
          {
            hv_Color.Dispose();
            hv_Color = new HTuple();
            hv_Color[0] = "red";
            hv_Color[1] = "green";
            hv_Color[2] = "blue";
            hv_Color[3] = "cyan";
            hv_Color[4] = "magenta";
            hv_Color[5] = "yellow";
            hv_Color[6] = "coral";
            hv_Color[7] = "slate blue";
            hv_Color[8] = "spring green";
            hv_Color[9] = "orange red";
            hv_Color[10] = "pink";
            hv_Color[11] = "gold";
          }
        }
        else if ((int)(new HTuple(((hv_Indices2.TupleSelect(0))).TupleNotEqual(
            -1))) != 0)
        {
          hv_Color.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Color = hv_GenParamValue.TupleSelect(
              hv_Indices2.TupleSelect(0));
          }
        }
      }
      for (hv_J=0; (int)hv_J<=(int)((new HTuple(hv_ObjectModel3DID.TupleLength()))-1); hv_J = (int)hv_J + 1)
      {
        hv_I.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_I = hv_Idx.TupleSelect(
            hv_J);
        }
        if ((int)((new HTuple((new HTuple((new HTuple(((hv_HasPolygons.TupleSelect(
            hv_I))).TupleEqual("true"))).TupleOr(new HTuple(((hv_HasTri.TupleSelect(
            hv_I))).TupleEqual("true"))))).TupleOr(new HTuple(((hv_HasPoints.TupleSelect(
            hv_I))).TupleEqual("true"))))).TupleOr(new HTuple(((hv_HasLines.TupleSelect(
            hv_I))).TupleEqual("true")))) != 0)
        {
          if ((int)(new HTuple((new HTuple(hv_GenParamName.TupleLength())).TupleGreater(
              0))) != 0)
          {
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_Indices3.Dispose();
            HOperatorSet.TupleFind(hv_GenParamName, "color_"+hv_I, out hv_Indices3);
            }
            if ((int)(new HTuple(((hv_Indices3.TupleSelect(0))).TupleNotEqual(-1))) != 0)
            {
              using (HDevDisposeHelper dh = new HDevDisposeHelper())
              {
              HOperatorSet.SetColor(hv_ExpDefaultWinHandle, hv_GenParamValue.TupleSelect(
                  hv_Indices3.TupleSelect(0)));
              }
            }
            else
            {
              using (HDevDisposeHelper dh = new HDevDisposeHelper())
              {
              HOperatorSet.SetColor(hv_ExpDefaultWinHandle, hv_Color.TupleSelect(
                  hv_I%(new HTuple(hv_Color.TupleLength()))));
              }
            }
          }
          if ((int)(new HTuple((new HTuple(hv_PosesOut.TupleLength())).TupleGreaterEqual(
              (hv_I*7)+6))) != 0)
          {
            hv_Pose.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_Pose = hv_PosesOut.TupleSelectRange(
                hv_I*7,(hv_I*7)+6);
            }
          }
          else
          {
            hv_Pose.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_Pose = hv_PosesOut.TupleSelectRange(
                0,6);
            }
          }
          if ((int)(new HTuple(((hv_NumPoints.TupleSelect(hv_I))).TupleLess(10000))) != 0)
          {
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            ho_ModelContours.Dispose();
            HOperatorSet.ProjectObjectModel3d(out ho_ModelContours, hv_ObjectModel3DID.TupleSelect(
                hv_I), hv_CamParam, hv_Pose, hv_CustomParamName, hv_CustomParamValue);
            }
            HOperatorSet.DispObj(ho_ModelContours, hv_ExpDefaultWinHandle);
          }
          else
          {
            hv_HomMat3D.Dispose();
            HOperatorSet.PoseToHomMat3d(hv_Pose, out hv_HomMat3D);
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_SampledObjectModel3D.Dispose();
            HOperatorSet.SampleObjectModel3d(hv_ObjectModel3DID.TupleSelect(hv_I), 
                "fast", 0.01*(hv_Diameter.TupleSelect(hv_I)), new HTuple(), new HTuple(), 
                out hv_SampledObjectModel3D);
            }
            ho_ModelContours.Dispose();
            HOperatorSet.ProjectObjectModel3d(out ho_ModelContours, hv_SampledObjectModel3D, 
                hv_CamParam, hv_Pose, "point_size", 1);
            hv_X.Dispose();
            HOperatorSet.GetObjectModel3dParams(hv_SampledObjectModel3D, "point_coord_x", 
                out hv_X);
            hv_Y.Dispose();
            HOperatorSet.GetObjectModel3dParams(hv_SampledObjectModel3D, "point_coord_y", 
                out hv_Y);
            hv_Z.Dispose();
            HOperatorSet.GetObjectModel3dParams(hv_SampledObjectModel3D, "point_coord_z", 
                out hv_Z);
            hv_HomMat3D1.Dispose();
            HOperatorSet.PoseToHomMat3d(hv_Pose, out hv_HomMat3D1);
            hv_Qx.Dispose();hv_Qy.Dispose();hv_Qz.Dispose();
            HOperatorSet.AffineTransPoint3d(hv_HomMat3D1, hv_X, hv_Y, hv_Z, out hv_Qx, 
                out hv_Qy, out hv_Qz);
            hv_Row.Dispose();hv_Column.Dispose();
            HOperatorSet.Project3dPoint(hv_Qx, hv_Qy, hv_Qz, hv_CamParam, out hv_Row, 
                out hv_Column);
            HOperatorSet.DispObj(ho_ModelContours, hv_ExpDefaultWinHandle);
            HOperatorSet.ClearObjectModel3d(hv_SampledObjectModel3D);
          }
        }
        else
        {
          if ((int)(new HTuple((new HTuple(hv_GenParamName.TupleLength())).TupleGreater(
              0))) != 0)
          {
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_Indices3.Dispose();
            HOperatorSet.TupleFind(hv_GenParamName, "color_"+hv_I, out hv_Indices3);
            }
            if ((int)(new HTuple(((hv_Indices3.TupleSelect(0))).TupleNotEqual(-1))) != 0)
            {
              using (HDevDisposeHelper dh = new HDevDisposeHelper())
              {
              HOperatorSet.SetColor(hv_ExpDefaultWinHandle, hv_GenParamValue.TupleSelect(
                  hv_Indices3.TupleSelect(0)));
              }
            }
            else
            {
              using (HDevDisposeHelper dh = new HDevDisposeHelper())
              {
              HOperatorSet.SetColor(hv_ExpDefaultWinHandle, hv_Color.TupleSelect(
                  hv_I%(new HTuple(hv_Color.TupleLength()))));
              }
            }
          }
          if ((int)(new HTuple((new HTuple(hv_PosesOut.TupleLength())).TupleGreaterEqual(
              (hv_I*7)+6))) != 0)
          {
            hv_Pose.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_Pose = hv_PosesOut.TupleSelectRange(
                hv_I*7,(hv_I*7)+6);
            }
          }
          else
          {
            hv_Pose.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_Pose = hv_PosesOut.TupleSelectRange(
                0,6);
            }
          }
          if ((int)(new HTuple(((hv_IsPrimitive.TupleSelect(hv_I))).TupleEqual("true"))) != 0)
          {
            try
            {
              using (HDevDisposeHelper dh = new HDevDisposeHelper())
              {
              hv_ObjectModel3DConvexHull.Dispose();
              HOperatorSet.ConvexHullObjectModel3d(hv_ObjectModel3DID.TupleSelect(
                  hv_I), out hv_ObjectModel3DConvexHull);
              }
              if ((int)(new HTuple(((hv_NumPoints.TupleSelect(hv_I))).TupleLess(10000))) != 0)
              {
                ho_ModelContours.Dispose();
                HOperatorSet.ProjectObjectModel3d(out ho_ModelContours, hv_ObjectModel3DConvexHull, 
                    hv_CamParam, hv_Pose, hv_CustomParamName, hv_CustomParamValue);
                HOperatorSet.DispObj(ho_ModelContours, hv_ExpDefaultWinHandle);
              }
              else
              {
                hv_HomMat3D.Dispose();
                HOperatorSet.PoseToHomMat3d(hv_Pose, out hv_HomMat3D);
                using (HDevDisposeHelper dh = new HDevDisposeHelper())
                {
                hv_SampledObjectModel3D.Dispose();
                HOperatorSet.SampleObjectModel3d(hv_ObjectModel3DConvexHull, "fast", 
                    0.01*(hv_Diameter.TupleSelect(hv_I)), new HTuple(), new HTuple(), 
                    out hv_SampledObjectModel3D);
                }
                ho_ModelContours.Dispose();
                HOperatorSet.ProjectObjectModel3d(out ho_ModelContours, hv_SampledObjectModel3D, 
                    hv_CamParam, hv_Pose, "point_size", 1);
                HOperatorSet.DispObj(ho_ModelContours, hv_ExpDefaultWinHandle);
                HOperatorSet.ClearObjectModel3d(hv_SampledObjectModel3D);
              }
              HOperatorSet.ClearObjectModel3d(hv_ObjectModel3DConvexHull);
            }
            // catch (Exception) 
            catch (HalconException HDevExpDefaultException1)
            {
              HDevExpDefaultException1.ToHTuple(out hv_Exception);
            }
          }
        }
      }
      HOperatorSet.SetSystem("opengl_hidden_surface_removal_enable", hv_OpenGlHiddenSurface);

      hv_Idx.Dispose();
      hv_CustomParamName.Dispose();
      hv_CustomParamValue.Dispose();
      hv_Font.Dispose();
      hv_IndicesDispBackGround.Dispose();
      hv_Indices.Dispose();
      hv_ImageWidth.Dispose();
      hv_HasPolygons.Dispose();
      hv_HasTri.Dispose();
      hv_HasPoints.Dispose();
      hv_HasLines.Dispose();
      hv_NumPoints.Dispose();
      hv_IsPrimitive.Dispose();
      hv_Center.Dispose();
      hv_Diameter.Dispose();
      hv_OpenGlHiddenSurface.Dispose();
      hv_CenterX.Dispose();
      hv_CenterY.Dispose();
      hv_CenterZ.Dispose();
      hv_PosObjectsZ.Dispose();
      hv_I.Dispose();
      hv_Pose.Dispose();
      hv_HomMat3DObj.Dispose();
      hv_PosObjCenterX.Dispose();
      hv_PosObjCenterY.Dispose();
      hv_PosObjCenterZ.Dispose();
      hv_PosObjectsX.Dispose();
      hv_PosObjectsY.Dispose();
      hv_Color.Dispose();
      hv_Indices1.Dispose();
      hv_Indices2.Dispose();
      hv_J.Dispose();
      hv_Indices3.Dispose();
      hv_HomMat3D.Dispose();
      hv_SampledObjectModel3D.Dispose();
      hv_X.Dispose();
      hv_Y.Dispose();
      hv_Z.Dispose();
      hv_HomMat3D1.Dispose();
      hv_Qx.Dispose();
      hv_Qy.Dispose();
      hv_Qz.Dispose();
      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_ObjectModel3DConvexHull.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Idx.Dispose();
      hv_CustomParamName.Dispose();
      hv_CustomParamValue.Dispose();
      hv_Font.Dispose();
      hv_IndicesDispBackGround.Dispose();
      hv_Indices.Dispose();
      hv_ImageWidth.Dispose();
      hv_HasPolygons.Dispose();
      hv_HasTri.Dispose();
      hv_HasPoints.Dispose();
      hv_HasLines.Dispose();
      hv_NumPoints.Dispose();
      hv_IsPrimitive.Dispose();
      hv_Center.Dispose();
      hv_Diameter.Dispose();
      hv_OpenGlHiddenSurface.Dispose();
      hv_CenterX.Dispose();
      hv_CenterY.Dispose();
      hv_CenterZ.Dispose();
      hv_PosObjectsZ.Dispose();
      hv_I.Dispose();
      hv_Pose.Dispose();
      hv_HomMat3DObj.Dispose();
      hv_PosObjCenterX.Dispose();
      hv_PosObjCenterY.Dispose();
      hv_PosObjCenterZ.Dispose();
      hv_PosObjectsX.Dispose();
      hv_PosObjectsY.Dispose();
      hv_Color.Dispose();
      hv_Indices1.Dispose();
      hv_Indices2.Dispose();
      hv_J.Dispose();
      hv_Indices3.Dispose();
      hv_HomMat3D.Dispose();
      hv_SampledObjectModel3D.Dispose();
      hv_X.Dispose();
      hv_Y.Dispose();
      hv_Z.Dispose();
      hv_HomMat3D1.Dispose();
      hv_Qx.Dispose();
      hv_Qy.Dispose();
      hv_Qz.Dispose();
      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_ObjectModel3DConvexHull.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  // Chapter: Graphics / Text
  // Short Description: This procedure writes a text message. 
  public void disp_text_button (HTuple hv_WindowHandle, HTuple hv_String, HTuple hv_CoordSystem, 
      HTuple hv_Row, HTuple hv_Column, HTuple hv_TextColor, HTuple hv_ButtonColor)
  {



    // Local iconic variables 

    HObject ho_UpperLeft, ho_LowerRight, ho_Rectangle;

    // Local control variables 

    HTuple hv_Red = new HTuple(), hv_Green = new HTuple();
    HTuple hv_Blue = new HTuple(), hv_Row1Part = new HTuple();
    HTuple hv_Column1Part = new HTuple(), hv_Row2Part = new HTuple();
    HTuple hv_Column2Part = new HTuple(), hv_RowWin = new HTuple();
    HTuple hv_ColumnWin = new HTuple(), hv_WidthWin = new HTuple();
    HTuple hv_HeightWin = new HTuple(), hv_Exception = new HTuple();
    HTuple hv_Fac = new HTuple(), hv_RGB = new HTuple(), hv_RGBL = new HTuple();
    HTuple hv_RGBD = new HTuple(), hv_ButtonColorBorderL = new HTuple();
    HTuple hv_ButtonColorBorderD = new HTuple(), hv_MaxAscent = new HTuple();
    HTuple hv_MaxDescent = new HTuple(), hv_MaxWidth = new HTuple();
    HTuple hv_MaxHeight = new HTuple(), hv_R1 = new HTuple();
    HTuple hv_C1 = new HTuple(), hv_FactorRow = new HTuple();
    HTuple hv_FactorColumn = new HTuple(), hv_Width = new HTuple();
    HTuple hv_Index = new HTuple(), hv_Ascent = new HTuple();
    HTuple hv_Descent = new HTuple(), hv_W = new HTuple();
    HTuple hv_H = new HTuple(), hv_FrameHeight = new HTuple();
    HTuple hv_FrameWidth = new HTuple(), hv_R2 = new HTuple();
    HTuple hv_C2 = new HTuple(), hv_ClipRegion = new HTuple();
    HTuple hv_DrawMode = new HTuple(), hv_BorderWidth = new HTuple();
    HTuple hv_CurrentColor = new HTuple();
    HTuple   hv_Column_COPY_INP_TMP = new HTuple(hv_Column);
    HTuple   hv_Row_COPY_INP_TMP = new HTuple(hv_Row);
    HTuple   hv_String_COPY_INP_TMP = new HTuple(hv_String);
    HTuple   hv_TextColor_COPY_INP_TMP = new HTuple(hv_TextColor);

    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_UpperLeft);
    HOperatorSet.GenEmptyObj(out ho_LowerRight);
    HOperatorSet.GenEmptyObj(out ho_Rectangle);
    try
    {
      //This procedure displays text in a graphics window.
      //
      //Input parameters:
      //WindowHandle: The WindowHandle of the graphics window, where
      //   the message should be displayed
      //String: A tuple of strings containing the text message to be displayed
      //CoordSystem: If set to 'window', the text position is given
      //   with respect to the window coordinate system.
      //   If set to 'image', image coordinates are used.
      //   (This may be useful in zoomed images.)
      //Row: The row coordinate of the desired text position
      //   If set to -1, a default value of 12 is used.
      //Column: The column coordinate of the desired text position
      //   If set to -1, a default value of 12 is used.
      //Color: defines the color of the text as string.
      //   If set to [], '' or 'auto' the currently set color is used.
      //   If a tuple of strings is passed, the colors are used cyclically
      //   for each new textline.
      //ButtonColor: Must be set to a color string (e.g. 'white', '#FF00CC', etc.).
      //             The text is written in a box of that color.
      //
      //Prepare window.
      hv_Red.Dispose();hv_Green.Dispose();hv_Blue.Dispose();
      HOperatorSet.GetRgb(hv_ExpDefaultWinHandle, out hv_Red, out hv_Green, out hv_Blue);
      hv_Row1Part.Dispose();hv_Column1Part.Dispose();hv_Row2Part.Dispose();hv_Column2Part.Dispose();
      HOperatorSet.GetPart(hv_ExpDefaultWinHandle, out hv_Row1Part, out hv_Column1Part, 
          out hv_Row2Part, out hv_Column2Part);
      hv_RowWin.Dispose();hv_ColumnWin.Dispose();hv_WidthWin.Dispose();hv_HeightWin.Dispose();
      HOperatorSet.GetWindowExtents(hv_ExpDefaultWinHandle, out hv_RowWin, out hv_ColumnWin, 
          out hv_WidthWin, out hv_HeightWin);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.SetPart(hv_ExpDefaultWinHandle, 0, 0, hv_HeightWin-1, hv_WidthWin-1);
      }
      //
      //Default settings.
      if ((int)(new HTuple(hv_Row_COPY_INP_TMP.TupleEqual(-1))) != 0)
      {
        hv_Row_COPY_INP_TMP.Dispose();
        hv_Row_COPY_INP_TMP = 12;
      }
      if ((int)(new HTuple(hv_Column_COPY_INP_TMP.TupleEqual(-1))) != 0)
      {
        hv_Column_COPY_INP_TMP.Dispose();
        hv_Column_COPY_INP_TMP = 12;
      }
      if ((int)(new HTuple(hv_TextColor_COPY_INP_TMP.TupleEqual(new HTuple()))) != 0)
      {
        hv_TextColor_COPY_INP_TMP.Dispose();
        hv_TextColor_COPY_INP_TMP = "";
      }
      //
      try
      {
        hv_RGB.Dispose();
        color_string_to_rgb(hv_ButtonColor, out hv_RGB);
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_Exception.Dispose();
        hv_Exception = "Wrong value of control parameter ButtonColor (must be a valid color string)";
        throw new HalconException(hv_Exception);
      }
      hv_Fac.Dispose();
      hv_Fac = 0.4;
      hv_RGBL.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_RGBL = hv_RGB+(((((255.0-hv_RGB)*hv_Fac)+0.5)).TupleInt()
          );
      }
      hv_RGBD.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_RGBD = hv_RGB-((((hv_RGB*hv_Fac)+0.5)).TupleInt()
          );
      }
      hv_ButtonColorBorderL.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_ButtonColorBorderL = "#"+(((""+(hv_RGBL.TupleString(
          "02x")))).TupleSum());
      }
      hv_ButtonColorBorderD.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_ButtonColorBorderD = "#"+(((""+(hv_RGBD.TupleString(
          "02x")))).TupleSum());
      }
      //
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      {
      HTuple 
        ExpTmpLocalVar_String = (((""+hv_String_COPY_INP_TMP)+"")).TupleSplit(
          "\n");
      hv_String_COPY_INP_TMP.Dispose();
      hv_String_COPY_INP_TMP = ExpTmpLocalVar_String;
      }
      }
      //
      //Estimate extentions of text depending on font size.
      hv_MaxAscent.Dispose();hv_MaxDescent.Dispose();hv_MaxWidth.Dispose();hv_MaxHeight.Dispose();
      HOperatorSet.GetFontExtents(hv_ExpDefaultWinHandle, out hv_MaxAscent, out hv_MaxDescent, 
          out hv_MaxWidth, out hv_MaxHeight);
      if ((int)(new HTuple(hv_CoordSystem.TupleEqual("window"))) != 0)
      {
        hv_R1.Dispose();
        hv_R1 = new HTuple(hv_Row_COPY_INP_TMP);
        hv_C1.Dispose();
        hv_C1 = new HTuple(hv_Column_COPY_INP_TMP);
      }
      else
      {
        //Transform image to window coordinates.
        hv_FactorRow.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_FactorRow = (1.0*hv_HeightWin)/((hv_Row2Part-hv_Row1Part)+1);
        }
        hv_FactorColumn.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_FactorColumn = (1.0*hv_WidthWin)/((hv_Column2Part-hv_Column1Part)+1);
        }
        hv_R1.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_R1 = ((hv_Row_COPY_INP_TMP-hv_Row1Part)+0.5)*hv_FactorRow;
        }
        hv_C1.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_C1 = ((hv_Column_COPY_INP_TMP-hv_Column1Part)+0.5)*hv_FactorColumn;
        }
      }
      //
      //Display text box depending on text size.
      //
      //Calculate box extents.
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      {
      HTuple 
        ExpTmpLocalVar_String = (" "+hv_String_COPY_INP_TMP)+" ";
      hv_String_COPY_INP_TMP.Dispose();
      hv_String_COPY_INP_TMP = ExpTmpLocalVar_String;
      }
      }
      hv_Width.Dispose();
      hv_Width = new HTuple();
      for (hv_Index=0; (int)hv_Index<=(int)((new HTuple(hv_String_COPY_INP_TMP.TupleLength()
          ))-1); hv_Index = (int)hv_Index + 1)
      {
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Ascent.Dispose();hv_Descent.Dispose();hv_W.Dispose();hv_H.Dispose();
        HOperatorSet.GetStringExtents(hv_ExpDefaultWinHandle, hv_String_COPY_INP_TMP.TupleSelect(
            hv_Index), out hv_Ascent, out hv_Descent, out hv_W, out hv_H);
        }
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Width = hv_Width.TupleConcat(
            hv_W);
        hv_Width.Dispose();
        hv_Width = ExpTmpLocalVar_Width;
        }
        }
      }
      hv_FrameHeight.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_FrameHeight = hv_MaxHeight*(new HTuple(hv_String_COPY_INP_TMP.TupleLength()
          ));
      }
      hv_FrameWidth.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_FrameWidth = (((new HTuple(0)).TupleConcat(
          hv_Width))).TupleMax();
      }
      hv_R2.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_R2 = hv_R1+hv_FrameHeight;
      }
      hv_C2.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_C2 = hv_C1+hv_FrameWidth;
      }
      //Display rectangles.
      hv_ClipRegion.Dispose();
      HOperatorSet.GetSystem("clip_region", out hv_ClipRegion);
      HOperatorSet.SetSystem("clip_region", "false");
      hv_DrawMode.Dispose();
      HOperatorSet.GetDraw(hv_ExpDefaultWinHandle, out hv_DrawMode);
      HOperatorSet.SetDraw(hv_ExpDefaultWinHandle, "fill");
      hv_BorderWidth.Dispose();
      hv_BorderWidth = 2;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      ho_UpperLeft.Dispose();
      HOperatorSet.GenRegionPolygonFilled(out ho_UpperLeft, ((((((((hv_R1-hv_BorderWidth)).TupleConcat(
          hv_R1-hv_BorderWidth))).TupleConcat(hv_R1))).TupleConcat(hv_R2))).TupleConcat(
          hv_R2+hv_BorderWidth), ((((((((hv_C1-hv_BorderWidth)).TupleConcat(hv_C2+hv_BorderWidth))).TupleConcat(
          hv_C2))).TupleConcat(hv_C1))).TupleConcat(hv_C1-hv_BorderWidth));
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      ho_LowerRight.Dispose();
      HOperatorSet.GenRegionPolygonFilled(out ho_LowerRight, ((((((((hv_R2+hv_BorderWidth)).TupleConcat(
          hv_R1-hv_BorderWidth))).TupleConcat(hv_R1))).TupleConcat(hv_R2))).TupleConcat(
          hv_R2+hv_BorderWidth), ((((((((hv_C2+hv_BorderWidth)).TupleConcat(hv_C2+hv_BorderWidth))).TupleConcat(
          hv_C2))).TupleConcat(hv_C1))).TupleConcat(hv_C1-hv_BorderWidth));
      }
      ho_Rectangle.Dispose();
      HOperatorSet.GenRectangle1(out ho_Rectangle, hv_R1, hv_C1, hv_R2, hv_C2);
      HOperatorSet.SetColor(hv_ExpDefaultWinHandle, hv_ButtonColorBorderL);
      HOperatorSet.DispObj(ho_UpperLeft, hv_ExpDefaultWinHandle);
      HOperatorSet.SetColor(hv_ExpDefaultWinHandle, hv_ButtonColorBorderD);
      HOperatorSet.DispObj(ho_LowerRight, hv_ExpDefaultWinHandle);
      HOperatorSet.SetColor(hv_ExpDefaultWinHandle, hv_ButtonColor);
      HOperatorSet.DispObj(ho_Rectangle, hv_ExpDefaultWinHandle);
      HOperatorSet.SetDraw(hv_ExpDefaultWinHandle, hv_DrawMode);
      HOperatorSet.SetSystem("clip_region", hv_ClipRegion);
      //Write text.
      for (hv_Index=0; (int)hv_Index<=(int)((new HTuple(hv_String_COPY_INP_TMP.TupleLength()
          ))-1); hv_Index = (int)hv_Index + 1)
      {
        hv_CurrentColor.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_CurrentColor = hv_TextColor_COPY_INP_TMP.TupleSelect(
            hv_Index%(new HTuple(hv_TextColor_COPY_INP_TMP.TupleLength())));
        }
        if ((int)((new HTuple(hv_CurrentColor.TupleNotEqual(""))).TupleAnd(new HTuple(hv_CurrentColor.TupleNotEqual(
            "auto")))) != 0)
        {
          HOperatorSet.SetColor(hv_ExpDefaultWinHandle, hv_CurrentColor);
        }
        else
        {
          HOperatorSet.SetRgb(hv_ExpDefaultWinHandle, hv_Red, hv_Green, hv_Blue);
        }
        hv_Row_COPY_INP_TMP.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Row_COPY_INP_TMP = hv_R1+(hv_MaxHeight*hv_Index);
        }
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.DispText(hv_ExpDefaultWinHandle, hv_String_COPY_INP_TMP.TupleSelect(
            hv_Index), "window", hv_Row_COPY_INP_TMP, hv_C1, hv_CurrentColor, "box", 
            "false");
        }
      }
      //Reset changed window settings.
      HOperatorSet.SetRgb(hv_ExpDefaultWinHandle, hv_Red, hv_Green, hv_Blue);
      HOperatorSet.SetPart(hv_ExpDefaultWinHandle, hv_Row1Part, hv_Column1Part, hv_Row2Part, 
          hv_Column2Part);
      ho_UpperLeft.Dispose();
      ho_LowerRight.Dispose();
      ho_Rectangle.Dispose();

      hv_Column_COPY_INP_TMP.Dispose();
      hv_Row_COPY_INP_TMP.Dispose();
      hv_String_COPY_INP_TMP.Dispose();
      hv_TextColor_COPY_INP_TMP.Dispose();
      hv_Red.Dispose();
      hv_Green.Dispose();
      hv_Blue.Dispose();
      hv_Row1Part.Dispose();
      hv_Column1Part.Dispose();
      hv_Row2Part.Dispose();
      hv_Column2Part.Dispose();
      hv_RowWin.Dispose();
      hv_ColumnWin.Dispose();
      hv_WidthWin.Dispose();
      hv_HeightWin.Dispose();
      hv_Exception.Dispose();
      hv_Fac.Dispose();
      hv_RGB.Dispose();
      hv_RGBL.Dispose();
      hv_RGBD.Dispose();
      hv_ButtonColorBorderL.Dispose();
      hv_ButtonColorBorderD.Dispose();
      hv_MaxAscent.Dispose();
      hv_MaxDescent.Dispose();
      hv_MaxWidth.Dispose();
      hv_MaxHeight.Dispose();
      hv_R1.Dispose();
      hv_C1.Dispose();
      hv_FactorRow.Dispose();
      hv_FactorColumn.Dispose();
      hv_Width.Dispose();
      hv_Index.Dispose();
      hv_Ascent.Dispose();
      hv_Descent.Dispose();
      hv_W.Dispose();
      hv_H.Dispose();
      hv_FrameHeight.Dispose();
      hv_FrameWidth.Dispose();
      hv_R2.Dispose();
      hv_C2.Dispose();
      hv_ClipRegion.Dispose();
      hv_DrawMode.Dispose();
      hv_BorderWidth.Dispose();
      hv_CurrentColor.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_UpperLeft.Dispose();
      ho_LowerRight.Dispose();
      ho_Rectangle.Dispose();

      hv_Column_COPY_INP_TMP.Dispose();
      hv_Row_COPY_INP_TMP.Dispose();
      hv_String_COPY_INP_TMP.Dispose();
      hv_TextColor_COPY_INP_TMP.Dispose();
      hv_Red.Dispose();
      hv_Green.Dispose();
      hv_Blue.Dispose();
      hv_Row1Part.Dispose();
      hv_Column1Part.Dispose();
      hv_Row2Part.Dispose();
      hv_Column2Part.Dispose();
      hv_RowWin.Dispose();
      hv_ColumnWin.Dispose();
      hv_WidthWin.Dispose();
      hv_HeightWin.Dispose();
      hv_Exception.Dispose();
      hv_Fac.Dispose();
      hv_RGB.Dispose();
      hv_RGBL.Dispose();
      hv_RGBD.Dispose();
      hv_ButtonColorBorderL.Dispose();
      hv_ButtonColorBorderD.Dispose();
      hv_MaxAscent.Dispose();
      hv_MaxDescent.Dispose();
      hv_MaxWidth.Dispose();
      hv_MaxHeight.Dispose();
      hv_R1.Dispose();
      hv_C1.Dispose();
      hv_FactorRow.Dispose();
      hv_FactorColumn.Dispose();
      hv_Width.Dispose();
      hv_Index.Dispose();
      hv_Ascent.Dispose();
      hv_Descent.Dispose();
      hv_W.Dispose();
      hv_H.Dispose();
      hv_FrameHeight.Dispose();
      hv_FrameWidth.Dispose();
      hv_R2.Dispose();
      hv_C2.Dispose();
      hv_ClipRegion.Dispose();
      hv_DrawMode.Dispose();
      hv_BorderWidth.Dispose();
      hv_CurrentColor.Dispose();

      throw HDevExpDefaultException;
    }
  }

  // Chapter: Graphics / Output
  public void disp_title_and_information (HTuple hv_WindowHandle, HTuple hv_Title, 
      HTuple hv_Information)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_WinRow = new HTuple(), hv_WinColumn = new HTuple();
    HTuple hv_WinWidth = new HTuple(), hv_WinHeight = new HTuple();
    HTuple hv_NumTitleLines = new HTuple(), hv_Row = new HTuple();
    HTuple hv_Column = new HTuple(), hv_TextWidth = new HTuple();
    HTuple hv_NumInfoLines = new HTuple(), hv_Ascent = new HTuple();
    HTuple hv_Descent = new HTuple(), hv_Width = new HTuple();
    HTuple hv_Height = new HTuple();
    HTuple   hv_Information_COPY_INP_TMP = new HTuple(hv_Information);
    HTuple   hv_Title_COPY_INP_TMP = new HTuple(hv_Title);

    // Initialize local and output iconic variables 
    try
    {
      //
      //global tuple gInfoDecor
      //global tuple gInfoPos
      //global tuple gTitlePos
      //global tuple gTitleDecor
      //
      hv_WinRow.Dispose();hv_WinColumn.Dispose();hv_WinWidth.Dispose();hv_WinHeight.Dispose();
      HOperatorSet.GetWindowExtents(hv_ExpDefaultWinHandle, out hv_WinRow, out hv_WinColumn, 
          out hv_WinWidth, out hv_WinHeight);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      {
      HTuple 
        ExpTmpLocalVar_Title = (((""+hv_Title_COPY_INP_TMP)+"")).TupleSplit(
          "\n");
      hv_Title_COPY_INP_TMP.Dispose();
      hv_Title_COPY_INP_TMP = ExpTmpLocalVar_Title;
      }
      }
      hv_NumTitleLines.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_NumTitleLines = new HTuple(hv_Title_COPY_INP_TMP.TupleLength()
          );
      }
      if ((int)(new HTuple(hv_NumTitleLines.TupleGreater(0))) != 0)
      {
        hv_Row.Dispose();
        hv_Row = 12;
        if ((int)(new HTuple(ExpGetGlobalVar_gTitlePos().TupleEqual("UpperLeft"))) != 0)
        {
          hv_Column.Dispose();
          hv_Column = 12;
        }
        else if ((int)(new HTuple(ExpGetGlobalVar_gTitlePos().TupleEqual(
            "UpperCenter"))) != 0)
        {
          hv_TextWidth.Dispose();
          max_line_width(hv_WindowHandle, hv_Title_COPY_INP_TMP, out hv_TextWidth);
          hv_Column.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Column = (hv_WinWidth/2)-(hv_TextWidth/2);
          }
        }
        else if ((int)(new HTuple(ExpGetGlobalVar_gTitlePos().TupleEqual(
            "UpperRight"))) != 0)
        {
          if ((int)(new HTuple(((ExpGetGlobalVar_gTitleDecor().TupleSelect(1))).TupleEqual(
              "true"))) != 0)
          {
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_TextWidth.Dispose();
            max_line_width(hv_WindowHandle, hv_Title_COPY_INP_TMP+"  ", out hv_TextWidth);
            }
          }
          else
          {
            hv_TextWidth.Dispose();
            max_line_width(hv_WindowHandle, hv_Title_COPY_INP_TMP, out hv_TextWidth);
          }
          hv_Column.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Column = (hv_WinWidth-hv_TextWidth)-10;
          }
        }
        else
        {
          //Unknown position!
          HDevelopStop();
        }
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        disp_message(hv_ExpDefaultWinHandle, hv_Title_COPY_INP_TMP, "window", hv_Row, 
            hv_Column, ExpGetGlobalVar_gTitleDecor().TupleSelect(0), ExpGetGlobalVar_gTitleDecor().TupleSelect(
            1));
        }
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      {
      HTuple 
        ExpTmpLocalVar_Information = (((""+hv_Information_COPY_INP_TMP)+"")).TupleSplit(
          "\n");
      hv_Information_COPY_INP_TMP.Dispose();
      hv_Information_COPY_INP_TMP = ExpTmpLocalVar_Information;
      }
      }
      hv_NumInfoLines.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_NumInfoLines = new HTuple(hv_Information_COPY_INP_TMP.TupleLength()
          );
      }
      if ((int)(new HTuple(hv_NumInfoLines.TupleGreater(0))) != 0)
      {
        if ((int)(new HTuple(ExpGetGlobalVar_gInfoPos().TupleEqual("UpperLeft"))) != 0)
        {
          hv_Row.Dispose();
          hv_Row = 12;
          hv_Column.Dispose();
          hv_Column = 12;
        }
        else if ((int)(new HTuple(ExpGetGlobalVar_gInfoPos().TupleEqual(
            "UpperRight"))) != 0)
        {
          if ((int)(new HTuple(((ExpGetGlobalVar_gInfoDecor().TupleSelect(1))).TupleEqual(
              "true"))) != 0)
          {
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_TextWidth.Dispose();
            max_line_width(hv_WindowHandle, hv_Information_COPY_INP_TMP+"  ", out hv_TextWidth);
            }
          }
          else
          {
            hv_TextWidth.Dispose();
            max_line_width(hv_WindowHandle, hv_Information_COPY_INP_TMP, out hv_TextWidth);
          }
          hv_Row.Dispose();
          hv_Row = 12;
          hv_Column.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Column = (hv_WinWidth-hv_TextWidth)-12;
          }
        }
        else if ((int)(new HTuple(ExpGetGlobalVar_gInfoPos().TupleEqual(
            "LowerLeft"))) != 0)
        {
          hv_Ascent.Dispose();hv_Descent.Dispose();hv_Width.Dispose();hv_Height.Dispose();
          HOperatorSet.GetStringExtents(hv_ExpDefaultWinHandle, hv_Information_COPY_INP_TMP, 
              out hv_Ascent, out hv_Descent, out hv_Width, out hv_Height);
          hv_Row.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Row = (hv_WinHeight-((((new HTuple(0)).TupleMax2(
              hv_NumInfoLines-1))*(hv_Ascent+hv_Descent))+hv_Height))-12;
          }
          hv_Column.Dispose();
          hv_Column = 12;
        }
        else
        {
          //Unknown position!
          HDevelopStop();
        }
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        disp_message(hv_ExpDefaultWinHandle, hv_Information_COPY_INP_TMP, "window", 
            hv_Row, hv_Column, ExpGetGlobalVar_gInfoDecor().TupleSelect(0), ExpGetGlobalVar_gInfoDecor().TupleSelect(
            1));
        }
      }
      //

      hv_Information_COPY_INP_TMP.Dispose();
      hv_Title_COPY_INP_TMP.Dispose();
      hv_WinRow.Dispose();
      hv_WinColumn.Dispose();
      hv_WinWidth.Dispose();
      hv_WinHeight.Dispose();
      hv_NumTitleLines.Dispose();
      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_TextWidth.Dispose();
      hv_NumInfoLines.Dispose();
      hv_Ascent.Dispose();
      hv_Descent.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Information_COPY_INP_TMP.Dispose();
      hv_Title_COPY_INP_TMP.Dispose();
      hv_WinRow.Dispose();
      hv_WinColumn.Dispose();
      hv_WinWidth.Dispose();
      hv_WinHeight.Dispose();
      hv_NumTitleLines.Dispose();
      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_TextWidth.Dispose();
      hv_NumInfoLines.Dispose();
      hv_Ascent.Dispose();
      hv_Descent.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();

      throw HDevExpDefaultException;
    }
  }

  // Chapter: Graphics / Output
  // Short Description: Renders 3D object models in a buffer window. 
  public void dump_image_output (HObject ho_BackgroundImage, HTuple hv_WindowHandleBuffer, 
      HTuple hv_Scene3D, HTuple hv_AlphaOrig, HTuple hv_ObjectModel3DID, HTuple hv_GenParamName, 
      HTuple hv_GenParamValue, HTuple hv_CamParam, HTuple hv_Poses, HTuple hv_ColorImage, 
      HTuple hv_Title, HTuple hv_Information, HTuple hv_Labels, HTuple hv_VisualizeTrackball, 
      HTuple hv_DisplayContinueButton, HTuple hv_TrackballCenterRow, HTuple hv_TrackballCenterCol, 
      HTuple hv_TrackballRadiusPixel, HTuple hv_SelectedObject, HTuple hv_VisualizeRotationCenter, 
      HTuple hv_RotationCenter)
  {




        // Local iconic variables 

        HObject ho_TrackballContour=null, ho_CrossRotCenter=null;
        HObject ho_ModelContours=null;

        // Local control variables 

        HTuple ExpTmpLocalVar_gUsesOpenGL = new HTuple();
        HTuple hv_Exception = new HTuple(), hv_Index = new HTuple();
        HTuple hv_Exception1 = new HTuple(), hv_DeselectedIdx = new HTuple();
        HTuple hv_DeselectedName = new HTuple(), hv_DeselectedValue = new HTuple();
        HTuple hv_Pose = new HTuple(), hv_HomMat3D = new HTuple();
        HTuple hv_Center = new HTuple(), hv_CenterCamX = new HTuple();
        HTuple hv_CenterCamY = new HTuple(), hv_CenterCamZ = new HTuple();
        HTuple hv_CenterRow = new HTuple(), hv_CenterCol = new HTuple();
        HTuple hv_Label = new HTuple(), hv_Ascent = new HTuple();
        HTuple hv_Descent = new HTuple(), hv_TextWidth = new HTuple();
        HTuple hv_TextHeight = new HTuple(), hv_RotCenterRow = new HTuple();
        HTuple hv_RotCenterCol = new HTuple(), hv_Orientation = new HTuple();
        HTuple hv_Colors = new HTuple();
        HTuple   hv_RotationCenter_COPY_INP_TMP = new HTuple(hv_RotationCenter);

        // Initialize local and output iconic variables 
        HOperatorSet.GenEmptyObj(out ho_TrackballContour);
        HOperatorSet.GenEmptyObj(out ho_CrossRotCenter);
        HOperatorSet.GenEmptyObj(out ho_ModelContours);
        try
        {
      //global tuple gAlphaDeselected
      //global tuple gTerminationButtonLabel
      //global tuple gDispObjOffset
      //global tuple gLabelsDecor
      //global tuple gUsesOpenGL
      //
      //Display background image
      HOperatorSet.ClearWindow(hv_ExpDefaultWinHandle);
      if ((int)(hv_ColorImage) != 0)
      {
        HOperatorSet.DispColor(ho_BackgroundImage, hv_ExpDefaultWinHandle);
      }
      else
      {
        HOperatorSet.DispImage(ho_BackgroundImage, hv_ExpDefaultWinHandle);
      }
      //
      //Display objects
      if ((int)(new HTuple(((hv_SelectedObject.TupleSum())).TupleEqual(new HTuple(hv_SelectedObject.TupleLength()
          )))) != 0)
      {
        if ((int)(new HTuple(ExpGetGlobalVar_gUsesOpenGL().TupleEqual("true"))) != 0)
        {
          try
          {
            HOperatorSet.DisplayScene3d(hv_ExpDefaultWinHandle, hv_Scene3D, 0);
          }
          // catch (Exception) 
          catch (HalconException HDevExpDefaultException1)
          {
            HDevExpDefaultException1.ToHTuple(out hv_Exception);
            if ((int)((new HTuple((new HTuple(((hv_Exception.TupleSelect(0))).TupleEqual(
                5185))).TupleOr(new HTuple(((hv_Exception.TupleSelect(0))).TupleEqual(
                5188))))).TupleOr(new HTuple(((hv_Exception.TupleSelect(0))).TupleEqual(
                5187)))) != 0)
            {
              ExpTmpLocalVar_gUsesOpenGL = "false";
              ExpSetGlobalVar_gUsesOpenGL(ExpTmpLocalVar_gUsesOpenGL);
            }
            else
            {
              throw new HalconException(hv_Exception);
            }
          }
        }
        if ((int)(new HTuple(ExpGetGlobalVar_gUsesOpenGL().TupleEqual("false"))) != 0)
        {
          //* NO OpenGL, use fallback
          ho_ModelContours.Dispose();
          disp_object_model_no_opengl(out ho_ModelContours, hv_ObjectModel3DID, hv_GenParamName, 
              hv_GenParamValue, hv_ExpDefaultWinHandle, hv_CamParam, hv_Poses);
        }
      }
      else
      {
        for (hv_Index=0; (int)hv_Index<=(int)((new HTuple(hv_AlphaOrig.TupleLength()
            ))-1); hv_Index = (int)hv_Index + 1)
        {
          if ((int)(new HTuple(((hv_SelectedObject.TupleSelect(hv_Index))).TupleEqual(
              1))) != 0)
          {
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            HOperatorSet.SetScene3dInstanceParam(hv_Scene3D, hv_Index, "alpha", hv_AlphaOrig.TupleSelect(
                hv_Index));
            }
          }
          else
          {
            HOperatorSet.SetScene3dInstanceParam(hv_Scene3D, hv_Index, "alpha", ExpGetGlobalVar_gAlphaDeselected());
          }
        }
        try
        {
          if ((int)(new HTuple(ExpGetGlobalVar_gUsesOpenGL().TupleEqual("false"))) != 0)
          {
            throw new HalconException(new HTuple());
          }
          HOperatorSet.DisplayScene3d(hv_ExpDefaultWinHandle, hv_Scene3D, 0);
        }
        // catch (Exception1) 
        catch (HalconException HDevExpDefaultException1)
        {
          HDevExpDefaultException1.ToHTuple(out hv_Exception1);
          //* NO OpenGL, use fallback
          hv_DeselectedIdx.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_DeselectedIdx = hv_SelectedObject.TupleFind(
              0);
          }
          if ((int)(new HTuple(hv_DeselectedIdx.TupleNotEqual(-1))) != 0)
          {
            hv_DeselectedName.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_DeselectedName = "color_"+hv_DeselectedIdx;
            }
            hv_DeselectedValue.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_DeselectedValue = HTuple.TupleGenConst(
                new HTuple(hv_DeselectedName.TupleLength()),"gray");
            }
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          ho_ModelContours.Dispose();
          disp_object_model_no_opengl(out ho_ModelContours, hv_ObjectModel3DID, hv_GenParamName.TupleConcat(
              hv_DeselectedName), hv_GenParamValue.TupleConcat(hv_DeselectedValue), 
              hv_ExpDefaultWinHandle, hv_CamParam, hv_Poses);
          }
        }
        for (hv_Index=0; (int)hv_Index<=(int)((new HTuple(hv_AlphaOrig.TupleLength()
            ))-1); hv_Index = (int)hv_Index + 1)
        {
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          HOperatorSet.SetScene3dInstanceParam(hv_Scene3D, hv_Index, "alpha", hv_AlphaOrig.TupleSelect(
              hv_Index));
          }
        }
      }
      //
      //Display labels
      if ((int)(new HTuple(hv_Labels.TupleNotEqual(0))) != 0)
      {
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.SetColor(hv_ExpDefaultWinHandle, ExpGetGlobalVar_gLabelsDecor().TupleSelect(
            0));
        }
        for (hv_Index=0; (int)hv_Index<=(int)((new HTuple(hv_ObjectModel3DID.TupleLength()
            ))-1); hv_Index = (int)hv_Index + 1)
        {
          //Project the center point of the current model
          hv_Pose.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Pose = hv_Poses.TupleSelectRange(
              hv_Index*7,(hv_Index*7)+6);
          }
          hv_HomMat3D.Dispose();
          HOperatorSet.PoseToHomMat3d(hv_Pose, out hv_HomMat3D);
          try
          {
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_Center.Dispose();
            HOperatorSet.GetObjectModel3dParams(hv_ObjectModel3DID.TupleSelect(hv_Index), 
                "center", out hv_Center);
            }
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_CenterCamX.Dispose();hv_CenterCamY.Dispose();hv_CenterCamZ.Dispose();
            HOperatorSet.AffineTransPoint3d(hv_HomMat3D, hv_Center.TupleSelect(0), 
                hv_Center.TupleSelect(1), hv_Center.TupleSelect(2), out hv_CenterCamX, 
                out hv_CenterCamY, out hv_CenterCamZ);
            }
            hv_CenterRow.Dispose();hv_CenterCol.Dispose();
            HOperatorSet.Project3dPoint(hv_CenterCamX, hv_CenterCamY, hv_CenterCamZ, 
                hv_CamParam, out hv_CenterRow, out hv_CenterCol);
            hv_Label.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_Label = hv_Labels.TupleSelect(
                hv_Index);
            }
            if ((int)(new HTuple(hv_Label.TupleNotEqual(""))) != 0)
            {
              hv_Ascent.Dispose();hv_Descent.Dispose();hv_TextWidth.Dispose();hv_TextHeight.Dispose();
              HOperatorSet.GetStringExtents(hv_ExpDefaultWinHandle, hv_Label, out hv_Ascent, 
                  out hv_Descent, out hv_TextWidth, out hv_TextHeight);
              using (HDevDisposeHelper dh = new HDevDisposeHelper())
              {
              disp_message(hv_ExpDefaultWinHandle, hv_Label, "window", (hv_CenterRow-(hv_TextHeight/2))+(ExpGetGlobalVar_gDispObjOffset().TupleSelect(
                  0)), (hv_CenterCol-(hv_TextWidth/2))+(ExpGetGlobalVar_gDispObjOffset().TupleSelect(
                  1)), new HTuple(), ExpGetGlobalVar_gLabelsDecor().TupleSelect(1));
              }
            }
          }
          // catch (Exception) 
          catch (HalconException HDevExpDefaultException1)
          {
            HDevExpDefaultException1.ToHTuple(out hv_Exception);
            //The 3D object model might not have a center because it is empty
            //-> do not display any label
          }
        }
      }
      //
      //Visualize the trackball if desired
      if ((int)(hv_VisualizeTrackball) != 0)
      {
        HOperatorSet.SetLineWidth(hv_ExpDefaultWinHandle, 1);
        ho_TrackballContour.Dispose();
        HOperatorSet.GenEllipseContourXld(out ho_TrackballContour, hv_TrackballCenterRow, 
            hv_TrackballCenterCol, 0, hv_TrackballRadiusPixel, hv_TrackballRadiusPixel, 
            0, 6.28318, "positive", 1.5);
        HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "dim gray");
        HOperatorSet.DispXld(ho_TrackballContour, hv_ExpDefaultWinHandle);
      }
      //
      //Visualize the rotation center if desired
      if ((int)((new HTuple(hv_VisualizeRotationCenter.TupleNotEqual(0))).TupleAnd(
          new HTuple((new HTuple(hv_RotationCenter_COPY_INP_TMP.TupleLength())).TupleEqual(
          3)))) != 0)
      {
        if ((int)(new HTuple(((hv_RotationCenter_COPY_INP_TMP.TupleSelect(2))).TupleLess(
            1e-10))) != 0)
        {
          if (hv_RotationCenter_COPY_INP_TMP == null)
            hv_RotationCenter_COPY_INP_TMP = new HTuple();
          hv_RotationCenter_COPY_INP_TMP[2] = 1e-10;
        }
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_RotCenterRow.Dispose();hv_RotCenterCol.Dispose();
        HOperatorSet.Project3dPoint(hv_RotationCenter_COPY_INP_TMP.TupleSelect(0), 
            hv_RotationCenter_COPY_INP_TMP.TupleSelect(1), hv_RotationCenter_COPY_INP_TMP.TupleSelect(
            2), hv_CamParam, out hv_RotCenterRow, out hv_RotCenterCol);
        }
        hv_Orientation.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Orientation = (new HTuple(90)).TupleRad()
            ;
        }
        if ((int)(new HTuple(hv_VisualizeRotationCenter.TupleEqual(1))) != 0)
        {
          hv_Orientation.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Orientation = (new HTuple(45)).TupleRad()
              ;
          }
        }
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        ho_CrossRotCenter.Dispose();
        HOperatorSet.GenCrossContourXld(out ho_CrossRotCenter, hv_RotCenterRow, hv_RotCenterCol, 
            hv_TrackballRadiusPixel/25.0, hv_Orientation);
        }
        HOperatorSet.SetLineWidth(hv_ExpDefaultWinHandle, 3);
        hv_Colors.Dispose();
        HOperatorSet.QueryColor(hv_ExpDefaultWinHandle, out hv_Colors);
        HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "light gray");
        HOperatorSet.DispXld(ho_CrossRotCenter, hv_ExpDefaultWinHandle);
        HOperatorSet.SetLineWidth(hv_ExpDefaultWinHandle, 1);
        HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "dim gray");
        HOperatorSet.DispXld(ho_CrossRotCenter, hv_ExpDefaultWinHandle);
      }
      //
      //Display title
      disp_title_and_information(hv_WindowHandleBuffer, hv_Title, hv_Information);
      //
      //Display the 'Exit' button
      if ((int)(new HTuple(hv_DisplayContinueButton.TupleEqual("true"))) != 0)
      {
        disp_continue_button(hv_ExpDefaultWinHandle);
      }
      //
      ho_TrackballContour.Dispose();
      ho_CrossRotCenter.Dispose();
      ho_ModelContours.Dispose();

      hv_RotationCenter_COPY_INP_TMP.Dispose();
      hv_Exception.Dispose();
      hv_Index.Dispose();
      hv_Exception1.Dispose();
      hv_DeselectedIdx.Dispose();
      hv_DeselectedName.Dispose();
      hv_DeselectedValue.Dispose();
      hv_Pose.Dispose();
      hv_HomMat3D.Dispose();
      hv_Center.Dispose();
      hv_CenterCamX.Dispose();
      hv_CenterCamY.Dispose();
      hv_CenterCamZ.Dispose();
      hv_CenterRow.Dispose();
      hv_CenterCol.Dispose();
      hv_Label.Dispose();
      hv_Ascent.Dispose();
      hv_Descent.Dispose();
      hv_TextWidth.Dispose();
      hv_TextHeight.Dispose();
      hv_RotCenterRow.Dispose();
      hv_RotCenterCol.Dispose();
      hv_Orientation.Dispose();
      hv_Colors.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_TrackballContour.Dispose();
      ho_CrossRotCenter.Dispose();
      ho_ModelContours.Dispose();

      hv_RotationCenter_COPY_INP_TMP.Dispose();
      hv_Exception.Dispose();
      hv_Index.Dispose();
      hv_Exception1.Dispose();
      hv_DeselectedIdx.Dispose();
      hv_DeselectedName.Dispose();
      hv_DeselectedValue.Dispose();
      hv_Pose.Dispose();
      hv_HomMat3D.Dispose();
      hv_Center.Dispose();
      hv_CenterCamX.Dispose();
      hv_CenterCamY.Dispose();
      hv_CenterCamZ.Dispose();
      hv_CenterRow.Dispose();
      hv_CenterCol.Dispose();
      hv_Label.Dispose();
      hv_Ascent.Dispose();
      hv_Descent.Dispose();
      hv_TextWidth.Dispose();
      hv_TextHeight.Dispose();
      hv_RotCenterRow.Dispose();
      hv_RotCenterCol.Dispose();
      hv_Orientation.Dispose();
      hv_Colors.Dispose();

      throw HDevExpDefaultException;
    }
  }

  // Chapter: XLD / Creation
  // Short Description: Creates an arrow shaped XLD contour. 
  public void gen_arrow_contour_xld (out HObject ho_Arrow, HTuple hv_Row1, HTuple hv_Column1, 
      HTuple hv_Row2, HTuple hv_Column2, HTuple hv_HeadLength, HTuple hv_HeadWidth)
  {



    // Stack for temporary objects 
    HObject[] OTemp = new HObject[20];

    // Local iconic variables 

    HObject ho_TempArrow=null;

    // Local control variables 

    HTuple hv_Length = new HTuple(), hv_ZeroLengthIndices = new HTuple();
    HTuple hv_DR = new HTuple(), hv_DC = new HTuple(), hv_HalfHeadWidth = new HTuple();
    HTuple hv_RowP1 = new HTuple(), hv_ColP1 = new HTuple();
    HTuple hv_RowP2 = new HTuple(), hv_ColP2 = new HTuple();
    HTuple hv_Index = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Arrow);
    HOperatorSet.GenEmptyObj(out ho_TempArrow);
    try
    {
      //This procedure generates arrow shaped XLD contours,
      //pointing from (Row1, Column1) to (Row2, Column2).
      //If starting and end point are identical, a contour consisting
      //of a single point is returned.
      //
      //input parameteres:
      //Row1, Column1: Coordinates of the arrows' starting points
      //Row2, Column2: Coordinates of the arrows' end points
      //HeadLength, HeadWidth: Size of the arrow heads in pixels
      //
      //output parameter:
      //Arrow: The resulting XLD contour
      //
      //The input tuples Row1, Column1, Row2, and Column2 have to be of
      //the same length.
      //HeadLength and HeadWidth either have to be of the same length as
      //Row1, Column1, Row2, and Column2 or have to be a single element.
      //If one of the above restrictions is violated, an error will occur.
      //
      //
      //Init
      ho_Arrow.Dispose();
      HOperatorSet.GenEmptyObj(out ho_Arrow);
      //
      //Calculate the arrow length
      hv_Length.Dispose();
      HOperatorSet.DistancePp(hv_Row1, hv_Column1, hv_Row2, hv_Column2, out hv_Length);
      //
      //Mark arrows with identical start and end point
      //(set Length to -1 to avoid division-by-zero exception)
      hv_ZeroLengthIndices.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_ZeroLengthIndices = hv_Length.TupleFind(
          0);
      }
      if ((int)(new HTuple(hv_ZeroLengthIndices.TupleNotEqual(-1))) != 0)
      {
        if (hv_Length == null)
          hv_Length = new HTuple();
        hv_Length[hv_ZeroLengthIndices] = -1;
      }
      //
      //Calculate auxiliary variables.
      hv_DR.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_DR = (1.0*(hv_Row2-hv_Row1))/hv_Length;
      }
      hv_DC.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_DC = (1.0*(hv_Column2-hv_Column1))/hv_Length;
      }
      hv_HalfHeadWidth.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_HalfHeadWidth = hv_HeadWidth/2.0;
      }
      //
      //Calculate end points of the arrow head.
      hv_RowP1.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_RowP1 = (hv_Row1+((hv_Length-hv_HeadLength)*hv_DR))+(hv_HalfHeadWidth*hv_DC);
      }
      hv_ColP1.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_ColP1 = (hv_Column1+((hv_Length-hv_HeadLength)*hv_DC))-(hv_HalfHeadWidth*hv_DR);
      }
      hv_RowP2.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_RowP2 = (hv_Row1+((hv_Length-hv_HeadLength)*hv_DR))-(hv_HalfHeadWidth*hv_DC);
      }
      hv_ColP2.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_ColP2 = (hv_Column1+((hv_Length-hv_HeadLength)*hv_DC))+(hv_HalfHeadWidth*hv_DR);
      }
      //
      //Finally create output XLD contour for each input point pair
      for (hv_Index=0; (int)hv_Index<=(int)((new HTuple(hv_Length.TupleLength()))-1); hv_Index = (int)hv_Index + 1)
      {
        if ((int)(new HTuple(((hv_Length.TupleSelect(hv_Index))).TupleEqual(-1))) != 0)
        {
          //Create_ single points for arrows with identical start and end point
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          ho_TempArrow.Dispose();
          HOperatorSet.GenContourPolygonXld(out ho_TempArrow, hv_Row1.TupleSelect(
              hv_Index), hv_Column1.TupleSelect(hv_Index));
          }
        }
        else
        {
          //Create arrow contour
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          ho_TempArrow.Dispose();
          HOperatorSet.GenContourPolygonXld(out ho_TempArrow, ((((((((((hv_Row1.TupleSelect(
              hv_Index))).TupleConcat(hv_Row2.TupleSelect(hv_Index)))).TupleConcat(
              hv_RowP1.TupleSelect(hv_Index)))).TupleConcat(hv_Row2.TupleSelect(hv_Index)))).TupleConcat(
              hv_RowP2.TupleSelect(hv_Index)))).TupleConcat(hv_Row2.TupleSelect(hv_Index)), 
              ((((((((((hv_Column1.TupleSelect(hv_Index))).TupleConcat(hv_Column2.TupleSelect(
              hv_Index)))).TupleConcat(hv_ColP1.TupleSelect(hv_Index)))).TupleConcat(
              hv_Column2.TupleSelect(hv_Index)))).TupleConcat(hv_ColP2.TupleSelect(
              hv_Index)))).TupleConcat(hv_Column2.TupleSelect(hv_Index)));
          }
        }
        {
        HObject ExpTmpOutVar_0;
        HOperatorSet.ConcatObj(ho_Arrow, ho_TempArrow, out ExpTmpOutVar_0);
        ho_Arrow.Dispose();
        ho_Arrow = ExpTmpOutVar_0;
        }
      }
      ho_TempArrow.Dispose();

      hv_Length.Dispose();
      hv_ZeroLengthIndices.Dispose();
      hv_DR.Dispose();
      hv_DC.Dispose();
      hv_HalfHeadWidth.Dispose();
      hv_RowP1.Dispose();
      hv_ColP1.Dispose();
      hv_RowP2.Dispose();
      hv_ColP2.Dispose();
      hv_Index.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_TempArrow.Dispose();

      hv_Length.Dispose();
      hv_ZeroLengthIndices.Dispose();
      hv_DR.Dispose();
      hv_DC.Dispose();
      hv_HalfHeadWidth.Dispose();
      hv_RowP1.Dispose();
      hv_ColP1.Dispose();
      hv_RowP2.Dispose();
      hv_ColP2.Dispose();
      hv_Index.Dispose();

      throw HDevExpDefaultException;
    }
  }

  // Chapter: Calibration / Camera Parameters
  // Short Description: Generate a camera parameter tuple for an area scan camera with distortions modeled by the division model. 
  public void gen_cam_par_area_scan_division (HTuple hv_Focus, HTuple hv_Kappa, HTuple hv_Sx, 
      HTuple hv_Sy, HTuple hv_Cx, HTuple hv_Cy, HTuple hv_ImageWidth, HTuple hv_ImageHeight, 
      out HTuple hv_CameraParam)
  {



    // Local iconic variables 
    // Initialize local and output iconic variables 
    hv_CameraParam = new HTuple();
    //Generate a camera parameter tuple for an area scan camera
    //with distortions modeled by the division model.
    //
    hv_CameraParam.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_CameraParam = new HTuple();
    hv_CameraParam[0] = "area_scan_division";
    hv_CameraParam = hv_CameraParam.TupleConcat(hv_Focus, hv_Kappa, hv_Sx, hv_Sy, hv_Cx, hv_Cy, hv_ImageWidth, hv_ImageHeight);
    }


    return;
  }

  // Chapter: Calibration / Camera Parameters
  // Short Description: Get the value of a specified camera parameter from the camera parameter tuple. 
  public void get_cam_par_data (HTuple hv_CameraParam, HTuple hv_ParamName, out HTuple hv_ParamValue)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_CameraType = new HTuple(), hv_CameraParamNames = new HTuple();
    HTuple hv_Index = new HTuple(), hv_ParamNameInd = new HTuple();
    HTuple hv_I = new HTuple();
    // Initialize local and output iconic variables 
    hv_ParamValue = new HTuple();
    try
    {
      //get_cam_par_data returns in ParamValue the value of the
      //parameter that is given in ParamName from the tuple of
      //camera parameters that is given in CameraParam.
      //
      //Get the parameter names that correspond to the
      //elements in the input camera parameter tuple.
      hv_CameraType.Dispose();hv_CameraParamNames.Dispose();
      get_cam_par_names(hv_CameraParam, out hv_CameraType, out hv_CameraParamNames);
      //
      //Find the index of the requested camera data and return
      //the corresponding value.
      hv_ParamValue.Dispose();
      hv_ParamValue = new HTuple();
      for (hv_Index=0; (int)hv_Index<=(int)((new HTuple(hv_ParamName.TupleLength()
          ))-1); hv_Index = (int)hv_Index + 1)
      {
        hv_ParamNameInd.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_ParamNameInd = hv_ParamName.TupleSelect(
            hv_Index);
        }
        if ((int)(new HTuple(hv_ParamNameInd.TupleEqual("camera_type"))) != 0)
        {
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_ParamValue = hv_ParamValue.TupleConcat(
              hv_CameraType);
          hv_ParamValue.Dispose();
          hv_ParamValue = ExpTmpLocalVar_ParamValue;
          }
          }
          continue;
        }
        hv_I.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_I = hv_CameraParamNames.TupleFind(
            hv_ParamNameInd);
        }
        if ((int)(new HTuple(hv_I.TupleNotEqual(-1))) != 0)
        {
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_ParamValue = hv_ParamValue.TupleConcat(
              hv_CameraParam.TupleSelect(hv_I));
          hv_ParamValue.Dispose();
          hv_ParamValue = ExpTmpLocalVar_ParamValue;
          }
          }
        }
        else
        {
          throw new HalconException("Unknown camera parameter "+hv_ParamNameInd);
        }
      }

      hv_CameraType.Dispose();
      hv_CameraParamNames.Dispose();
      hv_Index.Dispose();
      hv_ParamNameInd.Dispose();
      hv_I.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_CameraType.Dispose();
      hv_CameraParamNames.Dispose();
      hv_Index.Dispose();
      hv_ParamNameInd.Dispose();
      hv_I.Dispose();

      throw HDevExpDefaultException;
    }
  }

  // Chapter: Calibration / Camera Parameters
  // Short Description: Get the names of the parameters in a camera parameter tuple. 
  public void get_cam_par_names (HTuple hv_CameraParam, out HTuple hv_CameraType, 
      out HTuple hv_ParamNames)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_CameraParamAreaScanDivision = new HTuple();
    HTuple hv_CameraParamAreaScanPolynomial = new HTuple();
    HTuple hv_CameraParamAreaScanTelecentricDivision = new HTuple();
    HTuple hv_CameraParamAreaScanTelecentricPolynomial = new HTuple();
    HTuple hv_CameraParamAreaScanTiltDivision = new HTuple();
    HTuple hv_CameraParamAreaScanTiltPolynomial = new HTuple();
    HTuple hv_CameraParamAreaScanImageSideTelecentricTiltDivision = new HTuple();
    HTuple hv_CameraParamAreaScanImageSideTelecentricTiltPolynomial = new HTuple();
    HTuple hv_CameraParamAreaScanBilateralTelecentricTiltDivision = new HTuple();
    HTuple hv_CameraParamAreaScanBilateralTelecentricTiltPolynomial = new HTuple();
    HTuple hv_CameraParamAreaScanObjectSideTelecentricTiltDivision = new HTuple();
    HTuple hv_CameraParamAreaScanObjectSideTelecentricTiltPolynomial = new HTuple();
    HTuple hv_CameraParamAreaScanHypercentricDivision = new HTuple();
    HTuple hv_CameraParamAreaScanHypercentricPolynomial = new HTuple();
    HTuple hv_CameraParamLinesScan = new HTuple(), hv_CameraParamAreaScanTiltDivisionLegacy = new HTuple();
    HTuple hv_CameraParamAreaScanTiltPolynomialLegacy = new HTuple();
    HTuple hv_CameraParamAreaScanTelecentricDivisionLegacy = new HTuple();
    HTuple hv_CameraParamAreaScanTelecentricPolynomialLegacy = new HTuple();
    HTuple hv_CameraParamAreaScanBilateralTelecentricTiltDivisionLegacy = new HTuple();
    HTuple hv_CameraParamAreaScanBilateralTelecentricTiltPolynomialLegacy = new HTuple();
    // Initialize local and output iconic variables 
    hv_CameraType = new HTuple();
    hv_ParamNames = new HTuple();
    try
    {
      //get_cam_par_names returns for each element in the camera
      //parameter tuple that is passed in CameraParam the name
      //of the respective camera parameter. The parameter names
      //are returned in ParamNames. Additionally, the camera
      //type is returned in CameraType. Alternatively, instead of
      //the camera parameters, the camera type can be passed in
      //CameraParam in form of one of the following strings:
      //  - 'area_scan_division'
      //  - 'area_scan_polynomial'
      //  - 'area_scan_tilt_division'
      //  - 'area_scan_tilt_polynomial'
      //  - 'area_scan_telecentric_division'
      //  - 'area_scan_telecentric_polynomial'
      //  - 'area_scan_tilt_bilateral_telecentric_division'
      //  - 'area_scan_tilt_bilateral_telecentric_polynomial'
      //  - 'area_scan_tilt_object_side_telecentric_division'
      //  - 'area_scan_tilt_object_side_telecentric_polynomial'
      //  - 'area_scan_hypercentric_division'
      //  - 'area_scan_hypercentric_polynomial'
      //  - 'line_scan'
      //
      hv_CameraParamAreaScanDivision.Dispose();
      hv_CameraParamAreaScanDivision = new HTuple();
      hv_CameraParamAreaScanDivision[0] = "focus";
      hv_CameraParamAreaScanDivision[1] = "kappa";
      hv_CameraParamAreaScanDivision[2] = "sx";
      hv_CameraParamAreaScanDivision[3] = "sy";
      hv_CameraParamAreaScanDivision[4] = "cx";
      hv_CameraParamAreaScanDivision[5] = "cy";
      hv_CameraParamAreaScanDivision[6] = "image_width";
      hv_CameraParamAreaScanDivision[7] = "image_height";
      hv_CameraParamAreaScanPolynomial.Dispose();
      hv_CameraParamAreaScanPolynomial = new HTuple();
      hv_CameraParamAreaScanPolynomial[0] = "focus";
      hv_CameraParamAreaScanPolynomial[1] = "k1";
      hv_CameraParamAreaScanPolynomial[2] = "k2";
      hv_CameraParamAreaScanPolynomial[3] = "k3";
      hv_CameraParamAreaScanPolynomial[4] = "p1";
      hv_CameraParamAreaScanPolynomial[5] = "p2";
      hv_CameraParamAreaScanPolynomial[6] = "sx";
      hv_CameraParamAreaScanPolynomial[7] = "sy";
      hv_CameraParamAreaScanPolynomial[8] = "cx";
      hv_CameraParamAreaScanPolynomial[9] = "cy";
      hv_CameraParamAreaScanPolynomial[10] = "image_width";
      hv_CameraParamAreaScanPolynomial[11] = "image_height";
      hv_CameraParamAreaScanTelecentricDivision.Dispose();
      hv_CameraParamAreaScanTelecentricDivision = new HTuple();
      hv_CameraParamAreaScanTelecentricDivision[0] = "magnification";
      hv_CameraParamAreaScanTelecentricDivision[1] = "kappa";
      hv_CameraParamAreaScanTelecentricDivision[2] = "sx";
      hv_CameraParamAreaScanTelecentricDivision[3] = "sy";
      hv_CameraParamAreaScanTelecentricDivision[4] = "cx";
      hv_CameraParamAreaScanTelecentricDivision[5] = "cy";
      hv_CameraParamAreaScanTelecentricDivision[6] = "image_width";
      hv_CameraParamAreaScanTelecentricDivision[7] = "image_height";
      hv_CameraParamAreaScanTelecentricPolynomial.Dispose();
      hv_CameraParamAreaScanTelecentricPolynomial = new HTuple();
      hv_CameraParamAreaScanTelecentricPolynomial[0] = "magnification";
      hv_CameraParamAreaScanTelecentricPolynomial[1] = "k1";
      hv_CameraParamAreaScanTelecentricPolynomial[2] = "k2";
      hv_CameraParamAreaScanTelecentricPolynomial[3] = "k3";
      hv_CameraParamAreaScanTelecentricPolynomial[4] = "p1";
      hv_CameraParamAreaScanTelecentricPolynomial[5] = "p2";
      hv_CameraParamAreaScanTelecentricPolynomial[6] = "sx";
      hv_CameraParamAreaScanTelecentricPolynomial[7] = "sy";
      hv_CameraParamAreaScanTelecentricPolynomial[8] = "cx";
      hv_CameraParamAreaScanTelecentricPolynomial[9] = "cy";
      hv_CameraParamAreaScanTelecentricPolynomial[10] = "image_width";
      hv_CameraParamAreaScanTelecentricPolynomial[11] = "image_height";
      hv_CameraParamAreaScanTiltDivision.Dispose();
      hv_CameraParamAreaScanTiltDivision = new HTuple();
      hv_CameraParamAreaScanTiltDivision[0] = "focus";
      hv_CameraParamAreaScanTiltDivision[1] = "kappa";
      hv_CameraParamAreaScanTiltDivision[2] = "image_plane_dist";
      hv_CameraParamAreaScanTiltDivision[3] = "tilt";
      hv_CameraParamAreaScanTiltDivision[4] = "rot";
      hv_CameraParamAreaScanTiltDivision[5] = "sx";
      hv_CameraParamAreaScanTiltDivision[6] = "sy";
      hv_CameraParamAreaScanTiltDivision[7] = "cx";
      hv_CameraParamAreaScanTiltDivision[8] = "cy";
      hv_CameraParamAreaScanTiltDivision[9] = "image_width";
      hv_CameraParamAreaScanTiltDivision[10] = "image_height";
      hv_CameraParamAreaScanTiltPolynomial.Dispose();
      hv_CameraParamAreaScanTiltPolynomial = new HTuple();
      hv_CameraParamAreaScanTiltPolynomial[0] = "focus";
      hv_CameraParamAreaScanTiltPolynomial[1] = "k1";
      hv_CameraParamAreaScanTiltPolynomial[2] = "k2";
      hv_CameraParamAreaScanTiltPolynomial[3] = "k3";
      hv_CameraParamAreaScanTiltPolynomial[4] = "p1";
      hv_CameraParamAreaScanTiltPolynomial[5] = "p2";
      hv_CameraParamAreaScanTiltPolynomial[6] = "image_plane_dist";
      hv_CameraParamAreaScanTiltPolynomial[7] = "tilt";
      hv_CameraParamAreaScanTiltPolynomial[8] = "rot";
      hv_CameraParamAreaScanTiltPolynomial[9] = "sx";
      hv_CameraParamAreaScanTiltPolynomial[10] = "sy";
      hv_CameraParamAreaScanTiltPolynomial[11] = "cx";
      hv_CameraParamAreaScanTiltPolynomial[12] = "cy";
      hv_CameraParamAreaScanTiltPolynomial[13] = "image_width";
      hv_CameraParamAreaScanTiltPolynomial[14] = "image_height";
      hv_CameraParamAreaScanImageSideTelecentricTiltDivision.Dispose();
      hv_CameraParamAreaScanImageSideTelecentricTiltDivision = new HTuple();
      hv_CameraParamAreaScanImageSideTelecentricTiltDivision[0] = "focus";
      hv_CameraParamAreaScanImageSideTelecentricTiltDivision[1] = "kappa";
      hv_CameraParamAreaScanImageSideTelecentricTiltDivision[2] = "tilt";
      hv_CameraParamAreaScanImageSideTelecentricTiltDivision[3] = "rot";
      hv_CameraParamAreaScanImageSideTelecentricTiltDivision[4] = "sx";
      hv_CameraParamAreaScanImageSideTelecentricTiltDivision[5] = "sy";
      hv_CameraParamAreaScanImageSideTelecentricTiltDivision[6] = "cx";
      hv_CameraParamAreaScanImageSideTelecentricTiltDivision[7] = "cy";
      hv_CameraParamAreaScanImageSideTelecentricTiltDivision[8] = "image_width";
      hv_CameraParamAreaScanImageSideTelecentricTiltDivision[9] = "image_height";
      hv_CameraParamAreaScanImageSideTelecentricTiltPolynomial.Dispose();
      hv_CameraParamAreaScanImageSideTelecentricTiltPolynomial = new HTuple();
      hv_CameraParamAreaScanImageSideTelecentricTiltPolynomial[0] = "focus";
      hv_CameraParamAreaScanImageSideTelecentricTiltPolynomial[1] = "k1";
      hv_CameraParamAreaScanImageSideTelecentricTiltPolynomial[2] = "k2";
      hv_CameraParamAreaScanImageSideTelecentricTiltPolynomial[3] = "k3";
      hv_CameraParamAreaScanImageSideTelecentricTiltPolynomial[4] = "p1";
      hv_CameraParamAreaScanImageSideTelecentricTiltPolynomial[5] = "p2";
      hv_CameraParamAreaScanImageSideTelecentricTiltPolynomial[6] = "tilt";
      hv_CameraParamAreaScanImageSideTelecentricTiltPolynomial[7] = "rot";
      hv_CameraParamAreaScanImageSideTelecentricTiltPolynomial[8] = "sx";
      hv_CameraParamAreaScanImageSideTelecentricTiltPolynomial[9] = "sy";
      hv_CameraParamAreaScanImageSideTelecentricTiltPolynomial[10] = "cx";
      hv_CameraParamAreaScanImageSideTelecentricTiltPolynomial[11] = "cy";
      hv_CameraParamAreaScanImageSideTelecentricTiltPolynomial[12] = "image_width";
      hv_CameraParamAreaScanImageSideTelecentricTiltPolynomial[13] = "image_height";
      hv_CameraParamAreaScanBilateralTelecentricTiltDivision.Dispose();
      hv_CameraParamAreaScanBilateralTelecentricTiltDivision = new HTuple();
      hv_CameraParamAreaScanBilateralTelecentricTiltDivision[0] = "magnification";
      hv_CameraParamAreaScanBilateralTelecentricTiltDivision[1] = "kappa";
      hv_CameraParamAreaScanBilateralTelecentricTiltDivision[2] = "tilt";
      hv_CameraParamAreaScanBilateralTelecentricTiltDivision[3] = "rot";
      hv_CameraParamAreaScanBilateralTelecentricTiltDivision[4] = "sx";
      hv_CameraParamAreaScanBilateralTelecentricTiltDivision[5] = "sy";
      hv_CameraParamAreaScanBilateralTelecentricTiltDivision[6] = "cx";
      hv_CameraParamAreaScanBilateralTelecentricTiltDivision[7] = "cy";
      hv_CameraParamAreaScanBilateralTelecentricTiltDivision[8] = "image_width";
      hv_CameraParamAreaScanBilateralTelecentricTiltDivision[9] = "image_height";
      hv_CameraParamAreaScanBilateralTelecentricTiltPolynomial.Dispose();
      hv_CameraParamAreaScanBilateralTelecentricTiltPolynomial = new HTuple();
      hv_CameraParamAreaScanBilateralTelecentricTiltPolynomial[0] = "magnification";
      hv_CameraParamAreaScanBilateralTelecentricTiltPolynomial[1] = "k1";
      hv_CameraParamAreaScanBilateralTelecentricTiltPolynomial[2] = "k2";
      hv_CameraParamAreaScanBilateralTelecentricTiltPolynomial[3] = "k3";
      hv_CameraParamAreaScanBilateralTelecentricTiltPolynomial[4] = "p1";
      hv_CameraParamAreaScanBilateralTelecentricTiltPolynomial[5] = "p2";
      hv_CameraParamAreaScanBilateralTelecentricTiltPolynomial[6] = "tilt";
      hv_CameraParamAreaScanBilateralTelecentricTiltPolynomial[7] = "rot";
      hv_CameraParamAreaScanBilateralTelecentricTiltPolynomial[8] = "sx";
      hv_CameraParamAreaScanBilateralTelecentricTiltPolynomial[9] = "sy";
      hv_CameraParamAreaScanBilateralTelecentricTiltPolynomial[10] = "cx";
      hv_CameraParamAreaScanBilateralTelecentricTiltPolynomial[11] = "cy";
      hv_CameraParamAreaScanBilateralTelecentricTiltPolynomial[12] = "image_width";
      hv_CameraParamAreaScanBilateralTelecentricTiltPolynomial[13] = "image_height";
      hv_CameraParamAreaScanObjectSideTelecentricTiltDivision.Dispose();
      hv_CameraParamAreaScanObjectSideTelecentricTiltDivision = new HTuple();
      hv_CameraParamAreaScanObjectSideTelecentricTiltDivision[0] = "magnification";
      hv_CameraParamAreaScanObjectSideTelecentricTiltDivision[1] = "kappa";
      hv_CameraParamAreaScanObjectSideTelecentricTiltDivision[2] = "image_plane_dist";
      hv_CameraParamAreaScanObjectSideTelecentricTiltDivision[3] = "tilt";
      hv_CameraParamAreaScanObjectSideTelecentricTiltDivision[4] = "rot";
      hv_CameraParamAreaScanObjectSideTelecentricTiltDivision[5] = "sx";
      hv_CameraParamAreaScanObjectSideTelecentricTiltDivision[6] = "sy";
      hv_CameraParamAreaScanObjectSideTelecentricTiltDivision[7] = "cx";
      hv_CameraParamAreaScanObjectSideTelecentricTiltDivision[8] = "cy";
      hv_CameraParamAreaScanObjectSideTelecentricTiltDivision[9] = "image_width";
      hv_CameraParamAreaScanObjectSideTelecentricTiltDivision[10] = "image_height";
      hv_CameraParamAreaScanObjectSideTelecentricTiltPolynomial.Dispose();
      hv_CameraParamAreaScanObjectSideTelecentricTiltPolynomial = new HTuple();
      hv_CameraParamAreaScanObjectSideTelecentricTiltPolynomial[0] = "magnification";
      hv_CameraParamAreaScanObjectSideTelecentricTiltPolynomial[1] = "k1";
      hv_CameraParamAreaScanObjectSideTelecentricTiltPolynomial[2] = "k2";
      hv_CameraParamAreaScanObjectSideTelecentricTiltPolynomial[3] = "k3";
      hv_CameraParamAreaScanObjectSideTelecentricTiltPolynomial[4] = "p1";
      hv_CameraParamAreaScanObjectSideTelecentricTiltPolynomial[5] = "p2";
      hv_CameraParamAreaScanObjectSideTelecentricTiltPolynomial[6] = "image_plane_dist";
      hv_CameraParamAreaScanObjectSideTelecentricTiltPolynomial[7] = "tilt";
      hv_CameraParamAreaScanObjectSideTelecentricTiltPolynomial[8] = "rot";
      hv_CameraParamAreaScanObjectSideTelecentricTiltPolynomial[9] = "sx";
      hv_CameraParamAreaScanObjectSideTelecentricTiltPolynomial[10] = "sy";
      hv_CameraParamAreaScanObjectSideTelecentricTiltPolynomial[11] = "cx";
      hv_CameraParamAreaScanObjectSideTelecentricTiltPolynomial[12] = "cy";
      hv_CameraParamAreaScanObjectSideTelecentricTiltPolynomial[13] = "image_width";
      hv_CameraParamAreaScanObjectSideTelecentricTiltPolynomial[14] = "image_height";
      hv_CameraParamAreaScanHypercentricDivision.Dispose();
      hv_CameraParamAreaScanHypercentricDivision = new HTuple();
      hv_CameraParamAreaScanHypercentricDivision[0] = "focus";
      hv_CameraParamAreaScanHypercentricDivision[1] = "kappa";
      hv_CameraParamAreaScanHypercentricDivision[2] = "sx";
      hv_CameraParamAreaScanHypercentricDivision[3] = "sy";
      hv_CameraParamAreaScanHypercentricDivision[4] = "cx";
      hv_CameraParamAreaScanHypercentricDivision[5] = "cy";
      hv_CameraParamAreaScanHypercentricDivision[6] = "image_width";
      hv_CameraParamAreaScanHypercentricDivision[7] = "image_height";
      hv_CameraParamAreaScanHypercentricPolynomial.Dispose();
      hv_CameraParamAreaScanHypercentricPolynomial = new HTuple();
      hv_CameraParamAreaScanHypercentricPolynomial[0] = "focus";
      hv_CameraParamAreaScanHypercentricPolynomial[1] = "k1";
      hv_CameraParamAreaScanHypercentricPolynomial[2] = "k2";
      hv_CameraParamAreaScanHypercentricPolynomial[3] = "k3";
      hv_CameraParamAreaScanHypercentricPolynomial[4] = "p1";
      hv_CameraParamAreaScanHypercentricPolynomial[5] = "p2";
      hv_CameraParamAreaScanHypercentricPolynomial[6] = "sx";
      hv_CameraParamAreaScanHypercentricPolynomial[7] = "sy";
      hv_CameraParamAreaScanHypercentricPolynomial[8] = "cx";
      hv_CameraParamAreaScanHypercentricPolynomial[9] = "cy";
      hv_CameraParamAreaScanHypercentricPolynomial[10] = "image_width";
      hv_CameraParamAreaScanHypercentricPolynomial[11] = "image_height";
      hv_CameraParamLinesScan.Dispose();
      hv_CameraParamLinesScan = new HTuple();
      hv_CameraParamLinesScan[0] = "focus";
      hv_CameraParamLinesScan[1] = "kappa";
      hv_CameraParamLinesScan[2] = "sx";
      hv_CameraParamLinesScan[3] = "sy";
      hv_CameraParamLinesScan[4] = "cx";
      hv_CameraParamLinesScan[5] = "cy";
      hv_CameraParamLinesScan[6] = "image_width";
      hv_CameraParamLinesScan[7] = "image_height";
      hv_CameraParamLinesScan[8] = "vx";
      hv_CameraParamLinesScan[9] = "vy";
      hv_CameraParamLinesScan[10] = "vz";
      //Legacy parameter names
      hv_CameraParamAreaScanTiltDivisionLegacy.Dispose();
      hv_CameraParamAreaScanTiltDivisionLegacy = new HTuple();
      hv_CameraParamAreaScanTiltDivisionLegacy[0] = "focus";
      hv_CameraParamAreaScanTiltDivisionLegacy[1] = "kappa";
      hv_CameraParamAreaScanTiltDivisionLegacy[2] = "tilt";
      hv_CameraParamAreaScanTiltDivisionLegacy[3] = "rot";
      hv_CameraParamAreaScanTiltDivisionLegacy[4] = "sx";
      hv_CameraParamAreaScanTiltDivisionLegacy[5] = "sy";
      hv_CameraParamAreaScanTiltDivisionLegacy[6] = "cx";
      hv_CameraParamAreaScanTiltDivisionLegacy[7] = "cy";
      hv_CameraParamAreaScanTiltDivisionLegacy[8] = "image_width";
      hv_CameraParamAreaScanTiltDivisionLegacy[9] = "image_height";
      hv_CameraParamAreaScanTiltPolynomialLegacy.Dispose();
      hv_CameraParamAreaScanTiltPolynomialLegacy = new HTuple();
      hv_CameraParamAreaScanTiltPolynomialLegacy[0] = "focus";
      hv_CameraParamAreaScanTiltPolynomialLegacy[1] = "k1";
      hv_CameraParamAreaScanTiltPolynomialLegacy[2] = "k2";
      hv_CameraParamAreaScanTiltPolynomialLegacy[3] = "k3";
      hv_CameraParamAreaScanTiltPolynomialLegacy[4] = "p1";
      hv_CameraParamAreaScanTiltPolynomialLegacy[5] = "p2";
      hv_CameraParamAreaScanTiltPolynomialLegacy[6] = "tilt";
      hv_CameraParamAreaScanTiltPolynomialLegacy[7] = "rot";
      hv_CameraParamAreaScanTiltPolynomialLegacy[8] = "sx";
      hv_CameraParamAreaScanTiltPolynomialLegacy[9] = "sy";
      hv_CameraParamAreaScanTiltPolynomialLegacy[10] = "cx";
      hv_CameraParamAreaScanTiltPolynomialLegacy[11] = "cy";
      hv_CameraParamAreaScanTiltPolynomialLegacy[12] = "image_width";
      hv_CameraParamAreaScanTiltPolynomialLegacy[13] = "image_height";
      hv_CameraParamAreaScanTelecentricDivisionLegacy.Dispose();
      hv_CameraParamAreaScanTelecentricDivisionLegacy = new HTuple();
      hv_CameraParamAreaScanTelecentricDivisionLegacy[0] = "focus";
      hv_CameraParamAreaScanTelecentricDivisionLegacy[1] = "kappa";
      hv_CameraParamAreaScanTelecentricDivisionLegacy[2] = "sx";
      hv_CameraParamAreaScanTelecentricDivisionLegacy[3] = "sy";
      hv_CameraParamAreaScanTelecentricDivisionLegacy[4] = "cx";
      hv_CameraParamAreaScanTelecentricDivisionLegacy[5] = "cy";
      hv_CameraParamAreaScanTelecentricDivisionLegacy[6] = "image_width";
      hv_CameraParamAreaScanTelecentricDivisionLegacy[7] = "image_height";
      hv_CameraParamAreaScanTelecentricPolynomialLegacy.Dispose();
      hv_CameraParamAreaScanTelecentricPolynomialLegacy = new HTuple();
      hv_CameraParamAreaScanTelecentricPolynomialLegacy[0] = "focus";
      hv_CameraParamAreaScanTelecentricPolynomialLegacy[1] = "k1";
      hv_CameraParamAreaScanTelecentricPolynomialLegacy[2] = "k2";
      hv_CameraParamAreaScanTelecentricPolynomialLegacy[3] = "k3";
      hv_CameraParamAreaScanTelecentricPolynomialLegacy[4] = "p1";
      hv_CameraParamAreaScanTelecentricPolynomialLegacy[5] = "p2";
      hv_CameraParamAreaScanTelecentricPolynomialLegacy[6] = "sx";
      hv_CameraParamAreaScanTelecentricPolynomialLegacy[7] = "sy";
      hv_CameraParamAreaScanTelecentricPolynomialLegacy[8] = "cx";
      hv_CameraParamAreaScanTelecentricPolynomialLegacy[9] = "cy";
      hv_CameraParamAreaScanTelecentricPolynomialLegacy[10] = "image_width";
      hv_CameraParamAreaScanTelecentricPolynomialLegacy[11] = "image_height";
      hv_CameraParamAreaScanBilateralTelecentricTiltDivisionLegacy.Dispose();
      hv_CameraParamAreaScanBilateralTelecentricTiltDivisionLegacy = new HTuple();
      hv_CameraParamAreaScanBilateralTelecentricTiltDivisionLegacy[0] = "focus";
      hv_CameraParamAreaScanBilateralTelecentricTiltDivisionLegacy[1] = "kappa";
      hv_CameraParamAreaScanBilateralTelecentricTiltDivisionLegacy[2] = "tilt";
      hv_CameraParamAreaScanBilateralTelecentricTiltDivisionLegacy[3] = "rot";
      hv_CameraParamAreaScanBilateralTelecentricTiltDivisionLegacy[4] = "sx";
      hv_CameraParamAreaScanBilateralTelecentricTiltDivisionLegacy[5] = "sy";
      hv_CameraParamAreaScanBilateralTelecentricTiltDivisionLegacy[6] = "cx";
      hv_CameraParamAreaScanBilateralTelecentricTiltDivisionLegacy[7] = "cy";
      hv_CameraParamAreaScanBilateralTelecentricTiltDivisionLegacy[8] = "image_width";
      hv_CameraParamAreaScanBilateralTelecentricTiltDivisionLegacy[9] = "image_height";
      hv_CameraParamAreaScanBilateralTelecentricTiltPolynomialLegacy.Dispose();
      hv_CameraParamAreaScanBilateralTelecentricTiltPolynomialLegacy = new HTuple();
      hv_CameraParamAreaScanBilateralTelecentricTiltPolynomialLegacy[0] = "focus";
      hv_CameraParamAreaScanBilateralTelecentricTiltPolynomialLegacy[1] = "k1";
      hv_CameraParamAreaScanBilateralTelecentricTiltPolynomialLegacy[2] = "k2";
      hv_CameraParamAreaScanBilateralTelecentricTiltPolynomialLegacy[3] = "k3";
      hv_CameraParamAreaScanBilateralTelecentricTiltPolynomialLegacy[4] = "p1";
      hv_CameraParamAreaScanBilateralTelecentricTiltPolynomialLegacy[5] = "p2";
      hv_CameraParamAreaScanBilateralTelecentricTiltPolynomialLegacy[6] = "tilt";
      hv_CameraParamAreaScanBilateralTelecentricTiltPolynomialLegacy[7] = "rot";
      hv_CameraParamAreaScanBilateralTelecentricTiltPolynomialLegacy[8] = "sx";
      hv_CameraParamAreaScanBilateralTelecentricTiltPolynomialLegacy[9] = "sy";
      hv_CameraParamAreaScanBilateralTelecentricTiltPolynomialLegacy[10] = "cx";
      hv_CameraParamAreaScanBilateralTelecentricTiltPolynomialLegacy[11] = "cy";
      hv_CameraParamAreaScanBilateralTelecentricTiltPolynomialLegacy[12] = "image_width";
      hv_CameraParamAreaScanBilateralTelecentricTiltPolynomialLegacy[13] = "image_height";
      //
      //If the camera type is passed in CameraParam
      if ((int)((new HTuple((new HTuple(hv_CameraParam.TupleLength())).TupleEqual(
          1))).TupleAnd(((hv_CameraParam.TupleSelect(0))).TupleIsString())) != 0)
      {
        hv_CameraType.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_CameraType = hv_CameraParam.TupleSelect(
            0);
        }
        if ((int)(new HTuple(hv_CameraType.TupleEqual("area_scan_division"))) != 0)
        {
          hv_ParamNames.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_ParamNames = new HTuple();
          hv_ParamNames[0] = "camera_type";
          hv_ParamNames = hv_ParamNames.TupleConcat(hv_CameraParamAreaScanDivision);
          }
        }
        else if ((int)(new HTuple(hv_CameraType.TupleEqual("area_scan_polynomial"))) != 0)
        {
          hv_ParamNames.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_ParamNames = new HTuple();
          hv_ParamNames[0] = "camera_type";
          hv_ParamNames = hv_ParamNames.TupleConcat(hv_CameraParamAreaScanPolynomial);
          }
        }
        else if ((int)(new HTuple(hv_CameraType.TupleEqual("area_scan_telecentric_division"))) != 0)
        {
          hv_ParamNames.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_ParamNames = new HTuple();
          hv_ParamNames[0] = "camera_type";
          hv_ParamNames = hv_ParamNames.TupleConcat(hv_CameraParamAreaScanTelecentricDivision);
          }
        }
        else if ((int)(new HTuple(hv_CameraType.TupleEqual("area_scan_telecentric_polynomial"))) != 0)
        {
          hv_ParamNames.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_ParamNames = new HTuple();
          hv_ParamNames[0] = "camera_type";
          hv_ParamNames = hv_ParamNames.TupleConcat(hv_CameraParamAreaScanTelecentricPolynomial);
          }
        }
        else if ((int)(new HTuple(hv_CameraType.TupleEqual("area_scan_tilt_division"))) != 0)
        {
          hv_ParamNames.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_ParamNames = new HTuple();
          hv_ParamNames[0] = "camera_type";
          hv_ParamNames = hv_ParamNames.TupleConcat(hv_CameraParamAreaScanTiltDivision);
          }
        }
        else if ((int)(new HTuple(hv_CameraType.TupleEqual("area_scan_tilt_polynomial"))) != 0)
        {
          hv_ParamNames.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_ParamNames = new HTuple();
          hv_ParamNames[0] = "camera_type";
          hv_ParamNames = hv_ParamNames.TupleConcat(hv_CameraParamAreaScanTiltPolynomial);
          }
        }
        else if ((int)(new HTuple(hv_CameraType.TupleEqual("area_scan_tilt_image_side_telecentric_division"))) != 0)
        {
          hv_ParamNames.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_ParamNames = new HTuple();
          hv_ParamNames[0] = "camera_type";
          hv_ParamNames = hv_ParamNames.TupleConcat(hv_CameraParamAreaScanImageSideTelecentricTiltDivision);
          }
        }
        else if ((int)(new HTuple(hv_CameraType.TupleEqual("area_scan_tilt_image_side_telecentric_polynomial"))) != 0)
        {
          hv_ParamNames.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_ParamNames = new HTuple();
          hv_ParamNames[0] = "camera_type";
          hv_ParamNames = hv_ParamNames.TupleConcat(hv_CameraParamAreaScanImageSideTelecentricTiltPolynomial);
          }
        }
        else if ((int)(new HTuple(hv_CameraType.TupleEqual("area_scan_tilt_bilateral_telecentric_division"))) != 0)
        {
          hv_ParamNames.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_ParamNames = new HTuple();
          hv_ParamNames[0] = "camera_type";
          hv_ParamNames = hv_ParamNames.TupleConcat(hv_CameraParamAreaScanBilateralTelecentricTiltDivision);
          }
        }
        else if ((int)(new HTuple(hv_CameraType.TupleEqual("area_scan_tilt_bilateral_telecentric_polynomial"))) != 0)
        {
          hv_ParamNames.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_ParamNames = new HTuple();
          hv_ParamNames[0] = "camera_type";
          hv_ParamNames = hv_ParamNames.TupleConcat(hv_CameraParamAreaScanBilateralTelecentricTiltPolynomial);
          }
        }
        else if ((int)(new HTuple(hv_CameraType.TupleEqual("area_scan_tilt_object_side_telecentric_division"))) != 0)
        {
          hv_ParamNames.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_ParamNames = new HTuple();
          hv_ParamNames[0] = "camera_type";
          hv_ParamNames = hv_ParamNames.TupleConcat(hv_CameraParamAreaScanObjectSideTelecentricTiltDivision);
          }
        }
        else if ((int)(new HTuple(hv_CameraType.TupleEqual("area_scan_tilt_object_side_telecentric_polynomial"))) != 0)
        {
          hv_ParamNames.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_ParamNames = new HTuple();
          hv_ParamNames[0] = "camera_type";
          hv_ParamNames = hv_ParamNames.TupleConcat(hv_CameraParamAreaScanObjectSideTelecentricTiltPolynomial);
          }
        }
        else if ((int)(new HTuple(hv_CameraType.TupleEqual("area_scan_hypercentric_division"))) != 0)
        {
          hv_ParamNames.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_ParamNames = new HTuple();
          hv_ParamNames[0] = "camera_type";
          hv_ParamNames = hv_ParamNames.TupleConcat(hv_CameraParamAreaScanHypercentricDivision);
          }
        }
        else if ((int)(new HTuple(hv_CameraType.TupleEqual("area_scan_hypercentric_polynomial"))) != 0)
        {
          hv_ParamNames.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_ParamNames = new HTuple();
          hv_ParamNames[0] = "camera_type";
          hv_ParamNames = hv_ParamNames.TupleConcat(hv_CameraParamAreaScanHypercentricPolynomial);
          }
        }
        else if ((int)(new HTuple(hv_CameraType.TupleEqual("line_scan"))) != 0)
        {
          hv_ParamNames.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_ParamNames = new HTuple();
          hv_ParamNames[0] = "camera_type";
          hv_ParamNames = hv_ParamNames.TupleConcat(hv_CameraParamLinesScan);
          }
        }
        else
        {
          throw new HalconException(("Unknown camera type '"+hv_CameraType)+"' passed in CameraParam.");
        }

        hv_CameraParamAreaScanDivision.Dispose();
        hv_CameraParamAreaScanPolynomial.Dispose();
        hv_CameraParamAreaScanTelecentricDivision.Dispose();
        hv_CameraParamAreaScanTelecentricPolynomial.Dispose();
        hv_CameraParamAreaScanTiltDivision.Dispose();
        hv_CameraParamAreaScanTiltPolynomial.Dispose();
        hv_CameraParamAreaScanImageSideTelecentricTiltDivision.Dispose();
        hv_CameraParamAreaScanImageSideTelecentricTiltPolynomial.Dispose();
        hv_CameraParamAreaScanBilateralTelecentricTiltDivision.Dispose();
        hv_CameraParamAreaScanBilateralTelecentricTiltPolynomial.Dispose();
        hv_CameraParamAreaScanObjectSideTelecentricTiltDivision.Dispose();
        hv_CameraParamAreaScanObjectSideTelecentricTiltPolynomial.Dispose();
        hv_CameraParamAreaScanHypercentricDivision.Dispose();
        hv_CameraParamAreaScanHypercentricPolynomial.Dispose();
        hv_CameraParamLinesScan.Dispose();
        hv_CameraParamAreaScanTiltDivisionLegacy.Dispose();
        hv_CameraParamAreaScanTiltPolynomialLegacy.Dispose();
        hv_CameraParamAreaScanTelecentricDivisionLegacy.Dispose();
        hv_CameraParamAreaScanTelecentricPolynomialLegacy.Dispose();
        hv_CameraParamAreaScanBilateralTelecentricTiltDivisionLegacy.Dispose();
        hv_CameraParamAreaScanBilateralTelecentricTiltPolynomialLegacy.Dispose();

        return;
      }
      //
      //If the camera parameters are passed in CameraParam
      if ((int)(((((hv_CameraParam.TupleSelect(0))).TupleIsString())).TupleNot()) != 0)
      {
        //Format of camera parameters for HALCON 12 and earlier
        switch ((new HTuple(hv_CameraParam.TupleLength()
            )).I)
        {
          //
          //Area Scan
        case 8:
          //CameraType: 'area_scan_division' or 'area_scan_telecentric_division'
          if ((int)(new HTuple(((hv_CameraParam.TupleSelect(0))).TupleNotEqual(0.0))) != 0)
          {
            hv_ParamNames.Dispose();
            hv_ParamNames = new HTuple(hv_CameraParamAreaScanDivision);
            hv_CameraType.Dispose();
            hv_CameraType = "area_scan_division";
          }
          else
          {
            hv_ParamNames.Dispose();
            hv_ParamNames = new HTuple(hv_CameraParamAreaScanTelecentricDivisionLegacy);
            hv_CameraType.Dispose();
            hv_CameraType = "area_scan_telecentric_division";
          }
          break;
        case 10:
          //CameraType: 'area_scan_tilt_division' or 'area_scan_telecentric_tilt_division'
          if ((int)(new HTuple(((hv_CameraParam.TupleSelect(0))).TupleNotEqual(0.0))) != 0)
          {
            hv_ParamNames.Dispose();
            hv_ParamNames = new HTuple(hv_CameraParamAreaScanTiltDivisionLegacy);
            hv_CameraType.Dispose();
            hv_CameraType = "area_scan_tilt_division";
          }
          else
          {
            hv_ParamNames.Dispose();
            hv_ParamNames = new HTuple(hv_CameraParamAreaScanBilateralTelecentricTiltDivisionLegacy);
            hv_CameraType.Dispose();
            hv_CameraType = "area_scan_tilt_bilateral_telecentric_division";
          }
          break;
        case 12:
          //CameraType: 'area_scan_polynomial' or 'area_scan_telecentric_polynomial'
          if ((int)(new HTuple(((hv_CameraParam.TupleSelect(0))).TupleNotEqual(0.0))) != 0)
          {
            hv_ParamNames.Dispose();
            hv_ParamNames = new HTuple(hv_CameraParamAreaScanPolynomial);
            hv_CameraType.Dispose();
            hv_CameraType = "area_scan_polynomial";
          }
          else
          {
            hv_ParamNames.Dispose();
            hv_ParamNames = new HTuple(hv_CameraParamAreaScanTelecentricPolynomialLegacy);
            hv_CameraType.Dispose();
            hv_CameraType = "area_scan_telecentric_polynomial";
          }
          break;
        case 14:
          //CameraType: 'area_scan_tilt_polynomial' or 'area_scan_telecentric_tilt_polynomial'
          if ((int)(new HTuple(((hv_CameraParam.TupleSelect(0))).TupleNotEqual(0.0))) != 0)
          {
            hv_ParamNames.Dispose();
            hv_ParamNames = new HTuple(hv_CameraParamAreaScanTiltPolynomialLegacy);
            hv_CameraType.Dispose();
            hv_CameraType = "area_scan_tilt_polynomial";
          }
          else
          {
            hv_ParamNames.Dispose();
            hv_ParamNames = new HTuple(hv_CameraParamAreaScanBilateralTelecentricTiltPolynomialLegacy);
            hv_CameraType.Dispose();
            hv_CameraType = "area_scan_tilt_bilateral_telecentric_polynomial";
          }
          break;
          //
          //Line Scan
        case 11:
          //CameraType: 'line_scan'
          hv_ParamNames.Dispose();
          hv_ParamNames = new HTuple(hv_CameraParamLinesScan);
          hv_CameraType.Dispose();
          hv_CameraType = "line_scan";
          break;
        default:
          throw new HalconException("Wrong number of values in CameraParam.");
          break;
        }
      }
      else
      {
        //Format of camera parameters since HALCON 13
        hv_CameraType.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_CameraType = hv_CameraParam.TupleSelect(
            0);
        }
        if ((int)(new HTuple(hv_CameraType.TupleEqual("area_scan_division"))) != 0)
        {
          if ((int)(new HTuple((new HTuple(hv_CameraParam.TupleLength())).TupleNotEqual(
              9))) != 0)
          {
            throw new HalconException("Wrong number of values in CameraParam.");
          }
          hv_ParamNames.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_ParamNames = new HTuple();
          hv_ParamNames[0] = "camera_type";
          hv_ParamNames = hv_ParamNames.TupleConcat(hv_CameraParamAreaScanDivision);
          }
        }
        else if ((int)(new HTuple(hv_CameraType.TupleEqual("area_scan_polynomial"))) != 0)
        {
          if ((int)(new HTuple((new HTuple(hv_CameraParam.TupleLength())).TupleNotEqual(
              13))) != 0)
          {
            throw new HalconException("Wrong number of values in CameraParam.");
          }
          hv_ParamNames.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_ParamNames = new HTuple();
          hv_ParamNames[0] = "camera_type";
          hv_ParamNames = hv_ParamNames.TupleConcat(hv_CameraParamAreaScanPolynomial);
          }
        }
        else if ((int)(new HTuple(hv_CameraType.TupleEqual("area_scan_telecentric_division"))) != 0)
        {
          if ((int)(new HTuple((new HTuple(hv_CameraParam.TupleLength())).TupleNotEqual(
              9))) != 0)
          {
            throw new HalconException("Wrong number of values in CameraParam.");
          }
          hv_ParamNames.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_ParamNames = new HTuple();
          hv_ParamNames[0] = "camera_type";
          hv_ParamNames = hv_ParamNames.TupleConcat(hv_CameraParamAreaScanTelecentricDivision);
          }
        }
        else if ((int)(new HTuple(hv_CameraType.TupleEqual("area_scan_telecentric_polynomial"))) != 0)
        {
          if ((int)(new HTuple((new HTuple(hv_CameraParam.TupleLength())).TupleNotEqual(
              13))) != 0)
          {
            throw new HalconException("Wrong number of values in CameraParam.");
          }
          hv_ParamNames.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_ParamNames = new HTuple();
          hv_ParamNames[0] = "camera_type";
          hv_ParamNames = hv_ParamNames.TupleConcat(hv_CameraParamAreaScanTelecentricPolynomial);
          }
        }
        else if ((int)(new HTuple(hv_CameraType.TupleEqual("area_scan_tilt_division"))) != 0)
        {
          if ((int)(new HTuple((new HTuple(hv_CameraParam.TupleLength())).TupleNotEqual(
              12))) != 0)
          {
            throw new HalconException("Wrong number of values in CameraParam.");
          }
          hv_ParamNames.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_ParamNames = new HTuple();
          hv_ParamNames[0] = "camera_type";
          hv_ParamNames = hv_ParamNames.TupleConcat(hv_CameraParamAreaScanTiltDivision);
          }
        }
        else if ((int)(new HTuple(hv_CameraType.TupleEqual("area_scan_tilt_polynomial"))) != 0)
        {
          if ((int)(new HTuple((new HTuple(hv_CameraParam.TupleLength())).TupleNotEqual(
              16))) != 0)
          {
            throw new HalconException("Wrong number of values in CameraParam.");
          }
          hv_ParamNames.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_ParamNames = new HTuple();
          hv_ParamNames[0] = "camera_type";
          hv_ParamNames = hv_ParamNames.TupleConcat(hv_CameraParamAreaScanTiltPolynomial);
          }
        }
        else if ((int)(new HTuple(hv_CameraType.TupleEqual("area_scan_tilt_image_side_telecentric_division"))) != 0)
        {
          if ((int)(new HTuple((new HTuple(hv_CameraParam.TupleLength())).TupleNotEqual(
              11))) != 0)
          {
            throw new HalconException("Wrong number of values in CameraParam.");
          }
          hv_ParamNames.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_ParamNames = new HTuple();
          hv_ParamNames[0] = "camera_type";
          hv_ParamNames = hv_ParamNames.TupleConcat(hv_CameraParamAreaScanImageSideTelecentricTiltDivision);
          }
        }
        else if ((int)(new HTuple(hv_CameraType.TupleEqual("area_scan_tilt_image_side_telecentric_polynomial"))) != 0)
        {
          if ((int)(new HTuple((new HTuple(hv_CameraParam.TupleLength())).TupleNotEqual(
              15))) != 0)
          {
            throw new HalconException("Wrong number of values in CameraParam.");
          }
          hv_ParamNames.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_ParamNames = new HTuple();
          hv_ParamNames[0] = "camera_type";
          hv_ParamNames = hv_ParamNames.TupleConcat(hv_CameraParamAreaScanImageSideTelecentricTiltPolynomial);
          }
        }
        else if ((int)(new HTuple(hv_CameraType.TupleEqual("area_scan_tilt_bilateral_telecentric_division"))) != 0)
        {
          if ((int)(new HTuple((new HTuple(hv_CameraParam.TupleLength())).TupleNotEqual(
              11))) != 0)
          {
            throw new HalconException("Wrong number of values in CameraParam.");
          }
          hv_ParamNames.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_ParamNames = new HTuple();
          hv_ParamNames[0] = "camera_type";
          hv_ParamNames = hv_ParamNames.TupleConcat(hv_CameraParamAreaScanBilateralTelecentricTiltDivision);
          }
        }
        else if ((int)(new HTuple(hv_CameraType.TupleEqual("area_scan_tilt_bilateral_telecentric_polynomial"))) != 0)
        {
          if ((int)(new HTuple((new HTuple(hv_CameraParam.TupleLength())).TupleNotEqual(
              15))) != 0)
          {
            throw new HalconException("Wrong number of values in CameraParam.");
          }
          hv_ParamNames.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_ParamNames = new HTuple();
          hv_ParamNames[0] = "camera_type";
          hv_ParamNames = hv_ParamNames.TupleConcat(hv_CameraParamAreaScanBilateralTelecentricTiltPolynomial);
          }
        }
        else if ((int)(new HTuple(hv_CameraType.TupleEqual("area_scan_tilt_object_side_telecentric_division"))) != 0)
        {
          if ((int)(new HTuple((new HTuple(hv_CameraParam.TupleLength())).TupleNotEqual(
              12))) != 0)
          {
            throw new HalconException("Wrong number of values in CameraParam.");
          }
          hv_ParamNames.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_ParamNames = new HTuple();
          hv_ParamNames[0] = "camera_type";
          hv_ParamNames = hv_ParamNames.TupleConcat(hv_CameraParamAreaScanObjectSideTelecentricTiltDivision);
          }
        }
        else if ((int)(new HTuple(hv_CameraType.TupleEqual("area_scan_tilt_object_side_telecentric_polynomial"))) != 0)
        {
          if ((int)(new HTuple((new HTuple(hv_CameraParam.TupleLength())).TupleNotEqual(
              16))) != 0)
          {
            throw new HalconException("Wrong number of values in CameraParam.");
          }
          hv_ParamNames.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_ParamNames = new HTuple();
          hv_ParamNames[0] = "camera_type";
          hv_ParamNames = hv_ParamNames.TupleConcat(hv_CameraParamAreaScanObjectSideTelecentricTiltPolynomial);
          }
        }
        else if ((int)(new HTuple(hv_CameraType.TupleEqual("area_scan_hypercentric_division"))) != 0)
        {
          if ((int)(new HTuple((new HTuple(hv_CameraParam.TupleLength())).TupleNotEqual(
              9))) != 0)
          {
            throw new HalconException("Wrong number of values in CameraParam.");
          }
          hv_ParamNames.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_ParamNames = new HTuple();
          hv_ParamNames[0] = "camera_type";
          hv_ParamNames = hv_ParamNames.TupleConcat(hv_CameraParamAreaScanHypercentricDivision);
          }
        }
        else if ((int)(new HTuple(hv_CameraType.TupleEqual("area_scan_hypercentric_polynomial"))) != 0)
        {
          if ((int)(new HTuple((new HTuple(hv_CameraParam.TupleLength())).TupleNotEqual(
              13))) != 0)
          {
            throw new HalconException("Wrong number of values in CameraParam.");
          }
          hv_ParamNames.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_ParamNames = new HTuple();
          hv_ParamNames[0] = "camera_type";
          hv_ParamNames = hv_ParamNames.TupleConcat(hv_CameraParamAreaScanHypercentricPolynomial);
          }
        }
        else if ((int)(new HTuple(hv_CameraType.TupleEqual("line_scan"))) != 0)
        {
          if ((int)(new HTuple((new HTuple(hv_CameraParam.TupleLength())).TupleNotEqual(
              12))) != 0)
          {
            throw new HalconException("Wrong number of values in CameraParam.");
          }
          hv_ParamNames.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_ParamNames = new HTuple();
          hv_ParamNames[0] = "camera_type";
          hv_ParamNames = hv_ParamNames.TupleConcat(hv_CameraParamLinesScan);
          }
        }
        else
        {
          throw new HalconException("Unknown camera type in CameraParam.");
        }
      }

      hv_CameraParamAreaScanDivision.Dispose();
      hv_CameraParamAreaScanPolynomial.Dispose();
      hv_CameraParamAreaScanTelecentricDivision.Dispose();
      hv_CameraParamAreaScanTelecentricPolynomial.Dispose();
      hv_CameraParamAreaScanTiltDivision.Dispose();
      hv_CameraParamAreaScanTiltPolynomial.Dispose();
      hv_CameraParamAreaScanImageSideTelecentricTiltDivision.Dispose();
      hv_CameraParamAreaScanImageSideTelecentricTiltPolynomial.Dispose();
      hv_CameraParamAreaScanBilateralTelecentricTiltDivision.Dispose();
      hv_CameraParamAreaScanBilateralTelecentricTiltPolynomial.Dispose();
      hv_CameraParamAreaScanObjectSideTelecentricTiltDivision.Dispose();
      hv_CameraParamAreaScanObjectSideTelecentricTiltPolynomial.Dispose();
      hv_CameraParamAreaScanHypercentricDivision.Dispose();
      hv_CameraParamAreaScanHypercentricPolynomial.Dispose();
      hv_CameraParamLinesScan.Dispose();
      hv_CameraParamAreaScanTiltDivisionLegacy.Dispose();
      hv_CameraParamAreaScanTiltPolynomialLegacy.Dispose();
      hv_CameraParamAreaScanTelecentricDivisionLegacy.Dispose();
      hv_CameraParamAreaScanTelecentricPolynomialLegacy.Dispose();
      hv_CameraParamAreaScanBilateralTelecentricTiltDivisionLegacy.Dispose();
      hv_CameraParamAreaScanBilateralTelecentricTiltPolynomialLegacy.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_CameraParamAreaScanDivision.Dispose();
      hv_CameraParamAreaScanPolynomial.Dispose();
      hv_CameraParamAreaScanTelecentricDivision.Dispose();
      hv_CameraParamAreaScanTelecentricPolynomial.Dispose();
      hv_CameraParamAreaScanTiltDivision.Dispose();
      hv_CameraParamAreaScanTiltPolynomial.Dispose();
      hv_CameraParamAreaScanImageSideTelecentricTiltDivision.Dispose();
      hv_CameraParamAreaScanImageSideTelecentricTiltPolynomial.Dispose();
      hv_CameraParamAreaScanBilateralTelecentricTiltDivision.Dispose();
      hv_CameraParamAreaScanBilateralTelecentricTiltPolynomial.Dispose();
      hv_CameraParamAreaScanObjectSideTelecentricTiltDivision.Dispose();
      hv_CameraParamAreaScanObjectSideTelecentricTiltPolynomial.Dispose();
      hv_CameraParamAreaScanHypercentricDivision.Dispose();
      hv_CameraParamAreaScanHypercentricPolynomial.Dispose();
      hv_CameraParamLinesScan.Dispose();
      hv_CameraParamAreaScanTiltDivisionLegacy.Dispose();
      hv_CameraParamAreaScanTiltPolynomialLegacy.Dispose();
      hv_CameraParamAreaScanTelecentricDivisionLegacy.Dispose();
      hv_CameraParamAreaScanTelecentricPolynomialLegacy.Dispose();
      hv_CameraParamAreaScanBilateralTelecentricTiltDivisionLegacy.Dispose();
      hv_CameraParamAreaScanBilateralTelecentricTiltPolynomialLegacy.Dispose();

      throw HDevExpDefaultException;
    }
  }

  // Chapter: Graphics / Output
  // Short Description: Compute the center of all given 3D object models. 
  public void get_object_models_center (HTuple hv_ObjectModel3DID, out HTuple hv_Center)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Diameters = new HTuple(), hv_Index = new HTuple();
    HTuple hv_Diameter = new HTuple(), hv_C = new HTuple();
    HTuple hv_Exception = new HTuple(), hv_MD = new HTuple();
    HTuple hv_Weight = new HTuple(), hv_SumW = new HTuple();
    HTuple hv_ObjectModel3DIDSelected = new HTuple(), hv_InvSum = new HTuple();
    // Initialize local and output iconic variables 
    hv_Center = new HTuple();
    try
    {
      //Compute the mean of all model centers (weighted by the diameter of the object models)
      hv_Diameters.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Diameters = HTuple.TupleGenConst(
          new HTuple(hv_ObjectModel3DID.TupleLength()),0.0);
      }
      for (hv_Index=0; (int)hv_Index<=(int)((new HTuple(hv_ObjectModel3DID.TupleLength()
          ))-1); hv_Index = (int)hv_Index + 1)
      {
        try
        {
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Diameter.Dispose();
          HOperatorSet.GetObjectModel3dParams(hv_ObjectModel3DID.TupleSelect(hv_Index), 
              "diameter_axis_aligned_bounding_box", out hv_Diameter);
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_C.Dispose();
          HOperatorSet.GetObjectModel3dParams(hv_ObjectModel3DID.TupleSelect(hv_Index), 
              "center", out hv_C);
          }
          if (hv_Diameters == null)
            hv_Diameters = new HTuple();
          hv_Diameters[hv_Index] = hv_Diameter;
        }
        // catch (Exception) 
        catch (HalconException HDevExpDefaultException1)
        {
          HDevExpDefaultException1.ToHTuple(out hv_Exception);
          //Object model is empty, has no center etc. -> ignore it by leaving its diameter at zero
        }
      }

      if ((int)(new HTuple(((hv_Diameters.TupleSum())).TupleGreater(0))) != 0)
      {
        //Normalize Diameter to use it as weights for a weighted mean of the individual centers
        hv_MD.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_MD = ((hv_Diameters.TupleSelectMask(
            hv_Diameters.TupleGreaterElem(0)))).TupleMean();
        }
        if ((int)(new HTuple(hv_MD.TupleGreater(1e-10))) != 0)
        {
          hv_Weight.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Weight = hv_Diameters/hv_MD;
          }
        }
        else
        {
          hv_Weight.Dispose();
          hv_Weight = new HTuple(hv_Diameters);
        }
        hv_SumW.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_SumW = hv_Weight.TupleSum()
            ;
        }
        if ((int)(new HTuple(hv_SumW.TupleLess(1e-10))) != 0)
        {
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Weight = HTuple.TupleGenConst(
              new HTuple(hv_Weight.TupleLength()),1.0);
          hv_Weight.Dispose();
          hv_Weight = ExpTmpLocalVar_Weight;
          }
          }
          hv_SumW.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_SumW = hv_Weight.TupleSum()
              ;
          }
        }
        hv_Center.Dispose();
        hv_Center = new HTuple();
        hv_Center[0] = 0;
        hv_Center[1] = 0;
        hv_Center[2] = 0;
        for (hv_Index=0; (int)hv_Index<=(int)((new HTuple(hv_ObjectModel3DID.TupleLength()
            ))-1); hv_Index = (int)hv_Index + 1)
        {
          if ((int)(new HTuple(((hv_Diameters.TupleSelect(hv_Index))).TupleGreater(
              0))) != 0)
          {
            hv_ObjectModel3DIDSelected.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_ObjectModel3DIDSelected = hv_ObjectModel3DID.TupleSelect(
                hv_Index);
            }
            hv_C.Dispose();
            HOperatorSet.GetObjectModel3dParams(hv_ObjectModel3DIDSelected, "center", 
                out hv_C);
            if (hv_Center == null)
              hv_Center = new HTuple();
            hv_Center[0] = (hv_Center.TupleSelect(0))+((hv_C.TupleSelect(0))*(hv_Weight.TupleSelect(
                hv_Index)));
            if (hv_Center == null)
              hv_Center = new HTuple();
            hv_Center[1] = (hv_Center.TupleSelect(1))+((hv_C.TupleSelect(1))*(hv_Weight.TupleSelect(
                hv_Index)));
            if (hv_Center == null)
              hv_Center = new HTuple();
            hv_Center[2] = (hv_Center.TupleSelect(2))+((hv_C.TupleSelect(2))*(hv_Weight.TupleSelect(
                hv_Index)));
          }
        }
        hv_InvSum.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_InvSum = 1.0/hv_SumW;
        }
        if (hv_Center == null)
          hv_Center = new HTuple();
        hv_Center[0] = (hv_Center.TupleSelect(0))*hv_InvSum;
        if (hv_Center == null)
          hv_Center = new HTuple();
        hv_Center[1] = (hv_Center.TupleSelect(1))*hv_InvSum;
        if (hv_Center == null)
          hv_Center = new HTuple();
        hv_Center[2] = (hv_Center.TupleSelect(2))*hv_InvSum;
      }
      else
      {
        hv_Center.Dispose();
        hv_Center = new HTuple();
      }

      hv_Diameters.Dispose();
      hv_Index.Dispose();
      hv_Diameter.Dispose();
      hv_C.Dispose();
      hv_Exception.Dispose();
      hv_MD.Dispose();
      hv_Weight.Dispose();
      hv_SumW.Dispose();
      hv_ObjectModel3DIDSelected.Dispose();
      hv_InvSum.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Diameters.Dispose();
      hv_Index.Dispose();
      hv_Diameter.Dispose();
      hv_C.Dispose();
      hv_Exception.Dispose();
      hv_MD.Dispose();
      hv_Weight.Dispose();
      hv_SumW.Dispose();
      hv_ObjectModel3DIDSelected.Dispose();
      hv_InvSum.Dispose();

      throw HDevExpDefaultException;
    }
  }

  // Chapter: Graphics / Output
  // Short Description: Get the center of the virtual trackback that is used to move the camera. 
  public void get_trackball_center (HTuple hv_SelectedObject, HTuple hv_TrackballRadiusPixel, 
      HTuple hv_ObjectModel3D, HTuple hv_Poses, out HTuple hv_TBCenter, out HTuple hv_TBSize)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_NumModels = new HTuple(), hv_Diameter = new HTuple();
    HTuple hv_Index = new HTuple(), hv_Center = new HTuple();
    HTuple hv_CurrDiameter = new HTuple(), hv_Exception = new HTuple();
    HTuple hv_MD = new HTuple(), hv_Weight = new HTuple();
    HTuple hv_SumW = new HTuple(), hv_PoseSelected = new HTuple();
    HTuple hv_HomMat3D = new HTuple(), hv_TBCenterCamX = new HTuple();
    HTuple hv_TBCenterCamY = new HTuple(), hv_TBCenterCamZ = new HTuple();
    HTuple hv_InvSum = new HTuple();
    // Initialize local and output iconic variables 
    hv_TBCenter = new HTuple();
    hv_TBSize = new HTuple();
    try
    {
      //
      hv_NumModels.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_NumModels = new HTuple(hv_ObjectModel3D.TupleLength()
          );
      }
      if (hv_TBCenter == null)
        hv_TBCenter = new HTuple();
      hv_TBCenter[0] = 0;
      if (hv_TBCenter == null)
        hv_TBCenter = new HTuple();
      hv_TBCenter[1] = 0;
      if (hv_TBCenter == null)
        hv_TBCenter = new HTuple();
      hv_TBCenter[2] = 0;
      hv_Diameter.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Diameter = HTuple.TupleGenConst(
          new HTuple(hv_ObjectModel3D.TupleLength()),0.0);
      }
      for (hv_Index=0; (int)hv_Index<=(int)((new HTuple(hv_ObjectModel3D.TupleLength()
          ))-1); hv_Index = (int)hv_Index + 1)
      {
        try
        {
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Center.Dispose();
          HOperatorSet.GetObjectModel3dParams(hv_ObjectModel3D.TupleSelect(hv_Index), 
              "center", out hv_Center);
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_CurrDiameter.Dispose();
          HOperatorSet.GetObjectModel3dParams(hv_ObjectModel3D.TupleSelect(hv_Index), 
              "diameter_axis_aligned_bounding_box", out hv_CurrDiameter);
          }
          if (hv_Diameter == null)
            hv_Diameter = new HTuple();
          hv_Diameter[hv_Index] = hv_CurrDiameter;
        }
        // catch (Exception) 
        catch (HalconException HDevExpDefaultException1)
        {
          HDevExpDefaultException1.ToHTuple(out hv_Exception);
          //3D object model is empty or otherwise malformed -> ignore
        }
      }
      //Normalize Diameter to use it as weights for a weighted mean of the individual centers
      hv_MD.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_MD = hv_Diameter.TupleMean()
          ;
      }
      if ((int)(new HTuple(hv_MD.TupleGreater(1e-10))) != 0)
      {
        hv_Weight.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Weight = hv_Diameter/hv_MD;
        }
      }
      else
      {
        hv_Weight.Dispose();
        hv_Weight = new HTuple(hv_Diameter);
      }
      hv_SumW.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_SumW = ((hv_Weight.TupleSelectMask(
          ((hv_SelectedObject.TupleSgn())).TupleAbs()))).TupleSum();
      }
      if ((int)(new HTuple(hv_SumW.TupleLess(1e-10))) != 0)
      {
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Weight = HTuple.TupleGenConst(
            new HTuple(hv_Weight.TupleLength()),1.0);
        hv_Weight.Dispose();
        hv_Weight = ExpTmpLocalVar_Weight;
        }
        }
        hv_SumW.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_SumW = ((hv_Weight.TupleSelectMask(
            ((hv_SelectedObject.TupleSgn())).TupleAbs()))).TupleSum();
        }
      }
      if ((int)(new HTuple(hv_SumW.TupleLess(1e-10))) != 0)
      {
        hv_SumW.Dispose();
        hv_SumW = 1.0;
      }
      HTuple end_val30 = hv_NumModels-1;
      HTuple step_val30 = 1;
      for (hv_Index=0; hv_Index.Continue(end_val30, step_val30); hv_Index = hv_Index.TupleAdd(step_val30))
      {
        if ((int)(((hv_SelectedObject.TupleSelect(hv_Index))).TupleAnd(new HTuple(((hv_Diameter.TupleSelect(
            hv_Index))).TupleGreater(0)))) != 0)
        {
          hv_PoseSelected.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_PoseSelected = hv_Poses.TupleSelectRange(
              hv_Index*7,(hv_Index*7)+6);
          }
          hv_HomMat3D.Dispose();
          HOperatorSet.PoseToHomMat3d(hv_PoseSelected, out hv_HomMat3D);
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Center.Dispose();
          HOperatorSet.GetObjectModel3dParams(hv_ObjectModel3D.TupleSelect(hv_Index), 
              "center", out hv_Center);
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_TBCenterCamX.Dispose();hv_TBCenterCamY.Dispose();hv_TBCenterCamZ.Dispose();
          HOperatorSet.AffineTransPoint3d(hv_HomMat3D, hv_Center.TupleSelect(0), 
              hv_Center.TupleSelect(1), hv_Center.TupleSelect(2), out hv_TBCenterCamX, 
              out hv_TBCenterCamY, out hv_TBCenterCamZ);
          }
          if (hv_TBCenter == null)
            hv_TBCenter = new HTuple();
          hv_TBCenter[0] = (hv_TBCenter.TupleSelect(0))+(hv_TBCenterCamX*(hv_Weight.TupleSelect(
              hv_Index)));
          if (hv_TBCenter == null)
            hv_TBCenter = new HTuple();
          hv_TBCenter[1] = (hv_TBCenter.TupleSelect(1))+(hv_TBCenterCamY*(hv_Weight.TupleSelect(
              hv_Index)));
          if (hv_TBCenter == null)
            hv_TBCenter = new HTuple();
          hv_TBCenter[2] = (hv_TBCenter.TupleSelect(2))+(hv_TBCenterCamZ*(hv_Weight.TupleSelect(
              hv_Index)));
        }
      }
      if ((int)(new HTuple(((hv_SelectedObject.TupleMax())).TupleNotEqual(0))) != 0)
      {
        hv_InvSum.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_InvSum = 1.0/hv_SumW;
        }
        if (hv_TBCenter == null)
          hv_TBCenter = new HTuple();
        hv_TBCenter[0] = (hv_TBCenter.TupleSelect(0))*hv_InvSum;
        if (hv_TBCenter == null)
          hv_TBCenter = new HTuple();
        hv_TBCenter[1] = (hv_TBCenter.TupleSelect(1))*hv_InvSum;
        if (hv_TBCenter == null)
          hv_TBCenter = new HTuple();
        hv_TBCenter[2] = (hv_TBCenter.TupleSelect(2))*hv_InvSum;
        hv_TBSize.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_TBSize = (0.5+((0.5*(hv_SelectedObject.TupleSum()
            ))/hv_NumModels))*hv_TrackballRadiusPixel;
        }
      }
      else
      {
        hv_TBCenter.Dispose();
        hv_TBCenter = new HTuple();
        hv_TBSize.Dispose();
        hv_TBSize = 0;
      }

      hv_NumModels.Dispose();
      hv_Diameter.Dispose();
      hv_Index.Dispose();
      hv_Center.Dispose();
      hv_CurrDiameter.Dispose();
      hv_Exception.Dispose();
      hv_MD.Dispose();
      hv_Weight.Dispose();
      hv_SumW.Dispose();
      hv_PoseSelected.Dispose();
      hv_HomMat3D.Dispose();
      hv_TBCenterCamX.Dispose();
      hv_TBCenterCamY.Dispose();
      hv_TBCenterCamZ.Dispose();
      hv_InvSum.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_NumModels.Dispose();
      hv_Diameter.Dispose();
      hv_Index.Dispose();
      hv_Center.Dispose();
      hv_CurrDiameter.Dispose();
      hv_Exception.Dispose();
      hv_MD.Dispose();
      hv_Weight.Dispose();
      hv_SumW.Dispose();
      hv_PoseSelected.Dispose();
      hv_HomMat3D.Dispose();
      hv_TBCenterCamX.Dispose();
      hv_TBCenterCamY.Dispose();
      hv_TBCenterCamZ.Dispose();
      hv_InvSum.Dispose();

      throw HDevExpDefaultException;
    }
  }

  // Chapter: Graphics / Output
  // Short Description: Get the center of the virtual trackback that is used to move the camera (version for inspection_mode = 'surface'). 
  public void get_trackball_center_fixed (HTuple hv_SelectedObject, HTuple hv_TrackballCenterRow, 
      HTuple hv_TrackballCenterCol, HTuple hv_TrackballRadiusPixel, HTuple hv_Scene3D, 
      HTuple hv_ObjectModel3DID, HTuple hv_Poses, HTuple hv_WindowHandleBuffer, HTuple hv_CamParam, 
      HTuple hv_GenParamName, HTuple hv_GenParamValue, out HTuple hv_TBCenter, out HTuple hv_TBSize)
  {



    // Local iconic variables 

    HObject ho_RegionCenter, ho_DistanceImage;
    HObject ho_Domain;

    // Local control variables 

    HTuple hv_NumModels = new HTuple(), hv_Width = new HTuple();
    HTuple hv_Height = new HTuple(), hv_SelectPose = new HTuple();
    HTuple hv_Index1 = new HTuple(), hv_Rows = new HTuple();
    HTuple hv_Columns = new HTuple(), hv_Grayval = new HTuple();
    HTuple hv_IndicesG = new HTuple(), hv_Value = new HTuple();
    HTuple hv_Pos = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_RegionCenter);
    HOperatorSet.GenEmptyObj(out ho_DistanceImage);
    HOperatorSet.GenEmptyObj(out ho_Domain);
    hv_TBCenter = new HTuple();
    hv_TBSize = new HTuple();
    try
    {
      //
      //Determine the trackball center for the fixed trackball
      hv_NumModels.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_NumModels = new HTuple(hv_ObjectModel3DID.TupleLength()
          );
      }
      hv_Width.Dispose();
      get_cam_par_data(hv_CamParam, "image_width", out hv_Width);
      hv_Height.Dispose();
      get_cam_par_data(hv_CamParam, "image_height", out hv_Height);
      //
      //Project the selected objects
      hv_SelectPose.Dispose();
      hv_SelectPose = new HTuple();
      for (hv_Index1=0; (int)hv_Index1<=(int)((new HTuple(hv_SelectedObject.TupleLength()
          ))-1); hv_Index1 = (int)hv_Index1 + 1)
      {
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_SelectPose = hv_SelectPose.TupleConcat(
            HTuple.TupleGenConst(7,hv_SelectedObject.TupleSelect(hv_Index1)));
        hv_SelectPose.Dispose();
        hv_SelectPose = ExpTmpLocalVar_SelectPose;
        }
        }
        if ((int)(new HTuple(((hv_SelectedObject.TupleSelect(hv_Index1))).TupleEqual(
            0))) != 0)
        {
          HOperatorSet.SetScene3dInstanceParam(hv_Scene3D, hv_Index1, "visible", 
              "false");
        }
      }
      HOperatorSet.SetScene3dParam(hv_Scene3D, "depth_persistence", "true");
      HOperatorSet.DisplayScene3d(hv_ExpDefaultWinHandle, hv_Scene3D, 0);
      HOperatorSet.SetScene3dParam(hv_Scene3D, "visible", "true");
      //
      //determine the depth of the object point that appears closest to the trackball
      //center
      ho_RegionCenter.Dispose();
      HOperatorSet.GenRegionPoints(out ho_RegionCenter, hv_TrackballCenterRow, hv_TrackballCenterCol);
      ho_DistanceImage.Dispose();
      HOperatorSet.DistanceTransform(ho_RegionCenter, out ho_DistanceImage, "chamfer-3-4-unnormalized", 
          "false", hv_Width, hv_Height);
      ho_Domain.Dispose();
      HOperatorSet.GetDomain(ho_DistanceImage, out ho_Domain);
      hv_Rows.Dispose();hv_Columns.Dispose();
      HOperatorSet.GetRegionPoints(ho_Domain, out hv_Rows, out hv_Columns);
      hv_Grayval.Dispose();
      HOperatorSet.GetGrayval(ho_DistanceImage, hv_Rows, hv_Columns, out hv_Grayval);
      hv_IndicesG.Dispose();
      HOperatorSet.TupleSortIndex(hv_Grayval, out hv_IndicesG);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Value.Dispose();
      HOperatorSet.GetDisplayScene3dInfo(hv_ExpDefaultWinHandle, hv_Scene3D, hv_Rows.TupleSelect(
          hv_IndicesG), hv_Columns.TupleSelect(hv_IndicesG), "depth", out hv_Value);
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Pos.Dispose();
      HOperatorSet.TupleFind(hv_Value.TupleSgn(), 1, out hv_Pos);
      }
      //
      HOperatorSet.SetScene3dParam(hv_Scene3D, "depth_persistence", "false");
      //
      //
      //set TBCenter
      if ((int)(new HTuple(hv_Pos.TupleNotEqual(-1))) != 0)
      {
        //if the object is visible in the image
        hv_TBCenter.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_TBCenter = new HTuple();
        hv_TBCenter[0] = 0;
        hv_TBCenter[1] = 0;
        hv_TBCenter = hv_TBCenter.TupleConcat(hv_Value.TupleSelect(
            hv_Pos.TupleSelect(0)));
        }
      }
      else
      {
        //if the object is not visible in the image, set the z coordinate to -1
        //to indicate, the the previous z value should be used instead
        hv_TBCenter.Dispose();
        hv_TBCenter = new HTuple();
        hv_TBCenter[0] = 0;
        hv_TBCenter[1] = 0;
        hv_TBCenter[2] = -1;
      }
      //
      if ((int)(new HTuple(((hv_SelectedObject.TupleMax())).TupleNotEqual(0))) != 0)
      {
        hv_TBSize.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_TBSize = (0.5+((0.5*(hv_SelectedObject.TupleSum()
            ))/hv_NumModels))*hv_TrackballRadiusPixel;
        }
      }
      else
      {
        hv_TBCenter.Dispose();
        hv_TBCenter = new HTuple();
        hv_TBSize.Dispose();
        hv_TBSize = 0;
      }
      ho_RegionCenter.Dispose();
      ho_DistanceImage.Dispose();
      ho_Domain.Dispose();

      hv_NumModels.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_SelectPose.Dispose();
      hv_Index1.Dispose();
      hv_Rows.Dispose();
      hv_Columns.Dispose();
      hv_Grayval.Dispose();
      hv_IndicesG.Dispose();
      hv_Value.Dispose();
      hv_Pos.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_RegionCenter.Dispose();
      ho_DistanceImage.Dispose();
      ho_Domain.Dispose();

      hv_NumModels.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_SelectPose.Dispose();
      hv_Index1.Dispose();
      hv_Rows.Dispose();
      hv_Columns.Dispose();
      hv_Grayval.Dispose();
      hv_IndicesG.Dispose();
      hv_Value.Dispose();
      hv_Pos.Dispose();

      throw HDevExpDefaultException;
    }
  }

  // Chapter: Graphics / Output
  // Short Description: Get string extends of several lines. 
  public void max_line_width (HTuple hv_WindowHandle, HTuple hv_Lines, out HTuple hv_MaxWidth)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Index = new HTuple(), hv_Ascent = new HTuple();
    HTuple hv_Descent = new HTuple(), hv_LineWidth = new HTuple();
    HTuple hv_LineHeight = new HTuple();
    // Initialize local and output iconic variables 
    hv_MaxWidth = new HTuple();
    try
    {
      //
      hv_MaxWidth.Dispose();
      hv_MaxWidth = 0;
      for (hv_Index=0; (int)hv_Index<=(int)((new HTuple(hv_Lines.TupleLength()))-1); hv_Index = (int)hv_Index + 1)
      {
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Ascent.Dispose();hv_Descent.Dispose();hv_LineWidth.Dispose();hv_LineHeight.Dispose();
        HOperatorSet.GetStringExtents(hv_ExpDefaultWinHandle, hv_Lines.TupleSelect(
            hv_Index), out hv_Ascent, out hv_Descent, out hv_LineWidth, out hv_LineHeight);
        }
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_MaxWidth = ((hv_LineWidth.TupleConcat(
            hv_MaxWidth))).TupleMax();
        hv_MaxWidth.Dispose();
        hv_MaxWidth = ExpTmpLocalVar_MaxWidth;
        }
        }
      }

      hv_Index.Dispose();
      hv_Ascent.Dispose();
      hv_Descent.Dispose();
      hv_LineWidth.Dispose();
      hv_LineHeight.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Index.Dispose();
      hv_Ascent.Dispose();
      hv_Descent.Dispose();
      hv_LineWidth.Dispose();
      hv_LineHeight.Dispose();

      throw HDevExpDefaultException;
    }
  }

  // Chapter: Graphics / Output
  // Short Description: Project an image point onto the trackball 
  public void project_point_on_trackball (HTuple hv_X, HTuple hv_Y, HTuple hv_VirtualTrackball, 
      HTuple hv_TrackballSize, out HTuple hv_V)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_R = new HTuple(), hv_XP = new HTuple();
    HTuple hv_YP = new HTuple(), hv_ZP = new HTuple();
    // Initialize local and output iconic variables 
    hv_V = new HTuple();
    try
    {
      //
      if ((int)(new HTuple(hv_VirtualTrackball.TupleEqual("shoemake"))) != 0)
      {
        //Virtual Trackball according to Shoemake
        hv_R.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_R = (((hv_X*hv_X)+(hv_Y*hv_Y))).TupleSqrt()
            ;
        }
        if ((int)(new HTuple(hv_R.TupleLessEqual(hv_TrackballSize))) != 0)
        {
          hv_XP.Dispose();
          hv_XP = new HTuple(hv_X);
          hv_YP.Dispose();
          hv_YP = new HTuple(hv_Y);
          hv_ZP.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_ZP = (((hv_TrackballSize*hv_TrackballSize)-(hv_R*hv_R))).TupleSqrt()
              ;
          }
        }
        else
        {
          hv_XP.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_XP = (hv_X*hv_TrackballSize)/hv_R;
          }
          hv_YP.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_YP = (hv_Y*hv_TrackballSize)/hv_R;
          }
          hv_ZP.Dispose();
          hv_ZP = 0;
        }
      }
      else
      {
        //Virtual Trackball according to Bell
        hv_R.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_R = (((hv_X*hv_X)+(hv_Y*hv_Y))).TupleSqrt()
            ;
        }
        if ((int)(new HTuple(hv_R.TupleLessEqual(hv_TrackballSize*0.70710678))) != 0)
        {
          hv_XP.Dispose();
          hv_XP = new HTuple(hv_X);
          hv_YP.Dispose();
          hv_YP = new HTuple(hv_Y);
          hv_ZP.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_ZP = (((hv_TrackballSize*hv_TrackballSize)-(hv_R*hv_R))).TupleSqrt()
              ;
          }
        }
        else
        {
          hv_XP.Dispose();
          hv_XP = new HTuple(hv_X);
          hv_YP.Dispose();
          hv_YP = new HTuple(hv_Y);
          hv_ZP.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_ZP = ((0.6*hv_TrackballSize)*hv_TrackballSize)/hv_R;
          }
        }
      }
      hv_V.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_V = new HTuple();
      hv_V = hv_V.TupleConcat(hv_XP, hv_YP, hv_ZP);
      }

      hv_R.Dispose();
      hv_XP.Dispose();
      hv_YP.Dispose();
      hv_ZP.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_R.Dispose();
      hv_XP.Dispose();
      hv_YP.Dispose();
      hv_ZP.Dispose();

      throw HDevExpDefaultException;
    }
  }

  // Chapter: Calibration / Camera Parameters
  // Short Description: Set the value of a specified camera parameter in the camera parameter tuple. 
  public void set_cam_par_data (HTuple hv_CameraParamIn, HTuple hv_ParamName, HTuple hv_ParamValue, 
      out HTuple hv_CameraParamOut)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Index = new HTuple(), hv_ParamNameInd = new HTuple();
    HTuple hv_CameraParamNames = new HTuple(), hv_I = new HTuple();
    HTuple hv_CameraType = new HTuple(), hv_IsTelecentric = new HTuple();
    // Initialize local and output iconic variables 
    hv_CameraParamOut = new HTuple();
    try
    {
      //set_cam_par_data sets the value of the parameter that
      //is given in ParamName in the tuple of camera parameters
      //given in CameraParamIn. The modified camera parameters
      //are returned in CameraParamOut.
      //
      //Check for consistent length of input parameters
      if ((int)(new HTuple((new HTuple(hv_ParamName.TupleLength())).TupleNotEqual(
          new HTuple(hv_ParamValue.TupleLength())))) != 0)
      {
        throw new HalconException("Different number of values in ParamName and ParamValue");
      }
      //First, get the parameter names that correspond to the
      //elements in the input camera parameter tuple.
      hv_CameraType.Dispose();hv_CameraParamNames.Dispose();
      get_cam_par_names(hv_CameraParamIn, out hv_CameraType, out hv_CameraParamNames);
      //
      //Find the index of the requested camera data and return
      //the corresponding value.
      hv_CameraParamOut.Dispose();
      hv_CameraParamOut = new HTuple(hv_CameraParamIn);
      for (hv_Index=0; (int)hv_Index<=(int)((new HTuple(hv_ParamName.TupleLength()
          ))-1); hv_Index = (int)hv_Index + 1)
      {
        hv_ParamNameInd.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_ParamNameInd = hv_ParamName.TupleSelect(
            hv_Index);
        }
        hv_I.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_I = hv_CameraParamNames.TupleFind(
            hv_ParamNameInd);
        }
        if ((int)(new HTuple(hv_I.TupleNotEqual(-1))) != 0)
        {
          if (hv_CameraParamOut == null)
            hv_CameraParamOut = new HTuple();
          hv_CameraParamOut[hv_I] = hv_ParamValue.TupleSelect(hv_Index);
        }
        else
        {
          throw new HalconException("Wrong ParamName "+hv_ParamNameInd);
        }
        //Check the consistency of focus and telecentricity
        if ((int)(new HTuple(hv_ParamNameInd.TupleEqual("focus"))) != 0)
        {
          hv_IsTelecentric.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_IsTelecentric = (new HTuple(((hv_CameraType.TupleStrstr(
              "telecentric"))).TupleNotEqual(-1))).TupleAnd(new HTuple(((hv_CameraType.TupleStrstr(
              "image_side_telecentric"))).TupleEqual(-1)));
          }
          if ((int)(hv_IsTelecentric) != 0)
          {
            throw new HalconException(new HTuple("Focus for telecentric lenses is always 0, and hence, cannot be changed."));
          }
          if ((int)((new HTuple(hv_IsTelecentric.TupleNot())).TupleAnd(new HTuple(((hv_ParamValue.TupleSelect(
              hv_Index))).TupleEqual(0.0)))) != 0)
          {
            throw new HalconException("Focus for non-telecentric lenses must not be 0.");
          }
        }
      }

      hv_Index.Dispose();
      hv_ParamNameInd.Dispose();
      hv_CameraParamNames.Dispose();
      hv_I.Dispose();
      hv_CameraType.Dispose();
      hv_IsTelecentric.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Index.Dispose();
      hv_ParamNameInd.Dispose();
      hv_CameraParamNames.Dispose();
      hv_I.Dispose();
      hv_CameraType.Dispose();
      hv_IsTelecentric.Dispose();

      throw HDevExpDefaultException;
    }
  }

  // Chapter: Graphics / Text
  // Short Description: Set font independent of OS 
  public void set_display_font (HTuple hv_WindowHandle, HTuple hv_Size, HTuple hv_Font, 
      HTuple hv_Bold, HTuple hv_Slant)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_OS = new HTuple(), hv_Fonts = new HTuple();
    HTuple hv_Style = new HTuple(), hv_Exception = new HTuple();
    HTuple hv_AvailableFonts = new HTuple(), hv_Fdx = new HTuple();
    HTuple hv_Indices = new HTuple();
    HTuple   hv_Font_COPY_INP_TMP = new HTuple(hv_Font);
    HTuple   hv_Size_COPY_INP_TMP = new HTuple(hv_Size);

    // Initialize local and output iconic variables 
    try
    {
      //This procedure sets the text font of the current window with
      //the specified attributes.
      //
      //Input parameters:
      //WindowHandle: The graphics window for which the font will be set
      //Size: The font size. If Size=-1, the default of 16 is used.
      //Bold: If set to 'true', a bold font is used
      //Slant: If set to 'true', a slanted font is used
      //
      hv_OS.Dispose();
      HOperatorSet.GetSystem("operating_system", out hv_OS);
      if ((int)((new HTuple(hv_Size_COPY_INP_TMP.TupleEqual(new HTuple()))).TupleOr(
          new HTuple(hv_Size_COPY_INP_TMP.TupleEqual(-1)))) != 0)
      {
        hv_Size_COPY_INP_TMP.Dispose();
        hv_Size_COPY_INP_TMP = 16;
      }
      if ((int)(new HTuple(((hv_OS.TupleSubstr(0,2))).TupleEqual("Win"))) != 0)
      {
        //Restore previous behaviour
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Size = ((1.13677*hv_Size_COPY_INP_TMP)).TupleInt()
            ;
        hv_Size_COPY_INP_TMP.Dispose();
        hv_Size_COPY_INP_TMP = ExpTmpLocalVar_Size;
        }
        }
      }
      else
      {
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Size = hv_Size_COPY_INP_TMP.TupleInt()
            ;
        hv_Size_COPY_INP_TMP.Dispose();
        hv_Size_COPY_INP_TMP = ExpTmpLocalVar_Size;
        }
        }
      }
      if ((int)(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("Courier"))) != 0)
      {
        hv_Fonts.Dispose();
        hv_Fonts = new HTuple();
        hv_Fonts[0] = "Courier";
        hv_Fonts[1] = "Courier 10 Pitch";
        hv_Fonts[2] = "Courier New";
        hv_Fonts[3] = "CourierNew";
        hv_Fonts[4] = "Liberation Mono";
      }
      else if ((int)(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("mono"))) != 0)
      {
        hv_Fonts.Dispose();
        hv_Fonts = new HTuple();
        hv_Fonts[0] = "Consolas";
        hv_Fonts[1] = "Menlo";
        hv_Fonts[2] = "Courier";
        hv_Fonts[3] = "Courier 10 Pitch";
        hv_Fonts[4] = "FreeMono";
        hv_Fonts[5] = "Liberation Mono";
      }
      else if ((int)(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("sans"))) != 0)
      {
        hv_Fonts.Dispose();
        hv_Fonts = new HTuple();
        hv_Fonts[0] = "Luxi Sans";
        hv_Fonts[1] = "DejaVu Sans";
        hv_Fonts[2] = "FreeSans";
        hv_Fonts[3] = "Arial";
        hv_Fonts[4] = "Liberation Sans";
      }
      else if ((int)(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("serif"))) != 0)
      {
        hv_Fonts.Dispose();
        hv_Fonts = new HTuple();
        hv_Fonts[0] = "Times New Roman";
        hv_Fonts[1] = "Luxi Serif";
        hv_Fonts[2] = "DejaVu Serif";
        hv_Fonts[3] = "FreeSerif";
        hv_Fonts[4] = "Utopia";
        hv_Fonts[5] = "Liberation Serif";
      }
      else
      {
        hv_Fonts.Dispose();
        hv_Fonts = new HTuple(hv_Font_COPY_INP_TMP);
      }
      hv_Style.Dispose();
      hv_Style = "";
      if ((int)(new HTuple(hv_Bold.TupleEqual("true"))) != 0)
      {
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Style = hv_Style+"Bold";
        hv_Style.Dispose();
        hv_Style = ExpTmpLocalVar_Style;
        }
        }
      }
      else if ((int)(new HTuple(hv_Bold.TupleNotEqual("false"))) != 0)
      {
        hv_Exception.Dispose();
        hv_Exception = "Wrong value of control parameter Bold";
        throw new HalconException(hv_Exception);
      }
      if ((int)(new HTuple(hv_Slant.TupleEqual("true"))) != 0)
      {
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Style = hv_Style+"Italic";
        hv_Style.Dispose();
        hv_Style = ExpTmpLocalVar_Style;
        }
        }
      }
      else if ((int)(new HTuple(hv_Slant.TupleNotEqual("false"))) != 0)
      {
        hv_Exception.Dispose();
        hv_Exception = "Wrong value of control parameter Slant";
        throw new HalconException(hv_Exception);
      }
      if ((int)(new HTuple(hv_Style.TupleEqual(""))) != 0)
      {
        hv_Style.Dispose();
        hv_Style = "Normal";
      }
      hv_AvailableFonts.Dispose();
      HOperatorSet.QueryFont(hv_ExpDefaultWinHandle, out hv_AvailableFonts);
      hv_Font_COPY_INP_TMP.Dispose();
      hv_Font_COPY_INP_TMP = "";
      for (hv_Fdx=0; (int)hv_Fdx<=(int)((new HTuple(hv_Fonts.TupleLength()))-1); hv_Fdx = (int)hv_Fdx + 1)
      {
        hv_Indices.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Indices = hv_AvailableFonts.TupleFind(
            hv_Fonts.TupleSelect(hv_Fdx));
        }
        if ((int)(new HTuple((new HTuple(hv_Indices.TupleLength())).TupleGreater(
            0))) != 0)
        {
          if ((int)(new HTuple(((hv_Indices.TupleSelect(0))).TupleGreaterEqual(0))) != 0)
          {
            hv_Font_COPY_INP_TMP.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_Font_COPY_INP_TMP = hv_Fonts.TupleSelect(
                hv_Fdx);
            }
            break;
          }
        }
      }
      if ((int)(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual(""))) != 0)
      {
        throw new HalconException("Wrong value of control parameter Font");
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      {
      HTuple 
        ExpTmpLocalVar_Font = (((hv_Font_COPY_INP_TMP+"-")+hv_Style)+"-")+hv_Size_COPY_INP_TMP;
      hv_Font_COPY_INP_TMP.Dispose();
      hv_Font_COPY_INP_TMP = ExpTmpLocalVar_Font;
      }
      }
      HOperatorSet.SetFont(hv_ExpDefaultWinHandle, hv_Font_COPY_INP_TMP);

      hv_Font_COPY_INP_TMP.Dispose();
      hv_Size_COPY_INP_TMP.Dispose();
      hv_OS.Dispose();
      hv_Fonts.Dispose();
      hv_Style.Dispose();
      hv_Exception.Dispose();
      hv_AvailableFonts.Dispose();
      hv_Fdx.Dispose();
      hv_Indices.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Font_COPY_INP_TMP.Dispose();
      hv_Size_COPY_INP_TMP.Dispose();
      hv_OS.Dispose();
      hv_Fonts.Dispose();
      hv_Style.Dispose();
      hv_Exception.Dispose();
      hv_AvailableFonts.Dispose();
      hv_Fdx.Dispose();
      hv_Indices.Dispose();

      throw HDevExpDefaultException;
    }
  }

  // Chapter: Graphics / Output
  // Short Description: Compute the 3D rotation from the mouse movement 
  public void trackball (HTuple hv_MX1, HTuple hv_MY1, HTuple hv_MX2, HTuple hv_MY2, 
      HTuple hv_VirtualTrackball, HTuple hv_TrackballSize, HTuple hv_SensFactor, out HTuple hv_QuatRotation)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_P1 = new HTuple(), hv_P2 = new HTuple();
    HTuple hv_RotAxis = new HTuple(), hv_D = new HTuple();
    HTuple hv_T = new HTuple(), hv_RotAngle = new HTuple();
    HTuple hv_Len = new HTuple();
    // Initialize local and output iconic variables 
    hv_QuatRotation = new HTuple();
    try
    {
      //
      //Compute the 3D rotation from the mouse movement
      //
      if ((int)((new HTuple(hv_MX1.TupleEqual(hv_MX2))).TupleAnd(new HTuple(hv_MY1.TupleEqual(
          hv_MY2)))) != 0)
      {
        hv_QuatRotation.Dispose();
        hv_QuatRotation = new HTuple();
        hv_QuatRotation[0] = 1;
        hv_QuatRotation[1] = 0;
        hv_QuatRotation[2] = 0;
        hv_QuatRotation[3] = 0;

        hv_P1.Dispose();
        hv_P2.Dispose();
        hv_RotAxis.Dispose();
        hv_D.Dispose();
        hv_T.Dispose();
        hv_RotAngle.Dispose();
        hv_Len.Dispose();

        return;
      }
      //Project the image point onto the trackball
      hv_P1.Dispose();
      project_point_on_trackball(hv_MX1, hv_MY1, hv_VirtualTrackball, hv_TrackballSize, 
          out hv_P1);
      hv_P2.Dispose();
      project_point_on_trackball(hv_MX2, hv_MY2, hv_VirtualTrackball, hv_TrackballSize, 
          out hv_P2);
      //The cross product of the projected points defines the rotation axis
      hv_RotAxis.Dispose();
      tuple_vector_cross_product(hv_P1, hv_P2, out hv_RotAxis);
      //Compute the rotation angle
      hv_D.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_D = hv_P2-hv_P1;
      }
      hv_T.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_T = (((((hv_D*hv_D)).TupleSum()
          )).TupleSqrt())/(2.0*hv_TrackballSize);
      }
      if ((int)(new HTuple(hv_T.TupleGreater(1.0))) != 0)
      {
        hv_T.Dispose();
        hv_T = 1.0;
      }
      if ((int)(new HTuple(hv_T.TupleLess(-1.0))) != 0)
      {
        hv_T.Dispose();
        hv_T = -1.0;
      }
      hv_RotAngle.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_RotAngle = (2.0*(hv_T.TupleAsin()
          ))*hv_SensFactor;
      }
      hv_Len.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Len = ((((hv_RotAxis*hv_RotAxis)).TupleSum()
          )).TupleSqrt();
      }
      if ((int)(new HTuple(hv_Len.TupleGreater(0.0))) != 0)
      {
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_RotAxis = hv_RotAxis/hv_Len;
        hv_RotAxis.Dispose();
        hv_RotAxis = ExpTmpLocalVar_RotAxis;
        }
        }
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_QuatRotation.Dispose();
      HOperatorSet.AxisAngleToQuat(hv_RotAxis.TupleSelect(0), hv_RotAxis.TupleSelect(
          1), hv_RotAxis.TupleSelect(2), hv_RotAngle, out hv_QuatRotation);
      }

      hv_P1.Dispose();
      hv_P2.Dispose();
      hv_RotAxis.Dispose();
      hv_D.Dispose();
      hv_T.Dispose();
      hv_RotAngle.Dispose();
      hv_Len.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_P1.Dispose();
      hv_P2.Dispose();
      hv_RotAxis.Dispose();
      hv_D.Dispose();
      hv_T.Dispose();
      hv_RotAngle.Dispose();
      hv_Len.Dispose();

      throw HDevExpDefaultException;
    }
  }

  // Chapter: Tuple / Arithmetic
  // Short Description: Calculates the cross product of two vectors of length 3. 
  public void tuple_vector_cross_product (HTuple hv_V1, HTuple hv_V2, out HTuple hv_VC)
  {



    // Local iconic variables 
    // Initialize local and output iconic variables 
    hv_VC = new HTuple();
    //The caller must ensure that the length of both input vectors is 3
    hv_VC.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_VC = ((hv_V1.TupleSelect(
        1))*(hv_V2.TupleSelect(2)))-((hv_V1.TupleSelect(2))*(hv_V2.TupleSelect(1)));
    }
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    {
    HTuple 
      ExpTmpLocalVar_VC = hv_VC.TupleConcat(
        ((hv_V1.TupleSelect(2))*(hv_V2.TupleSelect(0)))-((hv_V1.TupleSelect(0))*(hv_V2.TupleSelect(
        2))));
    hv_VC.Dispose();
    hv_VC = ExpTmpLocalVar_VC;
    }
    }
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    {
    HTuple 
      ExpTmpLocalVar_VC = hv_VC.TupleConcat(
        ((hv_V1.TupleSelect(0))*(hv_V2.TupleSelect(1)))-((hv_V1.TupleSelect(1))*(hv_V2.TupleSelect(
        0))));
    hv_VC.Dispose();
    hv_VC = ExpTmpLocalVar_VC;
    }
    }


    return;
  }

  // Chapter: Graphics / Output
  // Short Description: Interactively display 3D object models 
  public void visualize_object_model_3d (HTuple hv_WindowHandle, HTuple hv_ObjectModel3D, 
      HTuple hv_CamParam, HTuple hv_PoseIn, HTuple hv_GenParamName, HTuple hv_GenParamValue, 
      HTuple hv_Title, HTuple hv_Label, HTuple hv_Information, out HTuple hv_PoseOut)
  {



    // Local iconic variables 

    HObject ho_Image=null, ho_ImageDump=null;

    // Local control variables 

    HTuple ExpTmpLocalVar_gDispObjOffset = new HTuple();
    HTuple ExpTmpLocalVar_gLabelsDecor = new HTuple(), ExpTmpLocalVar_gInfoDecor = new HTuple();
    HTuple ExpTmpLocalVar_gInfoPos = new HTuple(), ExpTmpLocalVar_gTitlePos = new HTuple();
    HTuple ExpTmpLocalVar_gTitleDecor = new HTuple(), ExpTmpLocalVar_gTerminationButtonLabel = new HTuple();
    HTuple ExpTmpLocalVar_gAlphaDeselected = new HTuple();
    HTuple ExpTmpLocalVar_gIsSinglePose = new HTuple(), ExpTmpLocalVar_gUsesOpenGL = new HTuple();
    HTuple hv_Scene3DTest = new HTuple(), hv_Scene3D = new HTuple();
    HTuple hv_WindowHandleBuffer = new HTuple(), hv_TrackballSize = new HTuple();
    HTuple hv_VirtualTrackball = new HTuple(), hv_MouseMapping = new HTuple();
    HTuple hv_WaitForButtonRelease = new HTuple(), hv_MaxNumModels = new HTuple();
    HTuple hv_WindowCenteredRotation = new HTuple(), hv_NumModels = new HTuple();
    HTuple hv_SelectedObject = new HTuple(), hv_ClipRegion = new HTuple();
    HTuple hv_CPLength = new HTuple(), hv_RowNotUsed = new HTuple();
    HTuple hv_ColumnNotUsed = new HTuple(), hv_Width = new HTuple();
    HTuple hv_Height = new HTuple(), hv_WPRow1 = new HTuple();
    HTuple hv_WPColumn1 = new HTuple(), hv_WPRow2 = new HTuple();
    HTuple hv_WPColumn2 = new HTuple(), hv_CamParamValue = new HTuple();
    HTuple hv_CamWidth = new HTuple(), hv_CamHeight = new HTuple();
    HTuple hv_Scale = new HTuple(), hv_Indices = new HTuple();
    HTuple hv_DispBackground = new HTuple(), hv_Mask = new HTuple();
    HTuple hv_Center = new HTuple(), hv_Poses = new HTuple();
    HTuple hv_HomMat3Ds = new HTuple(), hv_Sequence = new HTuple();
    HTuple hv_PoseEstimated = new HTuple(), hv_Font = new HTuple();
    HTuple hv_Exception = new HTuple(), hv_OpenGLInfo = new HTuple();
    HTuple hv_DummyObjectModel3D = new HTuple(), hv_CameraIndexTest = new HTuple();
    HTuple hv_PoseTest = new HTuple(), hv_InstanceIndexTest = new HTuple();
    HTuple hv_MinImageSize = new HTuple(), hv_TrackballRadiusPixel = new HTuple();
    HTuple hv_Ascent = new HTuple(), hv_Descent = new HTuple();
    HTuple hv_TextWidth = new HTuple(), hv_TextHeight = new HTuple();
    HTuple hv_NumChannels = new HTuple(), hv_ColorImage = new HTuple();
    HTuple hv_CameraIndex = new HTuple(), hv_AllInstances = new HTuple();
    HTuple hv_SetLight = new HTuple(), hv_LightParam = new HTuple();
    HTuple hv_LightPosition = new HTuple(), hv_LightKind = new HTuple();
    HTuple hv_LightIndex = new HTuple(), hv_PersistenceParamName = new HTuple();
    HTuple hv_PersistenceParamValue = new HTuple(), hv_AlphaOrig = new HTuple();
    HTuple hv_I = new HTuple(), hv_ParamName = new HTuple();
    HTuple hv_ParamValue = new HTuple(), hv_ParamNameTrunk = new HTuple();
    HTuple hv_Instance = new HTuple(), hv_HomMat3D = new HTuple();
    HTuple hv_Qx = new HTuple(), hv_Qy = new HTuple(), hv_Qz = new HTuple();
    HTuple hv_TBCenter = new HTuple(), hv_TBSize = new HTuple();
    HTuple hv_ButtonHold = new HTuple(), hv_VisualizeTB = new HTuple();
    HTuple hv_MaxIndex = new HTuple(), hv_TrackballCenterRow = new HTuple();
    HTuple hv_TrackballCenterCol = new HTuple(), hv_GraphEvent = new HTuple();
    HTuple hv_Exit = new HTuple(), hv_GraphButtonRow = new HTuple();
    HTuple hv_GraphButtonColumn = new HTuple(), hv_GraphButton = new HTuple();
    HTuple hv_ButtonReleased = new HTuple(), hv_e = new HTuple();
    HTuple   hv_CamParam_COPY_INP_TMP = new HTuple(hv_CamParam);
    HTuple   hv_GenParamName_COPY_INP_TMP = new HTuple(hv_GenParamName);
    HTuple   hv_GenParamValue_COPY_INP_TMP = new HTuple(hv_GenParamValue);
    HTuple   hv_Label_COPY_INP_TMP = new HTuple(hv_Label);
    HTuple   hv_PoseIn_COPY_INP_TMP = new HTuple(hv_PoseIn);

    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Image);
    HOperatorSet.GenEmptyObj(out ho_ImageDump);
    hv_PoseOut = new HTuple();
    try
    {
      //The procedure visualize_object_model_3d can be used to display
      //one or more 3d object models and to interactively modify
      //the object poses by using the mouse.
      //
      //The pose can be modified by moving the mouse while
      //pressing a mouse button. The default settings are:
      //
      // Rotate: Left mouse button
      // Zoom: Shift + Left mouse button (or Center mouse button)
      // Pan: Ctrl + Left mouse button
      //
      //Furthermore, it is possible to select and deselect objects,
      //to decrease the mouse sensitivity, and to toggle the
      //inspection mode (see the description of the generic parameter
      //'inspection_mode' below):
      //
      // (De-)select object(s): Right mouse button
      // Low mouse sensitivity: Alt + Mouse button
      // Toggle inspection mode: Ctrl + Alt + Left mouse button
      //
      //In GenParamName and GenParamValue all generic Parameters
      //of disp_object_model_3d are supported.
      //
      //**********************************************************
      //Define global variables
      //**********************************************************
      //
      //global def tuple gDispObjOffset
      //global def tuple gLabelsDecor
      //global def tuple gInfoDecor
      //global def tuple gInfoPos
      //global def tuple gTitlePos
      //global def tuple gTitleDecor
      //global def tuple gTerminationButtonLabel
      //global def tuple gAlphaDeselected
      //global def tuple gIsSinglePose
      //global def tuple gUsesOpenGL
      //
      //**********************************************************
      //Initialize Handles to enable correct handling in error case
      //**********************************************************
      hv_Scene3DTest.Dispose();
      hv_Scene3DTest = new HTuple();
      hv_Scene3D.Dispose();
      hv_Scene3D = new HTuple();
      hv_WindowHandleBuffer.Dispose();
      hv_WindowHandleBuffer = new HTuple();

      //**********************************************************
      //Some user defines that may be adapted if desired
      //**********************************************************
      //
      //TrackballSize defines the diameter of the trackball in
      //the image with respect to the smaller image dimension.
      hv_TrackballSize.Dispose();
      hv_TrackballSize = 0.8;
      //
      //VirtualTrackball defines the type of virtual trackball that
      //shall be used ('shoemake' or 'bell').
      hv_VirtualTrackball.Dispose();
      hv_VirtualTrackball = "shoemake";
      //VirtualTrackball := 'bell'
      //
      //Functionality of mouse buttons
      //    1: Left Button
      //    2: Middle Button
      //    4: Right Button
      //    5: Left+Right Mousebutton
      //  8+x: Shift + Mousebutton
      // 16+x: Ctrl + Mousebutton
      // 48+x: Ctrl + Alt + Mousebutton
      //in the order [Translate, Rotate, Scale, ScaleAlternative1, ScaleAlternative2, SelectObjects, ToggleSelectionMode]
      hv_MouseMapping.Dispose();
      hv_MouseMapping = new HTuple();
      hv_MouseMapping[0] = 17;
      hv_MouseMapping[1] = 1;
      hv_MouseMapping[2] = 2;
      hv_MouseMapping[3] = 5;
      hv_MouseMapping[4] = 9;
      hv_MouseMapping[5] = 4;
      hv_MouseMapping[6] = 49;
      //
      //The labels of the objects appear next to their projected
      //center. With gDispObjOffset a fixed offset is added
      //                  R,  C
      ExpTmpLocalVar_gDispObjOffset = new HTuple();
      ExpTmpLocalVar_gDispObjOffset[0] = -30;
      ExpTmpLocalVar_gDispObjOffset[1] = 0;
      ExpSetGlobalVar_gDispObjOffset(ExpTmpLocalVar_gDispObjOffset);
      //
      //Customize the decoration of the different text elements
      //              Color,   Box
      ExpTmpLocalVar_gInfoDecor = new HTuple();
      ExpTmpLocalVar_gInfoDecor[0] = "white";
      ExpTmpLocalVar_gInfoDecor[1] = "false";
      ExpSetGlobalVar_gInfoDecor(ExpTmpLocalVar_gInfoDecor);
      ExpTmpLocalVar_gLabelsDecor = new HTuple();
      ExpTmpLocalVar_gLabelsDecor[0] = "white";
      ExpTmpLocalVar_gLabelsDecor[1] = "false";
      ExpSetGlobalVar_gLabelsDecor(ExpTmpLocalVar_gLabelsDecor);
      ExpTmpLocalVar_gTitleDecor = new HTuple();
      ExpTmpLocalVar_gTitleDecor[0] = "black";
      ExpTmpLocalVar_gTitleDecor[1] = "true";
      ExpSetGlobalVar_gTitleDecor(ExpTmpLocalVar_gTitleDecor);
      //
      //Customize the position of some text elements
      //  gInfoPos has one of the values
      //  {'UpperLeft', 'LowerLeft', 'UpperRight'}
      ExpTmpLocalVar_gInfoPos = "LowerLeft";
      ExpSetGlobalVar_gInfoPos(ExpTmpLocalVar_gInfoPos);
      //  gTitlePos has one of the values
      //  {'UpperLeft', 'UpperCenter', 'UpperRight'}
      ExpTmpLocalVar_gTitlePos = "UpperLeft";
      ExpSetGlobalVar_gTitlePos(ExpTmpLocalVar_gTitlePos);
      //Alpha value (=1-transparency) that is used for visualizing
      //the objects that are not selected
      ExpTmpLocalVar_gAlphaDeselected = 0.3;
      ExpSetGlobalVar_gAlphaDeselected(ExpTmpLocalVar_gAlphaDeselected);
      //Customize the label of the continue button
      ExpTmpLocalVar_gTerminationButtonLabel = " Continue ";
      ExpSetGlobalVar_gTerminationButtonLabel(ExpTmpLocalVar_gTerminationButtonLabel);
      //Define if the continue button responds to a single click event or
      //if it responds only if the mouse button is released while being placed
      //over the continue button.
      //'true':  Wait until the continue button has been released.
      //         This should be used to avoid unwanted continuations of
      //         subsequent calls of visualize_object_model_3d, which can
      //         otherwise occur if the mouse button remains pressed while the
      //         next visualization is active.
      //'false': Continue the execution already if the continue button is
      //         pressed. This option allows a fast forwarding through
      //         subsequent calls of visualize_object_model_3d.
      hv_WaitForButtonRelease.Dispose();
      hv_WaitForButtonRelease = "true";
      //Number of 3D Object models that can be selected and handled individually.
      //If there are more models passed then this number, some calculations
      //are performed differently and the individual selection and handling
      //of models is not supported anymore. Note that the value of MaxNumModels
      //can be overwritten with the generic parameter max_num_selectable_models.
      hv_MaxNumModels.Dispose();
      hv_MaxNumModels = 1000;
      //Defines the default for the initial state of the rotation center:
      //(1) The rotation center is fixed in the center of the image and lies
      //    on the surface of the object.
      //(2) The rotation center lies in the center of the object.
      hv_WindowCenteredRotation.Dispose();
      hv_WindowCenteredRotation = 2;
      //
      //**********************************************************
      //
      //Initialize some values
      hv_NumModels.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_NumModels = new HTuple(hv_ObjectModel3D.TupleLength()
          );
      }
      hv_SelectedObject.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_SelectedObject = HTuple.TupleGenConst(
          hv_NumModels,1);
      }
      //
      //Apply some system settings
      // dev_set_preferences(...); only in hdevelop
      // dev_get_preferences(...); only in hdevelop
      // dev_set_preferences(...); only in hdevelop
      hv_ClipRegion.Dispose();
      HOperatorSet.GetSystem("clip_region", out hv_ClipRegion);
      HOperatorSet.SetSystem("clip_region", "false");
      dev_update_off();
      //
      //Check if GenParamName matches GenParamValue
      if ((int)(new HTuple((new HTuple(hv_GenParamName_COPY_INP_TMP.TupleLength()
          )).TupleNotEqual(new HTuple(hv_GenParamValue_COPY_INP_TMP.TupleLength()
          )))) != 0)
      {
        throw new HalconException("Number of generic parameters does not match number of generic parameter values");
      }
      //
      try
      {
        //
        //Refactor camera parameters to fit to window size
        //
        hv_CPLength.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_CPLength = new HTuple(hv_CamParam_COPY_INP_TMP.TupleLength()
            );
        }
        hv_RowNotUsed.Dispose();hv_ColumnNotUsed.Dispose();hv_Width.Dispose();hv_Height.Dispose();
        HOperatorSet.GetWindowExtents(hv_ExpDefaultWinHandle, out hv_RowNotUsed, 
            out hv_ColumnNotUsed, out hv_Width, out hv_Height);
        hv_WPRow1.Dispose();hv_WPColumn1.Dispose();hv_WPRow2.Dispose();hv_WPColumn2.Dispose();
        HOperatorSet.GetPart(hv_ExpDefaultWinHandle, out hv_WPRow1, out hv_WPColumn1, 
            out hv_WPRow2, out hv_WPColumn2);
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.SetPart(hv_ExpDefaultWinHandle, 0, 0, hv_Height-1, hv_Width-1);
        }
        if ((int)(new HTuple(hv_CPLength.TupleEqual(0))) != 0)
        {
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_CamParam_COPY_INP_TMP.Dispose();
          gen_cam_par_area_scan_division(0.06, 0, 8.5e-6, 8.5e-6, hv_Width/2, hv_Height/2, 
              hv_Width, hv_Height, out hv_CamParam_COPY_INP_TMP);
          }
        }
        else
        {
          hv_CamParamValue.Dispose();
          get_cam_par_data(hv_CamParam_COPY_INP_TMP, (((((new HTuple("sx")).TupleConcat(
              "sy")).TupleConcat("cx")).TupleConcat("cy")).TupleConcat("image_width")).TupleConcat(
              "image_height"), out hv_CamParamValue);
          hv_CamWidth.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_CamWidth = ((hv_CamParamValue.TupleSelect(
              4))).TupleReal();
          }
          hv_CamHeight.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_CamHeight = ((hv_CamParamValue.TupleSelect(
              5))).TupleReal();
          }
          hv_Scale.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Scale = ((((hv_Width/hv_CamWidth)).TupleConcat(
              hv_Height/hv_CamHeight))).TupleMin();
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          HTuple ExpTmpOutVar_0;
          set_cam_par_data(hv_CamParam_COPY_INP_TMP, "sx", (hv_CamParamValue.TupleSelect(
              0))/hv_Scale, out ExpTmpOutVar_0);
          hv_CamParam_COPY_INP_TMP.Dispose();
          hv_CamParam_COPY_INP_TMP = ExpTmpOutVar_0;
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          HTuple ExpTmpOutVar_0;
          set_cam_par_data(hv_CamParam_COPY_INP_TMP, "sy", (hv_CamParamValue.TupleSelect(
              1))/hv_Scale, out ExpTmpOutVar_0);
          hv_CamParam_COPY_INP_TMP.Dispose();
          hv_CamParam_COPY_INP_TMP = ExpTmpOutVar_0;
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          HTuple ExpTmpOutVar_0;
          set_cam_par_data(hv_CamParam_COPY_INP_TMP, "cx", (hv_CamParamValue.TupleSelect(
              2))*hv_Scale, out ExpTmpOutVar_0);
          hv_CamParam_COPY_INP_TMP.Dispose();
          hv_CamParam_COPY_INP_TMP = ExpTmpOutVar_0;
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          HTuple ExpTmpOutVar_0;
          set_cam_par_data(hv_CamParam_COPY_INP_TMP, "cy", (hv_CamParamValue.TupleSelect(
              3))*hv_Scale, out ExpTmpOutVar_0);
          hv_CamParam_COPY_INP_TMP.Dispose();
          hv_CamParam_COPY_INP_TMP = ExpTmpOutVar_0;
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          HTuple ExpTmpOutVar_0;
          set_cam_par_data(hv_CamParam_COPY_INP_TMP, "image_width", (((hv_CamParamValue.TupleSelect(
              4))*hv_Scale)).TupleInt(), out ExpTmpOutVar_0);
          hv_CamParam_COPY_INP_TMP.Dispose();
          hv_CamParam_COPY_INP_TMP = ExpTmpOutVar_0;
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          HTuple ExpTmpOutVar_0;
          set_cam_par_data(hv_CamParam_COPY_INP_TMP, "image_height", (((hv_CamParamValue.TupleSelect(
              5))*hv_Scale)).TupleInt(), out ExpTmpOutVar_0);
          hv_CamParam_COPY_INP_TMP.Dispose();
          hv_CamParam_COPY_INP_TMP = ExpTmpOutVar_0;
          }
        }
        //
        //Check the generic parameters for max_num_selectable_models
        //(Note that the default is set above to MaxNumModels := 1000)
        hv_Indices.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Indices = hv_GenParamName_COPY_INP_TMP.TupleFind(
            "max_num_selectable_models");
        }
        if ((int)((new HTuple(hv_Indices.TupleNotEqual(-1))).TupleAnd(new HTuple(hv_Indices.TupleNotEqual(
            new HTuple())))) != 0)
        {
          if ((int)(((hv_GenParamValue_COPY_INP_TMP.TupleSelect(hv_Indices.TupleSelect(
              0)))).TupleIsNumber()) != 0)
          {
            if ((int)(new HTuple(((((((hv_GenParamValue_COPY_INP_TMP.TupleSelect(
                hv_Indices.TupleSelect(0)))).TupleNumber())).TupleInt())).TupleLess(
                1))) != 0)
            {
              //Wrong parameter value: Only integer values greater than 0 are allowed
              throw new HalconException("Wrong value for parameter 'max_num_selectable_models' (must be an integer value greater than 0)");
            }
          }
          else
          {
            //Wrong parameter value: Only integer values greater than 0 are allowed
            throw new HalconException("Wrong value for parameter 'max_num_selectable_models' (must be an integer value greater than 0)");
          }
          hv_MaxNumModels.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_MaxNumModels = ((((hv_GenParamValue_COPY_INP_TMP.TupleSelect(
              hv_Indices.TupleSelect(0)))).TupleNumber())).TupleInt();
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_GenParamName = hv_GenParamName_COPY_INP_TMP.TupleRemove(
              hv_Indices);
          hv_GenParamName_COPY_INP_TMP.Dispose();
          hv_GenParamName_COPY_INP_TMP = ExpTmpLocalVar_GenParamName;
          }
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_GenParamValue = hv_GenParamValue_COPY_INP_TMP.TupleRemove(
              hv_Indices);
          hv_GenParamValue_COPY_INP_TMP.Dispose();
          hv_GenParamValue_COPY_INP_TMP = ExpTmpLocalVar_GenParamValue;
          }
          }
        }
        //
        //Check the generic parameters for window_centered_rotation
        //(Note that the default is set above to WindowCenteredRotation := 2)
        hv_Indices.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Indices = hv_GenParamName_COPY_INP_TMP.TupleFind(
            "inspection_mode");
        }
        if ((int)((new HTuple(hv_Indices.TupleNotEqual(-1))).TupleAnd(new HTuple(hv_Indices.TupleNotEqual(
            new HTuple())))) != 0)
        {
          if ((int)(new HTuple(((hv_GenParamValue_COPY_INP_TMP.TupleSelect(hv_Indices.TupleSelect(
              0)))).TupleEqual("surface"))) != 0)
          {
            hv_WindowCenteredRotation.Dispose();
            hv_WindowCenteredRotation = 1;
          }
          else if ((int)(new HTuple(((hv_GenParamValue_COPY_INP_TMP.TupleSelect(
              hv_Indices.TupleSelect(0)))).TupleEqual("standard"))) != 0)
          {
            hv_WindowCenteredRotation.Dispose();
            hv_WindowCenteredRotation = 2;
          }
          else
          {
            //Wrong parameter value, use default value
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_GenParamName = hv_GenParamName_COPY_INP_TMP.TupleRemove(
              hv_Indices);
          hv_GenParamName_COPY_INP_TMP.Dispose();
          hv_GenParamName_COPY_INP_TMP = ExpTmpLocalVar_GenParamName;
          }
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_GenParamValue = hv_GenParamValue_COPY_INP_TMP.TupleRemove(
              hv_Indices);
          hv_GenParamValue_COPY_INP_TMP.Dispose();
          hv_GenParamValue_COPY_INP_TMP = ExpTmpLocalVar_GenParamValue;
          }
          }
        }
        //
        //Check the generic parameters for disp_background
        //(The former parameter name 'use_background' is still supported
        // for compatibility reasons)
        hv_DispBackground.Dispose();
        hv_DispBackground = "false";
        if ((int)(new HTuple((new HTuple(hv_GenParamName_COPY_INP_TMP.TupleLength()
            )).TupleGreater(0))) != 0)
        {
          hv_Mask.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Mask = ((hv_GenParamName_COPY_INP_TMP.TupleEqualElem(
              "disp_background"))).TupleOr(hv_GenParamName_COPY_INP_TMP.TupleEqualElem(
              "use_background"));
          }
          hv_Indices.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Indices = hv_Mask.TupleFind(
              1);
          }
        }
        else
        {
          hv_Indices.Dispose();
          hv_Indices = -1;
        }
        if ((int)((new HTuple(hv_Indices.TupleNotEqual(-1))).TupleAnd(new HTuple(hv_Indices.TupleNotEqual(
            new HTuple())))) != 0)
        {
          hv_DispBackground.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_DispBackground = hv_GenParamValue_COPY_INP_TMP.TupleSelect(
              hv_Indices.TupleSelect(0));
          }
          if ((int)((new HTuple(hv_DispBackground.TupleNotEqual("true"))).TupleAnd(
              new HTuple(hv_DispBackground.TupleNotEqual("false")))) != 0)
          {
            //Wrong parameter value: Only 'true' and 'false' are allowed
            throw new HalconException("Wrong value for parameter 'disp_background' (must be either 'true' or 'false')");
          }
          //Note the the background is handled explicitly in this procedure
          //and therefore, the parameter is removed from the list of
          //parameters and disp_background is always set to true (see below)
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_GenParamName = hv_GenParamName_COPY_INP_TMP.TupleRemove(
              hv_Indices);
          hv_GenParamName_COPY_INP_TMP.Dispose();
          hv_GenParamName_COPY_INP_TMP = ExpTmpLocalVar_GenParamName;
          }
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_GenParamValue = hv_GenParamValue_COPY_INP_TMP.TupleRemove(
              hv_Indices);
          hv_GenParamValue_COPY_INP_TMP.Dispose();
          hv_GenParamValue_COPY_INP_TMP = ExpTmpLocalVar_GenParamValue;
          }
          }
        }
        //
        //Read and check the parameter Label for each object
        if ((int)(new HTuple((new HTuple(hv_Label_COPY_INP_TMP.TupleLength())).TupleEqual(
            0))) != 0)
        {
          hv_Label_COPY_INP_TMP.Dispose();
          hv_Label_COPY_INP_TMP = 0;
        }
        else if ((int)(new HTuple((new HTuple(hv_Label_COPY_INP_TMP.TupleLength()
            )).TupleEqual(1))) != 0)
        {
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Label = HTuple.TupleGenConst(
              hv_NumModels,hv_Label_COPY_INP_TMP);
          hv_Label_COPY_INP_TMP.Dispose();
          hv_Label_COPY_INP_TMP = ExpTmpLocalVar_Label;
          }
          }
        }
        else
        {
          if ((int)(new HTuple((new HTuple(hv_Label_COPY_INP_TMP.TupleLength())).TupleNotEqual(
              hv_NumModels))) != 0)
          {
            //Number of elements in Label does not match
            //the number of object models.
            throw new HalconException(((new HTuple(new HTuple("Number of elements in Label (")+(new HTuple(hv_Label_COPY_INP_TMP.TupleLength()
                )))+") does not match the number of object models(")+hv_NumModels)+").");
          }
        }
        //
        //Read and check the parameter PoseIn for each object
        hv_Center.Dispose();
        get_object_models_center(hv_ObjectModel3D, out hv_Center);
        if ((int)(new HTuple(hv_Center.TupleEqual(new HTuple()))) != 0)
        {
          hv_Center.Dispose();
          hv_Center = new HTuple();
          hv_Center[0] = 0;
          hv_Center[1] = 0;
          hv_Center[2] = 0;
        }
        if ((int)(new HTuple((new HTuple(hv_PoseIn_COPY_INP_TMP.TupleLength())).TupleEqual(
            0))) != 0)
        {
          //If no pose was specified by the caller, automatically calculate
          //a pose that is appropriate for the visualization.
          //Set the initial model reference pose. The orientation is parallel
          //to the object coordinate system, the position is at the center
          //of gravity of all models.
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_PoseIn_COPY_INP_TMP.Dispose();
          HOperatorSet.CreatePose(-(hv_Center.TupleSelect(0)), -(hv_Center.TupleSelect(
              1)), -(hv_Center.TupleSelect(2)), 0, 0, 0, "Rp+T", "gba", "point", 
              out hv_PoseIn_COPY_INP_TMP);
          }
          hv_PoseEstimated.Dispose();
          determine_optimum_pose_distance(hv_ObjectModel3D, hv_CamParam_COPY_INP_TMP, 
              0.9, hv_PoseIn_COPY_INP_TMP, out hv_PoseEstimated);
          hv_Poses.Dispose();
          hv_Poses = new HTuple();
          hv_HomMat3Ds.Dispose();
          hv_HomMat3Ds = new HTuple();
          hv_Sequence.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Sequence = HTuple.TupleGenSequence(
              0,(hv_NumModels*7)-1,1);
          }
          hv_Poses.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Poses = hv_PoseEstimated.TupleSelect(
              hv_Sequence%7);
          }
          ExpTmpLocalVar_gIsSinglePose = 1;
          ExpSetGlobalVar_gIsSinglePose(ExpTmpLocalVar_gIsSinglePose);
        }
        else if ((int)(new HTuple((new HTuple(hv_PoseIn_COPY_INP_TMP.TupleLength()
            )).TupleEqual(7))) != 0)
        {
          hv_Poses.Dispose();
          hv_Poses = new HTuple();
          hv_HomMat3Ds.Dispose();
          hv_HomMat3Ds = new HTuple();
          hv_Sequence.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Sequence = HTuple.TupleGenSequence(
              0,(hv_NumModels*7)-1,1);
          }
          hv_Poses.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Poses = hv_PoseIn_COPY_INP_TMP.TupleSelect(
              hv_Sequence%7);
          }
          ExpTmpLocalVar_gIsSinglePose = 1;
          ExpSetGlobalVar_gIsSinglePose(ExpTmpLocalVar_gIsSinglePose);
        }
        else
        {
          if ((int)(new HTuple((new HTuple(hv_PoseIn_COPY_INP_TMP.TupleLength())).TupleNotEqual(
              (new HTuple(hv_ObjectModel3D.TupleLength()))*7))) != 0)
          {
            //Wrong number of values of input control parameter 'PoseIn'
            throw new HalconException("Wrong number of values of input control parameter 'PoseIn'.");
          }
          else
          {
            hv_Poses.Dispose();
            hv_Poses = new HTuple(hv_PoseIn_COPY_INP_TMP);
          }
          ExpTmpLocalVar_gIsSinglePose = 0;
          ExpSetGlobalVar_gIsSinglePose(ExpTmpLocalVar_gIsSinglePose);
        }

        //
        //Open (invisible) buffer window to avoid flickering
        //open_window(...);
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.SetPart(hv_ExpDefaultWinHandle, 0, 0, hv_Height-1, hv_Width-1);
        }
        hv_Font.Dispose();
        HOperatorSet.GetFont(hv_ExpDefaultWinHandle, out hv_Font);
        try
        {
          HOperatorSet.SetFont(hv_ExpDefaultWinHandle, hv_Font);
        }
        // catch (Exception) 
        catch (HalconException HDevExpDefaultException2)
        {
          HDevExpDefaultException2.ToHTuple(out hv_Exception);
        }
        //
        // Is OpenGL available and should it be used?
        ExpTmpLocalVar_gUsesOpenGL = "true";
        ExpSetGlobalVar_gUsesOpenGL(ExpTmpLocalVar_gUsesOpenGL);
        hv_Indices.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Indices = hv_GenParamName_COPY_INP_TMP.TupleFind(
            "opengl");
        }
        if ((int)((new HTuple(hv_Indices.TupleNotEqual(-1))).TupleAnd(new HTuple(hv_Indices.TupleNotEqual(
            new HTuple())))) != 0)
        {
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          ExpTmpLocalVar_gUsesOpenGL = hv_GenParamValue_COPY_INP_TMP.TupleSelect(
              hv_Indices.TupleSelect(0));
          }
          ExpSetGlobalVar_gUsesOpenGL(ExpTmpLocalVar_gUsesOpenGL);
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_GenParamName = hv_GenParamName_COPY_INP_TMP.TupleRemove(
              hv_Indices);
          hv_GenParamName_COPY_INP_TMP.Dispose();
          hv_GenParamName_COPY_INP_TMP = ExpTmpLocalVar_GenParamName;
          }
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_GenParamValue = hv_GenParamValue_COPY_INP_TMP.TupleRemove(
              hv_Indices);
          hv_GenParamValue_COPY_INP_TMP.Dispose();
          hv_GenParamValue_COPY_INP_TMP = ExpTmpLocalVar_GenParamValue;
          }
          }
          if ((int)((new HTuple(ExpGetGlobalVar_gUsesOpenGL().TupleNotEqual("true"))).TupleAnd(
              new HTuple(ExpGetGlobalVar_gUsesOpenGL().TupleNotEqual("false")))) != 0)
          {
            //Wrong parameter value: Only 'true' and 'false' are allowed
            throw new HalconException("Wrong value for parameter 'opengl' (must be either 'true' or 'false')");
          }
        }
        if ((int)(new HTuple(ExpGetGlobalVar_gUsesOpenGL().TupleEqual("true"))) != 0)
        {
          hv_OpenGLInfo.Dispose();
          HOperatorSet.GetSystem("opengl_info", out hv_OpenGLInfo);
          if ((int)(new HTuple(hv_OpenGLInfo.TupleEqual("No OpenGL support included."))) != 0)
          {
            ExpTmpLocalVar_gUsesOpenGL = "false";
            ExpSetGlobalVar_gUsesOpenGL(ExpTmpLocalVar_gUsesOpenGL);
          }
          else
          {
            hv_DummyObjectModel3D.Dispose();
            HOperatorSet.GenObjectModel3dFromPoints(0, 0, 0, out hv_DummyObjectModel3D);
            hv_Scene3DTest.Dispose();
            HOperatorSet.CreateScene3d(out hv_Scene3DTest);
            hv_CameraIndexTest.Dispose();
            HOperatorSet.AddScene3dCamera(hv_Scene3DTest, hv_CamParam_COPY_INP_TMP, 
                out hv_CameraIndexTest);
            hv_PoseTest.Dispose();
            determine_optimum_pose_distance(hv_DummyObjectModel3D, hv_CamParam_COPY_INP_TMP, 
                0.9, ((((((new HTuple(0)).TupleConcat(0)).TupleConcat(0)).TupleConcat(
                0)).TupleConcat(0)).TupleConcat(0)).TupleConcat(0), out hv_PoseTest);
            hv_InstanceIndexTest.Dispose();
            HOperatorSet.AddScene3dInstance(hv_Scene3DTest, hv_DummyObjectModel3D, 
                hv_PoseTest, out hv_InstanceIndexTest);
            try
            {
              HOperatorSet.DisplayScene3d(hv_ExpDefaultWinHandle, hv_Scene3DTest, 
                  hv_InstanceIndexTest);
            }
            // catch (Exception) 
            catch (HalconException HDevExpDefaultException2)
            {
              HDevExpDefaultException2.ToHTuple(out hv_Exception);
              ExpTmpLocalVar_gUsesOpenGL = "false";
              ExpSetGlobalVar_gUsesOpenGL(ExpTmpLocalVar_gUsesOpenGL);
            }
            HOperatorSet.ClearScene3d(hv_Scene3DTest);
            hv_Scene3DTest.Dispose();
            hv_Scene3DTest = new HTuple();
            HOperatorSet.ClearObjectModel3d(hv_DummyObjectModel3D);
          }
        }
        //
        //Compute the trackball
        hv_MinImageSize.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_MinImageSize = ((hv_Width.TupleConcat(
            hv_Height))).TupleMin();
        }
        hv_TrackballRadiusPixel.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_TrackballRadiusPixel = (hv_TrackballSize*hv_MinImageSize)/2.0;
        }
        //
        //Measure the text extents for the continue button in the
        //graphics window
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Ascent.Dispose();hv_Descent.Dispose();hv_TextWidth.Dispose();hv_TextHeight.Dispose();
        HOperatorSet.GetStringExtents(hv_ExpDefaultWinHandle, ExpGetGlobalVar_gTerminationButtonLabel()+"  ", 
            out hv_Ascent, out hv_Descent, out hv_TextWidth, out hv_TextHeight);
        }
        //
        //Store background image
        if ((int)(new HTuple(hv_DispBackground.TupleEqual("false"))) != 0)
        {
          HOperatorSet.ClearWindow(hv_ExpDefaultWinHandle);
        }
        ho_Image.Dispose();
        HOperatorSet.DumpWindowImage(out ho_Image, hv_ExpDefaultWinHandle);
        //Special treatment for color background images necessary
        hv_NumChannels.Dispose();
        HOperatorSet.CountChannels(ho_Image, out hv_NumChannels);
        hv_ColorImage.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_ColorImage = new HTuple(hv_NumChannels.TupleEqual(
            3));
        }
        //
        hv_Scene3D.Dispose();
        HOperatorSet.CreateScene3d(out hv_Scene3D);
        hv_CameraIndex.Dispose();
        HOperatorSet.AddScene3dCamera(hv_Scene3D, hv_CamParam_COPY_INP_TMP, out hv_CameraIndex);
        hv_AllInstances.Dispose();
        HOperatorSet.AddScene3dInstance(hv_Scene3D, hv_ObjectModel3D, hv_Poses, out hv_AllInstances);
        //Always set 'disp_background' to true,  because it is handled explicitly
        //in this procedure (see above)
        HOperatorSet.SetScene3dParam(hv_Scene3D, "disp_background", "true");
        //Check if we have to set light specific parameters
        hv_SetLight.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_SetLight = new HTuple(hv_GenParamName_COPY_INP_TMP.TupleRegexpTest(
            "light_"));
        }
        if ((int)(hv_SetLight) != 0)
        {
          //set position of light source
          hv_Indices.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Indices = hv_GenParamName_COPY_INP_TMP.TupleFind(
              "light_position");
          }
          if ((int)((new HTuple(hv_Indices.TupleNotEqual(-1))).TupleAnd(new HTuple(hv_Indices.TupleNotEqual(
              new HTuple())))) != 0)
          {
            //If multiple light positions are given, use the last one
            hv_LightParam.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_LightParam = ((((hv_GenParamValue_COPY_INP_TMP.TupleSelect(
                hv_Indices.TupleSelect((new HTuple(hv_Indices.TupleLength()))-1)))).TupleSplit(
                new HTuple(", ")))).TupleNumber();
            }
            if ((int)(new HTuple((new HTuple(hv_LightParam.TupleLength())).TupleNotEqual(
                4))) != 0)
            {
              throw new HalconException("light_position must be given as a string that contains four space separated floating point numbers");
            }
            hv_LightPosition.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_LightPosition = hv_LightParam.TupleSelectRange(
                0,2);
            }
            hv_LightKind.Dispose();
            hv_LightKind = "point_light";
            if ((int)(new HTuple(((hv_LightParam.TupleSelect(3))).TupleEqual(0))) != 0)
            {
              hv_LightKind.Dispose();
              hv_LightKind = "directional_light";
            }
            //Currently, only one light source is supported
            HOperatorSet.RemoveScene3dLight(hv_Scene3D, 0);
            hv_LightIndex.Dispose();
            HOperatorSet.AddScene3dLight(hv_Scene3D, hv_LightPosition, hv_LightKind, 
                out hv_LightIndex);
            {
            HTuple ExpTmpOutVar_0;
            HOperatorSet.TupleRemove(hv_GenParamName_COPY_INP_TMP, hv_Indices, out ExpTmpOutVar_0);
            hv_GenParamName_COPY_INP_TMP.Dispose();
            hv_GenParamName_COPY_INP_TMP = ExpTmpOutVar_0;
            }
            {
            HTuple ExpTmpOutVar_0;
            HOperatorSet.TupleRemove(hv_GenParamValue_COPY_INP_TMP, hv_Indices, out ExpTmpOutVar_0);
            hv_GenParamValue_COPY_INP_TMP.Dispose();
            hv_GenParamValue_COPY_INP_TMP = ExpTmpOutVar_0;
            }
          }
          //set ambient part of light source
          hv_Indices.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Indices = hv_GenParamName_COPY_INP_TMP.TupleFind(
              "light_ambient");
          }
          if ((int)((new HTuple(hv_Indices.TupleNotEqual(-1))).TupleAnd(new HTuple(hv_Indices.TupleNotEqual(
              new HTuple())))) != 0)
          {
            //If the ambient part is set multiple times, use the last setting
            hv_LightParam.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_LightParam = ((((hv_GenParamValue_COPY_INP_TMP.TupleSelect(
                hv_Indices.TupleSelect((new HTuple(hv_Indices.TupleLength()))-1)))).TupleSplit(
                new HTuple(", ")))).TupleNumber();
            }
            if ((int)(new HTuple((new HTuple(hv_LightParam.TupleLength())).TupleLess(
                3))) != 0)
            {
              throw new HalconException("light_ambient must be given as a string that contains three space separated floating point numbers");
            }
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            HOperatorSet.SetScene3dLightParam(hv_Scene3D, 0, "ambient", hv_LightParam.TupleSelectRange(
                0,2));
            }
            {
            HTuple ExpTmpOutVar_0;
            HOperatorSet.TupleRemove(hv_GenParamName_COPY_INP_TMP, hv_Indices, out ExpTmpOutVar_0);
            hv_GenParamName_COPY_INP_TMP.Dispose();
            hv_GenParamName_COPY_INP_TMP = ExpTmpOutVar_0;
            }
            {
            HTuple ExpTmpOutVar_0;
            HOperatorSet.TupleRemove(hv_GenParamValue_COPY_INP_TMP, hv_Indices, out ExpTmpOutVar_0);
            hv_GenParamValue_COPY_INP_TMP.Dispose();
            hv_GenParamValue_COPY_INP_TMP = ExpTmpOutVar_0;
            }
          }
          //Set diffuse part of light source
          hv_Indices.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Indices = hv_GenParamName_COPY_INP_TMP.TupleFind(
              "light_diffuse");
          }
          if ((int)((new HTuple(hv_Indices.TupleNotEqual(-1))).TupleAnd(new HTuple(hv_Indices.TupleNotEqual(
              new HTuple())))) != 0)
          {
            //If the diffuse part is set multiple times, use the last setting
            hv_LightParam.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_LightParam = ((((hv_GenParamValue_COPY_INP_TMP.TupleSelect(
                hv_Indices.TupleSelect((new HTuple(hv_Indices.TupleLength()))-1)))).TupleSplit(
                new HTuple(", ")))).TupleNumber();
            }
            if ((int)(new HTuple((new HTuple(hv_LightParam.TupleLength())).TupleLess(
                3))) != 0)
            {
              throw new HalconException("light_diffuse must be given as a string that contains three space separated floating point numbers");
            }
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            HOperatorSet.SetScene3dLightParam(hv_Scene3D, 0, "diffuse", hv_LightParam.TupleSelectRange(
                0,2));
            }
            {
            HTuple ExpTmpOutVar_0;
            HOperatorSet.TupleRemove(hv_GenParamName_COPY_INP_TMP, hv_Indices, out ExpTmpOutVar_0);
            hv_GenParamName_COPY_INP_TMP.Dispose();
            hv_GenParamName_COPY_INP_TMP = ExpTmpOutVar_0;
            }
            {
            HTuple ExpTmpOutVar_0;
            HOperatorSet.TupleRemove(hv_GenParamValue_COPY_INP_TMP, hv_Indices, out ExpTmpOutVar_0);
            hv_GenParamValue_COPY_INP_TMP.Dispose();
            hv_GenParamValue_COPY_INP_TMP = ExpTmpOutVar_0;
            }
          }
        }
        //
        //Handle persistence parameters separately because persistence will
        //only be activated immediately before leaving the visualization
        //procedure
        hv_PersistenceParamName.Dispose();
        hv_PersistenceParamName = new HTuple();
        hv_PersistenceParamValue.Dispose();
        hv_PersistenceParamValue = new HTuple();
        //Set position of light source
        hv_Indices.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Indices = hv_GenParamName_COPY_INP_TMP.TupleFind(
            "object_index_persistence");
        }
        if ((int)((new HTuple(hv_Indices.TupleNotEqual(-1))).TupleAnd(new HTuple(hv_Indices.TupleNotEqual(
            new HTuple())))) != 0)
        {
          if ((int)(new HTuple(((hv_GenParamValue_COPY_INP_TMP.TupleSelect(hv_Indices.TupleSelect(
              (new HTuple(hv_Indices.TupleLength()))-1)))).TupleEqual("true"))) != 0)
          {
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            {
            HTuple 
              ExpTmpLocalVar_PersistenceParamName = hv_PersistenceParamName.TupleConcat(
                "object_index_persistence");
            hv_PersistenceParamName.Dispose();
            hv_PersistenceParamName = ExpTmpLocalVar_PersistenceParamName;
            }
            }
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            {
            HTuple 
              ExpTmpLocalVar_PersistenceParamValue = hv_PersistenceParamValue.TupleConcat(
                "true");
            hv_PersistenceParamValue.Dispose();
            hv_PersistenceParamValue = ExpTmpLocalVar_PersistenceParamValue;
            }
            }
          }
          else if ((int)(new HTuple(((hv_GenParamValue_COPY_INP_TMP.TupleSelect(
              hv_Indices.TupleSelect((new HTuple(hv_Indices.TupleLength()))-1)))).TupleEqual(
              "false"))) != 0)
          {
          }
          else
          {
            throw new HalconException("Wrong value for parameter 'object_index_persistence' (must be either 'true' or 'false')");
          }
          {
          HTuple ExpTmpOutVar_0;
          HOperatorSet.TupleRemove(hv_GenParamName_COPY_INP_TMP, hv_Indices, out ExpTmpOutVar_0);
          hv_GenParamName_COPY_INP_TMP.Dispose();
          hv_GenParamName_COPY_INP_TMP = ExpTmpOutVar_0;
          }
          {
          HTuple ExpTmpOutVar_0;
          HOperatorSet.TupleRemove(hv_GenParamValue_COPY_INP_TMP, hv_Indices, out ExpTmpOutVar_0);
          hv_GenParamValue_COPY_INP_TMP.Dispose();
          hv_GenParamValue_COPY_INP_TMP = ExpTmpOutVar_0;
          }
        }
        hv_Indices.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Indices = hv_GenParamName_COPY_INP_TMP.TupleFind(
            "depth_persistence");
        }
        if ((int)((new HTuple(hv_Indices.TupleNotEqual(-1))).TupleAnd(new HTuple(hv_Indices.TupleNotEqual(
            new HTuple())))) != 0)
        {
          if ((int)(new HTuple(((hv_GenParamValue_COPY_INP_TMP.TupleSelect(hv_Indices.TupleSelect(
              (new HTuple(hv_Indices.TupleLength()))-1)))).TupleEqual("true"))) != 0)
          {
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            {
            HTuple 
              ExpTmpLocalVar_PersistenceParamName = hv_PersistenceParamName.TupleConcat(
                "depth_persistence");
            hv_PersistenceParamName.Dispose();
            hv_PersistenceParamName = ExpTmpLocalVar_PersistenceParamName;
            }
            }
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            {
            HTuple 
              ExpTmpLocalVar_PersistenceParamValue = hv_PersistenceParamValue.TupleConcat(
                "true");
            hv_PersistenceParamValue.Dispose();
            hv_PersistenceParamValue = ExpTmpLocalVar_PersistenceParamValue;
            }
            }
          }
          else if ((int)(new HTuple(((hv_GenParamValue_COPY_INP_TMP.TupleSelect(
              hv_Indices.TupleSelect((new HTuple(hv_Indices.TupleLength()))-1)))).TupleEqual(
              "false"))) != 0)
          {
          }
          else
          {
            throw new HalconException("Wrong value for parameter 'depth_persistence' (must be either 'true' or 'false')");
          }
          {
          HTuple ExpTmpOutVar_0;
          HOperatorSet.TupleRemove(hv_GenParamName_COPY_INP_TMP, hv_Indices, out ExpTmpOutVar_0);
          hv_GenParamName_COPY_INP_TMP.Dispose();
          hv_GenParamName_COPY_INP_TMP = ExpTmpOutVar_0;
          }
          {
          HTuple ExpTmpOutVar_0;
          HOperatorSet.TupleRemove(hv_GenParamValue_COPY_INP_TMP, hv_Indices, out ExpTmpOutVar_0);
          hv_GenParamValue_COPY_INP_TMP.Dispose();
          hv_GenParamValue_COPY_INP_TMP = ExpTmpOutVar_0;
          }
        }
        //
        //Parse the generic parameters
        //- First, all parameters that are understood by set_scene_3d_instance_param
        hv_AlphaOrig.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_AlphaOrig = HTuple.TupleGenConst(
            hv_NumModels,1);
        }
        for (hv_I=0; (int)hv_I<=(int)((new HTuple(hv_GenParamName_COPY_INP_TMP.TupleLength()
            ))-1); hv_I = (int)hv_I + 1)
        {
          hv_ParamName.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_ParamName = hv_GenParamName_COPY_INP_TMP.TupleSelect(
              hv_I);
          }
          hv_ParamValue.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_ParamValue = hv_GenParamValue_COPY_INP_TMP.TupleSelect(
              hv_I);
          }
          //Check if this parameter is understood by set_scene_3d_param
          if ((int)(new HTuple(hv_ParamName.TupleEqual("alpha"))) != 0)
          {
            hv_AlphaOrig.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_AlphaOrig = HTuple.TupleGenConst(
                hv_NumModels,hv_ParamValue);
            }
          }
          try
          {
            HOperatorSet.SetScene3dParam(hv_Scene3D, hv_ParamName, hv_ParamValue);
            continue;
          }
          // catch (Exception) 
          catch (HalconException HDevExpDefaultException2)
          {
            HDevExpDefaultException2.ToHTuple(out hv_Exception);
            if ((int)((new HTuple(((hv_Exception.TupleSelect(0))).TupleEqual(1203))).TupleOr(
                new HTuple(((hv_Exception.TupleSelect(0))).TupleEqual(1303)))) != 0)
            {
              throw new HalconException((("Wrong type or value for parameter "+hv_ParamName)+": ")+hv_ParamValue);
            }
          }
          //Check if it is a parameter that is valid for only one instance
          //and therefore can be set only with set_scene_3d_instance_param
          hv_ParamNameTrunk.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_ParamNameTrunk = hv_ParamName.TupleRegexpReplace(
              "_\\d+$","");
          }
          if ((int)(new HTuple(hv_ParamName.TupleEqual(hv_ParamNameTrunk))) != 0)
          {
            hv_Instance.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_Instance = HTuple.TupleGenSequence(
                0,hv_NumModels-1,1);
            }
          }
          else
          {
            hv_Instance.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_Instance = ((hv_ParamName.TupleRegexpReplace(
                ("^"+hv_ParamNameTrunk)+"_(\\d+)$","$1"))).TupleNumber();
            }
            if ((int)((new HTuple(hv_Instance.TupleLess(0))).TupleOr(new HTuple(hv_Instance.TupleGreater(
                hv_NumModels-1)))) != 0)
            {
              throw new HalconException(("Parameter "+hv_ParamName)+" refers to a non existing 3D object model");
            }
          }
          try
          {
            HOperatorSet.SetScene3dInstanceParam(hv_Scene3D, hv_Instance, hv_ParamNameTrunk, 
                hv_ParamValue);
          }
          // catch (Exception) 
          catch (HalconException HDevExpDefaultException2)
          {
            HDevExpDefaultException2.ToHTuple(out hv_Exception);
            if ((int)((new HTuple(((hv_Exception.TupleSelect(0))).TupleEqual(1204))).TupleOr(
                new HTuple(((hv_Exception.TupleSelect(0))).TupleEqual(1304)))) != 0)
            {
              throw new HalconException((("Wrong type or value for parameter "+hv_ParamName)+": ")+hv_ParamValue);
            }
            else if ((int)((new HTuple(((hv_Exception.TupleSelect(0))).TupleEqual(
                1203))).TupleOr(new HTuple(((hv_Exception.TupleSelect(0))).TupleEqual(
                1303)))) != 0)
            {
              throw new HalconException("Wrong parameter name "+hv_ParamName);
            }
            else
            {
              throw new HalconException(hv_Exception);
            }
          }
          if ((int)(new HTuple(hv_ParamNameTrunk.TupleEqual("alpha"))) != 0)
          {
            if (hv_AlphaOrig == null)
              hv_AlphaOrig = new HTuple();
            hv_AlphaOrig[hv_Instance] = hv_ParamValue;
          }
        }
        //
        //Start the visualization loop
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_HomMat3D.Dispose();
        HOperatorSet.PoseToHomMat3d(hv_Poses.TupleSelectRange(0,6), out hv_HomMat3D);
        }
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Qx.Dispose();hv_Qy.Dispose();hv_Qz.Dispose();
        HOperatorSet.AffineTransPoint3d(hv_HomMat3D, hv_Center.TupleSelect(0), hv_Center.TupleSelect(
            1), hv_Center.TupleSelect(2), out hv_Qx, out hv_Qy, out hv_Qz);
        }
        hv_TBCenter.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_TBCenter = new HTuple();
        hv_TBCenter = hv_TBCenter.TupleConcat(hv_Qx, hv_Qy, hv_Qz);
        }
        hv_TBSize.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_TBSize = (0.5+((0.5*(hv_SelectedObject.TupleSum()
            ))/hv_NumModels))*hv_TrackballRadiusPixel;
        }
        hv_ButtonHold.Dispose();
        hv_ButtonHold = 0;
        while ((int)(1) != 0)
        {
          hv_VisualizeTB.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_VisualizeTB = new HTuple(((hv_SelectedObject.TupleMax()
              )).TupleNotEqual(0));
          }
          hv_MaxIndex.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_MaxIndex = ((((new HTuple(hv_ObjectModel3D.TupleLength()
              )).TupleConcat(hv_MaxNumModels))).TupleMin())-1;
          }
          //Set trackball fixed in the center of the window
          hv_TrackballCenterRow.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_TrackballCenterRow = hv_Height/2;
          }
          hv_TrackballCenterCol.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_TrackballCenterCol = hv_Width/2;
          }
          if ((int)(new HTuple(hv_WindowCenteredRotation.TupleEqual(1))) != 0)
          {
            try
            {
              using (HDevDisposeHelper dh = new HDevDisposeHelper())
              {
              hv_TBCenter.Dispose();hv_TBSize.Dispose();
              get_trackball_center_fixed(hv_SelectedObject.TupleSelectRange(0,hv_MaxIndex), 
                  hv_TrackballCenterRow, hv_TrackballCenterCol, hv_TrackballRadiusPixel, 
                  hv_Scene3D, hv_ObjectModel3D.TupleSelectRange(0,hv_MaxIndex), hv_Poses.TupleSelectRange(
                  0,((hv_MaxIndex+1)*7)-1), hv_WindowHandleBuffer, hv_CamParam_COPY_INP_TMP, 
                  hv_GenParamName_COPY_INP_TMP, hv_GenParamValue_COPY_INP_TMP, out hv_TBCenter, 
                  out hv_TBSize);
              }
            }
            // catch (Exception) 
            catch (HalconException HDevExpDefaultException2)
            {
              HDevExpDefaultException2.ToHTuple(out hv_Exception);
              disp_message(hv_ExpDefaultWinHandle, "Surface inspection mode is not available.", 
                  "image", 5, 20, "red", "true");
              hv_WindowCenteredRotation.Dispose();
              hv_WindowCenteredRotation = 2;
              using (HDevDisposeHelper dh = new HDevDisposeHelper())
              {
              hv_TBCenter.Dispose();hv_TBSize.Dispose();
              get_trackball_center(hv_SelectedObject.TupleSelectRange(0,hv_MaxIndex), 
                  hv_TrackballRadiusPixel, hv_ObjectModel3D.TupleSelectRange(0,hv_MaxIndex), 
                  hv_Poses.TupleSelectRange(0,((hv_MaxIndex+1)*7)-1), out hv_TBCenter, 
                  out hv_TBSize);
              }
              HOperatorSet.WaitSeconds(1);
            }
          }
          else
          {
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_TBCenter.Dispose();hv_TBSize.Dispose();
            get_trackball_center(hv_SelectedObject.TupleSelectRange(0,hv_MaxIndex), 
                hv_TrackballRadiusPixel, hv_ObjectModel3D.TupleSelectRange(0,hv_MaxIndex), 
                hv_Poses.TupleSelectRange(0,((hv_MaxIndex+1)*7)-1), out hv_TBCenter, 
                out hv_TBSize);
            }
          }
          dump_image_output(ho_Image, hv_ExpDefaultWinHandle, hv_Scene3D, hv_AlphaOrig, 
              hv_ObjectModel3D, hv_GenParamName_COPY_INP_TMP, hv_GenParamValue_COPY_INP_TMP, 
              hv_CamParam_COPY_INP_TMP, hv_Poses, hv_ColorImage, hv_Title, hv_Information, 
              hv_Label_COPY_INP_TMP, hv_VisualizeTB, "true", hv_TrackballCenterRow, 
              hv_TrackballCenterCol, hv_TBSize, hv_SelectedObject, hv_WindowCenteredRotation, 
              hv_TBCenter);
          ho_ImageDump.Dispose();
          HOperatorSet.DumpWindowImage(out ho_ImageDump, hv_ExpDefaultWinHandle);
          //dev_set_window(...);
          HOperatorSet.DispObj(ho_ImageDump, hv_ExpDefaultWinHandle);
          //
          //Check for mouse events
          hv_GraphEvent.Dispose();
          hv_GraphEvent = 0;
          hv_Exit.Dispose();
          hv_Exit = 0;
          while ((int)(1) != 0)
          {
            //
            //Check graphic event
            try
            {
              hv_GraphButtonRow.Dispose();hv_GraphButtonColumn.Dispose();hv_GraphButton.Dispose();
              HOperatorSet.GetMpositionSubPix(hv_ExpDefaultWinHandle, out hv_GraphButtonRow, 
                  out hv_GraphButtonColumn, out hv_GraphButton);
              if ((int)(new HTuple(hv_GraphButton.TupleNotEqual(0))) != 0)
              {
                if ((int)((new HTuple((new HTuple((new HTuple(hv_GraphButtonRow.TupleGreater(
                    (hv_Height-hv_TextHeight)-25))).TupleAnd(new HTuple(hv_GraphButtonRow.TupleLess(
                    hv_Height))))).TupleAnd(new HTuple(hv_GraphButtonColumn.TupleGreater(
                    (hv_Width-hv_TextWidth)-15))))).TupleAnd(new HTuple(hv_GraphButtonColumn.TupleLess(
                    hv_Width)))) != 0)
                {
                  //Wait until the continue button has been released
                  if ((int)(new HTuple(hv_WaitForButtonRelease.TupleEqual("true"))) != 0)
                  {
                    while ((int)(1) != 0)
                    {
                      hv_GraphButtonRow.Dispose();hv_GraphButtonColumn.Dispose();hv_GraphButton.Dispose();
                      HOperatorSet.GetMpositionSubPix(hv_ExpDefaultWinHandle, out hv_GraphButtonRow, 
                          out hv_GraphButtonColumn, out hv_GraphButton);
                      if ((int)((new HTuple(hv_GraphButton.TupleEqual(0))).TupleOr(
                          new HTuple(hv_GraphButton.TupleEqual(new HTuple())))) != 0)
                      {
                        if ((int)((new HTuple((new HTuple((new HTuple(hv_GraphButtonRow.TupleGreater(
                            (hv_Height-hv_TextHeight)-25))).TupleAnd(new HTuple(hv_GraphButtonRow.TupleLess(
                            hv_Height))))).TupleAnd(new HTuple(hv_GraphButtonColumn.TupleGreater(
                            (hv_Width-hv_TextWidth)-15))))).TupleAnd(new HTuple(hv_GraphButtonColumn.TupleLess(
                            hv_Width)))) != 0)
                        {
                          hv_ButtonReleased.Dispose();
                          hv_ButtonReleased = 1;
                        }
                        else
                        {
                          hv_ButtonReleased.Dispose();
                          hv_ButtonReleased = 0;
                        }
                        //
                        break;
                      }
                      //Keep waiting until mouse button is released or moved out of the window
                    }
                  }
                  else
                  {
                    hv_ButtonReleased.Dispose();
                    hv_ButtonReleased = 1;
                  }
                  //Exit the visualization loop
                  if ((int)(hv_ButtonReleased) != 0)
                  {
                    hv_Exit.Dispose();
                    hv_Exit = 1;
                    break;
                  }
                }
                hv_GraphEvent.Dispose();
                hv_GraphEvent = 1;
                break;
              }
              else
              {
                hv_ButtonHold.Dispose();
                hv_ButtonHold = 0;
              }
            }
            // catch (Exception) 
            catch (HalconException HDevExpDefaultException2)
            {
              HDevExpDefaultException2.ToHTuple(out hv_Exception);
              //Keep waiting
            }
          }
          if ((int)(hv_GraphEvent) != 0)
          {
            {
            HTuple ExpTmpOutVar_0;HTuple ExpTmpOutVar_1;HTuple ExpTmpOutVar_2;HTuple ExpTmpOutVar_3;
            analyze_graph_event(ho_Image, hv_MouseMapping, hv_GraphButton, hv_GraphButtonRow, 
                hv_GraphButtonColumn, hv_WindowHandle, hv_WindowHandleBuffer, hv_VirtualTrackball, 
                hv_TrackballSize, hv_SelectedObject, hv_Scene3D, hv_AlphaOrig, hv_ObjectModel3D, 
                hv_CamParam_COPY_INP_TMP, hv_Label_COPY_INP_TMP, hv_Title, hv_Information, 
                hv_GenParamName_COPY_INP_TMP, hv_GenParamValue_COPY_INP_TMP, hv_Poses, 
                hv_ButtonHold, hv_TBCenter, hv_TBSize, hv_WindowCenteredRotation, 
                hv_MaxNumModels, out ExpTmpOutVar_0, out ExpTmpOutVar_1, out ExpTmpOutVar_2, 
                out ExpTmpOutVar_3);
            hv_Poses.Dispose();
            hv_Poses = ExpTmpOutVar_0;
            hv_SelectedObject.Dispose();
            hv_SelectedObject = ExpTmpOutVar_1;
            hv_ButtonHold.Dispose();
            hv_ButtonHold = ExpTmpOutVar_2;
            hv_WindowCenteredRotation.Dispose();
            hv_WindowCenteredRotation = ExpTmpOutVar_3;
            }
          }
          if ((int)(hv_Exit) != 0)
          {
            break;
          }
        }
        //
        //Display final state with persistence, if requested
        //Note that disp_object_model_3d must be used instead of the 3D scene
        if ((int)(new HTuple((new HTuple(hv_PersistenceParamName.TupleLength())).TupleGreater(
            0))) != 0)
        {
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          HOperatorSet.DispObjectModel3d(hv_ExpDefaultWinHandle, hv_ObjectModel3D, 
              hv_CamParam_COPY_INP_TMP, hv_Poses, ((new HTuple("disp_background")).TupleConcat(
              "alpha")).TupleConcat(hv_PersistenceParamName), ((new HTuple("true")).TupleConcat(
              0.0)).TupleConcat(hv_PersistenceParamValue));
          }
        }
        //
        //Compute the output pose
        if ((int)(ExpGetGlobalVar_gIsSinglePose()) != 0)
        {
          hv_PoseOut.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_PoseOut = hv_Poses.TupleSelectRange(
              0,6);
          }
        }
        else
        {
          hv_PoseOut.Dispose();
          hv_PoseOut = new HTuple(hv_Poses);
        }
        //
        //Clean up
        HOperatorSet.SetSystem("clip_region", hv_ClipRegion);
        // dev_set_preferences(...); only in hdevelop
        // dev_set_preferences(...); only in hdevelop
        dump_image_output(ho_Image, hv_ExpDefaultWinHandle, hv_Scene3D, hv_AlphaOrig, 
            hv_ObjectModel3D, hv_GenParamName_COPY_INP_TMP, hv_GenParamValue_COPY_INP_TMP, 
            hv_CamParam_COPY_INP_TMP, hv_Poses, hv_ColorImage, hv_Title, new HTuple(), 
            hv_Label_COPY_INP_TMP, 0, "false", hv_TrackballCenterRow, hv_TrackballCenterCol, 
            hv_TBSize, hv_SelectedObject, hv_WindowCenteredRotation, hv_TBCenter);
        ho_ImageDump.Dispose();
        HOperatorSet.DumpWindowImage(out ho_ImageDump, hv_ExpDefaultWinHandle);
        //dev_set_window(...);
        HOperatorSet.DispObj(ho_ImageDump, hv_ExpDefaultWinHandle);
        //close_window(...);
        HOperatorSet.SetPart(hv_ExpDefaultWinHandle, hv_WPRow1, hv_WPColumn1, hv_WPRow2, 
            hv_WPColumn2);
        HOperatorSet.ClearScene3d(hv_Scene3D);
        hv_Scene3D.Dispose();
        hv_Scene3D = new HTuple();
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        try
        {
          if ((int)(new HTuple((new HTuple(0)).TupleLess(new HTuple(hv_Scene3DTest.TupleLength()
              )))) != 0)
          {
            HOperatorSet.ClearScene3d(hv_Scene3DTest);
            hv_Scene3DTest.Dispose();
            hv_Scene3DTest = new HTuple();
          }
          if ((int)(new HTuple((new HTuple(0)).TupleLess(new HTuple(hv_Scene3D.TupleLength()
              )))) != 0)
          {
            HOperatorSet.ClearScene3d(hv_Scene3D);
            hv_Scene3D.Dispose();
            hv_Scene3D = new HTuple();
          }
          if ((int)(new HTuple((new HTuple(0)).TupleLess(new HTuple(hv_WindowHandleBuffer.TupleLength()
              )))) != 0)
          {
            //close_window(...);
            hv_WindowHandleBuffer.Dispose();
            hv_WindowHandleBuffer = new HTuple();
          }
        }
        // catch (e) 
        catch (HalconException HDevExpDefaultException2)
        {
          HDevExpDefaultException2.ToHTuple(out hv_e);
          //suppress all further exceptions to return the original exception
        }

        throw new HalconException(hv_Exception);
      }
      ho_Image.Dispose();
      ho_ImageDump.Dispose();

      hv_CamParam_COPY_INP_TMP.Dispose();
      hv_GenParamName_COPY_INP_TMP.Dispose();
      hv_GenParamValue_COPY_INP_TMP.Dispose();
      hv_Label_COPY_INP_TMP.Dispose();
      hv_PoseIn_COPY_INP_TMP.Dispose();
      hv_Scene3DTest.Dispose();
      hv_Scene3D.Dispose();
      hv_WindowHandleBuffer.Dispose();
      hv_TrackballSize.Dispose();
      hv_VirtualTrackball.Dispose();
      hv_MouseMapping.Dispose();
      hv_WaitForButtonRelease.Dispose();
      hv_MaxNumModels.Dispose();
      hv_WindowCenteredRotation.Dispose();
      hv_NumModels.Dispose();
      hv_SelectedObject.Dispose();
      hv_ClipRegion.Dispose();
      hv_CPLength.Dispose();
      hv_RowNotUsed.Dispose();
      hv_ColumnNotUsed.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_WPRow1.Dispose();
      hv_WPColumn1.Dispose();
      hv_WPRow2.Dispose();
      hv_WPColumn2.Dispose();
      hv_CamParamValue.Dispose();
      hv_CamWidth.Dispose();
      hv_CamHeight.Dispose();
      hv_Scale.Dispose();
      hv_Indices.Dispose();
      hv_DispBackground.Dispose();
      hv_Mask.Dispose();
      hv_Center.Dispose();
      hv_Poses.Dispose();
      hv_HomMat3Ds.Dispose();
      hv_Sequence.Dispose();
      hv_PoseEstimated.Dispose();
      hv_Font.Dispose();
      hv_Exception.Dispose();
      hv_OpenGLInfo.Dispose();
      hv_DummyObjectModel3D.Dispose();
      hv_CameraIndexTest.Dispose();
      hv_PoseTest.Dispose();
      hv_InstanceIndexTest.Dispose();
      hv_MinImageSize.Dispose();
      hv_TrackballRadiusPixel.Dispose();
      hv_Ascent.Dispose();
      hv_Descent.Dispose();
      hv_TextWidth.Dispose();
      hv_TextHeight.Dispose();
      hv_NumChannels.Dispose();
      hv_ColorImage.Dispose();
      hv_CameraIndex.Dispose();
      hv_AllInstances.Dispose();
      hv_SetLight.Dispose();
      hv_LightParam.Dispose();
      hv_LightPosition.Dispose();
      hv_LightKind.Dispose();
      hv_LightIndex.Dispose();
      hv_PersistenceParamName.Dispose();
      hv_PersistenceParamValue.Dispose();
      hv_AlphaOrig.Dispose();
      hv_I.Dispose();
      hv_ParamName.Dispose();
      hv_ParamValue.Dispose();
      hv_ParamNameTrunk.Dispose();
      hv_Instance.Dispose();
      hv_HomMat3D.Dispose();
      hv_Qx.Dispose();
      hv_Qy.Dispose();
      hv_Qz.Dispose();
      hv_TBCenter.Dispose();
      hv_TBSize.Dispose();
      hv_ButtonHold.Dispose();
      hv_VisualizeTB.Dispose();
      hv_MaxIndex.Dispose();
      hv_TrackballCenterRow.Dispose();
      hv_TrackballCenterCol.Dispose();
      hv_GraphEvent.Dispose();
      hv_Exit.Dispose();
      hv_GraphButtonRow.Dispose();
      hv_GraphButtonColumn.Dispose();
      hv_GraphButton.Dispose();
      hv_ButtonReleased.Dispose();
      hv_e.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_Image.Dispose();
      ho_ImageDump.Dispose();

      hv_CamParam_COPY_INP_TMP.Dispose();
      hv_GenParamName_COPY_INP_TMP.Dispose();
      hv_GenParamValue_COPY_INP_TMP.Dispose();
      hv_Label_COPY_INP_TMP.Dispose();
      hv_PoseIn_COPY_INP_TMP.Dispose();
      hv_Scene3DTest.Dispose();
      hv_Scene3D.Dispose();
      hv_WindowHandleBuffer.Dispose();
      hv_TrackballSize.Dispose();
      hv_VirtualTrackball.Dispose();
      hv_MouseMapping.Dispose();
      hv_WaitForButtonRelease.Dispose();
      hv_MaxNumModels.Dispose();
      hv_WindowCenteredRotation.Dispose();
      hv_NumModels.Dispose();
      hv_SelectedObject.Dispose();
      hv_ClipRegion.Dispose();
      hv_CPLength.Dispose();
      hv_RowNotUsed.Dispose();
      hv_ColumnNotUsed.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_WPRow1.Dispose();
      hv_WPColumn1.Dispose();
      hv_WPRow2.Dispose();
      hv_WPColumn2.Dispose();
      hv_CamParamValue.Dispose();
      hv_CamWidth.Dispose();
      hv_CamHeight.Dispose();
      hv_Scale.Dispose();
      hv_Indices.Dispose();
      hv_DispBackground.Dispose();
      hv_Mask.Dispose();
      hv_Center.Dispose();
      hv_Poses.Dispose();
      hv_HomMat3Ds.Dispose();
      hv_Sequence.Dispose();
      hv_PoseEstimated.Dispose();
      hv_Font.Dispose();
      hv_Exception.Dispose();
      hv_OpenGLInfo.Dispose();
      hv_DummyObjectModel3D.Dispose();
      hv_CameraIndexTest.Dispose();
      hv_PoseTest.Dispose();
      hv_InstanceIndexTest.Dispose();
      hv_MinImageSize.Dispose();
      hv_TrackballRadiusPixel.Dispose();
      hv_Ascent.Dispose();
      hv_Descent.Dispose();
      hv_TextWidth.Dispose();
      hv_TextHeight.Dispose();
      hv_NumChannels.Dispose();
      hv_ColorImage.Dispose();
      hv_CameraIndex.Dispose();
      hv_AllInstances.Dispose();
      hv_SetLight.Dispose();
      hv_LightParam.Dispose();
      hv_LightPosition.Dispose();
      hv_LightKind.Dispose();
      hv_LightIndex.Dispose();
      hv_PersistenceParamName.Dispose();
      hv_PersistenceParamValue.Dispose();
      hv_AlphaOrig.Dispose();
      hv_I.Dispose();
      hv_ParamName.Dispose();
      hv_ParamValue.Dispose();
      hv_ParamNameTrunk.Dispose();
      hv_Instance.Dispose();
      hv_HomMat3D.Dispose();
      hv_Qx.Dispose();
      hv_Qy.Dispose();
      hv_Qz.Dispose();
      hv_TBCenter.Dispose();
      hv_TBSize.Dispose();
      hv_ButtonHold.Dispose();
      hv_VisualizeTB.Dispose();
      hv_MaxIndex.Dispose();
      hv_TrackballCenterRow.Dispose();
      hv_TrackballCenterCol.Dispose();
      hv_GraphEvent.Dispose();
      hv_Exit.Dispose();
      hv_GraphButtonRow.Dispose();
      hv_GraphButtonColumn.Dispose();
      hv_GraphButton.Dispose();
      hv_ButtonReleased.Dispose();
      hv_e.Dispose();

      throw HDevExpDefaultException;
    }
  }

  // Local procedures 
  public void A01_Consolidado_Vision_R1 (HTuple hv_SerialHandle, HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Vector_Estado_Fx, 
      HTuple hv_Path_SFM_Segmentos, HTuple hv_Path_3D_Segmentos, HTuple hv_Path_CORE_ID, 
      HTuple hv_NxLib, HTuple hv_Camera_1, HTuple hv_AcqHandle_Cam_0, HTuple hv_Camera0_Parameters, 
      HTuple hv_Camera0_Pose, HTuple hv_Parametros_Visualizacion, HTuple hv_Valores_Visualizacion)
  {



    // Local iconic variables 

    HObject ho_Objeto_1_mangas=null, ho_ModelImage=null;
    HObject ho_X=null, ho_Y=null, ho_Z=null, ho_ImgLeftCamera=null;

    // Local control variables 

    HTuple hv_Parametros_VisualizacionOut = new HTuple();
    HTuple hv_Valores_VisualizacionOut = new HTuple(), hv_WindowHandle = new HTuple();
    HTuple hv_EstadoSerialBridge = new HTuple(), hv_Estado_Get_SFM_STL = new HTuple();
    HTuple hv_DerivadaCore_In = new HTuple(), hv_DerivadaCore_Out = new HTuple();
    HTuple hv_ObjectModel3D_Core_Pallet = new HTuple(), hv_SFM_Core_Pallet = new HTuple();
    HTuple hv_Objec3D = new HTuple(), hv_CamerasConection = new HTuple();
    HTuple hv_EstadoFxBloque2 = new HTuple(), hv__EBD_O_CmdDatos_Old = new HTuple();
    HTuple hv__EBD_O_CmdDatos_New = new HTuple(), hv_ESTEREO = new HTuple();
    HTuple hv_OPTICA = new HTuple(), hv_EstadoFx = new HTuple();
    HTuple hv_Index1 = new HTuple(), hv_Matrix_Localizadores = new HTuple();
    HTuple hv_Index2 = new HTuple(), hv_Visualizar3D = new HTuple();
    HTuple ExpTmpLocalVar_g_SignoPallet = new HTuple(), ExpTmpLocalVar_g_Pallet_Actual = new HTuple();
    HTuple hv_Camara_conexion_Est = new HTuple(), hv_Resultado = new HTuple();
    HTuple hv_Procesando = new HTuple(), hv_ConteoCirculares = new HTuple();
    HTuple hv_ConteoFotoPatron = new HTuple(), ExpTmpLocalVar_g_Error_CamaraEst_Adq = new HTuple();
    HTuple ExpTmpLocalVar_g_Error_CamaraOpt_Adq = new HTuple();
    HTuple hv_Tag_Lectura = new HTuple(), hv__EV1_O_CmdDatos = new HTuple();
    HTuple hv_Conteo_error = new HTuple(), hv_Estado = new HTuple();
    HTuple hv_Vector_ID_Core_by_Segment_Pallet_1 = new HTuple();
    HTuple hv_Vector_ID_Core_by_Segment_Pallet_2 = new HTuple();
    HTuple hv_Vector_ID_Core_by_Segment_Pallet_3 = new HTuple();
    HTuple hv_Vector_ID_Core_by_Segment_Pallet_4 = new HTuple();
    HTuple hv_Vector_ID_Core_by_Segment_Pallet_5 = new HTuple();
    HTuple hv_Vector_ID_Core_by_Segment_Pallet_6 = new HTuple();
    HTuple hv_Estado_SubProceso = new HTuple(), hv_Tag_Destino = new HTuple();
    HTuple hv_Valor_Variable = new HTuple(), hv_Resultado_Vision = new HTuple();
    HTuple hv_Existe_BDD_New = new HTuple(), hv_g_Error_CamaraOpt_Adq_New = new HTuple();
    HTuple hv_Cierra_Vision = new HTuple(), hv__EBD_O_CmdDatos = new HTuple();
    HTuple hv_Y_R01_PattEscaneado = new HTuple(), hv_Derivada_BDD = new HTuple();
    HTuple hv_g_CamInBasePose1 = new HTuple(), hv_Pallet = new HTuple();
    HTuple hv_Pallet_int = new HTuple(), hv_Segmento = new HTuple();
    HTuple hv_PoseForCalibrationPlate = new HTuple(), hv_ToolInCamPose = new HTuple();
    HTuple hv_ToolInBasePose = new HTuple(), hv_ObjInBasePose = new HTuple();
    HTuple hv_Cod_Core_ToUse = new HTuple(), hv_FXcheck = new HTuple();
    HTuple hv_conteoBDD = new HTuple(), hv_Limite = new HTuple();
    HTuple hv_Is_a_Core = new HTuple(), hv_Modelo3D_Select = new HTuple();
    HTuple hv_Receta = new HTuple(), hv_Exception = new HTuple();

    HTupleVector hvec_Matrix_Sleeve = new HTupleVector(2);
    HTupleVector hvec_BDD_Data = new HTupleVector(2), hvec_BDD_Data_New = new HTupleVector(2);
    HTupleVector hvec_Matrix_Sleeve_Out = new HTupleVector(2);
    HTuple   hv_AcqHandle_Cam_0_COPY_INP_TMP = new HTuple(hv_AcqHandle_Cam_0);
    HTuple   hv_Camera_1_COPY_INP_TMP = new HTuple(hv_Camera_1);
    HTuple   hv_NxLib_COPY_INP_TMP = new HTuple(hv_NxLib);

    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Objeto_1_mangas);
    HOperatorSet.GenEmptyObj(out ho_ModelImage);
    HOperatorSet.GenEmptyObj(out ho_X);
    HOperatorSet.GenEmptyObj(out ho_Y);
    HOperatorSet.GenEmptyObj(out ho_Z);
    HOperatorSet.GenEmptyObj(out ho_ImgLeftCamera);
    try
    {

      //dev_close_window(...);
      hv_Parametros_VisualizacionOut.Dispose();
      hv_Parametros_VisualizacionOut = new HTuple(hv_Parametros_Visualizacion);
      hv_Valores_VisualizacionOut.Dispose();
      hv_Valores_VisualizacionOut = new HTuple(hv_Valores_Visualizacion);
      //dev_open_window(...);

      hv_EstadoSerialBridge.Dispose();
      Get_EstadoSerialBridge(out hv_EstadoSerialBridge);
      hv_Estado_Get_SFM_STL.Dispose();
      hv_Estado_Get_SFM_STL = 0;
      hv_DerivadaCore_In.Dispose();
      hv_DerivadaCore_In = new HTuple();
      hv_DerivadaCore_In[0] = "";
      hv_DerivadaCore_In[1] = "";
      hv_DerivadaCore_Out.Dispose();
      hv_DerivadaCore_Out = new HTuple();
      hv_DerivadaCore_Out[0] = "";
      hv_DerivadaCore_Out[1] = "";
      hv_ObjectModel3D_Core_Pallet.Dispose();
      hv_ObjectModel3D_Core_Pallet = new HTuple();
      hv_SFM_Core_Pallet.Dispose();
      hv_SFM_Core_Pallet = new HTuple();
      hv_Objec3D.Dispose();
      hv_Objec3D = new HTuple();
      hv_ObjectModel3D_Core_Pallet.Dispose();
      hv_ObjectModel3D_Core_Pallet = new HTuple();
      hv_CamerasConection.Dispose();
      hv_CamerasConection = new HTuple();
      hv_CamerasConection[0] = 1;
      hv_CamerasConection[1] = 1;
      hv_EstadoFxBloque2.Dispose();
      hv_EstadoFxBloque2 = 0;
      hv__EBD_O_CmdDatos_Old.Dispose();
      hv__EBD_O_CmdDatos_Old = 0;
      hv__EBD_O_CmdDatos_New.Dispose();
      hv__EBD_O_CmdDatos_New = 0;
      hv_ESTEREO.Dispose();
      hv_ESTEREO = 0;
      hv_OPTICA.Dispose();
      hv_OPTICA = 1;
      hv_EstadoFx.Dispose();
      hv_EstadoFx = 0;
      //*************************************
      //Imagen de sleeve capturada
      //*************************************

      hvec_Matrix_Sleeve.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Matrix_Sleeve = dh.Take((
          dh.Add(new HTupleVector(2)).Insert(0,(dh.Add(new HTupleVector(1)).Insert(0,dh.Add(new HTupleVector(new HTuple())))))));
      }
      hvec_Matrix_Sleeve[0][0] = new HTupleVector(new HTuple("SleeveName"));
      hvec_Matrix_Sleeve[0][1] = new HTupleVector(new HTuple("TakePic"));
      hvec_Matrix_Sleeve[0][2] = new HTupleVector(new HTuple("FolderPath"));
      hvec_Matrix_Sleeve[0][3] = new HTupleVector(new HTuple("MangaPos"));

      for (hv_Index1=1; (int)hv_Index1<=6; hv_Index1 = (int)hv_Index1 + 1)
      {

        hvec_Matrix_Sleeve[hv_Index1][1] = new HTupleVector(new HTuple(0));
        hvec_Matrix_Sleeve[hv_Index1][2] = new HTupleVector(new HTuple(""));
        hvec_Matrix_Sleeve[hv_Index1][3] = new HTupleVector(new HTuple(""));
      }

      hv_Matrix_Localizadores.Dispose();
      hv_Matrix_Localizadores = new HTuple();

      for (hv_Index2=1; (int)hv_Index2<=11; hv_Index2 = (int)hv_Index2 + 1)
      {
        if (hv_Matrix_Localizadores == null)
          hv_Matrix_Localizadores = new HTuple();
        hv_Matrix_Localizadores[hv_Index2] = 0;

      }
      hv_Visualizar3D.Dispose();
      hv_Visualizar3D = 0;

      //global tuple g_SignoPallet
      //global tuple g_Pallet_Actual
      //*************************************
      ExpTmpLocalVar_g_SignoPallet = ExpGetGlobalVar_g_SignoPallet();
      if (ExpTmpLocalVar_g_SignoPallet == null)
        ExpTmpLocalVar_g_SignoPallet = new HTuple();
      ExpTmpLocalVar_g_SignoPallet[3] = 1;
      ExpSetGlobalVar_g_SignoPallet(ExpTmpLocalVar_g_SignoPallet);
      ExpTmpLocalVar_g_SignoPallet = ExpGetGlobalVar_g_SignoPallet();
      if (ExpTmpLocalVar_g_SignoPallet == null)
        ExpTmpLocalVar_g_SignoPallet = new HTuple();
      ExpTmpLocalVar_g_SignoPallet[5] = -1;
      ExpSetGlobalVar_g_SignoPallet(ExpTmpLocalVar_g_SignoPallet);
      ExpTmpLocalVar_g_Pallet_Actual = ExpGetGlobalVar_g_Pallet_Actual();
      if (ExpTmpLocalVar_g_Pallet_Actual == null)
        ExpTmpLocalVar_g_Pallet_Actual = new HTuple();
      ExpTmpLocalVar_g_Pallet_Actual[0] = 0;
      ExpSetGlobalVar_g_Pallet_Actual(ExpTmpLocalVar_g_Pallet_Actual);
      hv_Camara_conexion_Est.Dispose();
      hv_Camara_conexion_Est = 1;
      Send_Data_Info("#### Inicio  Sistema de Vision Robot 1 ####", hv_SerialHandle);
      hv_Resultado.Dispose();
      hv_Resultado = 0;
      hv_Procesando.Dispose();
      hv_Procesando = 0;
      Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);

      hv_ConteoCirculares.Dispose();
      hv_ConteoCirculares = 0;
      hv_ConteoFotoPatron.Dispose();
      hv_ConteoFotoPatron = 1;
      //# #####################################################################################

      //********************************************************
      //variablnes que indican si la adquisicion estuvo Ok
      //********************************************************
      //global tuple g_Error_CamaraEst_Adq
      //global tuple g_Error_CamaraOpt_Adq
      ExpTmpLocalVar_g_Error_CamaraEst_Adq = 0;
      ExpSetGlobalVar_g_Error_CamaraEst_Adq(ExpTmpLocalVar_g_Error_CamaraEst_Adq);
      ExpTmpLocalVar_g_Error_CamaraOpt_Adq = 0;
      ExpSetGlobalVar_g_Error_CamaraOpt_Adq(ExpTmpLocalVar_g_Error_CamaraOpt_Adq);
      //# #######################################################











      //Variable a leer para activar la adquisicion de vision
      hv_Tag_Lectura.Dispose();
      hv_Tag_Lectura = "_EV01_O_CmdDatos";
      hv__EV1_O_CmdDatos.Dispose();
      Read_EthernetIP_Data(hv_Tag_Lectura, hv_SerialHandle, out hv__EV1_O_CmdDatos);


      hv_Conteo_error.Dispose();
      hv_Conteo_error = 0;
      while ((int)(new HTuple(hv__EV1_O_CmdDatos.TupleNotEqual(0))) != 0)
      {
        hv__EV1_O_CmdDatos.Dispose();
        Read_EthernetIP_Data(hv_Tag_Lectura, hv_SerialHandle, out hv__EV1_O_CmdDatos);
      }


      //********************************************************************
      //Lectura de BDD
      //Se debe activar con una señal que active la HMI luedio de cargar la BDD por el operador
      hv_Estado.Dispose();
      hv_Estado = 19;
      hv_Vector_ID_Core_by_Segment_Pallet_1.Dispose();hv_Vector_ID_Core_by_Segment_Pallet_2.Dispose();hv_Vector_ID_Core_by_Segment_Pallet_3.Dispose();hv_Vector_ID_Core_by_Segment_Pallet_4.Dispose();hv_Vector_ID_Core_by_Segment_Pallet_5.Dispose();hv_Vector_ID_Core_by_Segment_Pallet_6.Dispose();
      BD_Dinamica(hv_SerialHandle, hv_Estado, hvec_Vector_Estado_Fx, out hv_Vector_ID_Core_by_Segment_Pallet_1, 
          out hv_Vector_ID_Core_by_Segment_Pallet_2, out hv_Vector_ID_Core_by_Segment_Pallet_3, 
          out hv_Vector_ID_Core_by_Segment_Pallet_4, out hv_Vector_ID_Core_by_Segment_Pallet_5, 
          out hv_Vector_ID_Core_by_Segment_Pallet_6);
      hvec_BDD_Data.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_BDD_Data = dh.Take((
          dh.Add(new HTupleVector(2)).Insert(0,(dh.Add(new HTupleVector(1)).Insert(0,dh.Add(new HTupleVector(new HTuple())))))));
      }
      hvec_BDD_Data[0][0] = new HTupleVector(new HTuple("Pallet 1"));
      hvec_BDD_Data[0][1] = new HTupleVector(new HTuple("Pallet 2"));
      hvec_BDD_Data[0][2] = new HTupleVector(new HTuple("Pallet 3"));
      hvec_BDD_Data[0][3] = new HTupleVector(new HTuple("Pallet 4"));
      hvec_BDD_Data[0][2] = new HTupleVector(new HTuple("Pallet 5"));
      hvec_BDD_Data[0][3] = new HTupleVector(new HTuple("Pallet 6"));


      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_BDD_Data[1][0] = dh.Add(new HTupleVector(hv_Vector_ID_Core_by_Segment_Pallet_1));
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_BDD_Data[2][0] = dh.Add(new HTupleVector(hv_Vector_ID_Core_by_Segment_Pallet_2));
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_BDD_Data[3][0] = dh.Add(new HTupleVector(hv_Vector_ID_Core_by_Segment_Pallet_3));
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_BDD_Data[4][0] = dh.Add(new HTupleVector(hv_Vector_ID_Core_by_Segment_Pallet_4));
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_BDD_Data[5][0] = dh.Add(new HTupleVector(hv_Vector_ID_Core_by_Segment_Pallet_5));
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_BDD_Data[6][0] = dh.Add(new HTupleVector(hv_Vector_ID_Core_by_Segment_Pallet_6));
      }





      //*******************************************************************



      while ((int)(1) != 0)
      {

        try
        {

          //# #####################################################################################   
          hv_Estado_SubProceso.Dispose();
          hv_Estado_SubProceso = 0;
          hv_Tag_Destino.Dispose();
          hv_Tag_Destino = "_EV01_I_Procesando";
          hv_Valor_Variable.Dispose();
          hv_Valor_Variable = new HTuple(hv_Estado_SubProceso);
          Send_EthernetIP_Data(hv_Tag_Destino, hv_Valor_Variable, hv_SerialHandle);


          //********************************************
          //Cuando resultado es 2 lo tiro a 0
          //********************************************
          hv_Tag_Destino.Dispose();
          hv_Tag_Destino = "_EV01_I_Resultado";
          hv_Resultado_Vision.Dispose();
          Read_EthernetIP_Data(hv_Tag_Destino, hv_SerialHandle, out hv_Resultado_Vision);

          if ((int)(new HTuple(hv_Resultado_Vision.TupleGreater(1))) != 0)
          {
            HOperatorSet.WaitSeconds(0.1);
            hv_Tag_Destino.Dispose();
            hv_Tag_Destino = "_EV01_I_Resultado";
            Send_EthernetIP_Data(hv_Tag_Destino, hv_Valor_Variable, hv_SerialHandle);
          }
          //# #####################################################################################          

          //Variable a leer para activar la adquisicion de vision
          hv_Tag_Lectura.Dispose();
          hv_Tag_Lectura = "_EV01_O_CmdDatos";
          hv__EV1_O_CmdDatos.Dispose();
          Read_EthernetIP_Data(hv_Tag_Lectura, hv_SerialHandle, out hv__EV1_O_CmdDatos);

          hv_Conteo_error.Dispose();
          hv_Conteo_error = 0;

          //**************************************************************
          //   Verifico que el comando sea distinto de 0
          //*************************************************************
          Send_Data_Info("-------------> Esperando que CMD sea 0 <-------------", 
              hv_SerialHandle);

          {
          HTuple ExpTmpOutVar_0;HTuple ExpTmpOutVar_1;HTuple ExpTmpOutVar_2;HTuple ExpTmpOutVar_3;
          hvec_BDD_Data_New.Dispose();hv_Existe_BDD_New.Dispose();hv_g_Error_CamaraOpt_Adq_New.Dispose();HTuple ExpTmpOutVar_4;
          CmdDatosIs_Not_Zero(hv__EV1_O_CmdDatos, hv_Tag_Lectura, hv_SerialHandle, 
              hv_NxLib_COPY_INP_TMP, hv_OPTICA, hv_ESTEREO, hv_AcqHandle_Cam_0_COPY_INP_TMP, 
              hv_CamerasConection, hv_Camera_1_COPY_INP_TMP, hvec_Vector_Estado_Fx, 
              ExpGetGlobalVar_g_Error_CamaraOpt_Adq(), hv_Camara_conexion_Est, out ExpTmpOutVar_0, 
              out ExpTmpOutVar_1, out ExpTmpOutVar_2, out ExpTmpOutVar_3, out hvec_BDD_Data_New, 
              out hv_Existe_BDD_New, out hv_g_Error_CamaraOpt_Adq_New, out ExpTmpOutVar_4);
          hv__EV1_O_CmdDatos.Dispose();
          hv__EV1_O_CmdDatos = ExpTmpOutVar_0;
          hv_NxLib_COPY_INP_TMP.Dispose();
          hv_NxLib_COPY_INP_TMP = ExpTmpOutVar_1;
          hv_Camera_1_COPY_INP_TMP.Dispose();
          hv_Camera_1_COPY_INP_TMP = ExpTmpOutVar_2;
          hv_AcqHandle_Cam_0_COPY_INP_TMP.Dispose();
          hv_AcqHandle_Cam_0_COPY_INP_TMP = ExpTmpOutVar_3;
          hv_Camara_conexion_Est.Dispose();
          hv_Camara_conexion_Est = ExpTmpOutVar_4;
          }


          hv_Cierra_Vision.Dispose();
          Get_Puntero_Cerrar_SistemaV1(hv_SerialHandle, out hv_Cierra_Vision);

          if ((int)(new HTuple(hv_Cierra_Vision.TupleEqual("Cerrar_Programa"))) != 0)
          {

            ho_Objeto_1_mangas.Dispose();
            ho_ModelImage.Dispose();
            ho_X.Dispose();
            ho_Y.Dispose();
            ho_Z.Dispose();
            ho_ImgLeftCamera.Dispose();

            hv_AcqHandle_Cam_0_COPY_INP_TMP.Dispose();
            hv_Camera_1_COPY_INP_TMP.Dispose();
            hv_NxLib_COPY_INP_TMP.Dispose();
            hv_Parametros_VisualizacionOut.Dispose();
            hv_Valores_VisualizacionOut.Dispose();
            hv_WindowHandle.Dispose();
            hv_EstadoSerialBridge.Dispose();
            hv_Estado_Get_SFM_STL.Dispose();
            hv_DerivadaCore_In.Dispose();
            hv_DerivadaCore_Out.Dispose();
            hv_ObjectModel3D_Core_Pallet.Dispose();
            hv_SFM_Core_Pallet.Dispose();
            hv_Objec3D.Dispose();
            hv_CamerasConection.Dispose();
            hv_EstadoFxBloque2.Dispose();
            hv__EBD_O_CmdDatos_Old.Dispose();
            hv__EBD_O_CmdDatos_New.Dispose();
            hv_ESTEREO.Dispose();
            hv_OPTICA.Dispose();
            hv_EstadoFx.Dispose();
            hv_Index1.Dispose();
            hv_Matrix_Localizadores.Dispose();
            hv_Index2.Dispose();
            hv_Visualizar3D.Dispose();
            hv_Camara_conexion_Est.Dispose();
            hv_Resultado.Dispose();
            hv_Procesando.Dispose();
            hv_ConteoCirculares.Dispose();
            hv_ConteoFotoPatron.Dispose();
            hv_Tag_Lectura.Dispose();
            hv__EV1_O_CmdDatos.Dispose();
            hv_Conteo_error.Dispose();
            hv_Estado.Dispose();
            hv_Vector_ID_Core_by_Segment_Pallet_1.Dispose();
            hv_Vector_ID_Core_by_Segment_Pallet_2.Dispose();
            hv_Vector_ID_Core_by_Segment_Pallet_3.Dispose();
            hv_Vector_ID_Core_by_Segment_Pallet_4.Dispose();
            hv_Vector_ID_Core_by_Segment_Pallet_5.Dispose();
            hv_Vector_ID_Core_by_Segment_Pallet_6.Dispose();
            hv_Estado_SubProceso.Dispose();
            hv_Tag_Destino.Dispose();
            hv_Valor_Variable.Dispose();
            hv_Resultado_Vision.Dispose();
            hv_Existe_BDD_New.Dispose();
            hv_g_Error_CamaraOpt_Adq_New.Dispose();
            hv_Cierra_Vision.Dispose();
            hv__EBD_O_CmdDatos.Dispose();
            hv_Y_R01_PattEscaneado.Dispose();
            hv_Derivada_BDD.Dispose();
            hv_g_CamInBasePose1.Dispose();
            hv_Pallet.Dispose();
            hv_Pallet_int.Dispose();
            hv_Segmento.Dispose();
            hv_PoseForCalibrationPlate.Dispose();
            hv_ToolInCamPose.Dispose();
            hv_ToolInBasePose.Dispose();
            hv_ObjInBasePose.Dispose();
            hv_Cod_Core_ToUse.Dispose();
            hv_FXcheck.Dispose();
            hv_conteoBDD.Dispose();
            hv_Limite.Dispose();
            hv_Is_a_Core.Dispose();
            hv_Modelo3D_Select.Dispose();
            hv_Receta.Dispose();
            hv_Exception.Dispose();
            hvec_Matrix_Sleeve.Dispose();
            hvec_BDD_Data.Dispose();
            hvec_BDD_Data_New.Dispose();
            hvec_Matrix_Sleeve_Out.Dispose();

            return;
          }


          ExpTmpLocalVar_g_Error_CamaraOpt_Adq = new HTuple(hv_g_Error_CamaraOpt_Adq_New);
          ExpSetGlobalVar_g_Error_CamaraOpt_Adq(ExpTmpLocalVar_g_Error_CamaraOpt_Adq);


          if ((int)(hv_Existe_BDD_New) != 0)
          {

            hvec_BDD_Data.Dispose();
            hvec_BDD_Data = new HTupleVector(hvec_BDD_Data_New);
          }

          hv__EV1_O_CmdDatos.Dispose();
          Read_EthernetIP_Data(hv_Tag_Lectura, hv_SerialHandle, out hv__EV1_O_CmdDatos);
          hv__EBD_O_CmdDatos.Dispose();
          Read_EthernetIP_Data(hv_Tag_Lectura, hv_SerialHandle, out hv__EBD_O_CmdDatos);
          hv_Y_R01_PattEscaneado.Dispose();
          Read_EthernetIP_Data(hv_Tag_Lectura, hv_SerialHandle, out hv_Y_R01_PattEscaneado);
          hv__EBD_O_CmdDatos_New.Dispose();
          Get_PunteroBDD(hv_SerialHandle, out hv__EBD_O_CmdDatos_New);



          //*************************************************************

          //# ### Inicio de Procesamiento de Imagenes ########################      
          hv_Estado_SubProceso.Dispose();
          hv_Estado_SubProceso = 1;
          hv_Tag_Destino.Dispose();
          hv_Tag_Destino = "_EV01_I_Procesando";
          hv_Valor_Variable.Dispose();
          hv_Valor_Variable = new HTuple(hv_Estado_SubProceso);
          Send_EthernetIP_Data(hv_Tag_Destino, hv_Valor_Variable, hv_SerialHandle);

          //# #####################################################################################         



          hv_Tag_Lectura.Dispose();
          hv_Tag_Lectura = "Y_R01_PattEscaneado";
          hv_Y_R01_PattEscaneado.Dispose();
          Read_EthernetIP_Data(hv_Tag_Lectura, hv_SerialHandle, out hv_Y_R01_PattEscaneado);

          //while (_EV1_O_CmdDatos='' or   Y_R01_PattEscaneado='' or _EBD_O_CmdDatos_New=' ')
            //Read_EthernetIP_Data (Tag_Lectura, SerialHandle, _EV1_O_CmdDatos)
            //Read_EthernetIP_Data (Tag_Lectura, SerialHandle, _EBD_O_CmdDatos)
            //Read_EthernetIP_Data (Tag_Lectura, SerialHandle, Y_R01_PattEscaneado)
            //Get_PunteroBDD (SerialHandle, _EBD_O_CmdDatos_New)
          //endwhile


          //# #####################################################################################
          //# #################### Extraccion Dinamica de STL #####################################
          //# ################Si cambia el Modelo de la BD y si no es PIN Tapa o localizador ######   
          //# #####################################################################################      

          //***********************************************************************************************************************************************
          //***********************************************************************************************************************************************
          //***********************************************************************************************************************************************
          //Y_R01_PattEscaneado := 'True'
          hv_Derivada_BDD.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Derivada_BDD = hv__EBD_O_CmdDatos_New-hv__EBD_O_CmdDatos_Old;
          }





          //***********************************************************************************************************************************************
          //***********************************************************************************************************************************************
          //***********************************************************************************************************************************************
          //***********************************************************************************************************************************************












          //# #####################################################################################
          //# #################### BLOQUE 1########################################################
          //# ################Identificación de elementos en el pallet#############################
          //# #### Input -> RV_CmdFotogen #########################################################
          //# ####       -> Imagen
          //# ####       -> 'PV_Pallet_to_Scan'
          //# ####       -> BD Cores
          //# ####################################################################################



          if ((int)((new HTuple((new HTuple((new HTuple((new HTuple((new HTuple(hv__EV1_O_CmdDatos.TupleEqual(
              300))).TupleOr(new HTuple(hv__EV1_O_CmdDatos.TupleEqual(400))))).TupleOr(
              new HTuple(hv__EV1_O_CmdDatos.TupleEqual(500))))).TupleOr(new HTuple(hv__EV1_O_CmdDatos.TupleEqual(
              600))))).TupleOr(new HTuple(hv__EV1_O_CmdDatos.TupleEqual(700))))).TupleOr(
              new HTuple(hv__EV1_O_CmdDatos.TupleEqual(800)))) != 0)
          {


            HOperatorSet.ClearWindow(hv_ExpDefaultWinHandle);
            ho_Objeto_1_mangas.Dispose();hv_g_CamInBasePose1.Dispose();
            Bloque_1(out ho_Objeto_1_mangas, hvec_Vector_Estado_Fx, hv_SerialHandle, 
                hv__EV1_O_CmdDatos, hv_Path_SFM_Segmentos, hv_Path_3D_Segmentos, 
                hv_Path_CORE_ID, hv_NxLib_COPY_INP_TMP, hv_Camera_1_COPY_INP_TMP, 
                hvec_BDD_Data, out hv_g_CamInBasePose1);
            hv_ConteoCirculares.Dispose();
            hv_ConteoCirculares = 0;


            hvec_Matrix_Sleeve.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hvec_Matrix_Sleeve = dh.Take((
                dh.Add(new HTupleVector(2)).Insert(0,(dh.Add(new HTupleVector(1)).Insert(0,dh.Add(new HTupleVector(new HTuple())))))));
            }
            hvec_Matrix_Sleeve[0][0] = new HTupleVector(new HTuple("SleeveName"));
            hvec_Matrix_Sleeve[0][1] = new HTupleVector(new HTuple("TakePic"));
            hvec_Matrix_Sleeve[0][2] = new HTupleVector(new HTuple("FolderPath"));
            hvec_Matrix_Sleeve[0][3] = new HTupleVector(new HTuple("MangaPos"));

            for (hv_Index1=1; (int)hv_Index1<=6; hv_Index1 = (int)hv_Index1 + 1)
            {

              hvec_Matrix_Sleeve[hv_Index1][1] = new HTupleVector(new HTuple(0));
              hvec_Matrix_Sleeve[hv_Index1][2] = new HTupleVector(new HTuple(""));
              hvec_Matrix_Sleeve[hv_Index1][3] = new HTupleVector(new HTuple(""));
            }

          }


          //# ####################################################################################
          //# ####################################################################################
          //Se envia de manera secuencial el numero de elementos de cada segmento
          //                                      BLOQUE 0.1
          //# ####################################################################################
          //# ####################################################################################

          hv_Pallet.Dispose();hv_Pallet_int.Dispose();hv_Segmento.Dispose();
          Get_Segmento_AND_Pallet(hv__EV1_O_CmdDatos, out hv_Pallet, out hv_Pallet_int, 
              out hv_Segmento);
          ExpTmpLocalVar_g_Pallet_Actual = ExpGetGlobalVar_g_Pallet_Actual();
          if (ExpTmpLocalVar_g_Pallet_Actual == null)
            ExpTmpLocalVar_g_Pallet_Actual = new HTuple();
          ExpTmpLocalVar_g_Pallet_Actual[0] = hv_Pallet_int;
          ExpSetGlobalVar_g_Pallet_Actual(ExpTmpLocalVar_g_Pallet_Actual);
          if ((int)((new HTuple(hv_Pallet_int.TupleGreaterEqual(1))).TupleAnd(new HTuple(hv_Segmento.TupleGreaterEqual(
              1)))) != 0)
          {

            hvec_Matrix_Sleeve_Out.Dispose();hv_Camara_conexion_Est.Dispose();
            Bloque_01_Send_Dinamic_Info_Pallet(ho_Objeto_1_mangas, hv_SerialHandle, 
                hv__EV1_O_CmdDatos, hv_Path_CORE_ID, hv_Path_3D_Segmentos, hv_Path_SFM_Segmentos, 
                hvec_Vector_Estado_Fx, hv_NxLib_COPY_INP_TMP, hv_Camera_1_COPY_INP_TMP, 
                hv_Parametros_Visualizacion, hv_Valores_Visualizacion, hv_WindowHandle, 
                hvec_Matrix_Sleeve, hv_ConteoCirculares, hv_EstadoFx, hv_g_CamInBasePose1, 
                out hvec_Matrix_Sleeve_Out, out hv_Camara_conexion_Est);

            hvec_Matrix_Sleeve.Dispose();
            hvec_Matrix_Sleeve = new HTupleVector(hvec_Matrix_Sleeve_Out);


          }

          //# #############################FIN BLOQUE 1###########################################


          //# #####################################################################################
          //# #################### BLOQUE 2########################################################
          //# ################Identificación de elementos en el pallet#############################
          //# #### Input -> RV_CmdFotogen #########################################################
          //# ####       -> Imagen
          //# ####       -> 'PV_Pallet_to_Scan'
          //# ####       -> BD Cores
          //# #####################################################################################
          if ((int)((new HTuple((new HTuple(hv__EV1_O_CmdDatos.TupleEqual(20))).TupleOr(
              new HTuple(hv__EV1_O_CmdDatos.TupleEqual(21))))).TupleOr(new HTuple(hv__EV1_O_CmdDatos.TupleEqual(
              25)))) != 0)
          {


            HOperatorSet.ClearWindow(hv_ExpDefaultWinHandle);
            HOperatorSet.SetLineWidth(hv_ExpDefaultWinHandle, 1);
            hv_Estado_SubProceso.Dispose();hv_PoseForCalibrationPlate.Dispose();hv_ToolInCamPose.Dispose();hv_ToolInBasePose.Dispose();hv_ObjInBasePose.Dispose();
            {
            HTuple ExpTmpOutVar_0;
            Bloque_2_Smart(hv_SerialHandle, hvec_Vector_Estado_Fx, hv_AcqHandle_Cam_0_COPY_INP_TMP, 
                hv_Camera0_Parameters, hv_Camera0_Pose, hv_ConteoFotoPatron, out hv_Estado_SubProceso, 
                out hv_PoseForCalibrationPlate, out hv_ToolInCamPose, out hv_ToolInBasePose, 
                out hv_ObjInBasePose, out ExpTmpOutVar_0, out ExpTmpLocalVar_g_Error_CamaraOpt_Adq);
            hv_ConteoFotoPatron.Dispose();
            hv_ConteoFotoPatron = ExpTmpOutVar_0;
            ExpSetGlobalVar_g_Error_CamaraOpt_Adq(ExpTmpLocalVar_g_Error_CamaraOpt_Adq);
            }


          }
          //# #############################FIN BLOQUE 2############################################




          //# #####################################################################################
          //# #################### BLOQUE 3########################################################
          //# ################   SOLO Tomar Cores IRREGULARES e insertarlos #######################
          //# #### Input -> RV_CmdFotogen #########################################################
          //# ####       -> RAM Base Datos
          //# ####       -> 'PV_Pallet_to_Scan'
          //# ####       -
          //# ##################################################################################### 
          //*if (_EV1_O_CmdDatos > 21 and _EV1_O_CmdDatos <= 26  and Estado_Get_SFM_STL)
          if ((int)((new HTuple(hv__EV1_O_CmdDatos.TupleGreater(21))).TupleAnd(new HTuple(hv__EV1_O_CmdDatos.TupleLessEqual(
              26)))) != 0)
          {
            HOperatorSet.ClearWindow(hv_ExpDefaultWinHandle);

            if ((int)((new HTuple(hv_Derivada_BDD.TupleNotEqual(0))).TupleAnd(new HTuple(hv_Y_R01_PattEscaneado.TupleEqual(
                "True")))) != 0)
            {

              hv_Cod_Core_ToUse.Dispose();hv_FXcheck.Dispose();
              Get_Core_To_Use_Main(hv_SerialHandle, out hv_Cod_Core_ToUse, out hv_FXcheck);
              hv_conteoBDD.Dispose();
              hv_conteoBDD = 0;
              hv_Limite.Dispose();
              hv_Limite = 3;
              while ((int)((new HTuple(hv_Cod_Core_ToUse.TupleEqual(" "))).TupleAnd(
                  new HTuple(hv_conteoBDD.TupleLess(3)))) != 0)
              {
                hv_Cod_Core_ToUse.Dispose();hv_FXcheck.Dispose();
                Get_Core_To_Use_Main(hv_SerialHandle, out hv_Cod_Core_ToUse, out hv_FXcheck);
                using (HDevDisposeHelper dh = new HDevDisposeHelper())
                {
                {
                HTuple 
                  ExpTmpLocalVar_conteoBDD = hv_conteoBDD+1;
                hv_conteoBDD.Dispose();
                hv_conteoBDD = ExpTmpLocalVar_conteoBDD;
                }
                }
              }
              if (hv_DerivadaCore_Out == null)
                hv_DerivadaCore_Out = new HTuple();
              hv_DerivadaCore_Out[1] = hv_Cod_Core_ToUse;


              hv_Is_a_Core.Dispose();
              Get_Tipo_EntidadBDD(hv_Cod_Core_ToUse, out hv_Is_a_Core);

              if ((int)(hv_Is_a_Core.TupleAnd(new HTuple(hv_conteoBDD.TupleLess(hv_Limite)))) != 0)
              {
                if ((int)(new HTuple(((hv_DerivadaCore_Out.TupleSelect(1))).TupleNotEqual(
                    hv_DerivadaCore_Out.TupleSelect(0)))) != 0)
                {
                  hv_Objec3D.Dispose();
                  using (HDevDisposeHelper dh = new HDevDisposeHelper())
                  {
                  hv_Objec3D = new HTuple(hv_ObjectModel3D_Core_Pallet.TupleLength()
                      );
                  }
                  if ((int)(new HTuple(hv_Objec3D.TupleGreater(0))) != 0)
                  {
                    HOperatorSet.ClearObjectModel3d(hv_ObjectModel3D_Core_Pallet);
                    HOperatorSet.ClearSurfaceModel(hv_SFM_Core_Pallet);
                  }
                  {
                  HTuple ExpTmpOutVar_0;HTuple ExpTmpOutVar_1;hv_Modelo3D_Select.Dispose();HTuple ExpTmpOutVar_2;
                  hv_DerivadaCore_Out.Dispose();
                  Get_3dModel_Core(hv_SerialHandle, hv_Path_CORE_ID, hv_Path_3D_Segmentos, 
                      hv_Path_SFM_Segmentos, hvec_Vector_Estado_Fx, hv_DerivadaCore_In, 
                      hv_ObjectModel3D_Core_Pallet, hv_SFM_Core_Pallet, hv_Cod_Core_ToUse, 
                      out ExpTmpOutVar_0, out ExpTmpOutVar_1, out hv_Modelo3D_Select, 
                      out ExpTmpOutVar_2, out hv_DerivadaCore_Out);
                  hv_ObjectModel3D_Core_Pallet.Dispose();
                  hv_ObjectModel3D_Core_Pallet = ExpTmpOutVar_0;
                  hv_SFM_Core_Pallet.Dispose();
                  hv_SFM_Core_Pallet = ExpTmpOutVar_1;
                  hv_Cod_Core_ToUse.Dispose();
                  hv_Cod_Core_ToUse = ExpTmpOutVar_2;
                  }

                  Send_Data_Info("Seteo Espacial del SFM", hv_SerialHandle);
                  HOperatorSet.SetSurfaceModelParam(hv_SFM_Core_Pallet, "pose_restriction_reference_pose", 
                      ((((((new HTuple(0)).TupleConcat(0)).TupleConcat(0)).TupleConcat(
                      0)).TupleConcat(0)).TupleConcat(0)).TupleConcat(0));
                  Send_Data_Info("Seteo Angular del SFM", hv_SerialHandle);
                  using (HDevDisposeHelper dh = new HDevDisposeHelper())
                  {
                  HOperatorSet.SetSurfaceModelParam(hv_SFM_Core_Pallet, "pose_restriction_max_angle_diff", 
                      (new HTuple(10)).TupleRad());
                  }
                  Send_Data_Info("Seteo Angular Finalizado", hv_SerialHandle);

                }

                hv_DerivadaCore_In.Dispose();
                hv_DerivadaCore_In = new HTuple(hv_DerivadaCore_Out);
                hv_Estado_Get_SFM_STL.Dispose();
                hv_Estado_Get_SFM_STL = 1;
              }

            }
            //# ################################################################################
            ho_ModelImage.Dispose();ho_X.Dispose();ho_Y.Dispose();ho_Z.Dispose();ho_ImgLeftCamera.Dispose();
            {
            HTupleVector ExpTmpOutVar_0 = new HTupleVector(2);HTuple ExpTmpOutVar_1;
            Bloque_3(out ho_ModelImage, out ho_X, out ho_Y, out ho_Z, out ho_ImgLeftCamera, 
                hv_SerialHandle, hv_NxLib_COPY_INP_TMP, hv_Camera_1_COPY_INP_TMP, 
                hv_Parametros_Visualizacion, hv_Valores_Visualizacion, hv_Path_SFM_Segmentos, 
                hv_Path_3D_Segmentos, hv_Path_CORE_ID, hvec_Vector_Estado_Fx, hv_ObjectModel3D_Core_Pallet, 
                hv_SFM_Core_Pallet, hv_Modelo3D_Select, hv_WindowHandle, hv_Cod_Core_ToUse, 
                hvec_Matrix_Sleeve, hv_ConteoCirculares, out ExpTmpOutVar_0, out ExpTmpOutVar_1);
            hvec_Matrix_Sleeve.Dispose();
            hvec_Matrix_Sleeve = ExpTmpOutVar_0;
            hv_ConteoCirculares.Dispose();
            hv_ConteoCirculares = ExpTmpOutVar_1;
            }

            if ((int)(new HTuple(hv_ConteoCirculares.TupleEqual(4))) != 0)
            {
              hv_ConteoCirculares.Dispose();
              hv_ConteoCirculares = 0;
            }
          }



          //# #####################################################################################
          //# #################### BLOQUE 3.1######################################################     
          //# #### Input -> Matrix_Sleeve #########################################################
          //# #### Envio la data de las mangas    
          //# #####################################################################################     
          if ((int)((new HTuple(hv__EV1_O_CmdDatos.TupleGreater(200))).TupleAnd(new HTuple(hv__EV1_O_CmdDatos.TupleLessEqual(
              250)))) != 0)
          {

            {
            HTupleVector ExpTmpOutVar_0 = new HTupleVector(2);
            Send_Data_Sleeve_To_Robot(hv__EV1_O_CmdDatos, hvec_Matrix_Sleeve, hv_SerialHandle, 
                hv_Cod_Core_ToUse, out ExpTmpOutVar_0);
            hvec_Matrix_Sleeve.Dispose();
            hvec_Matrix_Sleeve = ExpTmpOutVar_0;
            }

          }

          hv__EBD_O_CmdDatos_Old.Dispose();
          hv__EBD_O_CmdDatos_Old = new HTuple(hv__EBD_O_CmdDatos_New);


          //# #############################FIN BLOQUE 3.1############################################

          //# #####################################################################################
          //# #################### BLOQUE Extraccion Localizadores    #############################
          //# ################        Tomar Cores e insertarlos       #############################
          //# #### Input -> RV_CmdFotogen #########################################################
          //# ####       -> PatternActual (BD)    
          //# #####################################################################################
          if ((int)((new HTuple(hv__EV1_O_CmdDatos.TupleGreaterEqual(30))).TupleAnd(
              new HTuple(hv__EV1_O_CmdDatos.TupleLessEqual(49)))) != 0)
          {
            HOperatorSet.ClearWindow(hv_ExpDefaultWinHandle);
            Bloque_localizadores_smart(hv_SerialHandle, hv_NxLib_COPY_INP_TMP, hv_Camera_1_COPY_INP_TMP, 
                hv_Matrix_Localizadores);

          }

          //# #############################FIN BLOQUE Extraccion Localizadores ####################












          //*************************************************************
          //**************************************************************
          //   Receta Automatica
          //*************************************************************
          //*************************************************************
          //******* VALOR BOOLEANO PARA AGUARDAR RECETA AUTOMATICA ******
          hv_Receta.Dispose();
          hv_Receta = 0;
          RECETA_AUTOMATICA(hv_SerialHandle, hv_Receta);
          //*************************************************************
          //*************************************************************
          //*************************************************************








          //**************************************************************
          //   Verifico que el comando sea 0
          //*************************************************************
          hv_Tag_Lectura.Dispose();hv__EV1_O_CmdDatos.Dispose();
          CmdDatosIsZero(hv_SerialHandle, out hv_Tag_Lectura, out hv__EV1_O_CmdDatos);
          //*************************************************************




        }
        // catch (Exception) 
        catch (HalconException HDevExpDefaultException1)
        {
          HDevExpDefaultException1.ToHTuple(out hv_Exception);

          hv_EstadoFx.Dispose();
          Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx);

        }


      }



      ho_Objeto_1_mangas.Dispose();
      ho_ModelImage.Dispose();
      ho_X.Dispose();
      ho_Y.Dispose();
      ho_Z.Dispose();
      ho_ImgLeftCamera.Dispose();

      hv_AcqHandle_Cam_0_COPY_INP_TMP.Dispose();
      hv_Camera_1_COPY_INP_TMP.Dispose();
      hv_NxLib_COPY_INP_TMP.Dispose();
      hv_Parametros_VisualizacionOut.Dispose();
      hv_Valores_VisualizacionOut.Dispose();
      hv_WindowHandle.Dispose();
      hv_EstadoSerialBridge.Dispose();
      hv_Estado_Get_SFM_STL.Dispose();
      hv_DerivadaCore_In.Dispose();
      hv_DerivadaCore_Out.Dispose();
      hv_ObjectModel3D_Core_Pallet.Dispose();
      hv_SFM_Core_Pallet.Dispose();
      hv_Objec3D.Dispose();
      hv_CamerasConection.Dispose();
      hv_EstadoFxBloque2.Dispose();
      hv__EBD_O_CmdDatos_Old.Dispose();
      hv__EBD_O_CmdDatos_New.Dispose();
      hv_ESTEREO.Dispose();
      hv_OPTICA.Dispose();
      hv_EstadoFx.Dispose();
      hv_Index1.Dispose();
      hv_Matrix_Localizadores.Dispose();
      hv_Index2.Dispose();
      hv_Visualizar3D.Dispose();
      hv_Camara_conexion_Est.Dispose();
      hv_Resultado.Dispose();
      hv_Procesando.Dispose();
      hv_ConteoCirculares.Dispose();
      hv_ConteoFotoPatron.Dispose();
      hv_Tag_Lectura.Dispose();
      hv__EV1_O_CmdDatos.Dispose();
      hv_Conteo_error.Dispose();
      hv_Estado.Dispose();
      hv_Vector_ID_Core_by_Segment_Pallet_1.Dispose();
      hv_Vector_ID_Core_by_Segment_Pallet_2.Dispose();
      hv_Vector_ID_Core_by_Segment_Pallet_3.Dispose();
      hv_Vector_ID_Core_by_Segment_Pallet_4.Dispose();
      hv_Vector_ID_Core_by_Segment_Pallet_5.Dispose();
      hv_Vector_ID_Core_by_Segment_Pallet_6.Dispose();
      hv_Estado_SubProceso.Dispose();
      hv_Tag_Destino.Dispose();
      hv_Valor_Variable.Dispose();
      hv_Resultado_Vision.Dispose();
      hv_Existe_BDD_New.Dispose();
      hv_g_Error_CamaraOpt_Adq_New.Dispose();
      hv_Cierra_Vision.Dispose();
      hv__EBD_O_CmdDatos.Dispose();
      hv_Y_R01_PattEscaneado.Dispose();
      hv_Derivada_BDD.Dispose();
      hv_g_CamInBasePose1.Dispose();
      hv_Pallet.Dispose();
      hv_Pallet_int.Dispose();
      hv_Segmento.Dispose();
      hv_PoseForCalibrationPlate.Dispose();
      hv_ToolInCamPose.Dispose();
      hv_ToolInBasePose.Dispose();
      hv_ObjInBasePose.Dispose();
      hv_Cod_Core_ToUse.Dispose();
      hv_FXcheck.Dispose();
      hv_conteoBDD.Dispose();
      hv_Limite.Dispose();
      hv_Is_a_Core.Dispose();
      hv_Modelo3D_Select.Dispose();
      hv_Receta.Dispose();
      hv_Exception.Dispose();
      hvec_Matrix_Sleeve.Dispose();
      hvec_BDD_Data.Dispose();
      hvec_BDD_Data_New.Dispose();
      hvec_Matrix_Sleeve_Out.Dispose();

      return;







    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_Objeto_1_mangas.Dispose();
      ho_ModelImage.Dispose();
      ho_X.Dispose();
      ho_Y.Dispose();
      ho_Z.Dispose();
      ho_ImgLeftCamera.Dispose();

      hv_AcqHandle_Cam_0_COPY_INP_TMP.Dispose();
      hv_Camera_1_COPY_INP_TMP.Dispose();
      hv_NxLib_COPY_INP_TMP.Dispose();
      hv_Parametros_VisualizacionOut.Dispose();
      hv_Valores_VisualizacionOut.Dispose();
      hv_WindowHandle.Dispose();
      hv_EstadoSerialBridge.Dispose();
      hv_Estado_Get_SFM_STL.Dispose();
      hv_DerivadaCore_In.Dispose();
      hv_DerivadaCore_Out.Dispose();
      hv_ObjectModel3D_Core_Pallet.Dispose();
      hv_SFM_Core_Pallet.Dispose();
      hv_Objec3D.Dispose();
      hv_CamerasConection.Dispose();
      hv_EstadoFxBloque2.Dispose();
      hv__EBD_O_CmdDatos_Old.Dispose();
      hv__EBD_O_CmdDatos_New.Dispose();
      hv_ESTEREO.Dispose();
      hv_OPTICA.Dispose();
      hv_EstadoFx.Dispose();
      hv_Index1.Dispose();
      hv_Matrix_Localizadores.Dispose();
      hv_Index2.Dispose();
      hv_Visualizar3D.Dispose();
      hv_Camara_conexion_Est.Dispose();
      hv_Resultado.Dispose();
      hv_Procesando.Dispose();
      hv_ConteoCirculares.Dispose();
      hv_ConteoFotoPatron.Dispose();
      hv_Tag_Lectura.Dispose();
      hv__EV1_O_CmdDatos.Dispose();
      hv_Conteo_error.Dispose();
      hv_Estado.Dispose();
      hv_Vector_ID_Core_by_Segment_Pallet_1.Dispose();
      hv_Vector_ID_Core_by_Segment_Pallet_2.Dispose();
      hv_Vector_ID_Core_by_Segment_Pallet_3.Dispose();
      hv_Vector_ID_Core_by_Segment_Pallet_4.Dispose();
      hv_Vector_ID_Core_by_Segment_Pallet_5.Dispose();
      hv_Vector_ID_Core_by_Segment_Pallet_6.Dispose();
      hv_Estado_SubProceso.Dispose();
      hv_Tag_Destino.Dispose();
      hv_Valor_Variable.Dispose();
      hv_Resultado_Vision.Dispose();
      hv_Existe_BDD_New.Dispose();
      hv_g_Error_CamaraOpt_Adq_New.Dispose();
      hv_Cierra_Vision.Dispose();
      hv__EBD_O_CmdDatos.Dispose();
      hv_Y_R01_PattEscaneado.Dispose();
      hv_Derivada_BDD.Dispose();
      hv_g_CamInBasePose1.Dispose();
      hv_Pallet.Dispose();
      hv_Pallet_int.Dispose();
      hv_Segmento.Dispose();
      hv_PoseForCalibrationPlate.Dispose();
      hv_ToolInCamPose.Dispose();
      hv_ToolInBasePose.Dispose();
      hv_ObjInBasePose.Dispose();
      hv_Cod_Core_ToUse.Dispose();
      hv_FXcheck.Dispose();
      hv_conteoBDD.Dispose();
      hv_Limite.Dispose();
      hv_Is_a_Core.Dispose();
      hv_Modelo3D_Select.Dispose();
      hv_Receta.Dispose();
      hv_Exception.Dispose();
      hvec_Matrix_Sleeve.Dispose();
      hvec_BDD_Data.Dispose();
      hvec_BDD_Data_New.Dispose();
      hvec_Matrix_Sleeve_Out.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Adq_Imagen (out HObject ho_ModelImage, HTuple hv_NxLib, HTuple hv_Camera, 
      out HTuple hv_Camara_conexion_Est)
  {



    // Local iconic variables 

    HObject ho_Regions=null, ho_Contours=null;

    // Local control variables 

    HTuple hv_Data = new HTuple(), hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ModelImage);
    HOperatorSet.GenEmptyObj(out ho_Regions);
    HOperatorSet.GenEmptyObj(out ho_Contours);
    hv_Camara_conexion_Est = new HTuple();
    try
    {
      hv_Camara_conexion_Est.Dispose();
      hv_Camara_conexion_Est = 1;
      try
      {

        HOperatorSet.SetFramegrabberParam(hv_NxLib, "do_execute", "Capture");
        HOperatorSet.SetFramegrabberParam(hv_NxLib, "do_execute", "ComputeDisparityMap");
        HOperatorSet.SetFramegrabberParam(hv_NxLib, "do_execute", "ComputePointMap");

        //set_framegrabber_param (Camera, 'grab_data_items', ['Images/Rectified/Left','Images/Rectified/Right','Images/PointMap'])
        //
        ho_ModelImage.Dispose();ho_Regions.Dispose();ho_Contours.Dispose();hv_Data.Dispose();
        HOperatorSet.GrabData(out ho_ModelImage, out ho_Regions, out ho_Contours, 
            hv_Camera, out hv_Data);


      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        try
        {
          HOperatorSet.SetFramegrabberParam(hv_NxLib, "do_execute", "Capture");
          HOperatorSet.SetFramegrabberParam(hv_NxLib, "do_execute", "ComputeDisparityMap");
          HOperatorSet.SetFramegrabberParam(hv_NxLib, "do_execute", "ComputePointMap");

          //set_framegrabber_param (Camera, 'grab_data_items', ['Images/Rectified/Left','Images/Rectified/Right','Images/PointMap'])
          //
          ho_ModelImage.Dispose();ho_Regions.Dispose();ho_Contours.Dispose();hv_Data.Dispose();
          HOperatorSet.GrabData(out ho_ModelImage, out ho_Regions, out ho_Contours, 
              hv_Camera, out hv_Data);
        }
        // catch (Exception) 
        catch (HalconException HDevExpDefaultException2)
        {
          HDevExpDefaultException2.ToHTuple(out hv_Exception);
          hv_Camara_conexion_Est.Dispose();
          hv_Camara_conexion_Est = 0;
        }

      }





      ho_Regions.Dispose();
      ho_Contours.Dispose();

      hv_Data.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_Regions.Dispose();
      ho_Contours.Dispose();

      hv_Data.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Adq_Imagen_COPY_1 (out HObject ho_ModelImage, HTuple hv_NxLib, HTuple hv_Camera)
  {



    // Local iconic variables 

    HObject ho_Regions, ho_Contours;

    // Local control variables 

    HTuple hv_Data = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ModelImage);
    HOperatorSet.GenEmptyObj(out ho_Regions);
    HOperatorSet.GenEmptyObj(out ho_Contours);
    try
    {
      HOperatorSet.SetFramegrabberParam(hv_NxLib, "do_execute", "Capture");
      HOperatorSet.SetFramegrabberParam(hv_NxLib, "do_execute", "ComputeDisparityMap");
      HOperatorSet.SetFramegrabberParam(hv_NxLib, "do_execute", "ComputePointMap");

      //set_framegrabber_param (Camera, 'grab_data_items', ['Images/Rectified/Left','Images/Rectified/Right','Images/PointMap'])

      ho_ModelImage.Dispose();ho_Regions.Dispose();ho_Contours.Dispose();hv_Data.Dispose();
      HOperatorSet.GrabData(out ho_ModelImage, out ho_Regions, out ho_Contours, hv_Camera, 
          out hv_Data);
      ho_Regions.Dispose();
      ho_Contours.Dispose();

      hv_Data.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_Regions.Dispose();
      ho_Contours.Dispose();

      hv_Data.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Adq_XYZ_Img (HObject ho_ModelImage, out HObject ho_Xm, out HObject ho_Ym, 
      out HObject ho_Zm)
  {



    // Local iconic variables 

    HObject ho_XYZMAP;
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Xm);
    HOperatorSet.GenEmptyObj(out ho_Ym);
    HOperatorSet.GenEmptyObj(out ho_Zm);
    HOperatorSet.GenEmptyObj(out ho_XYZMAP);
    try
    {
      ho_XYZMAP.Dispose();
      HOperatorSet.SelectObj(ho_ModelImage, out ho_XYZMAP, 3);
      //
      //Separate the X, Y and Z images
      ho_Xm.Dispose();
      HOperatorSet.AccessChannel(ho_XYZMAP, out ho_Xm, 1);
      ho_Ym.Dispose();
      HOperatorSet.AccessChannel(ho_XYZMAP, out ho_Ym, 2);
      ho_Zm.Dispose();
      HOperatorSet.AccessChannel(ho_XYZMAP, out ho_Zm, 3);
      ho_XYZMAP.Dispose();


      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_XYZMAP.Dispose();


      throw HDevExpDefaultException;
    }
  }

  public void Adq_XYZ_Img_COPY_1 (HObject ho_ModelImage, out HObject ho_Xm, out HObject ho_Ym, 
      out HObject ho_Zm)
  {



    // Local iconic variables 

    HObject ho_XYZMAP;
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Xm);
    HOperatorSet.GenEmptyObj(out ho_Ym);
    HOperatorSet.GenEmptyObj(out ho_Zm);
    HOperatorSet.GenEmptyObj(out ho_XYZMAP);
    try
    {
      ho_XYZMAP.Dispose();
      HOperatorSet.SelectObj(ho_ModelImage, out ho_XYZMAP, 3);

      //Separate the X, Y and Z images
      ho_Xm.Dispose();
      HOperatorSet.AccessChannel(ho_XYZMAP, out ho_Xm, 1);
      ho_Ym.Dispose();
      HOperatorSet.AccessChannel(ho_XYZMAP, out ho_Ym, 2);
      ho_Zm.Dispose();
      HOperatorSet.AccessChannel(ho_XYZMAP, out ho_Zm, 3);
      ho_XYZMAP.Dispose();


      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_XYZMAP.Dispose();


      throw HDevExpDefaultException;
    }
  }

  public void BD_Dinamica (HTuple hv_SerialHandle, HTuple hv_Estado, HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Vector_Estado_Fx, 
      out HTuple hv_Vector_ID_Core_by_Segment_Pallet_1, out HTuple hv_Vector_ID_Core_by_Segment_Pallet_2, 
      out HTuple hv_Vector_ID_Core_by_Segment_Pallet_3, out HTuple hv_Vector_ID_Core_by_Segment_Pallet_4, 
      out HTuple hv_Vector_ID_Core_by_Segment_Pallet_5, out HTuple hv_Vector_ID_Core_by_Segment_Pallet_6)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Variable_BD = new HTuple(), hv_DataBD = new HTuple();
    HTuple hv_FXcheck = new HTuple(), hv_Index = new HTuple();
    HTuple hv_FXcheck1 = new HTuple(), hv_FXcheck2 = new HTuple();
    HTuple hv_FXcheck3 = new HTuple(), hv_FXcheck4 = new HTuple();
    HTuple hv_FXcheck5 = new HTuple();
    HTuple   hv_Estado_COPY_INP_TMP = new HTuple(hv_Estado);

    // Initialize local and output iconic variables 
    hv_Vector_ID_Core_by_Segment_Pallet_1 = new HTuple();
    hv_Vector_ID_Core_by_Segment_Pallet_2 = new HTuple();
    hv_Vector_ID_Core_by_Segment_Pallet_3 = new HTuple();
    hv_Vector_ID_Core_by_Segment_Pallet_4 = new HTuple();
    hv_Vector_ID_Core_by_Segment_Pallet_5 = new HTuple();
    hv_Vector_ID_Core_by_Segment_Pallet_6 = new HTuple();
    try
    {


      hv_Estado_COPY_INP_TMP.Dispose();
      hv_Estado_COPY_INP_TMP = 2;
      Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado_COPY_INP_TMP, hv_SerialHandle);


      hv_Variable_BD.Dispose();
      hv_Variable_BD = "pallet_1";
      hv_DataBD.Dispose();hv_FXcheck.Dispose();
      Get_Pallet_BD(hv_Variable_BD, hv_SerialHandle, out hv_DataBD, out hv_FXcheck);
      for (hv_Index=0; (int)hv_Index<=(int)((new HTuple(hv_DataBD.TupleLength()))-1); hv_Index = (int)hv_Index + 1)
      {
        if (hv_Vector_ID_Core_by_Segment_Pallet_1 == null)
          hv_Vector_ID_Core_by_Segment_Pallet_1 = new HTuple();
        hv_Vector_ID_Core_by_Segment_Pallet_1[hv_Index] = hv_DataBD.TupleSelect(hv_Index);
      }

      hv_Variable_BD.Dispose();
      hv_Variable_BD = "pallet_2";
      hv_DataBD.Dispose();hv_FXcheck1.Dispose();
      Get_Pallet_BD(hv_Variable_BD, hv_SerialHandle, out hv_DataBD, out hv_FXcheck1);
      for (hv_Index=0; (int)hv_Index<=(int)((new HTuple(hv_DataBD.TupleLength()))-1); hv_Index = (int)hv_Index + 1)
      {
        if (hv_Vector_ID_Core_by_Segment_Pallet_2 == null)
          hv_Vector_ID_Core_by_Segment_Pallet_2 = new HTuple();
        hv_Vector_ID_Core_by_Segment_Pallet_2[hv_Index] = hv_DataBD.TupleSelect(hv_Index);
      }

      hv_Variable_BD.Dispose();
      hv_Variable_BD = "pallet_3";
      hv_DataBD.Dispose();hv_FXcheck2.Dispose();
      Get_Pallet_BD(hv_Variable_BD, hv_SerialHandle, out hv_DataBD, out hv_FXcheck2);
      for (hv_Index=0; (int)hv_Index<=(int)((new HTuple(hv_DataBD.TupleLength()))-1); hv_Index = (int)hv_Index + 1)
      {
        if (hv_Vector_ID_Core_by_Segment_Pallet_3 == null)
          hv_Vector_ID_Core_by_Segment_Pallet_3 = new HTuple();
        hv_Vector_ID_Core_by_Segment_Pallet_3[hv_Index] = hv_DataBD.TupleSelect(hv_Index);
      }

      hv_Variable_BD.Dispose();
      hv_Variable_BD = "pallet_4";
      hv_DataBD.Dispose();hv_FXcheck3.Dispose();
      Get_Pallet_BD(hv_Variable_BD, hv_SerialHandle, out hv_DataBD, out hv_FXcheck3);
      for (hv_Index=0; (int)hv_Index<=(int)((new HTuple(hv_DataBD.TupleLength()))-1); hv_Index = (int)hv_Index + 1)
      {
        if (hv_Vector_ID_Core_by_Segment_Pallet_4 == null)
          hv_Vector_ID_Core_by_Segment_Pallet_4 = new HTuple();
        hv_Vector_ID_Core_by_Segment_Pallet_4[hv_Index] = hv_DataBD.TupleSelect(hv_Index);
      }

      hv_Variable_BD.Dispose();
      hv_Variable_BD = "pallet_5";
      hv_DataBD.Dispose();hv_FXcheck4.Dispose();
      Get_Pallet_BD(hv_Variable_BD, hv_SerialHandle, out hv_DataBD, out hv_FXcheck4);
      for (hv_Index=0; (int)hv_Index<=(int)((new HTuple(hv_DataBD.TupleLength()))-1); hv_Index = (int)hv_Index + 1)
      {
        if (hv_Vector_ID_Core_by_Segment_Pallet_5 == null)
          hv_Vector_ID_Core_by_Segment_Pallet_5 = new HTuple();
        hv_Vector_ID_Core_by_Segment_Pallet_5[hv_Index] = hv_DataBD.TupleSelect(hv_Index);
      }


      hv_Variable_BD.Dispose();
      hv_Variable_BD = "pallet_6";
      hv_DataBD.Dispose();hv_FXcheck5.Dispose();
      Get_Pallet_BD(hv_Variable_BD, hv_SerialHandle, out hv_DataBD, out hv_FXcheck5);
      for (hv_Index=0; (int)hv_Index<=(int)((new HTuple(hv_DataBD.TupleLength()))-1); hv_Index = (int)hv_Index + 1)
      {
        if (hv_Vector_ID_Core_by_Segment_Pallet_6 == null)
          hv_Vector_ID_Core_by_Segment_Pallet_6 = new HTuple();
        hv_Vector_ID_Core_by_Segment_Pallet_6[hv_Index] = hv_DataBD.TupleSelect(hv_Index);
      }






      hv_Estado_COPY_INP_TMP.Dispose();
      hv_Variable_BD.Dispose();
      hv_DataBD.Dispose();
      hv_FXcheck.Dispose();
      hv_Index.Dispose();
      hv_FXcheck1.Dispose();
      hv_FXcheck2.Dispose();
      hv_FXcheck3.Dispose();
      hv_FXcheck4.Dispose();
      hv_FXcheck5.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Estado_COPY_INP_TMP.Dispose();
      hv_Variable_BD.Dispose();
      hv_DataBD.Dispose();
      hv_FXcheck.Dispose();
      hv_Index.Dispose();
      hv_FXcheck1.Dispose();
      hv_FXcheck2.Dispose();
      hv_FXcheck3.Dispose();
      hv_FXcheck4.Dispose();
      hv_FXcheck5.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Bloque_01_Send_Dinamic_Info_Pallet (HObject ho_Objeto_1_mangas, HTuple hv_SerialHandle, 
      HTuple hv__EV1_O_CmdDatos, HTuple hv_Path_CORE_ID, HTuple hv_Path_3D_Segmentos, 
      HTuple hv_Path_SFM_Segmentos, HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Vector_Estado_Fx, 
      HTuple hv_NxLib, HTuple hv_Camera_1, HTuple hv_Parametros_Visualizacion, HTuple hv_Valores_Visualizacion, 
      HTuple hv_WindowHandle, HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Matrix_Sleeve, 
      HTuple hv_ConteoCirculares, HTuple hv_EstadoFx, HTuple hv_g_CamInBasePose1, 
      out HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Matrix_SleeveOut, out HTuple hv_Camara_conexion_Est)
  {




    // Local iconic variables 

    HObject ho_ModelImage=null, ho_X=null, ho_Y=null;
    HObject ho_Z=null, ho_ImgLeftCamera=null, ho_ImageGauss=null;
    HObject ho_Regions=null, ho_ConnectedRegions=null, ho_SelectedRegions=null;
    HObject ho_ImageReduced=null, ho_LocalMaxima=null, ho_ImageReduced1=null;
    HObject ho_ConnectedRegions1=null;

    // Local control variables 

    HTuple hv_ConteoCircularesOut = new HTuple();
    HTuple hv_Vector_Variables = new HTuple(), hv_N_Elementos = new HTuple();
    HTuple hv_Index = new HTuple(), hv_Tag_To_Write = new HTuple();
    HTuple hv_Valor_Variable = new HTuple(), hv_Pallet = new HTuple();
    HTuple hv_N_Pallet_to_Scan = new HTuple(), hv_Segmento = new HTuple();
    HTuple hv_IdexVector = new HTuple(), hv_FXcheck = new HTuple();
    HTuple hv_ExisteAlgunApilado = new HTuple(), hv_PosibleManga = new HTuple();
    HTuple hv_IsA_Sleeve = new HTuple(), hv_ElementosMatrix = new HTuple();
    HTuple hv_TagToWrite = new HTuple(), hv_ValorTag = new HTuple();
    HTuple hv_Resultado = new HTuple(), hv_Procesando = new HTuple();
    HTuple hv_ElementosMatrixSleeve = new HTuple(), hv_IndexDatos = new HTuple();
    HTuple hv_ExisteData = new HTuple(), hv_PosicionManga = new HTuple();
    HTuple hv_PosicionManga_to_Robot = new HTuple(), hv_Tag_Destino = new HTuple();
    HTuple hv_Estado_SubProceso = new HTuple(), hv_ExisteApilado_en_Segemento = new HTuple();
    HTuple hv_ObjectModel3D_Core = new HTuple(), hv_Estado_Get_SFM_STL = new HTuple();
    HTuple hv_Modelo3D_Select = new HTuple(), hv_AltoTotal_Core = new HTuple();
    HTuple hv_AnchoTotal_Core = new HTuple(), hv_LargoTotal_Core = new HTuple();
    HTuple hv_DataSelect_Ordenado = new HTuple(), hv_Core_Apilado = new HTuple();
    HTuple hv_Core_Vertical = new HTuple(), hv_ObjectModel3D_Core_Pallet = new HTuple();
    HTuple hv_SFM_Core_Pallet = new HTuple(), hv_SacaFoto = new HTuple();
    HTuple hv_UmbralError = new HTuple(), hv_Conteo_Error = new HTuple();
    HTuple hv_tagLectura = new HTuple(), hv_Pallet_To_Scan = new HTuple();
    HTuple hv_Segmento_To_Scan = new HTuple(), hv_Estado_Fx = new HTuple();
    HTuple hv_FXcheck1 = new HTuple(), hv_Segmento_Core_Actual = new HTuple();
    HTuple hv_Dist_CamaraoPiso = new HTuple(), hv_Estado_Fx1 = new HTuple();
    HTuple hv_Camara_conexion_Est1 = new HTuple(), hv_DataManga = new HTuple();
    HTuple hv_PoseManga = new HTuple(), hv_Variable_PLC_Existencia = new HTuple();
    HTuple hv_Exception = new HTuple();

    HTupleVector hvec_Matrix_Pallet = new HTupleVector(2);
    HTupleVector hvec_DataSelect = new HTupleVector(1);
    HTuple   hv_EstadoFx_COPY_INP_TMP = new HTuple(hv_EstadoFx);
    HTupleVector  hvec_Matrix_Sleeve_COPY_INP_TMP = new HTupleVector(hvec_Matrix_Sleeve);

    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ModelImage);
    HOperatorSet.GenEmptyObj(out ho_X);
    HOperatorSet.GenEmptyObj(out ho_Y);
    HOperatorSet.GenEmptyObj(out ho_Z);
    HOperatorSet.GenEmptyObj(out ho_ImgLeftCamera);
    HOperatorSet.GenEmptyObj(out ho_ImageGauss);
    HOperatorSet.GenEmptyObj(out ho_Regions);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
    HOperatorSet.GenEmptyObj(out ho_SelectedRegions);
    HOperatorSet.GenEmptyObj(out ho_ImageReduced);
    HOperatorSet.GenEmptyObj(out ho_LocalMaxima);
    HOperatorSet.GenEmptyObj(out ho_ImageReduced1);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions1);
    hvec_Matrix_SleeveOut = new HTupleVector(2);
    hv_Camara_conexion_Est = new HTuple();
    try
    {
      hv_EstadoFx_COPY_INP_TMP.Dispose();
      hv_EstadoFx_COPY_INP_TMP = 1;
      try
      {


        Send_Data_Info("-------------> Bloque 1.1 de Envio de datos Iniciado <-------------", 
            hv_SerialHandle);

        hv_ConteoCircularesOut.Dispose();
        hv_ConteoCircularesOut = new HTuple(hv_ConteoCirculares);
        hvec_Matrix_SleeveOut.Dispose();
        hvec_Matrix_SleeveOut = new HTupleVector(hvec_Matrix_Sleeve_COPY_INP_TMP);

        //***************************
        //Reinicio Variables
        //***************************
        hv_Vector_Variables.Dispose();
        Get_VectorVariables(out hv_Vector_Variables);
        //**************************************
        //Envio datos de los elementos
        //**************************************
        //Envio los primeros 5 elementoss
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_N_Elementos.Dispose();
        HOperatorSet.TupleInt(new HTuple(hv_Vector_Variables.TupleLength()), out hv_N_Elementos);
        }


        HTuple end_val20 = hv_N_Elementos-1;
        HTuple step_val20 = 1;
        for (hv_Index=0; hv_Index.Continue(end_val20, step_val20); hv_Index = hv_Index.TupleAdd(step_val20))
        {
          hv_Tag_To_Write.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Tag_To_Write = hv_Vector_Variables.TupleSelect(
              hv_Index);
          }
          hv_Valor_Variable.Dispose();
          hv_Valor_Variable = 0;
          {
          HTuple ExpTmpOutVar_0;
          HOperatorSet.TupleNumber(hv_Valor_Variable, out ExpTmpOutVar_0);
          hv_Valor_Variable.Dispose();
          hv_Valor_Variable = ExpTmpOutVar_0;
          }
          Send_EthernetIP_Data(hv_Tag_To_Write, hv_Valor_Variable, hv_SerialHandle);
        }
        //************************************

        hv_Pallet.Dispose();hv_N_Pallet_to_Scan.Dispose();hv_Segmento.Dispose();
        Get_Segmento_AND_Pallet(hv__EV1_O_CmdDatos, out hv_Pallet, out hv_N_Pallet_to_Scan, 
            out hv_Segmento);


        hv_IdexVector.Dispose();
        hv_IdexVector = new HTuple(hv_Segmento);



        hvec_Matrix_Pallet.Dispose();hv_FXcheck.Dispose();hv_ExisteAlgunApilado.Dispose();
        Get_DinamicDataPallet(hv_N_Pallet_to_Scan, hv_SerialHandle, out hvec_Matrix_Pallet, 
            out hv_FXcheck, out hv_ExisteAlgunApilado);
        hv_PosibleManga.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_PosibleManga = new HTuple(hvec_Matrix_Pallet[1][0].T);
        }
        hv_IsA_Sleeve.Dispose();
        Is_a_Sleeve(hv_PosibleManga, out hv_IsA_Sleeve);

        hv_ElementosMatrix.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_ElementosMatrix = new HTuple(hvec_Matrix_Pallet.Length)-1;
        }

        if ((int)((new HTuple(hv_IdexVector.TupleGreater(hv_ElementosMatrix))).TupleAnd(
            hv_IsA_Sleeve.TupleNot())) != 0)
        {

          hv_TagToWrite.Dispose();
          hv_TagToWrite = "_EBD_I_NumEntidad";
          hv_ValorTag.Dispose();
          hv_ValorTag = 255;
          Send_EthernetIP_Data(hv_TagToWrite, hv_ValorTag, hv_SerialHandle);
          Send_Data_Info("-------------> No existen mas elementos que Enviar. <-------------", 
              hv_SerialHandle);
          //#### Envio data de estado ########################
          hv_Resultado.Dispose();
          hv_Resultado = 1;
          hv_Procesando.Dispose();
          hv_Procesando = 0;
          Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
          Send_Data_Info("-------------> Envio de datos Finalizados <-------------", 
              hv_SerialHandle);

          ho_ModelImage.Dispose();
          ho_X.Dispose();
          ho_Y.Dispose();
          ho_Z.Dispose();
          ho_ImgLeftCamera.Dispose();
          ho_ImageGauss.Dispose();
          ho_Regions.Dispose();
          ho_ConnectedRegions.Dispose();
          ho_SelectedRegions.Dispose();
          ho_ImageReduced.Dispose();
          ho_LocalMaxima.Dispose();
          ho_ImageReduced1.Dispose();
          ho_ConnectedRegions1.Dispose();

          hv_EstadoFx_COPY_INP_TMP.Dispose();
          hv_ConteoCircularesOut.Dispose();
          hv_Vector_Variables.Dispose();
          hv_N_Elementos.Dispose();
          hv_Index.Dispose();
          hv_Tag_To_Write.Dispose();
          hv_Valor_Variable.Dispose();
          hv_Pallet.Dispose();
          hv_N_Pallet_to_Scan.Dispose();
          hv_Segmento.Dispose();
          hv_IdexVector.Dispose();
          hv_FXcheck.Dispose();
          hv_ExisteAlgunApilado.Dispose();
          hv_PosibleManga.Dispose();
          hv_IsA_Sleeve.Dispose();
          hv_ElementosMatrix.Dispose();
          hv_TagToWrite.Dispose();
          hv_ValorTag.Dispose();
          hv_Resultado.Dispose();
          hv_Procesando.Dispose();
          hv_ElementosMatrixSleeve.Dispose();
          hv_IndexDatos.Dispose();
          hv_ExisteData.Dispose();
          hv_PosicionManga.Dispose();
          hv_PosicionManga_to_Robot.Dispose();
          hv_Tag_Destino.Dispose();
          hv_Estado_SubProceso.Dispose();
          hv_ExisteApilado_en_Segemento.Dispose();
          hv_ObjectModel3D_Core.Dispose();
          hv_Estado_Get_SFM_STL.Dispose();
          hv_Modelo3D_Select.Dispose();
          hv_AltoTotal_Core.Dispose();
          hv_AnchoTotal_Core.Dispose();
          hv_LargoTotal_Core.Dispose();
          hv_DataSelect_Ordenado.Dispose();
          hv_Core_Apilado.Dispose();
          hv_Core_Vertical.Dispose();
          hv_ObjectModel3D_Core_Pallet.Dispose();
          hv_SFM_Core_Pallet.Dispose();
          hv_SacaFoto.Dispose();
          hv_UmbralError.Dispose();
          hv_Conteo_Error.Dispose();
          hv_tagLectura.Dispose();
          hv_Pallet_To_Scan.Dispose();
          hv_Segmento_To_Scan.Dispose();
          hv_Estado_Fx.Dispose();
          hv_FXcheck1.Dispose();
          hv_Segmento_Core_Actual.Dispose();
          hv_Dist_CamaraoPiso.Dispose();
          hv_Estado_Fx1.Dispose();
          hv_Camara_conexion_Est1.Dispose();
          hv_DataManga.Dispose();
          hv_PoseManga.Dispose();
          hv_Variable_PLC_Existencia.Dispose();
          hv_Exception.Dispose();
          hvec_Matrix_Pallet.Dispose();
          hvec_DataSelect.Dispose();

          return;

        }
        else
        {

          //*************************************
          //Por defecto la entidad es un core
          //*************************************
          hv_TagToWrite.Dispose();
          hv_TagToWrite = "_EBD_I_NumEntidad";
          hv_ValorTag.Dispose();
          hv_ValorTag = 2;
          Send_EthernetIP_Data(hv_TagToWrite, hv_ValorTag, hv_SerialHandle);

        }



        //******************************************************************
        //Obtengo los datos de la Matrix de Sleeve
        //******************************************************************
        hv_ElementosMatrixSleeve.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_ElementosMatrixSleeve = new HTuple(hvec_Matrix_Sleeve_COPY_INP_TMP[1].Length);
        }
        hv_IndexDatos.Dispose();
        hv_IndexDatos = 3;
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_ElementosMatrixSleeve = hv_ElementosMatrixSleeve-hv_IndexDatos;
        hv_ElementosMatrixSleeve.Dispose();
        hv_ElementosMatrixSleeve = ExpTmpLocalVar_ElementosMatrixSleeve;
        }
        }
        hv_ExisteData.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_ExisteData = new HTuple(hvec_Matrix_Sleeve_COPY_INP_TMP[1][3].T);
        }

        if ((int)(new HTuple(hv_ExisteData.TupleNotEqual(""))) != 0)
        {
          if ((int)((new HTuple(hv_ElementosMatrixSleeve.TupleGreaterEqual(hv_IdexVector))).TupleAnd(
              hv_IsA_Sleeve)) != 0)
          {

            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            Send_Data_Info("-------------> Envio Data  Ram Mangas Index-> "+hv_IdexVector, 
                hv_SerialHandle);
            }
            Send_Data_Ordenado_Manga(hvec_Matrix_Pallet, hv_Path_CORE_ID, hv_Path_3D_Segmentos, 
                hv_Path_SFM_Segmentos, hvec_Vector_Estado_Fx, hv_SerialHandle, hv_Tag_To_Write, 
                hv_Valor_Variable, hv_N_Elementos, hv_Vector_Variables);


            hv_PosicionManga.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_PosicionManga = new HTuple(hvec_Matrix_Sleeve_COPY_INP_TMP[1][(hv_IndexDatos+hv_IdexVector)-1].T);
            }
            {
            HTuple ExpTmpOutVar_0;
            HOperatorSet.TupleSplit(hv_PosicionManga, ";", out ExpTmpOutVar_0);
            hv_PosicionManga.Dispose();
            hv_PosicionManga = ExpTmpOutVar_0;
            }
            {
            HTuple ExpTmpOutVar_0;
            HOperatorSet.TupleNumber(hv_PosicionManga, out ExpTmpOutVar_0);
            hv_PosicionManga.Dispose();
            hv_PosicionManga = ExpTmpOutVar_0;
            }

            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_PosicionManga_to_Robot.Dispose();
            HOperatorSet.CreatePose(hv_PosicionManga.TupleSelect(0), hv_PosicionManga.TupleSelect(
                1), hv_PosicionManga.TupleSelect(2), 0, 0, 0, "Rp+T", "gba", "point", 
                out hv_PosicionManga_to_Robot);
            }

            Send_Data_To_Robot(hv_PosicionManga_to_Robot, hv_SerialHandle);



            hv_IdexVector.Dispose();
            hv_IdexVector = 1;

            hv_Tag_Destino.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_Tag_Destino = (("_EV01_I_Pallet"+hv_N_Pallet_to_Scan)+"ZValid.")+1;
            }
            hv_Estado_SubProceso.Dispose();
            hv_Estado_SubProceso = 0;
            //****************************************************************
            hv_Valor_Variable.Dispose();
            hv_Valor_Variable = 1;
            //****************************************************************
            Send_EthernetIP_Data(hv_Tag_Destino, hv_Valor_Variable, hv_SerialHandle);
            //****************************************************************
            //Es Manga
            //****************************************************************
            hv_TagToWrite.Dispose();
            hv_TagToWrite = "_EBD_I_NumEntidad";
            hv_ValorTag.Dispose();
            hv_ValorTag = 3;
            Send_EthernetIP_Data(hv_TagToWrite, hv_ValorTag, hv_SerialHandle);

            //#### Envio data de estado ########################
            hv_Resultado.Dispose();
            hv_Resultado = 1;
            hv_Procesando.Dispose();
            hv_Procesando = 1;
            Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
            Send_Data_Info("-------------> Bloque de Envio de datos Finalizado <-------------", 
                hv_SerialHandle);

            ho_ModelImage.Dispose();
            ho_X.Dispose();
            ho_Y.Dispose();
            ho_Z.Dispose();
            ho_ImgLeftCamera.Dispose();
            ho_ImageGauss.Dispose();
            ho_Regions.Dispose();
            ho_ConnectedRegions.Dispose();
            ho_SelectedRegions.Dispose();
            ho_ImageReduced.Dispose();
            ho_LocalMaxima.Dispose();
            ho_ImageReduced1.Dispose();
            ho_ConnectedRegions1.Dispose();

            hv_EstadoFx_COPY_INP_TMP.Dispose();
            hv_ConteoCircularesOut.Dispose();
            hv_Vector_Variables.Dispose();
            hv_N_Elementos.Dispose();
            hv_Index.Dispose();
            hv_Tag_To_Write.Dispose();
            hv_Valor_Variable.Dispose();
            hv_Pallet.Dispose();
            hv_N_Pallet_to_Scan.Dispose();
            hv_Segmento.Dispose();
            hv_IdexVector.Dispose();
            hv_FXcheck.Dispose();
            hv_ExisteAlgunApilado.Dispose();
            hv_PosibleManga.Dispose();
            hv_IsA_Sleeve.Dispose();
            hv_ElementosMatrix.Dispose();
            hv_TagToWrite.Dispose();
            hv_ValorTag.Dispose();
            hv_Resultado.Dispose();
            hv_Procesando.Dispose();
            hv_ElementosMatrixSleeve.Dispose();
            hv_IndexDatos.Dispose();
            hv_ExisteData.Dispose();
            hv_PosicionManga.Dispose();
            hv_PosicionManga_to_Robot.Dispose();
            hv_Tag_Destino.Dispose();
            hv_Estado_SubProceso.Dispose();
            hv_ExisteApilado_en_Segemento.Dispose();
            hv_ObjectModel3D_Core.Dispose();
            hv_Estado_Get_SFM_STL.Dispose();
            hv_Modelo3D_Select.Dispose();
            hv_AltoTotal_Core.Dispose();
            hv_AnchoTotal_Core.Dispose();
            hv_LargoTotal_Core.Dispose();
            hv_DataSelect_Ordenado.Dispose();
            hv_Core_Apilado.Dispose();
            hv_Core_Vertical.Dispose();
            hv_ObjectModel3D_Core_Pallet.Dispose();
            hv_SFM_Core_Pallet.Dispose();
            hv_SacaFoto.Dispose();
            hv_UmbralError.Dispose();
            hv_Conteo_Error.Dispose();
            hv_tagLectura.Dispose();
            hv_Pallet_To_Scan.Dispose();
            hv_Segmento_To_Scan.Dispose();
            hv_Estado_Fx.Dispose();
            hv_FXcheck1.Dispose();
            hv_Segmento_Core_Actual.Dispose();
            hv_Dist_CamaraoPiso.Dispose();
            hv_Estado_Fx1.Dispose();
            hv_Camara_conexion_Est1.Dispose();
            hv_DataManga.Dispose();
            hv_PoseManga.Dispose();
            hv_Variable_PLC_Existencia.Dispose();
            hv_Exception.Dispose();
            hvec_Matrix_Pallet.Dispose();
            hvec_DataSelect.Dispose();

            return;


          }
          else if ((int)(hv_IsA_Sleeve) != 0)
          {

            hv_TagToWrite.Dispose();
            hv_TagToWrite = "_EBD_I_NumEntidad";
            hv_ValorTag.Dispose();
            hv_ValorTag = 255;
            Send_EthernetIP_Data(hv_TagToWrite, hv_ValorTag, hv_SerialHandle);
            Send_Data_Info("-------------> No existen mas elementos que Enviar. <-------------", 
                hv_SerialHandle);
            //# ### Envio data de estado ########################
            hv_Resultado.Dispose();
            hv_Resultado = 1;
            hv_Procesando.Dispose();
            hv_Procesando = 1;
            Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
            Send_Data_Info("-------------> Envio de datos Finalizados <-------------", 
                hv_SerialHandle);

            ho_ModelImage.Dispose();
            ho_X.Dispose();
            ho_Y.Dispose();
            ho_Z.Dispose();
            ho_ImgLeftCamera.Dispose();
            ho_ImageGauss.Dispose();
            ho_Regions.Dispose();
            ho_ConnectedRegions.Dispose();
            ho_SelectedRegions.Dispose();
            ho_ImageReduced.Dispose();
            ho_LocalMaxima.Dispose();
            ho_ImageReduced1.Dispose();
            ho_ConnectedRegions1.Dispose();

            hv_EstadoFx_COPY_INP_TMP.Dispose();
            hv_ConteoCircularesOut.Dispose();
            hv_Vector_Variables.Dispose();
            hv_N_Elementos.Dispose();
            hv_Index.Dispose();
            hv_Tag_To_Write.Dispose();
            hv_Valor_Variable.Dispose();
            hv_Pallet.Dispose();
            hv_N_Pallet_to_Scan.Dispose();
            hv_Segmento.Dispose();
            hv_IdexVector.Dispose();
            hv_FXcheck.Dispose();
            hv_ExisteAlgunApilado.Dispose();
            hv_PosibleManga.Dispose();
            hv_IsA_Sleeve.Dispose();
            hv_ElementosMatrix.Dispose();
            hv_TagToWrite.Dispose();
            hv_ValorTag.Dispose();
            hv_Resultado.Dispose();
            hv_Procesando.Dispose();
            hv_ElementosMatrixSleeve.Dispose();
            hv_IndexDatos.Dispose();
            hv_ExisteData.Dispose();
            hv_PosicionManga.Dispose();
            hv_PosicionManga_to_Robot.Dispose();
            hv_Tag_Destino.Dispose();
            hv_Estado_SubProceso.Dispose();
            hv_ExisteApilado_en_Segemento.Dispose();
            hv_ObjectModel3D_Core.Dispose();
            hv_Estado_Get_SFM_STL.Dispose();
            hv_Modelo3D_Select.Dispose();
            hv_AltoTotal_Core.Dispose();
            hv_AnchoTotal_Core.Dispose();
            hv_LargoTotal_Core.Dispose();
            hv_DataSelect_Ordenado.Dispose();
            hv_Core_Apilado.Dispose();
            hv_Core_Vertical.Dispose();
            hv_ObjectModel3D_Core_Pallet.Dispose();
            hv_SFM_Core_Pallet.Dispose();
            hv_SacaFoto.Dispose();
            hv_UmbralError.Dispose();
            hv_Conteo_Error.Dispose();
            hv_tagLectura.Dispose();
            hv_Pallet_To_Scan.Dispose();
            hv_Segmento_To_Scan.Dispose();
            hv_Estado_Fx.Dispose();
            hv_FXcheck1.Dispose();
            hv_Segmento_Core_Actual.Dispose();
            hv_Dist_CamaraoPiso.Dispose();
            hv_Estado_Fx1.Dispose();
            hv_Camara_conexion_Est1.Dispose();
            hv_DataManga.Dispose();
            hv_PoseManga.Dispose();
            hv_Variable_PLC_Existencia.Dispose();
            hv_Exception.Dispose();
            hvec_Matrix_Pallet.Dispose();
            hvec_DataSelect.Dispose();

            return;


          }
        }

        //******************************************************************
        hvec_DataSelect.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hvec_DataSelect = dh.Take(hvec_Matrix_Pallet[hv_IdexVector]);
        }
        //******************************************************************
        //Defino si el core es apilado  o Vertical
        //******************************************************************
        //Considerar Core Vertical como 55 *<---------------------------
        //**********************************
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_ExisteApilado_en_Segemento.Dispose();
        HOperatorSet.TupleNumber(hvec_DataSelect[5].T, out hv_ExisteApilado_en_Segemento);
        }
        //******************************************************************



        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_ObjectModel3D_Core.Dispose();hv_Estado_Get_SFM_STL.Dispose();hv_Modelo3D_Select.Dispose();
        Get_Stl_Object_Core(hvec_DataSelect[0].T, hv_Path_CORE_ID, hv_Path_3D_Segmentos, 
            hv_Path_SFM_Segmentos, hvec_Vector_Estado_Fx, hv_SerialHandle, out hv_ObjectModel3D_Core, 
            out hv_Estado_Get_SFM_STL, out hv_Modelo3D_Select);
        }

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_AltoTotal_Core.Dispose();hv_AnchoTotal_Core.Dispose();hv_LargoTotal_Core.Dispose();
        Get_DimencionesCore(hv_ObjectModel3D_Core, hv_IsA_Sleeve, hvec_DataSelect[0].T, 
            hv_SerialHandle, out hv_AltoTotal_Core, out hv_AnchoTotal_Core, out hv_LargoTotal_Core);
        }


        HOperatorSet.ClearObjectModel3d(hv_ObjectModel3D_Core);


        //* Codificacion Core
        if (hv_DataSelect_Ordenado == null)
          hv_DataSelect_Ordenado = new HTuple();
        hv_DataSelect_Ordenado[0] = hvec_DataSelect[4].T;
        if (hv_DataSelect_Ordenado == null)
          hv_DataSelect_Ordenado = new HTuple();
        hv_DataSelect_Ordenado[1] = hvec_DataSelect[1].T;
        if (hv_DataSelect_Ordenado == null)
          hv_DataSelect_Ordenado = new HTuple();
        hv_DataSelect_Ordenado[2] = hvec_DataSelect[2].T;
        if (hv_DataSelect_Ordenado == null)
          hv_DataSelect_Ordenado = new HTuple();
        hv_DataSelect_Ordenado[3] = hvec_DataSelect[3].T;
        if (hv_DataSelect_Ordenado == null)
          hv_DataSelect_Ordenado = new HTuple();
        hv_DataSelect_Ordenado[4] = hvec_DataSelect[5].T;
        if (hv_DataSelect_Ordenado == null)
          hv_DataSelect_Ordenado = new HTuple();
        hv_DataSelect_Ordenado[5] = hv_AltoTotal_Core;
        if (hv_DataSelect_Ordenado == null)
          hv_DataSelect_Ordenado = new HTuple();
        hv_DataSelect_Ordenado[6] = 0;
        if (hv_DataSelect_Ordenado == null)
          hv_DataSelect_Ordenado = new HTuple();
        hv_DataSelect_Ordenado[7] = hv_AnchoTotal_Core;


        //***************************************************************************************
        Send_EthernetIP_Data(hv_Tag_To_Write, hv_Valor_Variable, hv_SerialHandle);
        //Envio los eleemntos
        HTuple end_val169 = hv_N_Elementos-1;
        HTuple step_val169 = 1;
        for (hv_Index=0; hv_Index.Continue(end_val169, step_val169); hv_Index = hv_Index.TupleAdd(step_val169))
        {
          hv_Tag_To_Write.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Tag_To_Write = hv_Vector_Variables.TupleSelect(
              hv_Index);
          }
          hv_Valor_Variable.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Valor_Variable = hv_DataSelect_Ordenado.TupleSelect(
              hv_Index);
          }
          {
          HTuple ExpTmpOutVar_0;
          HOperatorSet.TupleNumber(hv_Valor_Variable, out ExpTmpOutVar_0);
          hv_Valor_Variable.Dispose();
          hv_Valor_Variable = ExpTmpOutVar_0;
          }
          Send_EthernetIP_Data(hv_Tag_To_Write, hv_Valor_Variable, hv_SerialHandle);
        }
        //***************************************************************************************












        //# ################################################################################################## 
        //# ##### Constantes de Apilados y verticales ########################################################    
        hv_Core_Apilado.Dispose();
        hv_Core_Apilado = 1;
        hv_Core_Vertical.Dispose();
        hv_Core_Vertical = 2;
        //# ##################################################################################################
        //                        ES UN CORE APILADO?
        //# ##################################################################################################
        if ((int)(new HTuple(hv_ExisteApilado_en_Segemento.TupleEqual(hv_Core_Apilado))) != 0)
        {

          //Bloque que saca foto de apilados
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_ObjectModel3D_Core_Pallet.Dispose();hv_SFM_Core_Pallet.Dispose();hv_Estado_Get_SFM_STL.Dispose();hv_Modelo3D_Select.Dispose();
          Get_SFM_STL(hvec_DataSelect[0].T, hv_Path_CORE_ID, hv_Path_3D_Segmentos, 
              hv_Path_SFM_Segmentos, hvec_Vector_Estado_Fx, hv_SerialHandle, out hv_ObjectModel3D_Core_Pallet, 
              out hv_SFM_Core_Pallet, out hv_Estado_Get_SFM_STL, out hv_Modelo3D_Select);
          }


          Send_Data_Info("Seteo Espacial del SFM", hv_SerialHandle);
          HOperatorSet.SetSurfaceModelParam(hv_SFM_Core_Pallet, "pose_restriction_reference_pose", 
              ((((((new HTuple(0)).TupleConcat(0)).TupleConcat(0)).TupleConcat(0)).TupleConcat(
              0)).TupleConcat(0)).TupleConcat(0));
          Send_Data_Info("Seteo Angular del SFM", hv_SerialHandle);
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          HOperatorSet.SetSurfaceModelParam(hv_SFM_Core_Pallet, "pose_restriction_max_angle_diff", 
              (new HTuple(10)).TupleRad());
          }
          Send_Data_Info("Seteo Angular Finalizado", hv_SerialHandle);


          hv_SacaFoto.Dispose();
          hv_SacaFoto = 0;
          hv_UmbralError.Dispose();
          hv_UmbralError = 500;
          hv_Conteo_Error.Dispose();
          hv_Conteo_Error = 0;

          //*****************************************************
          hv_Resultado.Dispose();
          hv_Resultado = 1;
          hv_Procesando.Dispose();
          hv_Procesando = 0;
          Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);

          //**********************************************************************************
          //Espero a que el robot se posicione en el segmento
          //**********************************************************************************
          while ((int)((new HTuple(hv_SacaFoto.TupleEqual(0))).TupleAnd(new HTuple(hv_Conteo_Error.TupleLessEqual(
              hv_UmbralError)))) != 0)
          {
            hv_tagLectura.Dispose();
            hv_tagLectura = "_EV01_I_FotoApilado";
            hv_SacaFoto.Dispose();
            Read_EthernetIP_Data(hv_tagLectura, hv_SerialHandle, out hv_SacaFoto);

            {
            HTuple ExpTmpOutVar_0;
            Get_Bolean(hv_SacaFoto, out ExpTmpOutVar_0);
            hv_SacaFoto.Dispose();
            hv_SacaFoto = ExpTmpOutVar_0;
            }

            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            {
            HTuple 
              ExpTmpLocalVar_Conteo_Error = hv_Conteo_Error+1;
            hv_Conteo_Error.Dispose();
            hv_Conteo_Error = ExpTmpLocalVar_Conteo_Error;
            }
            }

          }

          //*****************************************************
          hv_Resultado.Dispose();
          hv_Resultado = 0;
          hv_Procesando.Dispose();
          hv_Procesando = 1;
          Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);

          //**********************************************************************************





          if ((int)(new HTuple(hv_Conteo_Error.TupleGreaterEqual(hv_UmbralError))) != 0)
          {
            Send_Data_Info("#### Error ####  Robot no llego a posicion de foto en segmento  ", 
                hv_SerialHandle);
            //***************************
            //make something
            //****************************
            hv_Resultado.Dispose();
            hv_Resultado = 2;
            hv_Procesando.Dispose();
            hv_Procesando = 0;
            Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
            Send_Data_Info("------------->###ERROR### Bloque de Envio de datos Finalizado <-------------", 
                hv_SerialHandle);
            ho_ModelImage.Dispose();
            ho_X.Dispose();
            ho_Y.Dispose();
            ho_Z.Dispose();
            ho_ImgLeftCamera.Dispose();
            ho_ImageGauss.Dispose();
            ho_Regions.Dispose();
            ho_ConnectedRegions.Dispose();
            ho_SelectedRegions.Dispose();
            ho_ImageReduced.Dispose();
            ho_LocalMaxima.Dispose();
            ho_ImageReduced1.Dispose();
            ho_ConnectedRegions1.Dispose();

            hv_EstadoFx_COPY_INP_TMP.Dispose();
            hv_ConteoCircularesOut.Dispose();
            hv_Vector_Variables.Dispose();
            hv_N_Elementos.Dispose();
            hv_Index.Dispose();
            hv_Tag_To_Write.Dispose();
            hv_Valor_Variable.Dispose();
            hv_Pallet.Dispose();
            hv_N_Pallet_to_Scan.Dispose();
            hv_Segmento.Dispose();
            hv_IdexVector.Dispose();
            hv_FXcheck.Dispose();
            hv_ExisteAlgunApilado.Dispose();
            hv_PosibleManga.Dispose();
            hv_IsA_Sleeve.Dispose();
            hv_ElementosMatrix.Dispose();
            hv_TagToWrite.Dispose();
            hv_ValorTag.Dispose();
            hv_Resultado.Dispose();
            hv_Procesando.Dispose();
            hv_ElementosMatrixSleeve.Dispose();
            hv_IndexDatos.Dispose();
            hv_ExisteData.Dispose();
            hv_PosicionManga.Dispose();
            hv_PosicionManga_to_Robot.Dispose();
            hv_Tag_Destino.Dispose();
            hv_Estado_SubProceso.Dispose();
            hv_ExisteApilado_en_Segemento.Dispose();
            hv_ObjectModel3D_Core.Dispose();
            hv_Estado_Get_SFM_STL.Dispose();
            hv_Modelo3D_Select.Dispose();
            hv_AltoTotal_Core.Dispose();
            hv_AnchoTotal_Core.Dispose();
            hv_LargoTotal_Core.Dispose();
            hv_DataSelect_Ordenado.Dispose();
            hv_Core_Apilado.Dispose();
            hv_Core_Vertical.Dispose();
            hv_ObjectModel3D_Core_Pallet.Dispose();
            hv_SFM_Core_Pallet.Dispose();
            hv_SacaFoto.Dispose();
            hv_UmbralError.Dispose();
            hv_Conteo_Error.Dispose();
            hv_tagLectura.Dispose();
            hv_Pallet_To_Scan.Dispose();
            hv_Segmento_To_Scan.Dispose();
            hv_Estado_Fx.Dispose();
            hv_FXcheck1.Dispose();
            hv_Segmento_Core_Actual.Dispose();
            hv_Dist_CamaraoPiso.Dispose();
            hv_Estado_Fx1.Dispose();
            hv_Camara_conexion_Est1.Dispose();
            hv_DataManga.Dispose();
            hv_PoseManga.Dispose();
            hv_Variable_PLC_Existencia.Dispose();
            hv_Exception.Dispose();
            hvec_Matrix_Pallet.Dispose();
            hvec_DataSelect.Dispose();

            return;
          }


          //************************************************************
          //Foto a Segmento
          //***********************************************************
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Pallet_To_Scan.Dispose();
          HOperatorSet.TupleNumber(hv_DataSelect_Ordenado.TupleSelect(1), out hv_Pallet_To_Scan);
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Segmento_To_Scan.Dispose();
          HOperatorSet.TupleNumber(hv_DataSelect_Ordenado.TupleSelect(2), out hv_Segmento_To_Scan);
          }

          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          ho_ModelImage.Dispose();ho_X.Dispose();ho_Y.Dispose();ho_Z.Dispose();ho_ImgLeftCamera.Dispose();HTupleVector ExpTmpOutVar_0 = new HTupleVector(2);
          HTuple ExpTmpOutVar_1;hv_Estado_Fx.Dispose();hv_Camara_conexion_Est.Dispose();
          Bloque_3_seccion_0(ho_Objeto_1_mangas, out ho_ModelImage, out ho_X, out ho_Y, 
              out ho_Z, out ho_ImgLeftCamera, hv_SerialHandle, hv_NxLib, hv_Camera_1, 
              hv_Parametros_Visualizacion, hv_Valores_Visualizacion, hv_Path_SFM_Segmentos, 
              hv_Path_3D_Segmentos, hv_Path_CORE_ID, hvec_Vector_Estado_Fx, hv_ObjectModel3D_Core_Pallet, 
              hv_SFM_Core_Pallet, hv_Modelo3D_Select, hv_WindowHandle, hvec_DataSelect[0].T, 
              hvec_Matrix_SleeveOut, hv_ConteoCircularesOut, hv_Pallet_To_Scan, hv_Segmento_To_Scan, 
              hv_g_CamInBasePose1, out ExpTmpOutVar_0, out ExpTmpOutVar_1, out hv_Estado_Fx, 
              out hv_Camara_conexion_Est);
          hvec_Matrix_SleeveOut.Dispose();
          hvec_Matrix_SleeveOut = ExpTmpOutVar_0;
          hv_ConteoCircularesOut.Dispose();
          hv_ConteoCircularesOut = ExpTmpOutVar_1;
          }

          //Camara desconectada
          if ((int)(hv_Camara_conexion_Est.TupleNot()) != 0)
          {
            ho_ModelImage.Dispose();
            ho_X.Dispose();
            ho_Y.Dispose();
            ho_Z.Dispose();
            ho_ImgLeftCamera.Dispose();
            ho_ImageGauss.Dispose();
            ho_Regions.Dispose();
            ho_ConnectedRegions.Dispose();
            ho_SelectedRegions.Dispose();
            ho_ImageReduced.Dispose();
            ho_LocalMaxima.Dispose();
            ho_ImageReduced1.Dispose();
            ho_ConnectedRegions1.Dispose();

            hv_EstadoFx_COPY_INP_TMP.Dispose();
            hv_ConteoCircularesOut.Dispose();
            hv_Vector_Variables.Dispose();
            hv_N_Elementos.Dispose();
            hv_Index.Dispose();
            hv_Tag_To_Write.Dispose();
            hv_Valor_Variable.Dispose();
            hv_Pallet.Dispose();
            hv_N_Pallet_to_Scan.Dispose();
            hv_Segmento.Dispose();
            hv_IdexVector.Dispose();
            hv_FXcheck.Dispose();
            hv_ExisteAlgunApilado.Dispose();
            hv_PosibleManga.Dispose();
            hv_IsA_Sleeve.Dispose();
            hv_ElementosMatrix.Dispose();
            hv_TagToWrite.Dispose();
            hv_ValorTag.Dispose();
            hv_Resultado.Dispose();
            hv_Procesando.Dispose();
            hv_ElementosMatrixSleeve.Dispose();
            hv_IndexDatos.Dispose();
            hv_ExisteData.Dispose();
            hv_PosicionManga.Dispose();
            hv_PosicionManga_to_Robot.Dispose();
            hv_Tag_Destino.Dispose();
            hv_Estado_SubProceso.Dispose();
            hv_ExisteApilado_en_Segemento.Dispose();
            hv_ObjectModel3D_Core.Dispose();
            hv_Estado_Get_SFM_STL.Dispose();
            hv_Modelo3D_Select.Dispose();
            hv_AltoTotal_Core.Dispose();
            hv_AnchoTotal_Core.Dispose();
            hv_LargoTotal_Core.Dispose();
            hv_DataSelect_Ordenado.Dispose();
            hv_Core_Apilado.Dispose();
            hv_Core_Vertical.Dispose();
            hv_ObjectModel3D_Core_Pallet.Dispose();
            hv_SFM_Core_Pallet.Dispose();
            hv_SacaFoto.Dispose();
            hv_UmbralError.Dispose();
            hv_Conteo_Error.Dispose();
            hv_tagLectura.Dispose();
            hv_Pallet_To_Scan.Dispose();
            hv_Segmento_To_Scan.Dispose();
            hv_Estado_Fx.Dispose();
            hv_FXcheck1.Dispose();
            hv_Segmento_Core_Actual.Dispose();
            hv_Dist_CamaraoPiso.Dispose();
            hv_Estado_Fx1.Dispose();
            hv_Camara_conexion_Est1.Dispose();
            hv_DataManga.Dispose();
            hv_PoseManga.Dispose();
            hv_Variable_PLC_Existencia.Dispose();
            hv_Exception.Dispose();
            hvec_Matrix_Pallet.Dispose();
            hvec_DataSelect.Dispose();

            return;
          }

          if ((int)(hv_Estado_Fx) != 0)
          {
            hv_FXcheck1.Dispose();hv_Segmento_Core_Actual.Dispose();
            Get_DinamicCoreData(hv_N_Pallet_to_Scan, hv_SerialHandle, hv_Segmento, 
                out hv_FXcheck1, out hv_Segmento_Core_Actual);
            hv_Tag_Destino.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_Tag_Destino = (("_EV01_I_Pallet"+hv_N_Pallet_to_Scan)+"ZValid.")+hv_Segmento_Core_Actual;
            }
            hv_Estado_SubProceso.Dispose();
            hv_Estado_SubProceso = 0;
            //************************
            hv_Valor_Variable.Dispose();
            hv_Valor_Variable = 1;
            //************************
            Send_EthernetIP_Data(hv_Tag_Destino, hv_Valor_Variable, hv_SerialHandle);

          }
          else
          {
            hv_FXcheck1.Dispose();hv_Segmento_Core_Actual.Dispose();
            Get_DinamicCoreData(hv_N_Pallet_to_Scan, hv_SerialHandle, hv_Segmento, 
                out hv_FXcheck1, out hv_Segmento_Core_Actual);
            hv_Tag_Destino.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_Tag_Destino = (("_EV01_I_Pallet"+hv_N_Pallet_to_Scan)+"ZValid.")+hv_Segmento_Core_Actual;
            }
            hv_Estado_SubProceso.Dispose();
            hv_Estado_SubProceso = 0;
            //************************
            hv_Valor_Variable.Dispose();
            hv_Valor_Variable = 0;
            //************************
            Send_EthernetIP_Data(hv_Tag_Destino, hv_Valor_Variable, hv_SerialHandle);

            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            Send_Data_Info(((("-> ### Seccion "+hv_Segmento_Core_Actual)+" del Pallet ")+hv_N_Pallet_to_Scan)+" NO VALIDADA ###", 
                hv_SerialHandle);
            }


            Send_Data_Info("-------------> Bloque de Envio de datos Finalizado <-------------", 
                hv_SerialHandle);
            Send_Data_Info("-----> ### ERROR ### en Bloque de Deteccion. Envio de datos Finalizado <------", 
                hv_SerialHandle);
            ho_ModelImage.Dispose();
            ho_X.Dispose();
            ho_Y.Dispose();
            ho_Z.Dispose();
            ho_ImgLeftCamera.Dispose();
            ho_ImageGauss.Dispose();
            ho_Regions.Dispose();
            ho_ConnectedRegions.Dispose();
            ho_SelectedRegions.Dispose();
            ho_ImageReduced.Dispose();
            ho_LocalMaxima.Dispose();
            ho_ImageReduced1.Dispose();
            ho_ConnectedRegions1.Dispose();

            hv_EstadoFx_COPY_INP_TMP.Dispose();
            hv_ConteoCircularesOut.Dispose();
            hv_Vector_Variables.Dispose();
            hv_N_Elementos.Dispose();
            hv_Index.Dispose();
            hv_Tag_To_Write.Dispose();
            hv_Valor_Variable.Dispose();
            hv_Pallet.Dispose();
            hv_N_Pallet_to_Scan.Dispose();
            hv_Segmento.Dispose();
            hv_IdexVector.Dispose();
            hv_FXcheck.Dispose();
            hv_ExisteAlgunApilado.Dispose();
            hv_PosibleManga.Dispose();
            hv_IsA_Sleeve.Dispose();
            hv_ElementosMatrix.Dispose();
            hv_TagToWrite.Dispose();
            hv_ValorTag.Dispose();
            hv_Resultado.Dispose();
            hv_Procesando.Dispose();
            hv_ElementosMatrixSleeve.Dispose();
            hv_IndexDatos.Dispose();
            hv_ExisteData.Dispose();
            hv_PosicionManga.Dispose();
            hv_PosicionManga_to_Robot.Dispose();
            hv_Tag_Destino.Dispose();
            hv_Estado_SubProceso.Dispose();
            hv_ExisteApilado_en_Segemento.Dispose();
            hv_ObjectModel3D_Core.Dispose();
            hv_Estado_Get_SFM_STL.Dispose();
            hv_Modelo3D_Select.Dispose();
            hv_AltoTotal_Core.Dispose();
            hv_AnchoTotal_Core.Dispose();
            hv_LargoTotal_Core.Dispose();
            hv_DataSelect_Ordenado.Dispose();
            hv_Core_Apilado.Dispose();
            hv_Core_Vertical.Dispose();
            hv_ObjectModel3D_Core_Pallet.Dispose();
            hv_SFM_Core_Pallet.Dispose();
            hv_SacaFoto.Dispose();
            hv_UmbralError.Dispose();
            hv_Conteo_Error.Dispose();
            hv_tagLectura.Dispose();
            hv_Pallet_To_Scan.Dispose();
            hv_Segmento_To_Scan.Dispose();
            hv_Estado_Fx.Dispose();
            hv_FXcheck1.Dispose();
            hv_Segmento_Core_Actual.Dispose();
            hv_Dist_CamaraoPiso.Dispose();
            hv_Estado_Fx1.Dispose();
            hv_Camara_conexion_Est1.Dispose();
            hv_DataManga.Dispose();
            hv_PoseManga.Dispose();
            hv_Variable_PLC_Existencia.Dispose();
            hv_Exception.Dispose();
            hvec_Matrix_Pallet.Dispose();
            hvec_DataSelect.Dispose();

            return;



          }

          ho_ImageGauss.Dispose();ho_Regions.Dispose();ho_ConnectedRegions.Dispose();ho_SelectedRegions.Dispose();ho_ImageReduced.Dispose();ho_LocalMaxima.Dispose();ho_ImageReduced1.Dispose();ho_ConnectedRegions1.Dispose();hv_Dist_CamaraoPiso.Dispose();
          Get_AlturaPisoPromedio(ho_Z, out ho_ImageGauss, out ho_Regions, out ho_ConnectedRegions, 
              out ho_SelectedRegions, out ho_ImageReduced, out ho_LocalMaxima, out ho_ImageReduced1, 
              out ho_ConnectedRegions1, out hv_Dist_CamaraoPiso);

          if (hv_DataSelect_Ordenado == null)
            hv_DataSelect_Ordenado = new HTuple();
          hv_DataSelect_Ordenado[6] = hv_Dist_CamaraoPiso;
          //**************************************
          //Envio datos de los elementos
          //**************************************
          //Envio los primeros 7 elementoss
          for (hv_Index=0; (int)hv_Index<=7; hv_Index = (int)hv_Index + 1)
          {
            hv_Tag_To_Write.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_Tag_To_Write = hv_Vector_Variables.TupleSelect(
                hv_Index);
            }
            hv_Valor_Variable.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_Valor_Variable = hv_DataSelect_Ordenado.TupleSelect(
                hv_Index);
            }
            {
            HTuple ExpTmpOutVar_0;
            HOperatorSet.TupleNumber(hv_Valor_Variable, out ExpTmpOutVar_0);
            hv_Valor_Variable.Dispose();
            hv_Valor_Variable = ExpTmpOutVar_0;
            }
            Send_EthernetIP_Data(hv_Tag_To_Write, hv_Valor_Variable, hv_SerialHandle);
          }



          //# ##################################################################################################
          //                        ES UNA MANGA?
          //# ##################################################################################################  
        }
        else if ((int)(hv_IsA_Sleeve) != 0)
        {
          //********************************************************
          //Si es una manga Genero la matrix de mangas y el vector
          //********************************************************



          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_ObjectModel3D_Core_Pallet.Dispose();hv_SFM_Core_Pallet.Dispose();hv_Estado_Get_SFM_STL.Dispose();hv_Modelo3D_Select.Dispose();
          Get_SFM_STL(hvec_DataSelect[0].T, hv_Path_CORE_ID, hv_Path_3D_Segmentos, 
              hv_Path_SFM_Segmentos, hvec_Vector_Estado_Fx, hv_SerialHandle, out hv_ObjectModel3D_Core_Pallet, 
              out hv_SFM_Core_Pallet, out hv_Estado_Get_SFM_STL, out hv_Modelo3D_Select);
          }


          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Pallet_To_Scan.Dispose();
          HOperatorSet.TupleNumber(hv_DataSelect_Ordenado.TupleSelect(1), out hv_Pallet_To_Scan);
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Segmento_To_Scan.Dispose();
          HOperatorSet.TupleNumber(hv_DataSelect_Ordenado.TupleSelect(2), out hv_Segmento_To_Scan);
          }

          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          ho_ModelImage.Dispose();ho_X.Dispose();ho_Y.Dispose();ho_Z.Dispose();ho_ImgLeftCamera.Dispose();HTupleVector ExpTmpOutVar_0 = new HTupleVector(2);
          HTuple ExpTmpOutVar_1;hv_Estado_Fx1.Dispose();hv_Camara_conexion_Est1.Dispose();
          Bloque_3_seccion_0(ho_Objeto_1_mangas, out ho_ModelImage, out ho_X, out ho_Y, 
              out ho_Z, out ho_ImgLeftCamera, hv_SerialHandle, hv_NxLib, hv_Camera_1, 
              hv_Parametros_Visualizacion, hv_Valores_Visualizacion, hv_Path_SFM_Segmentos, 
              hv_Path_3D_Segmentos, hv_Path_CORE_ID, hvec_Vector_Estado_Fx, hv_ObjectModel3D_Core_Pallet, 
              hv_SFM_Core_Pallet, hv_Modelo3D_Select, hv_WindowHandle, hvec_DataSelect[0].T, 
              hvec_Matrix_Sleeve_COPY_INP_TMP, hv_ConteoCircularesOut, hv_Pallet_To_Scan, 
              hv_Segmento_To_Scan, hv_g_CamInBasePose1, out ExpTmpOutVar_0, out ExpTmpOutVar_1, 
              out hv_Estado_Fx1, out hv_Camara_conexion_Est1);
          hvec_Matrix_Sleeve_COPY_INP_TMP.Dispose();
          hvec_Matrix_Sleeve_COPY_INP_TMP = ExpTmpOutVar_0;
          hv_ConteoCircularesOut.Dispose();
          hv_ConteoCircularesOut = ExpTmpOutVar_1;
          }

          hvec_Matrix_SleeveOut.Dispose();
          hvec_Matrix_SleeveOut = new HTupleVector(hvec_Matrix_Sleeve_COPY_INP_TMP);

          hv_ExisteData.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_ExisteData = new HTuple(hvec_Matrix_Sleeve_COPY_INP_TMP[1][3].T);
          }

          HOperatorSet.ClearObjectModel3d(hv_ObjectModel3D_Core_Pallet);
          HOperatorSet.ClearSurfaceModel(hv_SFM_Core_Pallet);

          if ((int)(new HTuple(hv_ExisteData.TupleNotEqual(""))) != 0)
          {

            //************************************
            //Enviar informacion al robot
            //************************************
            hv_DataManga.Dispose();
            HOperatorSet.TupleSplit(hv_ExisteData, ";", out hv_DataManga);
            {
            HTuple ExpTmpOutVar_0;
            HOperatorSet.TupleNumber(hv_DataManga, out ExpTmpOutVar_0);
            hv_DataManga.Dispose();
            hv_DataManga = ExpTmpOutVar_0;
            }

            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_PoseManga.Dispose();
            HOperatorSet.CreatePose(hv_DataManga.TupleSelect(0), hv_DataManga.TupleSelect(
                1), hv_DataManga.TupleSelect(2), 0, 0, 0, "Rp+T", "gba", "point", 
                out hv_PoseManga);
            }
            Send_Data_To_Robot(hv_PoseManga, hv_SerialHandle);


            hv_Tag_To_Write.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_Tag_To_Write = hv_Vector_Variables.TupleSelect(
                3);
            }
            hv_Valor_Variable.Dispose();
            hv_Valor_Variable = 1;
            {
            HTuple ExpTmpOutVar_0;
            HOperatorSet.TupleNumber(hv_Valor_Variable, out ExpTmpOutVar_0);
            hv_Valor_Variable.Dispose();
            hv_Valor_Variable = ExpTmpOutVar_0;
            }
            Send_EthernetIP_Data(hv_Tag_To_Write, hv_Valor_Variable, hv_SerialHandle);


            hv_TagToWrite.Dispose();
            hv_TagToWrite = "_EBD_I_NumEntidad";
            hv_ValorTag.Dispose();
            hv_ValorTag = 3;
            Send_EthernetIP_Data(hv_TagToWrite, hv_ValorTag, hv_SerialHandle);

            //Habilito la seccion
            hv_Variable_PLC_Existencia.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_Variable_PLC_Existencia = ("_EV01_I_Pallet"+hv_N_Pallet_to_Scan)+"ZValid.";
            }
            hv_Tag_Destino.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_Tag_Destino = hv_Variable_PLC_Existencia+1;
            }
            //************************
            hv_Valor_Variable.Dispose();
            hv_Valor_Variable = 1;
            //************************
            Send_EthernetIP_Data(hv_Tag_Destino, hv_Valor_Variable, hv_SerialHandle);

            //************************************
          }
          else
          {
            //Habilito la seccion
            hv_Variable_PLC_Existencia.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_Variable_PLC_Existencia = ("_EV01_I_Pallet"+hv_N_Pallet_to_Scan)+"ZValid.";
            }
            hv_Tag_Destino.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_Tag_Destino = hv_Variable_PLC_Existencia+1;
            }
            //************************
            hv_Valor_Variable.Dispose();
            hv_Valor_Variable = 0;
            //************************
            Send_EthernetIP_Data(hv_Tag_Destino, hv_Valor_Variable, hv_SerialHandle);


            hv_Resultado.Dispose();
            hv_Resultado = 2;
            hv_Procesando.Dispose();
            hv_Procesando = 1;
            Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
            Send_Data_Info("-------------> No existen Mangas detectadas <-------------", 
                hv_SerialHandle);

            ho_ModelImage.Dispose();
            ho_X.Dispose();
            ho_Y.Dispose();
            ho_Z.Dispose();
            ho_ImgLeftCamera.Dispose();
            ho_ImageGauss.Dispose();
            ho_Regions.Dispose();
            ho_ConnectedRegions.Dispose();
            ho_SelectedRegions.Dispose();
            ho_ImageReduced.Dispose();
            ho_LocalMaxima.Dispose();
            ho_ImageReduced1.Dispose();
            ho_ConnectedRegions1.Dispose();

            hv_EstadoFx_COPY_INP_TMP.Dispose();
            hv_ConteoCircularesOut.Dispose();
            hv_Vector_Variables.Dispose();
            hv_N_Elementos.Dispose();
            hv_Index.Dispose();
            hv_Tag_To_Write.Dispose();
            hv_Valor_Variable.Dispose();
            hv_Pallet.Dispose();
            hv_N_Pallet_to_Scan.Dispose();
            hv_Segmento.Dispose();
            hv_IdexVector.Dispose();
            hv_FXcheck.Dispose();
            hv_ExisteAlgunApilado.Dispose();
            hv_PosibleManga.Dispose();
            hv_IsA_Sleeve.Dispose();
            hv_ElementosMatrix.Dispose();
            hv_TagToWrite.Dispose();
            hv_ValorTag.Dispose();
            hv_Resultado.Dispose();
            hv_Procesando.Dispose();
            hv_ElementosMatrixSleeve.Dispose();
            hv_IndexDatos.Dispose();
            hv_ExisteData.Dispose();
            hv_PosicionManga.Dispose();
            hv_PosicionManga_to_Robot.Dispose();
            hv_Tag_Destino.Dispose();
            hv_Estado_SubProceso.Dispose();
            hv_ExisteApilado_en_Segemento.Dispose();
            hv_ObjectModel3D_Core.Dispose();
            hv_Estado_Get_SFM_STL.Dispose();
            hv_Modelo3D_Select.Dispose();
            hv_AltoTotal_Core.Dispose();
            hv_AnchoTotal_Core.Dispose();
            hv_LargoTotal_Core.Dispose();
            hv_DataSelect_Ordenado.Dispose();
            hv_Core_Apilado.Dispose();
            hv_Core_Vertical.Dispose();
            hv_ObjectModel3D_Core_Pallet.Dispose();
            hv_SFM_Core_Pallet.Dispose();
            hv_SacaFoto.Dispose();
            hv_UmbralError.Dispose();
            hv_Conteo_Error.Dispose();
            hv_tagLectura.Dispose();
            hv_Pallet_To_Scan.Dispose();
            hv_Segmento_To_Scan.Dispose();
            hv_Estado_Fx.Dispose();
            hv_FXcheck1.Dispose();
            hv_Segmento_Core_Actual.Dispose();
            hv_Dist_CamaraoPiso.Dispose();
            hv_Estado_Fx1.Dispose();
            hv_Camara_conexion_Est1.Dispose();
            hv_DataManga.Dispose();
            hv_PoseManga.Dispose();
            hv_Variable_PLC_Existencia.Dispose();
            hv_Exception.Dispose();
            hvec_Matrix_Pallet.Dispose();
            hvec_DataSelect.Dispose();

            return;

          }

        }
        else if ((int)(new HTuple(hv_ExisteApilado_en_Segemento.TupleEqual(
            hv_Core_Apilado))) != 0)
        {
          //# ##################################################################################################
          //                        DETECCION DE CORES VERTICALES
          //                                 PENDIENTE
          //# ##################################################################################################  
        }
        else
        {

          //**************************************
          //Envio datos de los elementos
          //**************************************
          //Envio los primeros 5 elementoss
          for (hv_Index=0; (int)hv_Index<=7; hv_Index = (int)hv_Index + 1)
          {
            hv_Tag_To_Write.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_Tag_To_Write = hv_Vector_Variables.TupleSelect(
                hv_Index);
            }
            hv_Valor_Variable.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_Valor_Variable = hv_DataSelect_Ordenado.TupleSelect(
                hv_Index);
            }
            {
            HTuple ExpTmpOutVar_0;
            HOperatorSet.TupleNumber(hv_Valor_Variable, out ExpTmpOutVar_0);
            hv_Valor_Variable.Dispose();
            hv_Valor_Variable = ExpTmpOutVar_0;
            }
            Send_EthernetIP_Data(hv_Tag_To_Write, hv_Valor_Variable, hv_SerialHandle);
          }

          hv_FXcheck1.Dispose();hv_Segmento_Core_Actual.Dispose();
          Get_DinamicCoreData(hv_N_Pallet_to_Scan, hv_SerialHandle, hv_Segmento, 
              out hv_FXcheck1, out hv_Segmento_Core_Actual);
          hv_Tag_Destino.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Tag_Destino = (("_EV01_I_Pallet"+hv_N_Pallet_to_Scan)+"ZValid.")+hv_Segmento_Core_Actual;
          }
          hv_Estado_SubProceso.Dispose();
          hv_Estado_SubProceso = 0;
          //************************
          hv_Valor_Variable.Dispose();
          hv_Valor_Variable = 1;
          //************************
          Send_EthernetIP_Data(hv_Tag_Destino, hv_Valor_Variable, hv_SerialHandle);

        }





        //# ### Envio data de estado ########################
        hv_Resultado.Dispose();
        hv_Resultado = 1;
        hv_Procesando.Dispose();
        hv_Procesando = 1;
        Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
        Send_Data_Info("-------------> Bloque de Envio de datos Finalizado <-------------", 
            hv_SerialHandle);

        try
        {

          HOperatorSet.ClearObjectModel3d(hv_ObjectModel3D_Core_Pallet);
          HOperatorSet.ClearSurfaceModel(hv_SFM_Core_Pallet);
        }
        // catch (Exception) 
        catch (HalconException HDevExpDefaultException2)
        {
          HDevExpDefaultException2.ToHTuple(out hv_Exception);

        }

      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);

        hv_EstadoFx_COPY_INP_TMP.Dispose();
        Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx_COPY_INP_TMP);
      }








      ho_ModelImage.Dispose();
      ho_X.Dispose();
      ho_Y.Dispose();
      ho_Z.Dispose();
      ho_ImgLeftCamera.Dispose();
      ho_ImageGauss.Dispose();
      ho_Regions.Dispose();
      ho_ConnectedRegions.Dispose();
      ho_SelectedRegions.Dispose();
      ho_ImageReduced.Dispose();
      ho_LocalMaxima.Dispose();
      ho_ImageReduced1.Dispose();
      ho_ConnectedRegions1.Dispose();

      hv_EstadoFx_COPY_INP_TMP.Dispose();
      hv_ConteoCircularesOut.Dispose();
      hv_Vector_Variables.Dispose();
      hv_N_Elementos.Dispose();
      hv_Index.Dispose();
      hv_Tag_To_Write.Dispose();
      hv_Valor_Variable.Dispose();
      hv_Pallet.Dispose();
      hv_N_Pallet_to_Scan.Dispose();
      hv_Segmento.Dispose();
      hv_IdexVector.Dispose();
      hv_FXcheck.Dispose();
      hv_ExisteAlgunApilado.Dispose();
      hv_PosibleManga.Dispose();
      hv_IsA_Sleeve.Dispose();
      hv_ElementosMatrix.Dispose();
      hv_TagToWrite.Dispose();
      hv_ValorTag.Dispose();
      hv_Resultado.Dispose();
      hv_Procesando.Dispose();
      hv_ElementosMatrixSleeve.Dispose();
      hv_IndexDatos.Dispose();
      hv_ExisteData.Dispose();
      hv_PosicionManga.Dispose();
      hv_PosicionManga_to_Robot.Dispose();
      hv_Tag_Destino.Dispose();
      hv_Estado_SubProceso.Dispose();
      hv_ExisteApilado_en_Segemento.Dispose();
      hv_ObjectModel3D_Core.Dispose();
      hv_Estado_Get_SFM_STL.Dispose();
      hv_Modelo3D_Select.Dispose();
      hv_AltoTotal_Core.Dispose();
      hv_AnchoTotal_Core.Dispose();
      hv_LargoTotal_Core.Dispose();
      hv_DataSelect_Ordenado.Dispose();
      hv_Core_Apilado.Dispose();
      hv_Core_Vertical.Dispose();
      hv_ObjectModel3D_Core_Pallet.Dispose();
      hv_SFM_Core_Pallet.Dispose();
      hv_SacaFoto.Dispose();
      hv_UmbralError.Dispose();
      hv_Conteo_Error.Dispose();
      hv_tagLectura.Dispose();
      hv_Pallet_To_Scan.Dispose();
      hv_Segmento_To_Scan.Dispose();
      hv_Estado_Fx.Dispose();
      hv_FXcheck1.Dispose();
      hv_Segmento_Core_Actual.Dispose();
      hv_Dist_CamaraoPiso.Dispose();
      hv_Estado_Fx1.Dispose();
      hv_Camara_conexion_Est1.Dispose();
      hv_DataManga.Dispose();
      hv_PoseManga.Dispose();
      hv_Variable_PLC_Existencia.Dispose();
      hv_Exception.Dispose();
      hvec_Matrix_Pallet.Dispose();
      hvec_DataSelect.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_ModelImage.Dispose();
      ho_X.Dispose();
      ho_Y.Dispose();
      ho_Z.Dispose();
      ho_ImgLeftCamera.Dispose();
      ho_ImageGauss.Dispose();
      ho_Regions.Dispose();
      ho_ConnectedRegions.Dispose();
      ho_SelectedRegions.Dispose();
      ho_ImageReduced.Dispose();
      ho_LocalMaxima.Dispose();
      ho_ImageReduced1.Dispose();
      ho_ConnectedRegions1.Dispose();

      hv_EstadoFx_COPY_INP_TMP.Dispose();
      hv_ConteoCircularesOut.Dispose();
      hv_Vector_Variables.Dispose();
      hv_N_Elementos.Dispose();
      hv_Index.Dispose();
      hv_Tag_To_Write.Dispose();
      hv_Valor_Variable.Dispose();
      hv_Pallet.Dispose();
      hv_N_Pallet_to_Scan.Dispose();
      hv_Segmento.Dispose();
      hv_IdexVector.Dispose();
      hv_FXcheck.Dispose();
      hv_ExisteAlgunApilado.Dispose();
      hv_PosibleManga.Dispose();
      hv_IsA_Sleeve.Dispose();
      hv_ElementosMatrix.Dispose();
      hv_TagToWrite.Dispose();
      hv_ValorTag.Dispose();
      hv_Resultado.Dispose();
      hv_Procesando.Dispose();
      hv_ElementosMatrixSleeve.Dispose();
      hv_IndexDatos.Dispose();
      hv_ExisteData.Dispose();
      hv_PosicionManga.Dispose();
      hv_PosicionManga_to_Robot.Dispose();
      hv_Tag_Destino.Dispose();
      hv_Estado_SubProceso.Dispose();
      hv_ExisteApilado_en_Segemento.Dispose();
      hv_ObjectModel3D_Core.Dispose();
      hv_Estado_Get_SFM_STL.Dispose();
      hv_Modelo3D_Select.Dispose();
      hv_AltoTotal_Core.Dispose();
      hv_AnchoTotal_Core.Dispose();
      hv_LargoTotal_Core.Dispose();
      hv_DataSelect_Ordenado.Dispose();
      hv_Core_Apilado.Dispose();
      hv_Core_Vertical.Dispose();
      hv_ObjectModel3D_Core_Pallet.Dispose();
      hv_SFM_Core_Pallet.Dispose();
      hv_SacaFoto.Dispose();
      hv_UmbralError.Dispose();
      hv_Conteo_Error.Dispose();
      hv_tagLectura.Dispose();
      hv_Pallet_To_Scan.Dispose();
      hv_Segmento_To_Scan.Dispose();
      hv_Estado_Fx.Dispose();
      hv_FXcheck1.Dispose();
      hv_Segmento_Core_Actual.Dispose();
      hv_Dist_CamaraoPiso.Dispose();
      hv_Estado_Fx1.Dispose();
      hv_Camara_conexion_Est1.Dispose();
      hv_DataManga.Dispose();
      hv_PoseManga.Dispose();
      hv_Variable_PLC_Existencia.Dispose();
      hv_Exception.Dispose();
      hvec_Matrix_Pallet.Dispose();
      hvec_DataSelect.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Bloque_1 (out HObject ho_Objeto_1, HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Vector_Estado_Fx, 
      HTuple hv_SerialHandle, HTuple hv__EV1_O_CmdDatos, HTuple hv_Path_SFM_Segmentos, 
      HTuple hv_Path_3D_Segmentos, HTuple hv_Path_CORE_ID, HTuple hv_NxLib, HTuple hv_Camera_1, 
      HTupleVector/*{eTupleVector,Dim=2}*/ hvec_BDD_Data, out HTuple hv_g_CamInBasePose1)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Estado = new HTuple(), hv_N_Pallet_to_Scan = new HTuple();
    HTuple hv_FXcheck = new HTuple(), hv_ExisteAlgunApilado = new HTuple();
    HTuple hv_Vector_ID_Core_by_Segment_Pallet_1 = new HTuple();
    HTuple hv_Vector_ID_Core_by_Segment_Pallet_2 = new HTuple();
    HTuple hv_Vector_ID_Core_by_Segment_Pallet_3 = new HTuple();
    HTuple hv_Vector_ID_Core_by_Segment_Pallet_4 = new HTuple();
    HTuple hv_Vector_ID_Core_by_Segment_Pallet_5 = new HTuple();
    HTuple hv_Vector_ID_Core_by_Segment_Pallet_6 = new HTuple();
    HTuple hv_IsA_Sleeve = new HTuple(), hv_Mensaje = new HTuple();
    HTuple hv_Estado_Fx = new HTuple(), hv_Resultado = new HTuple();
    HTuple hv_Procesando = new HTuple();

    HTupleVector hvec_Matrix_Pallet = new HTupleVector(2);
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Objeto_1);
    hv_g_CamInBasePose1 = new HTuple();
    try
    {
      hv_Estado.Dispose();
      hv_Estado = 19;
      Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
      //Reseteo las variable de resultado




      //************************************
      //Inicializar variables de Es Apilado
      //************************************





      //# ######################################################################################
      //1. *Si el pallet en 11, sigmifica que leo pallet 1
      //# ######################################################################################

      hv_N_Pallet_to_Scan.Dispose();
      Get_NPallet(hv__EV1_O_CmdDatos, out hv_N_Pallet_to_Scan);

      //N_Pallet_to_Scan := 4


      hvec_Matrix_Pallet.Dispose();hv_FXcheck.Dispose();hv_ExisteAlgunApilado.Dispose();
      Get_DinamicDataPallet(hv_N_Pallet_to_Scan, hv_SerialHandle, out hvec_Matrix_Pallet, 
          out hv_FXcheck, out hv_ExisteAlgunApilado);
      //# ################################################################
      //# #### Base Datos#################################################
      //Vector que indica como esta distribuido los CORES en el pallet
      //-> Esto debe estar ingresado por el operador. <-
      //valor 0 es seccion A, 1B,2C...etc
      //# ################################################################

      hv_Vector_ID_Core_by_Segment_Pallet_1.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Vector_ID_Core_by_Segment_Pallet_1 = new HTuple(hvec_BDD_Data[1][0].T);
      }
      hv_Vector_ID_Core_by_Segment_Pallet_2.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Vector_ID_Core_by_Segment_Pallet_2 = new HTuple(hvec_BDD_Data[2][0].T);
      }
      hv_Vector_ID_Core_by_Segment_Pallet_3.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Vector_ID_Core_by_Segment_Pallet_3 = new HTuple(hvec_BDD_Data[3][0].T);
      }
      hv_Vector_ID_Core_by_Segment_Pallet_4.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Vector_ID_Core_by_Segment_Pallet_4 = new HTuple(hvec_BDD_Data[4][0].T);
      }
      hv_Vector_ID_Core_by_Segment_Pallet_5.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Vector_ID_Core_by_Segment_Pallet_5 = new HTuple(hvec_BDD_Data[5][0].T);
      }
      hv_Vector_ID_Core_by_Segment_Pallet_6.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Vector_ID_Core_by_Segment_Pallet_6 = new HTuple(hvec_BDD_Data[6][0].T);
      }

      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_IsA_Sleeve.Dispose();
      Is_a_Sleeve(hvec_BDD_Data[hv_N_Pallet_to_Scan][0].T, out hv_IsA_Sleeve);
      }

      if ((int)(hv_IsA_Sleeve.TupleAnd((new HTuple(hv_N_Pallet_to_Scan.TupleEqual(
          1))).TupleOr(new HTuple(hv_N_Pallet_to_Scan.TupleEqual(2))))) != 0)
      {


        hv_Mensaje.Dispose();
        hv_Mensaje = "### Error ### Pallet 1 o 2 Designado con Mangas";
        Send_Data_Info(hv_Mensaje, hv_SerialHandle);
        hv_Estado_Fx.Dispose();
        hv_Estado_Fx = 0;
        hv_Resultado.Dispose();
        hv_Resultado = 2;
        hv_Procesando.Dispose();
        hv_Procesando = 1;
        Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);

        hv_Estado.Dispose();
        hv_N_Pallet_to_Scan.Dispose();
        hv_FXcheck.Dispose();
        hv_ExisteAlgunApilado.Dispose();
        hv_Vector_ID_Core_by_Segment_Pallet_1.Dispose();
        hv_Vector_ID_Core_by_Segment_Pallet_2.Dispose();
        hv_Vector_ID_Core_by_Segment_Pallet_3.Dispose();
        hv_Vector_ID_Core_by_Segment_Pallet_4.Dispose();
        hv_Vector_ID_Core_by_Segment_Pallet_5.Dispose();
        hv_Vector_ID_Core_by_Segment_Pallet_6.Dispose();
        hv_IsA_Sleeve.Dispose();
        hv_Mensaje.Dispose();
        hv_Estado_Fx.Dispose();
        hv_Resultado.Dispose();
        hv_Procesando.Dispose();
        hvec_Matrix_Pallet.Dispose();

        return;


      }



      ho_Objeto_1.Dispose();hv_g_CamInBasePose1.Dispose();
      Get_Core_Presence(out ho_Objeto_1, hv_SerialHandle, hvec_Vector_Estado_Fx, 
          hv_Vector_ID_Core_by_Segment_Pallet_1, hv_Vector_ID_Core_by_Segment_Pallet_2, 
          hv_Vector_ID_Core_by_Segment_Pallet_3, hv_Vector_ID_Core_by_Segment_Pallet_4, 
          hv_Path_SFM_Segmentos, hv_Path_3D_Segmentos, hv_Path_CORE_ID, hv_N_Pallet_to_Scan, 
          hv_NxLib, hv_Camera_1, hv_Vector_ID_Core_by_Segment_Pallet_5, hv_Vector_ID_Core_by_Segment_Pallet_6, 
          hv_ExisteAlgunApilado, out hv_g_CamInBasePose1);







      hv_Estado.Dispose();
      hv_N_Pallet_to_Scan.Dispose();
      hv_FXcheck.Dispose();
      hv_ExisteAlgunApilado.Dispose();
      hv_Vector_ID_Core_by_Segment_Pallet_1.Dispose();
      hv_Vector_ID_Core_by_Segment_Pallet_2.Dispose();
      hv_Vector_ID_Core_by_Segment_Pallet_3.Dispose();
      hv_Vector_ID_Core_by_Segment_Pallet_4.Dispose();
      hv_Vector_ID_Core_by_Segment_Pallet_5.Dispose();
      hv_Vector_ID_Core_by_Segment_Pallet_6.Dispose();
      hv_IsA_Sleeve.Dispose();
      hv_Mensaje.Dispose();
      hv_Estado_Fx.Dispose();
      hv_Resultado.Dispose();
      hv_Procesando.Dispose();
      hvec_Matrix_Pallet.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Estado.Dispose();
      hv_N_Pallet_to_Scan.Dispose();
      hv_FXcheck.Dispose();
      hv_ExisteAlgunApilado.Dispose();
      hv_Vector_ID_Core_by_Segment_Pallet_1.Dispose();
      hv_Vector_ID_Core_by_Segment_Pallet_2.Dispose();
      hv_Vector_ID_Core_by_Segment_Pallet_3.Dispose();
      hv_Vector_ID_Core_by_Segment_Pallet_4.Dispose();
      hv_Vector_ID_Core_by_Segment_Pallet_5.Dispose();
      hv_Vector_ID_Core_by_Segment_Pallet_6.Dispose();
      hv_IsA_Sleeve.Dispose();
      hv_Mensaje.Dispose();
      hv_Estado_Fx.Dispose();
      hv_Resultado.Dispose();
      hv_Procesando.Dispose();
      hvec_Matrix_Pallet.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Bloque_2 (HTuple hv_SerialHandle, HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Vector_Estado_Fx, 
      HTuple hv_AcqHandle, HTuple hv_CameraParameters, HTuple hv_CameraPose, out HTuple hv_Estado_SubProceso, 
      out HTuple hv_PoseForCalibrationPlate, out HTuple hv_ToolInCamPose, out HTuple hv_ToolInBasePose, 
      out HTuple hv_ObjInBasePoseOut, out HTuple hv_EstadoFx)
  {



    // Local iconic variables 

    HObject ho_Image=null;

    // Local control variables 

    HTuple hv_CameraPoseOut = new HTuple(), hv_Mensaje = new HTuple();
    HTuple hv_ExposureTime = new HTuple(), hv_Ganancia = new HTuple();
    HTuple hv_Estado = new HTuple(), hv_Resultado = new HTuple();
    HTuple hv_Procesando = new HTuple(), hv_Time = new HTuple();
    HTuple hv_Gain = new HTuple(), hv_g_Error_CamaraOpt_Adq = new HTuple();
    HTuple hv_Width = new HTuple(), hv_Height = new HTuple();
    HTuple hv_MSecond = new HTuple(), hv_Second = new HTuple();
    HTuple hv_Minute = new HTuple(), hv_Hour = new HTuple();
    HTuple hv_Day = new HTuple(), hv_YDay = new HTuple(), hv_Month = new HTuple();
    HTuple hv_Year = new HTuple(), hv_Calibration = new HTuple();
    HTuple hv_CalTabFile = new HTuple(), hv_StartCamParam = new HTuple();
    HTuple hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Image);
    hv_Estado_SubProceso = new HTuple();
    hv_PoseForCalibrationPlate = new HTuple();
    hv_ToolInCamPose = new HTuple();
    hv_ToolInBasePose = new HTuple();
    hv_ObjInBasePoseOut = new HTuple();
    hv_EstadoFx = new HTuple();
    try
    {
      hv_CameraPoseOut.Dispose();
      hv_CameraPoseOut = new HTuple(hv_CameraPose);
      hv_Mensaje.Dispose();
      hv_Mensaje = "Inicio BLOQUE 2. Busqueda de patron en Pattern";
      Send_Data_Info(hv_Mensaje, hv_SerialHandle);


      hv_ExposureTime.Dispose();
      hv_ExposureTime = 350000;
      hv_Ganancia.Dispose();
      hv_Ganancia = 16;




      try
      {
        //Reseteo las variable de resultado
        //# ### Envio data de estado ########################
        hv_Estado.Dispose();
        hv_Estado = 1;
        Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
        hv_Resultado.Dispose();
        hv_Resultado = 0;
        hv_Procesando.Dispose();
        hv_Procesando = 1;
        Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
        //# #################################################

        hv_Time.Dispose();
        hv_Time = new HTuple(hv_ExposureTime);
        hv_Gain.Dispose();
        hv_Gain = new HTuple(hv_Ganancia);
        Set_exposure_Time_cam_0(hv_AcqHandle, hv_Time, hv_Gain);

        ho_Image.Dispose();hv_g_Error_CamaraOpt_Adq.Dispose();
        Get_Image(out ho_Image, hv_AcqHandle, out hv_g_Error_CamaraOpt_Adq);
        HOperatorSet.DispObj(ho_Image, hv_ExpDefaultWinHandle);
        hv_Width.Dispose();hv_Height.Dispose();
        HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);


        //**********************************************************************
        //***** Guardo las Imagenes ********************************************
        hv_MSecond.Dispose();hv_Second.Dispose();hv_Minute.Dispose();hv_Hour.Dispose();hv_Day.Dispose();hv_YDay.Dispose();hv_Month.Dispose();hv_Year.Dispose();
        HOperatorSet.GetSystemTime(out hv_MSecond, out hv_Second, out hv_Minute, 
            out hv_Hour, out hv_Day, out hv_YDay, out hv_Month, out hv_Year);

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.WriteObject(ho_Image, ((("D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/Imagen"+hv_Month)+hv_Day)+hv_Hour)+hv_Second);
        }

        //*read_image (Image, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/Imagen7241249.hobj')



        //***********************************************************************
        //**************************************************
        //Hand Eye Apunto al Descriptor
        //**************************************************
        hv_Mensaje.Dispose();
        hv_Mensaje = "Cargando descriptores de distorcion y de patron";
        Send_Data_Info(hv_Mensaje, hv_SerialHandle);

        hv_Calibration.Dispose();
        hv_Calibration = "5x5_10";
        hv_CalTabFile.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_CalTabFile = ("C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/6.- Caltab Din3/Caltab"+hv_Calibration)+".descr";
        }
        hv_StartCamParam.Dispose();hv_CameraPoseOut.Dispose();
        Get_Cam_Parameters(out hv_StartCamParam, out hv_CameraPoseOut);


        //**************************************************
        //# ### Envio data de estado ########################
        hv_Estado.Dispose();
        hv_Estado = 16;
        Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
        //# #################################################
        //
        hv_PoseForCalibrationPlate.Dispose();hv_EstadoFx.Dispose();
        Get_Pose_Caltab(ho_Image, hv_StartCamParam, hv_CalTabFile, hv_SerialHandle, 
            out hv_PoseForCalibrationPlate, out hv_EstadoFx);

        //Get_Robot_Pose (SerialHandle, ToolInBasePose)

        //Get_ObjInBasePose (PoseForCalibrationPlate, ToolInBasePose, ObjInBasePose)

        if ((int)(hv_EstadoFx) != 0)
        {
          hv_Estado.Dispose();
          hv_Estado = 14;
          Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
          //*******************************
          //Enviar por ETHERNETIP
          //*******************************
          //# ### Envio data de estado ########################
          hv_Estado.Dispose();
          hv_Estado = 17;
          Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
          //# #################################################


          Send_Data_To_Robot(hv_PoseForCalibrationPlate, hv_SerialHandle);
          hv_Resultado.Dispose();
          hv_Resultado = 1;
          hv_Procesando.Dispose();
          hv_Procesando = 1;
          Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
          //# #################################################



        }


        hv_Mensaje.Dispose();
        hv_Mensaje = "####### FIN BLOQUE 2. Busqueda de patron en Pattern #######";
        Send_Data_Info(hv_Mensaje, hv_SerialHandle);
        ho_Image.Dispose();

        hv_CameraPoseOut.Dispose();
        hv_Mensaje.Dispose();
        hv_ExposureTime.Dispose();
        hv_Ganancia.Dispose();
        hv_Estado.Dispose();
        hv_Resultado.Dispose();
        hv_Procesando.Dispose();
        hv_Time.Dispose();
        hv_Gain.Dispose();
        hv_g_Error_CamaraOpt_Adq.Dispose();
        hv_Width.Dispose();
        hv_Height.Dispose();
        hv_MSecond.Dispose();
        hv_Second.Dispose();
        hv_Minute.Dispose();
        hv_Hour.Dispose();
        hv_Day.Dispose();
        hv_YDay.Dispose();
        hv_Month.Dispose();
        hv_Year.Dispose();
        hv_Calibration.Dispose();
        hv_CalTabFile.Dispose();
        hv_StartCamParam.Dispose();
        hv_Exception.Dispose();

        return;

      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);

        //write_object (Image, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/ImagenNODECT_'+Month+Day+Hour+Second)


        //# ### Envio data de estado ########################
        hv_Estado.Dispose();
        hv_Estado = 15;
        Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
        hv_EstadoFx.Dispose();
        Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx);
        ho_Image.Dispose();

        hv_CameraPoseOut.Dispose();
        hv_Mensaje.Dispose();
        hv_ExposureTime.Dispose();
        hv_Ganancia.Dispose();
        hv_Estado.Dispose();
        hv_Resultado.Dispose();
        hv_Procesando.Dispose();
        hv_Time.Dispose();
        hv_Gain.Dispose();
        hv_g_Error_CamaraOpt_Adq.Dispose();
        hv_Width.Dispose();
        hv_Height.Dispose();
        hv_MSecond.Dispose();
        hv_Second.Dispose();
        hv_Minute.Dispose();
        hv_Hour.Dispose();
        hv_Day.Dispose();
        hv_YDay.Dispose();
        hv_Month.Dispose();
        hv_Year.Dispose();
        hv_Calibration.Dispose();
        hv_CalTabFile.Dispose();
        hv_StartCamParam.Dispose();
        hv_Exception.Dispose();

        return;

        //# #################################################

      }



      //***********************************************************************************************************************************
      //
      //***********************************************************************************************************************************
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_Image.Dispose();

      hv_CameraPoseOut.Dispose();
      hv_Mensaje.Dispose();
      hv_ExposureTime.Dispose();
      hv_Ganancia.Dispose();
      hv_Estado.Dispose();
      hv_Resultado.Dispose();
      hv_Procesando.Dispose();
      hv_Time.Dispose();
      hv_Gain.Dispose();
      hv_g_Error_CamaraOpt_Adq.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_MSecond.Dispose();
      hv_Second.Dispose();
      hv_Minute.Dispose();
      hv_Hour.Dispose();
      hv_Day.Dispose();
      hv_YDay.Dispose();
      hv_Month.Dispose();
      hv_Year.Dispose();
      hv_Calibration.Dispose();
      hv_CalTabFile.Dispose();
      hv_StartCamParam.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Bloque_2_Smart (HTuple hv_SerialHandle, HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Vector_Estado_Fx, 
      HTuple hv_AcqHandle, HTuple hv_CameraParameters, HTuple hv_CameraPose, HTuple hv_ConteoFotoPatron, 
      out HTuple hv_Estado_SubProceso, out HTuple hv_PoseForCalibrationPlate, out HTuple hv_ToolInCamPose, 
      out HTuple hv_ToolInBasePose, out HTuple hv_ObjInBasePoseOut, out HTuple hv_ConteoFotoPatron_New, 
      out HTuple hv_g_Error_CamaraOpt_Adq)
  {



    // Local iconic variables 

    HObject ho_Image=null;

    // Local control variables 

    HTuple hv_CameraPoseOut = new HTuple(), hv_Mensaje = new HTuple();
    HTuple hv_Estado = new HTuple(), hv_Resultado = new HTuple();
    HTuple hv_Procesando = new HTuple(), hv_delatGan = new HTuple();
    HTuple hv_ExposureTime = new HTuple(), hv_Ganancia = new HTuple();
    HTuple hv_N_Busquedas = new HTuple(), hv_errorZ_dentroMargen = new HTuple();
    HTuple hv_Index = new HTuple(), hv_Exception = new HTuple();
    HTuple hv_EstadoFx = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Image);
    hv_Estado_SubProceso = new HTuple();
    hv_PoseForCalibrationPlate = new HTuple();
    hv_ToolInCamPose = new HTuple();
    hv_ToolInBasePose = new HTuple();
    hv_ObjInBasePoseOut = new HTuple();
    hv_ConteoFotoPatron_New = new HTuple();
    hv_g_Error_CamaraOpt_Adq = new HTuple();
    try
    {
      hv_CameraPoseOut.Dispose();
      hv_CameraPoseOut = new HTuple(hv_CameraPose);
      hv_Mensaje.Dispose();
      hv_Mensaje = "Inicio BLOQUE 2. Busqueda de patron en Pattern";
      Send_Data_Info(hv_Mensaje, hv_SerialHandle);

      //# ### Envio data de estado ########################
      hv_Estado.Dispose();
      hv_Estado = 1;
      Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
      hv_Resultado.Dispose();
      hv_Resultado = 0;
      hv_Procesando.Dispose();
      hv_Procesando = 1;
      Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
      //# #################################################


      hv_delatGan.Dispose();
      hv_delatGan = 3;
      hv_ExposureTime.Dispose();
      hv_ExposureTime = 100E3;
      hv_Ganancia.Dispose();
      hv_Ganancia = 25;

      hv_N_Busquedas.Dispose();
      hv_N_Busquedas = 10;

      hv_errorZ_dentroMargen.Dispose();
      hv_errorZ_dentroMargen = 1;

      HTuple end_val21 = hv_N_Busquedas;
      HTuple step_val21 = 1;
      for (hv_Index=1; hv_Index.Continue(end_val21, step_val21); hv_Index = hv_Index.TupleAdd(step_val21))
      {


        ho_Image.Dispose();hv_Estado.Dispose();hv_Exception.Dispose();hv_ConteoFotoPatron_New.Dispose();
        {
        HTuple ExpTmpOutVar_0;hv_g_Error_CamaraOpt_Adq.Dispose();
        Get_Smart_Patron(out ho_Image, hvec_Vector_Estado_Fx, hv_SerialHandle, hv_ExposureTime, 
            hv_Ganancia, hv_AcqHandle, hv_ConteoFotoPatron, hv_errorZ_dentroMargen, 
            hv_Index, out hv_Estado, out hv_Exception, out hv_ConteoFotoPatron_New, 
            out ExpTmpOutVar_0, out hv_g_Error_CamaraOpt_Adq);
        hv_errorZ_dentroMargen.Dispose();
        hv_errorZ_dentroMargen = ExpTmpOutVar_0;
        }


        if ((int)(hv_g_Error_CamaraOpt_Adq) != 0)
        {
          hv_Resultado.Dispose();
          hv_Resultado = 2;
          hv_Procesando.Dispose();
          hv_Procesando = 1;
          hv_ConteoFotoPatron_New.Dispose();
          hv_ConteoFotoPatron_New = 0;
          Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
          hv_Mensaje.Dispose();
          hv_Mensaje = "### ERROR ### Camara Desconectada";
          Send_Data_Info(hv_Mensaje, hv_SerialHandle);
          ho_Image.Dispose();

          hv_CameraPoseOut.Dispose();
          hv_Mensaje.Dispose();
          hv_Estado.Dispose();
          hv_Resultado.Dispose();
          hv_Procesando.Dispose();
          hv_delatGan.Dispose();
          hv_ExposureTime.Dispose();
          hv_Ganancia.Dispose();
          hv_N_Busquedas.Dispose();
          hv_errorZ_dentroMargen.Dispose();
          hv_Index.Dispose();
          hv_Exception.Dispose();
          hv_EstadoFx.Dispose();

          return;

        }

        if ((int)(hv_Estado) != 0)
        {

          if ((int)(hv_errorZ_dentroMargen.TupleNot()) != 0)
          {
            hv_Resultado.Dispose();
            hv_Resultado = 2;
            hv_Procesando.Dispose();
            hv_Procesando = 1;
            Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
            hv_ConteoFotoPatron_New.Dispose();
            hv_ConteoFotoPatron_New = 0;
          }
          ho_Image.Dispose();

          hv_CameraPoseOut.Dispose();
          hv_Mensaje.Dispose();
          hv_Estado.Dispose();
          hv_Resultado.Dispose();
          hv_Procesando.Dispose();
          hv_delatGan.Dispose();
          hv_ExposureTime.Dispose();
          hv_Ganancia.Dispose();
          hv_N_Busquedas.Dispose();
          hv_errorZ_dentroMargen.Dispose();
          hv_Index.Dispose();
          hv_Exception.Dispose();
          hv_EstadoFx.Dispose();

          return;
        }




        //Ganancia := Ganancia+delatGan
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_ExposureTime = hv_ExposureTime+50E3;
        hv_ExposureTime.Dispose();
        hv_ExposureTime = ExpTmpLocalVar_ExposureTime;
        }
        }
      }




      hv_EstadoFx.Dispose();
      Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx);

      ho_Image.Dispose();

      hv_CameraPoseOut.Dispose();
      hv_Mensaje.Dispose();
      hv_Estado.Dispose();
      hv_Resultado.Dispose();
      hv_Procesando.Dispose();
      hv_delatGan.Dispose();
      hv_ExposureTime.Dispose();
      hv_Ganancia.Dispose();
      hv_N_Busquedas.Dispose();
      hv_errorZ_dentroMargen.Dispose();
      hv_Index.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      return;





    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_Image.Dispose();

      hv_CameraPoseOut.Dispose();
      hv_Mensaje.Dispose();
      hv_Estado.Dispose();
      hv_Resultado.Dispose();
      hv_Procesando.Dispose();
      hv_delatGan.Dispose();
      hv_ExposureTime.Dispose();
      hv_Ganancia.Dispose();
      hv_N_Busquedas.Dispose();
      hv_errorZ_dentroMargen.Dispose();
      hv_Index.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Bloque_3 (out HObject ho_ModelImage, out HObject ho_X, out HObject ho_Y, 
      out HObject ho_Z, out HObject ho_ImgLeftCamera, HTuple hv_SerialHandle, HTuple hv_NxLib, 
      HTuple hv_Camera_1, HTuple hv_Parametros_Visualizacion, HTuple hv_Valores_Visualizacion, 
      HTuple hv_Path_SFM_Segmentos, HTuple hv_Path_3D_Segmentos, HTuple hv_Path_CORE_ID, 
      HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Vector_Estado_Fx, HTuple hv_ObjectModel3D_Core_Pallet, 
      HTuple hv_SFM_Core_Pallet, HTuple hv_Modelo3D_Select, HTuple hv_WindowHandle, 
      HTuple hv_Cod_Core_ToUse, HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Matrix_Sleeve, 
      HTuple hv_ConteoCirculares, out HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Matrix_Sleeve_New, 
      out HTuple hv_ConteoCirculares_New)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Mensaje = new HTuple(), hv_Procesando = new HTuple();
    HTuple hv_Resultado = new HTuple(), hv_FOTO = new HTuple();
    HTuple hv_RepetirFoto = new HTuple(), hv_ConteoRepeticion = new HTuple();
    HTuple hv_Pallet_To_Scan = new HTuple(), hv_Segmento_To_Scan = new HTuple();
    HTuple hv_PitutoExist = new HTuple(), hv_FXcheck = new HTuple();
    HTuple hv_Diametro = new HTuple(), hv_ExitBloque3 = new HTuple();
    HTuple hv_Is_a_Core = new HTuple(), hv_Escena3D_RAW = new HTuple();
    HTuple hv_Camara_conexion_Est = new HTuple(), hv_Estado_Fx = new HTuple();
    HTuple hv_Nelementos = new HTuple(), hv_Index = new HTuple();
    HTuple hv_IndexLast = new HTuple(), hv_Entidad = new HTuple();
    HTuple hv_NamePose = new HTuple(), hv_Esquina_Pallet_Pose = new HTuple();
    HTuple hv_Vector_ID_Core_by_Segment_Palle_tofind = new HTuple();
    HTuple hv_N_Pallet_to_Scan = new HTuple(), hv_SegmentoPallet = new HTuple();
    HTuple hv_Pose_Esquina = new HTuple(), hv_Visualizar3D = new HTuple();
    HTuple hv_Estado_SubProceso_Get_Core_Presence_In_Pallet = new HTuple();
    HTuple   hv_Cod_Core_ToUse_COPY_INP_TMP = new HTuple(hv_Cod_Core_ToUse);
    HTuple   hv_WindowHandle_COPY_INP_TMP = new HTuple(hv_WindowHandle);
    HTupleVector  hvec_Matrix_Sleeve_COPY_INP_TMP = new HTupleVector(hvec_Matrix_Sleeve);

    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ModelImage);
    HOperatorSet.GenEmptyObj(out ho_X);
    HOperatorSet.GenEmptyObj(out ho_Y);
    HOperatorSet.GenEmptyObj(out ho_Z);
    HOperatorSet.GenEmptyObj(out ho_ImgLeftCamera);
    hvec_Matrix_Sleeve_New = new HTupleVector(2);
    hv_ConteoCirculares_New = new HTuple();
    try
    {
      hv_Mensaje.Dispose();
      hv_Mensaje = "Bloque 3 INICIADO.............";
      Send_Data_Info(hv_Mensaje, hv_SerialHandle);

      //# ### Envio data de estado ########################
      hv_Procesando.Dispose();
      hv_Procesando = 1;
      hv_Resultado.Dispose();
      hv_Resultado = 0;
      Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
      //# ################################################# 
      //Obtengo imagen del bloque a escanear
      hv_FOTO.Dispose();
      hv_FOTO = 1;
      hv_RepetirFoto.Dispose();
      hv_RepetirFoto = 1;
      hv_ConteoRepeticion.Dispose();
      hv_ConteoRepeticion = 0;
      //dev_get_window(...);


      hv_Cod_Core_ToUse_COPY_INP_TMP.Dispose();hv_Pallet_To_Scan.Dispose();hv_Segmento_To_Scan.Dispose();hv_PitutoExist.Dispose();hv_FXcheck.Dispose();hv_Diametro.Dispose();
      Get_Core_ToUse_From_BDD_Fast(hv_SerialHandle, out hv_Cod_Core_ToUse_COPY_INP_TMP, 
          out hv_Pallet_To_Scan, out hv_Segmento_To_Scan, out hv_PitutoExist, out hv_FXcheck, 
          out hv_Diametro);

      //************************************************************
      hv_ExitBloque3.Dispose();
      hv_ExitBloque3 = 0;

      //*************************************************************








      while ((int)(hv_RepetirFoto) != 0)
      {
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_ConteoRepeticion = hv_ConteoRepeticion+1;
        hv_ConteoRepeticion.Dispose();
        hv_ConteoRepeticion = ExpTmpLocalVar_ConteoRepeticion;
        }
        }
        hv_RepetirFoto.Dispose();
        hv_RepetirFoto = 0;



        //*************************************
        //1° Segmento si es Core o Manga
        //*************************************
        hv_Is_a_Core.Dispose();
        Get_TipoEntidad(hv_Cod_Core_ToUse_COPY_INP_TMP, out hv_Is_a_Core);
        if ((int)(hv_Is_a_Core) != 0)
        {
          //Es un Core *
          ho_ModelImage.Dispose();ho_X.Dispose();ho_Y.Dispose();ho_Z.Dispose();ho_ImgLeftCamera.Dispose();hv_Escena3D_RAW.Dispose();hv_Camara_conexion_Est.Dispose();
          Get_Image_Bloque3(out ho_ModelImage, out ho_X, out ho_Y, out ho_Z, out ho_ImgLeftCamera, 
              hv_NxLib, hv_Camera_1, hv_Parametros_Visualizacion, hv_Valores_Visualizacion, 
              hv_FOTO, hv_WindowHandle_COPY_INP_TMP, hv_Cod_Core_ToUse_COPY_INP_TMP, 
              hv_SerialHandle, out hv_Escena3D_RAW, out hv_Camara_conexion_Est);
          if ((int)(hv_Camara_conexion_Est.TupleNot()) != 0)
          {
            hv_Procesando.Dispose();
            hv_Procesando = 1;
            hv_Resultado.Dispose();
            hv_Resultado = 2;
            Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
            Send_Data_Info("### ERROR ### Camara estereo desconectada", hv_SerialHandle);

            hv_Estado_Fx.Dispose();
            hv_Estado_Fx = 0;
          }
        }
        else
        {
          //Es una Manga *
          //* Busco en la matrix si existe esta manga

          hv_Nelementos.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Nelementos = new HTuple(hvec_Matrix_Sleeve_COPY_INP_TMP.Length);
          }

          HTuple end_val56 = hv_Nelementos-1;
          HTuple step_val56 = 1;
          for (hv_Index=1; hv_Index.Continue(end_val56, step_val56); hv_Index = hv_Index.TupleAdd(step_val56))
          {

            if ((int)((new HTuple((hvec_Matrix_Sleeve_COPY_INP_TMP[hv_Index][1].T).TupleEqual(
                0))).TupleOr(new HTuple((hvec_Matrix_Sleeve_COPY_INP_TMP[hv_Index][0].T).TupleEqual(
                hv_Cod_Core_ToUse_COPY_INP_TMP)))) != 0)
            {
              using (HDevDisposeHelper dh = new HDevDisposeHelper())
              {
              hvec_Matrix_Sleeve_COPY_INP_TMP[hv_Index][0] = dh.Add(new HTupleVector(hv_Cod_Core_ToUse_COPY_INP_TMP));
              }
              hv_IndexLast.Dispose();
              hv_IndexLast = new HTuple(hv_Index);
              break;
            }
            hv_IndexLast.Dispose();
            hv_IndexLast = new HTuple(hv_Index);
          }


          ho_ModelImage.Dispose();ho_X.Dispose();ho_Y.Dispose();ho_Z.Dispose();ho_ImgLeftCamera.Dispose();hv_Escena3D_RAW.Dispose();
          {
          HTupleVector ExpTmpOutVar_0 = new HTupleVector(2);
          Get_Image_Sleeve_Bloque3(out ho_ModelImage, out ho_X, out ho_Y, out ho_Z, 
              out ho_ImgLeftCamera, hv_NxLib, hv_Camera_1, hv_Parametros_Visualizacion, 
              hv_Valores_Visualizacion, hv_FOTO, hv_WindowHandle_COPY_INP_TMP, hv_Cod_Core_ToUse_COPY_INP_TMP, 
              hv_SerialHandle, hvec_Matrix_Sleeve_COPY_INP_TMP, hv_IndexLast, hv_Diametro, 
              out hv_Escena3D_RAW, out ExpTmpOutVar_0);
          hvec_Matrix_Sleeve_COPY_INP_TMP.Dispose();
          hvec_Matrix_Sleeve_COPY_INP_TMP = ExpTmpOutVar_0;
          }

          hvec_Matrix_Sleeve_New.Dispose();
          hvec_Matrix_Sleeve_New = new HTupleVector(hvec_Matrix_Sleeve_COPY_INP_TMP);




        }


        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.DispText(hv_ExpDefaultWinHandle, "Foto Numero -> "+hv_FOTO, 
            "window", "top", "left", "black", new HTuple(), new HTuple());
        }
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_FOTO = hv_FOTO+1;
        hv_FOTO.Dispose();
        hv_FOTO = ExpTmpLocalVar_FOTO;
        }
        }
        //# ##################################################################
        //# ### para saber que Core debo utilizar debo consultar a la RAM BD
        //# ##################################################################
        hv_Mensaje.Dispose();
        hv_Mensaje = "Capturo datos de la ram BD";
        Send_Data_Info(hv_Mensaje, hv_SerialHandle);

        //*   Get_Core_ToUse_From_BDD_Fast (SerialHandle, Cod_Core_ToUse, Pallet_To_Scan,       **                                  Segmento_To_Scan, PitutoExist, FXcheck)

        //* si no tengo datos de bbd salgo de la funcion. Previo envie estado de error
        if ((int)(hv_FXcheck.TupleNot()) != 0)
        {
          hv_Procesando.Dispose();
          hv_Procesando = 1;
          hv_Resultado.Dispose();
          hv_Resultado = 2;
          Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);

          hv_Cod_Core_ToUse_COPY_INP_TMP.Dispose();
          hv_WindowHandle_COPY_INP_TMP.Dispose();
          hv_Mensaje.Dispose();
          hv_Procesando.Dispose();
          hv_Resultado.Dispose();
          hv_FOTO.Dispose();
          hv_RepetirFoto.Dispose();
          hv_ConteoRepeticion.Dispose();
          hv_Pallet_To_Scan.Dispose();
          hv_Segmento_To_Scan.Dispose();
          hv_PitutoExist.Dispose();
          hv_FXcheck.Dispose();
          hv_Diametro.Dispose();
          hv_ExitBloque3.Dispose();
          hv_Is_a_Core.Dispose();
          hv_Escena3D_RAW.Dispose();
          hv_Camara_conexion_Est.Dispose();
          hv_Estado_Fx.Dispose();
          hv_Nelementos.Dispose();
          hv_Index.Dispose();
          hv_IndexLast.Dispose();
          hv_Entidad.Dispose();
          hv_NamePose.Dispose();
          hv_Esquina_Pallet_Pose.Dispose();
          hv_Vector_ID_Core_by_Segment_Palle_tofind.Dispose();
          hv_N_Pallet_to_Scan.Dispose();
          hv_SegmentoPallet.Dispose();
          hv_Pose_Esquina.Dispose();
          hv_Visualizar3D.Dispose();
          hv_Estado_SubProceso_Get_Core_Presence_In_Pallet.Dispose();

          return;
        }


        hv_Entidad.Dispose();
        Get_TipoEntidad(hv_Cod_Core_ToUse_COPY_INP_TMP, out hv_Entidad);


        //* Proteccion para no buscar pines
        if ((int)(hv_Entidad) != 0)
        {

          //# ###################################################################    
          //# #### Paso la pose a CamInBasePose para virtualizar el ROI respecto#
          //# #### al robot             #########################################
          //# ###################################################################   
          //Leo la pose de la esquina del pallet N
          hv_NamePose.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_NamePose = "Pallet_"+hv_Pallet_To_Scan;
          }
          hv_Esquina_Pallet_Pose.Dispose();
          HOperatorSet.CreatePose(0.1, 0.1, 0.1, 90, 90, 90, "Rp+T", "gba", "point", 
              out hv_Esquina_Pallet_Pose);

          //# ##################################################################    
          //# ####### Realizo el reconocimiento del patron #####################
          //# ################################################################## 

          hv_Vector_ID_Core_by_Segment_Palle_tofind.Dispose();
          hv_Vector_ID_Core_by_Segment_Palle_tofind = new HTuple(hv_Cod_Core_ToUse_COPY_INP_TMP);
          hv_N_Pallet_to_Scan.Dispose();
          hv_N_Pallet_to_Scan = new HTuple(hv_Pallet_To_Scan);
          hv_SegmentoPallet.Dispose();
          hv_SegmentoPallet = new HTuple(hv_Segmento_To_Scan);
          hv_Pose_Esquina.Dispose();
          hv_Pose_Esquina = new HTuple(hv_Esquina_Pallet_Pose);

          hv_Visualizar3D.Dispose();
          hv_Visualizar3D = 1;
          hv_Estado_SubProceso_Get_Core_Presence_In_Pallet.Dispose();hv_RepetirFoto.Dispose();
          Take_Core_In_Pallet(ho_Z, ho_X, ho_Y, hv_Escena3D_RAW, hv_N_Pallet_to_Scan, 
              hv_Path_SFM_Segmentos, hv_Path_3D_Segmentos, hv_Vector_ID_Core_by_Segment_Palle_tofind, 
              hv_Path_CORE_ID, hv_SerialHandle, hvec_Vector_Estado_Fx, hv_Visualizar3D, 
              hv_SegmentoPallet, hv_Pose_Esquina, hv_PitutoExist, hv_ObjectModel3D_Core_Pallet, 
              hv_SFM_Core_Pallet, hv_Modelo3D_Select, hv_WindowHandle_COPY_INP_TMP, 
              out hv_Estado_SubProceso_Get_Core_Presence_In_Pallet, out hv_RepetirFoto);


        }
        else
        {

          //***************************************************************
          //******* ANALISIS DE MANGAS DESACTIVADO EN ESTA SECCION*********
          //***************************************************************
          //Get_3dModel_Sleeve (SerialHandle, Path_CORE_ID, Path_3D_Segmentos, Path_SFM_Segmentos, Vector_Estado_Fx, ObjectModel3D_Core_Pallet, Cod_Core_ToUse, ObjectModel3D_Core_Pallet_Sleeve, Modelo3D_Select, Cod_Core_ToUse)



          //*     get_SleeveImage (ModelImage, X, Y, Z, Matrix_Sleeve_New, Cod_Core_ToUse)

          //Generico

          //*    Take_Sleeve_in_Pallet_Inteligence (Z, X, Y, ObjectModel3D_Core_Pallet_Sleeve, Escena3D_RAW, Parametros_Visualizacion,          Valores_Visualizacion, SerialHandle, Matrix_Sleeve_New, IndexLast, Diametro, g_CamInBasePose2, g_AltutaVirtualCamEstereo, Estado_Funcion, Matrix_Sleeve_New_Pos)
          //if (Estado_Funcion)
            //Matrix_Sleeve_New := Matrix_Sleeve_New_Pos
            //Estado := 13
            //Procesando := 1
            //Resultado := 1
            //Send_Data_Proceso (SerialHandle, Resultado, Procesando)

            //Send_Data_Info ('BLOQUE 3 FINALIZADO', SerialHandle)
          //else
            //Procesando := 1
            //Resultado := 2
            //Send_Data_Proceso (SerialHandle, Resultado, Procesando)
            //Send_Data_Info ('BLOQUE 3 FINALIZADO con ERRORES!!!', SerialHandle)
            //ConteoCirculares := 0
          //endif


          //clear_object_model_3d (ObjectModel3D_Core_Pallet_Sleeve)

          //if (not Estado_Funcion)
            //RepetirFoto := true
          //endif



        }

        hv_RepetirFoto.Dispose();
        hv_RepetirFoto = 0;

      }




      hv_Cod_Core_ToUse_COPY_INP_TMP.Dispose();
      hv_WindowHandle_COPY_INP_TMP.Dispose();
      hv_Mensaje.Dispose();
      hv_Procesando.Dispose();
      hv_Resultado.Dispose();
      hv_FOTO.Dispose();
      hv_RepetirFoto.Dispose();
      hv_ConteoRepeticion.Dispose();
      hv_Pallet_To_Scan.Dispose();
      hv_Segmento_To_Scan.Dispose();
      hv_PitutoExist.Dispose();
      hv_FXcheck.Dispose();
      hv_Diametro.Dispose();
      hv_ExitBloque3.Dispose();
      hv_Is_a_Core.Dispose();
      hv_Escena3D_RAW.Dispose();
      hv_Camara_conexion_Est.Dispose();
      hv_Estado_Fx.Dispose();
      hv_Nelementos.Dispose();
      hv_Index.Dispose();
      hv_IndexLast.Dispose();
      hv_Entidad.Dispose();
      hv_NamePose.Dispose();
      hv_Esquina_Pallet_Pose.Dispose();
      hv_Vector_ID_Core_by_Segment_Palle_tofind.Dispose();
      hv_N_Pallet_to_Scan.Dispose();
      hv_SegmentoPallet.Dispose();
      hv_Pose_Esquina.Dispose();
      hv_Visualizar3D.Dispose();
      hv_Estado_SubProceso_Get_Core_Presence_In_Pallet.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Cod_Core_ToUse_COPY_INP_TMP.Dispose();
      hv_WindowHandle_COPY_INP_TMP.Dispose();
      hv_Mensaje.Dispose();
      hv_Procesando.Dispose();
      hv_Resultado.Dispose();
      hv_FOTO.Dispose();
      hv_RepetirFoto.Dispose();
      hv_ConteoRepeticion.Dispose();
      hv_Pallet_To_Scan.Dispose();
      hv_Segmento_To_Scan.Dispose();
      hv_PitutoExist.Dispose();
      hv_FXcheck.Dispose();
      hv_Diametro.Dispose();
      hv_ExitBloque3.Dispose();
      hv_Is_a_Core.Dispose();
      hv_Escena3D_RAW.Dispose();
      hv_Camara_conexion_Est.Dispose();
      hv_Estado_Fx.Dispose();
      hv_Nelementos.Dispose();
      hv_Index.Dispose();
      hv_IndexLast.Dispose();
      hv_Entidad.Dispose();
      hv_NamePose.Dispose();
      hv_Esquina_Pallet_Pose.Dispose();
      hv_Vector_ID_Core_by_Segment_Palle_tofind.Dispose();
      hv_N_Pallet_to_Scan.Dispose();
      hv_SegmentoPallet.Dispose();
      hv_Pose_Esquina.Dispose();
      hv_Visualizar3D.Dispose();
      hv_Estado_SubProceso_Get_Core_Presence_In_Pallet.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Bloque_3_seccion_0 (HObject ho_Objeto_1_mangas, out HObject ho_ModelImage, 
      out HObject ho_X, out HObject ho_Y, out HObject ho_Z, out HObject ho_ImgLeftCamera, 
      HTuple hv_SerialHandle, HTuple hv_NxLib, HTuple hv_Camera_1, HTuple hv_Parametros_Visualizacion, 
      HTuple hv_Valores_Visualizacion, HTuple hv_Path_SFM_Segmentos, HTuple hv_Path_3D_Segmentos, 
      HTuple hv_Path_CORE_ID, HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Vector_Estado_Fx, 
      HTuple hv_ObjectModel3D_Core_Pallet, HTuple hv_SFM_Core_Pallet, HTuple hv_Modelo3D_Select, 
      HTuple hv_WindowHandle, HTuple hv_Cod_Core_ToUse, HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Matrix_Sleeve, 
      HTuple hv_ConteoCirculares, HTuple hv_Pallet_To_Scan, HTuple hv_Segmento_To_Scan, 
      HTuple hv_g_CamInBasePose1, out HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Matrix_Sleeve_New, 
      out HTuple hv_ConteoCirculares_New, out HTuple hv_Estado_Fx, out HTuple hv_Camara_conexion_Est)
  {




    // Local iconic variables 

    // Local control variables 

    HTuple hv_Mensaje = new HTuple(), hv_FOTO = new HTuple();
    HTuple hv_RepetirFoto = new HTuple(), hv_ConteoRepeticion = new HTuple();
    HTuple hv_Estado_Funcion = new HTuple(), hv_g_AltutaVirtualCamEstereo = new HTuple();
    HTuple hv_Is_a_Core = new HTuple(), hv_Escena3D_RAW = new HTuple();
    HTuple hv_Procesando = new HTuple(), hv_Resultado = new HTuple();
    HTuple hv_IsA_Sleeve = new HTuple(), hv_Nelementos = new HTuple();
    HTuple hv_Index = new HTuple(), hv_IndexLast = new HTuple();
    HTuple hv_AltoTotal_Core = new HTuple(), hv_Diametro = new HTuple();
    HTuple hv_LargoTotal_Core = new HTuple(), hv_Diametro_Interno = new HTuple();
    HTuple hv_Entidad = new HTuple(), hv_NamePose = new HTuple();
    HTuple hv_Esquina_Pallet_Pose = new HTuple(), hv_Vector_ID_Core_by_Segment_Palle_tofind = new HTuple();
    HTuple hv_N_Pallet_to_Scan = new HTuple(), hv_SegmentoPallet = new HTuple();
    HTuple hv_Pose_Esquina = new HTuple(), hv_PitutoExist = new HTuple();
    HTuple hv_Visualizar3D = new HTuple(), hv_Estado_SubProceso = new HTuple();
    HTuple hv_ObjectModel3D_Core_Pallet_Sleeve = new HTuple();

    HTupleVector hvec_Matrix_Sleeve_New_Pos = new HTupleVector(2);
    HTuple   hv_Cod_Core_ToUse_COPY_INP_TMP = new HTuple(hv_Cod_Core_ToUse);
    HTuple   hv_ConteoCirculares_COPY_INP_TMP = new HTuple(hv_ConteoCirculares);
    HTuple   hv_Modelo3D_Select_COPY_INP_TMP = new HTuple(hv_Modelo3D_Select);
    HTuple   hv_WindowHandle_COPY_INP_TMP = new HTuple(hv_WindowHandle);
    HTupleVector  hvec_Matrix_Sleeve_COPY_INP_TMP = new HTupleVector(hvec_Matrix_Sleeve);

    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ModelImage);
    HOperatorSet.GenEmptyObj(out ho_X);
    HOperatorSet.GenEmptyObj(out ho_Y);
    HOperatorSet.GenEmptyObj(out ho_Z);
    HOperatorSet.GenEmptyObj(out ho_ImgLeftCamera);
    hvec_Matrix_Sleeve_New = new HTupleVector(2);
    hv_ConteoCirculares_New = new HTuple();
    hv_Estado_Fx = new HTuple();
    hv_Camara_conexion_Est = new HTuple();
    try
    {
      hv_Mensaje.Dispose();
      hv_Mensaje = "Bloque 3 INICIADO.............";
      Send_Data_Info(hv_Mensaje, hv_SerialHandle);


      //# ################################################# 
      //Obtengo imagen del bloque a escanear
      hv_FOTO.Dispose();
      hv_FOTO = 1;
      hv_RepetirFoto.Dispose();
      hv_RepetirFoto = 1;
      hv_ConteoRepeticion.Dispose();
      hv_ConteoRepeticion = 0;
      //dev_get_window(...);
      hv_Estado_Fx.Dispose();
      hv_Estado_Fx = 0;
      hv_Estado_Funcion.Dispose();
      hv_Estado_Funcion = 0;
      hv_g_AltutaVirtualCamEstereo.Dispose();
      hv_g_AltutaVirtualCamEstereo = 0;

      while ((int)(hv_RepetirFoto) != 0)
      {
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_ConteoRepeticion = hv_ConteoRepeticion+1;
        hv_ConteoRepeticion.Dispose();
        hv_ConteoRepeticion = ExpTmpLocalVar_ConteoRepeticion;
        }
        }
        hv_RepetirFoto.Dispose();
        hv_RepetirFoto = 0;



        //*************************************
        //1° Segmento si es Core o Manga
        //*************************************
        hv_Is_a_Core.Dispose();
        Get_TipoEntidad(hv_Cod_Core_ToUse_COPY_INP_TMP, out hv_Is_a_Core);
        if ((int)(hv_Is_a_Core) != 0)
        {
          //Es un Core *
          ho_ModelImage.Dispose();ho_X.Dispose();ho_Y.Dispose();ho_Z.Dispose();ho_ImgLeftCamera.Dispose();hv_Escena3D_RAW.Dispose();hv_Camara_conexion_Est.Dispose();
          Get_Image_Bloque3_Segmento0(out ho_ModelImage, out ho_X, out ho_Y, out ho_Z, 
              out ho_ImgLeftCamera, hv_NxLib, hv_Camera_1, hv_Parametros_Visualizacion, 
              hv_Valores_Visualizacion, hv_FOTO, hv_WindowHandle_COPY_INP_TMP, hv_Cod_Core_ToUse_COPY_INP_TMP, 
              hv_SerialHandle, out hv_Escena3D_RAW, out hv_Camara_conexion_Est);

          if ((int)(hv_Camara_conexion_Est.TupleNot()) != 0)
          {
            hv_Procesando.Dispose();
            hv_Procesando = 1;
            hv_Resultado.Dispose();
            hv_Resultado = 2;
            Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
            Send_Data_Info("### ERROR ### Camara estereo desconectada", hv_SerialHandle);

            hv_Estado_Fx.Dispose();
            hv_Estado_Fx = 0;
          }
        }
        else
        {
          //*************************************
          //ES UNA MANGA
          //*************************************
          hv_IsA_Sleeve.Dispose();
          hv_IsA_Sleeve = 1;
          //* Busco en la matrix si existe esta manga

          hv_Nelementos.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Nelementos = new HTuple(hvec_Matrix_Sleeve_COPY_INP_TMP.Length);
          }

          HTuple end_val45 = hv_Nelementos-1;
          HTuple step_val45 = 1;
          for (hv_Index=1; hv_Index.Continue(end_val45, step_val45); hv_Index = hv_Index.TupleAdd(step_val45))
          {

            if ((int)((new HTuple((hvec_Matrix_Sleeve_COPY_INP_TMP[hv_Index][1].T).TupleEqual(
                0))).TupleOr(new HTuple((hvec_Matrix_Sleeve_COPY_INP_TMP[hv_Index][0].T).TupleEqual(
                hv_Cod_Core_ToUse_COPY_INP_TMP)))) != 0)
            {
              using (HDevDisposeHelper dh = new HDevDisposeHelper())
              {
              hvec_Matrix_Sleeve_COPY_INP_TMP[hv_Index][0] = dh.Add(new HTupleVector(hv_Cod_Core_ToUse_COPY_INP_TMP));
              }
              hv_IndexLast.Dispose();
              hv_IndexLast = new HTuple(hv_Index);
              break;
            }
            hv_IndexLast.Dispose();
            hv_IndexLast = new HTuple(hv_Index);
          }

          hv_AltoTotal_Core.Dispose();hv_Diametro.Dispose();hv_LargoTotal_Core.Dispose();
          Get_DimencionesCore(hv_ObjectModel3D_Core_Pallet, hv_IsA_Sleeve, hv_Cod_Core_ToUse_COPY_INP_TMP, 
              hv_SerialHandle, out hv_AltoTotal_Core, out hv_Diametro, out hv_LargoTotal_Core);

          hv_Diametro_Interno.Dispose();
          Get_DiametroInternoCore_from_BDE(hv_Cod_Core_ToUse_COPY_INP_TMP, hv_SerialHandle, 
              out hv_Diametro_Interno);


          ho_ModelImage.Dispose();ho_X.Dispose();ho_Y.Dispose();ho_Z.Dispose();ho_ImgLeftCamera.Dispose();hv_Escena3D_RAW.Dispose();
          {
          HTupleVector ExpTmpOutVar_0 = new HTupleVector(2);hv_g_AltutaVirtualCamEstereo.Dispose();
          Get_Image_Sleeve_Bloque3_Seccion0(ho_Objeto_1_mangas, out ho_ModelImage, 
              out ho_X, out ho_Y, out ho_Z, out ho_ImgLeftCamera, hv_NxLib, hv_Camera_1, 
              hv_Parametros_Visualizacion, hv_Valores_Visualizacion, hv_FOTO, hv_WindowHandle_COPY_INP_TMP, 
              hv_Cod_Core_ToUse_COPY_INP_TMP, hv_SerialHandle, hvec_Matrix_Sleeve_COPY_INP_TMP, 
              hv_IndexLast, hv_Diametro, hv_Diametro_Interno, hv_g_CamInBasePose1, 
              out hv_Escena3D_RAW, out ExpTmpOutVar_0, out hv_g_AltutaVirtualCamEstereo);
          hvec_Matrix_Sleeve_COPY_INP_TMP.Dispose();
          hvec_Matrix_Sleeve_COPY_INP_TMP = ExpTmpOutVar_0;
          }

          hvec_Matrix_Sleeve_New.Dispose();
          hvec_Matrix_Sleeve_New = new HTupleVector(hvec_Matrix_Sleeve_COPY_INP_TMP);




        }


        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.DispText(hv_ExpDefaultWinHandle, "Foto Numero -> "+hv_FOTO, 
            "window", "top", "left", "black", new HTuple(), new HTuple());
        }
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_FOTO = hv_FOTO+1;
        hv_FOTO.Dispose();
        hv_FOTO = ExpTmpLocalVar_FOTO;
        }
        }
        //# ##################################################################
        //# ### para saber que Core debo utilizar debo consultar a la RAM BD
        //# ##################################################################
        hv_Mensaje.Dispose();
        hv_Mensaje = "Capturo datos de la ram BD";
        Send_Data_Info(hv_Mensaje, hv_SerialHandle);



        hv_Entidad.Dispose();
        Get_TipoEntidad(hv_Cod_Core_ToUse_COPY_INP_TMP, out hv_Entidad);


        //* Proteccion para no buscar pines
        if ((int)(hv_Entidad) != 0)
        {

          //# ###################################################################    
          //# #### Paso la pose a CamInBasePose para virtualizar el ROI respecto#
          //# #### al robot             #########################################
          //# ###################################################################   
          //Leo la pose de la esquina del pallet N
          hv_NamePose.Dispose();
          hv_NamePose = "Pallet_";
          hv_Esquina_Pallet_Pose.Dispose();
          HOperatorSet.CreatePose(0.1, 0.1, 0.1, 90, 90, 90, "Rp+T", "gba", "point", 
              out hv_Esquina_Pallet_Pose);

          //# ##################################################################    
          //# ####### Realizo el reconocimiento del patron #####################
          //# ################################################################## 

          hv_Vector_ID_Core_by_Segment_Palle_tofind.Dispose();
          hv_Vector_ID_Core_by_Segment_Palle_tofind = new HTuple(hv_Cod_Core_ToUse_COPY_INP_TMP);
          hv_N_Pallet_to_Scan.Dispose();
          hv_N_Pallet_to_Scan = new HTuple(hv_Pallet_To_Scan);
          hv_SegmentoPallet.Dispose();
          hv_SegmentoPallet = new HTuple(hv_Segmento_To_Scan);
          hv_Pose_Esquina.Dispose();
          hv_Pose_Esquina = new HTuple(hv_Esquina_Pallet_Pose);
          hv_PitutoExist.Dispose();
          hv_PitutoExist = 1;
          hv_Visualizar3D.Dispose();
          hv_Visualizar3D = 1;


          hv_Estado_SubProceso.Dispose();hv_RepetirFoto.Dispose();
          Take_Core_In_Pallet_Segmento0(ho_Z, ho_X, ho_Y, hv_Escena3D_RAW, hv_N_Pallet_to_Scan, 
              hv_Path_SFM_Segmentos, hv_Path_3D_Segmentos, hv_Vector_ID_Core_by_Segment_Palle_tofind, 
              hv_Path_CORE_ID, hv_SerialHandle, hvec_Vector_Estado_Fx, hv_Visualizar3D, 
              hv_SegmentoPallet, hv_Pose_Esquina, hv_PitutoExist, hv_ObjectModel3D_Core_Pallet, 
              hv_SFM_Core_Pallet, hv_Modelo3D_Select_COPY_INP_TMP, hv_WindowHandle_COPY_INP_TMP, 
              hv_Estado_Funcion, hv_g_AltutaVirtualCamEstereo, out hv_Estado_SubProceso, 
              out hv_RepetirFoto);

          if ((int)(hv_Estado_SubProceso) != 0)
          {

            hv_Estado_Fx.Dispose();
            hv_Estado_Fx = new HTuple(hv_Estado_SubProceso);
          }
          else
          {
            hv_Estado_Fx.Dispose();
            hv_Estado_Fx = new HTuple(hv_Estado_SubProceso);
            Send_Data_Info("BLOQUE 3 FINALIZADO con ERRORES!!!", hv_SerialHandle);
            hv_ConteoCirculares_COPY_INP_TMP.Dispose();
            hv_ConteoCirculares_COPY_INP_TMP = 0;
            hv_Estado_Fx.Dispose();
            hv_Estado_Fx = 0;
          }
        }
        else
        {

          //**********************************************
          //******* ROI Altura ***************************
          //**********************************************

          hv_ObjectModel3D_Core_Pallet_Sleeve.Dispose();hv_Modelo3D_Select_COPY_INP_TMP.Dispose();
          {
          HTuple ExpTmpOutVar_0;
          Get_3dModel_Sleeve(hv_SerialHandle, hv_Path_CORE_ID, hv_Path_3D_Segmentos, 
              hv_Path_SFM_Segmentos, hvec_Vector_Estado_Fx, hv_ObjectModel3D_Core_Pallet, 
              hv_Cod_Core_ToUse_COPY_INP_TMP, out hv_ObjectModel3D_Core_Pallet_Sleeve, 
              out hv_Modelo3D_Select_COPY_INP_TMP, out ExpTmpOutVar_0);
          hv_Cod_Core_ToUse_COPY_INP_TMP.Dispose();
          hv_Cod_Core_ToUse_COPY_INP_TMP = ExpTmpOutVar_0;
          }



          //*      get_SleeveImage (ModelImage, X, Y, Z, Matrix_Sleeve_New, Cod_Core_ToUse)




          //Generico
          hv_Estado_Funcion.Dispose();hvec_Matrix_Sleeve_New_Pos.Dispose();
          Take_Sleeve_in_Pallet_Inteligence(ho_Z, ho_X, ho_Y, hv_ObjectModel3D_Core_Pallet_Sleeve, 
              hv_Escena3D_RAW, hv_Parametros_Visualizacion, hv_Valores_Visualizacion, 
              hv_SerialHandle, hvec_Matrix_Sleeve_New, hv_IndexLast, hv_Diametro, 
              hv_g_CamInBasePose1, hv_g_AltutaVirtualCamEstereo, hv_Diametro_Interno, 
              out hv_Estado_Funcion, out hvec_Matrix_Sleeve_New_Pos);
          if ((int)(hv_Estado_Funcion) != 0)
          {
            hvec_Matrix_Sleeve_New.Dispose();
            hvec_Matrix_Sleeve_New = new HTupleVector(hvec_Matrix_Sleeve_New_Pos);
            //Estado := 13
            //Procesando := 1
            //Resultado := 1
            //Send_Data_Proceso (SerialHandle, Resultado, Procesando)

            Send_Data_Info("BLOQUE 3 FINALIZADO", hv_SerialHandle);
          }
          else
          {
            hv_Procesando.Dispose();
            hv_Procesando = 1;
            hv_Resultado.Dispose();
            hv_Resultado = 2;
            Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
            Send_Data_Info("BLOQUE 3 FINALIZADO con ERRORES!!!", hv_SerialHandle);
            hv_ConteoCirculares_COPY_INP_TMP.Dispose();
            hv_ConteoCirculares_COPY_INP_TMP = 0;
            hv_Estado_Fx.Dispose();
            hv_Estado_Fx = 0;
          }


          HOperatorSet.ClearObjectModel3d(hv_ObjectModel3D_Core_Pallet_Sleeve);

          if ((int)(hv_Estado_Funcion.TupleNot()) != 0)
          {
            hv_RepetirFoto.Dispose();
            hv_RepetirFoto = 1;
          }



        }

        hv_RepetirFoto.Dispose();
        hv_RepetirFoto = 0;

      }




      hv_Cod_Core_ToUse_COPY_INP_TMP.Dispose();
      hv_ConteoCirculares_COPY_INP_TMP.Dispose();
      hv_Modelo3D_Select_COPY_INP_TMP.Dispose();
      hv_WindowHandle_COPY_INP_TMP.Dispose();
      hv_Mensaje.Dispose();
      hv_FOTO.Dispose();
      hv_RepetirFoto.Dispose();
      hv_ConteoRepeticion.Dispose();
      hv_Estado_Funcion.Dispose();
      hv_g_AltutaVirtualCamEstereo.Dispose();
      hv_Is_a_Core.Dispose();
      hv_Escena3D_RAW.Dispose();
      hv_Procesando.Dispose();
      hv_Resultado.Dispose();
      hv_IsA_Sleeve.Dispose();
      hv_Nelementos.Dispose();
      hv_Index.Dispose();
      hv_IndexLast.Dispose();
      hv_AltoTotal_Core.Dispose();
      hv_Diametro.Dispose();
      hv_LargoTotal_Core.Dispose();
      hv_Diametro_Interno.Dispose();
      hv_Entidad.Dispose();
      hv_NamePose.Dispose();
      hv_Esquina_Pallet_Pose.Dispose();
      hv_Vector_ID_Core_by_Segment_Palle_tofind.Dispose();
      hv_N_Pallet_to_Scan.Dispose();
      hv_SegmentoPallet.Dispose();
      hv_Pose_Esquina.Dispose();
      hv_PitutoExist.Dispose();
      hv_Visualizar3D.Dispose();
      hv_Estado_SubProceso.Dispose();
      hv_ObjectModel3D_Core_Pallet_Sleeve.Dispose();
      hvec_Matrix_Sleeve_New_Pos.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Cod_Core_ToUse_COPY_INP_TMP.Dispose();
      hv_ConteoCirculares_COPY_INP_TMP.Dispose();
      hv_Modelo3D_Select_COPY_INP_TMP.Dispose();
      hv_WindowHandle_COPY_INP_TMP.Dispose();
      hv_Mensaje.Dispose();
      hv_FOTO.Dispose();
      hv_RepetirFoto.Dispose();
      hv_ConteoRepeticion.Dispose();
      hv_Estado_Funcion.Dispose();
      hv_g_AltutaVirtualCamEstereo.Dispose();
      hv_Is_a_Core.Dispose();
      hv_Escena3D_RAW.Dispose();
      hv_Procesando.Dispose();
      hv_Resultado.Dispose();
      hv_IsA_Sleeve.Dispose();
      hv_Nelementos.Dispose();
      hv_Index.Dispose();
      hv_IndexLast.Dispose();
      hv_AltoTotal_Core.Dispose();
      hv_Diametro.Dispose();
      hv_LargoTotal_Core.Dispose();
      hv_Diametro_Interno.Dispose();
      hv_Entidad.Dispose();
      hv_NamePose.Dispose();
      hv_Esquina_Pallet_Pose.Dispose();
      hv_Vector_ID_Core_by_Segment_Palle_tofind.Dispose();
      hv_N_Pallet_to_Scan.Dispose();
      hv_SegmentoPallet.Dispose();
      hv_Pose_Esquina.Dispose();
      hv_PitutoExist.Dispose();
      hv_Visualizar3D.Dispose();
      hv_Estado_SubProceso.Dispose();
      hv_ObjectModel3D_Core_Pallet_Sleeve.Dispose();
      hvec_Matrix_Sleeve_New_Pos.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Bloque_Localizadores (HTuple hv_SerialHandle, HTuple hv_NxLib, HTuple hv_Camera_1, 
      HTuple hv_Matrix_Localizadores)
  {



        // Local iconic variables 

        HObject ho_Zm=null, ho_ImgLeftCamera=null;
        HObject ho_Zmred=null;

        // Local control variables 

        HTuple hv_Mensaje = new HTuple(), hv_Procesando = new HTuple();
        HTuple hv_Resultado = new HTuple(), hv_Tag_Lectura = new HTuple();
        HTuple hv_N_Localizador = new HTuple(), hv_LocalizadoresMAX = new HTuple();
        HTuple hv_Index = new HTuple(), hv_AlturaLocalizador = new HTuple();
        HTuple hv_Estado_Fx = new HTuple(), hv_oFFSETZ = new HTuple();
        HTuple hv_Bach1 = new HTuple(), hv_Bach2 = new HTuple();
        HTuple hv_UmbralAlturaMin = new HTuple(), hv_UmbralAlturaMax = new HTuple();
        HTuple hv_Delta = new HTuple(), hv_tagDestino = new HTuple();
        HTuple hv_ValorVariable = new HTuple(), hv_Exception = new HTuple();
        HTuple hv_EstadoFx = new HTuple();
        HTuple   hv_Matrix_Localizadores_COPY_INP_TMP = new HTuple(hv_Matrix_Localizadores);

        // Initialize local and output iconic variables 
        HOperatorSet.GenEmptyObj(out ho_Zm);
        HOperatorSet.GenEmptyObj(out ho_ImgLeftCamera);
        HOperatorSet.GenEmptyObj(out ho_Zmred);
        try
        {


      hv_Mensaje.Dispose();
      hv_Mensaje = "###### INICIO BLOQUE LOCALIZADORES ######";
      Send_Data_Info(hv_Mensaje, hv_SerialHandle);

      try
      {
        //# ### Envio data de estado ########################
        hv_Procesando.Dispose();
        hv_Procesando = 1;
        hv_Resultado.Dispose();
        hv_Resultado = 0;
        Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
        //# ################################################# 

        hv_Tag_Lectura.Dispose();
        hv_Tag_Lectura = "_EBD_I_SegmentoIr";
        hv_N_Localizador.Dispose();
        Read_EthernetIP_Data(hv_Tag_Lectura, hv_SerialHandle, out hv_N_Localizador);

        ho_Zm.Dispose();ho_ImgLeftCamera.Dispose();
        Get_Picture(out ho_Zm, out ho_ImgLeftCamera, hv_NxLib, hv_Camera_1);

        //# #############################################
        //# ####  Make ROI ##############################        
        ho_Zmred.Dispose();
        Get_Zona_ROI(ho_Zm, out ho_Zmred, hv_N_Localizador);
        //# ############################################       



        hv_LocalizadoresMAX.Dispose();
        hv_LocalizadoresMAX = 11;

        HTuple end_val26 = hv_LocalizadoresMAX;
        HTuple step_val26 = 1;
        for (hv_Index=1; hv_Index.Continue(end_val26, step_val26); hv_Index = hv_Index.TupleAdd(step_val26))
        {
          //# ####  Make ROI ##############################        
          ho_Zmred.Dispose();
          Get_Zona_ROI(ho_Zm, out ho_Zmred, hv_Index);
          //# ############################################     
          hv_AlturaLocalizador.Dispose();hv_Estado_Fx.Dispose();
          Get_AlturaLocalizador(ho_Zmred, hv_SerialHandle, out hv_AlturaLocalizador, 
              out hv_Estado_Fx);
          hv_oFFSETZ.Dispose();
          hv_oFFSETZ = 5;
          if (hv_Matrix_Localizadores_COPY_INP_TMP == null)
            hv_Matrix_Localizadores_COPY_INP_TMP = new HTuple();
          hv_Matrix_Localizadores_COPY_INP_TMP[hv_Index] = hv_AlturaLocalizador+hv_oFFSETZ;
        }





        //*********************************************************


        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Bach1.Dispose();
        HOperatorSet.CreatePose(hv_Matrix_Localizadores_COPY_INP_TMP.TupleSelect(
            1), hv_Matrix_Localizadores_COPY_INP_TMP.TupleSelect(2), hv_Matrix_Localizadores_COPY_INP_TMP.TupleSelect(
            3), hv_Matrix_Localizadores_COPY_INP_TMP.TupleSelect(4), hv_Matrix_Localizadores_COPY_INP_TMP.TupleSelect(
            5), hv_Matrix_Localizadores_COPY_INP_TMP.TupleSelect(6), "Rp+T", "gba", 
            "point", out hv_Bach1);
        }
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Bach2.Dispose();
        HOperatorSet.CreatePose(hv_Matrix_Localizadores_COPY_INP_TMP.TupleSelect(
            7), hv_Matrix_Localizadores_COPY_INP_TMP.TupleSelect(8), hv_Matrix_Localizadores_COPY_INP_TMP.TupleSelect(
            9), hv_Matrix_Localizadores_COPY_INP_TMP.TupleSelect(10), hv_Matrix_Localizadores_COPY_INP_TMP.TupleSelect(
            11), 0, "Rp+T", "gba", "point", out hv_Bach2);
        }


        Send_Data_To_Robot(hv_Bach1, hv_SerialHandle);
        Send_Data_To_BDD_Pos(hv_Bach2, hv_SerialHandle);
        //*********************************************************









        hv_UmbralAlturaMin.Dispose();
        hv_UmbralAlturaMin = 990;
        hv_UmbralAlturaMax.Dispose();
        hv_UmbralAlturaMax = 1475;

        if ((int)(hv_Estado_Fx) != 0)
        {

          if ((int)((new HTuple(hv_AlturaLocalizador.TupleLess(hv_UmbralAlturaMin))).TupleOr(
              new HTuple(hv_AlturaLocalizador.TupleGreater(hv_UmbralAlturaMax)))) != 0)
          {

            hv_Mensaje.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_Mensaje = ("### ERROR ### Altura de Localizador Menor que Altura umbral -> "+hv_AlturaLocalizador)+"[mm]";
            }
            Send_Data_Info(hv_Mensaje, hv_SerialHandle);
            //# ### Envio data de estado ########################
            hv_Procesando.Dispose();
            hv_Procesando = 1;
            hv_Resultado.Dispose();
            hv_Resultado = 2;
            Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
            //# #################################################   
          }
          else
          {
            hv_Delta.Dispose();
            hv_Delta = 8;
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            {
            HTuple 
              ExpTmpLocalVar_AlturaLocalizador = hv_AlturaLocalizador+hv_Delta;
            hv_AlturaLocalizador.Dispose();
            hv_AlturaLocalizador = ExpTmpLocalVar_AlturaLocalizador;
            }
            }
            hv_Mensaje.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_Mensaje = (("Altura de Localizador Encontrada -> "+hv_AlturaLocalizador)+" [mm] en Segmento ->")+hv_N_Localizador;
            }
            Send_Data_Info(hv_Mensaje, hv_SerialHandle);

            //**** Envio    informacion **************************
            hv_tagDestino.Dispose();
            hv_tagDestino = "_EV01_I_EjeZZ";
            hv_ValorVariable.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_ValorVariable = hv_AlturaLocalizador+3;
            }
            Send_EthernetIP_Data(hv_tagDestino, hv_ValorVariable, hv_SerialHandle);

            //# ### Envio data de estado ########################
            hv_Procesando.Dispose();
            hv_Procesando = 1;
            hv_Resultado.Dispose();
            hv_Resultado = 1;
            Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
            //# ################################################# 

          }
        }
        else
        {

          //# ### Envio data de estado ########################
          hv_Procesando.Dispose();
          hv_Procesando = 1;
          hv_Resultado.Dispose();
          hv_Resultado = 2;
          Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
          //# ################################################# 

        }
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_Mensaje.Dispose();
        hv_Mensaje = "### ERROR ### Bloque Localizador ";
        Send_Data_Info(hv_Mensaje, hv_SerialHandle);
        hv_EstadoFx.Dispose();
        Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx);
        //# ### Envio data de estado ########################
        hv_Procesando.Dispose();
        hv_Procesando = 1;
        hv_Resultado.Dispose();
        hv_Resultado = 2;
        Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
        //# #################################################   
      }




      hv_Mensaje.Dispose();
      hv_Mensaje = "###### FIN  BLOQUE LOCALIZADORES ######";
      Send_Data_Info(hv_Mensaje, hv_SerialHandle);



      ho_Zm.Dispose();
      ho_ImgLeftCamera.Dispose();
      ho_Zmred.Dispose();

      hv_Matrix_Localizadores_COPY_INP_TMP.Dispose();
      hv_Mensaje.Dispose();
      hv_Procesando.Dispose();
      hv_Resultado.Dispose();
      hv_Tag_Lectura.Dispose();
      hv_N_Localizador.Dispose();
      hv_LocalizadoresMAX.Dispose();
      hv_Index.Dispose();
      hv_AlturaLocalizador.Dispose();
      hv_Estado_Fx.Dispose();
      hv_oFFSETZ.Dispose();
      hv_Bach1.Dispose();
      hv_Bach2.Dispose();
      hv_UmbralAlturaMin.Dispose();
      hv_UmbralAlturaMax.Dispose();
      hv_Delta.Dispose();
      hv_tagDestino.Dispose();
      hv_ValorVariable.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_Zm.Dispose();
      ho_ImgLeftCamera.Dispose();
      ho_Zmred.Dispose();

      hv_Matrix_Localizadores_COPY_INP_TMP.Dispose();
      hv_Mensaje.Dispose();
      hv_Procesando.Dispose();
      hv_Resultado.Dispose();
      hv_Tag_Lectura.Dispose();
      hv_N_Localizador.Dispose();
      hv_LocalizadoresMAX.Dispose();
      hv_Index.Dispose();
      hv_AlturaLocalizador.Dispose();
      hv_Estado_Fx.Dispose();
      hv_oFFSETZ.Dispose();
      hv_Bach1.Dispose();
      hv_Bach2.Dispose();
      hv_UmbralAlturaMin.Dispose();
      hv_UmbralAlturaMax.Dispose();
      hv_Delta.Dispose();
      hv_tagDestino.Dispose();
      hv_ValorVariable.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Bloque_localizadores_smart (HTuple hv_SerialHandle, HTuple hv_NxLib, 
      HTuple hv_Camera_1, HTuple hv_Matrix_Localizadores)
  {



        // Local iconic variables 

        HObject ho_Zm=null, ho_ImgLeftCamera=null;
        HObject ho_Zmred=null;

        // Local control variables 

        HTuple hv_Mensaje = new HTuple(), hv_Procesando = new HTuple();
        HTuple hv_Resultado = new HTuple(), hv_Tag_Lectura = new HTuple();
        HTuple hv_N_Localizador = new HTuple(), hv_LocalizadoresMAX = new HTuple();
        HTuple hv_OffsetZ = new HTuple(), hv_Index = new HTuple();
        HTuple hv_AlturaLocalizador = new HTuple(), hv_Estado_Fx = new HTuple();
        HTuple hv_Bach1 = new HTuple(), hv_Bach2 = new HTuple();
        HTuple hv_Index1 = new HTuple(), hv_Exception = new HTuple();
        HTuple hv_EstadoFx = new HTuple();
        HTuple   hv_Matrix_Localizadores_COPY_INP_TMP = new HTuple(hv_Matrix_Localizadores);

        // Initialize local and output iconic variables 
        HOperatorSet.GenEmptyObj(out ho_Zm);
        HOperatorSet.GenEmptyObj(out ho_ImgLeftCamera);
        HOperatorSet.GenEmptyObj(out ho_Zmred);
        try
        {


      hv_Mensaje.Dispose();
      hv_Mensaje = "###### INICIO BLOQUE LOCALIZADORES ######";
      Send_Data_Info(hv_Mensaje, hv_SerialHandle);


      try
      {




        //# ### Envio data de estado ########################
        hv_Procesando.Dispose();
        hv_Procesando = 1;
        hv_Resultado.Dispose();
        hv_Resultado = 0;
        Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
        //# ################################################# 

        hv_Tag_Lectura.Dispose();
        hv_Tag_Lectura = "_EBD_I_SegmentoIr";
        hv_N_Localizador.Dispose();
        Read_EthernetIP_Data(hv_Tag_Lectura, hv_SerialHandle, out hv_N_Localizador);

        ho_Zm.Dispose();ho_ImgLeftCamera.Dispose();
        Get_Picture(out ho_Zm, out ho_ImgLeftCamera, hv_NxLib, hv_Camera_1);


        hv_LocalizadoresMAX.Dispose();
        hv_LocalizadoresMAX = 11;
        hv_OffsetZ.Dispose();
        hv_OffsetZ = 6;

        HTuple end_val26 = hv_LocalizadoresMAX;
        HTuple step_val26 = 1;
        for (hv_Index=1; hv_Index.Continue(end_val26, step_val26); hv_Index = hv_Index.TupleAdd(step_val26))
        {
          //# ####  Make ROI ##############################        
          ho_Zmred.Dispose();
          Get_Zona_ROI(ho_Zm, out ho_Zmred, hv_Index);
          //# ############################################     
          hv_AlturaLocalizador.Dispose();hv_Estado_Fx.Dispose();
          Get_AlturaLocalizador(ho_Zmred, hv_SerialHandle, out hv_AlturaLocalizador, 
              out hv_Estado_Fx);
          if (hv_Matrix_Localizadores_COPY_INP_TMP == null)
            hv_Matrix_Localizadores_COPY_INP_TMP = new HTuple();
          hv_Matrix_Localizadores_COPY_INP_TMP[hv_Index] = hv_AlturaLocalizador+hv_OffsetZ;
        }





        //*********************************************************


        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Bach1.Dispose();
        HOperatorSet.CreatePose(hv_Matrix_Localizadores_COPY_INP_TMP.TupleSelect(
            1), hv_Matrix_Localizadores_COPY_INP_TMP.TupleSelect(2), hv_Matrix_Localizadores_COPY_INP_TMP.TupleSelect(
            3), hv_Matrix_Localizadores_COPY_INP_TMP.TupleSelect(6), hv_Matrix_Localizadores_COPY_INP_TMP.TupleSelect(
            5), hv_Matrix_Localizadores_COPY_INP_TMP.TupleSelect(4), "Rp+T", "gba", 
            "point", out hv_Bach1);
        }


        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Bach2.Dispose();
        HOperatorSet.CreatePose(hv_Matrix_Localizadores_COPY_INP_TMP.TupleSelect(
            7), hv_Matrix_Localizadores_COPY_INP_TMP.TupleSelect(8), hv_Matrix_Localizadores_COPY_INP_TMP.TupleSelect(
            9), 0, hv_Matrix_Localizadores_COPY_INP_TMP.TupleSelect(11), hv_Matrix_Localizadores_COPY_INP_TMP.TupleSelect(
            10), "Rp+T", "gba", "point", out hv_Bach2);
        }

        //*********************************************************
        Send_Data_To_Robot(hv_Bach1, hv_SerialHandle);
        Send_Data_To_BDD_Pos(hv_Bach2, hv_SerialHandle);
        //*********************************************************


        //# ### Envio data de estado ########################
        hv_Procesando.Dispose();
        hv_Procesando = 1;
        hv_Resultado.Dispose();
        hv_Resultado = 1;
        Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
        //# ################################################# 

        HTuple end_val58 = hv_LocalizadoresMAX;
        HTuple step_val58 = 1;
        for (hv_Index1=1; hv_Index1.Continue(end_val58, step_val58); hv_Index1 = hv_Index1.TupleAdd(step_val58))
        {
          hv_Mensaje.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Mensaje = ((("### Altura de Localizador Pos "+hv_Index1)+" -> ")+(hv_Matrix_Localizadores_COPY_INP_TMP.TupleSelect(
              hv_Index1)))+" [mm]";
          }
          Send_Data_Info(hv_Mensaje, hv_SerialHandle);

        }


        hv_Mensaje.Dispose();
        hv_Mensaje = "###### FIN  BLOQUE LOCALIZADORES ######";
        Send_Data_Info(hv_Mensaje, hv_SerialHandle);

      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);

        hv_EstadoFx.Dispose();
        Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx);

      }

      ho_Zm.Dispose();
      ho_ImgLeftCamera.Dispose();
      ho_Zmred.Dispose();

      hv_Matrix_Localizadores_COPY_INP_TMP.Dispose();
      hv_Mensaje.Dispose();
      hv_Procesando.Dispose();
      hv_Resultado.Dispose();
      hv_Tag_Lectura.Dispose();
      hv_N_Localizador.Dispose();
      hv_LocalizadoresMAX.Dispose();
      hv_OffsetZ.Dispose();
      hv_Index.Dispose();
      hv_AlturaLocalizador.Dispose();
      hv_Estado_Fx.Dispose();
      hv_Bach1.Dispose();
      hv_Bach2.Dispose();
      hv_Index1.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_Zm.Dispose();
      ho_ImgLeftCamera.Dispose();
      ho_Zmred.Dispose();

      hv_Matrix_Localizadores_COPY_INP_TMP.Dispose();
      hv_Mensaje.Dispose();
      hv_Procesando.Dispose();
      hv_Resultado.Dispose();
      hv_Tag_Lectura.Dispose();
      hv_N_Localizador.Dispose();
      hv_LocalizadoresMAX.Dispose();
      hv_OffsetZ.Dispose();
      hv_Index.Dispose();
      hv_AlturaLocalizador.Dispose();
      hv_Estado_Fx.Dispose();
      hv_Bach1.Dispose();
      hv_Bach2.Dispose();
      hv_Index1.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Bloque_Sprues (HTuple hv__EV1_O_CmdDatos, HTuple hv_SerialHandle)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_N_Localizador = new HTuple(), hv_Pattern = new HTuple();
    HTuple hv_PosicionRack = new HTuple(), hv_ExisteEnRack = new HTuple();
    HTuple hv_Tag_Lectura = new HTuple(), hv_TagDestino = new HTuple();
    HTuple hv_PatternName = new HTuple(), hv_Data = new HTuple();
    // Initialize local and output iconic variables 
    try
    {
      //*******************************************************
      hv_N_Localizador.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_N_Localizador = 50-hv__EV1_O_CmdDatos;
      }
      //*******************************************************

      hv_Pattern.Dispose();hv_PosicionRack.Dispose();hv_ExisteEnRack.Dispose();
      Get_SprueExistence(hv_SerialHandle, out hv_Pattern, out hv_PosicionRack, out hv_ExisteEnRack);


      hv_Tag_Lectura.Dispose();
      hv_Tag_Lectura = "_EBD_I_PatternList";
      hv_Pattern.Dispose();
      Read_EthernetIP_Data(hv_Tag_Lectura, hv_SerialHandle, out hv_Pattern);

      hv_TagDestino.Dispose();
      hv_TagDestino = "_EBD_I_SegmentoIr";
      Send_EthernetIP_Data(hv_TagDestino, hv_PosicionRack, hv_SerialHandle);
      //*******************************************
      //Peticion de RamSprue
      //********************************************
      hv_PatternName.Dispose();
      hv_PatternName = new HTuple(hv_Pattern);
      hv_Data.Dispose();
      hv_Data = "O";
      Set_SprueExistence(hv_PatternName, hv_Data, hv_SerialHandle);


      hv_N_Localizador.Dispose();
      hv_Pattern.Dispose();
      hv_PosicionRack.Dispose();
      hv_ExisteEnRack.Dispose();
      hv_Tag_Lectura.Dispose();
      hv_TagDestino.Dispose();
      hv_PatternName.Dispose();
      hv_Data.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_N_Localizador.Dispose();
      hv_Pattern.Dispose();
      hv_PosicionRack.Dispose();
      hv_ExisteEnRack.Dispose();
      hv_Tag_Lectura.Dispose();
      hv_TagDestino.Dispose();
      hv_PatternName.Dispose();
      hv_Data.Dispose();

      throw HDevExpDefaultException;
    }
  }

  // Short Description: compute cam_H_calplate from hand-eye calibration results 
  public void calc_calplate_pose_movingcam (HTuple hv_CalibObjInBasePose, HTuple hv_ToolInCamPose, 
      HTuple hv_ToolInBasePose, out HTuple hv_CalibObjInCamPose)
  {



    // Local control variables 

    HTuple hv_BaseInToolPose = new HTuple(), hv_BaseInCamPose = new HTuple();
    // Initialize local and output iconic variables 
    hv_CalibObjInCamPose = new HTuple();
    try
    {
      //CalibObjInCamPose = cam_H_calplate
      //                  = cam_H_tool * tool_H_base * base_H_calplate
      //                  = ToolInCamPose * BaseInToolPose * CalibrationPose
      hv_BaseInToolPose.Dispose();
      HOperatorSet.PoseInvert(hv_ToolInBasePose, out hv_BaseInToolPose);
      hv_BaseInCamPose.Dispose();
      HOperatorSet.PoseCompose(hv_ToolInCamPose, hv_BaseInToolPose, out hv_BaseInCamPose);
      hv_CalibObjInCamPose.Dispose();
      HOperatorSet.PoseCompose(hv_BaseInCamPose, hv_CalibObjInBasePose, out hv_CalibObjInCamPose);
      //
      //
      //
      //

      hv_BaseInToolPose.Dispose();
      hv_BaseInCamPose.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_BaseInToolPose.Dispose();
      hv_BaseInCamPose.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Check_BasePose (HTuple hv_PoseForCalibrationPlate, HTuple hv_ToolInCamPose, 
      HTuple hv_ToolInBasePose, HTuple hv_Height, HTuple hv_Width, HTuple hv_SerialHandle)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_CamInToolPose = new HTuple(), hv_ObjInCamPose = new HTuple();
    HTuple hv_CamInBasePose = new HTuple(), hv_ObjInBasePose = new HTuple();
    HTuple hv_OsffetZ = new HTuple(), hv_Altura_Objetivo = new HTuple();
    HTuple hv_Altura_Actual = new HTuple(), hv_DeltaAltura = new HTuple();
    HTuple   hv_ToolInBasePose_COPY_INP_TMP = new HTuple(hv_ToolInBasePose);
    HTuple   hv_ToolInCamPose_COPY_INP_TMP = new HTuple(hv_ToolInCamPose);

    // Initialize local and output iconic variables 
    try
    {
      hv_ToolInBasePose_COPY_INP_TMP.Dispose();
      Get_Pose_Tool(hv_SerialHandle, out hv_ToolInBasePose_COPY_INP_TMP);

      //create_pose (1780.63, 1568.38, 987.679, 180, 0, 0, 'Rp+T', 'abg', 'point', ToolInBasePose)





      // dev_inspect_ctrl(...); only in hdevelop
      hv_ToolInCamPose_COPY_INP_TMP.Dispose();
      HOperatorSet.ReadPose("C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/7.-HandEye/2. procilica/ToolInCamPose_Procilica.dat", 
          out hv_ToolInCamPose_COPY_INP_TMP);
      // dev_inspect_ctrl(...); only in hdevelop
      hv_CamInToolPose.Dispose();
      HOperatorSet.PoseInvert(hv_ToolInCamPose_COPY_INP_TMP, out hv_CamInToolPose);

      // dev_inspect_ctrl(...); only in hdevelop
      hv_ToolInCamPose_COPY_INP_TMP.Dispose();
      HOperatorSet.PoseInvert(hv_CamInToolPose, out hv_ToolInCamPose_COPY_INP_TMP);

      //write_pose (ToolInCamPose, 'C:/Users/Usuario/Dropbox (MIRS)/1.-Servidor Desarrollo Software/7.-Magotteaux/7.-HandEye/2. procilica/ToolInCamPose_Procilica.dat')
      //************************************************************************************************************
      //Lectura de Posicion de la herramienta del robot. Deberar ser por etehrnetIP
      //************************************************************************************************************



      hv_ObjInCamPose.Dispose();
      hv_ObjInCamPose = new HTuple(hv_PoseForCalibrationPlate);

      hv_CamInToolPose.Dispose();
      HOperatorSet.PoseInvert(hv_ToolInCamPose_COPY_INP_TMP, out hv_CamInToolPose);
      hv_CamInBasePose.Dispose();
      HOperatorSet.PoseCompose(hv_ToolInBasePose_COPY_INP_TMP, hv_CamInToolPose, 
          out hv_CamInBasePose);
      hv_ObjInBasePose.Dispose();
      HOperatorSet.PoseCompose(hv_CamInBasePose, hv_ObjInCamPose, out hv_ObjInBasePose);
      {
      HTuple ExpTmpOutVar_0;
      HOperatorSet.ConvertPoseType(hv_ObjInBasePose, "Rp+T", "abg", "point", out ExpTmpOutVar_0);
      hv_ObjInBasePose.Dispose();
      hv_ObjInBasePose = ExpTmpOutVar_0;
      }
      // dev_inspect_ctrl(...); only in hdevelop

      hv_OsffetZ.Dispose();
      hv_OsffetZ = 0;
      if (hv_ObjInBasePose == null)
        hv_ObjInBasePose = new HTuple();
      hv_ObjInBasePose[2] = (hv_ObjInBasePose.TupleSelect(2))+hv_OsffetZ;


      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_Height/2, hv_Width/2, 1500, 
          0);
      }

      //*************************************************************************************************************
      //Obtengo la posicion del objetpo a insertar, relativo a la herramienta.
      //************************************************************************************************************
      //Get_Pose_Punto_Insercion (PoseForCalibrationPlate, ToolInCamPose, ToolInBasePose, SerialHandle, ObjInBasePoseOut)

      hv_Altura_Objetivo.Dispose();
      hv_Altura_Objetivo = 850;
      hv_Altura_Actual.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Altura_Actual = hv_PoseForCalibrationPlate.TupleSelect(
          2);
      }
      hv_DeltaAltura.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_DeltaAltura = hv_Altura_Actual-hv_Altura_Objetivo;
      }


      hv_ToolInBasePose_COPY_INP_TMP.Dispose();
      hv_ToolInCamPose_COPY_INP_TMP.Dispose();
      hv_CamInToolPose.Dispose();
      hv_ObjInCamPose.Dispose();
      hv_CamInBasePose.Dispose();
      hv_ObjInBasePose.Dispose();
      hv_OsffetZ.Dispose();
      hv_Altura_Objetivo.Dispose();
      hv_Altura_Actual.Dispose();
      hv_DeltaAltura.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_ToolInBasePose_COPY_INP_TMP.Dispose();
      hv_ToolInCamPose_COPY_INP_TMP.Dispose();
      hv_CamInToolPose.Dispose();
      hv_ObjInCamPose.Dispose();
      hv_CamInBasePose.Dispose();
      hv_ObjInBasePose.Dispose();
      hv_OsffetZ.Dispose();
      hv_Altura_Objetivo.Dispose();
      hv_Altura_Actual.Dispose();
      hv_DeltaAltura.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Close_All_Cameras (HTuple hv_AcqHandle_Cam_0, HTuple hv_Camera_1, HTuple hv_NxLib_1, 
      out HTuple hv_Exception)
  {



    // Local control variables 

    HTuple hv_Camera_1_New = new HTuple(), hv_NxLib_1_New = new HTuple();
    // Initialize local and output iconic variables 
    hv_Exception = new HTuple();
    try
    {
      try
      {
        Close_Camera_0(hv_AcqHandle_Cam_0);
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
      }

      try
      {
        hv_Camera_1_New.Dispose();hv_NxLib_1_New.Dispose();
        Close_Camera_1(hv_Camera_1, hv_NxLib_1, out hv_Camera_1_New, out hv_NxLib_1_New);
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
      }

      hv_Camera_1_New.Dispose();
      hv_NxLib_1_New.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Camera_1_New.Dispose();
      hv_NxLib_1_New.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Close_Camera_0 (HTuple hv_AcqHandle_Cam_0)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Process_Ok = new HTuple(), hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    try
    {


      hv_Process_Ok.Dispose();
      hv_Process_Ok = 0;
      try
      {

        HOperatorSet.CloseFramegrabber(hv_AcqHandle_Cam_0);
        hv_Process_Ok.Dispose();
        hv_Process_Ok = 1;
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
      }


      hv_Process_Ok.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Process_Ok.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Close_Camera_1 (HTuple hv_Camera_1, HTuple hv_NxLib_1, out HTuple hv_Camera_1_New, 
      out HTuple hv_NxLib_1_New)
  {



    // Local iconic variables 
    // Initialize local and output iconic variables 
    hv_Camera_1_New = new HTuple();
    hv_NxLib_1_New = new HTuple();
    HOperatorSet.CloseFramegrabber(hv_Camera_1);
    HOperatorSet.CloseFramegrabber(hv_NxLib_1);

    hv_Camera_1_New.Dispose();
    hv_Camera_1_New = new HTuple(hv_Camera_1);
    hv_NxLib_1_New.Dispose();
    hv_NxLib_1_New = new HTuple(hv_NxLib_1);


    return;
  }

  public void CmdDatosIs_Not_Zero (HTuple hv__EV1_O_CmdDatos, HTuple hv_Tag_Lectura, 
      HTuple hv_SerialHandle, HTuple hv_NxLib, HTuple hv_OPTICA, HTuple hv_ESTEREO, 
      HTuple hv_AcqHandle_Cam_0, HTuple hv_CamerasConection, HTuple hv_Camera_1, HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Vector_Estado_Fx, 
      HTuple hv_g_Error_CamaraOpt_Adq, HTuple hv_Camara_conexion_Est, out HTuple hv__EV1_O_CmdDatosOut, 
      out HTuple hv_NxLib_New, out HTuple hv_Camera_1_New, out HTuple hv_AcqHandle_Cam_0_New, 
      out HTupleVector/*{eTupleVector,Dim=2}*/ hvec_BDD_Data_New, out HTuple hv_Existe_BDD_New, 
      out HTuple hv_g_Error_CamaraOpt_Adq_New, out HTuple hv_Camara_conexion_Est_New)
  {



    // Local iconic variables 

    HObject ho_Image=null;

    // Local control variables 

    HTuple hv_Exception = new HTuple(), hv_Segundos = new HTuple();
    HTuple hv_Camera0_Parameters = new HTuple(), hv_Camera0_Pose = new HTuple();
    HTuple hv_Conexion_Camara_0 = new HTuple(), hv_CalTabFile = new HTuple();
    HTuple hv_Time = new HTuple(), hv_Gain = new HTuple();
    HTuple hv_NxLib_1 = new HTuple(), hv_Conexion_Camara = new HTuple();
    HTuple hv__EBD_Data_ON = new HTuple(), hv_EstadoBDD = new HTuple();
    HTuple hv_Estado = new HTuple(), hv_Vector_ID_Core_by_Segment_Pallet_1 = new HTuple();
    HTuple hv_Vector_ID_Core_by_Segment_Pallet_2 = new HTuple();
    HTuple hv_Vector_ID_Core_by_Segment_Pallet_3 = new HTuple();
    HTuple hv_Vector_ID_Core_by_Segment_Pallet_4 = new HTuple();
    HTuple hv_Vector_ID_Core_by_Segment_Pallet_5 = new HTuple();
    HTuple hv_Vector_ID_Core_by_Segment_Pallet_6 = new HTuple();
    HTuple hv_Cierra_Vision = new HTuple(), hv_asd = new HTuple();

    HTupleVector hvec_BDD_Data = new HTupleVector(2);
    HTuple   hv_AcqHandle_Cam_0_COPY_INP_TMP = new HTuple(hv_AcqHandle_Cam_0);
    HTuple   hv_Camera_1_COPY_INP_TMP = new HTuple(hv_Camera_1);
    HTuple   hv_CamerasConection_COPY_INP_TMP = new HTuple(hv_CamerasConection);
    HTuple   hv_NxLib_COPY_INP_TMP = new HTuple(hv_NxLib);
    HTuple   hv_g_Error_CamaraOpt_Adq_COPY_INP_TMP = new HTuple(hv_g_Error_CamaraOpt_Adq);

    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Image);
    hv__EV1_O_CmdDatosOut = new HTuple();
    hv_NxLib_New = new HTuple();
    hv_Camera_1_New = new HTuple();
    hv_AcqHandle_Cam_0_New = new HTuple();
    hvec_BDD_Data_New = new HTupleVector(2);
    hv_Existe_BDD_New = new HTuple();
    hv_g_Error_CamaraOpt_Adq_New = new HTuple();
    hv_Camara_conexion_Est_New = new HTuple();
    try
    {
      hv__EV1_O_CmdDatosOut.Dispose();
      hv__EV1_O_CmdDatosOut = new HTuple(hv__EV1_O_CmdDatos);
      try
      {

        hv_Existe_BDD_New.Dispose();
        hv_Existe_BDD_New = 0;
        while ((int)(new HTuple(hv__EV1_O_CmdDatosOut.TupleEqual(0))) != 0)
        {

          hv__EV1_O_CmdDatosOut.Dispose();
          Read_EthernetIP_Data(hv_Tag_Lectura, hv_SerialHandle, out hv__EV1_O_CmdDatosOut);


          //# ######################################################################################
          //# #################### BLOQUE Camera Conection             #############################       
          //#######################################################################################
          {
          HTuple ExpTmpOutVar_0;hv_Exception.Dispose();
          Is_Camera_Online(hv_NxLib_COPY_INP_TMP, hv_AcqHandle_Cam_0_COPY_INP_TMP, 
              hv_SerialHandle, hv_CamerasConection_COPY_INP_TMP, out ExpTmpOutVar_0, 
              out hv_Exception);
          hv_CamerasConection_COPY_INP_TMP.Dispose();
          hv_CamerasConection_COPY_INP_TMP = ExpTmpOutVar_0;
          }

          if ((int)((new HTuple(((hv_CamerasConection_COPY_INP_TMP.TupleSelect(hv_OPTICA))).TupleEqual(
              0))).TupleOr(new HTuple(hv_g_Error_CamaraOpt_Adq_COPY_INP_TMP.TupleEqual(
              1)))) != 0)
          {

            Send_Data_Info("-------------> Cerrando Camara Optica", hv_SerialHandle);

            try
            {
              Close_Camera_0(hv_AcqHandle_Cam_0_COPY_INP_TMP);
            }
            // catch (Exception) 
            catch (HalconException HDevExpDefaultException2)
            {
              HDevExpDefaultException2.ToHTuple(out hv_Exception);
            }
            try
            {
              Close_Camera_0(hv_AcqHandle_Cam_0_COPY_INP_TMP);
            }
            // catch (Exception) 
            catch (HalconException HDevExpDefaultException2)
            {
              HDevExpDefaultException2.ToHTuple(out hv_Exception);
            }

            hv_AcqHandle_Cam_0_COPY_INP_TMP.Dispose();
            hv_AcqHandle_Cam_0_COPY_INP_TMP = new HTuple();

            hv_Segundos.Dispose();
            hv_Segundos = 15;
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            Send_Data_Info(("-------------> Esperando "+hv_Segundos)+"[Seg] de reconexion", 
                hv_SerialHandle);
            }

            HOperatorSet.WaitSeconds(hv_Segundos);
            Send_Data_Info("-------------> Conectando....", hv_SerialHandle);

            hv_AcqHandle_Cam_0_COPY_INP_TMP.Dispose();hv_Camera0_Parameters.Dispose();hv_Camera0_Pose.Dispose();hv_Conexion_Camara_0.Dispose();hv_CalTabFile.Dispose();
            Set_Config_Cam(out hv_AcqHandle_Cam_0_COPY_INP_TMP, out hv_Camera0_Parameters, 
                out hv_Camera0_Pose, out hv_Conexion_Camara_0, out hv_CalTabFile);
            {
            HTuple ExpTmpOutVar_0;hv_Exception.Dispose();
            Is_Camera_Online(hv_NxLib_COPY_INP_TMP, hv_AcqHandle_Cam_0_COPY_INP_TMP, 
                hv_SerialHandle, hv_CamerasConection_COPY_INP_TMP, out ExpTmpOutVar_0, 
                out hv_Exception);
            hv_CamerasConection_COPY_INP_TMP.Dispose();
            hv_CamerasConection_COPY_INP_TMP = ExpTmpOutVar_0;
            }


            if ((int)(new HTuple(((hv_CamerasConection_COPY_INP_TMP.TupleSelect(hv_OPTICA))).TupleEqual(
                1))) != 0)
            {
              Send_Data_Info("------------->### EXITO ### Camara Optica Conectada <-------------", 
                  hv_SerialHandle);
              hv_AcqHandle_Cam_0_New.Dispose();
              hv_AcqHandle_Cam_0_New = new HTuple(hv_AcqHandle_Cam_0_COPY_INP_TMP);
              hv_Time.Dispose();
              hv_Time = 95000;
              hv_Gain.Dispose();
              hv_Gain = 50;
              Set_exposure_Time_cam_0(hv_AcqHandle_Cam_0_New, hv_Time, hv_Gain);
              ho_Image.Dispose();hv_g_Error_CamaraOpt_Adq_COPY_INP_TMP.Dispose();
              Get_Image(out ho_Image, hv_AcqHandle_Cam_0_New, out hv_g_Error_CamaraOpt_Adq_COPY_INP_TMP);
              HOperatorSet.DispObj(ho_Image, hv_ExpDefaultWinHandle);

              hv_g_Error_CamaraOpt_Adq_New.Dispose();
              hv_g_Error_CamaraOpt_Adq_New = new HTuple(hv_g_Error_CamaraOpt_Adq_COPY_INP_TMP);

            }
            else
            {
              Send_Data_Info("------------->### ERROR ### No se logro conectar camara optica. <-------------", 
                  hv_SerialHandle);

            }

          }

          hv_g_Error_CamaraOpt_Adq_New.Dispose();
          hv_g_Error_CamaraOpt_Adq_New = new HTuple(hv_g_Error_CamaraOpt_Adq_COPY_INP_TMP);




          if ((int)((new HTuple(((hv_CamerasConection_COPY_INP_TMP.TupleSelect(hv_ESTEREO))).TupleEqual(
              0))).TupleOr(hv_Camara_conexion_Est.TupleNot())) != 0)
          {


            Send_Data_Info("-------------> Cerrando Camara Estereo", hv_SerialHandle);

            try
            {
              {
              HTuple ExpTmpOutVar_0;hv_NxLib_1.Dispose();
              Close_Camera_1(hv_Camera_1_COPY_INP_TMP, hv_NxLib_COPY_INP_TMP, out ExpTmpOutVar_0, 
                  out hv_NxLib_1);
              hv_Camera_1_COPY_INP_TMP.Dispose();
              hv_Camera_1_COPY_INP_TMP = ExpTmpOutVar_0;
              }
            }
            // catch (Exception) 
            catch (HalconException HDevExpDefaultException2)
            {
              HDevExpDefaultException2.ToHTuple(out hv_Exception);
            }

            hv_Camera_1_COPY_INP_TMP.Dispose();
            hv_Camera_1_COPY_INP_TMP = new HTuple();
            hv_NxLib_COPY_INP_TMP.Dispose();
            hv_NxLib_COPY_INP_TMP = new HTuple();

            hv_Segundos.Dispose();
            hv_Segundos = 30;
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            Send_Data_Info(("-------------> Esperando "+hv_Segundos)+"[Seg] de reconexion", 
                hv_SerialHandle);
            }

            HOperatorSet.WaitSeconds(hv_Segundos);
            Send_Data_Info("-------------> Conectando....", hv_SerialHandle);

            hv_NxLib_COPY_INP_TMP.Dispose();hv_Camera_1_COPY_INP_TMP.Dispose();hv_Conexion_Camara.Dispose();
            Conectar_Ensenso_N35(24001, out hv_NxLib_COPY_INP_TMP, out hv_Camera_1_COPY_INP_TMP, 
                out hv_Conexion_Camara);

            {
            HTuple ExpTmpOutVar_0;hv_Exception.Dispose();
            Is_Camera_Online(hv_NxLib_COPY_INP_TMP, hv_AcqHandle_Cam_0_COPY_INP_TMP, 
                hv_SerialHandle, hv_CamerasConection_COPY_INP_TMP, out ExpTmpOutVar_0, 
                out hv_Exception);
            hv_CamerasConection_COPY_INP_TMP.Dispose();
            hv_CamerasConection_COPY_INP_TMP = ExpTmpOutVar_0;
            }


            if ((int)(new HTuple(((hv_CamerasConection_COPY_INP_TMP.TupleSelect(hv_ESTEREO))).TupleEqual(
                1))) != 0)
            {
              Send_Data_Info("------------->### EXITO ### Camara Estereo Conectada <-------------", 
                  hv_SerialHandle);
              hv_Camara_conexion_Est_New.Dispose();
              using (HDevDisposeHelper dh = new HDevDisposeHelper())
              {
              hv_Camara_conexion_Est_New = hv_Camara_conexion_Est.TupleNot()
                  ;
              }

            }
            else
            {
              Send_Data_Info("------------->### ERROR ### No se logro conectar camara Estereo. <-------------", 
                  hv_SerialHandle);


            }

            hv_NxLib_New.Dispose();
            hv_NxLib_New = new HTuple(hv_NxLib_COPY_INP_TMP);
            hv_Camera_1_New.Dispose();
            hv_Camera_1_New = new HTuple(hv_Camera_1_COPY_INP_TMP);

          }



          //**************************************************************************************
          //***************** si es 1, se carga la BDD de los pallets***********************
          //**    Read_EthernetIP_Data ('_EBD_I_CambioPattern', SerialHandle, _EV1_O_BDD)
          //**************************************************************************************

          hv__EBD_Data_ON.Dispose();
          Get_Puntero_Carga_BDD(hv_SerialHandle, out hv__EBD_Data_ON);


          hv_EstadoBDD.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_EstadoBDD = new HTuple(hv__EBD_Data_ON.TupleLength()
              );
          }

          if ((int)(hv_EstadoBDD) != 0)
          {

            if ((int)(new HTuple(hv__EBD_Data_ON.TupleEqual(1))) != 0)
            {
              hv_Estado.Dispose();
              hv_Estado = 2;
              hv_Vector_ID_Core_by_Segment_Pallet_1.Dispose();hv_Vector_ID_Core_by_Segment_Pallet_2.Dispose();hv_Vector_ID_Core_by_Segment_Pallet_3.Dispose();hv_Vector_ID_Core_by_Segment_Pallet_4.Dispose();hv_Vector_ID_Core_by_Segment_Pallet_5.Dispose();hv_Vector_ID_Core_by_Segment_Pallet_6.Dispose();
              BD_Dinamica(hv_SerialHandle, hv_Estado, hvec_Vector_Estado_Fx, out hv_Vector_ID_Core_by_Segment_Pallet_1, 
                  out hv_Vector_ID_Core_by_Segment_Pallet_2, out hv_Vector_ID_Core_by_Segment_Pallet_3, 
                  out hv_Vector_ID_Core_by_Segment_Pallet_4, out hv_Vector_ID_Core_by_Segment_Pallet_5, 
                  out hv_Vector_ID_Core_by_Segment_Pallet_6);
              hvec_BDD_Data.Dispose();
              using (HDevDisposeHelper dh = new HDevDisposeHelper())
              {
              hvec_BDD_Data = dh.Take((
                  dh.Add(new HTupleVector(2)).Insert(0,(dh.Add(new HTupleVector(1)).Insert(0,dh.Add(new HTupleVector(new HTuple())))))));
              }
              hvec_BDD_Data[0][0] = new HTupleVector(new HTuple("Pallet 1"));
              hvec_BDD_Data[0][1] = new HTupleVector(new HTuple("Pallet 2"));
              hvec_BDD_Data[0][2] = new HTupleVector(new HTuple("Pallet 3"));
              hvec_BDD_Data[0][3] = new HTupleVector(new HTuple("Pallet 4"));
              hvec_BDD_Data[0][2] = new HTupleVector(new HTuple("Pallet 5"));
              hvec_BDD_Data[0][3] = new HTupleVector(new HTuple("Pallet 6"));


              using (HDevDisposeHelper dh = new HDevDisposeHelper())
              {
              hvec_BDD_Data[1][0] = dh.Add(new HTupleVector(hv_Vector_ID_Core_by_Segment_Pallet_1));
              }
              using (HDevDisposeHelper dh = new HDevDisposeHelper())
              {
              hvec_BDD_Data[2][0] = dh.Add(new HTupleVector(hv_Vector_ID_Core_by_Segment_Pallet_2));
              }
              using (HDevDisposeHelper dh = new HDevDisposeHelper())
              {
              hvec_BDD_Data[3][0] = dh.Add(new HTupleVector(hv_Vector_ID_Core_by_Segment_Pallet_3));
              }
              using (HDevDisposeHelper dh = new HDevDisposeHelper())
              {
              hvec_BDD_Data[4][0] = dh.Add(new HTupleVector(hv_Vector_ID_Core_by_Segment_Pallet_4));
              }
              using (HDevDisposeHelper dh = new HDevDisposeHelper())
              {
              hvec_BDD_Data[5][0] = dh.Add(new HTupleVector(hv_Vector_ID_Core_by_Segment_Pallet_5));
              }
              using (HDevDisposeHelper dh = new HDevDisposeHelper())
              {
              hvec_BDD_Data[6][0] = dh.Add(new HTupleVector(hv_Vector_ID_Core_by_Segment_Pallet_6));
              }

              hvec_BDD_Data_New.Dispose();
              hvec_BDD_Data_New = new HTupleVector(hvec_BDD_Data);
              Set_Puntero_Carga_BDD(hv_SerialHandle);
              Send_Data_Info("-------------> ACTUALIZACION CORRECTA DE BDD PALLET <------- ", 
                  hv_SerialHandle);

              hv_Existe_BDD_New.Dispose();
              hv_Existe_BDD_New = 1;
            }
          }





          //**************************************************************************************
          //**   CERRAR SISTEMA
          //**************************************************************************************

          hv_Cierra_Vision.Dispose();
          Get_Puntero_Cerrar_SistemaV1(hv_SerialHandle, out hv_Cierra_Vision);

          if ((int)(new HTuple(hv_Cierra_Vision.TupleEqual("Cerrar_Programa"))) != 0)
          {

            ho_Image.Dispose();

            hv_AcqHandle_Cam_0_COPY_INP_TMP.Dispose();
            hv_Camera_1_COPY_INP_TMP.Dispose();
            hv_CamerasConection_COPY_INP_TMP.Dispose();
            hv_NxLib_COPY_INP_TMP.Dispose();
            hv_g_Error_CamaraOpt_Adq_COPY_INP_TMP.Dispose();
            hv_Exception.Dispose();
            hv_Segundos.Dispose();
            hv_Camera0_Parameters.Dispose();
            hv_Camera0_Pose.Dispose();
            hv_Conexion_Camara_0.Dispose();
            hv_CalTabFile.Dispose();
            hv_Time.Dispose();
            hv_Gain.Dispose();
            hv_NxLib_1.Dispose();
            hv_Conexion_Camara.Dispose();
            hv__EBD_Data_ON.Dispose();
            hv_EstadoBDD.Dispose();
            hv_Estado.Dispose();
            hv_Vector_ID_Core_by_Segment_Pallet_1.Dispose();
            hv_Vector_ID_Core_by_Segment_Pallet_2.Dispose();
            hv_Vector_ID_Core_by_Segment_Pallet_3.Dispose();
            hv_Vector_ID_Core_by_Segment_Pallet_4.Dispose();
            hv_Vector_ID_Core_by_Segment_Pallet_5.Dispose();
            hv_Vector_ID_Core_by_Segment_Pallet_6.Dispose();
            hv_Cierra_Vision.Dispose();
            hv_asd.Dispose();
            hvec_BDD_Data.Dispose();

            return;
          }



        }


      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);

        hv_asd.Dispose();
        hv_asd = 0;
      }

      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      Send_Data_Info("------------->Comando -----> "+hv__EV1_O_CmdDatosOut, hv_SerialHandle);
      }


      hv_AcqHandle_Cam_0_New.Dispose();
      hv_AcqHandle_Cam_0_New = new HTuple(hv_AcqHandle_Cam_0_COPY_INP_TMP);
      hv_NxLib_New.Dispose();
      hv_NxLib_New = new HTuple(hv_NxLib_COPY_INP_TMP);
      hv_Camera_1_New.Dispose();
      hv_Camera_1_New = new HTuple(hv_Camera_1_COPY_INP_TMP);

      ho_Image.Dispose();

      hv_AcqHandle_Cam_0_COPY_INP_TMP.Dispose();
      hv_Camera_1_COPY_INP_TMP.Dispose();
      hv_CamerasConection_COPY_INP_TMP.Dispose();
      hv_NxLib_COPY_INP_TMP.Dispose();
      hv_g_Error_CamaraOpt_Adq_COPY_INP_TMP.Dispose();
      hv_Exception.Dispose();
      hv_Segundos.Dispose();
      hv_Camera0_Parameters.Dispose();
      hv_Camera0_Pose.Dispose();
      hv_Conexion_Camara_0.Dispose();
      hv_CalTabFile.Dispose();
      hv_Time.Dispose();
      hv_Gain.Dispose();
      hv_NxLib_1.Dispose();
      hv_Conexion_Camara.Dispose();
      hv__EBD_Data_ON.Dispose();
      hv_EstadoBDD.Dispose();
      hv_Estado.Dispose();
      hv_Vector_ID_Core_by_Segment_Pallet_1.Dispose();
      hv_Vector_ID_Core_by_Segment_Pallet_2.Dispose();
      hv_Vector_ID_Core_by_Segment_Pallet_3.Dispose();
      hv_Vector_ID_Core_by_Segment_Pallet_4.Dispose();
      hv_Vector_ID_Core_by_Segment_Pallet_5.Dispose();
      hv_Vector_ID_Core_by_Segment_Pallet_6.Dispose();
      hv_Cierra_Vision.Dispose();
      hv_asd.Dispose();
      hvec_BDD_Data.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_Image.Dispose();

      hv_AcqHandle_Cam_0_COPY_INP_TMP.Dispose();
      hv_Camera_1_COPY_INP_TMP.Dispose();
      hv_CamerasConection_COPY_INP_TMP.Dispose();
      hv_NxLib_COPY_INP_TMP.Dispose();
      hv_g_Error_CamaraOpt_Adq_COPY_INP_TMP.Dispose();
      hv_Exception.Dispose();
      hv_Segundos.Dispose();
      hv_Camera0_Parameters.Dispose();
      hv_Camera0_Pose.Dispose();
      hv_Conexion_Camara_0.Dispose();
      hv_CalTabFile.Dispose();
      hv_Time.Dispose();
      hv_Gain.Dispose();
      hv_NxLib_1.Dispose();
      hv_Conexion_Camara.Dispose();
      hv__EBD_Data_ON.Dispose();
      hv_EstadoBDD.Dispose();
      hv_Estado.Dispose();
      hv_Vector_ID_Core_by_Segment_Pallet_1.Dispose();
      hv_Vector_ID_Core_by_Segment_Pallet_2.Dispose();
      hv_Vector_ID_Core_by_Segment_Pallet_3.Dispose();
      hv_Vector_ID_Core_by_Segment_Pallet_4.Dispose();
      hv_Vector_ID_Core_by_Segment_Pallet_5.Dispose();
      hv_Vector_ID_Core_by_Segment_Pallet_6.Dispose();
      hv_Cierra_Vision.Dispose();
      hv_asd.Dispose();
      hvec_BDD_Data.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void CmdDatosIsZero (HTuple hv_SerialHandle, out HTuple hv_Tag_Lectura, 
      out HTuple hv__EV1_O_CmdDatos)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Conteo_error = new HTuple();
    // Initialize local and output iconic variables 
    hv_Tag_Lectura = new HTuple();
    hv__EV1_O_CmdDatos = new HTuple();
    try
    {
      hv_Tag_Lectura.Dispose();
      hv_Tag_Lectura = "_EV01_O_CmdDatos";
      hv__EV1_O_CmdDatos.Dispose();
      Read_EthernetIP_Data(hv_Tag_Lectura, hv_SerialHandle, out hv__EV1_O_CmdDatos);
      hv_Conteo_error.Dispose();
      hv_Conteo_error = 0;
      while ((int)(new HTuple(hv__EV1_O_CmdDatos.TupleNotEqual(0))) != 0)
      {
        hv__EV1_O_CmdDatos.Dispose();
        Read_EthernetIP_Data(hv_Tag_Lectura, hv_SerialHandle, out hv__EV1_O_CmdDatos);
      }

      hv_Conteo_error.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Conteo_error.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Conectar_Ensenso_N35 (HTuple hv_Puerto, out HTuple hv_NxLib, out HTuple hv_Camera_1, 
      out HTuple hv_Conexion_Camara)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Conexion_Camara_1 = new HTuple();
    HTuple hv_CamaraDisponible = new HTuple(), hv_EstatusCamara = new HTuple();
    HTuple hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    hv_NxLib = new HTuple();
    hv_Camera_1 = new HTuple();
    hv_Conexion_Camara = new HTuple();
    try
    {
      //
      hv_Conexion_Camara_1.Dispose();
      hv_Conexion_Camara_1 = 0;
      try
      {
        //
        //info_framegrabber ('Ensenso-NxLib', 'device', Information, ValueList)
        //info_framegrabber ('Ensenso-NxLib', 'info_boards', Information, Estado)

        //Inicializacion de Arbol y camara estereo
        hv_NxLib.Dispose();
        HOperatorSet.OpenFramegrabber("Ensenso-NxLib", 0, 0, 0, 0, 0, 0, "default", 
            0, "Raw", "auto_grab_data=0", "false", "Item", "/", 0, 0, out hv_NxLib);



        hv_CamaraDisponible.Dispose();
        hv_CamaraDisponible = 0;
        while ((int)(hv_CamaraDisponible.TupleNot()) != 0)
        {

          hv_EstatusCamara.Dispose();
          HOperatorSet.GetFramegrabberParam(hv_NxLib, "//Cameras/BySerialNo/193216/Status/Available", 
              out hv_EstatusCamara);

          if ((int)(new HTuple(hv_EstatusCamara.TupleEqual("true"))) != 0)
          {
            hv_CamaraDisponible.Dispose();
            hv_CamaraDisponible = 1;
          }

        }





        hv_Camera_1.Dispose();
        HOperatorSet.OpenFramegrabber("Ensenso-NxLib", 0, 0, 0, 0, 0, 0, "default", 
            0, "Raw", "auto_grab_data=0", "false", "Stereo", "193216", 0, 0, out hv_Camera_1);

        //open_framegrabber ('Ensenso-NxLib', 0, 0, 0, 0, 0, 0, 'default', -1, 'default', -1, 'default', 'stereo', '193216', 0, 0, Camera_1)
        //

        //Abro puerto TCP del Arbol
        HOperatorSet.SetFramegrabberParam(hv_NxLib, "do_open_tcp_port", hv_Puerto);
        hv_Conexion_Camara.Dispose();
        hv_Conexion_Camara = 1;
        //

        hv_Conexion_Camara_1.Dispose();
        hv_CamaraDisponible.Dispose();
        hv_EstatusCamara.Dispose();
        hv_Exception.Dispose();

        return;
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_Conexion_Camara.Dispose();
        hv_Conexion_Camara = 0;
      }

      hv_Conexion_Camara_1.Dispose();
      hv_CamaraDisponible.Dispose();
      hv_EstatusCamara.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Conexion_Camara_1.Dispose();
      hv_CamaraDisponible.Dispose();
      hv_EstatusCamara.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Conectar_Ensenso_N35_COPY_1 (out HTuple hv_NxLib_1, out HTuple hv_Camera_1, 
      out HTuple hv_Conexion_Camara_1)
  {


    // Local iconic variables 

    // Local control variables 

    HTuple hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    hv_NxLib_1 = new HTuple();
    hv_Camera_1 = new HTuple();
    hv_Conexion_Camara_1 = new HTuple();
    try
    {
      //
      hv_Conexion_Camara_1.Dispose();
      hv_Conexion_Camara_1 = 0;
      try
      {
        //
        //
        //Inicializacion de Arbol y camara estereo
        hv_NxLib_1.Dispose();
        HOperatorSet.OpenFramegrabber("Ensenso-NxLib", 0, 0, 0, 0, 0, 0, "default", 
            0, "Raw", "auto_grab_data=0", "false", "Item", "/", 0, 0, out hv_NxLib_1);
        hv_Camera_1.Dispose();
        HOperatorSet.OpenFramegrabber("Ensenso-NxLib", 0, 0, 0, 0, 0, 0, "default", 
            0, "Raw", "auto_grab_data=0", "false", "Stereo", "", 0, 0, out hv_Camera_1);
        //
        //Abro puerto TCP del Arbol
        HOperatorSet.SetFramegrabberParam(hv_NxLib_1, "do_open_tcp_port", 24002);
        hv_Conexion_Camara_1.Dispose();
        hv_Conexion_Camara_1 = 1;
        //

        hv_Exception.Dispose();

        return;
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_Conexion_Camara_1.Dispose();
        hv_Conexion_Camara_1 = 0;
      }

      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Conectar_Ensenso_N35_COPY_2 (HTuple hv_Puerto, out HTuple hv_NxLib, 
      out HTuple hv_Camera_1, out HTuple hv_Conexion_Camara)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Conexion_Camara_1 = new HTuple();
    HTuple hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    hv_NxLib = new HTuple();
    hv_Camera_1 = new HTuple();
    hv_Conexion_Camara = new HTuple();
    try
    {

      hv_Conexion_Camara_1.Dispose();
      hv_Conexion_Camara_1 = 0;
      try
      {

        //info_framegrabber ('Ensenso-NxLib', 'device', Information, ValueList)
        //info_framegrabber ('Ensenso-NxLib', 'info_boards', Information, Estado)

        //Inicializacion de Arbol y camara estereo
        hv_NxLib.Dispose();
        HOperatorSet.OpenFramegrabber("Ensenso-NxLib", 0, 0, 0, 0, 0, 0, "default", 
            0, "Raw", "auto_grab_data=0", "false", "Item", "/", 0, 0, out hv_NxLib);
        hv_Camera_1.Dispose();
        HOperatorSet.OpenFramegrabber("Ensenso-NxLib", 0, 0, 0, 0, 0, 0, "default", 
            0, "Raw", "auto_grab_data=0", "false", "Stereo", "193216", 0, 0, out hv_Camera_1);

        //open_framegrabber ('Ensenso-NxLib', 0, 0, 0, 0, 0, 0, 'default', -1, 'default', -1, 'default', 'stereo', '193216', 0, 0, Camera_1)


        //Abro puerto TCP del Arbol
        HOperatorSet.SetFramegrabberParam(hv_NxLib, "do_open_tcp_port", hv_Puerto);
        hv_Conexion_Camara.Dispose();
        hv_Conexion_Camara = 1;


        hv_Conexion_Camara_1.Dispose();
        hv_Exception.Dispose();

        return;
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_Conexion_Camara.Dispose();
        hv_Conexion_Camara = 0;
      }

      hv_Conexion_Camara_1.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Conexion_Camara_1.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Conectar_Ensenso_N35_SendMsj (HTuple hv_Puerto, HTuple hv_SerialHandle, 
      out HTuple hv_NxLib, out HTuple hv_Camera_1, out HTuple hv_Conexion_Camara)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Conexion_Camara_1 = new HTuple();
    HTuple hv_CamaraDisponible = new HTuple(), hv_EstatusCamara = new HTuple();
    HTuple hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    hv_NxLib = new HTuple();
    hv_Camera_1 = new HTuple();
    hv_Conexion_Camara = new HTuple();
    try
    {
      //
      hv_Conexion_Camara_1.Dispose();
      hv_Conexion_Camara_1 = 0;
      try
      {
        //
        //info_framegrabber ('Ensenso-NxLib', 'device', Information, ValueList)
        //info_framegrabber ('Ensenso-NxLib', 'info_boards', Information, Estado)

        //Inicializacion de Arbol y camara estereo
        hv_NxLib.Dispose();
        HOperatorSet.OpenFramegrabber("Ensenso-NxLib", 0, 0, 0, 0, 0, 0, "default", 
            0, "Raw", "auto_grab_data=0", "false", "Item", "/", 0, 0, out hv_NxLib);



        hv_CamaraDisponible.Dispose();
        hv_CamaraDisponible = 0;
        while ((int)(hv_CamaraDisponible.TupleNot()) != 0)
        {

          hv_EstatusCamara.Dispose();
          HOperatorSet.GetFramegrabberParam(hv_NxLib, "//Cameras/BySerialNo/193216/Status/Available", 
              out hv_EstatusCamara);

          if ((int)(new HTuple(hv_EstatusCamara.TupleEqual("true"))) != 0)
          {
            hv_CamaraDisponible.Dispose();
            hv_CamaraDisponible = 1;
            Send_Data_Info("-> Camara Estereo R1 NO Disponible...Esperando Disponibilidad <-", 
                hv_SerialHandle);
          }

        }

        Send_Data_Info("-> Camara Estereo R1 Conectada <-", hv_SerialHandle);



        hv_Camera_1.Dispose();
        HOperatorSet.OpenFramegrabber("Ensenso-NxLib", 0, 0, 0, 0, 0, 0, "default", 
            0, "Raw", "auto_grab_data=0", "false", "Stereo", "193216", 0, 0, out hv_Camera_1);

        //open_framegrabber ('Ensenso-NxLib', 0, 0, 0, 0, 0, 0, 'default', -1, 'default', -1, 'default', 'stereo', '193216', 0, 0, Camera_1)
        //

        //Abro puerto TCP del Arbol
        HOperatorSet.SetFramegrabberParam(hv_NxLib, "do_open_tcp_port", hv_Puerto);
        hv_Conexion_Camara.Dispose();
        hv_Conexion_Camara = 1;
        //

        hv_Conexion_Camara_1.Dispose();
        hv_CamaraDisponible.Dispose();
        hv_EstatusCamara.Dispose();
        hv_Exception.Dispose();

        return;
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_Conexion_Camara.Dispose();
        hv_Conexion_Camara = 0;
      }

      hv_Conexion_Camara_1.Dispose();
      hv_CamaraDisponible.Dispose();
      hv_EstatusCamara.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Conexion_Camara_1.Dispose();
      hv_CamaraDisponible.Dispose();
      hv_EstatusCamara.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Config_Parametros_Cam_R1 (HTuple hv_NxLib, HTuple hv_Camera, HTuple hv_NumberOfDisparities, 
      HTuple hv_MinimumDisparity, HTuple hv_Projector, HTuple hv_FrontLigth, HTuple hv_AutoExposure, 
      HTuple hv_AutoGain, HTuple hv_Gain, HTuple hv_Exposure, HTuple hv_FlexView, 
      out HTuple hv_TempCam)
  {


    // Initialize local and output iconic variables 
    hv_TempCam = new HTuple();
    //
    //Configuracion de parametros.
    HOperatorSet.SetFramegrabberParam(hv_Camera, "grab_data_items", ((new HTuple("Images/Rectified/Left")).TupleConcat(
        "Images/Raw/Left")).TupleConcat("Images/PointMap"));
    //
    //
    //Parametros para habilitar funciones directas de la camara
    HOperatorSet.SetFramegrabberParam(hv_NxLib, "Execute/Parameters/InitialTrigger", 
        "All");
    //Proyector random de texturas
    HOperatorSet.SetFramegrabberParam(hv_NxLib, "//Cameras/BySerialNo/193216/Parameters/Capture/Projector", 
        hv_Projector);
    //Iluminacion
    HOperatorSet.SetFramegrabberParam(hv_NxLib, "//Cameras/BySerialNo/193216/Parameters/Capture/FrontLight", 
        hv_FrontLigth);
    //
    HOperatorSet.SetFramegrabberParam(hv_NxLib, "//Cameras/BySerialNo/193216/Parameters/Capture/AutoExposure", 
        hv_AutoExposure);
    HOperatorSet.SetFramegrabberParam(hv_NxLib, "//Cameras/BySerialNo/193216/Parameters/Capture/AutoGain", 
        hv_AutoGain);


    HOperatorSet.SetFramegrabberParam(hv_NxLib, "//Cameras/BySerialNo/193216/Parameters/Capture/Exposure", 
        hv_Exposure);
    HOperatorSet.SetFramegrabberParam(hv_NxLib, "//Cameras/BySerialNo/193216/Parameters/Capture/Gain", 
        hv_Gain);

    //******************************************************************************************************

    HOperatorSet.SetFramegrabberParam(hv_NxLib, "//Cameras/BySerialNo/193216/Parameters/DisparityMap/StereoMatching/NumberOfDisparities", 
        hv_NumberOfDisparities);
    HOperatorSet.SetFramegrabberParam(hv_NxLib, "//Cameras/BySerialNo/193216/Parameters/DisparityMap/StereoMatching/MinimumDisparity", 
        hv_MinimumDisparity);
    //N° de imagenes de captura
    HOperatorSet.SetFramegrabberParam(hv_NxLib, "//Cameras/BySerialNo/193216/Parameters/Capture/FlexView", 
        hv_FlexView);
    //Temperatura de camara
    hv_TempCam.Dispose();
    HOperatorSet.GetFramegrabberParam(hv_NxLib, "//Cameras/BySerialNo/193216/Sensor/Temperature", 
        out hv_TempCam);
    //


    return;
  }

  public void Config_Parametros_Cam_R1_COPY_1 (HTuple hv_NxLib, HTuple hv_Camera, 
      HTuple hv_NumberOfDisparities, HTuple hv_MinimumDisparity, HTuple hv_Projector, 
      HTuple hv_FrontLigth, HTuple hv_AutoExposure, HTuple hv_AutoGain, HTuple hv_Gain, 
      HTuple hv_Exposure, HTuple hv_FlexView, out HTuple hv_TempCam)
  {


    // Initialize local and output iconic variables 
    hv_TempCam = new HTuple();

    //Configuracion de parametros.
    HOperatorSet.SetFramegrabberParam(hv_Camera, "grab_data_items", ((new HTuple("Images/Rectified/Left")).TupleConcat(
        "Images/Raw/Left")).TupleConcat("Images/PointMap"));


    //Parametros para habilitar funciones directas de la camara
    HOperatorSet.SetFramegrabberParam(hv_NxLib, "Execute/Parameters/InitialTrigger", 
        "All");
    //Proyector random de texturas
    HOperatorSet.SetFramegrabberParam(hv_NxLib, "//Cameras/BySerialNo/193216/Parameters/Capture/Projector", 
        hv_Projector);
    //Iluminacion
    HOperatorSet.SetFramegrabberParam(hv_NxLib, "//Cameras/BySerialNo/193216/Parameters/Capture/FrontLight", 
        hv_FrontLigth);

    HOperatorSet.SetFramegrabberParam(hv_NxLib, "//Cameras/BySerialNo/193216/Parameters/Capture/AutoExposure", 
        hv_AutoExposure);
    HOperatorSet.SetFramegrabberParam(hv_NxLib, "//Cameras/BySerialNo/193216/Parameters/Capture/AutoGain", 
        hv_AutoGain);


    HOperatorSet.SetFramegrabberParam(hv_NxLib, "//Cameras/BySerialNo/193216/Parameters/Capture/Exposure", 
        hv_Exposure);
    HOperatorSet.SetFramegrabberParam(hv_NxLib, "//Cameras/BySerialNo/193216/Parameters/Capture/Gain", 
        hv_Gain);

    //******************************************************************************************************

    HOperatorSet.SetFramegrabberParam(hv_NxLib, "//Cameras/BySerialNo/193216/Parameters/DisparityMap/StereoMatching/NumberOfDisparities", 
        hv_NumberOfDisparities);
    HOperatorSet.SetFramegrabberParam(hv_NxLib, "//Cameras/BySerialNo/193216/Parameters/DisparityMap/StereoMatching/MinimumDisparity", 
        hv_MinimumDisparity);
    //N° de imagenes de captura
    HOperatorSet.SetFramegrabberParam(hv_NxLib, "//Cameras/BySerialNo/193216/Parameters/Capture/FlexView", 
        hv_FlexView);
    //Temperatura de camara
    hv_TempCam.Dispose();
    HOperatorSet.GetFramegrabberParam(hv_NxLib, "//Cameras/BySerialNo/193216/Sensor/Temperature", 
        out hv_TempCam);



    return;
  }

  public void Config_Parametros_Cam_R2 (HTuple hv_Camera, HTuple hv_NxLib, HTuple hv_NumberOfDisparities, 
      HTuple hv_MinimumDisparity, HTuple hv_Proyector, HTuple hv_Iluminacion, out HTuple hv_TempCam)
  {


    // Initialize local and output iconic variables 
    hv_TempCam = new HTuple();
    //
    //Configuracion de parametros.
    HOperatorSet.SetFramegrabberParam(hv_Camera, "grab_data_items", (((new HTuple("Images/Rectified/Left")).TupleConcat(
        "Images/Rectified/Right")).TupleConcat("Images/PointMap")).TupleConcat("Images/DisparityMap"));
    //
    //
    //Parametros para habilitar funciones directas de la camara
    //set_framegrabber_param (NxLib, 'Execute/Parameters/InitialTrigger', 'All')
    //Proyector random de texturas
    HOperatorSet.SetFramegrabberParam(hv_NxLib, "//Cameras/BySerialNo/193216/Parameters/Capture/Projector", 
        "false");
    //Iluminacion
    HOperatorSet.SetFramegrabberParam(hv_NxLib, "//Cameras/BySerialNo/193216/Parameters/Capture/FrontLight", 
        "false");
    //
    HOperatorSet.SetFramegrabberParam(hv_NxLib, "//Cameras/BySerialNo/193216/Parameters/Capture/AutoExposure", 
        "true");
    HOperatorSet.SetFramegrabberParam(hv_NxLib, "//Cameras/BySerialNo/193216/Parameters/Capture/AutoGain", 
        "true");
    //
    //
    //******************************************************************************************************

    HOperatorSet.SetFramegrabberParam(hv_NxLib, "//Cameras/BySerialNo/193216/Parameters/DisparityMap/StereoMatching/NumberOfDisparities", 
        hv_NumberOfDisparities);
    HOperatorSet.SetFramegrabberParam(hv_NxLib, "//Cameras/BySerialNo/193216/Parameters/DisparityMap/StereoMatching/MinimumDisparity", 
        hv_MinimumDisparity);
    //
    //
    //
    //N° de imagenes de captura
    HOperatorSet.SetFramegrabberParam(hv_NxLib, "//Cameras/BySerialNo/193216/Parameters/Capture/FlexView", 
        1);
    //
    //Temperatura de camara
    hv_TempCam.Dispose();
    HOperatorSet.GetFramegrabberParam(hv_NxLib, "//Cameras/BySerialNo/193216/Sensor/Temperature", 
        out hv_TempCam);
    //


    return;
  }

  // Short Description: Convert a tuple to a readable string. 
  public void convert_tuple_to_string (HTuple hv_Tuple, out HTuple hv_TupleAsString)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Strings = new HTuple(), hv_IsString = new HTuple();
    HTuple hv_Idx = new HTuple();
    // Initialize local and output iconic variables 
    hv_TupleAsString = new HTuple();
    try
    {
      if ((int)(new HTuple(hv_Tuple.TupleEqual(new HTuple()))) != 0)
      {
        hv_TupleAsString.Dispose();
        hv_TupleAsString = "[]";
      }
      else
      {
        hv_Strings.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Strings = ""+hv_Tuple;
        }
        //Escape strings with '
        hv_IsString.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_IsString = hv_Tuple.TupleIsStringElem()
            ;
        }
        if ((int)(new HTuple(((hv_IsString.TupleSum())).TupleGreater(0))) != 0)
        {
          hv_Idx.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Idx = hv_IsString.TupleFind(
              1);
          }
          if (hv_Strings == null)
            hv_Strings = new HTuple();
          hv_Strings[hv_Idx] = ("'"+(hv_Strings.TupleSelect(hv_Idx)))+"'";
        }
        //Concat to a long tuple
        hv_TupleAsString.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_TupleAsString = (("["+((((""+(hv_Strings.TupleSelectRange(
            0,(new HTuple(hv_Strings.TupleLength()))-2)))+new HTuple(", "))).TupleSum()
            ))+(hv_Strings.TupleSelect((new HTuple(hv_Strings.TupleLength()))-1)))+"]";
        }
      }

      hv_Strings.Dispose();
      hv_IsString.Dispose();
      hv_Idx.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Strings.Dispose();
      hv_IsString.Dispose();
      hv_Idx.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void FALSEO_ADQ_FOTO (out HObject ho_ReferenciaEsquina, out HObject ho_ObjectSelected, 
      out HObject ho_X, out HObject ho_Y, out HObject ho_Z, HTuple hv_SerialHandle, 
      out HTuple hv_ObjectModel3D1)
  {


    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ReferenciaEsquina);
    HOperatorSet.GenEmptyObj(out ho_ObjectSelected);
    HOperatorSet.GenEmptyObj(out ho_X);
    HOperatorSet.GenEmptyObj(out ho_Y);
    HOperatorSet.GenEmptyObj(out ho_Z);
    hv_ObjectModel3D1 = new HTuple();



    ho_ReferenciaEsquina.Dispose();
    HOperatorSet.ReadObject(out ho_ReferenciaEsquina, "D:/AI/Vision Artificial/4.-MAGOTTEAUX/18.- Imagenes_IngSoft/0 Ensenso/Pallet_011.hobj");

    ho_ObjectSelected.Dispose();
    HOperatorSet.SelectObj(ho_ReferenciaEsquina, out ho_ObjectSelected, 3);
    ho_X.Dispose();ho_Y.Dispose();ho_Z.Dispose();
    HOperatorSet.Decompose3(ho_ObjectSelected, out ho_X, out ho_Y, out ho_Z);
    hv_ObjectModel3D1.Dispose();
    HOperatorSet.XyzToObjectModel3d(ho_X, ho_Y, ho_Z, out hv_ObjectModel3D1);










    return;
  }

  public void Find_Dinamic_Core (HTuple hv_N_Model_To_Find, HTuple hv_SFM_Core_Pallet, 
      HTuple hv_ObjectModel3D_Core_Pallet, HTuple hv_Escena3D_RAW, HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Vector_Estado_Fx, 
      HTuple hv_SerialHandle, HTuple hv_Modelo_3D_ROI_ThresEdges, HTuple hv_WindowHandle, 
      HTuple hv_Parametros_Visualizacion, HTuple hv_Valores_Visualizacion, HTuple hv_Ang_Obj, 
      HTuple hv_Vector_ID_Core_by_Segment_Pallet, out HTuple hv_MyPose, out HTuple hv_Score_Refinado, 
      out HTuple hv_Posicion3D_Objeto_REFIN, out HTuple hv_Obj_Detectado)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Angulos = new HTuple(), hv_Puntaje = new HTuple();
    HTuple hv_IdexAng = new HTuple(), hv_DeltaAngular = new HTuple();
    HTuple hv_matchinToFind = new HTuple(), hv_Porcentaje = new HTuple();
    HTuple hv_Estado = new HTuple(), hv_MinScore = new HTuple();
    HTuple hv_KeyPointDin = new HTuple(), hv_DinamicSampling = new HTuple();
    HTuple hv_Sampling_Find = new HTuple(), hv_Keypoint = new HTuple();
    HTuple hv_N_matches = new HTuple(), hv_SFM = new HTuple();
    HTuple hv_Mod_3D_Objeto = new HTuple(), hv_Escena3D = new HTuple();
    HTuple hv_PoseOut1 = new HTuple(), hv_ScoreMLS = new HTuple();
    HTuple hv_PoseView = new HTuple(), hv_LimiteAngular = new HTuple();
    HTuple hv_Index = new HTuple(), hv_Dist_Angular = new HTuple();
    HTuple hv_Dist_Angular_abs = new HTuple(), hv_AuxMenor = new HTuple();
    HTuple hv_flag = new HTuple();

    HTupleVector hvec_Poses_Finded = new HTupleVector(2);
    HTuple   hv_Parametros_Visualizacion_COPY_INP_TMP = new HTuple(hv_Parametros_Visualizacion);
    HTuple   hv_Valores_Visualizacion_COPY_INP_TMP = new HTuple(hv_Valores_Visualizacion);
    HTuple   hv_WindowHandle_COPY_INP_TMP = new HTuple(hv_WindowHandle);

    // Initialize local and output iconic variables 
    hv_MyPose = new HTuple();
    hv_Score_Refinado = new HTuple();
    hv_Posicion3D_Objeto_REFIN = new HTuple();
    hv_Obj_Detectado = new HTuple();
    try
    {
      hv_Angulos.Dispose();
      hv_Angulos = new HTuple();
      hv_Puntaje.Dispose();
      hv_Puntaje = new HTuple();

      hv_IdexAng.Dispose();
      hv_IdexAng = 0;
      hvec_Poses_Finded.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Poses_Finded = dh.Take((
          dh.Add(new HTupleVector(2)).Insert(0,(dh.Add(new HTupleVector(1)).Insert(0,dh.Add(new HTupleVector(new HTuple())))))));
      }
      //***********************************************
      //Delta Angular -> +- 20°
      //***********************************************
      hv_DeltaAngular.Dispose();
      hv_DeltaAngular = 10;

      hv_matchinToFind.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_matchinToFind = 10.0/10.0;
      }

      //***********************************************************
      //Por receta se debera agregar el % de deteccion  de cada Core
      //***********************************************************


      hv_Porcentaje.Dispose();
      Get_PorcentajeBusqueda(hv_Vector_ID_Core_by_Segment_Pallet, hv_SerialHandle, 
          out hv_Porcentaje);

      //*-> solo para pruebas     Porcentaje:=0.001
      if ((int)(new HTuple(hv_Porcentaje.TupleEqual(new HTuple()))) != 0)
      {

        hv_Obj_Detectado.Dispose();
        hv_Obj_Detectado = 0;
        //# ### Envio data de estado ########################
        hv_Estado.Dispose();
        hv_Estado = 22;
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        Send_Data_Info(new HTuple("### ERROR ###. No existe Porcentaje de deteccion en tabla, para core -> ")+hv_Vector_ID_Core_by_Segment_Pallet, 
            hv_SerialHandle);
        }

        hv_Parametros_Visualizacion_COPY_INP_TMP.Dispose();
        hv_Valores_Visualizacion_COPY_INP_TMP.Dispose();
        hv_WindowHandle_COPY_INP_TMP.Dispose();
        hv_Angulos.Dispose();
        hv_Puntaje.Dispose();
        hv_IdexAng.Dispose();
        hv_DeltaAngular.Dispose();
        hv_matchinToFind.Dispose();
        hv_Porcentaje.Dispose();
        hv_Estado.Dispose();
        hv_MinScore.Dispose();
        hv_KeyPointDin.Dispose();
        hv_DinamicSampling.Dispose();
        hv_Sampling_Find.Dispose();
        hv_Keypoint.Dispose();
        hv_N_matches.Dispose();
        hv_SFM.Dispose();
        hv_Mod_3D_Objeto.Dispose();
        hv_Escena3D.Dispose();
        hv_PoseOut1.Dispose();
        hv_ScoreMLS.Dispose();
        hv_PoseView.Dispose();
        hv_LimiteAngular.Dispose();
        hv_Index.Dispose();
        hv_Dist_Angular.Dispose();
        hv_Dist_Angular_abs.Dispose();
        hv_AuxMenor.Dispose();
        hv_flag.Dispose();
        hvec_Poses_Finded.Dispose();

        return;
        //# ################################################# 



      }


      hv_MinScore.Dispose();
      hv_MinScore = new HTuple(hv_Porcentaje);


      //************************************************************
      //Modificacion de Puntaje por tipo de Core
      //****************+********************************************
      //Get_Core_To_Use_Main (SerialHandle, Cod_Core_ToUse, FXcheck)
      //*************************************************************
      //  AGREGAR PARA CORES RAROS
      //***************************************************************
      //Get_Core_ToUse_From_BDD_Fast (SerialHandle, Cod_Core_ToUse, Pallet_To_Scan, Segmento_To_Scan, PitutoExist, FXcheck, Diametro)

      HTuple end_val46 = hv_matchinToFind;
      HTuple step_val46 = 0.1;
      for (hv_KeyPointDin=0.1; hv_KeyPointDin.Continue(end_val46, step_val46); hv_KeyPointDin = hv_KeyPointDin.TupleAdd(step_val46))
      {


        //***************************
        //Parametros de control
        //***************************
        hv_DinamicSampling.Dispose();
        hv_DinamicSampling = 0.0095;
        hv_Sampling_Find.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Sampling_Find = ((1.0-hv_KeyPointDin)*hv_DinamicSampling)+0.05;
        }
        hv_Keypoint.Dispose();
        hv_Keypoint = new HTuple(hv_KeyPointDin);

        hv_N_matches.Dispose();
        hv_N_matches = new HTuple(hv_N_Model_To_Find);
        hv_SFM.Dispose();
        hv_SFM = new HTuple(hv_SFM_Core_Pallet);
        hv_Mod_3D_Objeto.Dispose();
        hv_Mod_3D_Objeto = new HTuple(hv_ObjectModel3D_Core_Pallet);
        hv_Escena3D.Dispose();
        hv_Escena3D = new HTuple(hv_Escena3D_RAW);
        //***************************
        //Si lo que busco es una Manga, Busco el objeto por Bordes
        //***************************
        //Visualizar_3D ([ObjectModel3D_Core_Pallet,Modelo_3D_ROI_ThresEdges,Escena3D_RAW], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], 1, [], [], [], WindowHandle, PoseOut1)
        //***************************

        hv_MyPose.Dispose();hv_ScoreMLS.Dispose();hv_Obj_Detectado.Dispose();
        Find_Dinamic_Entity_3D(hv_N_matches, hv_SFM, hv_Escena3D, hv_Sampling_Find, 
            hv_Keypoint, hv_MinScore, hv_Mod_3D_Objeto, hv_Modelo_3D_ROI_ThresEdges, 
            out hv_MyPose, out hv_ScoreMLS, out hv_Obj_Detectado);

        if ((int)(hv_Obj_Detectado) != 0)
        {
          HOperatorSet.ClearWindow(hv_ExpDefaultWinHandle);
          //dev_get_window(...);
          if (hv_Angulos == null)
            hv_Angulos = new HTuple();
          hv_Angulos[hv_IdexAng] = hv_MyPose.TupleSelect(5);
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hvec_Poses_Finded[hv_IdexAng][0] = dh.Add(new HTupleVector(hv_MyPose));
          }
          if (hv_Angulos == null)
            hv_Angulos = new HTuple();
          hv_Angulos[hv_IdexAng] = hv_MyPose.TupleSelect(5);
          if (hv_Puntaje == null)
            hv_Puntaje = new HTuple();
          hv_Puntaje[hv_IdexAng] = hv_ScoreMLS;
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_IdexAng = hv_IdexAng+1;
          hv_IdexAng.Dispose();
          hv_IdexAng = ExpTmpLocalVar_IdexAng;
          }
          }


          hv_Posicion3D_Objeto_REFIN.Dispose();
          HOperatorSet.RigidTransObjectModel3d(hv_Mod_3D_Objeto, hv_MyPose, out hv_Posicion3D_Objeto_REFIN);


          hv_Parametros_Visualizacion_COPY_INP_TMP.Dispose();
          hv_Parametros_Visualizacion_COPY_INP_TMP = new HTuple();
          hv_Parametros_Visualizacion_COPY_INP_TMP[0] = "disp_pose";
          hv_Parametros_Visualizacion_COPY_INP_TMP[1] = "color_attrib";
          hv_Parametros_Visualizacion_COPY_INP_TMP[2] = "lut";
          hv_Parametros_Visualizacion_COPY_INP_TMP[3] = "point_size";
          hv_Valores_Visualizacion_COPY_INP_TMP.Dispose();
          hv_Valores_Visualizacion_COPY_INP_TMP = new HTuple();
          hv_Valores_Visualizacion_COPY_INP_TMP[0] = "true";
          hv_Valores_Visualizacion_COPY_INP_TMP[1] = "coord_z";
          hv_Valores_Visualizacion_COPY_INP_TMP[2] = "rainbow";
          hv_Valores_Visualizacion_COPY_INP_TMP[3] = 1;
          hv_PoseView.Dispose();
          HOperatorSet.CreatePose(150, -90, 1590, 352, 0, 0, "Rp+T", "gba", "point", 
              out hv_PoseView);
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          HOperatorSet.DispObjectModel3d(hv_ExpDefaultWinHandle, hv_Posicion3D_Objeto_REFIN.TupleConcat(
              hv_Escena3D_RAW), new HTuple(), hv_PoseView, hv_Parametros_Visualizacion_COPY_INP_TMP.TupleConcat(
              "alpha"), hv_Valores_Visualizacion_COPY_INP_TMP.TupleConcat(0.5));
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          HOperatorSet.DispText(hv_ExpDefaultWinHandle, "Puntaje - > "+hv_ScoreMLS, 
              "window", "top", "left", "black", new HTuple(), new HTuple());
          }
          //dev_disp_text (MyPose, 'window', 20, 400, 'black', [], [])


          //Visualizar_3D ([Posicion3D_Objeto_REFIN,Escena3D_RAW], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], 1, [], [], [], WindowHandle, PoseOut1)



        }
        //# ###############################


      }


      if ((int)(new HTuple((new HTuple(hv_Angulos.TupleLength())).TupleGreater(0))) != 0)
      {


        //Convierto a angulos negativos
        //Sobre el limite convierto a Neg
        //**********************************
        hv_LimiteAngular.Dispose();
        hv_LimiteAngular = 200;
        //**********************************
        for (hv_Index=0; (int)hv_Index<=(int)((new HTuple(hv_Angulos.TupleLength()
            ))-1); hv_Index = (int)hv_Index + 1)
        {
          if ((int)(new HTuple(((hv_Angulos.TupleSelect(hv_Index))).TupleGreater(
              hv_LimiteAngular))) != 0)
          {
            if (hv_Angulos == null)
              hv_Angulos = new HTuple();
            hv_Angulos[hv_Index] = (hv_Angulos.TupleSelect(hv_Index))-360;
          }
        }

        hv_Dist_Angular.Dispose();
        hv_Dist_Angular = new HTuple();
        for (hv_Index=0; (int)hv_Index<=(int)((new HTuple(hv_Angulos.TupleLength()
            ))-1); hv_Index = (int)hv_Index + 1)
        {
          if (hv_Dist_Angular == null)
            hv_Dist_Angular = new HTuple();
          hv_Dist_Angular[hv_Index] = hv_Ang_Obj-(hv_Angulos.TupleSelect(hv_Index));
        }

        hv_Dist_Angular_abs.Dispose();
        HOperatorSet.TupleAbs(hv_Dist_Angular, out hv_Dist_Angular_abs);

        hv_AuxMenor.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_AuxMenor = hv_Dist_Angular_abs.TupleSelect(
            0);
        }
        hv_flag.Dispose();
        hv_flag = 0;
        for (hv_Index=0; (int)hv_Index<=(int)((new HTuple(hv_Dist_Angular_abs.TupleLength()
            ))-1); hv_Index = (int)hv_Index + 1)
        {
          if ((int)(new HTuple(hv_AuxMenor.TupleGreater(hv_Dist_Angular_abs.TupleSelect(
              hv_Index)))) != 0)
          {
            hv_AuxMenor.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_AuxMenor = hv_Dist_Angular_abs.TupleSelect(
                hv_Index);
            }
            hv_flag.Dispose();
            hv_flag = new HTuple(hv_Index);
          }
        }


        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_PoseOut1.Dispose();
        Visualizar_3D(hv_Posicion3D_Objeto_REFIN.TupleConcat(hv_Escena3D_RAW), hv_Parametros_Visualizacion_COPY_INP_TMP.TupleConcat(
            "alpha"), hv_Valores_Visualizacion_COPY_INP_TMP.TupleConcat(0.5), 1, 
            new HTuple(), new HTuple(), new HTuple(), hv_WindowHandle_COPY_INP_TMP, 
            out hv_PoseOut1);
        }


        //********************
        //MAX PUNTAJE
        //********************
        //tuple_max (Puntaje, MaxPuntaje)

        //for Index1 := 0 to |Puntaje|-1 by 1

          //if (MaxPuntaje=Puntaje[Index1])
            //flag := Index1
          //endif

        //endfor

        if ((int)(new HTuple(hv_AuxMenor.TupleLessEqual(hv_DeltaAngular))) != 0)
        {

          hv_Obj_Detectado.Dispose();
          hv_Obj_Detectado = 1;
          hv_MyPose.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_MyPose = new HTuple(hvec_Poses_Finded[hv_flag][0].T);
          }


          //if (CoresRaros)
            //MyPose[3] := 0
            //MyPose[4] := 0
          //endif


          hv_Score_Refinado.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Score_Refinado = hv_Puntaje.TupleSelect(
              hv_flag);
          }

          hv_PoseView.Dispose();
          HOperatorSet.CreatePose(150, -90, 1590, 352, 0, 0, "Rp+T", "gba", "point", 
              out hv_PoseView);
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          HOperatorSet.DispObjectModel3d(hv_ExpDefaultWinHandle, hv_Posicion3D_Objeto_REFIN.TupleConcat(
              hv_Escena3D_RAW), new HTuple(), hv_PoseView, hv_Parametros_Visualizacion_COPY_INP_TMP.TupleConcat(
              "alpha"), hv_Valores_Visualizacion_COPY_INP_TMP.TupleConcat(0.5));
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          HOperatorSet.DispText(hv_ExpDefaultWinHandle, "Puntaje - > "+hv_Score_Refinado, 
              "window", "top", "left", "black", new HTuple(), new HTuple());
          }


          //Visualizar_3D ([Posicion3D_Objeto_REFIN,Escena3D_RAW], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], 1, [], [], [], WindowHandle, PoseOut1)


          hv_Parametros_Visualizacion_COPY_INP_TMP.Dispose();
          hv_Valores_Visualizacion_COPY_INP_TMP.Dispose();
          hv_WindowHandle_COPY_INP_TMP.Dispose();
          hv_Angulos.Dispose();
          hv_Puntaje.Dispose();
          hv_IdexAng.Dispose();
          hv_DeltaAngular.Dispose();
          hv_matchinToFind.Dispose();
          hv_Porcentaje.Dispose();
          hv_Estado.Dispose();
          hv_MinScore.Dispose();
          hv_KeyPointDin.Dispose();
          hv_DinamicSampling.Dispose();
          hv_Sampling_Find.Dispose();
          hv_Keypoint.Dispose();
          hv_N_matches.Dispose();
          hv_SFM.Dispose();
          hv_Mod_3D_Objeto.Dispose();
          hv_Escena3D.Dispose();
          hv_PoseOut1.Dispose();
          hv_ScoreMLS.Dispose();
          hv_PoseView.Dispose();
          hv_LimiteAngular.Dispose();
          hv_Index.Dispose();
          hv_Dist_Angular.Dispose();
          hv_Dist_Angular_abs.Dispose();
          hv_AuxMenor.Dispose();
          hv_flag.Dispose();
          hvec_Poses_Finded.Dispose();

          return;
        }
        else
        {
          hv_Obj_Detectado.Dispose();
          hv_Obj_Detectado = 0;
          //# ### Envio data de estado ########################
          hv_Estado.Dispose();
          hv_Estado = 22;
          Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
          //# ################################################# 


        }
      }
      else
      {

        hv_Obj_Detectado.Dispose();
        hv_Obj_Detectado = 0;
        //# ### Envio data de estado ########################
        hv_Estado.Dispose();
        hv_Estado = 22;
        Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
        //# ################################################# 

      }

      //# ###################################################################### 








      hv_Parametros_Visualizacion_COPY_INP_TMP.Dispose();
      hv_Valores_Visualizacion_COPY_INP_TMP.Dispose();
      hv_WindowHandle_COPY_INP_TMP.Dispose();
      hv_Angulos.Dispose();
      hv_Puntaje.Dispose();
      hv_IdexAng.Dispose();
      hv_DeltaAngular.Dispose();
      hv_matchinToFind.Dispose();
      hv_Porcentaje.Dispose();
      hv_Estado.Dispose();
      hv_MinScore.Dispose();
      hv_KeyPointDin.Dispose();
      hv_DinamicSampling.Dispose();
      hv_Sampling_Find.Dispose();
      hv_Keypoint.Dispose();
      hv_N_matches.Dispose();
      hv_SFM.Dispose();
      hv_Mod_3D_Objeto.Dispose();
      hv_Escena3D.Dispose();
      hv_PoseOut1.Dispose();
      hv_ScoreMLS.Dispose();
      hv_PoseView.Dispose();
      hv_LimiteAngular.Dispose();
      hv_Index.Dispose();
      hv_Dist_Angular.Dispose();
      hv_Dist_Angular_abs.Dispose();
      hv_AuxMenor.Dispose();
      hv_flag.Dispose();
      hvec_Poses_Finded.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Parametros_Visualizacion_COPY_INP_TMP.Dispose();
      hv_Valores_Visualizacion_COPY_INP_TMP.Dispose();
      hv_WindowHandle_COPY_INP_TMP.Dispose();
      hv_Angulos.Dispose();
      hv_Puntaje.Dispose();
      hv_IdexAng.Dispose();
      hv_DeltaAngular.Dispose();
      hv_matchinToFind.Dispose();
      hv_Porcentaje.Dispose();
      hv_Estado.Dispose();
      hv_MinScore.Dispose();
      hv_KeyPointDin.Dispose();
      hv_DinamicSampling.Dispose();
      hv_Sampling_Find.Dispose();
      hv_Keypoint.Dispose();
      hv_N_matches.Dispose();
      hv_SFM.Dispose();
      hv_Mod_3D_Objeto.Dispose();
      hv_Escena3D.Dispose();
      hv_PoseOut1.Dispose();
      hv_ScoreMLS.Dispose();
      hv_PoseView.Dispose();
      hv_LimiteAngular.Dispose();
      hv_Index.Dispose();
      hv_Dist_Angular.Dispose();
      hv_Dist_Angular_abs.Dispose();
      hv_AuxMenor.Dispose();
      hv_flag.Dispose();
      hvec_Poses_Finded.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Find_Dinamic_Entity_3D (HTuple hv_N_matches, HTuple hv_SFM, HTuple hv_Modelo_imagen_3d, 
      HTuple hv_Sampling_Find, HTuple hv_Keypoint, HTuple hv_MinScore, HTuple hv_Perno_Ref_Cam0, 
      HTuple hv_Modelo_3D_ROI_ThresEdges, out HTuple hv_PoseMLS, out HTuple hv_ScoreMLS, 
      out HTuple hv_Estado_Funcion)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_GenParamName = new HTuple(), hv_GenParamValue = new HTuple();
    HTuple hv_SurfaceMatchingResultID1 = new HTuple(), hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    hv_PoseMLS = new HTuple();
    hv_ScoreMLS = new HTuple();
    hv_Estado_Funcion = new HTuple();
    try
    {
      //
      hv_Estado_Funcion.Dispose();
      hv_Estado_Funcion = 1;
      try
      {
        //* --> descomentar EN c#  Fx_Aux.DataLogError = "Buscando Objeto";
        //
        //***************************************
        //1.Parametros de control
        //***************************************
        hv_GenParamName.Dispose();
        hv_GenParamName = new HTuple();
        hv_GenParamName[0] = "num_matches";
        hv_GenParamName[1] = "scene_normal_computation";
        hv_GenParamName[2] = "pose_ref_scoring_dist_rel";
        hv_GenParamName[3] = "score_type";
        hv_GenParamName[4] = "3d_edges";
        hv_GenParamName[5] = "3d_edge_min_amplitude_abs";
        hv_GenParamName[6] = "max_gap";
        hv_GenParamName[7] = "viewpoint";
        hv_GenParamValue.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_GenParamValue = new HTuple();
        hv_GenParamValue = hv_GenParamValue.TupleConcat(hv_N_matches);
        hv_GenParamValue = hv_GenParamValue.TupleConcat("mls", 0.01, "model_point_fraction");
        hv_GenParamValue = hv_GenParamValue.TupleConcat(hv_Modelo_3D_ROI_ThresEdges);
        hv_GenParamValue = hv_GenParamValue.TupleConcat(13.7313, 30, "0 0 0");
        }
        //GenParamName := ['num_matches','scene_normal_computation','score_type'          ,'3d_edges'              , '3d_edge_min_amplitude_abs','max_gap','viewpoint']
        //GenParamValue := [N_matches   ,          'mls'        ,'model_point_fraction', Modelo_3D_ROI_ThresEdges, 13.7313                   ,  30     , '0 0 0']

        //
        //***************************************
        //2.Busqueda de entidad
        //***************************************
        hv_PoseMLS.Dispose();hv_ScoreMLS.Dispose();hv_SurfaceMatchingResultID1.Dispose();
        HOperatorSet.FindSurfaceModel(hv_SFM, hv_Modelo_imagen_3d, hv_Sampling_Find, 
            hv_Keypoint, hv_MinScore, "true", hv_GenParamName, hv_GenParamValue, 
            out hv_PoseMLS, out hv_ScoreMLS, out hv_SurfaceMatchingResultID1);
        //***************************************
        if ((int)(new HTuple(hv_PoseMLS.TupleLength())) != 0)
        {
          //* --> descomentar EN c#  Fx_Aux.DataLogError = "Objeto encontrado con una PROBABILIDAD de " + hv_ScoreMLS*100.ToString() ;
          hv_Estado_Funcion.Dispose();
          hv_Estado_Funcion = 1;

          hv_GenParamName.Dispose();
          hv_GenParamValue.Dispose();
          hv_SurfaceMatchingResultID1.Dispose();
          hv_Exception.Dispose();

          return;

        }

        hv_Estado_Funcion.Dispose();
        hv_Estado_Funcion = 0;
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);

        hv_Estado_Funcion.Dispose();
        hv_Estado_Funcion = 0;
        //* --> descomentar EN c#  Fx_Aux.DataLogError = Fx_Aux.ErrorCatch(HDevExpDefaultException1);
        //
      }
      //
      //

      hv_GenParamName.Dispose();
      hv_GenParamValue.Dispose();
      hv_SurfaceMatchingResultID1.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_GenParamName.Dispose();
      hv_GenParamValue.Dispose();
      hv_SurfaceMatchingResultID1.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Find_Dinamic_Entity_3D_COPY_1 (HTuple hv_N_matches, HTuple hv_SFM, 
      HTuple hv_Modelo_imagen_3d, HTuple hv_Sampling_Find, HTuple hv_Keypoint, HTuple hv_MinScore, 
      HTuple hv_Perno_Ref_Cam0, HTuple hv_Modelo_3D_ROI_ThresEdges, out HTuple hv_PoseMLS, 
      out HTuple hv_ScoreMLS, out HTuple hv_Estado_Funcion)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_GenParamName = new HTuple(), hv_GenParamValue = new HTuple();
    HTuple hv_SurfaceMatchingResultID1 = new HTuple(), hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    hv_PoseMLS = new HTuple();
    hv_ScoreMLS = new HTuple();
    hv_Estado_Funcion = new HTuple();
    try
    {

      hv_Estado_Funcion.Dispose();
      hv_Estado_Funcion = 1;
      try
      {
        //* --> descomentar EN c#  Fx_Aux.DataLogError = "Buscando Objeto";

        //***************************************
        //1.Parametros de control
        //***************************************
        hv_GenParamName.Dispose();
        hv_GenParamName = new HTuple();
        hv_GenParamName[0] = "num_matches";
        hv_GenParamName[1] = "scene_normal_computation";
        hv_GenParamName[2] = "pose_ref_scoring_dist_rel";
        hv_GenParamName[3] = "score_type";
        hv_GenParamName[4] = "3d_edges";
        hv_GenParamName[5] = "3d_edge_min_amplitude_abs";
        hv_GenParamName[6] = "max_gap";
        hv_GenParamName[7] = "viewpoint";
        hv_GenParamValue.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_GenParamValue = new HTuple();
        hv_GenParamValue = hv_GenParamValue.TupleConcat(hv_N_matches);
        hv_GenParamValue = hv_GenParamValue.TupleConcat("mls", 0.01, "model_point_fraction");
        hv_GenParamValue = hv_GenParamValue.TupleConcat(hv_Modelo_3D_ROI_ThresEdges);
        hv_GenParamValue = hv_GenParamValue.TupleConcat(13.7313, 30, "0 0 0");
        }
        hv_GenParamName.Dispose();
        hv_GenParamName = new HTuple();
        hv_GenParamName[0] = "num_matches";
        hv_GenParamName[1] = "scene_normal_computation";
        hv_GenParamName[2] = "score_type";
        hv_GenParamName[3] = "3d_edges";
        hv_GenParamName[4] = "3d_edge_min_amplitude_abs";
        hv_GenParamName[5] = "max_gap";
        hv_GenParamName[6] = "viewpoint";
        hv_GenParamValue.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_GenParamValue = new HTuple();
        hv_GenParamValue = hv_GenParamValue.TupleConcat(hv_N_matches);
        hv_GenParamValue = hv_GenParamValue.TupleConcat(new HTuple("mls", "model_point_fraction"));
        hv_GenParamValue = hv_GenParamValue.TupleConcat(hv_Modelo_3D_ROI_ThresEdges);
        hv_GenParamValue = hv_GenParamValue.TupleConcat(13.7313, 30, "0 0 0");
        }


        //***************************************
        //2.Busqueda de entidad
        //***************************************
        hv_PoseMLS.Dispose();hv_ScoreMLS.Dispose();hv_SurfaceMatchingResultID1.Dispose();
        HOperatorSet.FindSurfaceModel(hv_SFM, hv_Modelo_imagen_3d, hv_Sampling_Find, 
            hv_Keypoint, hv_MinScore, "true", hv_GenParamName, hv_GenParamValue, 
            out hv_PoseMLS, out hv_ScoreMLS, out hv_SurfaceMatchingResultID1);
        //***************************************
        if ((int)(new HTuple(hv_PoseMLS.TupleLength())) != 0)
        {
          //* --> descomentar EN c#  Fx_Aux.DataLogError = "Objeto encontrado con una PROBABILIDAD de " + hv_ScoreMLS*100.ToString() ;
          hv_Estado_Funcion.Dispose();
          hv_Estado_Funcion = 1;

          hv_GenParamName.Dispose();
          hv_GenParamValue.Dispose();
          hv_SurfaceMatchingResultID1.Dispose();
          hv_Exception.Dispose();

          return;

        }

        hv_Estado_Funcion.Dispose();
        hv_Estado_Funcion = 0;
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);

        hv_Estado_Funcion.Dispose();
        hv_Estado_Funcion = 0;
        //* --> descomentar EN c#  Fx_Aux.DataLogError = Fx_Aux.ErrorCatch(HDevExpDefaultException1);

      }



      hv_GenParamName.Dispose();
      hv_GenParamValue.Dispose();
      hv_SurfaceMatchingResultID1.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_GenParamName.Dispose();
      hv_GenParamValue.Dispose();
      hv_SurfaceMatchingResultID1.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Find_Dinamic_Entity_3D_COPY_2 (HTuple hv_N_matches, HTuple hv_SFM, 
      HTuple hv_Modelo_imagen_3d, HTuple hv_Sampling_Find, HTuple hv_Keypoint, HTuple hv_MinScore, 
      HTuple hv_Perno_Ref_Cam0, HTuple hv_Modelo_3D_ROI_ThresEdges, out HTuple hv_PoseMLS, 
      out HTuple hv_ScoreMLS, out HTuple hv_Estado_Funcion)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_GenParamName = new HTuple(), hv_GenParamValue = new HTuple();
    HTuple hv_SurfaceMatchingResultID1 = new HTuple(), hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    hv_PoseMLS = new HTuple();
    hv_ScoreMLS = new HTuple();
    hv_Estado_Funcion = new HTuple();
    try
    {

      hv_Estado_Funcion.Dispose();
      hv_Estado_Funcion = 1;
      try
      {
        //* --> descomentar EN c#  Fx_Aux.DataLogError = "Buscando Objeto";

        //***************************************
        //1.Parametros de control
        //***************************************
        hv_GenParamName.Dispose();
        hv_GenParamName = new HTuple();
        hv_GenParamName[0] = "num_matches";
        hv_GenParamName[1] = "scene_normal_computation";
        hv_GenParamName[2] = "pose_ref_scoring_dist_rel";
        hv_GenParamName[3] = "score_type";
        hv_GenParamName[4] = "3d_edges";
        hv_GenParamName[5] = "3d_edge_min_amplitude_abs";
        hv_GenParamName[6] = "max_gap";
        hv_GenParamName[7] = "viewpoint";
        hv_GenParamValue.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_GenParamValue = new HTuple();
        hv_GenParamValue = hv_GenParamValue.TupleConcat(hv_N_matches);
        hv_GenParamValue = hv_GenParamValue.TupleConcat("mls", 0.01, "model_point_fraction");
        hv_GenParamValue = hv_GenParamValue.TupleConcat(hv_Modelo_3D_ROI_ThresEdges);
        hv_GenParamValue = hv_GenParamValue.TupleConcat(13.7313, 30, "0 0 0");
        }
        //GenParamName := ['num_matches','scene_normal_computation','score_type'          ,'3d_edges'              , '3d_edge_min_amplitude_abs','max_gap','viewpoint']
        //GenParamValue := [N_matches   ,          'mls'        ,'model_point_fraction', Modelo_3D_ROI_ThresEdges, 13.7313                   ,  30     , '0 0 0']


        //***************************************
        //2.Busqueda de entidad
        //***************************************
        hv_PoseMLS.Dispose();hv_ScoreMLS.Dispose();hv_SurfaceMatchingResultID1.Dispose();
        HOperatorSet.FindSurfaceModel(hv_SFM, hv_Modelo_imagen_3d, hv_Sampling_Find, 
            hv_Keypoint, hv_MinScore, "true", hv_GenParamName, hv_GenParamValue, 
            out hv_PoseMLS, out hv_ScoreMLS, out hv_SurfaceMatchingResultID1);
        //***************************************
        if ((int)(new HTuple(hv_PoseMLS.TupleLength())) != 0)
        {
          //* --> descomentar EN c#  Fx_Aux.DataLogError = "Objeto encontrado con una PROBABILIDAD de " + hv_ScoreMLS*100.ToString() ;
          hv_Estado_Funcion.Dispose();
          hv_Estado_Funcion = 1;

          hv_GenParamName.Dispose();
          hv_GenParamValue.Dispose();
          hv_SurfaceMatchingResultID1.Dispose();
          hv_Exception.Dispose();

          return;

        }

        hv_Estado_Funcion.Dispose();
        hv_Estado_Funcion = 0;
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);

        hv_Estado_Funcion.Dispose();
        hv_Estado_Funcion = 0;
        //* --> descomentar EN c#  Fx_Aux.DataLogError = Fx_Aux.ErrorCatch(HDevExpDefaultException1);

      }



      hv_GenParamName.Dispose();
      hv_GenParamValue.Dispose();
      hv_SurfaceMatchingResultID1.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_GenParamName.Dispose();
      hv_GenParamValue.Dispose();
      hv_SurfaceMatchingResultID1.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Find_Entity_3D (HTuple hv_N_matches, HTuple hv_SFM, HTuple hv_Modelo_imagen_3d, 
      HTuple hv_Sampling_Find, HTuple hv_Keypoint, HTuple hv_MinScore, HTuple hv_Perno_Ref_Cam0, 
      HTuple hv_Modelo_3D_ROI_ThresEdges, out HTuple hv_PoseMLS, out HTuple hv_ScoreMLS, 
      out HTuple hv_PoseREFIN, out HTuple hv_ScoreREFIN, out HTuple hv_SurfaceMatchingResultID1, 
      out HTuple hv_ObjectModel3DResultMLS, out HTuple hv_ObjectModel3DResultMLS_REFIN, 
      out HTuple hv_Estado_Funcion)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_GenParamName = new HTuple(), hv_GenParamValue = new HTuple();
    HTuple hv_SurfaceMatchingResultIDPose = new HTuple(), hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    hv_PoseMLS = new HTuple();
    hv_ScoreMLS = new HTuple();
    hv_PoseREFIN = new HTuple();
    hv_ScoreREFIN = new HTuple();
    hv_SurfaceMatchingResultID1 = new HTuple();
    hv_ObjectModel3DResultMLS = new HTuple();
    hv_ObjectModel3DResultMLS_REFIN = new HTuple();
    hv_Estado_Funcion = new HTuple();
    try
    {
      //
      hv_Estado_Funcion.Dispose();
      hv_Estado_Funcion = 1;
      try
      {
        //* --> descomentar EN c#  Fx_Aux.DataLogError = "Buscando Objeto";
        //
        //***************************************
        //1.Parametros de control
        //***************************************
        hv_GenParamName.Dispose();
        hv_GenParamName = new HTuple();
        hv_GenParamName[0] = "num_matches";
        hv_GenParamName[1] = "scene_normal_computation";
        hv_GenParamName[2] = "pose_ref_scoring_dist_rel";
        hv_GenParamName[3] = "score_type";
        hv_GenParamName[4] = "3d_edges";
        hv_GenParamName[5] = "3d_edge_min_amplitude_abs";
        hv_GenParamName[6] = "max_gap";
        hv_GenParamName[7] = "viewpoint";
        hv_GenParamValue.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_GenParamValue = new HTuple();
        hv_GenParamValue = hv_GenParamValue.TupleConcat(hv_N_matches);
        hv_GenParamValue = hv_GenParamValue.TupleConcat("mls", 0.01, "model_point_fraction");
        hv_GenParamValue = hv_GenParamValue.TupleConcat(hv_Modelo_3D_ROI_ThresEdges);
        hv_GenParamValue = hv_GenParamValue.TupleConcat(13.7313, 30, "0 0 0");
        }


        //
        //***************************************
        //2.Busqueda de entidad
        //***************************************
        hv_PoseMLS.Dispose();hv_ScoreMLS.Dispose();hv_SurfaceMatchingResultID1.Dispose();
        HOperatorSet.FindSurfaceModel(hv_SFM, hv_Modelo_imagen_3d, hv_Sampling_Find, 
            hv_Keypoint, hv_MinScore, "true", hv_GenParamName, hv_GenParamValue, 
            out hv_PoseMLS, out hv_ScoreMLS, out hv_SurfaceMatchingResultID1);
        //***************************************
        if ((int)(new HTuple(hv_PoseMLS.TupleLength())) != 0)
        {


          //3.Refinar busqueda
          //***************************************
          hv_PoseREFIN.Dispose();hv_ScoreREFIN.Dispose();hv_SurfaceMatchingResultIDPose.Dispose();
          HOperatorSet.RefineSurfaceModelPose(hv_SFM, hv_Modelo_imagen_3d, hv_PoseMLS, 
              0, "false", "pose_ref_sub_sampling", 2, out hv_PoseREFIN, out hv_ScoreREFIN, 
              out hv_SurfaceMatchingResultIDPose);
          //***************************************
          //4.Translacion de objeto
          //***************************************

          hv_ObjectModel3DResultMLS.Dispose();
          HOperatorSet.RigidTransObjectModel3d(hv_Perno_Ref_Cam0, hv_PoseMLS, out hv_ObjectModel3DResultMLS);
          hv_ObjectModel3DResultMLS_REFIN.Dispose();
          HOperatorSet.RigidTransObjectModel3d(hv_Perno_Ref_Cam0, hv_PoseREFIN, out hv_ObjectModel3DResultMLS_REFIN);
          //* --> descomentar EN c#  Fx_Aux.DataLogError = "Objeto encontrado con una PROBABILIDAD de " + hv_ScoreMLS*100.ToString() ;
          hv_Estado_Funcion.Dispose();
          hv_Estado_Funcion = 1;

          hv_GenParamName.Dispose();
          hv_GenParamValue.Dispose();
          hv_SurfaceMatchingResultIDPose.Dispose();
          hv_Exception.Dispose();

          return;

        }

        hv_Estado_Funcion.Dispose();
        hv_Estado_Funcion = 0;
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);

        hv_Estado_Funcion.Dispose();
        hv_Estado_Funcion = 0;
        //* --> descomentar EN c#  Fx_Aux.DataLogError = Fx_Aux.ErrorCatch(HDevExpDefaultException1);
        //
      }
      //
      //

      hv_GenParamName.Dispose();
      hv_GenParamValue.Dispose();
      hv_SurfaceMatchingResultIDPose.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_GenParamName.Dispose();
      hv_GenParamValue.Dispose();
      hv_SurfaceMatchingResultIDPose.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Find_Entity_3D_COPY_1 (HTuple hv_N_matches, HTuple hv_SFM, HTuple hv_Modelo_imagen_3d, 
      HTuple hv_Sampling_Find, HTuple hv_Keypoint, HTuple hv_MinScore, HTuple hv_Perno_Ref_Cam0, 
      HTuple hv_Modelo_3D_ROI_ThresEdges, out HTuple hv_PoseMLS, out HTuple hv_ScoreMLS, 
      out HTuple hv_PoseREFIN, out HTuple hv_ScoreREFIN, out HTuple hv_SurfaceMatchingResultID1, 
      out HTuple hv_ObjectModel3DResultMLS, out HTuple hv_ObjectModel3DResultMLS_REFIN, 
      out HTuple hv_Estado_Funcion)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_GenParamName = new HTuple(), hv_GenParamValue = new HTuple();
    HTuple hv_SurfaceMatchingResultIDPose = new HTuple(), hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    hv_PoseMLS = new HTuple();
    hv_ScoreMLS = new HTuple();
    hv_PoseREFIN = new HTuple();
    hv_ScoreREFIN = new HTuple();
    hv_SurfaceMatchingResultID1 = new HTuple();
    hv_ObjectModel3DResultMLS = new HTuple();
    hv_ObjectModel3DResultMLS_REFIN = new HTuple();
    hv_Estado_Funcion = new HTuple();
    try
    {

      hv_Estado_Funcion.Dispose();
      hv_Estado_Funcion = 1;
      try
      {
        //* --> descomentar EN c#  Fx_Aux.DataLogError = "Buscando Objeto";

        //***************************************
        //1.Parametros de control
        //***************************************
        hv_GenParamName.Dispose();
        hv_GenParamName = new HTuple();
        hv_GenParamName[0] = "num_matches";
        hv_GenParamName[1] = "scene_normal_computation";
        hv_GenParamName[2] = "pose_ref_scoring_dist_rel";
        hv_GenParamName[3] = "score_type";
        hv_GenParamName[4] = "3d_edges";
        hv_GenParamValue.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_GenParamValue = new HTuple();
        hv_GenParamValue = hv_GenParamValue.TupleConcat(hv_N_matches);
        hv_GenParamValue = hv_GenParamValue.TupleConcat("mls", 0.01, "model_point_fraction");
        hv_GenParamValue = hv_GenParamValue.TupleConcat(hv_Modelo_3D_ROI_ThresEdges);
        }




        //***************************************
        //2.Busqueda de entidad
        //***************************************
        hv_PoseMLS.Dispose();hv_ScoreMLS.Dispose();hv_SurfaceMatchingResultID1.Dispose();
        HOperatorSet.FindSurfaceModel(hv_SFM, hv_Modelo_imagen_3d, hv_Sampling_Find, 
            hv_Keypoint, hv_MinScore, "true", hv_GenParamName, hv_GenParamValue, 
            out hv_PoseMLS, out hv_ScoreMLS, out hv_SurfaceMatchingResultID1);
        //***************************************
        if ((int)(new HTuple(hv_PoseMLS.TupleLength())) != 0)
        {


          //3.Refinar busqueda
          //***************************************
          hv_PoseREFIN.Dispose();hv_ScoreREFIN.Dispose();hv_SurfaceMatchingResultIDPose.Dispose();
          HOperatorSet.RefineSurfaceModelPose(hv_SFM, hv_Modelo_imagen_3d, hv_PoseMLS, 
              0, "false", "pose_ref_sub_sampling", 2, out hv_PoseREFIN, out hv_ScoreREFIN, 
              out hv_SurfaceMatchingResultIDPose);
          //***************************************
          //4.Translacion de objeto
          //***************************************

          hv_ObjectModel3DResultMLS.Dispose();
          HOperatorSet.RigidTransObjectModel3d(hv_Perno_Ref_Cam0, hv_PoseMLS, out hv_ObjectModel3DResultMLS);
          hv_ObjectModel3DResultMLS_REFIN.Dispose();
          HOperatorSet.RigidTransObjectModel3d(hv_Perno_Ref_Cam0, hv_PoseREFIN, out hv_ObjectModel3DResultMLS_REFIN);
          //* --> descomentar EN c#  Fx_Aux.DataLogError = "Objeto encontrado con una PROBABILIDAD de " + hv_ScoreMLS*100.ToString() ;
          hv_Estado_Funcion.Dispose();
          hv_Estado_Funcion = 1;

          hv_GenParamName.Dispose();
          hv_GenParamValue.Dispose();
          hv_SurfaceMatchingResultIDPose.Dispose();
          hv_Exception.Dispose();

          return;

        }

        hv_Estado_Funcion.Dispose();
        hv_Estado_Funcion = 0;
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);

        hv_Estado_Funcion.Dispose();
        hv_Estado_Funcion = 0;
        //* --> descomentar EN c#  Fx_Aux.DataLogError = Fx_Aux.ErrorCatch(HDevExpDefaultException1);

      }



      hv_GenParamName.Dispose();
      hv_GenParamValue.Dispose();
      hv_SurfaceMatchingResultIDPose.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_GenParamName.Dispose();
      hv_GenParamValue.Dispose();
      hv_SurfaceMatchingResultIDPose.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Find_Entity_3D_Image (HObject ho_Z, HTuple hv_N_matches, HTuple hv_SFM, 
      HTuple hv_Modelo_imagen_3d, HTuple hv_Sampling_Find, HTuple hv_Keypoint, HTuple hv_MinScore, 
      HTuple hv_Perno_Ref_Cam0, HTuple hv_Modelo_3D_ROI_ThresEdges, out HTuple hv_PoseMLS, 
      out HTuple hv_ScoreMLS, out HTuple hv_PoseREFIN, out HTuple hv_ScoreREFIN, out HTuple hv_SurfaceMatchingResultID1, 
      out HTuple hv_ObjectModel3DResultMLS, out HTuple hv_ObjectModel3DResultMLS_REFIN, 
      out HTuple hv_Estado_Funcion)
  {




    // Stack for temporary objects 
    HObject[] OTemp = new HObject[20];

    // Local iconic variables 

    HObject ho_Image=null;

    // Local control variables 

    HTuple hv_GenParamName = new HTuple(), hv_GenParamValue = new HTuple();
    HTuple hv_CameraParam = new HTuple(), hv_CameraPose = new HTuple();
    HTuple hv_SurfaceMatchingResultIDPose = new HTuple(), hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Image);
    hv_PoseMLS = new HTuple();
    hv_ScoreMLS = new HTuple();
    hv_PoseREFIN = new HTuple();
    hv_ScoreREFIN = new HTuple();
    hv_SurfaceMatchingResultID1 = new HTuple();
    hv_ObjectModel3DResultMLS = new HTuple();
    hv_ObjectModel3DResultMLS_REFIN = new HTuple();
    hv_Estado_Funcion = new HTuple();
    try
    {
      //
      hv_Estado_Funcion.Dispose();
      hv_Estado_Funcion = 1;
      try
      {
        //* --> descomentar EN c#  Fx_Aux.DataLogError = "Buscando Objeto";
        //
        //***************************************
        //1.Parametros de control
        //***************************************
        hv_GenParamName.Dispose();
        hv_GenParamName = new HTuple();
        hv_GenParamName[0] = "num_matches";
        hv_GenParamName[1] = "scene_normal_computation";
        hv_GenParamName[2] = "pose_ref_scoring_dist_rel";
        hv_GenParamName[3] = "score_type";
        hv_GenParamName[4] = "3d_edges";
        hv_GenParamValue.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_GenParamValue = new HTuple();
        hv_GenParamValue = hv_GenParamValue.TupleConcat(hv_N_matches);
        hv_GenParamValue = hv_GenParamValue.TupleConcat("mls", 0.01, "model_point_fraction");
        hv_GenParamValue = hv_GenParamValue.TupleConcat(hv_Modelo_3D_ROI_ThresEdges);
        }


        ho_Image.Dispose();
        HOperatorSet.ReadImage(out ho_Image, "D:/20-Imagenes Produccion/GRISES/ModelImageGRIS1.hobj");
        {
        HObject ExpTmpOutVar_0;
        HOperatorSet.SelectObj(ho_Image, out ExpTmpOutVar_0, 1);
        ho_Image.Dispose();
        ho_Image = ExpTmpOutVar_0;
        }


        {
        HObject ExpTmpOutVar_0;
        HOperatorSet.ReduceDomain(ho_Image, ho_Z, out ExpTmpOutVar_0);
        ho_Image.Dispose();
        ho_Image = ExpTmpOutVar_0;
        }

        //***************************************
        //2.Busqueda de entidad
        //***************************************
        hv_CameraParam.Dispose();
        HOperatorSet.ReadCamPar("C:/Users/Usuario/Dropbox (MIRS)/1.-Servidor Desarrollo Software/7.-Magotteaux/7.-HandEye/1.- Ensenso R1/CamParamBase", 
            out hv_CameraParam);
        HOperatorSet.SetSurfaceModelParam(hv_SFM, "camera_parameter", hv_CameraParam);
        hv_CameraPose.Dispose();
        HOperatorSet.CreatePose(0, 0, 0, 0, 0, 0, "Rp+T", "gba", "point", out hv_CameraPose);
        HOperatorSet.SetSurfaceModelParam(hv_SFM, "camera_pose", hv_CameraPose);


        hv_PoseMLS.Dispose();hv_ScoreMLS.Dispose();hv_SurfaceMatchingResultID1.Dispose();
        HOperatorSet.FindSurfaceModelImage(ho_Image, hv_SFM, hv_Modelo_imagen_3d, 
            hv_Sampling_Find, hv_Keypoint, hv_MinScore, "false", hv_GenParamName, 
            hv_GenParamValue, out hv_PoseMLS, out hv_ScoreMLS, out hv_SurfaceMatchingResultID1);





        hv_PoseMLS.Dispose();hv_ScoreMLS.Dispose();hv_SurfaceMatchingResultID1.Dispose();
        HOperatorSet.FindSurfaceModel(hv_SFM, hv_Modelo_imagen_3d, hv_Sampling_Find, 
            hv_Keypoint, hv_MinScore, "true", hv_GenParamName, hv_GenParamValue, 
            out hv_PoseMLS, out hv_ScoreMLS, out hv_SurfaceMatchingResultID1);
        //***************************************
        if ((int)(new HTuple(hv_PoseMLS.TupleLength())) != 0)
        {


          //3.Refinar busqueda
          //***************************************
          hv_PoseREFIN.Dispose();hv_ScoreREFIN.Dispose();hv_SurfaceMatchingResultIDPose.Dispose();
          HOperatorSet.RefineSurfaceModelPose(hv_SFM, hv_Modelo_imagen_3d, hv_PoseMLS, 
              0, "false", "pose_ref_sub_sampling", 2, out hv_PoseREFIN, out hv_ScoreREFIN, 
              out hv_SurfaceMatchingResultIDPose);
          //***************************************
          //4.Translacion de objeto
          //***************************************

          hv_ObjectModel3DResultMLS.Dispose();
          HOperatorSet.RigidTransObjectModel3d(hv_Perno_Ref_Cam0, hv_PoseMLS, out hv_ObjectModel3DResultMLS);
          hv_ObjectModel3DResultMLS_REFIN.Dispose();
          HOperatorSet.RigidTransObjectModel3d(hv_Perno_Ref_Cam0, hv_PoseREFIN, out hv_ObjectModel3DResultMLS_REFIN);
          //* --> descomentar EN c#  Fx_Aux.DataLogError = "Objeto encontrado con una PROBABILIDAD de " + hv_ScoreMLS*100.ToString() ;
          hv_Estado_Funcion.Dispose();
          hv_Estado_Funcion = 1;
          ho_Image.Dispose();

          hv_GenParamName.Dispose();
          hv_GenParamValue.Dispose();
          hv_CameraParam.Dispose();
          hv_CameraPose.Dispose();
          hv_SurfaceMatchingResultIDPose.Dispose();
          hv_Exception.Dispose();

          return;

        }

        hv_Estado_Funcion.Dispose();
        hv_Estado_Funcion = 0;
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);

        hv_Estado_Funcion.Dispose();
        hv_Estado_Funcion = 0;
        //* --> descomentar EN c#  Fx_Aux.DataLogError = Fx_Aux.ErrorCatch(HDevExpDefaultException1);
        //
      }
      //
      //
      ho_Image.Dispose();

      hv_GenParamName.Dispose();
      hv_GenParamValue.Dispose();
      hv_CameraParam.Dispose();
      hv_CameraPose.Dispose();
      hv_SurfaceMatchingResultIDPose.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_Image.Dispose();

      hv_GenParamName.Dispose();
      hv_GenParamValue.Dispose();
      hv_CameraParam.Dispose();
      hv_CameraPose.Dispose();
      hv_SurfaceMatchingResultIDPose.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Find_Sector_Core (HTuple hv_Vector_ID_Core_by_Segment_Pallet, HTuple hv_Vector_Entidades_Segmento, 
      HTuple hv_Path_CORE_ID, HTuple hv_Path_3D_Segmentos, HTuple hv_Path_SFM_Segmentos, 
      HTuple hv_ROI3D_rotate, HTuple hv_Parametros_Visualizacion, HTuple hv_Valores_Visualizacion, 
      HTuple hv_Visualizar3D, HTuple hv_Vector_Segmento, HTuple hv_Escena3D_RAW, HTuple hv_Sampling, 
      HTuple hv_SerialHandle, HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Vector_Existencia_Core, 
      HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Vector_Estado_Fx, out HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Vector_Existencia_Core_New)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_N_divisiones_Pallet = new HTuple();
    HTuple hv_WindowHandle = new HTuple(), hv_Index = new HTuple();
    HTuple hv_NEntidades = new HTuple(), hv_N_Entidad = new HTuple();
    HTuple hv_Aux = new HTuple(), hv_Entidad_To_Find = new HTuple();
    HTuple hv_N_Sectores_To_Find = new HTuple(), hv_ROI3D = new HTuple();
    HTuple hv_Estado = new HTuple(), hv_ObjectModel3D_Core_Pallet = new HTuple();
    HTuple hv_SFM_Core_Pallet = new HTuple(), hv_Estado_Get_SFM_STL = new HTuple();
    HTuple hv_Modelo3D_Select = new HTuple(), hv_j = new HTuple();
    HTuple hv_N_Roi = new HTuple(), hv_ROI3D_aux = new HTuple();
    HTuple hv_Modelo_3D_ROI = new HTuple(), hv_PoseOut1 = new HTuple();
    HTuple hv_Altura_Maxima_camara_Piso_Pallet = new HTuple();
    HTuple hv_Modelo_3D_ROI_Thres = new HTuple(), hv_N_Model_To_Find = new HTuple();
    HTuple hv_Sampling_Find = new HTuple(), hv_Keypoint = new HTuple();
    HTuple hv_MinScore = new HTuple(), hv_N_matches = new HTuple();
    HTuple hv_SFM = new HTuple(), hv_Escena3D = new HTuple();
    HTuple hv_Mod_3D_Objeto = new HTuple(), hv_Exception = new HTuple();
    HTuple hv_EstadoFx = new HTuple();
    HTupleVector  hvec_Vector_Existencia_Core_COPY_INP_TMP = new HTupleVector(hvec_Vector_Existencia_Core);

    // Initialize local and output iconic variables 
    hvec_Vector_Existencia_Core_New = new HTupleVector(2);
    try
    {
      hv_N_divisiones_Pallet.Dispose();
      hv_N_divisiones_Pallet = 9;
      hv_N_divisiones_Pallet.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_N_divisiones_Pallet = new HTuple(hv_Vector_ID_Core_by_Segment_Pallet.TupleLength()
          );
      }
      //dev_get_window(...);

      // dev_inspect_ctrl(...); only in hdevelop
      HTuple end_val5 = hv_N_divisiones_Pallet-1;
      HTuple step_val5 = 1;
      for (hv_Index=0; hv_Index.Continue(end_val5, step_val5); hv_Index = hv_Index.TupleAdd(step_val5))
      {
        hvec_Vector_Existencia_Core_COPY_INP_TMP[hv_Index+1][0] = new HTupleVector(new HTuple(""));
        hvec_Vector_Existencia_Core_COPY_INP_TMP[hv_Index+1][1] = new HTupleVector(new HTuple(0));

      }


      //# ########################################
      //*##### REVISAR #########################
      //# # Si Vector_Entidades_Segmento funciona bien como limite del for

      hv_NEntidades.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_NEntidades = new HTuple(hv_Vector_Entidades_Segmento.TupleLength()
          );
      }


      try
      {

        HTuple end_val21 = hv_NEntidades-1;
        HTuple step_val21 = 1;
        for (hv_N_Entidad=0; hv_N_Entidad.Continue(end_val21, step_val21); hv_N_Entidad = hv_N_Entidad.TupleAdd(step_val21))
        {

          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Aux.Dispose();
          HOperatorSet.TupleSplit(hv_Vector_Entidades_Segmento.TupleSelect(hv_N_Entidad), 
              ";", out hv_Aux);
          }
          hv_Entidad_To_Find.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Entidad_To_Find = hv_Aux.TupleSelect(
              0);
          }
          hv_N_Sectores_To_Find.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_N_Sectores_To_Find = new HTuple(hv_Aux.TupleLength()
              );
          }
          hv_ROI3D.Dispose();
          hv_ROI3D = new HTuple();
          // dev_inspect_ctrl(...); only in hdevelop
          // dev_inspect_ctrl(...); only in hdevelop


          //*******************************************
          //Leo el SFM y STL del Core
          //*******************************************

          //# ### Envio data de estado ########################      
          hv_Estado.Dispose();
          hv_Estado = 9;
          Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
          //# ################################################# 

          if ((int)(new HTuple(hv_Entidad_To_Find.TupleEqual(" "))) != 0)
          {
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hvec_Vector_Existencia_Core_COPY_INP_TMP[hv_N_Entidad+1][0] = dh.Add(new HTupleVector(hv_Entidad_To_Find));
            }
            hvec_Vector_Existencia_Core_COPY_INP_TMP[hv_N_Entidad+1][1] = new HTupleVector(new HTuple(0));

          }
          else
          {

            hv_ObjectModel3D_Core_Pallet.Dispose();hv_SFM_Core_Pallet.Dispose();hv_Estado_Get_SFM_STL.Dispose();hv_Modelo3D_Select.Dispose();
            Get_SFM_STL(hv_Entidad_To_Find, hv_Path_CORE_ID, hv_Path_3D_Segmentos, 
                hv_Path_SFM_Segmentos, hvec_Vector_Estado_Fx, hv_SerialHandle, out hv_ObjectModel3D_Core_Pallet, 
                out hv_SFM_Core_Pallet, out hv_Estado_Get_SFM_STL, out hv_Modelo3D_Select);


            HTuple end_val49 = hv_N_Sectores_To_Find-1;
            HTuple step_val49 = 1;
            for (hv_j=1; hv_j.Continue(end_val49, step_val49); hv_j = hv_j.TupleAdd(step_val49))
            {
              hv_N_Roi.Dispose();
              using (HDevDisposeHelper dh = new HDevDisposeHelper())
              {
              hv_N_Roi = hv_Aux.TupleSelect(
                  hv_j);
              }
              using (HDevDisposeHelper dh = new HDevDisposeHelper())
              {
              hv_N_Roi.Dispose();
              HOperatorSet.TupleNumber(hv_Aux.TupleSelect(hv_j), out hv_N_Roi);
              }
              using (HDevDisposeHelper dh = new HDevDisposeHelper())
              {
              hv_ROI3D_aux.Dispose();
              HOperatorSet.CopyObjectModel3d(hv_ROI3D_rotate.TupleSelect(hv_N_Roi), 
                  "all", out hv_ROI3D_aux);
              }
              using (HDevDisposeHelper dh = new HDevDisposeHelper())
              {
              {
              HTuple 
                ExpTmpLocalVar_ROI3D = hv_ROI3D.TupleConcat(
                  hv_ROI3D_aux);
              hv_ROI3D.Dispose();
              hv_ROI3D = ExpTmpLocalVar_ROI3D;
              }
              }
            }
            hv_Modelo_3D_ROI.Dispose();
            Get_ROI_3D(hv_ROI3D, hv_Escena3D_RAW, out hv_Modelo_3D_ROI);


            //Visualizar_3D ([ ROI3D,Escena3D_RAW], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Visualizar3D, [], [], [], WindowHandle, PoseOut1)
            //Visualizar_3D ([Modelo_3D_ROI], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Visualizar3D, [], [], [], WindowHandle1, PoseOut1)

            //**************************************************************
            //Filtro la altura maxima
            //Utilizo esto para elminar el piso de la escena y evitar errores
            hv_Altura_Maxima_camara_Piso_Pallet.Dispose();
            hv_Altura_Maxima_camara_Piso_Pallet = 2400;
            //**************************************************************
            hv_Modelo_3D_ROI_Thres.Dispose();
            Set_Max_Altura_Model3D(hv_Modelo_3D_ROI, hv_Altura_Maxima_camara_Piso_Pallet, 
                hv_SerialHandle, out hv_Modelo_3D_ROI_Thres);


            //Visualizar_3D ([Modelo_3D_ROI_Thres], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Visualizar3D, [], [], [], WindowHandle2, PoseOut1)
            //Visualizar_3D ([ObjectModel3D_Core_Pallet], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Visualizar3D, [], [], [], WindowHandle3, PoseOut1)

            hv_N_Model_To_Find.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_N_Model_To_Find = new HTuple(hv_Modelo_3D_ROI_Thres.TupleLength()
                );
            }
            if ((int)(new HTuple((new HTuple(hv_Modelo_3D_ROI_Thres.TupleLength()
                )).TupleGreater(1))) != 0)
            {

              {
              HTuple ExpTmpOutVar_0;
              HOperatorSet.UnionObjectModel3d(hv_Modelo_3D_ROI_Thres, "points_surface", 
                  out ExpTmpOutVar_0);
              hv_Modelo_3D_ROI_Thres.Dispose();
              hv_Modelo_3D_ROI_Thres = ExpTmpOutVar_0;
              }
              //Visualizar_3D ([Modelo_3D_ROI_Thres], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Visualizar3D, [], [], [], WindowHandle4, PoseOut1)

            }

            //***************************
            //Parametros de control
            //***************************
            hv_Sampling_Find.Dispose();
            hv_Sampling_Find = 0.05;
            hv_Keypoint.Dispose();
            hv_Keypoint = 1;
            hv_MinScore.Dispose();
            hv_MinScore = 0.01;
            hv_N_matches.Dispose();
            hv_N_matches = new HTuple(hv_N_Model_To_Find);
            hv_SFM.Dispose();
            hv_SFM = new HTuple(hv_SFM_Core_Pallet);
            hv_Escena3D.Dispose();
            hv_Escena3D = new HTuple(hv_Modelo_3D_ROI_Thres);
            hv_Mod_3D_Objeto.Dispose();
            hv_Mod_3D_Objeto = new HTuple(hv_ObjectModel3D_Core_Pallet);

            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_PoseOut1.Dispose();
            Visualizar_3D(hv_Escena3D.TupleConcat(hv_Mod_3D_Objeto), hv_Parametros_Visualizacion.TupleConcat(
                "alpha"), hv_Valores_Visualizacion.TupleConcat(0.5), hv_Visualizar3D, 
                new HTuple(), new HTuple(), new HTuple(), hv_WindowHandle, out hv_PoseOut1);
            }

            //***************************
            //# ### Envio data de estado ###############################################
            hv_Estado.Dispose();
            hv_Estado = 10;
            Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
            //# ######################################################################## 


            //Find_Entity_3D (N_matches, SFM, Escena3D, Sampling_Find, Keypoint, MinScore, Mod_3D_Objeto, Modelo_3D_ROI_ThresEdges, PoseMLS, ScoreMLS, Pose_Refinada, Score_Refinado, SurfaceMatchingResultID1, Posicion3D_Objeto, Posicion3D_Objeto_REFIN, Obj_Detectado)


            if ((int)(1) != 0)
            {
              //# ### Envio data de estado ###############################################               
              hv_Estado.Dispose();
              hv_Estado = 11;
              Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
              //# ######################################################################## 

              hvec_Vector_Existencia_Core_COPY_INP_TMP[hv_N_Entidad+1][0] = new HTupleVector(new HTuple(1));
              hvec_Vector_Existencia_Core_COPY_INP_TMP[hv_N_Entidad+1][1] = new HTupleVector(new HTuple(1));
            }
            else
            {

              using (HDevDisposeHelper dh = new HDevDisposeHelper())
              {
              hvec_Vector_Existencia_Core_COPY_INP_TMP[hv_N_Entidad+1][0] = dh.Add(new HTupleVector(hv_Entidad_To_Find));
              }
              hvec_Vector_Existencia_Core_COPY_INP_TMP[hv_N_Entidad+1][1] = new HTupleVector(new HTuple(0));
            }
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            HOperatorSet.ClearObjectModel3d(((hv_ROI3D.TupleConcat(hv_Modelo_3D_ROI))).TupleConcat(
                hv_ObjectModel3D_Core_Pallet));
            }
            HOperatorSet.ClearSurfaceModel(hv_SFM_Core_Pallet);
          }

        }
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_EstadoFx.Dispose();
        Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx);

      }
      hvec_Vector_Existencia_Core_New.Dispose();
      hvec_Vector_Existencia_Core_New = new HTupleVector(hvec_Vector_Existencia_Core_COPY_INP_TMP);



      hv_N_divisiones_Pallet.Dispose();
      hv_WindowHandle.Dispose();
      hv_Index.Dispose();
      hv_NEntidades.Dispose();
      hv_N_Entidad.Dispose();
      hv_Aux.Dispose();
      hv_Entidad_To_Find.Dispose();
      hv_N_Sectores_To_Find.Dispose();
      hv_ROI3D.Dispose();
      hv_Estado.Dispose();
      hv_ObjectModel3D_Core_Pallet.Dispose();
      hv_SFM_Core_Pallet.Dispose();
      hv_Estado_Get_SFM_STL.Dispose();
      hv_Modelo3D_Select.Dispose();
      hv_j.Dispose();
      hv_N_Roi.Dispose();
      hv_ROI3D_aux.Dispose();
      hv_Modelo_3D_ROI.Dispose();
      hv_PoseOut1.Dispose();
      hv_Altura_Maxima_camara_Piso_Pallet.Dispose();
      hv_Modelo_3D_ROI_Thres.Dispose();
      hv_N_Model_To_Find.Dispose();
      hv_Sampling_Find.Dispose();
      hv_Keypoint.Dispose();
      hv_MinScore.Dispose();
      hv_N_matches.Dispose();
      hv_SFM.Dispose();
      hv_Escena3D.Dispose();
      hv_Mod_3D_Objeto.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_N_divisiones_Pallet.Dispose();
      hv_WindowHandle.Dispose();
      hv_Index.Dispose();
      hv_NEntidades.Dispose();
      hv_N_Entidad.Dispose();
      hv_Aux.Dispose();
      hv_Entidad_To_Find.Dispose();
      hv_N_Sectores_To_Find.Dispose();
      hv_ROI3D.Dispose();
      hv_Estado.Dispose();
      hv_ObjectModel3D_Core_Pallet.Dispose();
      hv_SFM_Core_Pallet.Dispose();
      hv_Estado_Get_SFM_STL.Dispose();
      hv_Modelo3D_Select.Dispose();
      hv_j.Dispose();
      hv_N_Roi.Dispose();
      hv_ROI3D_aux.Dispose();
      hv_Modelo_3D_ROI.Dispose();
      hv_PoseOut1.Dispose();
      hv_Altura_Maxima_camara_Piso_Pallet.Dispose();
      hv_Modelo_3D_ROI_Thres.Dispose();
      hv_N_Model_To_Find.Dispose();
      hv_Sampling_Find.Dispose();
      hv_Keypoint.Dispose();
      hv_MinScore.Dispose();
      hv_N_matches.Dispose();
      hv_SFM.Dispose();
      hv_Escena3D.Dispose();
      hv_Mod_3D_Objeto.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Find_Sector_Core_Bloque3 (HObject ho_Z, HTuple hv_Vector_ID_Core_by_Segment_Pallet, 
      HTuple hv_Vector_Entidades_Segmento, HTuple hv_Path_CORE_ID, HTuple hv_Path_3D_Segmentos, 
      HTuple hv_Path_SFM_Segmentos, HTuple hv_ROI3D_rotate, HTuple hv_Parametros_Visualizacion, 
      HTuple hv_Valores_Visualizacion, HTuple hv_Visualizar3D, HTuple hv_Vector_Segmento, 
      HTuple hv_Escena3D_RAW, HTuple hv_Sampling, HTuple hv_SerialHandle, HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Vector_Estado_Fx, 
      HTuple hv_Pituto, HTuple hv_ObjectModel3D_Core_Pallet, HTuple hv_SFM_Core_Pallet, 
      HTuple hv_Modelo3D_Select, HTuple hv_WindowHandle, out HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Vector_Existencia_Core_New, 
      out HTuple hv_Estado_Fx, out HTuple hv_RepetirFoto, out HTuple hv_MyPose)
  {




    // Local iconic variables 

    // Local control variables 

    HTuple hv_N_divisiones_Pallet = new HTuple();
    HTuple hv_NElementos = new HTuple(), hv_N_Entidad = new HTuple();
    HTuple hv_Aux = new HTuple(), hv_Entidad_To_Find = new HTuple();
    HTuple hv_N_Sectores_To_Find = new HTuple(), hv_ROI3D = new HTuple();
    HTuple hv_Estado = new HTuple(), hv_NumNeighbors = new HTuple();
    HTuple hv_DistanceDistribution = new HTuple(), hv_NumPoints = new HTuple();
    HTuple hv_InlierRate = new HTuple(), hv_Distance = new HTuple();
    HTuple hv_Altura_Maxima_camara_Piso_Pallet = new HTuple();
    HTuple hv_Modelo_3D_ROI_Thres = new HTuple(), hv_N_Model_To_Find = new HTuple();
    HTuple hv_BordesMain = new HTuple(), hv_Modelo_3D_ROI_ThresEdges = new HTuple();
    HTuple hv_Ang_Obj = new HTuple(), hv_PoseMLS = new HTuple();
    HTuple hv_Score_Refinado = new HTuple(), hv_Posicion3D_Objeto_REFIN = new HTuple();
    HTuple hv_Obj_Detectado = new HTuple(), hv_AngC = new HTuple();
    HTuple hv_AngB = new HTuple(), hv_AngBCompl = new HTuple();
    HTuple hv_AngCCompl = new HTuple(), hv_LimiteAngular = new HTuple();
    HTuple hv_Procesando = new HTuple(), hv_Resultado = new HTuple();
    HTuple hv_PoseView = new HTuple(), hv_Limite_CamarPiso = new HTuple();
    HTuple hv_ActivarOffset = new HTuple(), hv_Delta_X = new HTuple();
    HTuple hv_Delta_Y = new HTuple(), hv_Delta_Z = new HTuple();
    HTuple hv_Exception = new HTuple(), hv_EstadoFx = new HTuple();

    HTupleVector hvec_Vector_Existencia_Core = new HTupleVector(2);
    HTuple   hv_Escena3D_RAW_COPY_INP_TMP = new HTuple(hv_Escena3D_RAW);
    HTuple   hv_Parametros_Visualizacion_COPY_INP_TMP = new HTuple(hv_Parametros_Visualizacion);
    HTuple   hv_Valores_Visualizacion_COPY_INP_TMP = new HTuple(hv_Valores_Visualizacion);

    // Initialize local and output iconic variables 
    hvec_Vector_Existencia_Core_New = new HTupleVector(2);
    hv_Estado_Fx = new HTuple();
    hv_RepetirFoto = new HTuple();
    hv_MyPose = new HTuple();
    try
    {
      hv_N_divisiones_Pallet.Dispose();
      hv_N_divisiones_Pallet = 9;
      hv_N_divisiones_Pallet.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_N_divisiones_Pallet = new HTuple(hv_Vector_ID_Core_by_Segment_Pallet.TupleLength()
          );
      }

      hv_RepetirFoto.Dispose();
      hv_RepetirFoto = 0;



      hv_NElementos.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_NElementos = new HTuple(hv_Vector_Entidades_Segmento.TupleLength()
          );
      }

      hv_Estado_Fx.Dispose();
      hv_Estado_Fx = 0;
      try
      {

        HTuple end_val12 = hv_NElementos-1;
        HTuple step_val12 = 1;
        for (hv_N_Entidad=0; hv_N_Entidad.Continue(end_val12, step_val12); hv_N_Entidad = hv_N_Entidad.TupleAdd(step_val12))
        {

          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Aux.Dispose();
          HOperatorSet.TupleSplit(hv_Vector_Entidades_Segmento.TupleSelect(hv_N_Entidad), 
              ";", out hv_Aux);
          }
          hv_Entidad_To_Find.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Entidad_To_Find = hv_Aux.TupleSelect(
              0);
          }
          hv_N_Sectores_To_Find.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_N_Sectores_To_Find = new HTuple(hv_Aux.TupleLength()
              );
          }
          hv_ROI3D.Dispose();
          hv_ROI3D = new HTuple();

          //*******************************************
          //Leo el SFM y STL del Core
          //*******************************************

          //# ### Envio data de estado ########################
          hv_Estado.Dispose();
          hv_Estado = 9;
          Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
          //# ################################################# 


          if ((int)(new HTuple(hv_Entidad_To_Find.TupleEqual(" "))) != 0)
          {
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hvec_Vector_Existencia_Core[hv_N_Entidad+1][0] = dh.Add(new HTupleVector(hv_Entidad_To_Find));
            }
            hvec_Vector_Existencia_Core[hv_N_Entidad+1][1] = new HTupleVector(new HTuple(0));

          }
          else
          {
            //Se deshabilita la opcion para cargarla previamente
            //Get_SFM_STL (Entidad_To_Find, Path_CORE_ID, Path_3D_Segmentos, Path_SFM_Segmentos, Vector_Estado_Fx1, SerialHandle1, ObjectModel3D_Core_Pallet, SFM_Core_Pallet, Estado_Get_SFM_STL, Modelo3D_Select)


            //***************************************************************************************************************
            hv_NumNeighbors.Dispose();
            hv_NumNeighbors = 105;
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_DistanceDistribution.Dispose();
            HOperatorSet.GetObjectModel3dParams(hv_Escena3D_RAW_COPY_INP_TMP, "neighbor_distance "+hv_NumNeighbors, 
                out hv_DistanceDistribution);
            }
            hv_NumPoints.Dispose();
            HOperatorSet.GetObjectModel3dParams(hv_Escena3D_RAW_COPY_INP_TMP, "num_points", 
                out hv_NumPoints);

            hv_InlierRate.Dispose();
            hv_InlierRate = 70;
            hv_Distance.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_Distance = ((hv_DistanceDistribution.TupleSort()
                )).TupleSelect(((new HTuple(hv_DistanceDistribution.TupleLength()
                ))*hv_InlierRate)/100);
            }


            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            HTuple ExpTmpOutVar_0;
            HOperatorSet.SelectPointsObjectModel3d(hv_Escena3D_RAW_COPY_INP_TMP, 
                "num_neighbors "+hv_Distance, 15, hv_NumPoints, out ExpTmpOutVar_0);
            hv_Escena3D_RAW_COPY_INP_TMP.Dispose();
            hv_Escena3D_RAW_COPY_INP_TMP = ExpTmpOutVar_0;
            }
            //Visualizar_3D ([ Escena3D_RAW], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,1], 1, [], [], [], WindowHandle, PoseOut1)

            //**************************************************************************************************************
            //NUEVO FILTRO 3d
            //*************************************************************
            //distancia_segm := 1

            //connection_object_model_3d (Escena3D_RAW, 'distance_3d', distancia_segm, ObjectModel3DConnected)


            //**************************************************************
            //Filtro la altura maxima
            //Utilizo esto para elminar el piso de la escena y evitar errores
            hv_Altura_Maxima_camara_Piso_Pallet.Dispose();
            hv_Altura_Maxima_camara_Piso_Pallet = 1704;
            //**************************************************************
            hv_Modelo_3D_ROI_Thres.Dispose();
            Set_Max_Altura_Model3D(hv_Escena3D_RAW_COPY_INP_TMP, hv_Altura_Maxima_camara_Piso_Pallet, 
                hv_SerialHandle, out hv_Modelo_3D_ROI_Thres);
            {
            HTuple ExpTmpOutVar_0;
            NotZeroModel(hv_Escena3D_RAW_COPY_INP_TMP, out ExpTmpOutVar_0);
            hv_Escena3D_RAW_COPY_INP_TMP.Dispose();
            hv_Escena3D_RAW_COPY_INP_TMP = ExpTmpOutVar_0;
            }

            hv_N_Model_To_Find.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_N_Model_To_Find = new HTuple(hv_Modelo_3D_ROI_Thres.TupleLength()
                );
            }
            if ((int)(new HTuple((new HTuple(hv_Modelo_3D_ROI_Thres.TupleLength()
                )).TupleGreater(1))) != 0)
            {

              {
              HTuple ExpTmpOutVar_0;
              HOperatorSet.UnionObjectModel3d(hv_Modelo_3D_ROI_Thres, "points_surface", 
                  out ExpTmpOutVar_0);
              hv_Modelo_3D_ROI_Thres.Dispose();
              hv_Modelo_3D_ROI_Thres = ExpTmpOutVar_0;
              }
              //Visualizar_3D ([Modelo_3D_ROI_Thres], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], Visualizar3D, [], [], [], WindowHandle, PoseOut1)

            }

            //** Calculo los bordes 3D ***
            hv_BordesMain.Dispose();
            hv_BordesMain = 0.01;
            hv_Modelo_3D_ROI_ThresEdges.Dispose();
            HOperatorSet.EdgesObjectModel3d(hv_Escena3D_RAW_COPY_INP_TMP, hv_BordesMain, 
                new HTuple(), new HTuple(), out hv_Modelo_3D_ROI_ThresEdges);
            //*          Visualizar_3D ( [Modelo_3D_ROI_ThresEdges], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], 1, [], [], [], WindowHandle, PoseOut1)


            //# ### Envio data de estado ############################################         
            hv_Estado.Dispose();
            hv_Estado = 18;
            Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
            //# ##################################################################
            //# ################################################################## 


            hv_Ang_Obj.Dispose();
            hv_Ang_Obj = 0;
            hv_PoseMLS.Dispose();hv_Score_Refinado.Dispose();hv_Posicion3D_Objeto_REFIN.Dispose();hv_Obj_Detectado.Dispose();
            Find_Dinamic_Core(hv_N_Model_To_Find, hv_SFM_Core_Pallet, hv_ObjectModel3D_Core_Pallet, 
                hv_Escena3D_RAW_COPY_INP_TMP, hvec_Vector_Estado_Fx, hv_SerialHandle, 
                hv_Modelo_3D_ROI_ThresEdges, hv_WindowHandle, hv_Parametros_Visualizacion_COPY_INP_TMP, 
                hv_Valores_Visualizacion_COPY_INP_TMP, hv_Ang_Obj, hv_Vector_ID_Core_by_Segment_Pallet, 
                out hv_PoseMLS, out hv_Score_Refinado, out hv_Posicion3D_Objeto_REFIN, 
                out hv_Obj_Detectado);
            //# ##################################################################
            //# ##################################################################
            hv_Estado.Dispose();
            hv_Estado = 21;
            Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);

            if ((int)(hv_Obj_Detectado) != 0)
            {

              hv_AngC.Dispose();
              using (HDevDisposeHelper dh = new HDevDisposeHelper())
              {
              hv_AngC = hv_PoseMLS.TupleSelect(
                  3);
              }
              hv_AngB.Dispose();
              using (HDevDisposeHelper dh = new HDevDisposeHelper())
              {
              hv_AngB = hv_PoseMLS.TupleSelect(
                  4);
              }


              if ((int)(new HTuple(hv_AngB.TupleGreaterEqual(270))) != 0)
              {
                hv_AngBCompl.Dispose();
                using (HDevDisposeHelper dh = new HDevDisposeHelper())
                {
                hv_AngBCompl = hv_AngB-360;
                }
                hv_AngB.Dispose();
                HOperatorSet.TupleAbs(hv_AngBCompl, out hv_AngB);
              }


              if ((int)(new HTuple(hv_AngC.TupleGreaterEqual(270))) != 0)
              {
                hv_AngCCompl.Dispose();
                using (HDevDisposeHelper dh = new HDevDisposeHelper())
                {
                hv_AngCCompl = hv_AngC-360;
                }
                hv_AngC.Dispose();
                HOperatorSet.TupleAbs(hv_AngCCompl, out hv_AngC);
              }

              //******************************************************************************
              hv_LimiteAngular.Dispose();
              hv_LimiteAngular = 3.5;
              //******************************************************************************

              if ((int)((new HTuple(hv_AngB.TupleGreaterEqual(hv_LimiteAngular))).TupleOr(
                  new HTuple(hv_AngC.TupleGreaterEqual(hv_LimiteAngular)))) != 0)
              {

                Send_Data_Info("### ERROR ### Angulos B o C malo", hv_SerialHandle);
                hv_Procesando.Dispose();
                hv_Procesando = 0;
                hv_Estado.Dispose();
                hv_Estado = 12;
                hv_Resultado.Dispose();
                hv_Resultado = 2;
                Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
                Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
                hv_RepetirFoto.Dispose();
                hv_RepetirFoto = 0;
                hv_Estado_Fx.Dispose();
                hv_Estado_Fx = 0;

                hv_Escena3D_RAW_COPY_INP_TMP.Dispose();
                hv_Parametros_Visualizacion_COPY_INP_TMP.Dispose();
                hv_Valores_Visualizacion_COPY_INP_TMP.Dispose();
                hv_N_divisiones_Pallet.Dispose();
                hv_NElementos.Dispose();
                hv_N_Entidad.Dispose();
                hv_Aux.Dispose();
                hv_Entidad_To_Find.Dispose();
                hv_N_Sectores_To_Find.Dispose();
                hv_ROI3D.Dispose();
                hv_Estado.Dispose();
                hv_NumNeighbors.Dispose();
                hv_DistanceDistribution.Dispose();
                hv_NumPoints.Dispose();
                hv_InlierRate.Dispose();
                hv_Distance.Dispose();
                hv_Altura_Maxima_camara_Piso_Pallet.Dispose();
                hv_Modelo_3D_ROI_Thres.Dispose();
                hv_N_Model_To_Find.Dispose();
                hv_BordesMain.Dispose();
                hv_Modelo_3D_ROI_ThresEdges.Dispose();
                hv_Ang_Obj.Dispose();
                hv_PoseMLS.Dispose();
                hv_Score_Refinado.Dispose();
                hv_Posicion3D_Objeto_REFIN.Dispose();
                hv_Obj_Detectado.Dispose();
                hv_AngC.Dispose();
                hv_AngB.Dispose();
                hv_AngBCompl.Dispose();
                hv_AngCCompl.Dispose();
                hv_LimiteAngular.Dispose();
                hv_Procesando.Dispose();
                hv_Resultado.Dispose();
                hv_PoseView.Dispose();
                hv_Limite_CamarPiso.Dispose();
                hv_ActivarOffset.Dispose();
                hv_Delta_X.Dispose();
                hv_Delta_Y.Dispose();
                hv_Delta_Z.Dispose();
                hv_Exception.Dispose();
                hv_EstadoFx.Dispose();
                hvec_Vector_Existencia_Core.Dispose();

                return;

              }


              hv_Parametros_Visualizacion_COPY_INP_TMP.Dispose();
              hv_Parametros_Visualizacion_COPY_INP_TMP = new HTuple();
              hv_Parametros_Visualizacion_COPY_INP_TMP[0] = "disp_pose";
              hv_Parametros_Visualizacion_COPY_INP_TMP[1] = "color_attrib";
              hv_Parametros_Visualizacion_COPY_INP_TMP[2] = "lut";
              hv_Parametros_Visualizacion_COPY_INP_TMP[3] = "point_size";
              hv_Valores_Visualizacion_COPY_INP_TMP.Dispose();
              hv_Valores_Visualizacion_COPY_INP_TMP = new HTuple();
              hv_Valores_Visualizacion_COPY_INP_TMP[0] = "true";
              hv_Valores_Visualizacion_COPY_INP_TMP[1] = "coord_z";
              hv_Valores_Visualizacion_COPY_INP_TMP[2] = "rainbow";
              hv_Valores_Visualizacion_COPY_INP_TMP[3] = 1;
              hv_PoseView.Dispose();
              HOperatorSet.CreatePose(100, -50, 2690, 352, 0, 0, "Rp+T", "gba", "point", 
                  out hv_PoseView);
              using (HDevDisposeHelper dh = new HDevDisposeHelper())
              {
              HOperatorSet.DispObjectModel3d(hv_ExpDefaultWinHandle, hv_Posicion3D_Objeto_REFIN.TupleConcat(
                  hv_Escena3D_RAW_COPY_INP_TMP), new HTuple(), hv_PoseView, hv_Parametros_Visualizacion_COPY_INP_TMP.TupleConcat(
                  "alpha"), hv_Valores_Visualizacion_COPY_INP_TMP.TupleConcat(0.5));
              }
              HOperatorSet.DispText(hv_ExpDefaultWinHandle, hv_PoseMLS, "window", 
                  "top", "left", "black", new HTuple(), new HTuple());

              using (HDevDisposeHelper dh = new HDevDisposeHelper())
              {
              HOperatorSet.ClearObjectModel3d(hv_Posicion3D_Objeto_REFIN.TupleConcat(
                  hv_Escena3D_RAW_COPY_INP_TMP));
              }

              HOperatorSet.WritePose(hv_PoseMLS, "C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/5.-Ing Software/3 Consolidado R1/PoseCirculares.dat");

              hv_RepetirFoto.Dispose();
              hv_RepetirFoto = 0;


              //# ### Envio data de estado ########################
              hv_Estado.Dispose();
              hv_Estado = 11;
              Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
              //# ###################################################### 
              //# ## Verifico el Eje Z sobre pasa el suelo.
              //# ######################################################    

              //*************************************
              hv_Limite_CamarPiso.Dispose();
              hv_Limite_CamarPiso = 1707;
              //*************************************

              if ((int)(new HTuple(((hv_PoseMLS.TupleSelect(2))).TupleGreaterEqual(
                  hv_Limite_CamarPiso))) != 0)
              {
                hv_Procesando.Dispose();
                hv_Procesando = 0;
                hv_Estado.Dispose();
                hv_Estado = 12;
                hv_Resultado.Dispose();
                hv_Resultado = 2;
                Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
                Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
                Send_Data_Info("### ERROR #### Calculo muy cercano al piso. RIESGO de Colision", 
                    hv_SerialHandle);
                hv_RepetirFoto.Dispose();
                hv_RepetirFoto = 0;

                hv_Escena3D_RAW_COPY_INP_TMP.Dispose();
                hv_Parametros_Visualizacion_COPY_INP_TMP.Dispose();
                hv_Valores_Visualizacion_COPY_INP_TMP.Dispose();
                hv_N_divisiones_Pallet.Dispose();
                hv_NElementos.Dispose();
                hv_N_Entidad.Dispose();
                hv_Aux.Dispose();
                hv_Entidad_To_Find.Dispose();
                hv_N_Sectores_To_Find.Dispose();
                hv_ROI3D.Dispose();
                hv_Estado.Dispose();
                hv_NumNeighbors.Dispose();
                hv_DistanceDistribution.Dispose();
                hv_NumPoints.Dispose();
                hv_InlierRate.Dispose();
                hv_Distance.Dispose();
                hv_Altura_Maxima_camara_Piso_Pallet.Dispose();
                hv_Modelo_3D_ROI_Thres.Dispose();
                hv_N_Model_To_Find.Dispose();
                hv_BordesMain.Dispose();
                hv_Modelo_3D_ROI_ThresEdges.Dispose();
                hv_Ang_Obj.Dispose();
                hv_PoseMLS.Dispose();
                hv_Score_Refinado.Dispose();
                hv_Posicion3D_Objeto_REFIN.Dispose();
                hv_Obj_Detectado.Dispose();
                hv_AngC.Dispose();
                hv_AngB.Dispose();
                hv_AngBCompl.Dispose();
                hv_AngCCompl.Dispose();
                hv_LimiteAngular.Dispose();
                hv_Procesando.Dispose();
                hv_Resultado.Dispose();
                hv_PoseView.Dispose();
                hv_Limite_CamarPiso.Dispose();
                hv_ActivarOffset.Dispose();
                hv_Delta_X.Dispose();
                hv_Delta_Y.Dispose();
                hv_Delta_Z.Dispose();
                hv_Exception.Dispose();
                hv_EstadoFx.Dispose();
                hvec_Vector_Existencia_Core.Dispose();

                return;

              }
              //*********************************************
              hv_ActivarOffset.Dispose();
              hv_ActivarOffset = 0;
              //*********************************************
              hv_Delta_X.Dispose();
              using (HDevDisposeHelper dh = new HDevDisposeHelper())
              {
              hv_Delta_X = 0*hv_ActivarOffset;
              }
              hv_Delta_Y.Dispose();
              using (HDevDisposeHelper dh = new HDevDisposeHelper())
              {
              hv_Delta_Y = 0*hv_ActivarOffset;
              }
              hv_Delta_Z.Dispose();
              hv_Delta_Z = 0;


              if (hv_PoseMLS == null)
                hv_PoseMLS = new HTuple();
              hv_PoseMLS[0] = (hv_PoseMLS.TupleSelect(0))+hv_Delta_X;
              if (hv_PoseMLS == null)
                hv_PoseMLS = new HTuple();
              hv_PoseMLS[1] = (hv_PoseMLS.TupleSelect(1))+hv_Delta_Y;
              if (hv_PoseMLS == null)
                hv_PoseMLS = new HTuple();
              hv_PoseMLS[2] = (hv_PoseMLS.TupleSelect(2))+hv_Delta_Z;

              //PoseMLS[3] := 0
              //PoseMLS[4] := 0

              Send_Data_To_Robot(hv_PoseMLS, hv_SerialHandle);
              //**************************************
              hv_Estado_Fx.Dispose();
              hv_Estado_Fx = 1;



            }
            else
            {
              Send_Data_Info("### ERROR ### Entidad NO detectada\nRevisar porcentaje de Deteccion de esta entidad", 
                  hv_SerialHandle);

              hv_Procesando.Dispose();
              hv_Procesando = 1;
              hv_Estado.Dispose();
              hv_Estado = 12;
              hv_Resultado.Dispose();
              hv_Resultado = 2;
              Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
              Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
              hv_RepetirFoto.Dispose();
              hv_RepetirFoto = 1;
            }

          }

        }
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_EstadoFx.Dispose();
        Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx);

      }



      hv_Escena3D_RAW_COPY_INP_TMP.Dispose();
      hv_Parametros_Visualizacion_COPY_INP_TMP.Dispose();
      hv_Valores_Visualizacion_COPY_INP_TMP.Dispose();
      hv_N_divisiones_Pallet.Dispose();
      hv_NElementos.Dispose();
      hv_N_Entidad.Dispose();
      hv_Aux.Dispose();
      hv_Entidad_To_Find.Dispose();
      hv_N_Sectores_To_Find.Dispose();
      hv_ROI3D.Dispose();
      hv_Estado.Dispose();
      hv_NumNeighbors.Dispose();
      hv_DistanceDistribution.Dispose();
      hv_NumPoints.Dispose();
      hv_InlierRate.Dispose();
      hv_Distance.Dispose();
      hv_Altura_Maxima_camara_Piso_Pallet.Dispose();
      hv_Modelo_3D_ROI_Thres.Dispose();
      hv_N_Model_To_Find.Dispose();
      hv_BordesMain.Dispose();
      hv_Modelo_3D_ROI_ThresEdges.Dispose();
      hv_Ang_Obj.Dispose();
      hv_PoseMLS.Dispose();
      hv_Score_Refinado.Dispose();
      hv_Posicion3D_Objeto_REFIN.Dispose();
      hv_Obj_Detectado.Dispose();
      hv_AngC.Dispose();
      hv_AngB.Dispose();
      hv_AngBCompl.Dispose();
      hv_AngCCompl.Dispose();
      hv_LimiteAngular.Dispose();
      hv_Procesando.Dispose();
      hv_Resultado.Dispose();
      hv_PoseView.Dispose();
      hv_Limite_CamarPiso.Dispose();
      hv_ActivarOffset.Dispose();
      hv_Delta_X.Dispose();
      hv_Delta_Y.Dispose();
      hv_Delta_Z.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();
      hvec_Vector_Existencia_Core.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Escena3D_RAW_COPY_INP_TMP.Dispose();
      hv_Parametros_Visualizacion_COPY_INP_TMP.Dispose();
      hv_Valores_Visualizacion_COPY_INP_TMP.Dispose();
      hv_N_divisiones_Pallet.Dispose();
      hv_NElementos.Dispose();
      hv_N_Entidad.Dispose();
      hv_Aux.Dispose();
      hv_Entidad_To_Find.Dispose();
      hv_N_Sectores_To_Find.Dispose();
      hv_ROI3D.Dispose();
      hv_Estado.Dispose();
      hv_NumNeighbors.Dispose();
      hv_DistanceDistribution.Dispose();
      hv_NumPoints.Dispose();
      hv_InlierRate.Dispose();
      hv_Distance.Dispose();
      hv_Altura_Maxima_camara_Piso_Pallet.Dispose();
      hv_Modelo_3D_ROI_Thres.Dispose();
      hv_N_Model_To_Find.Dispose();
      hv_BordesMain.Dispose();
      hv_Modelo_3D_ROI_ThresEdges.Dispose();
      hv_Ang_Obj.Dispose();
      hv_PoseMLS.Dispose();
      hv_Score_Refinado.Dispose();
      hv_Posicion3D_Objeto_REFIN.Dispose();
      hv_Obj_Detectado.Dispose();
      hv_AngC.Dispose();
      hv_AngB.Dispose();
      hv_AngBCompl.Dispose();
      hv_AngCCompl.Dispose();
      hv_LimiteAngular.Dispose();
      hv_Procesando.Dispose();
      hv_Resultado.Dispose();
      hv_PoseView.Dispose();
      hv_Limite_CamarPiso.Dispose();
      hv_ActivarOffset.Dispose();
      hv_Delta_X.Dispose();
      hv_Delta_Y.Dispose();
      hv_Delta_Z.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();
      hvec_Vector_Existencia_Core.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Find_SerialBridge (HTuple hv_SerialHandle)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Bucle = new HTuple(), hv_pathFile = new HTuple();
    HTuple hv_FileHandle = new HTuple(), hv_String = new HTuple();
    HTuple hv_IsEOF = new HTuple(), hv_Mensaje = new HTuple();
    HTuple hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    try
    {
      hv_Bucle.Dispose();
      hv_Bucle = 1;
      hv_pathFile.Dispose();
      hv_pathFile = "C:/DaFunk/InitFile.txt";
      while ((int)(hv_Bucle) != 0)
      {
        try
        {
          hv_FileHandle.Dispose();
          HOperatorSet.OpenFile(hv_pathFile, "input", out hv_FileHandle);
          //fwrite_string (FileHandle, 'Para escribir weas')
          hv_String.Dispose();hv_IsEOF.Dispose();
          HOperatorSet.FreadString(hv_FileHandle, out hv_String, out hv_IsEOF);
          //fnew_line (FileHandle)
          HOperatorSet.CloseFile(hv_FileHandle);
          if ((int)(new HTuple(hv_String.TupleEqual("True"))) != 0)
          {
            hv_Mensaje.Dispose();
            hv_Mensaje = "SerialBridge Detectado............";
            Send_Data_Info(hv_Mensaje, hv_SerialHandle);
            hv_Bucle.Dispose();
            hv_Bucle = 0;
          }
        }
        // catch (Exception) 
        catch (HalconException HDevExpDefaultException1)
        {
          HDevExpDefaultException1.ToHTuple(out hv_Exception);

        }

      }

      hv_Bucle.Dispose();
      hv_pathFile.Dispose();
      hv_FileHandle.Dispose();
      hv_String.Dispose();
      hv_IsEOF.Dispose();
      hv_Mensaje.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Bucle.Dispose();
      hv_pathFile.Dispose();
      hv_FileHandle.Dispose();
      hv_String.Dispose();
      hv_IsEOF.Dispose();
      hv_Mensaje.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_3dModel_Core (HTuple hv_SerialHandle, HTuple hv_Path_CORE_ID, HTuple hv_Path_3D_Segmentos, 
      HTuple hv_Path_SFM_Segmentos, HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Vector_Estado_Fx, 
      HTuple hv_DerivadaCore_In, HTuple hv_ObjectModel3D_Core_Pallet_In, HTuple hv_SFM_Core_Pallet_In, 
      HTuple hv_Cod_Core, out HTuple hv_ObjectModel3D_Core_Pallet_Out, out HTuple hv_SFM_Core_Pallet_Out, 
      out HTuple hv_Modelo3D_Select, out HTuple hv_Cod_Core_ToUse, out HTuple hv_DerivadaCore_Out)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_PIN = new HTuple(), hv_LOC = new HTuple();
    HTuple hv_SPRUE = new HTuple(), hv_NUMERO = new HTuple();
    HTuple hv_DOWEL = new HTuple(), hv_Estado_Get_SFM_STL = new HTuple();
    HTuple hv_Exception = new HTuple(), hv_EstadoFx = new HTuple();
    // Initialize local and output iconic variables 
    hv_ObjectModel3D_Core_Pallet_Out = new HTuple();
    hv_SFM_Core_Pallet_Out = new HTuple();
    hv_Modelo3D_Select = new HTuple();
    hv_Cod_Core_ToUse = new HTuple();
    hv_DerivadaCore_Out = new HTuple();
    try
    {
      //Get_Core_ToUse (SerialHandle, Cod_Core_ToUse, FXcheck)
      hv_DerivadaCore_Out.Dispose();
      hv_DerivadaCore_Out = new HTuple(hv_DerivadaCore_In);
      hv_Cod_Core_ToUse.Dispose();
      hv_Cod_Core_ToUse = new HTuple(hv_Cod_Core);
      if (hv_DerivadaCore_Out == null)
        hv_DerivadaCore_Out = new HTuple();
      hv_DerivadaCore_Out[1] = hv_Cod_Core_ToUse;
      if ((int)(new HTuple(((hv_DerivadaCore_Out.TupleSelect(1))).TupleNotEqual(hv_DerivadaCore_Out.TupleSelect(
          0)))) != 0)
      {


        hv_PIN.Dispose();
        HOperatorSet.TupleStrrstr(hv_Cod_Core_ToUse, "PIN", out hv_PIN);
        hv_LOC.Dispose();
        HOperatorSet.TupleStrrstr(hv_Cod_Core_ToUse, "LOC", out hv_LOC);
        hv_SPRUE.Dispose();
        HOperatorSet.TupleStrrstr(hv_Cod_Core_ToUse, "SPRUE", out hv_SPRUE);
        hv_NUMERO.Dispose();
        HOperatorSet.TupleStrrstr(hv_Cod_Core_ToUse, "NUM", out hv_NUMERO);
        hv_DOWEL.Dispose();
        HOperatorSet.TupleStrrstr(hv_Cod_Core_ToUse, "DOWEL", out hv_DOWEL);

        try
        {

          if ((int)((new HTuple((new HTuple((new HTuple((new HTuple((new HTuple(hv_DOWEL.TupleEqual(
              -1))).TupleAnd(new HTuple(hv_NUMERO.TupleEqual(-1))))).TupleAnd(new HTuple(hv_PIN.TupleEqual(
              -1))))).TupleAnd(new HTuple(hv_LOC.TupleEqual(-1))))).TupleAnd(new HTuple(hv_SPRUE.TupleEqual(
              -1))))).TupleAnd(new HTuple(hv_Cod_Core_ToUse.TupleNotEqual(" ")))) != 0)
          {
            hv_ObjectModel3D_Core_Pallet_Out.Dispose();hv_SFM_Core_Pallet_Out.Dispose();hv_Estado_Get_SFM_STL.Dispose();hv_Modelo3D_Select.Dispose();
            Get_SFM_STL(hv_Cod_Core_ToUse, hv_Path_CORE_ID, hv_Path_3D_Segmentos, 
                hv_Path_SFM_Segmentos, hvec_Vector_Estado_Fx, hv_SerialHandle, out hv_ObjectModel3D_Core_Pallet_Out, 
                out hv_SFM_Core_Pallet_Out, out hv_Estado_Get_SFM_STL, out hv_Modelo3D_Select);
          }

        }
        // catch (Exception) 
        catch (HalconException HDevExpDefaultException1)
        {
          HDevExpDefaultException1.ToHTuple(out hv_Exception);

          hv_EstadoFx.Dispose();
          Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx);
        }

        if (hv_DerivadaCore_Out == null)
          hv_DerivadaCore_Out = new HTuple();
        hv_DerivadaCore_Out[0] = hv_DerivadaCore_Out.TupleSelect(1);
      }



      hv_PIN.Dispose();
      hv_LOC.Dispose();
      hv_SPRUE.Dispose();
      hv_NUMERO.Dispose();
      hv_DOWEL.Dispose();
      hv_Estado_Get_SFM_STL.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_PIN.Dispose();
      hv_LOC.Dispose();
      hv_SPRUE.Dispose();
      hv_NUMERO.Dispose();
      hv_DOWEL.Dispose();
      hv_Estado_Get_SFM_STL.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_3dModel_Sleeve (HTuple hv_SerialHandle, HTuple hv_Path_CORE_ID, 
      HTuple hv_Path_3D_Segmentos, HTuple hv_Path_SFM_Segmentos, HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Vector_Estado_Fx, 
      HTuple hv_ObjectModel3D_Core_Pallet_In, HTuple hv_Cod_Core, out HTuple hv_ObjectModel3D_Core_Pallet_Out, 
      out HTuple hv_Modelo3D_Select, out HTuple hv_Cod_Core_ToUse)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_PIN = new HTuple(), hv_LOC = new HTuple();
    HTuple hv_SPRUE = new HTuple(), hv_NUMERO = new HTuple();
    HTuple hv_DOWEL = new HTuple(), hv_Estado_Get_SFM_STL = new HTuple();
    HTuple hv_Exception = new HTuple(), hv_EstadoFx = new HTuple();
    // Initialize local and output iconic variables 
    hv_ObjectModel3D_Core_Pallet_Out = new HTuple();
    hv_Modelo3D_Select = new HTuple();
    hv_Cod_Core_ToUse = new HTuple();
    try
    {
      //Get_Core_ToUse (SerialHandle, Cod_Core_ToUse, FXcheck)

      hv_Cod_Core_ToUse.Dispose();
      hv_Cod_Core_ToUse = new HTuple(hv_Cod_Core);

      hv_PIN.Dispose();
      HOperatorSet.TupleStrrstr(hv_Cod_Core_ToUse, "PIN", out hv_PIN);
      hv_LOC.Dispose();
      HOperatorSet.TupleStrrstr(hv_Cod_Core_ToUse, "LOC", out hv_LOC);
      hv_SPRUE.Dispose();
      HOperatorSet.TupleStrrstr(hv_Cod_Core_ToUse, "SPRUE", out hv_SPRUE);
      hv_NUMERO.Dispose();
      HOperatorSet.TupleStrrstr(hv_Cod_Core_ToUse, "NUM", out hv_NUMERO);
      hv_DOWEL.Dispose();
      HOperatorSet.TupleStrrstr(hv_Cod_Core_ToUse, "DOWEL", out hv_DOWEL);

      try
      {

        if ((int)((new HTuple((new HTuple((new HTuple((new HTuple((new HTuple(hv_DOWEL.TupleEqual(
            -1))).TupleAnd(new HTuple(hv_NUMERO.TupleEqual(-1))))).TupleAnd(new HTuple(hv_PIN.TupleEqual(
            -1))))).TupleAnd(new HTuple(hv_LOC.TupleEqual(-1))))).TupleAnd(new HTuple(hv_SPRUE.TupleEqual(
            -1))))).TupleAnd(new HTuple(hv_Cod_Core_ToUse.TupleNotEqual(" ")))) != 0)
        {
          hv_ObjectModel3D_Core_Pallet_Out.Dispose();hv_Estado_Get_SFM_STL.Dispose();hv_Modelo3D_Select.Dispose();
          Get_STL_Sleeve(hv_Cod_Core_ToUse, hv_Path_CORE_ID, hv_Path_3D_Segmentos, 
              hv_Path_SFM_Segmentos, hvec_Vector_Estado_Fx, hv_SerialHandle, out hv_ObjectModel3D_Core_Pallet_Out, 
              out hv_Estado_Get_SFM_STL, out hv_Modelo3D_Select);
        }

      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);

        hv_EstadoFx.Dispose();
        Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx);
      }



      hv_PIN.Dispose();
      hv_LOC.Dispose();
      hv_SPRUE.Dispose();
      hv_NUMERO.Dispose();
      hv_DOWEL.Dispose();
      hv_Estado_Get_SFM_STL.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_PIN.Dispose();
      hv_LOC.Dispose();
      hv_SPRUE.Dispose();
      hv_NUMERO.Dispose();
      hv_DOWEL.Dispose();
      hv_Estado_Get_SFM_STL.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_AlturaLocalizador (HObject ho_Zmred, HTuple hv_SerialHandle, out HTuple hv_Minimo, 
      out HTuple hv_Estado_Fx)
  {




    // Stack for temporary objects 
    HObject[] OTemp = new HObject[20];

    // Local iconic variables 

    HObject ho_Localizadores=null, ho_posibles_Localizadores=null;
    HObject ho_LocalMinima=null, ho_ConnectedRegions=null;

    // Local control variables 

    HTuple hv_Area = new HTuple(), hv_Row = new HTuple();
    HTuple hv_Column = new HTuple(), hv_AlturaLocalizadores = new HTuple();
    HTuple hv_Exception = new HTuple(), hv_EstadoFx = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Localizadores);
    HOperatorSet.GenEmptyObj(out ho_posibles_Localizadores);
    HOperatorSet.GenEmptyObj(out ho_LocalMinima);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
    hv_Minimo = new HTuple();
    hv_Estado_Fx = new HTuple();
    try
    {

      hv_Estado_Fx.Dispose();
      hv_Estado_Fx = 0;
      try
      {

        ho_Localizadores.Dispose();
        HOperatorSet.Threshold(ho_Zmred, out ho_Localizadores, 1000, 1500);
        HOperatorSet.DispObj(ho_Localizadores, hv_ExpDefaultWinHandle);


        {
        HObject ExpTmpOutVar_0;
        HOperatorSet.ErosionCircle(ho_Localizadores, out ExpTmpOutVar_0, 5);
        ho_Localizadores.Dispose();
        ho_Localizadores = ExpTmpOutVar_0;
        }
        ho_posibles_Localizadores.Dispose();
        HOperatorSet.ReduceDomain(ho_Zmred, ho_Localizadores, out ho_posibles_Localizadores
            );

        //gauss_filter (posibles_Localizadores, posibles_Localizadores, 5)
        ho_LocalMinima.Dispose();
        HOperatorSet.LocalMax(ho_posibles_Localizadores, out ho_LocalMinima);
        ho_ConnectedRegions.Dispose();
        HOperatorSet.Connection(ho_LocalMinima, out ho_ConnectedRegions);


        hv_Area.Dispose();hv_Row.Dispose();hv_Column.Dispose();
        HOperatorSet.AreaCenter(ho_ConnectedRegions, out hv_Area, out hv_Row, out hv_Column);
        hv_AlturaLocalizadores.Dispose();
        HOperatorSet.GetGrayval(ho_posibles_Localizadores, hv_Row, hv_Column, out hv_AlturaLocalizadores);
        hv_Minimo.Dispose();
        HOperatorSet.TupleMin(hv_AlturaLocalizadores, out hv_Minimo);
        hv_Estado_Fx.Dispose();
        hv_Estado_Fx = 1;

      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);

        hv_EstadoFx.Dispose();
        Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx);
        hv_Estado_Fx.Dispose();
        hv_Estado_Fx = 0;
      }

      ho_Localizadores.Dispose();
      ho_posibles_Localizadores.Dispose();
      ho_LocalMinima.Dispose();
      ho_ConnectedRegions.Dispose();

      hv_Area.Dispose();
      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_AlturaLocalizadores.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_Localizadores.Dispose();
      ho_posibles_Localizadores.Dispose();
      ho_LocalMinima.Dispose();
      ho_ConnectedRegions.Dispose();

      hv_Area.Dispose();
      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_AlturaLocalizadores.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_AlturaPisoPromedio (HObject ho_Z, out HObject ho_ImageGauss, out HObject ho_Regions, 
      out HObject ho_ConnectedRegions, out HObject ho_SelectedRegions, out HObject ho_ImageReduced, 
      out HObject ho_LocalMaxima, out HObject ho_ImageReduced1, out HObject ho_ConnectedRegions1, 
      out HTuple hv_Dist_CamaraoPiso)
  {



    // Stack for temporary objects 
    HObject[] OTemp = new HObject[20];

    // Local iconic variables 

    // Local control variables 

    HTuple hv_Area = new HTuple(), hv_Row = new HTuple();
    HTuple hv_Column = new HTuple(), hv_Grayval = new HTuple();
    HTuple hv_Max = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ImageGauss);
    HOperatorSet.GenEmptyObj(out ho_Regions);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
    HOperatorSet.GenEmptyObj(out ho_SelectedRegions);
    HOperatorSet.GenEmptyObj(out ho_ImageReduced);
    HOperatorSet.GenEmptyObj(out ho_LocalMaxima);
    HOperatorSet.GenEmptyObj(out ho_ImageReduced1);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions1);
    hv_Dist_CamaraoPiso = new HTuple();
    try
    {
      ho_ImageGauss.Dispose();
      HOperatorSet.GaussFilter(ho_Z, out ho_ImageGauss, 11);
      {
      HObject ExpTmpOutVar_0;
      HOperatorSet.GaussFilter(ho_ImageGauss, out ExpTmpOutVar_0, 11);
      ho_ImageGauss.Dispose();
      ho_ImageGauss = ExpTmpOutVar_0;
      }
      {
      HObject ExpTmpOutVar_0;
      HOperatorSet.GaussFilter(ho_ImageGauss, out ExpTmpOutVar_0, 11);
      ho_ImageGauss.Dispose();
      ho_ImageGauss = ExpTmpOutVar_0;
      }
      ho_Regions.Dispose();
      HOperatorSet.AutoThreshold(ho_ImageGauss, out ho_Regions, 2);
      //connection (Regions, ConnectedRegions)
      //select_shape_std (ConnectedRegions, SelectedRegions, 'max_area', 70)

      //reduce_domain (ImageGauss, SelectedRegions, ImageReduced)


      ho_LocalMaxima.Dispose();
      HOperatorSet.LocalMax(ho_ImageGauss, out ho_LocalMaxima);
      ho_ImageReduced1.Dispose();
      HOperatorSet.ReduceDomain(ho_ImageGauss, ho_LocalMaxima, out ho_ImageReduced1
          );
      ho_ConnectedRegions1.Dispose();
      HOperatorSet.Connection(ho_ImageReduced1, out ho_ConnectedRegions1);
      hv_Area.Dispose();hv_Row.Dispose();hv_Column.Dispose();
      HOperatorSet.AreaCenter(ho_ConnectedRegions1, out hv_Area, out hv_Row, out hv_Column);
      hv_Grayval.Dispose();
      HOperatorSet.GetGrayval(ho_ImageReduced1, hv_Row, hv_Column, out hv_Grayval);

      hv_Max.Dispose();
      HOperatorSet.TupleMax(hv_Grayval, out hv_Max);

      hv_Dist_CamaraoPiso.Dispose();
      hv_Dist_CamaraoPiso = new HTuple(hv_Max);

      hv_Area.Dispose();
      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_Grayval.Dispose();
      hv_Max.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Area.Dispose();
      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_Grayval.Dispose();
      hv_Max.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Bolean (HTuple hv_SacaFoto, out HTuple hv_SacaFotoOut)
  {



    // Local iconic variables 
    // Initialize local and output iconic variables 
    hv_SacaFotoOut = new HTuple();
    hv_SacaFotoOut.Dispose();
    hv_SacaFotoOut = new HTuple(hv_SacaFoto);
    if ((int)(new HTuple(hv_SacaFotoOut.TupleEqual("False"))) != 0)
    {
      hv_SacaFotoOut.Dispose();
      hv_SacaFotoOut = 0;
    }
    else if ((int)(new HTuple(hv_SacaFotoOut.TupleEqual("True"))) != 0)
    {
      hv_SacaFotoOut.Dispose();
      hv_SacaFotoOut = 1;
    }


    return;
  }

  public void Get_Cam_Parameters (out HTuple hv_StartCamParam, out HTuple hv_CameraPose)
  {


    // Local iconic variables 
    // Initialize local and output iconic variables 
    hv_StartCamParam = new HTuple();
    hv_CameraPose = new HTuple();

    //****************************
    //Chile*
    hv_StartCamParam.Dispose();
    HOperatorSet.ReadCamPar("C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/7.-HandEye/2. procilica/FAT_Parameters/ParametrosBases.cal", 
        out hv_StartCamParam);
    //*****************************
    //USA
    hv_StartCamParam.Dispose();
    HOperatorSet.ReadCamPar("C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/7.-HandEye/2. procilica/FAT_Parameters/ParametrosBases.cal", 
        out hv_StartCamParam);

    hv_CameraPose.Dispose();
    hv_CameraPose = new HTuple();
    hv_CameraPose[0] = 0.0920832;
    hv_CameraPose[1] = -0.0275879;
    hv_CameraPose[2] = 0.791785;
    hv_CameraPose[3] = 358.714;
    hv_CameraPose[4] = 1.19796;
    hv_CameraPose[5] = 90.4632;
    hv_CameraPose[6] = 0;
    //************************




    return;
  }

  public void get_CameraEstereoConection (HTuple hv_Conexion_Camara, HTuple hv_NxLib, 
      HTuple hv_SerialHandle, out HTuple hv_ReintentosConecionEstereo, out HTuple hv_NxLibOut, 
      out HTuple hv_Camera_1, out HTuple hv_Conexion_CamaraOut)
  {



    // Local iconic variables 
    // Initialize local and output iconic variables 
    hv_ReintentosConecionEstereo = new HTuple();
    hv_NxLibOut = new HTuple();
    hv_Camera_1 = new HTuple();
    hv_Conexion_CamaraOut = new HTuple();
    hv_Conexion_CamaraOut.Dispose();
    hv_Conexion_CamaraOut = new HTuple(hv_Conexion_Camara);
    hv_NxLibOut.Dispose();
    hv_NxLibOut = new HTuple(hv_NxLib);
    hv_ReintentosConecionEstereo.Dispose();
    hv_ReintentosConecionEstereo = 1;
    while ((int)((new HTuple(hv_Conexion_CamaraOut.TupleNot())).TupleAnd(new HTuple(hv_ReintentosConecionEstereo.TupleLessEqual(
        3)))) != 0)
    {

      HOperatorSet.CloseFramegrabber(hv_NxLibOut);

      hv_NxLibOut.Dispose();hv_Camera_1.Dispose();hv_Conexion_CamaraOut.Dispose();
      Conectar_Ensenso_N35(24001, out hv_NxLibOut, out hv_Camera_1, out hv_Conexion_CamaraOut);

      Send_Data_Info("### Error Faltal #### Camara Estereo R1 NO Conectada ", hv_SerialHandle);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      Send_Data_Info("### Error Faltal #### Reintento Numero ->  "+hv_ReintentosConecionEstereo, 
          hv_SerialHandle);
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      {
      HTuple 
        ExpTmpLocalVar_ReintentosConecionEstereo = hv_ReintentosConecionEstereo+1;
      hv_ReintentosConecionEstereo.Dispose();
      hv_ReintentosConecionEstereo = ExpTmpLocalVar_ReintentosConecionEstereo;
      }
      }

    }


    return;
  }

  public void Get_Centro_and_Esquina (HObject ho_Esquina_Left, HObject ho_Xobj1, 
      HObject ho_Yobj1, HObject ho_Zobj1, out HObject ho_Esquina_LeftOut, out HTuple hv_row1, 
      out HTuple hv_col1, out HTuple hv_CentroX, out HTuple hv_CentroY, out HTuple hv_CentroZ, 
      out HTuple hv_Nelementos)
  {



    // Stack for temporary objects 
    HObject[] OTemp = new HObject[20];

    // Local iconic variables 

    // Local control variables 

    HTuple hv_Phi = new HTuple(), hv_Area = new HTuple();
    HTuple hv_Row = new HTuple(), hv_Column = new HTuple();
    HTuple hv_row2 = new HTuple(), hv_col2 = new HTuple();
    HTuple hv_WindowHandle = new HTuple(), hv_OffsetX = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Esquina_LeftOut);
    hv_row1 = new HTuple();
    hv_col1 = new HTuple();
    hv_CentroX = new HTuple();
    hv_CentroY = new HTuple();
    hv_CentroZ = new HTuple();
    hv_Nelementos = new HTuple();
    try
    {
      ho_Esquina_LeftOut.Dispose();
      ho_Esquina_LeftOut = new HObject(ho_Esquina_Left);
      {
      HObject ExpTmpOutVar_0;
      HOperatorSet.ShapeTrans(ho_Esquina_LeftOut, out ExpTmpOutVar_0, "rectangle2");
      ho_Esquina_LeftOut.Dispose();
      ho_Esquina_LeftOut = ExpTmpOutVar_0;
      }
      hv_Phi.Dispose();
      HOperatorSet.OrientationRegion(ho_Esquina_LeftOut, out hv_Phi);
      //Angulo := Phi*180/3.1415 -90
      //Phi := 0
      hv_Area.Dispose();hv_Row.Dispose();hv_Column.Dispose();
      HOperatorSet.AreaCenter(ho_Esquina_LeftOut, out hv_Area, out hv_Row, out hv_Column);
      hv_Nelementos.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Nelementos = new HTuple(hv_Area.TupleLength()
          );
      }


      hv_row1.Dispose();
      HOperatorSet.RegionFeatures(ho_Esquina_LeftOut, "row1", out hv_row1);
      hv_col1.Dispose();
      HOperatorSet.RegionFeatures(ho_Esquina_LeftOut, "column1", out hv_col1);

      hv_row2.Dispose();
      HOperatorSet.RegionFeatures(ho_Esquina_LeftOut, "row2", out hv_row2);
      hv_col2.Dispose();
      HOperatorSet.RegionFeatures(ho_Esquina_LeftOut, "column2", out hv_col2);
      HOperatorSet.SetLineWidth(hv_ExpDefaultWinHandle, 10);

      //dev_get_window(...);
      HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_row1, hv_col1, 6, 0);
      HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_row2, hv_col2, 6, 0);


      hv_CentroX.Dispose();
      HOperatorSet.GetGrayval(ho_Xobj1, hv_Row, hv_Column, out hv_CentroX);
      hv_CentroY.Dispose();
      HOperatorSet.GetGrayval(ho_Yobj1, hv_Row, hv_Column, out hv_CentroY);
      hv_CentroZ.Dispose();
      HOperatorSet.GetGrayval(ho_Zobj1, hv_Row, hv_Column, out hv_CentroZ);

      if ((int)(new HTuple(hv_CentroX.TupleEqual(0))) != 0)
      {
        for (hv_OffsetX=1; (int)hv_OffsetX<=50; hv_OffsetX = (int)hv_OffsetX + 1)
        {
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_CentroX.Dispose();
          HOperatorSet.GetGrayval(ho_Xobj1, hv_Row, hv_Column+hv_OffsetX, out hv_CentroX);
          }
          if ((int)(new HTuple(hv_CentroX.TupleNotEqual(0))) != 0)
          {
            break;
          }
        }
      }

      if ((int)(new HTuple(hv_CentroY.TupleEqual(0))) != 0)
      {
        for (hv_OffsetX=1; (int)hv_OffsetX<=50; hv_OffsetX = (int)hv_OffsetX + 1)
        {
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_CentroY.Dispose();
          HOperatorSet.GetGrayval(ho_Xobj1, hv_Row, hv_Column+hv_OffsetX, out hv_CentroY);
          }
          if ((int)(new HTuple(hv_CentroY.TupleNotEqual(0))) != 0)
          {
            break;
          }
        }
      }


      hv_Phi.Dispose();
      hv_Area.Dispose();
      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_row2.Dispose();
      hv_col2.Dispose();
      hv_WindowHandle.Dispose();
      hv_OffsetX.Dispose();

      return;



    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Phi.Dispose();
      hv_Area.Dispose();
      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_row2.Dispose();
      hv_col2.Dispose();
      hv_WindowHandle.Dispose();
      hv_OffsetX.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Centro_and_Esquina_COPY_1 (HObject ho_Esquina_Left, HObject ho_Xobj1, 
      HObject ho_Yobj1, HObject ho_Zobj1, out HObject ho_Esquina_LeftOut, out HTuple hv_row1, 
      out HTuple hv_col1, out HTuple hv_CentroX, out HTuple hv_CentroY, out HTuple hv_CentroZ, 
      out HTuple hv_Nelementos)
  {



    // Stack for temporary objects 
    HObject[] OTemp = new HObject[20];

    // Local iconic variables 

    HObject ho_Image, ho_Img1, ho_Img2, ho_ImageReduced2;
    HObject ho_ImageResult, ho_MixedImage, ho_ImageCorner, ho_LocalMaxima;
    HObject ho_Regions2, ho_LocalMaxima1, ho_ConnectedRegions1;

    // Local control variables 

    HTuple hv_Phi = new HTuple(), hv_Area = new HTuple();
    HTuple hv_Row = new HTuple(), hv_Column = new HTuple();
    HTuple hv_row2 = new HTuple(), hv_col2 = new HTuple();
    HTuple hv_WindowHandle = new HTuple(), hv_Width = new HTuple();
    HTuple hv_Height = new HTuple(), hv_Area1 = new HTuple();
    HTuple hv_RowToFind = new HTuple(), hv_ColumToFind = new HTuple();
    HTuple hv_Grayval = new HTuple(), hv_Function = new HTuple();
    HTuple hv_FilaPattern = new HTuple(), hv_ColumnasPattern = new HTuple();
    HTuple hv_Ptr_Min = new HTuple(), hv_Ptr_Min2 = new HTuple();
    HTuple hv_Ptr_Min3 = new HTuple(), hv_EsquinaDetectadas = new HTuple();
    HTuple hv_Angle = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Esquina_LeftOut);
    HOperatorSet.GenEmptyObj(out ho_Image);
    HOperatorSet.GenEmptyObj(out ho_Img1);
    HOperatorSet.GenEmptyObj(out ho_Img2);
    HOperatorSet.GenEmptyObj(out ho_ImageReduced2);
    HOperatorSet.GenEmptyObj(out ho_ImageResult);
    HOperatorSet.GenEmptyObj(out ho_MixedImage);
    HOperatorSet.GenEmptyObj(out ho_ImageCorner);
    HOperatorSet.GenEmptyObj(out ho_LocalMaxima);
    HOperatorSet.GenEmptyObj(out ho_Regions2);
    HOperatorSet.GenEmptyObj(out ho_LocalMaxima1);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions1);
    hv_row1 = new HTuple();
    hv_col1 = new HTuple();
    hv_CentroX = new HTuple();
    hv_CentroY = new HTuple();
    hv_CentroZ = new HTuple();
    hv_Nelementos = new HTuple();
    try
    {
      ho_Esquina_LeftOut.Dispose();
      ho_Esquina_LeftOut = new HObject(ho_Esquina_Left);
      {
      HObject ExpTmpOutVar_0;
      HOperatorSet.ShapeTrans(ho_Esquina_LeftOut, out ExpTmpOutVar_0, "rectangle2");
      ho_Esquina_LeftOut.Dispose();
      ho_Esquina_LeftOut = ExpTmpOutVar_0;
      }
      hv_Phi.Dispose();
      HOperatorSet.OrientationRegion(ho_Esquina_LeftOut, out hv_Phi);
      //Angulo := Phi*180/3.1415 -90
      //Phi := 0
      hv_Area.Dispose();hv_Row.Dispose();hv_Column.Dispose();
      HOperatorSet.AreaCenter(ho_Esquina_LeftOut, out hv_Area, out hv_Row, out hv_Column);
      hv_Nelementos.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Nelementos = new HTuple(hv_Area.TupleLength()
          );
      }
      //dev_set_line_width (7)
      //Length := 80
      //disp_arrow (200000, Row, Column, Row + cos(Phi ) * Length, Column + sin(Phi  ) * Length, 3)


      hv_row1.Dispose();
      HOperatorSet.RegionFeatures(ho_Esquina_LeftOut, "row1", out hv_row1);
      hv_col1.Dispose();
      HOperatorSet.RegionFeatures(ho_Esquina_LeftOut, "column1", out hv_col1);

      hv_row2.Dispose();
      HOperatorSet.RegionFeatures(ho_Esquina_LeftOut, "row2", out hv_row2);
      hv_col2.Dispose();
      HOperatorSet.RegionFeatures(ho_Esquina_LeftOut, "column2", out hv_col2);
      HOperatorSet.SetLineWidth(hv_ExpDefaultWinHandle, 10);

      //dev_get_window(...);
      HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_row1, hv_col1, 6, 0);
      HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_row2, hv_col2, 6, 0);


      hv_CentroX.Dispose();
      HOperatorSet.GetGrayval(ho_Xobj1, hv_Row, hv_Column, out hv_CentroX);
      hv_CentroY.Dispose();
      HOperatorSet.GetGrayval(ho_Yobj1, hv_Row, hv_Column, out hv_CentroY);
      hv_CentroZ.Dispose();
      HOperatorSet.GetGrayval(ho_Zobj1, hv_Row, hv_Column, out hv_CentroZ);
      ho_Image.Dispose();
      ho_Img1.Dispose();
      ho_Img2.Dispose();
      ho_ImageReduced2.Dispose();
      ho_ImageResult.Dispose();
      ho_MixedImage.Dispose();
      ho_ImageCorner.Dispose();
      ho_LocalMaxima.Dispose();
      ho_Regions2.Dispose();
      ho_LocalMaxima1.Dispose();
      ho_ConnectedRegions1.Dispose();

      hv_Phi.Dispose();
      hv_Area.Dispose();
      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_row2.Dispose();
      hv_col2.Dispose();
      hv_WindowHandle.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_Area1.Dispose();
      hv_RowToFind.Dispose();
      hv_ColumToFind.Dispose();
      hv_Grayval.Dispose();
      hv_Function.Dispose();
      hv_FilaPattern.Dispose();
      hv_ColumnasPattern.Dispose();
      hv_Ptr_Min.Dispose();
      hv_Ptr_Min2.Dispose();
      hv_Ptr_Min3.Dispose();
      hv_EsquinaDetectadas.Dispose();
      hv_Angle.Dispose();

      return;





      hv_Width.Dispose();hv_Height.Dispose();
      HOperatorSet.GetImageSize(ho_Zobj1, out hv_Width, out hv_Height);
      ho_Image.Dispose();
      HOperatorSet.GenImageConst(out ho_Image, "byte", hv_Width, hv_Height);

      ho_Img1.Dispose();
      HOperatorSet.GenImageProto(ho_Zobj1, out ho_Img1, 10);
      ho_Img2.Dispose();
      HOperatorSet.GenImageProto(ho_Zobj1, out ho_Img2, 150);
      ho_ImageReduced2.Dispose();
      HOperatorSet.ReduceDomain(ho_Img2, ho_Esquina_LeftOut, out ho_ImageReduced2
          );

      ho_ImageResult.Dispose();
      HOperatorSet.AddImage(ho_Img1, ho_ImageReduced2, out ho_ImageResult, 1, 100);
      ho_MixedImage.Dispose();
      HOperatorSet.PaintGray(ho_ImageReduced2, ho_Img1, out ho_MixedImage);
      ho_ImageCorner.Dispose();
      HOperatorSet.CornerResponse(ho_MixedImage, out ho_ImageCorner, 3, 0.04);

      ho_LocalMaxima.Dispose();
      HOperatorSet.LocalMax(ho_ImageCorner, out ho_LocalMaxima);

      ho_Regions2.Dispose();
      HOperatorSet.Threshold(ho_ImageCorner, out ho_Regions2, 1000, 5000);

      {
      HObject ExpTmpOutVar_0;
      HOperatorSet.ReduceDomain(ho_ImageCorner, ho_Regions2, out ExpTmpOutVar_0);
      ho_ImageCorner.Dispose();
      ho_ImageCorner = ExpTmpOutVar_0;
      }

      ho_LocalMaxima1.Dispose();
      HOperatorSet.LocalMax(ho_ImageCorner, out ho_LocalMaxima1);
      ho_ConnectedRegions1.Dispose();
      HOperatorSet.Connection(ho_LocalMaxima1, out ho_ConnectedRegions1);
      hv_Area1.Dispose();hv_RowToFind.Dispose();hv_ColumToFind.Dispose();
      HOperatorSet.AreaCenter(ho_ConnectedRegions1, out hv_Area1, out hv_RowToFind, 
          out hv_ColumToFind);
      hv_Grayval.Dispose();
      HOperatorSet.GetGrayval(ho_ImageCorner, hv_RowToFind, hv_ColumToFind, out hv_Grayval);
      hv_Function.Dispose();
      HOperatorSet.CreateFunct1dArray(hv_Grayval, out hv_Function);


      hv_FilaPattern.Dispose();hv_ColumnasPattern.Dispose();hv_Ptr_Min.Dispose();hv_Ptr_Min2.Dispose();hv_Ptr_Min3.Dispose();hv_EsquinaDetectadas.Dispose();
      Get_EsquinasPattern_COPY_3(hv_Grayval, hv_RowToFind, hv_ColumToFind, hv_Width, 
          out hv_FilaPattern, out hv_ColumnasPattern, out hv_Ptr_Min, out hv_Ptr_Min2, 
          out hv_Ptr_Min3, out hv_EsquinaDetectadas);

      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowToFind.TupleSelect(hv_Ptr_Min3), 
          hv_ColumToFind.TupleSelect(hv_Ptr_Min3), 50, 0);
      }



      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Angle.Dispose();
      HOperatorSet.AngleLx(hv_RowToFind.TupleSelect(hv_Ptr_Min2), hv_ColumToFind.TupleSelect(
          hv_Ptr_Min2), hv_RowToFind.TupleSelect(hv_Ptr_Min), hv_ColumToFind.TupleSelect(
          hv_Ptr_Min), out hv_Angle);
      }
      {
      HTuple ExpTmpOutVar_0;
      HOperatorSet.TupleDeg(hv_Angle, out ExpTmpOutVar_0);
      hv_Angle.Dispose();
      hv_Angle = ExpTmpOutVar_0;
      }

    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_Image.Dispose();
      ho_Img1.Dispose();
      ho_Img2.Dispose();
      ho_ImageReduced2.Dispose();
      ho_ImageResult.Dispose();
      ho_MixedImage.Dispose();
      ho_ImageCorner.Dispose();
      ho_LocalMaxima.Dispose();
      ho_Regions2.Dispose();
      ho_LocalMaxima1.Dispose();
      ho_ConnectedRegions1.Dispose();

      hv_Phi.Dispose();
      hv_Area.Dispose();
      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_row2.Dispose();
      hv_col2.Dispose();
      hv_WindowHandle.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_Area1.Dispose();
      hv_RowToFind.Dispose();
      hv_ColumToFind.Dispose();
      hv_Grayval.Dispose();
      hv_Function.Dispose();
      hv_FilaPattern.Dispose();
      hv_ColumnasPattern.Dispose();
      hv_Ptr_Min.Dispose();
      hv_Ptr_Min2.Dispose();
      hv_Ptr_Min3.Dispose();
      hv_EsquinaDetectadas.Dispose();
      hv_Angle.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Core_Presence (out HObject ho_Objeto_1, HTuple hv_SerialHandle, 
      HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Vector_Estado_Fx, HTuple hv_Vector_ID_Core_by_Segment_Pallet_1, 
      HTuple hv_Vector_ID_Core_by_Segment_Pallet_2, HTuple hv_Vector_ID_Core_by_Segment_Pallet_3, 
      HTuple hv_Vector_ID_Core_by_Segment_Pallet_4, HTuple hv_Path_SFM_Segmentos, 
      HTuple hv_Path_3D_Segmentos, HTuple hv_Path_CORE_ID, HTuple hv_N_Pallet_to_Scan, 
      HTuple hv_NxLib_1, HTuple hv_Camera_1, HTuple hv_Vector_ID_Core_by_Segment_Pallet_5, 
      HTuple hv_Vector_ID_Core_by_Segment_Pallet_6, HTuple hv_ExisteAlgunApilado, 
      out HTuple hv_g_CamInBasePose1)
  {



    // Local iconic variables 

    HObject ho_Objeto_0, ho_Objeto_2, ho_Objeto_3;
    HObject ho_Zobj1, ho_Xobj1, ho_Yobj1, ho_Img_Left_Esquina;

    // Local control variables 

    HTuple hv_Parametros_Visualizacion = new HTuple();
    HTuple hv_Valores_Visualizacion = new HTuple(), hv_WindowHandle = new HTuple();
    HTuple hv_Estado = new HTuple(), hv_Vector_ID_Core_by_Segment_Pallet = new HTuple();
    HTuple hv_IsA_Sleeve = new HTuple(), hv_Escena3D_RAW = new HTuple();
    HTuple hv_Base_esquina = new HTuple(), hv_Estado_Fx = new HTuple();
    HTuple hv_Mensaje = new HTuple(), hv_Visualizar3D = new HTuple();
    HTuple hv_Variable_PLC_Existencia = new HTuple(), hv_Nsectores_Pallet = new HTuple();
    HTuple hv_j = new HTuple(), hv_Tag_Destino = new HTuple();
    HTuple hv_Valor_Variable = new HTuple(), hv_Exception = new HTuple();
    HTuple hv_Tag_Manga = new HTuple(), hv_NumEntidadManga = new HTuple();
    HTuple hv_Procesando = new HTuple(), hv_Resultado = new HTuple();

    HTupleVector hvec_Pose_Robot = new HTupleVector(2);
    HTupleVector hvec_Vector_Existencia_Core = new HTupleVector(2);
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Objeto_1);
    HOperatorSet.GenEmptyObj(out ho_Objeto_0);
    HOperatorSet.GenEmptyObj(out ho_Objeto_2);
    HOperatorSet.GenEmptyObj(out ho_Objeto_3);
    HOperatorSet.GenEmptyObj(out ho_Zobj1);
    HOperatorSet.GenEmptyObj(out ho_Xobj1);
    HOperatorSet.GenEmptyObj(out ho_Yobj1);
    HOperatorSet.GenEmptyObj(out ho_Img_Left_Esquina);
    hv_g_CamInBasePose1 = new HTuple();
    try
    {


      hv_Parametros_Visualizacion.Dispose();
      hv_Parametros_Visualizacion = new HTuple();
      hv_Parametros_Visualizacion[0] = "disp_pose";
      hv_Parametros_Visualizacion[1] = "color_attrib";
      hv_Parametros_Visualizacion[2] = "lut";
      hv_Parametros_Visualizacion[3] = "disp_lines";
      hv_Parametros_Visualizacion[4] = "point_size";
      hv_Valores_Visualizacion.Dispose();
      hv_Valores_Visualizacion = new HTuple();
      hv_Valores_Visualizacion[0] = "true";
      hv_Valores_Visualizacion[1] = "coord_z";
      hv_Valores_Visualizacion[2] = "rainbow";
      hv_Valores_Visualizacion[3] = "false";
      hv_Valores_Visualizacion[4] = 1;
      //dev_get_window(...);

      //****************************************************
      hv_Estado.Dispose();
      hv_Estado = 1;
      Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
      //# ##################################################

      hv_Vector_ID_Core_by_Segment_Pallet.Dispose();
      Get_Vector_Info_Cores_byUser(hv_N_Pallet_to_Scan, hv_Vector_ID_Core_by_Segment_Pallet_1, 
          hv_Vector_ID_Core_by_Segment_Pallet_2, hv_Vector_ID_Core_by_Segment_Pallet_3, 
          hv_Vector_ID_Core_by_Segment_Pallet_4, hv_Vector_ID_Core_by_Segment_Pallet_5, 
          hv_Vector_ID_Core_by_Segment_Pallet_6, out hv_Vector_ID_Core_by_Segment_Pallet);


      //* Busco si todos son sleeves

      hv_IsA_Sleeve.Dispose();
      Is_a_Sleeve(hv_Vector_ID_Core_by_Segment_Pallet, out hv_IsA_Sleeve);

      //****************************************************************************************************************************
      //***********  Capturo Imagenes **********************************************************************************************


      //***********************
      //posicion de la camara*
      //***********************


      hv_g_CamInBasePose1.Dispose();
      Get_Robot_Pose(hv_SerialHandle, out hv_g_CamInBasePose1);

      ho_Objeto_0.Dispose();ho_Objeto_1.Dispose();ho_Objeto_2.Dispose();ho_Objeto_3.Dispose();ho_Zobj1.Dispose();ho_Xobj1.Dispose();ho_Yobj1.Dispose();ho_Img_Left_Esquina.Dispose();hvec_Pose_Robot.Dispose();hv_Escena3D_RAW.Dispose();hv_Base_esquina.Dispose();hv_Estado_Fx.Dispose();
      Get_Pallet_Model(out ho_Objeto_0, out ho_Objeto_1, out ho_Objeto_2, out ho_Objeto_3, 
          out ho_Zobj1, out ho_Xobj1, out ho_Yobj1, out ho_Img_Left_Esquina, hv_NxLib_1, 
          hv_Camera_1, hvec_Vector_Estado_Fx, hv_SerialHandle, hv_N_Pallet_to_Scan, 
          hv_IsA_Sleeve, out hvec_Pose_Robot, out hv_Escena3D_RAW, out hv_Base_esquina, 
          out hv_Estado_Fx);




      //Visualizar_3D ([Escena3D_RAW], Parametros_Visualizacion, Valores_Visualizacion, false, [], [], [], WindowHandle, PoseOut1)


      //*****************************************************************************************************************************
      if ((int)(new HTuple(hv_Estado_Fx.TupleEqual(0))) != 0)
      {
        hv_Mensaje.Dispose();
        hv_Mensaje = "##ERROR## Bloque 0";
        Send_Data_Info(hv_Mensaje, hv_SerialHandle);

        ho_Objeto_0.Dispose();
        ho_Objeto_2.Dispose();
        ho_Objeto_3.Dispose();
        ho_Zobj1.Dispose();
        ho_Xobj1.Dispose();
        ho_Yobj1.Dispose();
        ho_Img_Left_Esquina.Dispose();

        hv_Parametros_Visualizacion.Dispose();
        hv_Valores_Visualizacion.Dispose();
        hv_WindowHandle.Dispose();
        hv_Estado.Dispose();
        hv_Vector_ID_Core_by_Segment_Pallet.Dispose();
        hv_IsA_Sleeve.Dispose();
        hv_Escena3D_RAW.Dispose();
        hv_Base_esquina.Dispose();
        hv_Estado_Fx.Dispose();
        hv_Mensaje.Dispose();
        hv_Visualizar3D.Dispose();
        hv_Variable_PLC_Existencia.Dispose();
        hv_Nsectores_Pallet.Dispose();
        hv_j.Dispose();
        hv_Tag_Destino.Dispose();
        hv_Valor_Variable.Dispose();
        hv_Exception.Dispose();
        hv_Tag_Manga.Dispose();
        hv_NumEntidadManga.Dispose();
        hv_Procesando.Dispose();
        hv_Resultado.Dispose();
        hvec_Pose_Robot.Dispose();
        hvec_Vector_Existencia_Core.Dispose();

        return;

      }
      //********************************************************************


      //# ###############################################################################
      //2. Adquiero informacion del usuario quien indica donde ira cada core en el pallet
      //# ###############################################################################

      //# ### Envio data de estado ######################################################
      hv_Estado.Dispose();
      hv_Estado = 2;
      Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);

      //# ##############################################################################
      //3. Busco los cores del usuario Vector_ID_Core_by_Segment_Pallet en el pallet N_Pallet_to_Scan
      //# ##############################################################################

      //# ### Envio data de estado ########################
      hv_Estado.Dispose();
      hv_Estado = 3;
      Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
      //# ################################################# 


      hvec_Vector_Existencia_Core.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Existencia_Core = dh.Take((
          dh.Add(new HTupleVector(2)).Insert(0,(dh.Add(new HTupleVector(1)).Insert(0,dh.Add(new HTupleVector(new HTuple())))))));
      }
      hvec_Vector_Existencia_Core[0][0] = new HTupleVector(new HTuple("CORE"));
      hvec_Vector_Existencia_Core[0][1] = new HTupleVector(new HTuple("Existencia"));
      hv_Visualizar3D.Dispose();
      hv_Visualizar3D = 0;


      //Escritura de Vector_Existencia_Core_New
      hv_Variable_PLC_Existencia.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Variable_PLC_Existencia = ("_EV01_I_Pallet"+hv_N_Pallet_to_Scan)+"ZValid.";
      }
      hv_Nsectores_Pallet.Dispose();
      hv_Nsectores_Pallet = 9;



      try
      {
        HTuple end_val79 = hv_Nsectores_Pallet;
        HTuple step_val79 = 1;
        for (hv_j=1; hv_j.Continue(end_val79, step_val79); hv_j = hv_j.TupleAdd(step_val79))
        {

          if ((int)(new HTuple(((hv_Vector_ID_Core_by_Segment_Pallet.TupleSelect(
              hv_j-1))).TupleEqual(" "))) != 0)
          {
            hv_Tag_Destino.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_Tag_Destino = hv_Variable_PLC_Existencia+hv_j;
            }
            //************************
            hv_Valor_Variable.Dispose();
            hv_Valor_Variable = 1;
            //************************
            Send_EthernetIP_Data(hv_Tag_Destino, hv_Valor_Variable, hv_SerialHandle);

          }
          else
          {
            hv_Tag_Destino.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_Tag_Destino = hv_Variable_PLC_Existencia+hv_j;
            }
            //************************
            hv_Valor_Variable.Dispose();
            hv_Valor_Variable = 0;
            //************************
            Send_Data_Info("-------------------------", hv_SerialHandle);
            Send_EthernetIP_Data(hv_Tag_Destino, hv_Valor_Variable, hv_SerialHandle);
            Send_Data_Info("-------------------------", hv_SerialHandle);

          }



        }
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        Send_Data_Info(hv_Exception, hv_SerialHandle);
      }


      //**************************************************
      //try
        //for j := 1 to Nsectores_Pallet by 1


          //Tag_Destino := Variable_PLC_Existencia+(j)
          //************************
          //Valor_Variable := 1
          //************************
          //Send_EthernetIP_Data (Tag_Destino, Valor_Variable, SerialHandle)
        //endfor
      //catch (Exception)
        //Send_Data_Info (Exception, SerialHandle)
      //endtry
      //****************************************************





      Send_Data_Info("----------> Es apilado? <----------", hv_SerialHandle);
      //***************************************************************
      //Escribo si existen algun elemento apilado
      //***************************************************************
      hv_Tag_Destino.Dispose();
      hv_Tag_Destino = "_EV01_I_EsApilado";
      //***************************************************************
      hv_Valor_Variable.Dispose();
      hv_Valor_Variable = new HTuple(hv_ExisteAlgunApilado);
      //****************************************************************
      Send_EthernetIP_Data(hv_Tag_Destino, hv_Valor_Variable, hv_SerialHandle);
      //****************************************************************
      if ((int)(new HTuple(hv_Valor_Variable.TupleEqual(1))) != 0)
      {
        Send_Data_Info("----------> SI <----------", hv_SerialHandle);
      }
      else
      {
        Send_Data_Info("----------> NO <----------", hv_SerialHandle);
      }


      //***************************************************************************
      //Es una Manga
      //***************************************************************************
      Send_Data_Info("----------> Es Manga? <----------", hv_SerialHandle);

      if ((int)(hv_IsA_Sleeve) != 0)
      {
        hv_Tag_Manga.Dispose();
        hv_Tag_Manga = "_EBD_I_NumEntidad";
        hv_NumEntidadManga.Dispose();
        hv_NumEntidadManga = 3;
        Send_EthernetIP_Data(hv_Tag_Manga, hv_NumEntidadManga, hv_SerialHandle);
        Send_Data_Info("----------> SI <----------", hv_SerialHandle);
      }
      else
      {
        hv_Tag_Manga.Dispose();
        hv_Tag_Manga = "_EBD_I_NumEntidad";
        hv_NumEntidadManga.Dispose();
        hv_NumEntidadManga = 2;
        Send_EthernetIP_Data(hv_Tag_Manga, hv_NumEntidadManga, hv_SerialHandle);
        Send_Data_Info("----------> NO <----------", hv_SerialHandle);
      }
      //****************************************************************************




      //# ### Envio data de estado ########################
      hv_Procesando.Dispose();
      hv_Procesando = 1;
      hv_Resultado.Dispose();
      hv_Resultado = 1;
      Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);

      HOperatorSet.SetLineWidth(hv_ExpDefaultWinHandle, 1);


      Send_Data_Info("----------> Fin de BLOQUE 1 <----------", hv_SerialHandle);

      ho_Objeto_0.Dispose();
      ho_Objeto_2.Dispose();
      ho_Objeto_3.Dispose();
      ho_Zobj1.Dispose();
      ho_Xobj1.Dispose();
      ho_Yobj1.Dispose();
      ho_Img_Left_Esquina.Dispose();

      hv_Parametros_Visualizacion.Dispose();
      hv_Valores_Visualizacion.Dispose();
      hv_WindowHandle.Dispose();
      hv_Estado.Dispose();
      hv_Vector_ID_Core_by_Segment_Pallet.Dispose();
      hv_IsA_Sleeve.Dispose();
      hv_Escena3D_RAW.Dispose();
      hv_Base_esquina.Dispose();
      hv_Estado_Fx.Dispose();
      hv_Mensaje.Dispose();
      hv_Visualizar3D.Dispose();
      hv_Variable_PLC_Existencia.Dispose();
      hv_Nsectores_Pallet.Dispose();
      hv_j.Dispose();
      hv_Tag_Destino.Dispose();
      hv_Valor_Variable.Dispose();
      hv_Exception.Dispose();
      hv_Tag_Manga.Dispose();
      hv_NumEntidadManga.Dispose();
      hv_Procesando.Dispose();
      hv_Resultado.Dispose();
      hvec_Pose_Robot.Dispose();
      hvec_Vector_Existencia_Core.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_Objeto_0.Dispose();
      ho_Objeto_2.Dispose();
      ho_Objeto_3.Dispose();
      ho_Zobj1.Dispose();
      ho_Xobj1.Dispose();
      ho_Yobj1.Dispose();
      ho_Img_Left_Esquina.Dispose();

      hv_Parametros_Visualizacion.Dispose();
      hv_Valores_Visualizacion.Dispose();
      hv_WindowHandle.Dispose();
      hv_Estado.Dispose();
      hv_Vector_ID_Core_by_Segment_Pallet.Dispose();
      hv_IsA_Sleeve.Dispose();
      hv_Escena3D_RAW.Dispose();
      hv_Base_esquina.Dispose();
      hv_Estado_Fx.Dispose();
      hv_Mensaje.Dispose();
      hv_Visualizar3D.Dispose();
      hv_Variable_PLC_Existencia.Dispose();
      hv_Nsectores_Pallet.Dispose();
      hv_j.Dispose();
      hv_Tag_Destino.Dispose();
      hv_Valor_Variable.Dispose();
      hv_Exception.Dispose();
      hv_Tag_Manga.Dispose();
      hv_NumEntidadManga.Dispose();
      hv_Procesando.Dispose();
      hv_Resultado.Dispose();
      hvec_Pose_Robot.Dispose();
      hvec_Vector_Existencia_Core.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Core_Presence_In_Pallet (HObject ho_Z, HObject ho_X, HObject ho_Y, 
      HObject ho_ImgLeftCamera_Esq, HTuple hv_Escena3D_RAW, HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Pose_Robot, 
      HTuple hv_N_Pallet_to_Scan, HTuple hv_Path_SFM_Segmentos, HTuple hv_Path_3D_Segmentos, 
      HTuple hv_Vector_ID_Core_by_Segment_Pallet, HTuple hv_Path_CORE_ID, HTuple hv_SerialHandle, 
      HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Vector_Estado_Fx, HTuple hv_Base_esquina, 
      HTuple hv_Visualizar3D, HTuple hv_Estado_Fx, out HTuple hv_Estado_SubProceso)
  {




    // Local iconic variables 

    // Local control variables 

    HTuple hv_Parametros_Visualizacion = new HTuple();
    HTuple hv_Valores_Visualizacion = new HTuple(), hv_Vector_Segmento = new HTuple();
    HTuple hv_ROI3D_NullFrame = new HTuple(), hv_ROI3D_rotate = new HTuple();
    HTuple hv_Exception = new HTuple(), hv_ErrorMsg0 = new HTuple();
    HTuple hv_ErrorMsg1 = new HTuple(), hv_ErrorMsg2 = new HTuple();
    HTuple hv_ErrorMsg3 = new HTuple(), hv_MensajeError = new HTuple();
    HTuple hv_Mensaje = new HTuple(), hv_Procesando = new HTuple();
    HTuple hv_Estado = new HTuple(), hv_Resultado = new HTuple();
    HTuple hv_Msg_Sub_Proceso = new HTuple(), hv_Altura_Pallet = new HTuple();
    HTuple hv_Distancia_camara_Piso_Pallet = new HTuple();
    HTuple hv_Rango_Seguridad = new HTuple(), hv_Rango_posible_borde_pallet = new HTuple();
    HTuple hv_ObjectModel3D_Borde_Pallet = new HTuple(), hv_WindowHandle = new HTuple();
    HTuple hv_PoseOut1 = new HTuple(), hv_Pose_Segmentos = new HTuple();
    HTuple hv_Vector_Entidades_Segmento = new HTuple(), hv_Sampling = new HTuple();
    HTuple hv_Variable_PLC_Existencia = new HTuple(), hv_j = new HTuple();
    HTuple hv_Tag_Destino = new HTuple(), hv_Valor_Variable = new HTuple();
    HTuple hv_ValorVector = new HTuple(), hv_EstadoFx = new HTuple();

    HTupleVector hvec_Vector_Existencia_Core = new HTupleVector(2);
    HTupleVector hvec_Vector_Existencia_Core_New = new HTupleVector(2);
    // Initialize local and output iconic variables 
    hv_Estado_SubProceso = new HTuple();
    try
    {
      hv_Parametros_Visualizacion.Dispose();
      hv_Parametros_Visualizacion = new HTuple();
      hv_Parametros_Visualizacion[0] = "colored";
      hv_Parametros_Visualizacion[1] = "disp_pose";
      hv_Parametros_Visualizacion[2] = "point_size";
      hv_Valores_Visualizacion.Dispose();
      hv_Valores_Visualizacion = new HTuple();
      hv_Valores_Visualizacion[0] = 12;
      hv_Valores_Visualizacion[1] = "true";
      hv_Valores_Visualizacion[2] = 1;


      //*****************************************
      //1.- Obtengo el ROI3D del PALLET
      //*****************************************
      hv_Vector_Segmento.Dispose();
      hv_Vector_Segmento = new HTuple();
      hv_Vector_Segmento[0] = "A";
      hv_Vector_Segmento[1] = "B";
      hv_Vector_Segmento[2] = "C";
      hv_Vector_Segmento[3] = "D";
      hv_Vector_Segmento[4] = "E";
      hv_Vector_Segmento[5] = "F";
      hv_Vector_Segmento[6] = "G";
      hv_Vector_Segmento[7] = "H";
      hv_Vector_Segmento[8] = "I";

      try
      {
        hv_ROI3D_NullFrame.Dispose();hv_ROI3D_rotate.Dispose();
        Get_ROI3D_Pallet(out hv_ROI3D_NullFrame, out hv_ROI3D_rotate);

      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        HalconException.GetExceptionData(hv_Exception,"error_msg",out hv_ErrorMsg0);
        HalconException.GetExceptionData(hv_Exception,"procedure",out hv_ErrorMsg1);
        HalconException.GetExceptionData(hv_Exception,"operator",out hv_ErrorMsg2);
        HalconException.GetExceptionData(hv_Exception,"program_line",out hv_ErrorMsg3);

        hv_MensajeError.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_MensajeError = (((((hv_ErrorMsg0+" IN ")+hv_ErrorMsg1)+" IN FUNTION ")+hv_ErrorMsg2)+" IN LINE ")+hv_ErrorMsg3;
        }
        hv_Mensaje.Dispose();
        hv_Mensaje = new HTuple(hv_MensajeError);
        Send_Data_Info(hv_Mensaje, hv_SerialHandle);

        //# ### Envio data de estado ########################
        hv_Procesando.Dispose();
        hv_Procesando = 0;
        hv_Estado.Dispose();
        hv_Estado = 5;
        hv_Resultado.Dispose();
        hv_Resultado = 2;
        Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
        //# ################################################# 

        hv_Msg_Sub_Proceso.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Msg_Sub_Proceso = "#Error# "+hv_MensajeError;
        }

        hv_Parametros_Visualizacion.Dispose();
        hv_Valores_Visualizacion.Dispose();
        hv_Vector_Segmento.Dispose();
        hv_ROI3D_NullFrame.Dispose();
        hv_ROI3D_rotate.Dispose();
        hv_Exception.Dispose();
        hv_ErrorMsg0.Dispose();
        hv_ErrorMsg1.Dispose();
        hv_ErrorMsg2.Dispose();
        hv_ErrorMsg3.Dispose();
        hv_MensajeError.Dispose();
        hv_Mensaje.Dispose();
        hv_Procesando.Dispose();
        hv_Estado.Dispose();
        hv_Resultado.Dispose();
        hv_Msg_Sub_Proceso.Dispose();
        hv_Altura_Pallet.Dispose();
        hv_Distancia_camara_Piso_Pallet.Dispose();
        hv_Rango_Seguridad.Dispose();
        hv_Rango_posible_borde_pallet.Dispose();
        hv_ObjectModel3D_Borde_Pallet.Dispose();
        hv_WindowHandle.Dispose();
        hv_PoseOut1.Dispose();
        hv_Pose_Segmentos.Dispose();
        hv_Vector_Entidades_Segmento.Dispose();
        hv_Sampling.Dispose();
        hv_Variable_PLC_Existencia.Dispose();
        hv_j.Dispose();
        hv_Tag_Destino.Dispose();
        hv_Valor_Variable.Dispose();
        hv_ValorVector.Dispose();
        hv_EstadoFx.Dispose();
        hvec_Vector_Existencia_Core.Dispose();
        hvec_Vector_Existencia_Core_New.Dispose();

        return;
      }


      //# #######################################################
      //                   constantes
      //*****************************************
      //2.- Busco la esquina de la caja con cores
      //*****************************************
      //Filtro para buscar solo el borde en [mm]
      //Variables de  valor constante
      hv_Altura_Pallet.Dispose();
      hv_Altura_Pallet = 600;
      hv_Distancia_camara_Piso_Pallet.Dispose();
      hv_Distancia_camara_Piso_Pallet = 2340;
      hv_Rango_Seguridad.Dispose();
      hv_Rango_Seguridad = 200;
      hv_Rango_posible_borde_pallet.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Rango_posible_borde_pallet = hv_Distancia_camara_Piso_Pallet-hv_Altura_Pallet;
      }
      //# #######################################################
      try
      {
        hv_ObjectModel3D_Borde_Pallet.Dispose();
        Get_ObjectModel3D_Util(ho_Z, ho_X, ho_Y, ho_ImgLeftCamera_Esq, hv_Rango_posible_borde_pallet, 
            hv_Rango_Seguridad, out hv_ObjectModel3D_Borde_Pallet);
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        HalconException.GetExceptionData(hv_Exception,"error_msg",out hv_ErrorMsg0);
        HalconException.GetExceptionData(hv_Exception,"procedure",out hv_ErrorMsg1);
        HalconException.GetExceptionData(hv_Exception,"operator",out hv_ErrorMsg2);
        HalconException.GetExceptionData(hv_Exception,"program_line",out hv_ErrorMsg3);

        hv_MensajeError.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_MensajeError = (((((hv_ErrorMsg0+" IN ")+hv_ErrorMsg1)+" IN FUNTION ")+hv_ErrorMsg2)+" IN LINE ")+hv_ErrorMsg3;
        }
        //throw (MensajeError)

        //# ### Envio data de estado ###############################
        hv_Procesando.Dispose();
        hv_Procesando = 0;
        hv_Estado.Dispose();
        hv_Estado = 5;
        hv_Resultado.Dispose();
        hv_Resultado = 2;
        Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
        //# #######################################################    

        hv_Parametros_Visualizacion.Dispose();
        hv_Valores_Visualizacion.Dispose();
        hv_Vector_Segmento.Dispose();
        hv_ROI3D_NullFrame.Dispose();
        hv_ROI3D_rotate.Dispose();
        hv_Exception.Dispose();
        hv_ErrorMsg0.Dispose();
        hv_ErrorMsg1.Dispose();
        hv_ErrorMsg2.Dispose();
        hv_ErrorMsg3.Dispose();
        hv_MensajeError.Dispose();
        hv_Mensaje.Dispose();
        hv_Procesando.Dispose();
        hv_Estado.Dispose();
        hv_Resultado.Dispose();
        hv_Msg_Sub_Proceso.Dispose();
        hv_Altura_Pallet.Dispose();
        hv_Distancia_camara_Piso_Pallet.Dispose();
        hv_Rango_Seguridad.Dispose();
        hv_Rango_posible_borde_pallet.Dispose();
        hv_ObjectModel3D_Borde_Pallet.Dispose();
        hv_WindowHandle.Dispose();
        hv_PoseOut1.Dispose();
        hv_Pose_Segmentos.Dispose();
        hv_Vector_Entidades_Segmento.Dispose();
        hv_Sampling.Dispose();
        hv_Variable_PLC_Existencia.Dispose();
        hv_j.Dispose();
        hv_Tag_Destino.Dispose();
        hv_Valor_Variable.Dispose();
        hv_ValorVector.Dispose();
        hv_EstadoFx.Dispose();
        hvec_Vector_Existencia_Core.Dispose();
        hvec_Vector_Existencia_Core_New.Dispose();

        return;
      }

      //*****************************************************************************************************************************
      //dev_get_window(...);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_PoseOut1.Dispose();
      Visualizar_3D(hv_ObjectModel3D_Borde_Pallet.TupleConcat(hv_Escena3D_RAW), hv_Parametros_Visualizacion, 
          hv_Valores_Visualizacion, hv_Visualizar3D, new HTuple(), new HTuple(), 
          new HTuple(), hv_WindowHandle, out hv_PoseOut1);
      }
      //*****************************************************************************************************************************


      //**************************************************
      //      -> OLD CODE <-
      //SE BUSCA CON PROCESAMIENTO DE IMAGENES
      //SE MANTIENE POR COMPATIBILIDAD
      //2.2 Busco la esquina del palelt con SFM
      //
      //Parametros de control
      //**************************************************
      //**OldCode (Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, ObjectModel3D_Borde_Pallet, Vector_Estado_Fx, SerialHandle, SurfaceModelID, ObjectModel3D, Status, PoseOut1, Sampling, Sampling_Find, Keypoint, MinScore, N_matches, SFM, Escena3D, Objeto3D, Estado, PoseMLS, ScoreMLS, Pose_Refinada, Score_Refinado, SurfaceMatchingResultID1, Posicion3D_Objeto, Posicion3D_Objeto_REFIN, Obj_Detectado_EsquinaPallets)



      //******************************************************
      //Envio informacion de la esquina encontrada al Robot
      //******************************************************
      if ((int)(hv_Estado_Fx) != 0)
      {
        //Visualizar_3D ([ObjectModel3D_Borde_Pallet,Posicion3D_Objeto_REFIN,Escena3D_RAW], Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, [], [], [], WindowHandle1, PoseOut1)


        //******************************************************



        //# ############## GUARDAR  POSICION ESQUINA REFERENTE A LA BASE ####################################
        //# ## Debo conocer la transformada
        //# ## Guardar la posicion de la camara al NULLFRAME del robot.
        //# ##################################################################################################   


        Save_Pose_Palle(hv_SerialHandle, hv_Base_esquina, hv_N_Pallet_to_Scan, hvec_Pose_Robot);

        //# ##################################################################################################    

        //Enviar datos al Robot de Posicion de la esquia del pallet respecto a la brida
        //Es necesario convertir la coordenada
        //Send_Data_To_Robot (Base_esquina, SerialHandle)
        //Get_ObjInBasePose (Base_esquina, Pose_Robot, ObjInBasePose)

        //# ##################################################################################################    


      }
      else
      {
        //*******************************
        //Enviar por ETHERNETIP
        //*******************************

        //# ### Envio data de estado ############################################################################

        hv_Estado.Dispose();
        hv_Estado = 7;
        Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
        //# ######################################################################################################



        hv_Parametros_Visualizacion.Dispose();
        hv_Valores_Visualizacion.Dispose();
        hv_Vector_Segmento.Dispose();
        hv_ROI3D_NullFrame.Dispose();
        hv_ROI3D_rotate.Dispose();
        hv_Exception.Dispose();
        hv_ErrorMsg0.Dispose();
        hv_ErrorMsg1.Dispose();
        hv_ErrorMsg2.Dispose();
        hv_ErrorMsg3.Dispose();
        hv_MensajeError.Dispose();
        hv_Mensaje.Dispose();
        hv_Procesando.Dispose();
        hv_Estado.Dispose();
        hv_Resultado.Dispose();
        hv_Msg_Sub_Proceso.Dispose();
        hv_Altura_Pallet.Dispose();
        hv_Distancia_camara_Piso_Pallet.Dispose();
        hv_Rango_Seguridad.Dispose();
        hv_Rango_posible_borde_pallet.Dispose();
        hv_ObjectModel3D_Borde_Pallet.Dispose();
        hv_WindowHandle.Dispose();
        hv_PoseOut1.Dispose();
        hv_Pose_Segmentos.Dispose();
        hv_Vector_Entidades_Segmento.Dispose();
        hv_Sampling.Dispose();
        hv_Variable_PLC_Existencia.Dispose();
        hv_j.Dispose();
        hv_Tag_Destino.Dispose();
        hv_Valor_Variable.Dispose();
        hv_ValorVector.Dispose();
        hv_EstadoFx.Dispose();
        hvec_Vector_Existencia_Core.Dispose();
        hvec_Vector_Existencia_Core_New.Dispose();

        return;

      }


      //# ###################################################
      //# #### ROTO EL ROI 3D ###############################
      //# ###################################################
      hv_Mensaje.Dispose();
      hv_Mensaje = "Rotando ROI";
      Send_Data_Info(hv_Mensaje, hv_SerialHandle);
      hv_Pose_Segmentos.Dispose();
      {
      HTuple ExpTmpOutVar_0;
      Rototate_ROI(hv_Base_esquina, hv_ROI3D_rotate, hv_Escena3D_RAW, hv_Parametros_Visualizacion, 
          hv_Valores_Visualizacion, hv_Visualizar3D, hv_Vector_Segmento, out hv_Pose_Segmentos, 
          out ExpTmpOutVar_0);
      hv_ROI3D_rotate.Dispose();
      hv_ROI3D_rotate = ExpTmpOutVar_0;
      }
      //# ###################################################


      //# ###################################################################
      //# ###################################################################
      //# ################ BUSQUEDA DE CORES EN EL PALLET ###################
      //# ###################################################################
      //# ###################################################################
      //3.- Encuentro el orden y los segementos en que estan distribuidos los cores en el applet

      hv_Vector_Entidades_Segmento.Dispose();
      Get_Vector_Entidades(hv_Vector_ID_Core_by_Segment_Pallet, out hv_Vector_Entidades_Segmento);


      try
      {


        //********************************************************
        //ROI 3D sectorizado de cada elemento
        //Busco de manera sectorizada cara core en el pallet
        //********************************************************
        //Estructura de vector
        //# ###########################
        //# ## CORE ## Existencia #####
        //# ###########################
        hvec_Vector_Existencia_Core.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hvec_Vector_Existencia_Core = dh.Take((
            dh.Add(new HTupleVector(2)).Insert(0,(dh.Add(new HTupleVector(1)).Insert(0,dh.Add(new HTupleVector(new HTuple())))))));
        }
        hvec_Vector_Existencia_Core[0][0] = new HTupleVector(new HTuple("CORE"));
        hvec_Vector_Existencia_Core[0][1] = new HTupleVector(new HTuple("Existencia"));

        //# ### Envio data de estado ########################
        hv_Estado.Dispose();
        hv_Estado = 8;
        Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
        //# ################################################# 



        hv_Sampling.Dispose();
        hv_Sampling = 0.05;
        hvec_Vector_Existencia_Core_New.Dispose();
        Find_Sector_Core(hv_Vector_ID_Core_by_Segment_Pallet, hv_Vector_Entidades_Segmento, 
            hv_Path_CORE_ID, hv_Path_3D_Segmentos, hv_Path_SFM_Segmentos, hv_ROI3D_rotate, 
            hv_Parametros_Visualizacion, hv_Valores_Visualizacion, hv_Visualizar3D, 
            hv_Vector_Segmento, hv_Escena3D_RAW, hv_Sampling, hv_SerialHandle, hvec_Vector_Existencia_Core, 
            hvec_Vector_Estado_Fx, out hvec_Vector_Existencia_Core_New);



        //# ### Envio data de estado ########################
        hv_Procesando.Dispose();
        hv_Procesando = 1;
        hv_Estado.Dispose();
        hv_Estado = 13;
        hv_Resultado.Dispose();
        hv_Resultado = 0;

        //# ################################################# 


        //Escritura de Vector_Existencia_Core_New

        hv_Variable_PLC_Existencia.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Variable_PLC_Existencia = ("_EV01_I_Pallet"+hv_N_Pallet_to_Scan)+"ZValid.";
        }

        HTuple end_val188 = new HTuple(hvec_Vector_Existencia_Core_New.Length)-1;
        HTuple step_val188 = 1;
        for (hv_j=1; hv_j.Continue(end_val188, step_val188); hv_j = hv_j.TupleAdd(step_val188))
        {
          hv_Estado_SubProceso.Dispose();
          hv_Estado_SubProceso = 0;
          hv_Tag_Destino.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Tag_Destino = hv_Variable_PLC_Existencia+hv_j;
          }
          hv_Valor_Variable.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Valor_Variable = new HTuple(hvec_Vector_Existencia_Core_New[hv_j][1].T);
          }
          //************************
          hv_Valor_Variable.Dispose();
          hv_Valor_Variable = 1;
          //************************
          Send_EthernetIP_Data(hv_Tag_Destino, hv_Valor_Variable, hv_SerialHandle);

        }

        hv_ValorVector.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_ValorVector = new HTuple(hvec_Vector_Existencia_Core_New.Length)-1;
        }
        if ((int)(new HTuple(hv_ValorVector.TupleGreater(1))) != 0)
        {
          hv_Mensaje.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Mensaje = "Elementos encontrados en Pallet  "+hv_N_Pallet_to_Scan;
          }
          Send_Data_Info(hv_Mensaje, hv_SerialHandle);
          //# ### Envio data de estado ########################
          hv_Procesando.Dispose();
          hv_Procesando = 0;
          hv_Resultado.Dispose();
          hv_Resultado = 1;
          Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
          //# ################################################# 
        }
        else
        {

          //# ### Envio data de estado ########################
          hv_Mensaje.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Mensaje = "### ERROR ### No se encontro nada que validar en pallet "+hv_N_Pallet_to_Scan;
          }
          Send_Data_Info(hv_Mensaje, hv_SerialHandle);
          hv_Procesando.Dispose();
          hv_Procesando = 0;
          hv_Resultado.Dispose();
          hv_Resultado = 2;
          Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
          hv_Mensaje.Dispose();
          hv_Mensaje = "### ERROR ###";
          Send_Data_Info(hv_Mensaje, hv_SerialHandle);
          //# ################################################# 
        }



      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_EstadoFx.Dispose();
        Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx);


        //# ### Envio data de estado ########################
        hv_Procesando.Dispose();
        hv_Procesando = 0;
        hv_Estado.Dispose();
        hv_Estado = 6;
        hv_Resultado.Dispose();
        hv_Resultado = 2;
        Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
        Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);

        //# ################################################# 




        hv_Parametros_Visualizacion.Dispose();
        hv_Valores_Visualizacion.Dispose();
        hv_Vector_Segmento.Dispose();
        hv_ROI3D_NullFrame.Dispose();
        hv_ROI3D_rotate.Dispose();
        hv_Exception.Dispose();
        hv_ErrorMsg0.Dispose();
        hv_ErrorMsg1.Dispose();
        hv_ErrorMsg2.Dispose();
        hv_ErrorMsg3.Dispose();
        hv_MensajeError.Dispose();
        hv_Mensaje.Dispose();
        hv_Procesando.Dispose();
        hv_Estado.Dispose();
        hv_Resultado.Dispose();
        hv_Msg_Sub_Proceso.Dispose();
        hv_Altura_Pallet.Dispose();
        hv_Distancia_camara_Piso_Pallet.Dispose();
        hv_Rango_Seguridad.Dispose();
        hv_Rango_posible_borde_pallet.Dispose();
        hv_ObjectModel3D_Borde_Pallet.Dispose();
        hv_WindowHandle.Dispose();
        hv_PoseOut1.Dispose();
        hv_Pose_Segmentos.Dispose();
        hv_Vector_Entidades_Segmento.Dispose();
        hv_Sampling.Dispose();
        hv_Variable_PLC_Existencia.Dispose();
        hv_j.Dispose();
        hv_Tag_Destino.Dispose();
        hv_Valor_Variable.Dispose();
        hv_ValorVector.Dispose();
        hv_EstadoFx.Dispose();
        hvec_Vector_Existencia_Core.Dispose();
        hvec_Vector_Existencia_Core_New.Dispose();

        return;
      }



      //****************************************
      //Borrar 3D
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.ClearObjectModel3d(((((hv_ROI3D_rotate.TupleConcat(hv_ROI3D_NullFrame))).TupleConcat(
          hv_Escena3D_RAW))).TupleConcat(hv_ObjectModel3D_Borde_Pallet));
      }

      hv_Parametros_Visualizacion.Dispose();
      hv_Valores_Visualizacion.Dispose();
      hv_Vector_Segmento.Dispose();
      hv_ROI3D_NullFrame.Dispose();
      hv_ROI3D_rotate.Dispose();
      hv_Exception.Dispose();
      hv_ErrorMsg0.Dispose();
      hv_ErrorMsg1.Dispose();
      hv_ErrorMsg2.Dispose();
      hv_ErrorMsg3.Dispose();
      hv_MensajeError.Dispose();
      hv_Mensaje.Dispose();
      hv_Procesando.Dispose();
      hv_Estado.Dispose();
      hv_Resultado.Dispose();
      hv_Msg_Sub_Proceso.Dispose();
      hv_Altura_Pallet.Dispose();
      hv_Distancia_camara_Piso_Pallet.Dispose();
      hv_Rango_Seguridad.Dispose();
      hv_Rango_posible_borde_pallet.Dispose();
      hv_ObjectModel3D_Borde_Pallet.Dispose();
      hv_WindowHandle.Dispose();
      hv_PoseOut1.Dispose();
      hv_Pose_Segmentos.Dispose();
      hv_Vector_Entidades_Segmento.Dispose();
      hv_Sampling.Dispose();
      hv_Variable_PLC_Existencia.Dispose();
      hv_j.Dispose();
      hv_Tag_Destino.Dispose();
      hv_Valor_Variable.Dispose();
      hv_ValorVector.Dispose();
      hv_EstadoFx.Dispose();
      hvec_Vector_Existencia_Core.Dispose();
      hvec_Vector_Existencia_Core_New.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Parametros_Visualizacion.Dispose();
      hv_Valores_Visualizacion.Dispose();
      hv_Vector_Segmento.Dispose();
      hv_ROI3D_NullFrame.Dispose();
      hv_ROI3D_rotate.Dispose();
      hv_Exception.Dispose();
      hv_ErrorMsg0.Dispose();
      hv_ErrorMsg1.Dispose();
      hv_ErrorMsg2.Dispose();
      hv_ErrorMsg3.Dispose();
      hv_MensajeError.Dispose();
      hv_Mensaje.Dispose();
      hv_Procesando.Dispose();
      hv_Estado.Dispose();
      hv_Resultado.Dispose();
      hv_Msg_Sub_Proceso.Dispose();
      hv_Altura_Pallet.Dispose();
      hv_Distancia_camara_Piso_Pallet.Dispose();
      hv_Rango_Seguridad.Dispose();
      hv_Rango_posible_borde_pallet.Dispose();
      hv_ObjectModel3D_Borde_Pallet.Dispose();
      hv_WindowHandle.Dispose();
      hv_PoseOut1.Dispose();
      hv_Pose_Segmentos.Dispose();
      hv_Vector_Entidades_Segmento.Dispose();
      hv_Sampling.Dispose();
      hv_Variable_PLC_Existencia.Dispose();
      hv_j.Dispose();
      hv_Tag_Destino.Dispose();
      hv_Valor_Variable.Dispose();
      hv_ValorVector.Dispose();
      hv_EstadoFx.Dispose();
      hvec_Vector_Existencia_Core.Dispose();
      hvec_Vector_Existencia_Core_New.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Core_To_Use_Main (HTuple hv_SerialHandle, out HTuple hv_Cod_Core_ToUse, 
      out HTuple hv_FXcheck)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Variable_BD = new HTuple(), hv_DataBD = new HTuple();
    HTuple hv_Exception = new HTuple(), hv_EstadoFx = new HTuple();
    HTuple hv_Cod_Core_ToUseAux = new HTuple(), hv_Pallet_To_Scan = new HTuple();
    HTuple hv_Segmento_To_Scan = new HTuple(), hv_PitutoExist = new HTuple();
    HTuple hv_Mensaje = new HTuple();
    // Initialize local and output iconic variables 
    hv_Cod_Core_ToUse = new HTuple();
    hv_FXcheck = new HTuple();
    try
    {

      hv_FXcheck.Dispose();
      hv_FXcheck = 0;
      try
      {
        hv_Variable_BD.Dispose();
        hv_Variable_BD = "ram_actualproduction";
        hv_DataBD.Dispose();hv_FXcheck.Dispose();
        Get_Pallet_BD(hv_Variable_BD, hv_SerialHandle, out hv_DataBD, out hv_FXcheck);

        if ((int)(hv_FXcheck.TupleNot()) != 0)
        {
          hv_Exception.Dispose();
          hv_Exception = new HTuple();
          hv_EstadoFx.Dispose();
          Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx);

          hv_Variable_BD.Dispose();
          hv_DataBD.Dispose();
          hv_Exception.Dispose();
          hv_EstadoFx.Dispose();
          hv_Cod_Core_ToUseAux.Dispose();
          hv_Pallet_To_Scan.Dispose();
          hv_Segmento_To_Scan.Dispose();
          hv_PitutoExist.Dispose();
          hv_Mensaje.Dispose();

          return;

        }
        hv_Cod_Core_ToUse.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Cod_Core_ToUse = hv_DataBD.TupleSelect(
            3);
        }
        hv_Cod_Core_ToUseAux.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Cod_Core_ToUseAux = hv_DataBD.TupleSelect(
            3);
        }
        hv_Pallet_To_Scan.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Pallet_To_Scan = hv_DataBD.TupleSelect(
            15);
        }
        hv_Segmento_To_Scan.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Segmento_To_Scan = hv_DataBD.TupleSelect(
            16);
        }
        hv_PitutoExist.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_PitutoExist = hv_DataBD.TupleSelect(
            5);
        }


        hv_FXcheck.Dispose();
        hv_FXcheck = 1;


      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);

        hv_Mensaje.Dispose();
        hv_Mensaje = "### ERROR ### -> Entidad Requerida. RAM base DATOS no CARGADA.";
        Send_Data_Info(hv_Mensaje, hv_SerialHandle);
        //Send_Data_Error (Exception, SerialHandle, EstadoFx)
        hv_FXcheck.Dispose();
        hv_FXcheck = 0;
      }



      hv_Variable_BD.Dispose();
      hv_DataBD.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();
      hv_Cod_Core_ToUseAux.Dispose();
      hv_Pallet_To_Scan.Dispose();
      hv_Segmento_To_Scan.Dispose();
      hv_PitutoExist.Dispose();
      hv_Mensaje.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Variable_BD.Dispose();
      hv_DataBD.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();
      hv_Cod_Core_ToUseAux.Dispose();
      hv_Pallet_To_Scan.Dispose();
      hv_Segmento_To_Scan.Dispose();
      hv_PitutoExist.Dispose();
      hv_Mensaje.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Core_ToUse (HTuple hv_SerialHandle, out HTuple hv_Cod_Core_ToUse, 
      out HTuple hv_FXcheck)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Variable_BD = new HTuple(), hv_DataBD = new HTuple();
    HTuple hv_Exception = new HTuple(), hv_EstadoFx = new HTuple();
    HTuple hv_Cod_Core_ToUseAux = new HTuple(), hv_Pallet_To_Scan = new HTuple();
    HTuple hv_Segmento_To_Scan = new HTuple(), hv_PitutoExist = new HTuple();
    HTuple hv_Mensaje = new HTuple();
    // Initialize local and output iconic variables 
    hv_Cod_Core_ToUse = new HTuple();
    hv_FXcheck = new HTuple();
    try
    {

      hv_FXcheck.Dispose();
      hv_FXcheck = 0;
      try
      {
        hv_Variable_BD.Dispose();
        hv_Variable_BD = "ram_actualproduction";
        hv_DataBD.Dispose();hv_FXcheck.Dispose();
        Get_Pallet_BD(hv_Variable_BD, hv_SerialHandle, out hv_DataBD, out hv_FXcheck);

        if ((int)(hv_FXcheck.TupleNot()) != 0)
        {
          hv_Exception.Dispose();
          hv_Exception = new HTuple();
          hv_EstadoFx.Dispose();
          Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx);

          hv_Variable_BD.Dispose();
          hv_DataBD.Dispose();
          hv_Exception.Dispose();
          hv_EstadoFx.Dispose();
          hv_Cod_Core_ToUseAux.Dispose();
          hv_Pallet_To_Scan.Dispose();
          hv_Segmento_To_Scan.Dispose();
          hv_PitutoExist.Dispose();
          hv_Mensaje.Dispose();

          return;

        }
        hv_Cod_Core_ToUse.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Cod_Core_ToUse = hv_DataBD.TupleSelect(
            3);
        }
        hv_Cod_Core_ToUseAux.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Cod_Core_ToUseAux = hv_DataBD.TupleSelect(
            3);
        }
        hv_Pallet_To_Scan.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Pallet_To_Scan = hv_DataBD.TupleSelect(
            15);
        }
        hv_Segmento_To_Scan.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Segmento_To_Scan = hv_DataBD.TupleSelect(
            16);
        }
        hv_PitutoExist.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_PitutoExist = hv_DataBD.TupleSelect(
            5);
        }


        hv_FXcheck.Dispose();
        hv_FXcheck = 1;


      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);

        hv_Mensaje.Dispose();
        hv_Mensaje = "### ERROR ### -> Entidad Requerida. RAM base DATOS no CARGADA.";
        Send_Data_Info(hv_Mensaje, hv_SerialHandle);
        //Send_Data_Error (Exception, SerialHandle, EstadoFx)
        hv_FXcheck.Dispose();
        hv_FXcheck = 0;
      }



      hv_Variable_BD.Dispose();
      hv_DataBD.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();
      hv_Cod_Core_ToUseAux.Dispose();
      hv_Pallet_To_Scan.Dispose();
      hv_Segmento_To_Scan.Dispose();
      hv_PitutoExist.Dispose();
      hv_Mensaje.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Variable_BD.Dispose();
      hv_DataBD.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();
      hv_Cod_Core_ToUseAux.Dispose();
      hv_Pallet_To_Scan.Dispose();
      hv_Segmento_To_Scan.Dispose();
      hv_PitutoExist.Dispose();
      hv_Mensaje.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Core_ToUse_From_BDD (HTuple hv_SerialHandle, out HTuple hv_Cod_Core_ToUse, 
      out HTuple hv_Pallet_To_Scan, out HTuple hv_Segmento_To_Scan, out HTuple hv_PitutoExist, 
      out HTuple hv_FXcheck)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Index = new HTuple(), hv_Variable_BD = new HTuple();
    HTuple hv_DataBD = new HTuple(), hv_Cod_Core_ToUseAux = new HTuple();
    HTuple hv_Exception = new HTuple(), hv_EstadoFx = new HTuple();
    // Initialize local and output iconic variables 
    hv_Cod_Core_ToUse = new HTuple();
    hv_Pallet_To_Scan = new HTuple();
    hv_Segmento_To_Scan = new HTuple();
    hv_PitutoExist = new HTuple();
    hv_FXcheck = new HTuple();
    try
    {

      hv_FXcheck.Dispose();
      hv_FXcheck = 0;
      for (hv_Index=1; (int)hv_Index<=5; hv_Index = (int)hv_Index + 1)
      {


        try
        {
          hv_Variable_BD.Dispose();
          hv_Variable_BD = "ram_actualproduction";
          hv_DataBD.Dispose();hv_FXcheck.Dispose();
          Get_Pallet_BD(hv_Variable_BD, hv_SerialHandle, out hv_DataBD, out hv_FXcheck);
          //
          hv_Cod_Core_ToUse.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Cod_Core_ToUse = hv_DataBD.TupleSelect(
              3);
          }
          hv_Cod_Core_ToUseAux.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Cod_Core_ToUseAux = hv_DataBD.TupleSelect(
              3);
          }
          hv_Pallet_To_Scan.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Pallet_To_Scan = hv_DataBD.TupleSelect(
              15);
          }
          hv_Segmento_To_Scan.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Segmento_To_Scan = hv_DataBD.TupleSelect(
              16);
          }
          hv_PitutoExist.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_PitutoExist = hv_DataBD.TupleSelect(
              5);
          }


          hv_FXcheck.Dispose();
          hv_FXcheck = 1;


          hv_Index.Dispose();
          hv_Variable_BD.Dispose();
          hv_DataBD.Dispose();
          hv_Cod_Core_ToUseAux.Dispose();
          hv_Exception.Dispose();
          hv_EstadoFx.Dispose();

          return;
        }
        // catch (Exception) 
        catch (HalconException HDevExpDefaultException1)
        {
          HDevExpDefaultException1.ToHTuple(out hv_Exception);

          //Mensaje := '### ERROR ### -> Entidad Requerida -> '+Cod_Core_ToUse+' <- RAM base DATOS no CARGADA.'
          //Send_Data_Info (Mensaje, SerialHandle)
          hv_EstadoFx.Dispose();
          Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx);
          hv_FXcheck.Dispose();
          hv_FXcheck = 0;
        }
      }


      hv_Index.Dispose();
      hv_Variable_BD.Dispose();
      hv_DataBD.Dispose();
      hv_Cod_Core_ToUseAux.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Index.Dispose();
      hv_Variable_BD.Dispose();
      hv_DataBD.Dispose();
      hv_Cod_Core_ToUseAux.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Core_ToUse_From_BDD_Fast (HTuple hv_SerialHandle, out HTuple hv_Cod_Core_ToUse, 
      out HTuple hv_Pallet_To_Scan, out HTuple hv_Segmento_To_Scan, out HTuple hv_PitutoExist, 
      out HTuple hv_FXcheck, out HTuple hv_Diametro)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Index = new HTuple(), hv_Variable_BD = new HTuple();
    HTuple hv_DataBD = new HTuple(), hv_Cod_Core_ToUseAux = new HTuple();
    HTuple hv_Exception = new HTuple(), hv_EstadoFx = new HTuple();
    // Initialize local and output iconic variables 
    hv_Cod_Core_ToUse = new HTuple();
    hv_Pallet_To_Scan = new HTuple();
    hv_Segmento_To_Scan = new HTuple();
    hv_PitutoExist = new HTuple();
    hv_FXcheck = new HTuple();
    hv_Diametro = new HTuple();
    try
    {

      hv_FXcheck.Dispose();
      hv_FXcheck = 0;
      for (hv_Index=1; (int)hv_Index<=5; hv_Index = (int)hv_Index + 1)
      {


        try
        {
          hv_Variable_BD.Dispose();
          hv_Variable_BD = "ram_actualproduction";
          hv_DataBD.Dispose();hv_FXcheck.Dispose();
          Get_Pallet_Bd_Fast(hv_Variable_BD, hv_SerialHandle, out hv_DataBD, out hv_FXcheck);
          //
          hv_Cod_Core_ToUse.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Cod_Core_ToUse = hv_DataBD.TupleSelect(
              3);
          }
          hv_Cod_Core_ToUseAux.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Cod_Core_ToUseAux = hv_DataBD.TupleSelect(
              3);
          }
          hv_Pallet_To_Scan.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Pallet_To_Scan = hv_DataBD.TupleSelect(
              15);
          }
          hv_Segmento_To_Scan.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Segmento_To_Scan = hv_DataBD.TupleSelect(
              16);
          }
          hv_PitutoExist.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_PitutoExist = hv_DataBD.TupleSelect(
              5);
          }
          hv_Diametro.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Diametro = hv_DataBD.TupleSelect(
              12);
          }

          {
          HTuple ExpTmpOutVar_0;
          HOperatorSet.TupleNumber(hv_Diametro, out ExpTmpOutVar_0);
          hv_Diametro.Dispose();
          hv_Diametro = ExpTmpOutVar_0;
          }

          hv_FXcheck.Dispose();
          hv_FXcheck = 1;


          hv_Index.Dispose();
          hv_Variable_BD.Dispose();
          hv_DataBD.Dispose();
          hv_Cod_Core_ToUseAux.Dispose();
          hv_Exception.Dispose();
          hv_EstadoFx.Dispose();

          return;
        }
        // catch (Exception) 
        catch (HalconException HDevExpDefaultException1)
        {
          HDevExpDefaultException1.ToHTuple(out hv_Exception);

          //Mensaje := '### ERROR ### -> Entidad Requerida -> '+Cod_Core_ToUse+' <- RAM base DATOS no CARGADA.'
          //Send_Data_Info (Mensaje, SerialHandle)
          hv_EstadoFx.Dispose();
          Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx);
          hv_FXcheck.Dispose();
          hv_FXcheck = 0;
        }
      }


      hv_Index.Dispose();
      hv_Variable_BD.Dispose();
      hv_DataBD.Dispose();
      hv_Cod_Core_ToUseAux.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Index.Dispose();
      hv_Variable_BD.Dispose();
      hv_DataBD.Dispose();
      hv_Cod_Core_ToUseAux.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Core_ToUse_From_BDD_Fast_COPY_1 (HTuple hv_SerialHandle, out HTuple hv_Cod_Core_ToUse, 
      out HTuple hv_Pallet_To_Scan, out HTuple hv_Segmento_To_Scan, out HTuple hv_PitutoExist, 
      out HTuple hv_FXcheck)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Index = new HTuple(), hv_Variable_BD = new HTuple();
    HTuple hv_DataBD = new HTuple(), hv_Cod_Core_ToUseAux = new HTuple();
    HTuple hv_Exception = new HTuple(), hv_EstadoFx = new HTuple();
    // Initialize local and output iconic variables 
    hv_Cod_Core_ToUse = new HTuple();
    hv_Pallet_To_Scan = new HTuple();
    hv_Segmento_To_Scan = new HTuple();
    hv_PitutoExist = new HTuple();
    hv_FXcheck = new HTuple();
    try
    {

      hv_FXcheck.Dispose();
      hv_FXcheck = 0;
      for (hv_Index=1; (int)hv_Index<=5; hv_Index = (int)hv_Index + 1)
      {


        try
        {
          hv_Variable_BD.Dispose();
          hv_Variable_BD = "ram_actualproduction";
          hv_DataBD.Dispose();hv_FXcheck.Dispose();
          Get_Pallet_Bd_Fast_COPY_1(hv_Variable_BD, hv_SerialHandle, out hv_DataBD, 
              out hv_FXcheck);

          hv_Cod_Core_ToUse.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Cod_Core_ToUse = hv_DataBD.TupleSelect(
              3);
          }
          hv_Cod_Core_ToUseAux.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Cod_Core_ToUseAux = hv_DataBD.TupleSelect(
              3);
          }
          hv_Pallet_To_Scan.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Pallet_To_Scan = hv_DataBD.TupleSelect(
              15);
          }
          hv_Segmento_To_Scan.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Segmento_To_Scan = hv_DataBD.TupleSelect(
              16);
          }
          hv_PitutoExist.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_PitutoExist = hv_DataBD.TupleSelect(
              5);
          }


          hv_FXcheck.Dispose();
          hv_FXcheck = 1;


          hv_Index.Dispose();
          hv_Variable_BD.Dispose();
          hv_DataBD.Dispose();
          hv_Cod_Core_ToUseAux.Dispose();
          hv_Exception.Dispose();
          hv_EstadoFx.Dispose();

          return;
        }
        // catch (Exception) 
        catch (HalconException HDevExpDefaultException1)
        {
          HDevExpDefaultException1.ToHTuple(out hv_Exception);

          //Mensaje := '### ERROR ### -> Entidad Requerida -> '+Cod_Core_ToUse+' <- RAM base DATOS no CARGADA.'
          //Send_Data_Info (Mensaje, SerialHandle)
          hv_EstadoFx.Dispose();
          Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx);
          hv_FXcheck.Dispose();
          hv_FXcheck = 0;
        }
      }


      hv_Index.Dispose();
      hv_Variable_BD.Dispose();
      hv_DataBD.Dispose();
      hv_Cod_Core_ToUseAux.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Index.Dispose();
      hv_Variable_BD.Dispose();
      hv_DataBD.Dispose();
      hv_Cod_Core_ToUseAux.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Core_ToUse_From_BDD_Fast_COPY_10 (HTuple hv_SerialHandle, out HTuple hv_Cod_Core_ToUse, 
      out HTuple hv_Pallet_To_Scan, out HTuple hv_Segmento_To_Scan, out HTuple hv_PitutoExist, 
      out HTuple hv_FXcheck, out HTuple hv_Diametro)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Index = new HTuple(), hv_Variable_BD = new HTuple();
    HTuple hv_DataBD = new HTuple(), hv_Cod_Core_ToUseAux = new HTuple();
    HTuple hv_Exception = new HTuple(), hv_EstadoFx = new HTuple();
    // Initialize local and output iconic variables 
    hv_Cod_Core_ToUse = new HTuple();
    hv_Pallet_To_Scan = new HTuple();
    hv_Segmento_To_Scan = new HTuple();
    hv_PitutoExist = new HTuple();
    hv_FXcheck = new HTuple();
    hv_Diametro = new HTuple();
    try
    {

      hv_FXcheck.Dispose();
      hv_FXcheck = 0;
      for (hv_Index=1; (int)hv_Index<=5; hv_Index = (int)hv_Index + 1)
      {


        try
        {
          hv_Variable_BD.Dispose();
          hv_Variable_BD = "ram_actualproduction";
          hv_DataBD.Dispose();hv_FXcheck.Dispose();
          Get_Pallet_Bd_Fast_COPY_1(hv_Variable_BD, hv_SerialHandle, out hv_DataBD, 
              out hv_FXcheck);

          hv_Cod_Core_ToUse.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Cod_Core_ToUse = hv_DataBD.TupleSelect(
              3);
          }
          hv_Cod_Core_ToUseAux.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Cod_Core_ToUseAux = hv_DataBD.TupleSelect(
              3);
          }
          hv_Pallet_To_Scan.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Pallet_To_Scan = hv_DataBD.TupleSelect(
              15);
          }
          hv_Segmento_To_Scan.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Segmento_To_Scan = hv_DataBD.TupleSelect(
              16);
          }
          hv_PitutoExist.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_PitutoExist = hv_DataBD.TupleSelect(
              5);
          }
          hv_Diametro.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Diametro = hv_DataBD.TupleSelect(
              12);
          }

          {
          HTuple ExpTmpOutVar_0;
          HOperatorSet.TupleNumber(hv_Diametro, out ExpTmpOutVar_0);
          hv_Diametro.Dispose();
          hv_Diametro = ExpTmpOutVar_0;
          }

          hv_FXcheck.Dispose();
          hv_FXcheck = 1;


          hv_Index.Dispose();
          hv_Variable_BD.Dispose();
          hv_DataBD.Dispose();
          hv_Cod_Core_ToUseAux.Dispose();
          hv_Exception.Dispose();
          hv_EstadoFx.Dispose();

          return;
        }
        // catch (Exception) 
        catch (HalconException HDevExpDefaultException1)
        {
          HDevExpDefaultException1.ToHTuple(out hv_Exception);

          //Mensaje := '### ERROR ### -> Entidad Requerida -> '+Cod_Core_ToUse+' <- RAM base DATOS no CARGADA.'
          //Send_Data_Info (Mensaje, SerialHandle)
          hv_EstadoFx.Dispose();
          Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx);
          hv_FXcheck.Dispose();
          hv_FXcheck = 0;
        }
      }


      hv_Index.Dispose();
      hv_Variable_BD.Dispose();
      hv_DataBD.Dispose();
      hv_Cod_Core_ToUseAux.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Index.Dispose();
      hv_Variable_BD.Dispose();
      hv_DataBD.Dispose();
      hv_Cod_Core_ToUseAux.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Core_ToUse_From_BDD_Fast_COPY_2 (HTuple hv_SerialHandle, out HTuple hv_Cod_Core_ToUse, 
      out HTuple hv_Pallet_To_Scan, out HTuple hv_Segmento_To_Scan, out HTuple hv_PitutoExist, 
      out HTuple hv_FXcheck)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Index = new HTuple(), hv_Variable_BD = new HTuple();
    HTuple hv_DataBD = new HTuple(), hv_Cod_Core_ToUseAux = new HTuple();
    HTuple hv_Exception = new HTuple(), hv_EstadoFx = new HTuple();
    // Initialize local and output iconic variables 
    hv_Cod_Core_ToUse = new HTuple();
    hv_Pallet_To_Scan = new HTuple();
    hv_Segmento_To_Scan = new HTuple();
    hv_PitutoExist = new HTuple();
    hv_FXcheck = new HTuple();
    try
    {

      hv_FXcheck.Dispose();
      hv_FXcheck = 0;
      for (hv_Index=1; (int)hv_Index<=5; hv_Index = (int)hv_Index + 1)
      {


        try
        {
          hv_Variable_BD.Dispose();
          hv_Variable_BD = "ram_actualproduction";
          hv_DataBD.Dispose();hv_FXcheck.Dispose();
          Get_Pallet_Bd_Fast_COPY_1(hv_Variable_BD, hv_SerialHandle, out hv_DataBD, 
              out hv_FXcheck);

          hv_Cod_Core_ToUse.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Cod_Core_ToUse = hv_DataBD.TupleSelect(
              3);
          }
          hv_Cod_Core_ToUseAux.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Cod_Core_ToUseAux = hv_DataBD.TupleSelect(
              3);
          }
          hv_Pallet_To_Scan.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Pallet_To_Scan = hv_DataBD.TupleSelect(
              15);
          }
          hv_Segmento_To_Scan.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Segmento_To_Scan = hv_DataBD.TupleSelect(
              16);
          }
          hv_PitutoExist.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_PitutoExist = hv_DataBD.TupleSelect(
              5);
          }


          hv_FXcheck.Dispose();
          hv_FXcheck = 1;


          hv_Index.Dispose();
          hv_Variable_BD.Dispose();
          hv_DataBD.Dispose();
          hv_Cod_Core_ToUseAux.Dispose();
          hv_Exception.Dispose();
          hv_EstadoFx.Dispose();

          return;
        }
        // catch (Exception) 
        catch (HalconException HDevExpDefaultException1)
        {
          HDevExpDefaultException1.ToHTuple(out hv_Exception);

          //Mensaje := '### ERROR ### -> Entidad Requerida -> '+Cod_Core_ToUse+' <- RAM base DATOS no CARGADA.'
          //Send_Data_Info (Mensaje, SerialHandle)
          hv_EstadoFx.Dispose();
          Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx);
          hv_FXcheck.Dispose();
          hv_FXcheck = 0;
        }
      }


      hv_Index.Dispose();
      hv_Variable_BD.Dispose();
      hv_DataBD.Dispose();
      hv_Cod_Core_ToUseAux.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Index.Dispose();
      hv_Variable_BD.Dispose();
      hv_DataBD.Dispose();
      hv_Cod_Core_ToUseAux.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Core_ToUse_From_BDD_Fast_COPY_3 (HTuple hv_SerialHandle, out HTuple hv_Cod_Core_ToUse, 
      out HTuple hv_Pallet_To_Scan, out HTuple hv_Segmento_To_Scan, out HTuple hv_PitutoExist, 
      out HTuple hv_FXcheck)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Index = new HTuple(), hv_Variable_BD = new HTuple();
    HTuple hv_DataBD = new HTuple(), hv_Cod_Core_ToUseAux = new HTuple();
    HTuple hv_Exception = new HTuple(), hv_EstadoFx = new HTuple();
    // Initialize local and output iconic variables 
    hv_Cod_Core_ToUse = new HTuple();
    hv_Pallet_To_Scan = new HTuple();
    hv_Segmento_To_Scan = new HTuple();
    hv_PitutoExist = new HTuple();
    hv_FXcheck = new HTuple();
    try
    {

      hv_FXcheck.Dispose();
      hv_FXcheck = 0;
      for (hv_Index=1; (int)hv_Index<=5; hv_Index = (int)hv_Index + 1)
      {


        try
        {
          hv_Variable_BD.Dispose();
          hv_Variable_BD = "ram_actualproduction";
          hv_DataBD.Dispose();hv_FXcheck.Dispose();
          Get_Pallet_Bd_Fast_COPY_1(hv_Variable_BD, hv_SerialHandle, out hv_DataBD, 
              out hv_FXcheck);

          hv_Cod_Core_ToUse.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Cod_Core_ToUse = hv_DataBD.TupleSelect(
              3);
          }
          hv_Cod_Core_ToUseAux.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Cod_Core_ToUseAux = hv_DataBD.TupleSelect(
              3);
          }
          hv_Pallet_To_Scan.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Pallet_To_Scan = hv_DataBD.TupleSelect(
              15);
          }
          hv_Segmento_To_Scan.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Segmento_To_Scan = hv_DataBD.TupleSelect(
              16);
          }
          hv_PitutoExist.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_PitutoExist = hv_DataBD.TupleSelect(
              5);
          }


          hv_FXcheck.Dispose();
          hv_FXcheck = 1;


          hv_Index.Dispose();
          hv_Variable_BD.Dispose();
          hv_DataBD.Dispose();
          hv_Cod_Core_ToUseAux.Dispose();
          hv_Exception.Dispose();
          hv_EstadoFx.Dispose();

          return;
        }
        // catch (Exception) 
        catch (HalconException HDevExpDefaultException1)
        {
          HDevExpDefaultException1.ToHTuple(out hv_Exception);

          //Mensaje := '### ERROR ### -> Entidad Requerida -> '+Cod_Core_ToUse+' <- RAM base DATOS no CARGADA.'
          //Send_Data_Info (Mensaje, SerialHandle)
          hv_EstadoFx.Dispose();
          Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx);
          hv_FXcheck.Dispose();
          hv_FXcheck = 0;
        }
      }


      hv_Index.Dispose();
      hv_Variable_BD.Dispose();
      hv_DataBD.Dispose();
      hv_Cod_Core_ToUseAux.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Index.Dispose();
      hv_Variable_BD.Dispose();
      hv_DataBD.Dispose();
      hv_Cod_Core_ToUseAux.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Core_ToUse_From_BDD_Fast_COPY_4 (HTuple hv_SerialHandle, out HTuple hv_Cod_Core_ToUse, 
      out HTuple hv_Pallet_To_Scan, out HTuple hv_Segmento_To_Scan, out HTuple hv_PitutoExist, 
      out HTuple hv_FXcheck)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Index = new HTuple(), hv_Variable_BD = new HTuple();
    HTuple hv_DataBD = new HTuple(), hv_Cod_Core_ToUseAux = new HTuple();
    HTuple hv_Exception = new HTuple(), hv_EstadoFx = new HTuple();
    // Initialize local and output iconic variables 
    hv_Cod_Core_ToUse = new HTuple();
    hv_Pallet_To_Scan = new HTuple();
    hv_Segmento_To_Scan = new HTuple();
    hv_PitutoExist = new HTuple();
    hv_FXcheck = new HTuple();
    try
    {

      hv_FXcheck.Dispose();
      hv_FXcheck = 0;
      for (hv_Index=1; (int)hv_Index<=5; hv_Index = (int)hv_Index + 1)
      {


        try
        {
          hv_Variable_BD.Dispose();
          hv_Variable_BD = "ram_actualproduction";
          hv_DataBD.Dispose();hv_FXcheck.Dispose();
          Get_Pallet_Bd_Fast_COPY_1(hv_Variable_BD, hv_SerialHandle, out hv_DataBD, 
              out hv_FXcheck);

          hv_Cod_Core_ToUse.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Cod_Core_ToUse = hv_DataBD.TupleSelect(
              3);
          }
          hv_Cod_Core_ToUseAux.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Cod_Core_ToUseAux = hv_DataBD.TupleSelect(
              3);
          }
          hv_Pallet_To_Scan.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Pallet_To_Scan = hv_DataBD.TupleSelect(
              15);
          }
          hv_Segmento_To_Scan.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Segmento_To_Scan = hv_DataBD.TupleSelect(
              16);
          }
          hv_PitutoExist.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_PitutoExist = hv_DataBD.TupleSelect(
              5);
          }


          hv_FXcheck.Dispose();
          hv_FXcheck = 1;


          hv_Index.Dispose();
          hv_Variable_BD.Dispose();
          hv_DataBD.Dispose();
          hv_Cod_Core_ToUseAux.Dispose();
          hv_Exception.Dispose();
          hv_EstadoFx.Dispose();

          return;
        }
        // catch (Exception) 
        catch (HalconException HDevExpDefaultException1)
        {
          HDevExpDefaultException1.ToHTuple(out hv_Exception);

          //Mensaje := '### ERROR ### -> Entidad Requerida -> '+Cod_Core_ToUse+' <- RAM base DATOS no CARGADA.'
          //Send_Data_Info (Mensaje, SerialHandle)
          hv_EstadoFx.Dispose();
          Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx);
          hv_FXcheck.Dispose();
          hv_FXcheck = 0;
        }
      }


      hv_Index.Dispose();
      hv_Variable_BD.Dispose();
      hv_DataBD.Dispose();
      hv_Cod_Core_ToUseAux.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Index.Dispose();
      hv_Variable_BD.Dispose();
      hv_DataBD.Dispose();
      hv_Cod_Core_ToUseAux.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Core_ToUse_From_BDD_Fast_COPY_5 (HTuple hv_SerialHandle, out HTuple hv_Cod_Core_ToUse, 
      out HTuple hv_Pallet_To_Scan, out HTuple hv_Segmento_To_Scan, out HTuple hv_PitutoExist, 
      out HTuple hv_FXcheck)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Index = new HTuple(), hv_Variable_BD = new HTuple();
    HTuple hv_DataBD = new HTuple(), hv_Cod_Core_ToUseAux = new HTuple();
    HTuple hv_Exception = new HTuple(), hv_EstadoFx = new HTuple();
    // Initialize local and output iconic variables 
    hv_Cod_Core_ToUse = new HTuple();
    hv_Pallet_To_Scan = new HTuple();
    hv_Segmento_To_Scan = new HTuple();
    hv_PitutoExist = new HTuple();
    hv_FXcheck = new HTuple();
    try
    {

      hv_FXcheck.Dispose();
      hv_FXcheck = 0;
      for (hv_Index=1; (int)hv_Index<=5; hv_Index = (int)hv_Index + 1)
      {


        try
        {
          hv_Variable_BD.Dispose();
          hv_Variable_BD = "ram_actualproduction";
          hv_DataBD.Dispose();hv_FXcheck.Dispose();
          Get_Pallet_Bd_Fast_COPY_1(hv_Variable_BD, hv_SerialHandle, out hv_DataBD, 
              out hv_FXcheck);

          hv_Cod_Core_ToUse.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Cod_Core_ToUse = hv_DataBD.TupleSelect(
              3);
          }
          hv_Cod_Core_ToUseAux.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Cod_Core_ToUseAux = hv_DataBD.TupleSelect(
              3);
          }
          hv_Pallet_To_Scan.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Pallet_To_Scan = hv_DataBD.TupleSelect(
              15);
          }
          hv_Segmento_To_Scan.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Segmento_To_Scan = hv_DataBD.TupleSelect(
              16);
          }
          hv_PitutoExist.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_PitutoExist = hv_DataBD.TupleSelect(
              5);
          }


          hv_FXcheck.Dispose();
          hv_FXcheck = 1;


          hv_Index.Dispose();
          hv_Variable_BD.Dispose();
          hv_DataBD.Dispose();
          hv_Cod_Core_ToUseAux.Dispose();
          hv_Exception.Dispose();
          hv_EstadoFx.Dispose();

          return;
        }
        // catch (Exception) 
        catch (HalconException HDevExpDefaultException1)
        {
          HDevExpDefaultException1.ToHTuple(out hv_Exception);

          //Mensaje := '### ERROR ### -> Entidad Requerida -> '+Cod_Core_ToUse+' <- RAM base DATOS no CARGADA.'
          //Send_Data_Info (Mensaje, SerialHandle)
          hv_EstadoFx.Dispose();
          Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx);
          hv_FXcheck.Dispose();
          hv_FXcheck = 0;
        }
      }


      hv_Index.Dispose();
      hv_Variable_BD.Dispose();
      hv_DataBD.Dispose();
      hv_Cod_Core_ToUseAux.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Index.Dispose();
      hv_Variable_BD.Dispose();
      hv_DataBD.Dispose();
      hv_Cod_Core_ToUseAux.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Core_ToUse_From_BDD_Fast_COPY_6 (HTuple hv_SerialHandle, out HTuple hv_Cod_Core_ToUse, 
      out HTuple hv_Pallet_To_Scan, out HTuple hv_Segmento_To_Scan, out HTuple hv_PitutoExist, 
      out HTuple hv_FXcheck)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Index = new HTuple(), hv_Variable_BD = new HTuple();
    HTuple hv_DataBD = new HTuple(), hv_Cod_Core_ToUseAux = new HTuple();
    HTuple hv_Exception = new HTuple(), hv_EstadoFx = new HTuple();
    // Initialize local and output iconic variables 
    hv_Cod_Core_ToUse = new HTuple();
    hv_Pallet_To_Scan = new HTuple();
    hv_Segmento_To_Scan = new HTuple();
    hv_PitutoExist = new HTuple();
    hv_FXcheck = new HTuple();
    try
    {

      hv_FXcheck.Dispose();
      hv_FXcheck = 0;
      for (hv_Index=1; (int)hv_Index<=5; hv_Index = (int)hv_Index + 1)
      {


        try
        {
          hv_Variable_BD.Dispose();
          hv_Variable_BD = "ram_actualproduction";
          hv_DataBD.Dispose();hv_FXcheck.Dispose();
          Get_Pallet_Bd_Fast_COPY_1(hv_Variable_BD, hv_SerialHandle, out hv_DataBD, 
              out hv_FXcheck);

          hv_Cod_Core_ToUse.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Cod_Core_ToUse = hv_DataBD.TupleSelect(
              3);
          }
          hv_Cod_Core_ToUseAux.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Cod_Core_ToUseAux = hv_DataBD.TupleSelect(
              3);
          }
          hv_Pallet_To_Scan.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Pallet_To_Scan = hv_DataBD.TupleSelect(
              15);
          }
          hv_Segmento_To_Scan.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Segmento_To_Scan = hv_DataBD.TupleSelect(
              16);
          }
          hv_PitutoExist.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_PitutoExist = hv_DataBD.TupleSelect(
              5);
          }


          hv_FXcheck.Dispose();
          hv_FXcheck = 1;


          hv_Index.Dispose();
          hv_Variable_BD.Dispose();
          hv_DataBD.Dispose();
          hv_Cod_Core_ToUseAux.Dispose();
          hv_Exception.Dispose();
          hv_EstadoFx.Dispose();

          return;
        }
        // catch (Exception) 
        catch (HalconException HDevExpDefaultException1)
        {
          HDevExpDefaultException1.ToHTuple(out hv_Exception);

          //Mensaje := '### ERROR ### -> Entidad Requerida -> '+Cod_Core_ToUse+' <- RAM base DATOS no CARGADA.'
          //Send_Data_Info (Mensaje, SerialHandle)
          hv_EstadoFx.Dispose();
          Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx);
          hv_FXcheck.Dispose();
          hv_FXcheck = 0;
        }
      }


      hv_Index.Dispose();
      hv_Variable_BD.Dispose();
      hv_DataBD.Dispose();
      hv_Cod_Core_ToUseAux.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Index.Dispose();
      hv_Variable_BD.Dispose();
      hv_DataBD.Dispose();
      hv_Cod_Core_ToUseAux.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Core_ToUse_From_BDD_Fast_COPY_7 (HTuple hv_SerialHandle, out HTuple hv_Cod_Core_ToUse, 
      out HTuple hv_Pallet_To_Scan, out HTuple hv_Segmento_To_Scan, out HTuple hv_PitutoExist, 
      out HTuple hv_FXcheck)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Index = new HTuple(), hv_Variable_BD = new HTuple();
    HTuple hv_DataBD = new HTuple(), hv_Cod_Core_ToUseAux = new HTuple();
    HTuple hv_Exception = new HTuple(), hv_EstadoFx = new HTuple();
    // Initialize local and output iconic variables 
    hv_Cod_Core_ToUse = new HTuple();
    hv_Pallet_To_Scan = new HTuple();
    hv_Segmento_To_Scan = new HTuple();
    hv_PitutoExist = new HTuple();
    hv_FXcheck = new HTuple();
    try
    {

      hv_FXcheck.Dispose();
      hv_FXcheck = 0;
      for (hv_Index=1; (int)hv_Index<=5; hv_Index = (int)hv_Index + 1)
      {


        try
        {
          hv_Variable_BD.Dispose();
          hv_Variable_BD = "ram_actualproduction";
          hv_DataBD.Dispose();hv_FXcheck.Dispose();
          Get_Pallet_Bd_Fast_COPY_1(hv_Variable_BD, hv_SerialHandle, out hv_DataBD, 
              out hv_FXcheck);

          hv_Cod_Core_ToUse.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Cod_Core_ToUse = hv_DataBD.TupleSelect(
              3);
          }
          hv_Cod_Core_ToUseAux.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Cod_Core_ToUseAux = hv_DataBD.TupleSelect(
              3);
          }
          hv_Pallet_To_Scan.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Pallet_To_Scan = hv_DataBD.TupleSelect(
              15);
          }
          hv_Segmento_To_Scan.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Segmento_To_Scan = hv_DataBD.TupleSelect(
              16);
          }
          hv_PitutoExist.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_PitutoExist = hv_DataBD.TupleSelect(
              5);
          }


          hv_FXcheck.Dispose();
          hv_FXcheck = 1;


          hv_Index.Dispose();
          hv_Variable_BD.Dispose();
          hv_DataBD.Dispose();
          hv_Cod_Core_ToUseAux.Dispose();
          hv_Exception.Dispose();
          hv_EstadoFx.Dispose();

          return;
        }
        // catch (Exception) 
        catch (HalconException HDevExpDefaultException1)
        {
          HDevExpDefaultException1.ToHTuple(out hv_Exception);

          //Mensaje := '### ERROR ### -> Entidad Requerida -> '+Cod_Core_ToUse+' <- RAM base DATOS no CARGADA.'
          //Send_Data_Info (Mensaje, SerialHandle)
          hv_EstadoFx.Dispose();
          Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx);
          hv_FXcheck.Dispose();
          hv_FXcheck = 0;
        }
      }


      hv_Index.Dispose();
      hv_Variable_BD.Dispose();
      hv_DataBD.Dispose();
      hv_Cod_Core_ToUseAux.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Index.Dispose();
      hv_Variable_BD.Dispose();
      hv_DataBD.Dispose();
      hv_Cod_Core_ToUseAux.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Core_ToUse_From_BDD_Fast_COPY_8 (HTuple hv_SerialHandle, out HTuple hv_Cod_Core_ToUse, 
      out HTuple hv_Pallet_To_Scan, out HTuple hv_Segmento_To_Scan, out HTuple hv_PitutoExist, 
      out HTuple hv_FXcheck)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Index = new HTuple(), hv_Variable_BD = new HTuple();
    HTuple hv_DataBD = new HTuple(), hv_Cod_Core_ToUseAux = new HTuple();
    HTuple hv_Exception = new HTuple(), hv_EstadoFx = new HTuple();
    // Initialize local and output iconic variables 
    hv_Cod_Core_ToUse = new HTuple();
    hv_Pallet_To_Scan = new HTuple();
    hv_Segmento_To_Scan = new HTuple();
    hv_PitutoExist = new HTuple();
    hv_FXcheck = new HTuple();
    try
    {

      hv_FXcheck.Dispose();
      hv_FXcheck = 0;
      for (hv_Index=1; (int)hv_Index<=5; hv_Index = (int)hv_Index + 1)
      {


        try
        {
          hv_Variable_BD.Dispose();
          hv_Variable_BD = "ram_actualproduction";
          hv_DataBD.Dispose();hv_FXcheck.Dispose();
          Get_Pallet_Bd_Fast_COPY_1(hv_Variable_BD, hv_SerialHandle, out hv_DataBD, 
              out hv_FXcheck);

          hv_Cod_Core_ToUse.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Cod_Core_ToUse = hv_DataBD.TupleSelect(
              3);
          }
          hv_Cod_Core_ToUseAux.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Cod_Core_ToUseAux = hv_DataBD.TupleSelect(
              3);
          }
          hv_Pallet_To_Scan.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Pallet_To_Scan = hv_DataBD.TupleSelect(
              15);
          }
          hv_Segmento_To_Scan.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Segmento_To_Scan = hv_DataBD.TupleSelect(
              16);
          }
          hv_PitutoExist.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_PitutoExist = hv_DataBD.TupleSelect(
              5);
          }


          hv_FXcheck.Dispose();
          hv_FXcheck = 1;


          hv_Index.Dispose();
          hv_Variable_BD.Dispose();
          hv_DataBD.Dispose();
          hv_Cod_Core_ToUseAux.Dispose();
          hv_Exception.Dispose();
          hv_EstadoFx.Dispose();

          return;
        }
        // catch (Exception) 
        catch (HalconException HDevExpDefaultException1)
        {
          HDevExpDefaultException1.ToHTuple(out hv_Exception);

          //Mensaje := '### ERROR ### -> Entidad Requerida -> '+Cod_Core_ToUse+' <- RAM base DATOS no CARGADA.'
          //Send_Data_Info (Mensaje, SerialHandle)
          hv_EstadoFx.Dispose();
          Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx);
          hv_FXcheck.Dispose();
          hv_FXcheck = 0;
        }
      }


      hv_Index.Dispose();
      hv_Variable_BD.Dispose();
      hv_DataBD.Dispose();
      hv_Cod_Core_ToUseAux.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Index.Dispose();
      hv_Variable_BD.Dispose();
      hv_DataBD.Dispose();
      hv_Cod_Core_ToUseAux.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Core_ToUse_From_BDD_Fast_COPY_9 (HTuple hv_SerialHandle, out HTuple hv_Cod_Core_ToUse, 
      out HTuple hv_Pallet_To_Scan, out HTuple hv_Segmento_To_Scan, out HTuple hv_PitutoExist, 
      out HTuple hv_FXcheck, out HTuple hv_Diametro)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Index = new HTuple(), hv_Variable_BD = new HTuple();
    HTuple hv_DataBD = new HTuple(), hv_Cod_Core_ToUseAux = new HTuple();
    HTuple hv_Exception = new HTuple(), hv_EstadoFx = new HTuple();
    // Initialize local and output iconic variables 
    hv_Cod_Core_ToUse = new HTuple();
    hv_Pallet_To_Scan = new HTuple();
    hv_Segmento_To_Scan = new HTuple();
    hv_PitutoExist = new HTuple();
    hv_FXcheck = new HTuple();
    hv_Diametro = new HTuple();
    try
    {

      hv_FXcheck.Dispose();
      hv_FXcheck = 0;
      for (hv_Index=1; (int)hv_Index<=5; hv_Index = (int)hv_Index + 1)
      {


        try
        {
          hv_Variable_BD.Dispose();
          hv_Variable_BD = "ram_actualproduction";
          hv_DataBD.Dispose();hv_FXcheck.Dispose();
          Get_Pallet_Bd_Fast_COPY_1(hv_Variable_BD, hv_SerialHandle, out hv_DataBD, 
              out hv_FXcheck);

          hv_Cod_Core_ToUse.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Cod_Core_ToUse = hv_DataBD.TupleSelect(
              3);
          }
          hv_Cod_Core_ToUseAux.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Cod_Core_ToUseAux = hv_DataBD.TupleSelect(
              3);
          }
          hv_Pallet_To_Scan.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Pallet_To_Scan = hv_DataBD.TupleSelect(
              15);
          }
          hv_Segmento_To_Scan.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Segmento_To_Scan = hv_DataBD.TupleSelect(
              16);
          }
          hv_PitutoExist.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_PitutoExist = hv_DataBD.TupleSelect(
              5);
          }
          hv_Diametro.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Diametro = hv_DataBD.TupleSelect(
              12);
          }

          {
          HTuple ExpTmpOutVar_0;
          HOperatorSet.TupleNumber(hv_Diametro, out ExpTmpOutVar_0);
          hv_Diametro.Dispose();
          hv_Diametro = ExpTmpOutVar_0;
          }

          hv_FXcheck.Dispose();
          hv_FXcheck = 1;


          hv_Index.Dispose();
          hv_Variable_BD.Dispose();
          hv_DataBD.Dispose();
          hv_Cod_Core_ToUseAux.Dispose();
          hv_Exception.Dispose();
          hv_EstadoFx.Dispose();

          return;
        }
        // catch (Exception) 
        catch (HalconException HDevExpDefaultException1)
        {
          HDevExpDefaultException1.ToHTuple(out hv_Exception);

          //Mensaje := '### ERROR ### -> Entidad Requerida -> '+Cod_Core_ToUse+' <- RAM base DATOS no CARGADA.'
          //Send_Data_Info (Mensaje, SerialHandle)
          hv_EstadoFx.Dispose();
          Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx);
          hv_FXcheck.Dispose();
          hv_FXcheck = 0;
        }
      }


      hv_Index.Dispose();
      hv_Variable_BD.Dispose();
      hv_DataBD.Dispose();
      hv_Cod_Core_ToUseAux.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Index.Dispose();
      hv_Variable_BD.Dispose();
      hv_DataBD.Dispose();
      hv_Cod_Core_ToUseAux.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Cores (out HTuple hv_Cores)
  {


    // Local iconic variables 

    // Local control variables 

    HTuple hv_Archivos = new HTuple(), hv_Index1 = new HTuple();
    HTuple hv_CoreAux = new HTuple(), hv_largo_CoreAux = new HTuple();
    // Initialize local and output iconic variables 
    hv_Cores = new HTuple();
    try
    {
      hv_Archivos.Dispose();
      HOperatorSet.ListFiles("D:/AI/Vision Artificial/4.-MAGOTTEAUX/SFM_CORES", "directories", 
          out hv_Archivos);
      //
      hv_Cores.Dispose();
      hv_Cores = "";
      for (hv_Index1=0; (int)hv_Index1<=(int)((new HTuple(hv_Archivos.TupleLength()
          ))-1); hv_Index1 = (int)hv_Index1 + 1)
      {
        //
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_CoreAux.Dispose();
        HOperatorSet.TupleSplit(hv_Archivos.TupleSelect(hv_Index1), "\\", out hv_CoreAux);
        }
        hv_largo_CoreAux.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_largo_CoreAux = new HTuple(hv_CoreAux.TupleLength()
            );
        }
        if (hv_Cores == null)
          hv_Cores = new HTuple();
        hv_Cores[hv_Index1] = hv_CoreAux.TupleSelect(hv_largo_CoreAux-1);
        //
      }

      hv_Archivos.Dispose();
      hv_Index1.Dispose();
      hv_CoreAux.Dispose();
      hv_largo_CoreAux.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Archivos.Dispose();
      hv_Index1.Dispose();
      hv_CoreAux.Dispose();
      hv_largo_CoreAux.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Cores_BD (out HTuple hv_Path_CORE_ID, out HTuple hv_Path_SFM_Segmentos, 
      out HTuple hv_Path_3D_Segmentos)
  {


    // Local iconic variables 

    // Local control variables 

    HTuple hv_Cores = new HTuple(), hv_Path = new HTuple();
    HTuple hv_Files = new HTuple(), hv_j = new HTuple();
    // Initialize local and output iconic variables 
    hv_Path_CORE_ID = new HTuple();
    hv_Path_SFM_Segmentos = new HTuple();
    hv_Path_3D_Segmentos = new HTuple();
    try
    {

      //Cores en BD


      hv_Cores.Dispose();
      Get_Cores(out hv_Cores);
      hv_Path_CORE_ID.Dispose();
      hv_Path_CORE_ID = new HTuple(hv_Cores);

      //* FALSEANDO ENTREGA DE INFO **
      hv_Path.Dispose();
      hv_Path = "D:/AI/Vision Artificial/4.-MAGOTTEAUX/SFM_CORES/";

      hv_Files.Dispose();
      HOperatorSet.ListFiles("D:/AI/Vision Artificial/4.-MAGOTTEAUX/SFM_CORES", "files", 
          out hv_Files);

      for (hv_j=0; (int)hv_j<=(int)((new HTuple(hv_Path_CORE_ID.TupleLength()))-1); hv_j = (int)hv_j + 1)
      {
        if (hv_Path_SFM_Segmentos == null)
          hv_Path_SFM_Segmentos = new HTuple();
        hv_Path_SFM_Segmentos[hv_j] = (((hv_Path+(hv_Path_CORE_ID.TupleSelect(hv_j)))+"/")+(hv_Path_CORE_ID.TupleSelect(
            hv_j)))+"_SFM.sfm";
        if (hv_Path_3D_Segmentos == null)
          hv_Path_3D_Segmentos = new HTuple();
        hv_Path_3D_Segmentos[hv_j] = (((hv_Path+(hv_Path_CORE_ID.TupleSelect(hv_j)))+"/")+(hv_Path_CORE_ID.TupleSelect(
            hv_j)))+"_3D.stl";
      }



      hv_Cores.Dispose();
      hv_Path.Dispose();
      hv_Files.Dispose();
      hv_j.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Cores.Dispose();
      hv_Path.Dispose();
      hv_Files.Dispose();
      hv_j.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_DiametroInternoCore_from_BDE (HTuple hv_Core, HTuple hv_SerialHandle, 
      out HTuple hv_Diametro)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Peticion = new HTuple(), hv_SubRutina = new HTuple();
    HTuple hv_Data = new HTuple(), hv_VarSerial = new HTuple();
    HTuple hv_Conteo = new HTuple(), hv_Nchar = new HTuple();
    HTuple hv_Variable = new HTuple(), hv_FXcheck = new HTuple();
    HTuple hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    hv_Diametro = new HTuple();
    try
    {
      try
      {
        //
        hv_Peticion.Dispose();
        hv_Peticion = "BaseDatos";
        hv_SubRutina.Dispose();
        hv_SubRutina = "Get_DiametroCore";

        hv_Data.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Data = (((hv_Peticion+";")+hv_SubRutina)+";")+hv_Core;
        }
        //
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.WriteSerial(hv_SerialHandle, hv_Data.TupleOrds());
        }




        hv_VarSerial.Dispose();
        hv_VarSerial = 0;
        hv_Conteo.Dispose();
        hv_Conteo = 0;
        while ((int)((new HTuple(hv_VarSerial.TupleLess(1))).TupleAnd(new HTuple(hv_Conteo.TupleLess(
            50)))) != 0)
        {

          //Numero de caracteres a leer
          hv_Nchar.Dispose();
          HOperatorSet.ReadSerial(hv_SerialHandle, 10, out hv_Nchar);
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Nchar = hv_Nchar.TupleChrt()
              ;
          hv_Nchar.Dispose();
          hv_Nchar = ExpTmpLocalVar_Nchar;
          }
          }
          hv_Variable.Dispose();
          HOperatorSet.TupleNumber(hv_Nchar, out hv_Variable);
          hv_VarSerial.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_VarSerial = new HTuple(hv_Nchar.TupleLength()
              );
          }

          hv_Diametro.Dispose();
          hv_Diametro = new HTuple(hv_Variable);

          if ((int)(new HTuple(hv_Variable.TupleEqual("###ERROR###"))) != 0)
          {
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            Send_Data_Info(("### ERROR ### Entidad -> "+hv_Core)+"<-\n -----------> NO EXISTE\nEn la lista de Base Datos Dinamica. Verifica las bases de Datos", 
                hv_SerialHandle);
            }
            hv_FXcheck.Dispose();
            hv_FXcheck = 0;

            hv_Peticion.Dispose();
            hv_SubRutina.Dispose();
            hv_Data.Dispose();
            hv_VarSerial.Dispose();
            hv_Conteo.Dispose();
            hv_Nchar.Dispose();
            hv_Variable.Dispose();
            hv_FXcheck.Dispose();
            hv_Exception.Dispose();

            return;
          }

          //tuple_split (Substrings, ';', DataBD)
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Conteo = hv_Conteo+1;
          hv_Conteo.Dispose();
          hv_Conteo = ExpTmpLocalVar_Conteo;
          }
          }
          hv_FXcheck.Dispose();
          hv_FXcheck = 1;
        }


        if ((int)(new HTuple(hv_Diametro.TupleEqual(new HTuple()))) != 0)
        {
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          Send_Data_Info(("### ERROR ### Entidad -> "+hv_Core)+"<-\n -----------> NO EXISTE\nEn la lista de Base Datos Dinamica. Verifica las bases de Datos", 
              hv_SerialHandle);
          }

        }
        else
        {
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          Send_Data_Info(("-------------> Diametro Solicitado ----> "+hv_Diametro)+" [mm]", 
              hv_SerialHandle);
          }

        }




      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);

      }

      hv_Peticion.Dispose();
      hv_SubRutina.Dispose();
      hv_Data.Dispose();
      hv_VarSerial.Dispose();
      hv_Conteo.Dispose();
      hv_Nchar.Dispose();
      hv_Variable.Dispose();
      hv_FXcheck.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Peticion.Dispose();
      hv_SubRutina.Dispose();
      hv_Data.Dispose();
      hv_VarSerial.Dispose();
      hv_Conteo.Dispose();
      hv_Nchar.Dispose();
      hv_Variable.Dispose();
      hv_FXcheck.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_DiametroInternoCore_from_BDE_COPY_1 (HTuple hv_Core, HTuple hv_SerialHandle, 
      out HTuple hv_Diametro)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Peticion = new HTuple(), hv_SubRutina = new HTuple();
    HTuple hv_Data = new HTuple(), hv_VarSerial = new HTuple();
    HTuple hv_Conteo = new HTuple(), hv_Nchar = new HTuple();
    HTuple hv_Variable = new HTuple(), hv_FXcheck = new HTuple();
    HTuple hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    hv_Diametro = new HTuple();
    try
    {
      try
      {

        hv_Peticion.Dispose();
        hv_Peticion = "BaseDatos";
        hv_SubRutina.Dispose();
        hv_SubRutina = "Get_DiametroCore";

        hv_Data.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Data = (((hv_Peticion+";")+hv_SubRutina)+";")+hv_Core;
        }

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.WriteSerial(hv_SerialHandle, hv_Data.TupleOrds());
        }




        hv_VarSerial.Dispose();
        hv_VarSerial = 0;
        hv_Conteo.Dispose();
        hv_Conteo = 0;
        while ((int)((new HTuple(hv_VarSerial.TupleLess(1))).TupleAnd(new HTuple(hv_Conteo.TupleLess(
            50)))) != 0)
        {

          //Numero de caracteres a leer
          hv_Nchar.Dispose();
          HOperatorSet.ReadSerial(hv_SerialHandle, 10, out hv_Nchar);
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Nchar = hv_Nchar.TupleChrt()
              ;
          hv_Nchar.Dispose();
          hv_Nchar = ExpTmpLocalVar_Nchar;
          }
          }
          hv_Variable.Dispose();
          HOperatorSet.TupleNumber(hv_Nchar, out hv_Variable);
          hv_VarSerial.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_VarSerial = new HTuple(hv_Nchar.TupleLength()
              );
          }

          hv_Diametro.Dispose();
          hv_Diametro = new HTuple(hv_Variable);

          if ((int)(new HTuple(hv_Variable.TupleEqual("###ERROR###"))) != 0)
          {
            hv_FXcheck.Dispose();
            hv_FXcheck = 0;

            hv_Peticion.Dispose();
            hv_SubRutina.Dispose();
            hv_Data.Dispose();
            hv_VarSerial.Dispose();
            hv_Conteo.Dispose();
            hv_Nchar.Dispose();
            hv_Variable.Dispose();
            hv_FXcheck.Dispose();
            hv_Exception.Dispose();

            return;
          }

          //tuple_split (Substrings, ';', DataBD)
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Conteo = hv_Conteo+1;
          hv_Conteo.Dispose();
          hv_Conteo = ExpTmpLocalVar_Conteo;
          }
          }
          hv_FXcheck.Dispose();
          hv_FXcheck = 1;
        }


      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);

      }

      hv_Peticion.Dispose();
      hv_SubRutina.Dispose();
      hv_Data.Dispose();
      hv_VarSerial.Dispose();
      hv_Conteo.Dispose();
      hv_Nchar.Dispose();
      hv_Variable.Dispose();
      hv_FXcheck.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Peticion.Dispose();
      hv_SubRutina.Dispose();
      hv_Data.Dispose();
      hv_VarSerial.Dispose();
      hv_Conteo.Dispose();
      hv_Nchar.Dispose();
      hv_Variable.Dispose();
      hv_FXcheck.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_DiametroInternoCore_from_BDE_COPY_2 (HTuple hv_Core, HTuple hv_SerialHandle, 
      out HTuple hv_Diametro)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Peticion = new HTuple(), hv_SubRutina = new HTuple();
    HTuple hv_Data = new HTuple(), hv_VarSerial = new HTuple();
    HTuple hv_Conteo = new HTuple(), hv_Nchar = new HTuple();
    HTuple hv_Variable = new HTuple(), hv_FXcheck = new HTuple();
    HTuple hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    hv_Diametro = new HTuple();
    try
    {
      try
      {

        hv_Peticion.Dispose();
        hv_Peticion = "BaseDatos";
        hv_SubRutina.Dispose();
        hv_SubRutina = "Get_DiametroCore";

        hv_Data.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Data = (((hv_Peticion+";")+hv_SubRutina)+";")+hv_Core;
        }

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.WriteSerial(hv_SerialHandle, hv_Data.TupleOrds());
        }




        hv_VarSerial.Dispose();
        hv_VarSerial = 0;
        hv_Conteo.Dispose();
        hv_Conteo = 0;
        while ((int)((new HTuple(hv_VarSerial.TupleLess(1))).TupleAnd(new HTuple(hv_Conteo.TupleLess(
            50)))) != 0)
        {

          //Numero de caracteres a leer
          hv_Nchar.Dispose();
          HOperatorSet.ReadSerial(hv_SerialHandle, 10, out hv_Nchar);
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Nchar = hv_Nchar.TupleChrt()
              ;
          hv_Nchar.Dispose();
          hv_Nchar = ExpTmpLocalVar_Nchar;
          }
          }
          hv_Variable.Dispose();
          HOperatorSet.TupleNumber(hv_Nchar, out hv_Variable);
          hv_VarSerial.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_VarSerial = new HTuple(hv_Nchar.TupleLength()
              );
          }

          hv_Diametro.Dispose();
          hv_Diametro = new HTuple(hv_Variable);

          if ((int)(new HTuple(hv_Variable.TupleEqual("###ERROR###"))) != 0)
          {
            hv_FXcheck.Dispose();
            hv_FXcheck = 0;

            hv_Peticion.Dispose();
            hv_SubRutina.Dispose();
            hv_Data.Dispose();
            hv_VarSerial.Dispose();
            hv_Conteo.Dispose();
            hv_Nchar.Dispose();
            hv_Variable.Dispose();
            hv_FXcheck.Dispose();
            hv_Exception.Dispose();

            return;
          }

          //tuple_split (Substrings, ';', DataBD)
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Conteo = hv_Conteo+1;
          hv_Conteo.Dispose();
          hv_Conteo = ExpTmpLocalVar_Conteo;
          }
          }
          hv_FXcheck.Dispose();
          hv_FXcheck = 1;
        }


        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        Send_Data_Info(("-------------> Diametro Solicitado ----> "+hv_Diametro)+" [mm]", 
            hv_SerialHandle);
        }


      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);

      }

      hv_Peticion.Dispose();
      hv_SubRutina.Dispose();
      hv_Data.Dispose();
      hv_VarSerial.Dispose();
      hv_Conteo.Dispose();
      hv_Nchar.Dispose();
      hv_Variable.Dispose();
      hv_FXcheck.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Peticion.Dispose();
      hv_SubRutina.Dispose();
      hv_Data.Dispose();
      hv_VarSerial.Dispose();
      hv_Conteo.Dispose();
      hv_Nchar.Dispose();
      hv_Variable.Dispose();
      hv_FXcheck.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Diff_angular (HTuple hv_ValorA_2, out HTuple hv_ValorMin)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_ValorA_2abs = new HTuple(), hv_diff_ = new HTuple();
    HTuple hv_Abs = new HTuple(), hv_Min = new HTuple(), hv_Index = new HTuple();
    HTuple hv_ValorMin_real = new HTuple(), hv_Signo = new HTuple();
    // Initialize local and output iconic variables 
    hv_ValorMin = new HTuple();
    try
    {


      hv_ValorA_2abs.Dispose();
      HOperatorSet.TupleAbs(hv_ValorA_2, out hv_ValorA_2abs);
      if (hv_diff_ == null)
        hv_diff_ = new HTuple();
      hv_diff_[0] = 0-hv_ValorA_2abs;
      if (hv_diff_ == null)
        hv_diff_ = new HTuple();
      hv_diff_[1] = 90-hv_ValorA_2abs;
      if (hv_diff_ == null)
        hv_diff_ = new HTuple();
      hv_diff_[2] = 180-hv_ValorA_2abs;
      if (hv_diff_ == null)
        hv_diff_ = new HTuple();
      hv_diff_[3] = 270-hv_ValorA_2abs;
      hv_Abs.Dispose();
      HOperatorSet.TupleAbs(hv_diff_, out hv_Abs);
      hv_Min.Dispose();
      HOperatorSet.TupleMin(hv_Abs, out hv_Min);



      for (hv_Index=0; (int)hv_Index<=3; hv_Index = (int)hv_Index + 1)
      {
        if ((int)(new HTuple(hv_Min.TupleEqual(hv_Abs.TupleSelect(hv_Index)))) != 0)
        {
          hv_ValorMin.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_ValorMin = hv_diff_.TupleSelect(
              hv_Index);
          }
          {
          HTuple ExpTmpOutVar_0;
          HOperatorSet.TupleReal(hv_ValorMin, out ExpTmpOutVar_0);
          hv_ValorMin.Dispose();
          hv_ValorMin = ExpTmpOutVar_0;
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_ValorMin_real.Dispose();
          HOperatorSet.TupleReal(hv_diff_.TupleSelect(hv_Index), out hv_ValorMin_real);
          }
          hv_Signo.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Signo = (hv_Abs.TupleSelect(
              hv_Index))/hv_ValorMin_real;
          }
          hv_ValorMin.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_ValorMin = (hv_Abs.TupleSelect(
              hv_Index))*hv_Signo;
          }


          break;
        }
      }

      hv_ValorA_2abs.Dispose();
      hv_diff_.Dispose();
      hv_Abs.Dispose();
      hv_Min.Dispose();
      hv_Index.Dispose();
      hv_ValorMin_real.Dispose();
      hv_Signo.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_ValorA_2abs.Dispose();
      hv_diff_.Dispose();
      hv_Abs.Dispose();
      hv_Min.Dispose();
      hv_Index.Dispose();
      hv_ValorMin_real.Dispose();
      hv_Signo.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_DimencionesCore (HTuple hv_ObjectModel3D_Core, HTuple hv_IsA_Sleeve, 
      HTuple hv_PosibleManga, HTuple hv_SerialHandle, out HTuple hv_AltoTotal_Core, 
      out HTuple hv_AnchoTotal_Core, out HTuple hv_LargoTotal_Core)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_CentroModelo = new HTuple(), hv_XYZ = new HTuple();
    HTuple hv_AltoTotal = new HTuple(), hv_AnchoTotal = new HTuple();
    HTuple hv_LargoTotal = new HTuple();
    // Initialize local and output iconic variables 
    hv_AltoTotal_Core = new HTuple();
    hv_AnchoTotal_Core = new HTuple();
    hv_LargoTotal_Core = new HTuple();
    try
    {
      hv_CentroModelo.Dispose();
      HOperatorSet.GetObjectModel3dParams(hv_ObjectModel3D_Core, "center", out hv_CentroModelo);
      hv_XYZ.Dispose();
      HOperatorSet.GetObjectModel3dParams(hv_ObjectModel3D_Core, "bounding_box1", 
          out hv_XYZ);

      hv_AltoTotal.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_AltoTotal = (hv_XYZ.TupleSelect(
          2))-(hv_XYZ.TupleSelect(5));
      }
      hv_AnchoTotal.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_AnchoTotal = (hv_XYZ.TupleSelect(
          0))-(hv_XYZ.TupleSelect(3));
      }
      hv_LargoTotal.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_LargoTotal = (hv_XYZ.TupleSelect(
          1))-(hv_XYZ.TupleSelect(4));
      }

      hv_AltoTotal_Core.Dispose();
      HOperatorSet.TupleAbs(hv_AltoTotal, out hv_AltoTotal_Core);
      hv_AnchoTotal_Core.Dispose();
      HOperatorSet.TupleAbs(hv_AnchoTotal, out hv_AnchoTotal_Core);
      hv_LargoTotal_Core.Dispose();
      HOperatorSet.TupleAbs(hv_LargoTotal, out hv_LargoTotal_Core);

      //*********************************************
      //Obtengo el Diametro del Core desde la BDD
      //*********************************************
      hv_AnchoTotal_Core.Dispose();
      Get_DiametroInternoCore_from_BDE(hv_PosibleManga, hv_SerialHandle, out hv_AnchoTotal_Core);

      {
      HTuple ExpTmpOutVar_0;
      HOperatorSet.TupleNumber(hv_AnchoTotal_Core, out ExpTmpOutVar_0);
      hv_AnchoTotal_Core.Dispose();
      hv_AnchoTotal_Core = ExpTmpOutVar_0;
      }


      if ((int)(hv_IsA_Sleeve) != 0)
      {
        hv_AnchoTotal_Core.Dispose();
        Get_DiametroInternoCore_from_BDE(hv_PosibleManga, hv_SerialHandle, out hv_AnchoTotal_Core);
        {
        HTuple ExpTmpOutVar_0;
        HOperatorSet.TupleNumber(hv_AnchoTotal_Core, out ExpTmpOutVar_0);
        hv_AnchoTotal_Core.Dispose();
        hv_AnchoTotal_Core = ExpTmpOutVar_0;
        }
      }







      hv_CentroModelo.Dispose();
      hv_XYZ.Dispose();
      hv_AltoTotal.Dispose();
      hv_AnchoTotal.Dispose();
      hv_LargoTotal.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_CentroModelo.Dispose();
      hv_XYZ.Dispose();
      hv_AltoTotal.Dispose();
      hv_AnchoTotal.Dispose();
      hv_LargoTotal.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_DinamicCoreData (HTuple hv_N_Pallet_to_Scan, HTuple hv_SerialHandle, 
      HTuple hv_Segmento, out HTuple hv_FXcheck, out HTuple hv_Segmento_Core_Actual)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Peticion = new HTuple(), hv_SubRutina = new HTuple();
    HTuple hv_Data = new HTuple(), hv_VarSerial = new HTuple();
    HTuple hv_Conteo = new HTuple(), hv_Nchar = new HTuple();
    HTuple hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    hv_FXcheck = new HTuple();
    hv_Segmento_Core_Actual = new HTuple();
    try
    {



      try
      {
        //
        hv_Peticion.Dispose();
        hv_Peticion = "BaseDatos";
        hv_SubRutina.Dispose();
        hv_SubRutina = "Get_Core_Segmento";
        hv_Data.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Data = (((((hv_Peticion+";")+hv_SubRutina)+";")+hv_N_Pallet_to_Scan)+";")+hv_Segmento;
        }

        //
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.WriteSerial(hv_SerialHandle, hv_Data.TupleOrds());
        }




        HOperatorSet.WaitSeconds(0.10);
        hv_VarSerial.Dispose();
        hv_VarSerial = 0;
        hv_Conteo.Dispose();
        hv_Conteo = 0;
        while ((int)((new HTuple(hv_VarSerial.TupleLess(1))).TupleAnd(new HTuple(hv_Conteo.TupleLess(
            50)))) != 0)
        {

          //Numero de caracteres a leer
          hv_Nchar.Dispose();
          HOperatorSet.ReadSerial(hv_SerialHandle, 500, out hv_Nchar);
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Nchar = hv_Nchar.TupleChrt()
              ;
          hv_Nchar.Dispose();
          hv_Nchar = ExpTmpLocalVar_Nchar;
          }
          }
          hv_Segmento_Core_Actual.Dispose();
          HOperatorSet.TupleNumber(hv_Nchar, out hv_Segmento_Core_Actual);
          hv_VarSerial.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_VarSerial = new HTuple(hv_Nchar.TupleLength()
              );
          }

          if ((int)(new HTuple(hv_Segmento_Core_Actual.TupleEqual("###ERROR###"))) != 0)
          {
            hv_FXcheck.Dispose();
            hv_FXcheck = 0;

            hv_Peticion.Dispose();
            hv_SubRutina.Dispose();
            hv_Data.Dispose();
            hv_VarSerial.Dispose();
            hv_Conteo.Dispose();
            hv_Nchar.Dispose();
            hv_Exception.Dispose();

            return;
          }

          //tuple_split (Substrings, ';', DataBD)
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Conteo = hv_Conteo+1;
          hv_Conteo.Dispose();
          hv_Conteo = ExpTmpLocalVar_Conteo;
          }
          }
          hv_FXcheck.Dispose();
          hv_FXcheck = 1;
        }

        if ((int)(new HTuple(hv_Conteo.TupleGreaterEqual(10))) != 0)
        {

          hv_FXcheck.Dispose();
          hv_FXcheck = 0;
        }
        else
        {
          hv_FXcheck.Dispose();
          hv_FXcheck = 1;

        }







      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);

      }


      hv_Peticion.Dispose();
      hv_SubRutina.Dispose();
      hv_Data.Dispose();
      hv_VarSerial.Dispose();
      hv_Conteo.Dispose();
      hv_Nchar.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Peticion.Dispose();
      hv_SubRutina.Dispose();
      hv_Data.Dispose();
      hv_VarSerial.Dispose();
      hv_Conteo.Dispose();
      hv_Nchar.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_DinamicDataPallet (HTuple hv_N_Pallet_to_Scan, HTuple hv_SerialHandle, 
      out HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Matrix_Pallet, out HTuple hv_FXcheck, 
      out HTuple hv_ExisteAlgunApilado)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Peticion = new HTuple(), hv_SubRutina = new HTuple();
    HTuple hv_Data = new HTuple(), hv_VarSerial = new HTuple();
    HTuple hv_Conteo = new HTuple(), hv_Nchar = new HTuple();
    HTuple hv_Variable = new HTuple(), hv_Substrings = new HTuple();
    HTuple hv_DataBD = new HTuple(), hv_Index = new HTuple();
    HTuple hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    hvec_Matrix_Pallet = new HTupleVector(2);
    hv_FXcheck = new HTuple();
    hv_ExisteAlgunApilado = new HTuple();
    try
    {



      try
      {
        //
        hv_Peticion.Dispose();
        hv_Peticion = "BaseDatos";
        hv_SubRutina.Dispose();
        hv_SubRutina = "Get_GlobalPallet";
        hv_Data.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Data = (((hv_Peticion+";")+hv_SubRutina)+";")+hv_N_Pallet_to_Scan;
        }
        //
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.WriteSerial(hv_SerialHandle, hv_Data.TupleOrds());
        }


        hvec_Matrix_Pallet.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hvec_Matrix_Pallet = dh.Take((
            dh.Add(new HTupleVector(2)).Insert(0,(dh.Add(new HTupleVector(1)).Insert(0,dh.Add(new HTupleVector(new HTuple())))))));
        }
        hvec_Matrix_Pallet[0][0] = new HTupleVector(new HTuple("CodCore"));
        hvec_Matrix_Pallet[0][1] = new HTupleVector(new HTuple("Pallet"));
        hvec_Matrix_Pallet[0][2] = new HTupleVector(new HTuple("Segmento"));
        hvec_Matrix_Pallet[0][3] = new HTupleVector(new HTuple("Cantidad"));
        hvec_Matrix_Pallet[0][4] = new HTupleVector(new HTuple("Codificacion"));
        hvec_Matrix_Pallet[0][5] = new HTupleVector(new HTuple("¿EsApilado?"));


        HOperatorSet.WaitSeconds(0.10);
        hv_VarSerial.Dispose();
        hv_VarSerial = 0;
        hv_Conteo.Dispose();
        hv_Conteo = 0;
        while ((int)((new HTuple(hv_VarSerial.TupleLess(1))).TupleAnd(new HTuple(hv_Conteo.TupleLess(
            50)))) != 0)
        {

          //Numero de caracteres a leer
          hv_Nchar.Dispose();
          HOperatorSet.ReadSerial(hv_SerialHandle, 500, out hv_Nchar);
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Nchar = hv_Nchar.TupleChrt()
              ;
          hv_Nchar.Dispose();
          hv_Nchar = ExpTmpLocalVar_Nchar;
          }
          }
          hv_Variable.Dispose();
          HOperatorSet.TupleNumber(hv_Nchar, out hv_Variable);
          hv_VarSerial.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_VarSerial = new HTuple(hv_Nchar.TupleLength()
              );
          }

          if ((int)(new HTuple(hv_Variable.TupleEqual("###ERROR###"))) != 0)
          {
            hv_FXcheck.Dispose();
            hv_FXcheck = 0;

            hv_Peticion.Dispose();
            hv_SubRutina.Dispose();
            hv_Data.Dispose();
            hv_VarSerial.Dispose();
            hv_Conteo.Dispose();
            hv_Nchar.Dispose();
            hv_Variable.Dispose();
            hv_Substrings.Dispose();
            hv_DataBD.Dispose();
            hv_Index.Dispose();
            hv_Exception.Dispose();

            return;
          }
          hv_Substrings.Dispose();
          HOperatorSet.TupleSplit(hv_Nchar, "#", out hv_Substrings);
          //tuple_split (Substrings, ';', DataBD)
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Conteo = hv_Conteo+1;
          hv_Conteo.Dispose();
          hv_Conteo = ExpTmpLocalVar_Conteo;
          }
          }
          hv_FXcheck.Dispose();
          hv_FXcheck = 1;
        }

        if ((int)(new HTuple(hv_Conteo.TupleGreaterEqual(10))) != 0)
        {

          hv_FXcheck.Dispose();
          hv_FXcheck = 0;
        }
        else
        {
          hv_FXcheck.Dispose();
          hv_FXcheck = 1;

          hv_ExisteAlgunApilado.Dispose();
          hv_ExisteAlgunApilado = 0;
          for (hv_Index=0; (int)hv_Index<=(int)((new HTuple(hv_Substrings.TupleLength()
              ))-1); hv_Index = (int)hv_Index + 1)
          {


            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_DataBD.Dispose();
            HOperatorSet.TupleSplit(hv_Substrings.TupleSelect(hv_Index), ";", out hv_DataBD);
            }

            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hvec_Matrix_Pallet[hv_Index+1][0] = dh.Add(new HTupleVector(hv_DataBD.TupleSelect(
                0)));
            }
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hvec_Matrix_Pallet[hv_Index+1][1] = dh.Add(new HTupleVector(hv_DataBD.TupleSelect(
                1)));
            }
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hvec_Matrix_Pallet[hv_Index+1][2] = dh.Add(new HTupleVector(hv_DataBD.TupleSelect(
                2)));
            }
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hvec_Matrix_Pallet[hv_Index+1][3] = dh.Add(new HTupleVector(hv_DataBD.TupleSelect(
                3)));
            }
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hvec_Matrix_Pallet[hv_Index+1][4] = dh.Add(new HTupleVector(hv_DataBD.TupleSelect(
                4)));
            }
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hvec_Matrix_Pallet[hv_Index+1][5] = dh.Add(new HTupleVector(hv_DataBD.TupleSelect(
                5)));
            }

            //*******************************************
            //Valores de TipoDeCore
            //*******************************************
            if ((int)(new HTuple(((hv_DataBD.TupleSelect(5))).TupleEqual("1"))) != 0)
            {
              hv_ExisteAlgunApilado.Dispose();
              hv_ExisteAlgunApilado = 1;
            }
            else if ((int)(new HTuple(((hv_DataBD.TupleSelect(5))).TupleEqual(
                "0"))) != 0)
            {
              hv_ExisteAlgunApilado.Dispose();
              hv_ExisteAlgunApilado = 0;
            }
            else if ((int)(new HTuple(((hv_DataBD.TupleSelect(5))).TupleEqual(
                "2"))) != 0)
            {
              //Indico si es core vertical
              hv_ExisteAlgunApilado.Dispose();
              hv_ExisteAlgunApilado = 2;
            }
            //*******************************************

          }

        }

      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);

      }


      hv_Peticion.Dispose();
      hv_SubRutina.Dispose();
      hv_Data.Dispose();
      hv_VarSerial.Dispose();
      hv_Conteo.Dispose();
      hv_Nchar.Dispose();
      hv_Variable.Dispose();
      hv_Substrings.Dispose();
      hv_DataBD.Dispose();
      hv_Index.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Peticion.Dispose();
      hv_SubRutina.Dispose();
      hv_Data.Dispose();
      hv_VarSerial.Dispose();
      hv_Conteo.Dispose();
      hv_Nchar.Dispose();
      hv_Variable.Dispose();
      hv_Substrings.Dispose();
      hv_DataBD.Dispose();
      hv_Index.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_DinamicDataPallet_COPY_1 (HTuple hv_N_Pallet_to_Scan, HTuple hv_SerialHandle, 
      out HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Matrix_Pallet, out HTuple hv_FXcheck, 
      out HTuple hv_ExisteAlgunApilado)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Peticion = new HTuple(), hv_SubRutina = new HTuple();
    HTuple hv_Data = new HTuple(), hv_VarSerial = new HTuple();
    HTuple hv_Conteo = new HTuple(), hv_Nchar = new HTuple();
    HTuple hv_Variable = new HTuple(), hv_Substrings = new HTuple();
    HTuple hv_DataBD = new HTuple(), hv_Index = new HTuple();
    HTuple hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    hvec_Matrix_Pallet = new HTupleVector(2);
    hv_FXcheck = new HTuple();
    hv_ExisteAlgunApilado = new HTuple();
    try
    {



      try
      {

        hv_Peticion.Dispose();
        hv_Peticion = "BaseDatos";
        hv_SubRutina.Dispose();
        hv_SubRutina = "Get_GlobalPallet";
        hv_Data.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Data = (((hv_Peticion+";")+hv_SubRutina)+";")+hv_N_Pallet_to_Scan;
        }

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.WriteSerial(hv_SerialHandle, hv_Data.TupleOrds());
        }


        hvec_Matrix_Pallet.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hvec_Matrix_Pallet = dh.Take((
            dh.Add(new HTupleVector(2)).Insert(0,(dh.Add(new HTupleVector(1)).Insert(0,dh.Add(new HTupleVector(new HTuple())))))));
        }
        hvec_Matrix_Pallet[0][0] = new HTupleVector(new HTuple("CodCore"));
        hvec_Matrix_Pallet[0][1] = new HTupleVector(new HTuple("Pallet"));
        hvec_Matrix_Pallet[0][2] = new HTupleVector(new HTuple("Segmento"));
        hvec_Matrix_Pallet[0][3] = new HTupleVector(new HTuple("Cantidad"));
        hvec_Matrix_Pallet[0][4] = new HTupleVector(new HTuple("Codificacion"));
        hvec_Matrix_Pallet[0][4] = new HTupleVector(new HTuple("¿EsApilado?"));


        HOperatorSet.WaitSeconds(0.10);
        hv_VarSerial.Dispose();
        hv_VarSerial = 0;
        hv_Conteo.Dispose();
        hv_Conteo = 0;
        while ((int)((new HTuple(hv_VarSerial.TupleLess(1))).TupleAnd(new HTuple(hv_Conteo.TupleLess(
            50)))) != 0)
        {

          //Numero de caracteres a leer
          hv_Nchar.Dispose();
          HOperatorSet.ReadSerial(hv_SerialHandle, 800, out hv_Nchar);
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Nchar = hv_Nchar.TupleChrt()
              ;
          hv_Nchar.Dispose();
          hv_Nchar = ExpTmpLocalVar_Nchar;
          }
          }
          hv_Variable.Dispose();
          HOperatorSet.TupleNumber(hv_Nchar, out hv_Variable);
          hv_VarSerial.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_VarSerial = new HTuple(hv_Nchar.TupleLength()
              );
          }

          hv_Substrings.Dispose();
          HOperatorSet.TupleSplit(hv_Nchar, "#", out hv_Substrings);
          //tuple_split (Substrings, ';', DataBD)
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Conteo = hv_Conteo+1;
          hv_Conteo.Dispose();
          hv_Conteo = ExpTmpLocalVar_Conteo;
          }
          }
          hv_FXcheck.Dispose();
          hv_FXcheck = 1;
        }

        if ((int)(new HTuple(hv_Conteo.TupleGreaterEqual(10))) != 0)
        {

          hv_FXcheck.Dispose();
          hv_FXcheck = 0;
        }
        else
        {
          hv_FXcheck.Dispose();
          hv_FXcheck = 1;

          hv_ExisteAlgunApilado.Dispose();
          hv_ExisteAlgunApilado = 0;
          for (hv_Index=0; (int)hv_Index<=(int)((new HTuple(hv_Substrings.TupleLength()
              ))-1); hv_Index = (int)hv_Index + 1)
          {


            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_DataBD.Dispose();
            HOperatorSet.TupleSplit(hv_Substrings.TupleSelect(hv_Index), ";", out hv_DataBD);
            }

            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hvec_Matrix_Pallet[hv_Index+1][0] = dh.Add(new HTupleVector(hv_DataBD.TupleSelect(
                0)));
            }
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hvec_Matrix_Pallet[hv_Index+1][1] = dh.Add(new HTupleVector(hv_DataBD.TupleSelect(
                1)));
            }
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hvec_Matrix_Pallet[hv_Index+1][2] = dh.Add(new HTupleVector(hv_DataBD.TupleSelect(
                2)));
            }
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hvec_Matrix_Pallet[hv_Index+1][3] = dh.Add(new HTupleVector(hv_DataBD.TupleSelect(
                3)));
            }
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hvec_Matrix_Pallet[hv_Index+1][4] = dh.Add(new HTupleVector(hv_DataBD.TupleSelect(
                4)));
            }
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hvec_Matrix_Pallet[hv_Index+1][5] = dh.Add(new HTupleVector(hv_DataBD.TupleSelect(
                5)));
            }
            if ((int)(new HTuple(((hv_DataBD.TupleSelect(5))).TupleEqual("1"))) != 0)
            {
              hv_ExisteAlgunApilado.Dispose();
              hv_ExisteAlgunApilado = 1;
            }

          }

        }







      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);

      }


      hv_Peticion.Dispose();
      hv_SubRutina.Dispose();
      hv_Data.Dispose();
      hv_VarSerial.Dispose();
      hv_Conteo.Dispose();
      hv_Nchar.Dispose();
      hv_Variable.Dispose();
      hv_Substrings.Dispose();
      hv_DataBD.Dispose();
      hv_Index.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Peticion.Dispose();
      hv_SubRutina.Dispose();
      hv_Data.Dispose();
      hv_VarSerial.Dispose();
      hv_Conteo.Dispose();
      hv_Nchar.Dispose();
      hv_Variable.Dispose();
      hv_Substrings.Dispose();
      hv_DataBD.Dispose();
      hv_Index.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Esquina (HObject ho_Image, out HObject ho_Cross, out HObject ho_ImageOut, 
      HTuple hv_phi, out HTuple hv_Row, out HTuple hv_Col)
  {




    // Stack for temporary objects 
    HObject[] OTemp = new HObject[20];

    // Local iconic variables 

    HObject ho_ROI_0, ho_ImageReduced1, ho_ConnectedRegions;
    HObject ho_SelectedRegions, ho_RegionErosion, ho_RegionDilation1;
    HObject ho_ImageReduced2, ho_ImageReduced3, ho_Pol, ho_Esquina;
    HObject ho_ImageCleared, ho_ImageCleared2, ho_IMG, ho_RegionDifference;
    HObject ho_EsquinaIMG, ho_DerivGauss, ho_DerivGauss2, ho_Crossw1=null;
    HObject ho_Crossw2=null;

    // Local copy input parameter variables 
    HObject ho_Image_COPY_INP_TMP;
    ho_Image_COPY_INP_TMP = new HObject(ho_Image);



    // Local control variables 

    HTuple hv_Estado_Funcion = new HTuple(), hv_Rango_Seguridad_Ditancia_puntos = new HTuple();
    HTuple hv_Width = new HTuple(), hv_Height = new HTuple();
    HTuple hv_HomMat2DIdentity = new HTuple(), hv_HomMat2DRotate = new HTuple();
    HTuple hv_Altura_Pallet = new HTuple(), hv_Ditancia_camara_Piso = new HTuple();
    HTuple hv_Rango_Seg = new HTuple(), hv_Rango_posible_borde_pallet = new HTuple();
    HTuple hv_Number = new HTuple(), hv_SigmaGrad = new HTuple();
    HTuple hv_SigmaSmooth = new HTuple(), hv_Threshold = new HTuple();
    HTuple hv_Index1 = new HTuple(), hv_Puntero_Menor = new HTuple();
    HTuple hv_Puntero_Mayor = new HTuple(), hv_Puntero_Menor_Col = new HTuple();
    HTuple hv_Puntero_Menor_Row = new HTuple(), hv_Index = new HTuple();
    HTuple hv_Distance = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Cross);
    HOperatorSet.GenEmptyObj(out ho_ImageOut);
    HOperatorSet.GenEmptyObj(out ho_ROI_0);
    HOperatorSet.GenEmptyObj(out ho_ImageReduced1);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
    HOperatorSet.GenEmptyObj(out ho_SelectedRegions);
    HOperatorSet.GenEmptyObj(out ho_RegionErosion);
    HOperatorSet.GenEmptyObj(out ho_RegionDilation1);
    HOperatorSet.GenEmptyObj(out ho_ImageReduced2);
    HOperatorSet.GenEmptyObj(out ho_ImageReduced3);
    HOperatorSet.GenEmptyObj(out ho_Pol);
    HOperatorSet.GenEmptyObj(out ho_Esquina);
    HOperatorSet.GenEmptyObj(out ho_ImageCleared);
    HOperatorSet.GenEmptyObj(out ho_ImageCleared2);
    HOperatorSet.GenEmptyObj(out ho_IMG);
    HOperatorSet.GenEmptyObj(out ho_RegionDifference);
    HOperatorSet.GenEmptyObj(out ho_EsquinaIMG);
    HOperatorSet.GenEmptyObj(out ho_DerivGauss);
    HOperatorSet.GenEmptyObj(out ho_DerivGauss2);
    HOperatorSet.GenEmptyObj(out ho_Crossw1);
    HOperatorSet.GenEmptyObj(out ho_Crossw2);
    hv_Row = new HTuple();
    hv_Col = new HTuple();
    try
    {
      ho_ImageOut.Dispose();
      ho_ImageOut = new HObject(ho_Image_COPY_INP_TMP);
      hv_Estado_Funcion.Dispose();
      hv_Estado_Funcion = 0;
      hv_Rango_Seguridad_Ditancia_puntos.Dispose();
      hv_Rango_Seguridad_Ditancia_puntos = 500;


      hv_Width.Dispose();hv_Height.Dispose();
      HOperatorSet.GetImageSize(ho_ImageOut, out hv_Width, out hv_Height);
      hv_HomMat2DIdentity.Dispose();
      HOperatorSet.HomMat2dIdentity(out hv_HomMat2DIdentity);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_HomMat2DRotate.Dispose();
      HOperatorSet.HomMat2dRotate(hv_HomMat2DIdentity, hv_phi.TupleRad(), hv_Width/2, 
          hv_Height/2, out hv_HomMat2DRotate);
      }
      //Apply an arbitrary affine transformation to an image
      {
      HObject ExpTmpOutVar_0;
      HOperatorSet.AffineTransImage(ho_Image_COPY_INP_TMP, out ExpTmpOutVar_0, hv_HomMat2DRotate, 
          "constant", "false");
      ho_Image_COPY_INP_TMP.Dispose();
      ho_Image_COPY_INP_TMP = ExpTmpOutVar_0;
      }
      //

      //*************************************
      //Segmentacion de esquina
      //*************************************
      hv_Altura_Pallet.Dispose();
      hv_Altura_Pallet = 1000;
      hv_Ditancia_camara_Piso.Dispose();
      hv_Ditancia_camara_Piso = 1700;
      hv_Rango_Seg.Dispose();
      hv_Rango_Seg = 50;
      hv_Rango_posible_borde_pallet.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Rango_posible_borde_pallet = hv_Ditancia_camara_Piso-hv_Altura_Pallet;
      }

      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      ho_ROI_0.Dispose();
      HOperatorSet.Threshold(ho_Image_COPY_INP_TMP, out ho_ROI_0, hv_Rango_posible_borde_pallet-hv_Rango_Seg, 
          hv_Rango_posible_borde_pallet+hv_Rango_Seg);
      }

      ho_ImageReduced1.Dispose();
      HOperatorSet.ReduceDomain(ho_Image_COPY_INP_TMP, ho_ROI_0, out ho_ImageReduced1
          );


      //*************************************
      //detecction de bordes
      //*************************************
      ho_ConnectedRegions.Dispose();
      HOperatorSet.Connection(ho_ROI_0, out ho_ConnectedRegions);
      {
      HObject ExpTmpOutVar_0;
      HOperatorSet.FillUp(ho_ConnectedRegions, out ExpTmpOutVar_0);
      ho_ConnectedRegions.Dispose();
      ho_ConnectedRegions = ExpTmpOutVar_0;
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      ho_SelectedRegions.Dispose();
      HOperatorSet.SelectShape(ho_ConnectedRegions, out ho_SelectedRegions, "area", 
          "and", 60000, 99912+1000);
      }
      //
      //*********************************************
      //contabilizo el numero de objetos encontrados
      hv_Number.Dispose();
      HOperatorSet.CountObj(ho_SelectedRegions, out hv_Number);
      //**********************************************

      ho_RegionErosion.Dispose();
      HOperatorSet.ErosionCircle(ho_SelectedRegions, out ho_RegionErosion, 3.5);

      ho_RegionDilation1.Dispose();
      HOperatorSet.DilationCircle(ho_SelectedRegions, out ho_RegionDilation1, 15);
      ho_ImageReduced2.Dispose();
      HOperatorSet.ReduceDomain(ho_Image_COPY_INP_TMP, ho_RegionDilation1, out ho_ImageReduced2
          );
      //
      ho_ImageReduced3.Dispose();
      HOperatorSet.ReduceDomain(ho_Image_COPY_INP_TMP, ho_RegionErosion, out ho_ImageReduced3
          );
      //
      HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "blue");
      //
      hv_Row.Dispose();hv_Col.Dispose();
      HOperatorSet.GetRegionPolygon(ho_SelectedRegions, 2, out hv_Row, out hv_Col);
      ho_Pol.Dispose();
      HOperatorSet.GenRegionPolygon(out ho_Pol, hv_Row, hv_Col);


      //**********************************************
      //Generacion de poligono
      //*********************************************
      ho_Pol.Dispose();
      HOperatorSet.GenRegionPolygonFilled(out ho_Pol, hv_Row, hv_Col);
      //
      //
      ho_Esquina.Dispose();
      HOperatorSet.ReduceDomain(ho_Image_COPY_INP_TMP, ho_Pol, out ho_Esquina);
      //
      ho_ImageCleared.Dispose();
      HOperatorSet.GenImageProto(ho_Image_COPY_INP_TMP, out ho_ImageCleared, 255);
      ho_ImageCleared2.Dispose();
      HOperatorSet.GenImageProto(ho_Image_COPY_INP_TMP, out ho_ImageCleared2, 128);
      //
      ho_IMG.Dispose();
      HOperatorSet.Threshold(ho_ImageCleared, out ho_IMG, 0, 255);
      ho_RegionDifference.Dispose();
      HOperatorSet.Difference(ho_IMG, ho_Esquina, out ho_RegionDifference);
      //
      ho_Esquina.Dispose();
      HOperatorSet.ReduceDomain(ho_ImageCleared, ho_RegionDifference, out ho_Esquina
          );
      //
      //
      ho_EsquinaIMG.Dispose();
      HOperatorSet.PaintRegion(ho_RegionDifference, ho_ImageCleared, out ho_EsquinaIMG, 
          10, "fill");
      //
      //
      //**********************************************
      //Harrys
      //**********************************************
      //
      ho_DerivGauss.Dispose();
      HOperatorSet.DerivateGauss(ho_EsquinaIMG, out ho_DerivGauss, 1, "yyy");
      ho_DerivGauss2.Dispose();
      HOperatorSet.GaussFilter(ho_DerivGauss, out ho_DerivGauss2, 11);

      hv_SigmaGrad.Dispose();
      hv_SigmaGrad = 1;
      hv_SigmaSmooth.Dispose();
      hv_SigmaSmooth = 5;
      hv_Threshold.Dispose();
      hv_Threshold = 1000;
      //dev_display (Image)
      hv_Row.Dispose();hv_Col.Dispose();
      HOperatorSet.PointsHarris(ho_DerivGauss, hv_SigmaGrad, hv_SigmaSmooth, 0.04, 
          hv_Threshold, out hv_Row, out hv_Col);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      ho_Cross.Dispose();
      HOperatorSet.GenCrossContourXld(out ho_Cross, hv_Row, hv_Col, 30, (new HTuple(45)).TupleRad()
          );
      }








      //dev_set_line_width (2)
      //dev_display (EsquinaIMG)
      //dev_set_color ('red')
      HOperatorSet.DispObj(ho_Cross, hv_ExpDefaultWinHandle);
      //dev_set_color ('red')


      for (hv_Index1=0; (int)hv_Index1<=(int)(new HTuple(((hv_Row-1)).TupleLength()
          )); hv_Index1 = (int)hv_Index1 + 1)
      {

        //disp_line (200000, Row[Index1], Col[Index1], Row[Index1+1], Col[Index1+1])


      }

      if ((int)(new HTuple(hv_Row.TupleLength())) != 0)
      {
        //BUSCO LA FILA Y COL MAS PEQUEÑA

        hv_Puntero_Menor.Dispose();
        hv_Puntero_Menor = 0;
        hv_Puntero_Mayor.Dispose();
        hv_Puntero_Mayor = 0;
        hv_Puntero_Menor_Col.Dispose();
        hv_Puntero_Menor_Col = 0;
        hv_Puntero_Menor_Row.Dispose();
        hv_Puntero_Menor_Row = 0;
        for (hv_Index=0; (int)hv_Index<=(int)((new HTuple(hv_Row.TupleLength()))-1); hv_Index = (int)hv_Index + 1)
        {


          if ((int)(new HTuple(((hv_Col.TupleSelect(hv_Puntero_Menor))).TupleGreater(
              hv_Col.TupleSelect(hv_Index)))) != 0)
          {
            hv_Puntero_Menor.Dispose();
            hv_Puntero_Menor = new HTuple(hv_Index);
          }

          if ((int)(new HTuple(((hv_Row.TupleSelect(hv_Puntero_Mayor))).TupleLess(
              hv_Row.TupleSelect(hv_Index)))) != 0)
          {
            hv_Puntero_Mayor.Dispose();
            hv_Puntero_Mayor = new HTuple(hv_Index);
          }


        }

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        ho_Crossw1.Dispose();
        HOperatorSet.GenCrossContourXld(out ho_Crossw1, hv_Row.TupleSelect(hv_Puntero_Menor), 
            hv_Col.TupleSelect(hv_Puntero_Menor), 80, (new HTuple(45)).TupleRad()
            );
        }
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        ho_Crossw2.Dispose();
        HOperatorSet.GenCrossContourXld(out ho_Crossw2, hv_Row.TupleSelect(hv_Puntero_Mayor), 
            hv_Col.TupleSelect(hv_Puntero_Mayor), 80, (new HTuple(45)).TupleRad()
            );
        }

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Distance.Dispose();
        HOperatorSet.DistancePp(hv_Row.TupleSelect(hv_Puntero_Menor), hv_Col.TupleSelect(
            hv_Puntero_Menor), hv_Row.TupleSelect(hv_Puntero_Mayor), hv_Col.TupleSelect(
            hv_Puntero_Mayor), out hv_Distance);
        }


        HOperatorSet.ClearWindow(hv_ExpDefaultWinHandle);
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        ho_Cross.Dispose();
        HOperatorSet.GenCrossContourXld(out ho_Cross, hv_Row, hv_Col, 30, (new HTuple(45)).TupleRad()
            );
        }
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        ho_Crossw1.Dispose();
        HOperatorSet.GenCrossContourXld(out ho_Crossw1, hv_Row.TupleSelect(hv_Puntero_Menor), 
            hv_Col.TupleSelect(hv_Puntero_Menor), 80, (new HTuple(45)).TupleRad()
            );
        }
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        ho_Crossw2.Dispose();
        HOperatorSet.GenCrossContourXld(out ho_Crossw2, hv_Row.TupleSelect(hv_Puntero_Mayor), 
            hv_Col.TupleSelect(hv_Puntero_Mayor), 80, (new HTuple(45)).TupleRad()
            );
        }
        HOperatorSet.DispObj(ho_EsquinaIMG, hv_ExpDefaultWinHandle);
        HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "red");
        HOperatorSet.DispObj(ho_Crossw1, hv_ExpDefaultWinHandle);
        HOperatorSet.DispObj(ho_Crossw2, hv_ExpDefaultWinHandle);


        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.DispLine(hv_ExpDefaultWinHandle, hv_Row.TupleSelect(hv_Puntero_Menor), 
            hv_Col.TupleSelect(hv_Puntero_Menor), hv_Row.TupleSelect(hv_Puntero_Mayor), 
            hv_Col.TupleSelect(hv_Puntero_Mayor));
        }

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.DispLine(hv_ExpDefaultWinHandle, hv_Row.TupleSelect(hv_Puntero_Mayor), 
            0, hv_Row.TupleSelect(hv_Puntero_Mayor), hv_Col.TupleSelect(hv_Puntero_Mayor));
        }
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.DispLine(hv_ExpDefaultWinHandle, hv_Row.TupleSelect(hv_Puntero_Menor), 
            hv_Col.TupleSelect(hv_Puntero_Menor), hv_Height, hv_Col.TupleSelect(hv_Puntero_Menor));
        }





        hv_Estado_Funcion.Dispose();
        hv_Estado_Funcion = 1;
      }
      else
      {


        hv_Estado_Funcion.Dispose();
        hv_Estado_Funcion = 0;
      }






















      ho_Image_COPY_INP_TMP.Dispose();
      ho_ROI_0.Dispose();
      ho_ImageReduced1.Dispose();
      ho_ConnectedRegions.Dispose();
      ho_SelectedRegions.Dispose();
      ho_RegionErosion.Dispose();
      ho_RegionDilation1.Dispose();
      ho_ImageReduced2.Dispose();
      ho_ImageReduced3.Dispose();
      ho_Pol.Dispose();
      ho_Esquina.Dispose();
      ho_ImageCleared.Dispose();
      ho_ImageCleared2.Dispose();
      ho_IMG.Dispose();
      ho_RegionDifference.Dispose();
      ho_EsquinaIMG.Dispose();
      ho_DerivGauss.Dispose();
      ho_DerivGauss2.Dispose();
      ho_Crossw1.Dispose();
      ho_Crossw2.Dispose();

      hv_Estado_Funcion.Dispose();
      hv_Rango_Seguridad_Ditancia_puntos.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_HomMat2DIdentity.Dispose();
      hv_HomMat2DRotate.Dispose();
      hv_Altura_Pallet.Dispose();
      hv_Ditancia_camara_Piso.Dispose();
      hv_Rango_Seg.Dispose();
      hv_Rango_posible_borde_pallet.Dispose();
      hv_Number.Dispose();
      hv_SigmaGrad.Dispose();
      hv_SigmaSmooth.Dispose();
      hv_Threshold.Dispose();
      hv_Index1.Dispose();
      hv_Puntero_Menor.Dispose();
      hv_Puntero_Mayor.Dispose();
      hv_Puntero_Menor_Col.Dispose();
      hv_Puntero_Menor_Row.Dispose();
      hv_Index.Dispose();
      hv_Distance.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_Image_COPY_INP_TMP.Dispose();
      ho_ROI_0.Dispose();
      ho_ImageReduced1.Dispose();
      ho_ConnectedRegions.Dispose();
      ho_SelectedRegions.Dispose();
      ho_RegionErosion.Dispose();
      ho_RegionDilation1.Dispose();
      ho_ImageReduced2.Dispose();
      ho_ImageReduced3.Dispose();
      ho_Pol.Dispose();
      ho_Esquina.Dispose();
      ho_ImageCleared.Dispose();
      ho_ImageCleared2.Dispose();
      ho_IMG.Dispose();
      ho_RegionDifference.Dispose();
      ho_EsquinaIMG.Dispose();
      ho_DerivGauss.Dispose();
      ho_DerivGauss2.Dispose();
      ho_Crossw1.Dispose();
      ho_Crossw2.Dispose();

      hv_Estado_Funcion.Dispose();
      hv_Rango_Seguridad_Ditancia_puntos.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_HomMat2DIdentity.Dispose();
      hv_HomMat2DRotate.Dispose();
      hv_Altura_Pallet.Dispose();
      hv_Ditancia_camara_Piso.Dispose();
      hv_Rango_Seg.Dispose();
      hv_Rango_posible_borde_pallet.Dispose();
      hv_Number.Dispose();
      hv_SigmaGrad.Dispose();
      hv_SigmaSmooth.Dispose();
      hv_Threshold.Dispose();
      hv_Index1.Dispose();
      hv_Puntero_Menor.Dispose();
      hv_Puntero_Mayor.Dispose();
      hv_Puntero_Menor_Col.Dispose();
      hv_Puntero_Menor_Row.Dispose();
      hv_Index.Dispose();
      hv_Distance.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Esquina_LeftRight (HObject ho_Img_Left_Esquina, out HObject ho_Esquina_Left, 
      out HObject ho_Esquina_Right)
  {



    // Local iconic variables 

    HObject ho_ROI_0, ho_ROI_1, ho_ImageReduced;
    HObject ho_ImageReduced_rigth, ho_Esquina, ho_Esquina_rigth;
    HObject ho_RegionErosion, ho_ConnectedRegions;

    // Local control variables 

    HTuple hv_Umbral = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Esquina_Left);
    HOperatorSet.GenEmptyObj(out ho_Esquina_Right);
    HOperatorSet.GenEmptyObj(out ho_ROI_0);
    HOperatorSet.GenEmptyObj(out ho_ROI_1);
    HOperatorSet.GenEmptyObj(out ho_ImageReduced);
    HOperatorSet.GenEmptyObj(out ho_ImageReduced_rigth);
    HOperatorSet.GenEmptyObj(out ho_Esquina);
    HOperatorSet.GenEmptyObj(out ho_Esquina_rigth);
    HOperatorSet.GenEmptyObj(out ho_RegionErosion);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
    try
    {





      ho_ROI_0.Dispose();
      HOperatorSet.GenRectangle1(out ho_ROI_0, -3.06, 694.54, 259.767, 951.393);
      ho_ROI_1.Dispose();
      HOperatorSet.GenRectangle1(out ho_ROI_1, 2, 1066.41, 2, 1281.68);




      hv_Umbral.Dispose();
      hv_Umbral = 180;

      ho_ImageReduced.Dispose();
      HOperatorSet.ReduceDomain(ho_Img_Left_Esquina, ho_ROI_0, out ho_ImageReduced
          );
      ho_ImageReduced_rigth.Dispose();
      HOperatorSet.ReduceDomain(ho_Img_Left_Esquina, ho_ROI_1, out ho_ImageReduced_rigth
          );
      ho_Esquina.Dispose();
      HOperatorSet.Threshold(ho_ImageReduced, out ho_Esquina, hv_Umbral, 255);
      ho_Esquina_rigth.Dispose();
      HOperatorSet.Threshold(ho_ImageReduced_rigth, out ho_Esquina_rigth, 150, 255);


      ho_RegionErosion.Dispose();
      HOperatorSet.ErosionRectangle1(ho_Esquina, out ho_RegionErosion, 3, 3);

      ho_ConnectedRegions.Dispose();
      HOperatorSet.Connection(ho_RegionErosion, out ho_ConnectedRegions);
      ho_Esquina_Left.Dispose();
      HOperatorSet.SelectShapeStd(ho_ConnectedRegions, out ho_Esquina_Left, "max_area", 
          90);


      ho_RegionErosion.Dispose();
      HOperatorSet.ErosionRectangle1(ho_Esquina_rigth, out ho_RegionErosion, 3, 3);

      ho_ConnectedRegions.Dispose();
      HOperatorSet.Connection(ho_RegionErosion, out ho_ConnectedRegions);
      ho_Esquina_Right.Dispose();
      HOperatorSet.SelectShapeStd(ho_ConnectedRegions, out ho_Esquina_Right, "max_area", 
          90);




      ho_ROI_0.Dispose();
      ho_ROI_1.Dispose();
      ho_ImageReduced.Dispose();
      ho_ImageReduced_rigth.Dispose();
      ho_Esquina.Dispose();
      ho_Esquina_rigth.Dispose();
      ho_RegionErosion.Dispose();
      ho_ConnectedRegions.Dispose();

      hv_Umbral.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_ROI_0.Dispose();
      ho_ROI_1.Dispose();
      ho_ImageReduced.Dispose();
      ho_ImageReduced_rigth.Dispose();
      ho_Esquina.Dispose();
      ho_Esquina_rigth.Dispose();
      ho_RegionErosion.Dispose();
      ho_ConnectedRegions.Dispose();

      hv_Umbral.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_EsquinasPattern (HTuple hv_Grayval, HTuple hv_RowToFind, HTuple hv_ColumToFind, 
      HTuple hv_Width, out HTuple hv_FilaPattern, out HTuple hv_ColumnasPattern, out HTuple hv_Ptr_Min, 
      out HTuple hv_Ptr_Min2, out HTuple hv_Ptr_Min3, out HTuple hv_EsquinaDetectadas)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_GrayvalOut = new HTuple(), hv_Umbral = new HTuple();
    HTuple hv_Ptros = new HTuple(), hv_AuxPtr = new HTuple();
    HTuple hv_Idx = new HTuple(), hv_WindowHandle = new HTuple();
    HTuple hv_Pow1 = new HTuple(), hv_Pow2 = new HTuple();
    HTuple hv_Sqrt = new HTuple(), hv_DistVectorial = new HTuple();
    HTuple hv_AuxMin = new HTuple(), hv_DistVectorial2 = new HTuple();
    HTuple hv_AuxMin2 = new HTuple(), hv_DistVectorial3 = new HTuple();
    HTuple hv_AuxMin3 = new HTuple(), hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    hv_FilaPattern = new HTuple();
    hv_ColumnasPattern = new HTuple();
    hv_Ptr_Min = new HTuple();
    hv_Ptr_Min2 = new HTuple();
    hv_Ptr_Min3 = new HTuple();
    hv_EsquinaDetectadas = new HTuple();
    try
    {
      hv_GrayvalOut.Dispose();
      hv_GrayvalOut = new HTuple(hv_Grayval);
      //
      hv_EsquinaDetectadas.Dispose();
      hv_EsquinaDetectadas = 0;
      try
      {
        //
        //
        //
        //*************************************************
        //** Umbral Corner Response
        hv_Umbral.Dispose();
        hv_Umbral = 2100;
        //*************************************************
        hv_Ptros.Dispose();
        hv_Ptros = 0;
        hv_AuxPtr.Dispose();
        hv_AuxPtr = 0;
        for (hv_Idx=0; (int)hv_Idx<=(int)((new HTuple(hv_GrayvalOut.TupleLength()
            ))-1); hv_Idx = (int)hv_Idx + 1)
        {
          if ((int)(new HTuple(((hv_GrayvalOut.TupleSelect(hv_Idx))).TupleGreater(
              hv_Umbral))) != 0)
          {
            if (hv_Ptros == null)
              hv_Ptros = new HTuple();
            hv_Ptros[hv_AuxPtr] = hv_Idx;
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            {
            HTuple 
              ExpTmpLocalVar_AuxPtr = hv_AuxPtr+1;
            hv_AuxPtr.Dispose();
            hv_AuxPtr = ExpTmpLocalVar_AuxPtr;
            }
            }
            if (hv_GrayvalOut == null)
              hv_GrayvalOut = new HTuple();
            hv_GrayvalOut[hv_Idx] = -1;
          }
        }
        hv_Umbral.Dispose();
        hv_Umbral = 0;
        for (hv_Idx=0; (int)hv_Idx<=(int)((new HTuple(hv_GrayvalOut.TupleLength()
            ))-1); hv_Idx = (int)hv_Idx + 1)
        {
          if ((int)(new HTuple(((hv_GrayvalOut.TupleSelect(hv_Idx))).TupleGreater(
              hv_Umbral))) != 0)
          {
            hv_Umbral.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_Umbral = hv_GrayvalOut.TupleSelect(
                hv_Idx);
            }
            if (hv_Ptros == null)
              hv_Ptros = new HTuple();
            hv_Ptros[3] = hv_Idx;
          }
        }
        //
        for (hv_Idx=0; (int)hv_Idx<=3; hv_Idx = (int)hv_Idx + 1)
        {
          if (hv_FilaPattern == null)
            hv_FilaPattern = new HTuple();
          hv_FilaPattern[hv_Idx] = hv_RowToFind.TupleSelect(hv_Ptros.TupleSelect(
              hv_Idx));
          if (hv_ColumnasPattern == null)
            hv_ColumnasPattern = new HTuple();
          hv_ColumnasPattern[hv_Idx] = hv_ColumToFind.TupleSelect(hv_Ptros.TupleSelect(
              hv_Idx));
        }
        //dev_get_window(...);

        //
        //
        for (hv_Idx=0; (int)hv_Idx<=3; hv_Idx = (int)hv_Idx + 1)
        {
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Pow1.Dispose();
          HOperatorSet.TuplePow(hv_FilaPattern.TupleSelect(hv_Idx), 2, out hv_Pow1);
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Pow2.Dispose();
          HOperatorSet.TuplePow(hv_ColumnasPattern.TupleSelect(hv_Idx), 2, out hv_Pow2);
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Sqrt.Dispose();
          HOperatorSet.TupleSqrt(hv_Pow1+hv_Pow2, out hv_Sqrt);
          }
          if (hv_DistVectorial == null)
            hv_DistVectorial = new HTuple();
          hv_DistVectorial[hv_Idx] = hv_Sqrt;
        }
        //
        //
        hv_AuxMin.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_AuxMin = hv_DistVectorial.TupleSelect(
            0);
        }
        hv_Ptr_Min.Dispose();
        hv_Ptr_Min = 0;
        for (hv_Idx=0; (int)hv_Idx<=(int)((new HTuple(hv_DistVectorial.TupleLength()
            ))-1); hv_Idx = (int)hv_Idx + 1)
        {
          if ((int)(new HTuple(((hv_DistVectorial.TupleSelect(hv_Idx))).TupleLess(
              hv_AuxMin))) != 0)
          {
            hv_Ptr_Min.Dispose();
            hv_Ptr_Min = new HTuple(hv_Idx);
            hv_AuxMin.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_AuxMin = hv_DistVectorial.TupleSelect(
                hv_Idx);
            }
          }
        }
        //
        //
        //
        for (hv_Idx=0; (int)hv_Idx<=3; hv_Idx = (int)hv_Idx + 1)
        {
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Pow1.Dispose();
          HOperatorSet.TuplePow(hv_FilaPattern.TupleSelect(hv_Idx), 2, out hv_Pow1);
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Pow2.Dispose();
          HOperatorSet.TuplePow(hv_Width-(hv_ColumnasPattern.TupleSelect(hv_Idx)), 
              2, out hv_Pow2);
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Sqrt.Dispose();
          HOperatorSet.TupleSqrt(hv_Pow1+hv_Pow2, out hv_Sqrt);
          }
          if (hv_DistVectorial2 == null)
            hv_DistVectorial2 = new HTuple();
          hv_DistVectorial2[hv_Idx] = hv_Sqrt;
        }
        //
        hv_AuxMin2.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_AuxMin2 = hv_DistVectorial2.TupleSelect(
            0);
        }
        hv_Ptr_Min2.Dispose();
        hv_Ptr_Min2 = 0;
        for (hv_Idx=0; (int)hv_Idx<=(int)((new HTuple(hv_DistVectorial2.TupleLength()
            ))-1); hv_Idx = (int)hv_Idx + 1)
        {
          if ((int)(new HTuple(((hv_DistVectorial2.TupleSelect(hv_Idx))).TupleLess(
              hv_AuxMin2))) != 0)
          {
            hv_Ptr_Min2.Dispose();
            hv_Ptr_Min2 = new HTuple(hv_Idx);
            hv_AuxMin2.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_AuxMin2 = hv_DistVectorial2.TupleSelect(
                hv_Idx);
            }
          }
        }
        //
        //
        for (hv_Idx=0; (int)hv_Idx<=3; hv_Idx = (int)hv_Idx + 1)
        {
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Pow1.Dispose();
          HOperatorSet.TuplePow(hv_Width-(hv_FilaPattern.TupleSelect(hv_Idx)), 2, 
              out hv_Pow1);
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Pow2.Dispose();
          HOperatorSet.TuplePow(hv_ColumnasPattern.TupleSelect(hv_Idx), 2, out hv_Pow2);
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Sqrt.Dispose();
          HOperatorSet.TupleSqrt(hv_Pow1+hv_Pow2, out hv_Sqrt);
          }
          if (hv_DistVectorial3 == null)
            hv_DistVectorial3 = new HTuple();
          hv_DistVectorial3[hv_Idx] = hv_Sqrt;
        }
        //
        hv_AuxMin3.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_AuxMin3 = hv_DistVectorial3.TupleSelect(
            0);
        }
        hv_Ptr_Min3.Dispose();
        hv_Ptr_Min3 = 0;
        for (hv_Idx=0; (int)hv_Idx<=(int)((new HTuple(hv_DistVectorial3.TupleLength()
            ))-1); hv_Idx = (int)hv_Idx + 1)
        {
          if ((int)(new HTuple(((hv_DistVectorial3.TupleSelect(hv_Idx))).TupleLess(
              hv_AuxMin3))) != 0)
          {
            hv_Ptr_Min3.Dispose();
            hv_Ptr_Min3 = new HTuple(hv_Idx);
            hv_AuxMin3.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_AuxMin3 = hv_DistVectorial3.TupleSelect(
                hv_Idx);
            }
          }
        }
        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_FilaPattern, hv_ColumnasPattern, 
            50, 0);
        hv_EsquinaDetectadas.Dispose();
        hv_EsquinaDetectadas = 1;
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_EsquinaDetectadas.Dispose();
        hv_EsquinaDetectadas = 0;
        //
        //
      }
      //
      //

      hv_GrayvalOut.Dispose();
      hv_Umbral.Dispose();
      hv_Ptros.Dispose();
      hv_AuxPtr.Dispose();
      hv_Idx.Dispose();
      hv_WindowHandle.Dispose();
      hv_Pow1.Dispose();
      hv_Pow2.Dispose();
      hv_Sqrt.Dispose();
      hv_DistVectorial.Dispose();
      hv_AuxMin.Dispose();
      hv_DistVectorial2.Dispose();
      hv_AuxMin2.Dispose();
      hv_DistVectorial3.Dispose();
      hv_AuxMin3.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_GrayvalOut.Dispose();
      hv_Umbral.Dispose();
      hv_Ptros.Dispose();
      hv_AuxPtr.Dispose();
      hv_Idx.Dispose();
      hv_WindowHandle.Dispose();
      hv_Pow1.Dispose();
      hv_Pow2.Dispose();
      hv_Sqrt.Dispose();
      hv_DistVectorial.Dispose();
      hv_AuxMin.Dispose();
      hv_DistVectorial2.Dispose();
      hv_AuxMin2.Dispose();
      hv_DistVectorial3.Dispose();
      hv_AuxMin3.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_EsquinasPattern_COPY_1 (HTuple hv_Grayval, HTuple hv_RowToFind, 
      HTuple hv_ColumToFind, HTuple hv_Width, out HTuple hv_FilaPattern, out HTuple hv_ColumnasPattern, 
      out HTuple hv_Ptr_Min, out HTuple hv_Ptr_Min2, out HTuple hv_Ptr_Min3, out HTuple hv_EsquinaDetectadas)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_GrayvalOut = new HTuple(), hv_WindowHandle = new HTuple();
    HTuple hv_Umbral = new HTuple(), hv_Ptros = new HTuple();
    HTuple hv_AuxPtr = new HTuple(), hv_Idx = new HTuple();
    HTuple hv_Pow1 = new HTuple(), hv_Pow2 = new HTuple();
    HTuple hv_Sqrt = new HTuple(), hv_DistVectorial = new HTuple();
    HTuple hv_AuxMin = new HTuple(), hv_DistVectorial2 = new HTuple();
    HTuple hv_AuxMin2 = new HTuple(), hv_DistVectorial3 = new HTuple();
    HTuple hv_AuxMin3 = new HTuple(), hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    hv_FilaPattern = new HTuple();
    hv_ColumnasPattern = new HTuple();
    hv_Ptr_Min = new HTuple();
    hv_Ptr_Min2 = new HTuple();
    hv_Ptr_Min3 = new HTuple();
    hv_EsquinaDetectadas = new HTuple();
    try
    {
      hv_GrayvalOut.Dispose();
      hv_GrayvalOut = new HTuple(hv_Grayval);


      //dev_get_window(...);
      hv_EsquinaDetectadas.Dispose();
      hv_EsquinaDetectadas = 0;
      try
      {



        //*************************************************
        //** Umbral Corner Response
        hv_Umbral.Dispose();
        hv_Umbral = 2100;
        //*************************************************
        hv_Ptros.Dispose();
        hv_Ptros = 0;
        hv_AuxPtr.Dispose();
        hv_AuxPtr = 0;
        for (hv_Idx=0; (int)hv_Idx<=(int)((new HTuple(hv_GrayvalOut.TupleLength()
            ))-1); hv_Idx = (int)hv_Idx + 1)
        {
          if ((int)(new HTuple(((hv_GrayvalOut.TupleSelect(hv_Idx))).TupleGreater(
              hv_Umbral))) != 0)
          {
            if (hv_Ptros == null)
              hv_Ptros = new HTuple();
            hv_Ptros[hv_AuxPtr] = hv_Idx;
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            {
            HTuple 
              ExpTmpLocalVar_AuxPtr = hv_AuxPtr+1;
            hv_AuxPtr.Dispose();
            hv_AuxPtr = ExpTmpLocalVar_AuxPtr;
            }
            }
            if (hv_GrayvalOut == null)
              hv_GrayvalOut = new HTuple();
            hv_GrayvalOut[hv_Idx] = -1;
          }
        }
        hv_Umbral.Dispose();
        hv_Umbral = 0;
        for (hv_Idx=0; (int)hv_Idx<=(int)((new HTuple(hv_GrayvalOut.TupleLength()
            ))-1); hv_Idx = (int)hv_Idx + 1)
        {
          if ((int)(new HTuple(((hv_GrayvalOut.TupleSelect(hv_Idx))).TupleGreater(
              hv_Umbral))) != 0)
          {
            hv_Umbral.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_Umbral = hv_GrayvalOut.TupleSelect(
                hv_Idx);
            }
            if (hv_Ptros == null)
              hv_Ptros = new HTuple();
            hv_Ptros[3] = hv_Idx;
          }
        }

        for (hv_Idx=0; (int)hv_Idx<=3; hv_Idx = (int)hv_Idx + 1)
        {
          if (hv_FilaPattern == null)
            hv_FilaPattern = new HTuple();
          hv_FilaPattern[hv_Idx] = hv_RowToFind.TupleSelect(hv_Ptros.TupleSelect(
              hv_Idx));
          if (hv_ColumnasPattern == null)
            hv_ColumnasPattern = new HTuple();
          hv_ColumnasPattern[hv_Idx] = hv_ColumToFind.TupleSelect(hv_Ptros.TupleSelect(
              hv_Idx));
        }

        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_FilaPattern, hv_ColumnasPattern, 
            50, 0);


        for (hv_Idx=0; (int)hv_Idx<=3; hv_Idx = (int)hv_Idx + 1)
        {
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Pow1.Dispose();
          HOperatorSet.TuplePow(hv_FilaPattern.TupleSelect(hv_Idx), 2, out hv_Pow1);
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Pow2.Dispose();
          HOperatorSet.TuplePow(hv_ColumnasPattern.TupleSelect(hv_Idx), 2, out hv_Pow2);
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Sqrt.Dispose();
          HOperatorSet.TupleSqrt(hv_Pow1+hv_Pow2, out hv_Sqrt);
          }
          if (hv_DistVectorial == null)
            hv_DistVectorial = new HTuple();
          hv_DistVectorial[hv_Idx] = hv_Sqrt;
        }


        hv_AuxMin.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_AuxMin = hv_DistVectorial.TupleSelect(
            0);
        }
        hv_Ptr_Min.Dispose();
        hv_Ptr_Min = 0;
        for (hv_Idx=0; (int)hv_Idx<=(int)((new HTuple(hv_DistVectorial.TupleLength()
            ))-1); hv_Idx = (int)hv_Idx + 1)
        {
          if ((int)(new HTuple(((hv_DistVectorial.TupleSelect(hv_Idx))).TupleLess(
              hv_AuxMin))) != 0)
          {
            hv_Ptr_Min.Dispose();
            hv_Ptr_Min = new HTuple(hv_Idx);
            hv_AuxMin.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_AuxMin = hv_DistVectorial.TupleSelect(
                hv_Idx);
            }
          }
        }



        for (hv_Idx=0; (int)hv_Idx<=3; hv_Idx = (int)hv_Idx + 1)
        {
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Pow1.Dispose();
          HOperatorSet.TuplePow(hv_FilaPattern.TupleSelect(hv_Idx), 2, out hv_Pow1);
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Pow2.Dispose();
          HOperatorSet.TuplePow(hv_Width-(hv_ColumnasPattern.TupleSelect(hv_Idx)), 
              2, out hv_Pow2);
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Sqrt.Dispose();
          HOperatorSet.TupleSqrt(hv_Pow1+hv_Pow2, out hv_Sqrt);
          }
          if (hv_DistVectorial2 == null)
            hv_DistVectorial2 = new HTuple();
          hv_DistVectorial2[hv_Idx] = hv_Sqrt;
        }

        hv_AuxMin2.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_AuxMin2 = hv_DistVectorial2.TupleSelect(
            0);
        }
        hv_Ptr_Min2.Dispose();
        hv_Ptr_Min2 = 0;
        for (hv_Idx=0; (int)hv_Idx<=(int)((new HTuple(hv_DistVectorial2.TupleLength()
            ))-1); hv_Idx = (int)hv_Idx + 1)
        {
          if ((int)(new HTuple(((hv_DistVectorial2.TupleSelect(hv_Idx))).TupleLess(
              hv_AuxMin2))) != 0)
          {
            hv_Ptr_Min2.Dispose();
            hv_Ptr_Min2 = new HTuple(hv_Idx);
            hv_AuxMin2.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_AuxMin2 = hv_DistVectorial2.TupleSelect(
                hv_Idx);
            }
          }
        }


        for (hv_Idx=0; (int)hv_Idx<=3; hv_Idx = (int)hv_Idx + 1)
        {
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Pow1.Dispose();
          HOperatorSet.TuplePow(hv_Width-(hv_FilaPattern.TupleSelect(hv_Idx)), 2, 
              out hv_Pow1);
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Pow2.Dispose();
          HOperatorSet.TuplePow(hv_ColumnasPattern.TupleSelect(hv_Idx), 2, out hv_Pow2);
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Sqrt.Dispose();
          HOperatorSet.TupleSqrt(hv_Pow1+hv_Pow2, out hv_Sqrt);
          }
          if (hv_DistVectorial3 == null)
            hv_DistVectorial3 = new HTuple();
          hv_DistVectorial3[hv_Idx] = hv_Sqrt;
        }

        hv_AuxMin3.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_AuxMin3 = hv_DistVectorial3.TupleSelect(
            0);
        }
        hv_Ptr_Min3.Dispose();
        hv_Ptr_Min3 = 0;
        for (hv_Idx=0; (int)hv_Idx<=(int)((new HTuple(hv_DistVectorial3.TupleLength()
            ))-1); hv_Idx = (int)hv_Idx + 1)
        {
          if ((int)(new HTuple(((hv_DistVectorial3.TupleSelect(hv_Idx))).TupleLess(
              hv_AuxMin3))) != 0)
          {
            hv_Ptr_Min3.Dispose();
            hv_Ptr_Min3 = new HTuple(hv_Idx);
            hv_AuxMin3.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_AuxMin3 = hv_DistVectorial3.TupleSelect(
                hv_Idx);
            }
          }
        }

        hv_EsquinaDetectadas.Dispose();
        hv_EsquinaDetectadas = 1;
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_EsquinaDetectadas.Dispose();
        hv_EsquinaDetectadas = 0;


      }



      hv_GrayvalOut.Dispose();
      hv_WindowHandle.Dispose();
      hv_Umbral.Dispose();
      hv_Ptros.Dispose();
      hv_AuxPtr.Dispose();
      hv_Idx.Dispose();
      hv_Pow1.Dispose();
      hv_Pow2.Dispose();
      hv_Sqrt.Dispose();
      hv_DistVectorial.Dispose();
      hv_AuxMin.Dispose();
      hv_DistVectorial2.Dispose();
      hv_AuxMin2.Dispose();
      hv_DistVectorial3.Dispose();
      hv_AuxMin3.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_GrayvalOut.Dispose();
      hv_WindowHandle.Dispose();
      hv_Umbral.Dispose();
      hv_Ptros.Dispose();
      hv_AuxPtr.Dispose();
      hv_Idx.Dispose();
      hv_Pow1.Dispose();
      hv_Pow2.Dispose();
      hv_Sqrt.Dispose();
      hv_DistVectorial.Dispose();
      hv_AuxMin.Dispose();
      hv_DistVectorial2.Dispose();
      hv_AuxMin2.Dispose();
      hv_DistVectorial3.Dispose();
      hv_AuxMin3.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_EsquinasPattern_COPY_2 (HTuple hv_Grayval, HTuple hv_RowToFind, 
      HTuple hv_ColumToFind, HTuple hv_Width, out HTuple hv_FilaPattern, out HTuple hv_ColumnasPattern, 
      out HTuple hv_Ptr_Min, out HTuple hv_Ptr_Min2, out HTuple hv_Ptr_Min3, out HTuple hv_EsquinaDetectadas)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_GrayvalOut = new HTuple(), hv_Umbral = new HTuple();
    HTuple hv_Ptros = new HTuple(), hv_AuxPtr = new HTuple();
    HTuple hv_Idx = new HTuple(), hv_WindowHandle = new HTuple();
    HTuple hv_Pow1 = new HTuple(), hv_Pow2 = new HTuple();
    HTuple hv_Sqrt = new HTuple(), hv_DistVectorial = new HTuple();
    HTuple hv_AuxMin = new HTuple(), hv_DistVectorial2 = new HTuple();
    HTuple hv_AuxMin2 = new HTuple(), hv_DistVectorial3 = new HTuple();
    HTuple hv_AuxMin3 = new HTuple(), hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    hv_FilaPattern = new HTuple();
    hv_ColumnasPattern = new HTuple();
    hv_Ptr_Min = new HTuple();
    hv_Ptr_Min2 = new HTuple();
    hv_Ptr_Min3 = new HTuple();
    hv_EsquinaDetectadas = new HTuple();
    try
    {
      hv_GrayvalOut.Dispose();
      hv_GrayvalOut = new HTuple(hv_Grayval);

      hv_EsquinaDetectadas.Dispose();
      hv_EsquinaDetectadas = 0;
      try
      {



        //*************************************************
        //** Umbral Corner Response
        hv_Umbral.Dispose();
        hv_Umbral = 2100;
        //*************************************************
        hv_Ptros.Dispose();
        hv_Ptros = 0;
        hv_AuxPtr.Dispose();
        hv_AuxPtr = 0;
        for (hv_Idx=0; (int)hv_Idx<=(int)((new HTuple(hv_GrayvalOut.TupleLength()
            ))-1); hv_Idx = (int)hv_Idx + 1)
        {
          if ((int)(new HTuple(((hv_GrayvalOut.TupleSelect(hv_Idx))).TupleGreater(
              hv_Umbral))) != 0)
          {
            if (hv_Ptros == null)
              hv_Ptros = new HTuple();
            hv_Ptros[hv_AuxPtr] = hv_Idx;
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            {
            HTuple 
              ExpTmpLocalVar_AuxPtr = hv_AuxPtr+1;
            hv_AuxPtr.Dispose();
            hv_AuxPtr = ExpTmpLocalVar_AuxPtr;
            }
            }
            if (hv_GrayvalOut == null)
              hv_GrayvalOut = new HTuple();
            hv_GrayvalOut[hv_Idx] = -1;
          }
        }
        hv_Umbral.Dispose();
        hv_Umbral = 0;
        for (hv_Idx=0; (int)hv_Idx<=(int)((new HTuple(hv_GrayvalOut.TupleLength()
            ))-1); hv_Idx = (int)hv_Idx + 1)
        {
          if ((int)(new HTuple(((hv_GrayvalOut.TupleSelect(hv_Idx))).TupleGreater(
              hv_Umbral))) != 0)
          {
            hv_Umbral.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_Umbral = hv_GrayvalOut.TupleSelect(
                hv_Idx);
            }
            if (hv_Ptros == null)
              hv_Ptros = new HTuple();
            hv_Ptros[3] = hv_Idx;
          }
        }

        for (hv_Idx=0; (int)hv_Idx<=3; hv_Idx = (int)hv_Idx + 1)
        {
          if (hv_FilaPattern == null)
            hv_FilaPattern = new HTuple();
          hv_FilaPattern[hv_Idx] = hv_RowToFind.TupleSelect(hv_Ptros.TupleSelect(
              hv_Idx));
          if (hv_ColumnasPattern == null)
            hv_ColumnasPattern = new HTuple();
          hv_ColumnasPattern[hv_Idx] = hv_ColumToFind.TupleSelect(hv_Ptros.TupleSelect(
              hv_Idx));
        }
        //dev_get_window(...);
        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_FilaPattern, hv_ColumnasPattern, 
            50, 0);


        for (hv_Idx=0; (int)hv_Idx<=3; hv_Idx = (int)hv_Idx + 1)
        {
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Pow1.Dispose();
          HOperatorSet.TuplePow(hv_FilaPattern.TupleSelect(hv_Idx), 2, out hv_Pow1);
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Pow2.Dispose();
          HOperatorSet.TuplePow(hv_ColumnasPattern.TupleSelect(hv_Idx), 2, out hv_Pow2);
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Sqrt.Dispose();
          HOperatorSet.TupleSqrt(hv_Pow1+hv_Pow2, out hv_Sqrt);
          }
          if (hv_DistVectorial == null)
            hv_DistVectorial = new HTuple();
          hv_DistVectorial[hv_Idx] = hv_Sqrt;
        }


        hv_AuxMin.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_AuxMin = hv_DistVectorial.TupleSelect(
            0);
        }
        hv_Ptr_Min.Dispose();
        hv_Ptr_Min = 0;
        for (hv_Idx=0; (int)hv_Idx<=(int)((new HTuple(hv_DistVectorial.TupleLength()
            ))-1); hv_Idx = (int)hv_Idx + 1)
        {
          if ((int)(new HTuple(((hv_DistVectorial.TupleSelect(hv_Idx))).TupleLess(
              hv_AuxMin))) != 0)
          {
            hv_Ptr_Min.Dispose();
            hv_Ptr_Min = new HTuple(hv_Idx);
            hv_AuxMin.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_AuxMin = hv_DistVectorial.TupleSelect(
                hv_Idx);
            }
          }
        }



        for (hv_Idx=0; (int)hv_Idx<=3; hv_Idx = (int)hv_Idx + 1)
        {
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Pow1.Dispose();
          HOperatorSet.TuplePow(hv_FilaPattern.TupleSelect(hv_Idx), 2, out hv_Pow1);
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Pow2.Dispose();
          HOperatorSet.TuplePow(hv_Width-(hv_ColumnasPattern.TupleSelect(hv_Idx)), 
              2, out hv_Pow2);
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Sqrt.Dispose();
          HOperatorSet.TupleSqrt(hv_Pow1+hv_Pow2, out hv_Sqrt);
          }
          if (hv_DistVectorial2 == null)
            hv_DistVectorial2 = new HTuple();
          hv_DistVectorial2[hv_Idx] = hv_Sqrt;
        }

        hv_AuxMin2.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_AuxMin2 = hv_DistVectorial2.TupleSelect(
            0);
        }
        hv_Ptr_Min2.Dispose();
        hv_Ptr_Min2 = 0;
        for (hv_Idx=0; (int)hv_Idx<=(int)((new HTuple(hv_DistVectorial2.TupleLength()
            ))-1); hv_Idx = (int)hv_Idx + 1)
        {
          if ((int)(new HTuple(((hv_DistVectorial2.TupleSelect(hv_Idx))).TupleLess(
              hv_AuxMin2))) != 0)
          {
            hv_Ptr_Min2.Dispose();
            hv_Ptr_Min2 = new HTuple(hv_Idx);
            hv_AuxMin2.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_AuxMin2 = hv_DistVectorial2.TupleSelect(
                hv_Idx);
            }
          }
        }


        for (hv_Idx=0; (int)hv_Idx<=3; hv_Idx = (int)hv_Idx + 1)
        {
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Pow1.Dispose();
          HOperatorSet.TuplePow(hv_Width-(hv_FilaPattern.TupleSelect(hv_Idx)), 2, 
              out hv_Pow1);
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Pow2.Dispose();
          HOperatorSet.TuplePow(hv_ColumnasPattern.TupleSelect(hv_Idx), 2, out hv_Pow2);
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Sqrt.Dispose();
          HOperatorSet.TupleSqrt(hv_Pow1+hv_Pow2, out hv_Sqrt);
          }
          if (hv_DistVectorial3 == null)
            hv_DistVectorial3 = new HTuple();
          hv_DistVectorial3[hv_Idx] = hv_Sqrt;
        }

        hv_AuxMin3.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_AuxMin3 = hv_DistVectorial3.TupleSelect(
            0);
        }
        hv_Ptr_Min3.Dispose();
        hv_Ptr_Min3 = 0;
        for (hv_Idx=0; (int)hv_Idx<=(int)((new HTuple(hv_DistVectorial3.TupleLength()
            ))-1); hv_Idx = (int)hv_Idx + 1)
        {
          if ((int)(new HTuple(((hv_DistVectorial3.TupleSelect(hv_Idx))).TupleLess(
              hv_AuxMin3))) != 0)
          {
            hv_Ptr_Min3.Dispose();
            hv_Ptr_Min3 = new HTuple(hv_Idx);
            hv_AuxMin3.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_AuxMin3 = hv_DistVectorial3.TupleSelect(
                hv_Idx);
            }
          }
        }

        hv_EsquinaDetectadas.Dispose();
        hv_EsquinaDetectadas = 1;
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_EsquinaDetectadas.Dispose();
        hv_EsquinaDetectadas = 0;


      }



      hv_GrayvalOut.Dispose();
      hv_Umbral.Dispose();
      hv_Ptros.Dispose();
      hv_AuxPtr.Dispose();
      hv_Idx.Dispose();
      hv_WindowHandle.Dispose();
      hv_Pow1.Dispose();
      hv_Pow2.Dispose();
      hv_Sqrt.Dispose();
      hv_DistVectorial.Dispose();
      hv_AuxMin.Dispose();
      hv_DistVectorial2.Dispose();
      hv_AuxMin2.Dispose();
      hv_DistVectorial3.Dispose();
      hv_AuxMin3.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_GrayvalOut.Dispose();
      hv_Umbral.Dispose();
      hv_Ptros.Dispose();
      hv_AuxPtr.Dispose();
      hv_Idx.Dispose();
      hv_WindowHandle.Dispose();
      hv_Pow1.Dispose();
      hv_Pow2.Dispose();
      hv_Sqrt.Dispose();
      hv_DistVectorial.Dispose();
      hv_AuxMin.Dispose();
      hv_DistVectorial2.Dispose();
      hv_AuxMin2.Dispose();
      hv_DistVectorial3.Dispose();
      hv_AuxMin3.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_EsquinasPattern_COPY_3 (HTuple hv_Grayval, HTuple hv_RowToFind, 
      HTuple hv_ColumToFind, HTuple hv_Width, out HTuple hv_FilaPattern, out HTuple hv_ColumnasPattern, 
      out HTuple hv_Ptr_Min, out HTuple hv_Ptr_Min2, out HTuple hv_Ptr_Min3, out HTuple hv_EsquinaDetectadas)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_GrayvalOut = new HTuple(), hv_Umbral = new HTuple();
    HTuple hv_Ptros = new HTuple(), hv_AuxPtr = new HTuple();
    HTuple hv_Idx = new HTuple(), hv_WindowHandle = new HTuple();
    HTuple hv_Pow1 = new HTuple(), hv_Pow2 = new HTuple();
    HTuple hv_Sqrt = new HTuple(), hv_DistVectorial = new HTuple();
    HTuple hv_AuxMin = new HTuple(), hv_DistVectorial2 = new HTuple();
    HTuple hv_AuxMin2 = new HTuple(), hv_DistVectorial3 = new HTuple();
    HTuple hv_AuxMin3 = new HTuple(), hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    hv_FilaPattern = new HTuple();
    hv_ColumnasPattern = new HTuple();
    hv_Ptr_Min = new HTuple();
    hv_Ptr_Min2 = new HTuple();
    hv_Ptr_Min3 = new HTuple();
    hv_EsquinaDetectadas = new HTuple();
    try
    {
      hv_GrayvalOut.Dispose();
      hv_GrayvalOut = new HTuple(hv_Grayval);

      hv_EsquinaDetectadas.Dispose();
      hv_EsquinaDetectadas = 0;
      try
      {



        //*************************************************
        //** Umbral Corner Response
        hv_Umbral.Dispose();
        hv_Umbral = 2100;
        //*************************************************
        hv_Ptros.Dispose();
        hv_Ptros = 0;
        hv_AuxPtr.Dispose();
        hv_AuxPtr = 0;
        for (hv_Idx=0; (int)hv_Idx<=(int)((new HTuple(hv_GrayvalOut.TupleLength()
            ))-1); hv_Idx = (int)hv_Idx + 1)
        {
          if ((int)(new HTuple(((hv_GrayvalOut.TupleSelect(hv_Idx))).TupleGreater(
              hv_Umbral))) != 0)
          {
            if (hv_Ptros == null)
              hv_Ptros = new HTuple();
            hv_Ptros[hv_AuxPtr] = hv_Idx;
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            {
            HTuple 
              ExpTmpLocalVar_AuxPtr = hv_AuxPtr+1;
            hv_AuxPtr.Dispose();
            hv_AuxPtr = ExpTmpLocalVar_AuxPtr;
            }
            }
            if (hv_GrayvalOut == null)
              hv_GrayvalOut = new HTuple();
            hv_GrayvalOut[hv_Idx] = -1;
          }
        }
        hv_Umbral.Dispose();
        hv_Umbral = 0;
        for (hv_Idx=0; (int)hv_Idx<=(int)((new HTuple(hv_GrayvalOut.TupleLength()
            ))-1); hv_Idx = (int)hv_Idx + 1)
        {
          if ((int)(new HTuple(((hv_GrayvalOut.TupleSelect(hv_Idx))).TupleGreater(
              hv_Umbral))) != 0)
          {
            hv_Umbral.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_Umbral = hv_GrayvalOut.TupleSelect(
                hv_Idx);
            }
            if (hv_Ptros == null)
              hv_Ptros = new HTuple();
            hv_Ptros[3] = hv_Idx;
          }
        }

        for (hv_Idx=0; (int)hv_Idx<=3; hv_Idx = (int)hv_Idx + 1)
        {
          if (hv_FilaPattern == null)
            hv_FilaPattern = new HTuple();
          hv_FilaPattern[hv_Idx] = hv_RowToFind.TupleSelect(hv_Ptros.TupleSelect(
              hv_Idx));
          if (hv_ColumnasPattern == null)
            hv_ColumnasPattern = new HTuple();
          hv_ColumnasPattern[hv_Idx] = hv_ColumToFind.TupleSelect(hv_Ptros.TupleSelect(
              hv_Idx));
        }
        //dev_get_window(...);



        for (hv_Idx=0; (int)hv_Idx<=3; hv_Idx = (int)hv_Idx + 1)
        {
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Pow1.Dispose();
          HOperatorSet.TuplePow(hv_FilaPattern.TupleSelect(hv_Idx), 2, out hv_Pow1);
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Pow2.Dispose();
          HOperatorSet.TuplePow(hv_ColumnasPattern.TupleSelect(hv_Idx), 2, out hv_Pow2);
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Sqrt.Dispose();
          HOperatorSet.TupleSqrt(hv_Pow1+hv_Pow2, out hv_Sqrt);
          }
          if (hv_DistVectorial == null)
            hv_DistVectorial = new HTuple();
          hv_DistVectorial[hv_Idx] = hv_Sqrt;
        }


        hv_AuxMin.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_AuxMin = hv_DistVectorial.TupleSelect(
            0);
        }
        hv_Ptr_Min.Dispose();
        hv_Ptr_Min = 0;
        for (hv_Idx=0; (int)hv_Idx<=(int)((new HTuple(hv_DistVectorial.TupleLength()
            ))-1); hv_Idx = (int)hv_Idx + 1)
        {
          if ((int)(new HTuple(((hv_DistVectorial.TupleSelect(hv_Idx))).TupleLess(
              hv_AuxMin))) != 0)
          {
            hv_Ptr_Min.Dispose();
            hv_Ptr_Min = new HTuple(hv_Idx);
            hv_AuxMin.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_AuxMin = hv_DistVectorial.TupleSelect(
                hv_Idx);
            }
          }
        }



        for (hv_Idx=0; (int)hv_Idx<=3; hv_Idx = (int)hv_Idx + 1)
        {
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Pow1.Dispose();
          HOperatorSet.TuplePow(hv_FilaPattern.TupleSelect(hv_Idx), 2, out hv_Pow1);
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Pow2.Dispose();
          HOperatorSet.TuplePow(hv_Width-(hv_ColumnasPattern.TupleSelect(hv_Idx)), 
              2, out hv_Pow2);
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Sqrt.Dispose();
          HOperatorSet.TupleSqrt(hv_Pow1+hv_Pow2, out hv_Sqrt);
          }
          if (hv_DistVectorial2 == null)
            hv_DistVectorial2 = new HTuple();
          hv_DistVectorial2[hv_Idx] = hv_Sqrt;
        }

        hv_AuxMin2.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_AuxMin2 = hv_DistVectorial2.TupleSelect(
            0);
        }
        hv_Ptr_Min2.Dispose();
        hv_Ptr_Min2 = 0;
        for (hv_Idx=0; (int)hv_Idx<=(int)((new HTuple(hv_DistVectorial2.TupleLength()
            ))-1); hv_Idx = (int)hv_Idx + 1)
        {
          if ((int)(new HTuple(((hv_DistVectorial2.TupleSelect(hv_Idx))).TupleLess(
              hv_AuxMin2))) != 0)
          {
            hv_Ptr_Min2.Dispose();
            hv_Ptr_Min2 = new HTuple(hv_Idx);
            hv_AuxMin2.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_AuxMin2 = hv_DistVectorial2.TupleSelect(
                hv_Idx);
            }
          }
        }


        for (hv_Idx=0; (int)hv_Idx<=3; hv_Idx = (int)hv_Idx + 1)
        {
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Pow1.Dispose();
          HOperatorSet.TuplePow(hv_Width-(hv_FilaPattern.TupleSelect(hv_Idx)), 2, 
              out hv_Pow1);
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Pow2.Dispose();
          HOperatorSet.TuplePow(hv_ColumnasPattern.TupleSelect(hv_Idx), 2, out hv_Pow2);
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Sqrt.Dispose();
          HOperatorSet.TupleSqrt(hv_Pow1+hv_Pow2, out hv_Sqrt);
          }
          if (hv_DistVectorial3 == null)
            hv_DistVectorial3 = new HTuple();
          hv_DistVectorial3[hv_Idx] = hv_Sqrt;
        }

        hv_AuxMin3.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_AuxMin3 = hv_DistVectorial3.TupleSelect(
            0);
        }
        hv_Ptr_Min3.Dispose();
        hv_Ptr_Min3 = 0;
        for (hv_Idx=0; (int)hv_Idx<=(int)((new HTuple(hv_DistVectorial3.TupleLength()
            ))-1); hv_Idx = (int)hv_Idx + 1)
        {
          if ((int)(new HTuple(((hv_DistVectorial3.TupleSelect(hv_Idx))).TupleLess(
              hv_AuxMin3))) != 0)
          {
            hv_Ptr_Min3.Dispose();
            hv_Ptr_Min3 = new HTuple(hv_Idx);
            hv_AuxMin3.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_AuxMin3 = hv_DistVectorial3.TupleSelect(
                hv_Idx);
            }
          }
        }
        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_FilaPattern, hv_ColumnasPattern, 
            50, 0);
        hv_EsquinaDetectadas.Dispose();
        hv_EsquinaDetectadas = 1;
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_EsquinaDetectadas.Dispose();
        hv_EsquinaDetectadas = 0;


      }



      hv_GrayvalOut.Dispose();
      hv_Umbral.Dispose();
      hv_Ptros.Dispose();
      hv_AuxPtr.Dispose();
      hv_Idx.Dispose();
      hv_WindowHandle.Dispose();
      hv_Pow1.Dispose();
      hv_Pow2.Dispose();
      hv_Sqrt.Dispose();
      hv_DistVectorial.Dispose();
      hv_AuxMin.Dispose();
      hv_DistVectorial2.Dispose();
      hv_AuxMin2.Dispose();
      hv_DistVectorial3.Dispose();
      hv_AuxMin3.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_GrayvalOut.Dispose();
      hv_Umbral.Dispose();
      hv_Ptros.Dispose();
      hv_AuxPtr.Dispose();
      hv_Idx.Dispose();
      hv_WindowHandle.Dispose();
      hv_Pow1.Dispose();
      hv_Pow2.Dispose();
      hv_Sqrt.Dispose();
      hv_DistVectorial.Dispose();
      hv_AuxMin.Dispose();
      hv_DistVectorial2.Dispose();
      hv_AuxMin2.Dispose();
      hv_DistVectorial3.Dispose();
      hv_AuxMin3.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_EstadoSerialBridge (out HTuple hv_EstadoSerialBridge)
  {


    // Local iconic variables 

    // Local control variables 

    HTuple hv_pathFile = new HTuple(), hv_FileHandle = new HTuple();
    HTuple hv_IsEOF = new HTuple(), hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    hv_EstadoSerialBridge = new HTuple();
    try
    {
      hv_pathFile.Dispose();
      hv_pathFile = "C:/DaFunk/InitFile.txt";

      try
      {
        hv_FileHandle.Dispose();
        HOperatorSet.OpenFile(hv_pathFile, "input", out hv_FileHandle);
        //fwrite_string (FileHandle, 'Para escribir weas')
        hv_EstadoSerialBridge.Dispose();hv_IsEOF.Dispose();
        HOperatorSet.FreadString(hv_FileHandle, out hv_EstadoSerialBridge, out hv_IsEOF);
        //fnew_line (FileHandle)
        HOperatorSet.CloseFile(hv_FileHandle);
        if ((int)(new HTuple(hv_EstadoSerialBridge.TupleEqual("True"))) != 0)
        {
          hv_EstadoSerialBridge.Dispose();
          hv_EstadoSerialBridge = 1;

        }
        else
        {
          hv_EstadoSerialBridge.Dispose();
          hv_EstadoSerialBridge = 0;
        }
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_EstadoSerialBridge.Dispose();
        hv_EstadoSerialBridge = 0;

      }


      hv_pathFile.Dispose();
      hv_FileHandle.Dispose();
      hv_IsEOF.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_pathFile.Dispose();
      hv_FileHandle.Dispose();
      hv_IsEOF.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Image (out HObject ho_Image, HTuple hv_AcqHandle, out HTuple hv_g_Error_CamaraOpt_Adq)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Image);
    hv_g_Error_CamaraOpt_Adq = new HTuple();
    try
    {
      try
      {
        ho_Image.Dispose();
        HOperatorSet.GrabImageAsync(out ho_Image, hv_AcqHandle, -1);
        ho_Image.Dispose();
        HOperatorSet.GrabImageAsync(out ho_Image, hv_AcqHandle, -1);
        hv_g_Error_CamaraOpt_Adq.Dispose();
        hv_g_Error_CamaraOpt_Adq = 0;
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_g_Error_CamaraOpt_Adq.Dispose();
        hv_g_Error_CamaraOpt_Adq = 1;
      }




      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Image_Bloque3 (out HObject ho_ModelImage, out HObject ho_X, out HObject ho_Y, 
      out HObject ho_Z, out HObject ho_ImgLeftCamera, HTuple hv_NxLib, HTuple hv_Camera_1, 
      HTuple hv_Parametros_Visualizacion, HTuple hv_Valores_Visualizacion, HTuple hv_FOTO, 
      HTuple hv_WindowHandle, HTuple hv_Cod_Core_ToUse, HTuple hv_SerialHandle, out HTuple hv_Escena3D_RAW, 
      out HTuple hv_Camara_conexion_Est)
  {



    // Stack for temporary objects 
    HObject[] OTemp = new HObject[20];

    // Local iconic variables 

    HObject ho_ROI_1=null, ho_Regions=null, ho_Entidad=null;
    HObject ho_EntidadDilatada=null;

    // Local control variables 

    HTuple hv_Is_a_Core = new HTuple(), hv_MinimumDisparity_Cam1 = new HTuple();
    HTuple hv_NumberOfDisparities_Cam1 = new HTuple(), hv_Projector = new HTuple();
    HTuple hv_FrontLigth = new HTuple(), hv_AutoExposure = new HTuple();
    HTuple hv_AutoGain = new HTuple(), hv_Exposure = new HTuple();
    HTuple hv_Gain = new HTuple(), hv_FlexView = new HTuple();
    HTuple hv_TempCam = new HTuple(), hv_MinimumDisparity = new HTuple();
    HTuple hv_NumberOfDisparities = new HTuple(), hv_MSecond = new HTuple();
    HTuple hv_Second = new HTuple(), hv_Minute = new HTuple();
    HTuple hv_Hour = new HTuple(), hv_Day = new HTuple(), hv_YDay = new HTuple();
    HTuple hv_Month = new HTuple(), hv_Year = new HTuple();
    HTuple hv_Fecha = new HTuple(), hv_DitsiObjMax = new HTuple();
    HTuple hv_Estado_Funcion = new HTuple(), hv_Estado_Funcion1 = new HTuple();
    HTuple hv_Debug_View = new HTuple(), hv_PoseOut1 = new HTuple();
    HTuple hv_Parametros_VisualizacionOut = new HTuple(), hv_Valores_VisualizacionOut = new HTuple();
    HTuple hv_PoseView = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ModelImage);
    HOperatorSet.GenEmptyObj(out ho_X);
    HOperatorSet.GenEmptyObj(out ho_Y);
    HOperatorSet.GenEmptyObj(out ho_Z);
    HOperatorSet.GenEmptyObj(out ho_ImgLeftCamera);
    HOperatorSet.GenEmptyObj(out ho_ROI_1);
    HOperatorSet.GenEmptyObj(out ho_Regions);
    HOperatorSet.GenEmptyObj(out ho_Entidad);
    HOperatorSet.GenEmptyObj(out ho_EntidadDilatada);
    hv_Escena3D_RAW = new HTuple();
    hv_Camara_conexion_Est = new HTuple();
    try
    {
      //Configuracion de Parametros


      hv_Is_a_Core.Dispose();
      Get_TipoEntidad(hv_Cod_Core_ToUse, out hv_Is_a_Core);
      if ((int)(hv_Is_a_Core) != 0)
      {
        hv_MinimumDisparity_Cam1.Dispose();
        hv_MinimumDisparity_Cam1 = -78;
        hv_NumberOfDisparities_Cam1.Dispose();
        hv_NumberOfDisparities_Cam1 = 41;
      }
      else
      {
        hv_MinimumDisparity_Cam1.Dispose();
        hv_MinimumDisparity_Cam1 = -64;
        hv_NumberOfDisparities_Cam1.Dispose();
        hv_NumberOfDisparities_Cam1 = 128;
      }


      hv_Projector.Dispose();
      hv_Projector = "true";
      hv_FrontLigth.Dispose();
      hv_FrontLigth = "true";
      hv_AutoExposure.Dispose();
      hv_AutoExposure = "false";
      hv_AutoGain.Dispose();
      hv_AutoGain = "false";
      hv_Exposure.Dispose();
      hv_Exposure = 4.49;
      hv_Gain.Dispose();
      hv_Gain = 3;
      hv_FlexView.Dispose();
      hv_FlexView = 4;
      hv_TempCam.Dispose();
      Config_Parametros_Cam_R1(hv_NxLib, hv_Camera_1, hv_NumberOfDisparities_Cam1, 
          hv_MinimumDisparity_Cam1, hv_Projector, hv_FrontLigth, hv_AutoExposure, 
          hv_AutoGain, hv_Gain, hv_Exposure, hv_FlexView, out hv_TempCam);

      //Get_Core_ToUse_From_BDD_Fast (SerialHandle, Cod_Core_ToUse, Pallet_To_Scan, Segmento_To_Scan, PitutoExist, FXcheck, Diametro)

      ho_ModelImage.Dispose();hv_Camara_conexion_Est.Dispose();
      Adq_Imagen(out ho_ModelImage, hv_NxLib, hv_Camera_1, out hv_Camara_conexion_Est);

      if ((int)(hv_Camara_conexion_Est.TupleNot()) != 0)
      {



        ho_ROI_1.Dispose();
        ho_Regions.Dispose();
        ho_Entidad.Dispose();
        ho_EntidadDilatada.Dispose();

        hv_Is_a_Core.Dispose();
        hv_MinimumDisparity_Cam1.Dispose();
        hv_NumberOfDisparities_Cam1.Dispose();
        hv_Projector.Dispose();
        hv_FrontLigth.Dispose();
        hv_AutoExposure.Dispose();
        hv_AutoGain.Dispose();
        hv_Exposure.Dispose();
        hv_Gain.Dispose();
        hv_FlexView.Dispose();
        hv_TempCam.Dispose();
        hv_MinimumDisparity.Dispose();
        hv_NumberOfDisparities.Dispose();
        hv_MSecond.Dispose();
        hv_Second.Dispose();
        hv_Minute.Dispose();
        hv_Hour.Dispose();
        hv_Day.Dispose();
        hv_YDay.Dispose();
        hv_Month.Dispose();
        hv_Year.Dispose();
        hv_Fecha.Dispose();
        hv_DitsiObjMax.Dispose();
        hv_Estado_Funcion.Dispose();
        hv_Estado_Funcion1.Dispose();
        hv_Debug_View.Dispose();
        hv_PoseOut1.Dispose();
        hv_Parametros_VisualizacionOut.Dispose();
        hv_Valores_VisualizacionOut.Dispose();
        hv_PoseView.Dispose();

        return;

      }

      if ((int)(hv_Is_a_Core.TupleNot()) != 0)
      {
        HOperatorSet.SetFramegrabberParam(hv_NxLib, "do_execute", "EstimateDisparitySettings");
        hv_MinimumDisparity.Dispose();
        HOperatorSet.GetFramegrabberParam(hv_NxLib, "//Execute/Default/Result/193216/MinimumDisparity", 
            out hv_MinimumDisparity);
        hv_NumberOfDisparities.Dispose();
        HOperatorSet.GetFramegrabberParam(hv_NxLib, "//Execute/Default/Result/193216/NumberOfDisparities", 
            out hv_NumberOfDisparities);
        hv_TempCam.Dispose();
        Config_Parametros_Cam_R1_COPY_1(hv_NxLib, hv_Camera_1, hv_NumberOfDisparities, 
            hv_MinimumDisparity, hv_Projector, hv_FrontLigth, hv_AutoExposure, hv_AutoGain, 
            hv_Gain, hv_Exposure, hv_FlexView, out hv_TempCam);
        ho_ModelImage.Dispose();hv_Camara_conexion_Est.Dispose();
        Adq_Imagen(out ho_ModelImage, hv_NxLib, hv_Camera_1, out hv_Camara_conexion_Est);

        ho_X.Dispose();ho_Y.Dispose();ho_Z.Dispose();
        Adq_XYZ_Img(ho_ModelImage, out ho_X, out ho_Y, out ho_Z);

      }


      //**********************************************************************
      //***** Guardo las Imagenes ********************************************
      hv_MSecond.Dispose();hv_Second.Dispose();hv_Minute.Dispose();hv_Hour.Dispose();hv_Day.Dispose();hv_YDay.Dispose();hv_Month.Dispose();hv_Year.Dispose();
      HOperatorSet.GetSystemTime(out hv_MSecond, out hv_Second, out hv_Minute, out hv_Hour, 
          out hv_Day, out hv_YDay, out hv_Month, out hv_Year);

      hv_Fecha.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Fecha = (((((((((((hv_Year+"_")+hv_Month)+"_")+hv_Day)+"_")+hv_Hour)+"_")+hv_Minute)+"_")+hv_Second)+"_")+hv_MSecond;
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.WriteObject(ho_ModelImage, (("D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 2/Img_"+hv_Cod_Core_ToUse)+"_")+hv_Fecha);
      }
      if ((int)(0) != 0)
      {
        ho_ModelImage.Dispose();
        HOperatorSet.ReadObject(out ho_ModelImage, "D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 2/Img_EJY_2019_10_4_16_43_15_880.hobj");
        ho_ModelImage.Dispose();
        HOperatorSet.ReadObject(out ho_ModelImage, "D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 2/Img_CLR_2019_10_28_14_22_17_470.hobj");

      }


      //************************************************************************
      hv_Is_a_Core.Dispose();
      Get_TipoEntidad(hv_Cod_Core_ToUse, out hv_Is_a_Core);
      ho_X.Dispose();ho_Y.Dispose();ho_Z.Dispose();
      Adq_XYZ_Img(ho_ModelImage, out ho_X, out ho_Y, out ho_Z);


      //Then is a  Sleeve
      if ((int)(hv_Is_a_Core) != 0)
      {

        ho_ROI_1.Dispose();
        HOperatorSet.GenRectangle1(out ho_ROI_1, 300, 300, 986.193, 870);


        {
        HObject ExpTmpOutVar_0;
        HOperatorSet.ReduceDomain(ho_Z, ho_ROI_1, out ExpTmpOutVar_0);
        ho_Z.Dispose();
        ho_Z = ExpTmpOutVar_0;
        }
        //******************************************************
        //Segmento el core de manera dinamica******************


        ho_Regions.Dispose();
        HOperatorSet.Threshold(ho_Z, out ho_Regions, 1200, 1640);
        {
        HObject ExpTmpOutVar_0;
        HOperatorSet.ReduceDomain(ho_Z, ho_Regions, out ExpTmpOutVar_0);
        ho_Z.Dispose();
        ho_Z = ExpTmpOutVar_0;
        }
        hv_DitsiObjMax.Dispose();
        hv_DitsiObjMax = 1635;
        ho_Entidad.Dispose();hv_Estado_Funcion.Dispose();
        Segmentar_Core_COPY_3(ho_Z, ho_X, ho_Y, ho_Z, out ho_Entidad, hv_DitsiObjMax, 
            out hv_Estado_Funcion);

        if ((int)(hv_Estado_Funcion.TupleNot()) != 0)
        {

        }

        ho_Entidad.Dispose();hv_Estado_Funcion1.Dispose();
        Histagram_Filter(ho_Z, ho_X, ho_Y, ho_Z, out ho_Entidad, out hv_Estado_Funcion1);
        //******************************************************
        ho_EntidadDilatada.Dispose();
        HOperatorSet.DilationCircle(ho_Entidad, out ho_EntidadDilatada, 30.5);
        {
        HObject ExpTmpOutVar_0;
        HOperatorSet.ReduceDomain(ho_Z, ho_EntidadDilatada, out ExpTmpOutVar_0);
        ho_Z.Dispose();
        ho_Z = ExpTmpOutVar_0;
        }

        //select_obj (ModelImage, ImgLeftCamera, 1)
        HOperatorSet.DispObj(ho_EntidadDilatada, hv_ExpDefaultWinHandle);
      }
      else
      {


        //******************************************************
        //Segmento el core de manera dinamica******************
        hv_DitsiObjMax.Dispose();
        hv_DitsiObjMax = 2515.0;
        ho_Entidad.Dispose();hv_Estado_Funcion.Dispose();
        Segmentar_Core(ho_Z, ho_X, ho_Y, ho_Z, out ho_Entidad, hv_DitsiObjMax, out hv_Estado_Funcion);
        //******************************************************
        ho_EntidadDilatada.Dispose();
        HOperatorSet.DilationCircle(ho_Entidad, out ho_EntidadDilatada, 60.5);
        {
        HObject ExpTmpOutVar_0;
        HOperatorSet.ReduceDomain(ho_Z, ho_EntidadDilatada, out ExpTmpOutVar_0);
        ho_Z.Dispose();
        ho_Z = ExpTmpOutVar_0;
        }

        ho_ImgLeftCamera.Dispose();
        HOperatorSet.SelectObj(ho_ModelImage, out ho_ImgLeftCamera, 1);
        HOperatorSet.DispObj(ho_EntidadDilatada, hv_ExpDefaultWinHandle);

      }



      hv_Escena3D_RAW.Dispose();
      HOperatorSet.XyzToObjectModel3d(ho_X, ho_Y, ho_Z, out hv_Escena3D_RAW);

      //*****************************************************************************************************************************
      hv_Debug_View.Dispose();
      hv_Debug_View = 0;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_PoseOut1.Dispose();
      Visualizar_3D(hv_Escena3D_RAW, hv_Parametros_Visualizacion.TupleConcat("alpha"), 
          hv_Valores_Visualizacion.TupleConcat(0.5), hv_Debug_View, new HTuple(), 
          new HTuple(), new HTuple(), hv_WindowHandle, out hv_PoseOut1);
      }



      hv_Parametros_VisualizacionOut.Dispose();
      hv_Parametros_VisualizacionOut = new HTuple();
      hv_Parametros_VisualizacionOut[0] = "disp_pose";
      hv_Parametros_VisualizacionOut[1] = "color_attrib";
      hv_Parametros_VisualizacionOut[2] = "lut";
      hv_Parametros_VisualizacionOut[3] = "disp_lines";
      hv_Parametros_VisualizacionOut[4] = "point_size";
      hv_Valores_VisualizacionOut.Dispose();
      hv_Valores_VisualizacionOut = new HTuple();
      hv_Valores_VisualizacionOut[0] = "false";
      hv_Valores_VisualizacionOut[1] = "coord_z";
      hv_Valores_VisualizacionOut[2] = "rainbow";
      hv_Valores_VisualizacionOut[3] = "true";
      hv_Valores_VisualizacionOut[4] = 1;
      hv_PoseView.Dispose();
      HOperatorSet.CreatePose(100, 100, 3000, 0, 0, 0, "Rp+T", "gba", "point", out hv_PoseView);
      HOperatorSet.DispObjectModel3d(hv_ExpDefaultWinHandle, hv_Escena3D_RAW, new HTuple(), 
          hv_PoseView, hv_Parametros_VisualizacionOut, hv_Valores_VisualizacionOut);
      //*****************************************************************************************************************************

      ho_ROI_1.Dispose();
      ho_Regions.Dispose();
      ho_Entidad.Dispose();
      ho_EntidadDilatada.Dispose();

      hv_Is_a_Core.Dispose();
      hv_MinimumDisparity_Cam1.Dispose();
      hv_NumberOfDisparities_Cam1.Dispose();
      hv_Projector.Dispose();
      hv_FrontLigth.Dispose();
      hv_AutoExposure.Dispose();
      hv_AutoGain.Dispose();
      hv_Exposure.Dispose();
      hv_Gain.Dispose();
      hv_FlexView.Dispose();
      hv_TempCam.Dispose();
      hv_MinimumDisparity.Dispose();
      hv_NumberOfDisparities.Dispose();
      hv_MSecond.Dispose();
      hv_Second.Dispose();
      hv_Minute.Dispose();
      hv_Hour.Dispose();
      hv_Day.Dispose();
      hv_YDay.Dispose();
      hv_Month.Dispose();
      hv_Year.Dispose();
      hv_Fecha.Dispose();
      hv_DitsiObjMax.Dispose();
      hv_Estado_Funcion.Dispose();
      hv_Estado_Funcion1.Dispose();
      hv_Debug_View.Dispose();
      hv_PoseOut1.Dispose();
      hv_Parametros_VisualizacionOut.Dispose();
      hv_Valores_VisualizacionOut.Dispose();
      hv_PoseView.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_ROI_1.Dispose();
      ho_Regions.Dispose();
      ho_Entidad.Dispose();
      ho_EntidadDilatada.Dispose();

      hv_Is_a_Core.Dispose();
      hv_MinimumDisparity_Cam1.Dispose();
      hv_NumberOfDisparities_Cam1.Dispose();
      hv_Projector.Dispose();
      hv_FrontLigth.Dispose();
      hv_AutoExposure.Dispose();
      hv_AutoGain.Dispose();
      hv_Exposure.Dispose();
      hv_Gain.Dispose();
      hv_FlexView.Dispose();
      hv_TempCam.Dispose();
      hv_MinimumDisparity.Dispose();
      hv_NumberOfDisparities.Dispose();
      hv_MSecond.Dispose();
      hv_Second.Dispose();
      hv_Minute.Dispose();
      hv_Hour.Dispose();
      hv_Day.Dispose();
      hv_YDay.Dispose();
      hv_Month.Dispose();
      hv_Year.Dispose();
      hv_Fecha.Dispose();
      hv_DitsiObjMax.Dispose();
      hv_Estado_Funcion.Dispose();
      hv_Estado_Funcion1.Dispose();
      hv_Debug_View.Dispose();
      hv_PoseOut1.Dispose();
      hv_Parametros_VisualizacionOut.Dispose();
      hv_Valores_VisualizacionOut.Dispose();
      hv_PoseView.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Image_Bloque3_Fast (out HObject ho_ModelImage, out HObject ho_X, 
      out HObject ho_Y, out HObject ho_Z, out HObject ho_ImgLeftCamera, HTuple hv_NxLib, 
      HTuple hv_Camera_1, HTuple hv_Parametros_Visualizacion, HTuple hv_Valores_Visualizacion, 
      HTuple hv_FOTO, HTuple hv_WindowHandle, HTuple hv_Cod_Core_ToUse, HTuple hv_SerialHandle, 
      out HTuple hv_Escena3D_RAW, out HTuple hv_MinimumDisparity, out HTuple hv_NumberOfDisparities)
  {



    // Stack for temporary objects 
    HObject[] OTemp = new HObject[20];

    // Local iconic variables 

    HObject ho_ROI_1=null, ho_Entidad=null, ho_EntidadDilatada=null;

    // Local control variables 

    HTuple hv_Is_a_Core = new HTuple(), hv_MinimumDisparity_Cam1 = new HTuple();
    HTuple hv_NumberOfDisparities_Cam1 = new HTuple(), hv_Projector = new HTuple();
    HTuple hv_FrontLigth = new HTuple(), hv_AutoExposure = new HTuple();
    HTuple hv_AutoGain = new HTuple(), hv_Exposure = new HTuple();
    HTuple hv_Gain = new HTuple(), hv_FlexView = new HTuple();
    HTuple hv_TempCam = new HTuple(), hv_Pallet_To_Scan = new HTuple();
    HTuple hv_Segmento_To_Scan = new HTuple(), hv_PitutoExist = new HTuple();
    HTuple hv_FXcheck = new HTuple(), hv_Diametro = new HTuple();
    HTuple hv_Camara_conexion_Est = new HTuple(), hv_MSecond = new HTuple();
    HTuple hv_Second = new HTuple(), hv_Minute = new HTuple();
    HTuple hv_Hour = new HTuple(), hv_Day = new HTuple(), hv_YDay = new HTuple();
    HTuple hv_Month = new HTuple(), hv_Year = new HTuple();
    HTuple hv_Fecha = new HTuple(), hv_DitsiObjMax = new HTuple();
    HTuple hv_Estado_Funcion = new HTuple(), hv_Debug_View = new HTuple();
    HTuple hv_PoseOut1 = new HTuple(), hv_Parametros_VisualizacionOut = new HTuple();
    HTuple hv_Valores_VisualizacionOut = new HTuple(), hv_PoseView = new HTuple();
    HTuple   hv_Cod_Core_ToUse_COPY_INP_TMP = new HTuple(hv_Cod_Core_ToUse);

    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ModelImage);
    HOperatorSet.GenEmptyObj(out ho_X);
    HOperatorSet.GenEmptyObj(out ho_Y);
    HOperatorSet.GenEmptyObj(out ho_Z);
    HOperatorSet.GenEmptyObj(out ho_ImgLeftCamera);
    HOperatorSet.GenEmptyObj(out ho_ROI_1);
    HOperatorSet.GenEmptyObj(out ho_Entidad);
    HOperatorSet.GenEmptyObj(out ho_EntidadDilatada);
    hv_Escena3D_RAW = new HTuple();
    hv_MinimumDisparity = new HTuple();
    hv_NumberOfDisparities = new HTuple();
    try
    {
      //Configuracion de Parametros



      hv_MinimumDisparity.Dispose();
      HOperatorSet.GetFramegrabberParam(hv_NxLib, "//Execute/Default/Result/193216/MinimumDisparity", 
          out hv_MinimumDisparity);
      hv_NumberOfDisparities.Dispose();
      HOperatorSet.GetFramegrabberParam(hv_NxLib, "//Execute/Default/Result/193216/NumberOfDisparities", 
          out hv_NumberOfDisparities);



      hv_Is_a_Core.Dispose();
      Get_TipoEntidad(hv_Cod_Core_ToUse_COPY_INP_TMP, out hv_Is_a_Core);
      if ((int)(hv_Is_a_Core) != 0)
      {
        hv_MinimumDisparity_Cam1.Dispose();
        hv_MinimumDisparity_Cam1 = -35;
        hv_NumberOfDisparities_Cam1.Dispose();
        hv_NumberOfDisparities_Cam1 = 128;
      }
      else
      {
        hv_MinimumDisparity_Cam1.Dispose();
        hv_MinimumDisparity_Cam1 = -77;
        hv_NumberOfDisparities_Cam1.Dispose();
        hv_NumberOfDisparities_Cam1 = 32;
      }


      hv_Projector.Dispose();
      hv_Projector = "true";
      hv_FrontLigth.Dispose();
      hv_FrontLigth = "true";
      hv_AutoExposure.Dispose();
      hv_AutoExposure = "false";
      hv_AutoGain.Dispose();
      hv_AutoGain = "false";
      hv_Exposure.Dispose();
      hv_Exposure = 4.49;
      hv_Gain.Dispose();
      hv_Gain = 1;
      hv_FlexView.Dispose();
      hv_FlexView = 2;
      hv_TempCam.Dispose();
      Config_Parametros_Cam_R1(hv_NxLib, hv_Camera_1, hv_NumberOfDisparities_Cam1, 
          hv_MinimumDisparity_Cam1, hv_Projector, hv_FrontLigth, hv_AutoExposure, 
          hv_AutoGain, hv_Gain, hv_Exposure, hv_FlexView, out hv_TempCam);

      hv_Cod_Core_ToUse_COPY_INP_TMP.Dispose();hv_Pallet_To_Scan.Dispose();hv_Segmento_To_Scan.Dispose();hv_PitutoExist.Dispose();hv_FXcheck.Dispose();hv_Diametro.Dispose();
      Get_Core_ToUse_From_BDD_Fast(hv_SerialHandle, out hv_Cod_Core_ToUse_COPY_INP_TMP, 
          out hv_Pallet_To_Scan, out hv_Segmento_To_Scan, out hv_PitutoExist, out hv_FXcheck, 
          out hv_Diametro);

      ho_ModelImage.Dispose();hv_Camara_conexion_Est.Dispose();
      Adq_Imagen(out ho_ModelImage, hv_NxLib, hv_Camera_1, out hv_Camara_conexion_Est);

      if ((int)(hv_Is_a_Core.TupleNot()) != 0)
      {
        HOperatorSet.SetFramegrabberParam(hv_NxLib, "do_execute", "EstimateDisparitySettings");
        hv_MinimumDisparity.Dispose();
        HOperatorSet.GetFramegrabberParam(hv_NxLib, "//Execute/Default/Result/193216/MinimumDisparity", 
            out hv_MinimumDisparity);
        hv_NumberOfDisparities.Dispose();
        HOperatorSet.GetFramegrabberParam(hv_NxLib, "//Execute/Default/Result/193216/NumberOfDisparities", 
            out hv_NumberOfDisparities);
        hv_TempCam.Dispose();
        Config_Parametros_Cam_R1(hv_NxLib, hv_Camera_1, hv_NumberOfDisparities, hv_MinimumDisparity, 
            hv_Projector, hv_FrontLigth, hv_AutoExposure, hv_AutoGain, hv_Gain, hv_Exposure, 
            hv_FlexView, out hv_TempCam);
        ho_ModelImage.Dispose();hv_Camara_conexion_Est.Dispose();
        Adq_Imagen(out ho_ModelImage, hv_NxLib, hv_Camera_1, out hv_Camara_conexion_Est);

        ho_X.Dispose();ho_Y.Dispose();ho_Z.Dispose();
        Adq_XYZ_Img(ho_ModelImage, out ho_X, out ho_Y, out ho_Z);

      }


      //**********************************************************************
      //***** Guardo las Imagenes ********************************************
      hv_MSecond.Dispose();hv_Second.Dispose();hv_Minute.Dispose();hv_Hour.Dispose();hv_Day.Dispose();hv_YDay.Dispose();hv_Month.Dispose();hv_Year.Dispose();
      HOperatorSet.GetSystemTime(out hv_MSecond, out hv_Second, out hv_Minute, out hv_Hour, 
          out hv_Day, out hv_YDay, out hv_Month, out hv_Year);

      hv_Fecha.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Fecha = (((((((((((hv_Year+"_")+hv_Month)+"_")+hv_Day)+"_")+hv_Hour)+"_")+hv_Minute)+"_")+hv_Second)+"_")+hv_MSecond;
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.WriteObject(ho_ModelImage, (("D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 2/Img_"+hv_Cod_Core_ToUse_COPY_INP_TMP)+"_")+hv_Fecha);
      }

      //read_image (ModelImage, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 2/Img_9x10 Tube sleeve_2019_8_12_16_17_2_572.hobj')
      //read_object (ModelImage, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 2/Img_CLR_2019_8_12_15_51_16_259.hobj')
      //***********************************************************************
      hv_Is_a_Core.Dispose();
      Get_TipoEntidad(hv_Cod_Core_ToUse_COPY_INP_TMP, out hv_Is_a_Core);
      ho_X.Dispose();ho_Y.Dispose();ho_Z.Dispose();
      Adq_XYZ_Img(ho_ModelImage, out ho_X, out ho_Y, out ho_Z);


      //Then is a  Sleeve
      if ((int)(hv_Is_a_Core) != 0)
      {

        ho_ROI_1.Dispose();
        HOperatorSet.GenRectangle1(out ho_ROI_1, 270, 300, 986.193, 870);


        {
        HObject ExpTmpOutVar_0;
        HOperatorSet.ReduceDomain(ho_Z, ho_ROI_1, out ExpTmpOutVar_0);
        ho_Z.Dispose();
        ho_Z = ExpTmpOutVar_0;
        }
        //******************************************************
        //Segmento el dore de manera dinamica******************
        hv_DitsiObjMax.Dispose();
        hv_DitsiObjMax = 1600.0;
        ho_Entidad.Dispose();hv_Estado_Funcion.Dispose();
        Segmentar_Core(ho_Z, ho_X, ho_Y, ho_Z, out ho_Entidad, hv_DitsiObjMax, out hv_Estado_Funcion);
        //******************************************************
        ho_EntidadDilatada.Dispose();
        HOperatorSet.DilationCircle(ho_Entidad, out ho_EntidadDilatada, 30.5);
        {
        HObject ExpTmpOutVar_0;
        HOperatorSet.ReduceDomain(ho_Z, ho_EntidadDilatada, out ExpTmpOutVar_0);
        ho_Z.Dispose();
        ho_Z = ExpTmpOutVar_0;
        }

        ho_ImgLeftCamera.Dispose();
        HOperatorSet.SelectObj(ho_ModelImage, out ho_ImgLeftCamera, 1);
        HOperatorSet.DispObj(ho_EntidadDilatada, hv_ExpDefaultWinHandle);
      }
      else
      {


        //******************************************************
        //Segmento el dore de manera dinamica******************
        hv_DitsiObjMax.Dispose();
        hv_DitsiObjMax = 2515.0;
        ho_Entidad.Dispose();hv_Estado_Funcion.Dispose();
        Segmentar_Core(ho_Z, ho_X, ho_Y, ho_Z, out ho_Entidad, hv_DitsiObjMax, out hv_Estado_Funcion);
        //******************************************************
        ho_EntidadDilatada.Dispose();
        HOperatorSet.DilationCircle(ho_Entidad, out ho_EntidadDilatada, 60.5);
        {
        HObject ExpTmpOutVar_0;
        HOperatorSet.ReduceDomain(ho_Z, ho_EntidadDilatada, out ExpTmpOutVar_0);
        ho_Z.Dispose();
        ho_Z = ExpTmpOutVar_0;
        }

        ho_ImgLeftCamera.Dispose();
        HOperatorSet.SelectObj(ho_ModelImage, out ho_ImgLeftCamera, 1);
        HOperatorSet.DispObj(ho_EntidadDilatada, hv_ExpDefaultWinHandle);

      }



      hv_Escena3D_RAW.Dispose();
      HOperatorSet.XyzToObjectModel3d(ho_X, ho_Y, ho_Z, out hv_Escena3D_RAW);

      //*****************************************************************************************************************************
      hv_Debug_View.Dispose();
      hv_Debug_View = 0;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_PoseOut1.Dispose();
      Visualizar_3D(hv_Escena3D_RAW, hv_Parametros_Visualizacion.TupleConcat("alpha"), 
          hv_Valores_Visualizacion.TupleConcat(0.5), hv_Debug_View, new HTuple(), 
          new HTuple(), new HTuple(), hv_WindowHandle, out hv_PoseOut1);
      }



      hv_Parametros_VisualizacionOut.Dispose();
      hv_Parametros_VisualizacionOut = new HTuple();
      hv_Parametros_VisualizacionOut[0] = "disp_pose";
      hv_Parametros_VisualizacionOut[1] = "color_attrib";
      hv_Parametros_VisualizacionOut[2] = "lut";
      hv_Parametros_VisualizacionOut[3] = "disp_lines";
      hv_Parametros_VisualizacionOut[4] = "point_size";
      hv_Valores_VisualizacionOut.Dispose();
      hv_Valores_VisualizacionOut = new HTuple();
      hv_Valores_VisualizacionOut[0] = "false";
      hv_Valores_VisualizacionOut[1] = "coord_z";
      hv_Valores_VisualizacionOut[2] = "rainbow";
      hv_Valores_VisualizacionOut[3] = "true";
      hv_Valores_VisualizacionOut[4] = 1;
      hv_PoseView.Dispose();
      HOperatorSet.CreatePose(100, 100, 3000, 0, 0, 0, "Rp+T", "gba", "point", out hv_PoseView);
      HOperatorSet.DispObjectModel3d(hv_ExpDefaultWinHandle, hv_Escena3D_RAW, new HTuple(), 
          hv_PoseView, hv_Parametros_VisualizacionOut, hv_Valores_VisualizacionOut);
      //*****************************************************************************************************************************

      ho_ROI_1.Dispose();
      ho_Entidad.Dispose();
      ho_EntidadDilatada.Dispose();

      hv_Cod_Core_ToUse_COPY_INP_TMP.Dispose();
      hv_Is_a_Core.Dispose();
      hv_MinimumDisparity_Cam1.Dispose();
      hv_NumberOfDisparities_Cam1.Dispose();
      hv_Projector.Dispose();
      hv_FrontLigth.Dispose();
      hv_AutoExposure.Dispose();
      hv_AutoGain.Dispose();
      hv_Exposure.Dispose();
      hv_Gain.Dispose();
      hv_FlexView.Dispose();
      hv_TempCam.Dispose();
      hv_Pallet_To_Scan.Dispose();
      hv_Segmento_To_Scan.Dispose();
      hv_PitutoExist.Dispose();
      hv_FXcheck.Dispose();
      hv_Diametro.Dispose();
      hv_Camara_conexion_Est.Dispose();
      hv_MSecond.Dispose();
      hv_Second.Dispose();
      hv_Minute.Dispose();
      hv_Hour.Dispose();
      hv_Day.Dispose();
      hv_YDay.Dispose();
      hv_Month.Dispose();
      hv_Year.Dispose();
      hv_Fecha.Dispose();
      hv_DitsiObjMax.Dispose();
      hv_Estado_Funcion.Dispose();
      hv_Debug_View.Dispose();
      hv_PoseOut1.Dispose();
      hv_Parametros_VisualizacionOut.Dispose();
      hv_Valores_VisualizacionOut.Dispose();
      hv_PoseView.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_ROI_1.Dispose();
      ho_Entidad.Dispose();
      ho_EntidadDilatada.Dispose();

      hv_Cod_Core_ToUse_COPY_INP_TMP.Dispose();
      hv_Is_a_Core.Dispose();
      hv_MinimumDisparity_Cam1.Dispose();
      hv_NumberOfDisparities_Cam1.Dispose();
      hv_Projector.Dispose();
      hv_FrontLigth.Dispose();
      hv_AutoExposure.Dispose();
      hv_AutoGain.Dispose();
      hv_Exposure.Dispose();
      hv_Gain.Dispose();
      hv_FlexView.Dispose();
      hv_TempCam.Dispose();
      hv_Pallet_To_Scan.Dispose();
      hv_Segmento_To_Scan.Dispose();
      hv_PitutoExist.Dispose();
      hv_FXcheck.Dispose();
      hv_Diametro.Dispose();
      hv_Camara_conexion_Est.Dispose();
      hv_MSecond.Dispose();
      hv_Second.Dispose();
      hv_Minute.Dispose();
      hv_Hour.Dispose();
      hv_Day.Dispose();
      hv_YDay.Dispose();
      hv_Month.Dispose();
      hv_Year.Dispose();
      hv_Fecha.Dispose();
      hv_DitsiObjMax.Dispose();
      hv_Estado_Funcion.Dispose();
      hv_Debug_View.Dispose();
      hv_PoseOut1.Dispose();
      hv_Parametros_VisualizacionOut.Dispose();
      hv_Valores_VisualizacionOut.Dispose();
      hv_PoseView.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Image_Bloque3_Segmento0 (out HObject ho_ModelImage, out HObject ho_X, 
      out HObject ho_Y, out HObject ho_Z, out HObject ho_ImgLeftCamera, HTuple hv_NxLib, 
      HTuple hv_Camera_1, HTuple hv_Parametros_Visualizacion, HTuple hv_Valores_Visualizacion, 
      HTuple hv_FOTO, HTuple hv_WindowHandle, HTuple hv_Cod_Core_ToUse, HTuple hv_SerialHandle, 
      out HTuple hv_Escena3D_RAW, out HTuple hv_Camara_conexion_Est)
  {



    // Stack for temporary objects 
    HObject[] OTemp = new HObject[20];

    // Local iconic variables 

    HObject ho_ROI_1=null, ho_Regions=null, ho_Entidad=null;
    HObject ho_EntidadDilatada=null;

    // Local control variables 

    HTuple hv_Is_a_Core = new HTuple(), hv_MinimumDisparity_Cam1 = new HTuple();
    HTuple hv_NumberOfDisparities_Cam1 = new HTuple(), hv_Projector = new HTuple();
    HTuple hv_FrontLigth = new HTuple(), hv_AutoExposure = new HTuple();
    HTuple hv_AutoGain = new HTuple(), hv_Exposure = new HTuple();
    HTuple hv_Gain = new HTuple(), hv_FlexView = new HTuple();
    HTuple hv_TempCam = new HTuple(), hv_MinimumDisparity = new HTuple();
    HTuple hv_NumberOfDisparities = new HTuple(), hv_MSecond = new HTuple();
    HTuple hv_Second = new HTuple(), hv_Minute = new HTuple();
    HTuple hv_Hour = new HTuple(), hv_Day = new HTuple(), hv_YDay = new HTuple();
    HTuple hv_Month = new HTuple(), hv_Year = new HTuple();
    HTuple hv_Fecha = new HTuple(), hv_RangoLow = new HTuple();
    HTuple hv_RangoHigh = new HTuple(), hv_DitsiObjMax = new HTuple();
    HTuple hv_Estado_Funcion = new HTuple(), hv_Estado_Funcion1 = new HTuple();
    HTuple hv_Debug_View = new HTuple(), hv_PoseOut1 = new HTuple();
    HTuple hv_Parametros_VisualizacionOut = new HTuple(), hv_Valores_VisualizacionOut = new HTuple();
    HTuple hv_PoseView = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ModelImage);
    HOperatorSet.GenEmptyObj(out ho_X);
    HOperatorSet.GenEmptyObj(out ho_Y);
    HOperatorSet.GenEmptyObj(out ho_Z);
    HOperatorSet.GenEmptyObj(out ho_ImgLeftCamera);
    HOperatorSet.GenEmptyObj(out ho_ROI_1);
    HOperatorSet.GenEmptyObj(out ho_Regions);
    HOperatorSet.GenEmptyObj(out ho_Entidad);
    HOperatorSet.GenEmptyObj(out ho_EntidadDilatada);
    hv_Escena3D_RAW = new HTuple();
    hv_Camara_conexion_Est = new HTuple();
    try
    {
      //Configuracion de Parametros


      hv_Is_a_Core.Dispose();
      Get_TipoEntidad(hv_Cod_Core_ToUse, out hv_Is_a_Core);
      if ((int)(hv_Is_a_Core) != 0)
      {
        hv_MinimumDisparity_Cam1.Dispose();
        hv_MinimumDisparity_Cam1 = -78;
        hv_NumberOfDisparities_Cam1.Dispose();
        hv_NumberOfDisparities_Cam1 = 41;
      }
      else
      {
        hv_MinimumDisparity_Cam1.Dispose();
        hv_MinimumDisparity_Cam1 = -64;
        hv_NumberOfDisparities_Cam1.Dispose();
        hv_NumberOfDisparities_Cam1 = 128;
      }


      hv_Projector.Dispose();
      hv_Projector = "true";
      hv_FrontLigth.Dispose();
      hv_FrontLigth = "true";
      hv_AutoExposure.Dispose();
      hv_AutoExposure = "false";
      hv_AutoGain.Dispose();
      hv_AutoGain = "false";
      hv_Exposure.Dispose();
      hv_Exposure = 4.49;
      hv_Gain.Dispose();
      hv_Gain = 2;
      hv_FlexView.Dispose();
      hv_FlexView = 4;
      hv_TempCam.Dispose();
      Config_Parametros_Cam_R1(hv_NxLib, hv_Camera_1, hv_NumberOfDisparities_Cam1, 
          hv_MinimumDisparity_Cam1, hv_Projector, hv_FrontLigth, hv_AutoExposure, 
          hv_AutoGain, hv_Gain, hv_Exposure, hv_FlexView, out hv_TempCam);

      //Get_Core_ToUse_From_BDD_Fast (SerialHandle, Cod_Core_ToUse, Pallet_To_Scan, Segmento_To_Scan, PitutoExist, FXcheck, Diametro)

      ho_ModelImage.Dispose();hv_Camara_conexion_Est.Dispose();
      Adq_Imagen(out ho_ModelImage, hv_NxLib, hv_Camera_1, out hv_Camara_conexion_Est);

      if ((int)(hv_Camara_conexion_Est.TupleNot()) != 0)
      {



        ho_ROI_1.Dispose();
        ho_Regions.Dispose();
        ho_Entidad.Dispose();
        ho_EntidadDilatada.Dispose();

        hv_Is_a_Core.Dispose();
        hv_MinimumDisparity_Cam1.Dispose();
        hv_NumberOfDisparities_Cam1.Dispose();
        hv_Projector.Dispose();
        hv_FrontLigth.Dispose();
        hv_AutoExposure.Dispose();
        hv_AutoGain.Dispose();
        hv_Exposure.Dispose();
        hv_Gain.Dispose();
        hv_FlexView.Dispose();
        hv_TempCam.Dispose();
        hv_MinimumDisparity.Dispose();
        hv_NumberOfDisparities.Dispose();
        hv_MSecond.Dispose();
        hv_Second.Dispose();
        hv_Minute.Dispose();
        hv_Hour.Dispose();
        hv_Day.Dispose();
        hv_YDay.Dispose();
        hv_Month.Dispose();
        hv_Year.Dispose();
        hv_Fecha.Dispose();
        hv_RangoLow.Dispose();
        hv_RangoHigh.Dispose();
        hv_DitsiObjMax.Dispose();
        hv_Estado_Funcion.Dispose();
        hv_Estado_Funcion1.Dispose();
        hv_Debug_View.Dispose();
        hv_PoseOut1.Dispose();
        hv_Parametros_VisualizacionOut.Dispose();
        hv_Valores_VisualizacionOut.Dispose();
        hv_PoseView.Dispose();

        return;

      }


      if ((int)(hv_Is_a_Core.TupleNot()) != 0)
      {
        HOperatorSet.SetFramegrabberParam(hv_NxLib, "do_execute", "EstimateDisparitySettings");
        hv_MinimumDisparity.Dispose();
        HOperatorSet.GetFramegrabberParam(hv_NxLib, "//Execute/Default/Result/193216/MinimumDisparity", 
            out hv_MinimumDisparity);
        hv_NumberOfDisparities.Dispose();
        HOperatorSet.GetFramegrabberParam(hv_NxLib, "//Execute/Default/Result/193216/NumberOfDisparities", 
            out hv_NumberOfDisparities);
        hv_TempCam.Dispose();
        Config_Parametros_Cam_R1(hv_NxLib, hv_Camera_1, hv_NumberOfDisparities, hv_MinimumDisparity, 
            hv_Projector, hv_FrontLigth, hv_AutoExposure, hv_AutoGain, hv_Gain, hv_Exposure, 
            hv_FlexView, out hv_TempCam);
        ho_ModelImage.Dispose();hv_Camara_conexion_Est.Dispose();
        Adq_Imagen(out ho_ModelImage, hv_NxLib, hv_Camera_1, out hv_Camara_conexion_Est);

        ho_X.Dispose();ho_Y.Dispose();ho_Z.Dispose();
        Adq_XYZ_Img(ho_ModelImage, out ho_X, out ho_Y, out ho_Z);

      }


      //**********************************************************************
      //***** Guardo las Imagenes ********************************************
      hv_MSecond.Dispose();hv_Second.Dispose();hv_Minute.Dispose();hv_Hour.Dispose();hv_Day.Dispose();hv_YDay.Dispose();hv_Month.Dispose();hv_Year.Dispose();
      HOperatorSet.GetSystemTime(out hv_MSecond, out hv_Second, out hv_Minute, out hv_Hour, 
          out hv_Day, out hv_YDay, out hv_Month, out hv_Year);

      hv_Fecha.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Fecha = (((((((((((hv_Year+"_")+hv_Month)+"_")+hv_Day)+"_")+hv_Hour)+"_")+hv_Minute)+"_")+hv_Second)+"_")+hv_MSecond;
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.WriteObject(ho_ModelImage, (("D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 2/Img_"+hv_Cod_Core_ToUse)+"_")+hv_Fecha);
      }
      if ((int)(0) != 0)
      {
        ho_ModelImage.Dispose();
        HOperatorSet.ReadObject(out ho_ModelImage, "D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 2/Img_EJY_2019_10_4_16_43_15_880.hobj");
        ho_ModelImage.Dispose();
        HOperatorSet.ReadObject(out ho_ModelImage, "D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 2/Img_CLR_2019_10_28_14_22_17_470.hobj");

      }


      //************************************************************************
      hv_Is_a_Core.Dispose();
      Get_TipoEntidad(hv_Cod_Core_ToUse, out hv_Is_a_Core);
      ho_X.Dispose();ho_Y.Dispose();ho_Z.Dispose();
      Adq_XYZ_Img(ho_ModelImage, out ho_X, out ho_Y, out ho_Z);


      //Then is a  Sleeve
      if ((int)(hv_Is_a_Core) != 0)
      {

        ho_ROI_1.Dispose();
        HOperatorSet.GenRectangle1(out ho_ROI_1, 300, 300, 786.193, 730);
        ho_ROI_1.Dispose();
        HOperatorSet.GenRectangle1(out ho_ROI_1, 250, 300, 786.193, 900);


        {
        HObject ExpTmpOutVar_0;
        HOperatorSet.ReduceDomain(ho_Z, ho_ROI_1, out ExpTmpOutVar_0);
        ho_Z.Dispose();
        ho_Z = ExpTmpOutVar_0;
        }
        //******************************************************
        //Segmento el core de manera dinamica******************
        //median_image (Z, Z, 'circle', 3, 'mirrored')

        //Rango de deteccion  desde la camara
        hv_RangoLow.Dispose();
        hv_RangoLow = 1030;
        hv_RangoHigh.Dispose();
        hv_RangoHigh = 1720.0;
        ho_Regions.Dispose();
        HOperatorSet.Threshold(ho_Z, out ho_Regions, hv_RangoLow, hv_RangoHigh);
        {
        HObject ExpTmpOutVar_0;
        HOperatorSet.ReduceDomain(ho_Z, ho_Regions, out ExpTmpOutVar_0);
        ho_Z.Dispose();
        ho_Z = ExpTmpOutVar_0;
        }


        //* Filtro el piso
        hv_DitsiObjMax.Dispose();
        hv_DitsiObjMax = 1706;
        ho_Entidad.Dispose();hv_Estado_Funcion.Dispose();
        Segmentar_Core(ho_Z, ho_X, ho_Y, ho_Z, out ho_Entidad, hv_DitsiObjMax, out hv_Estado_Funcion);
        ho_Entidad.Dispose();hv_Estado_Funcion1.Dispose();
        Histagram_Filter(ho_Z, ho_X, ho_Y, ho_Z, out ho_Entidad, out hv_Estado_Funcion1);
        //******************************************************
        ho_EntidadDilatada.Dispose();
        HOperatorSet.DilationCircle(ho_Entidad, out ho_EntidadDilatada, 30.5);
        {
        HObject ExpTmpOutVar_0;
        HOperatorSet.ReduceDomain(ho_Z, ho_EntidadDilatada, out ExpTmpOutVar_0);
        ho_Z.Dispose();
        ho_Z = ExpTmpOutVar_0;
        }

        //select_obj (ModelImage, ImgLeftCamera, 1)
        HOperatorSet.DispObj(ho_EntidadDilatada, hv_ExpDefaultWinHandle);
      }
      else
      {


        //******************************************************
        //Segmento el core de manera dinamica******************
        hv_DitsiObjMax.Dispose();
        hv_DitsiObjMax = 2515.0;
        ho_Entidad.Dispose();hv_Estado_Funcion.Dispose();
        Segmentar_Core(ho_Z, ho_X, ho_Y, ho_Z, out ho_Entidad, hv_DitsiObjMax, out hv_Estado_Funcion);
        //******************************************************
        ho_EntidadDilatada.Dispose();
        HOperatorSet.DilationCircle(ho_Entidad, out ho_EntidadDilatada, 60.5);
        {
        HObject ExpTmpOutVar_0;
        HOperatorSet.ReduceDomain(ho_Z, ho_EntidadDilatada, out ExpTmpOutVar_0);
        ho_Z.Dispose();
        ho_Z = ExpTmpOutVar_0;
        }

        ho_ImgLeftCamera.Dispose();
        HOperatorSet.SelectObj(ho_ModelImage, out ho_ImgLeftCamera, 1);
        HOperatorSet.DispObj(ho_EntidadDilatada, hv_ExpDefaultWinHandle);

      }



      hv_Escena3D_RAW.Dispose();
      HOperatorSet.XyzToObjectModel3d(ho_X, ho_Y, ho_Z, out hv_Escena3D_RAW);

      //*****************************************************************************************************************************
      dev_resize_window_fit_image(ho_X, 0, 0, 500, 500);
      hv_Debug_View.Dispose();
      hv_Debug_View = 1;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_PoseOut1.Dispose();
      Visualizar_3D(hv_Escena3D_RAW, hv_Parametros_Visualizacion.TupleConcat("alpha"), 
          hv_Valores_Visualizacion.TupleConcat(0.5), hv_Debug_View, new HTuple(), 
          new HTuple(), new HTuple(), hv_WindowHandle, out hv_PoseOut1);
      }



      hv_Parametros_VisualizacionOut.Dispose();
      hv_Parametros_VisualizacionOut = new HTuple();
      hv_Parametros_VisualizacionOut[0] = "disp_pose";
      hv_Parametros_VisualizacionOut[1] = "color_attrib";
      hv_Parametros_VisualizacionOut[2] = "lut";
      hv_Parametros_VisualizacionOut[3] = "disp_lines";
      hv_Parametros_VisualizacionOut[4] = "point_size";
      hv_Valores_VisualizacionOut.Dispose();
      hv_Valores_VisualizacionOut = new HTuple();
      hv_Valores_VisualizacionOut[0] = "false";
      hv_Valores_VisualizacionOut[1] = "coord_z";
      hv_Valores_VisualizacionOut[2] = "rainbow";
      hv_Valores_VisualizacionOut[3] = "true";
      hv_Valores_VisualizacionOut[4] = 1;
      hv_PoseView.Dispose();
      HOperatorSet.CreatePose(100, 100, 3000, 0, 0, 0, "Rp+T", "gba", "point", out hv_PoseView);
      HOperatorSet.DispObjectModel3d(hv_ExpDefaultWinHandle, hv_Escena3D_RAW, new HTuple(), 
          hv_PoseView, hv_Parametros_VisualizacionOut, hv_Valores_VisualizacionOut);
      //*****************************************************************************************************************************

      ho_ROI_1.Dispose();
      ho_Regions.Dispose();
      ho_Entidad.Dispose();
      ho_EntidadDilatada.Dispose();

      hv_Is_a_Core.Dispose();
      hv_MinimumDisparity_Cam1.Dispose();
      hv_NumberOfDisparities_Cam1.Dispose();
      hv_Projector.Dispose();
      hv_FrontLigth.Dispose();
      hv_AutoExposure.Dispose();
      hv_AutoGain.Dispose();
      hv_Exposure.Dispose();
      hv_Gain.Dispose();
      hv_FlexView.Dispose();
      hv_TempCam.Dispose();
      hv_MinimumDisparity.Dispose();
      hv_NumberOfDisparities.Dispose();
      hv_MSecond.Dispose();
      hv_Second.Dispose();
      hv_Minute.Dispose();
      hv_Hour.Dispose();
      hv_Day.Dispose();
      hv_YDay.Dispose();
      hv_Month.Dispose();
      hv_Year.Dispose();
      hv_Fecha.Dispose();
      hv_RangoLow.Dispose();
      hv_RangoHigh.Dispose();
      hv_DitsiObjMax.Dispose();
      hv_Estado_Funcion.Dispose();
      hv_Estado_Funcion1.Dispose();
      hv_Debug_View.Dispose();
      hv_PoseOut1.Dispose();
      hv_Parametros_VisualizacionOut.Dispose();
      hv_Valores_VisualizacionOut.Dispose();
      hv_PoseView.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_ROI_1.Dispose();
      ho_Regions.Dispose();
      ho_Entidad.Dispose();
      ho_EntidadDilatada.Dispose();

      hv_Is_a_Core.Dispose();
      hv_MinimumDisparity_Cam1.Dispose();
      hv_NumberOfDisparities_Cam1.Dispose();
      hv_Projector.Dispose();
      hv_FrontLigth.Dispose();
      hv_AutoExposure.Dispose();
      hv_AutoGain.Dispose();
      hv_Exposure.Dispose();
      hv_Gain.Dispose();
      hv_FlexView.Dispose();
      hv_TempCam.Dispose();
      hv_MinimumDisparity.Dispose();
      hv_NumberOfDisparities.Dispose();
      hv_MSecond.Dispose();
      hv_Second.Dispose();
      hv_Minute.Dispose();
      hv_Hour.Dispose();
      hv_Day.Dispose();
      hv_YDay.Dispose();
      hv_Month.Dispose();
      hv_Year.Dispose();
      hv_Fecha.Dispose();
      hv_RangoLow.Dispose();
      hv_RangoHigh.Dispose();
      hv_DitsiObjMax.Dispose();
      hv_Estado_Funcion.Dispose();
      hv_Estado_Funcion1.Dispose();
      hv_Debug_View.Dispose();
      hv_PoseOut1.Dispose();
      hv_Parametros_VisualizacionOut.Dispose();
      hv_Valores_VisualizacionOut.Dispose();
      hv_PoseView.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Image_Sleeve_Bloque3 (out HObject ho_ModelImage, out HObject ho_X, 
      out HObject ho_Y, out HObject ho_Z, out HObject ho_ImgLeftCamera, HTuple hv_NxLib, 
      HTuple hv_Camera_1, HTuple hv_Parametros_Visualizacion, HTuple hv_Valores_Visualizacion, 
      HTuple hv_FOTO, HTuple hv_WindowHandle, HTuple hv_Cod_Core_ToUse, HTuple hv_SerialHandle, 
      HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Matrix_Sleeve, HTuple hv_IndexLast, 
      HTuple hv_Diametro, out HTuple hv_Escena3D_RAW, out HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Matrix_Sleeve_New)
  {



    // Stack for temporary objects 
    HObject[] OTemp = new HObject[20];

    // Local iconic variables 

    HObject ho_Entidad, ho_EntidadDilatada;

    // Local control variables 

    HTuple hv_MinimumDisparity_Cam1 = new HTuple();
    HTuple hv_NumberOfDisparities_Cam1 = new HTuple(), hv_Projector = new HTuple();
    HTuple hv_FrontLigth = new HTuple(), hv_AutoExposure = new HTuple();
    HTuple hv_AutoGain = new HTuple(), hv_Exposure = new HTuple();
    HTuple hv_Gain = new HTuple(), hv_FlexView = new HTuple();
    HTuple hv_TempCam = new HTuple(), hv_Pallet_To_Scan = new HTuple();
    HTuple hv_Segmento_To_Scan = new HTuple(), hv_PitutoExist = new HTuple();
    HTuple hv_FXcheck = new HTuple(), hv_Camara_conexion_Est = new HTuple();
    HTuple hv_MinimumDisparity = new HTuple(), hv_NumberOfDisparities = new HTuple();
    HTuple hv_MSecond = new HTuple(), hv_Second = new HTuple();
    HTuple hv_Minute = new HTuple(), hv_Hour = new HTuple();
    HTuple hv_Day = new HTuple(), hv_YDay = new HTuple(), hv_Month = new HTuple();
    HTuple hv_Year = new HTuple(), hv_Path_base = new HTuple();
    HTuple hv_Fecha = new HTuple(), hv_PathFile = new HTuple();
    HTuple hv_Is_a_Core = new HTuple(), hv_Width = new HTuple();
    HTuple hv_Height = new HTuple(), hv_DitsiObjMax = new HTuple();
    HTuple hv_Estado_Funcion = new HTuple(), hv_Debug_View = new HTuple();
    HTuple hv_PoseOut1 = new HTuple(), hv_Parametros_VisualizacionOut = new HTuple();
    HTuple hv_Valores_VisualizacionOut = new HTuple(), hv_PoseView = new HTuple();
    HTuple   hv_Cod_Core_ToUse_COPY_INP_TMP = new HTuple(hv_Cod_Core_ToUse);
    HTuple   hv_Diametro_COPY_INP_TMP = new HTuple(hv_Diametro);

    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ModelImage);
    HOperatorSet.GenEmptyObj(out ho_X);
    HOperatorSet.GenEmptyObj(out ho_Y);
    HOperatorSet.GenEmptyObj(out ho_Z);
    HOperatorSet.GenEmptyObj(out ho_ImgLeftCamera);
    HOperatorSet.GenEmptyObj(out ho_Entidad);
    HOperatorSet.GenEmptyObj(out ho_EntidadDilatada);
    hv_Escena3D_RAW = new HTuple();
    hvec_Matrix_Sleeve_New = new HTupleVector(2);
    try
    {
      //Configuracion de Parametros

      hvec_Matrix_Sleeve_New.Dispose();
      hvec_Matrix_Sleeve_New = new HTupleVector(hvec_Matrix_Sleeve);

      hv_MinimumDisparity_Cam1.Dispose();
      hv_MinimumDisparity_Cam1 = -64;
      hv_NumberOfDisparities_Cam1.Dispose();
      hv_NumberOfDisparities_Cam1 = 128;



      hv_Projector.Dispose();
      hv_Projector = "true";
      hv_FrontLigth.Dispose();
      hv_FrontLigth = "true";
      hv_AutoExposure.Dispose();
      hv_AutoExposure = "true";
      hv_AutoGain.Dispose();
      hv_AutoGain = "true";
      hv_Exposure.Dispose();
      hv_Exposure = 4.49;
      hv_Gain.Dispose();
      hv_Gain = 3;
      hv_FlexView.Dispose();
      hv_FlexView = 1;
      hv_TempCam.Dispose();
      Config_Parametros_Cam_R1(hv_NxLib, hv_Camera_1, hv_NumberOfDisparities_Cam1, 
          hv_MinimumDisparity_Cam1, hv_Projector, hv_FrontLigth, hv_AutoExposure, 
          hv_AutoGain, hv_Gain, hv_Exposure, hv_FlexView, out hv_TempCam);

      hv_Cod_Core_ToUse_COPY_INP_TMP.Dispose();hv_Pallet_To_Scan.Dispose();hv_Segmento_To_Scan.Dispose();hv_PitutoExist.Dispose();hv_FXcheck.Dispose();hv_Diametro_COPY_INP_TMP.Dispose();
      Get_Core_ToUse_From_BDD_Fast(hv_SerialHandle, out hv_Cod_Core_ToUse_COPY_INP_TMP, 
          out hv_Pallet_To_Scan, out hv_Segmento_To_Scan, out hv_PitutoExist, out hv_FXcheck, 
          out hv_Diametro_COPY_INP_TMP);

      ho_ModelImage.Dispose();hv_Camara_conexion_Est.Dispose();
      Adq_Imagen(out ho_ModelImage, hv_NxLib, hv_Camera_1, out hv_Camara_conexion_Est);


      HOperatorSet.SetFramegrabberParam(hv_NxLib, "do_execute", "EstimateDisparitySettings");
      hv_MinimumDisparity.Dispose();
      HOperatorSet.GetFramegrabberParam(hv_NxLib, "//Execute/Default/Result/193216/MinimumDisparity", 
          out hv_MinimumDisparity);
      hv_NumberOfDisparities.Dispose();
      HOperatorSet.GetFramegrabberParam(hv_NxLib, "//Execute/Default/Result/193216/NumberOfDisparities", 
          out hv_NumberOfDisparities);


      hv_FlexView.Dispose();
      hv_FlexView = 8;
      hv_TempCam.Dispose();
      Config_Parametros_Cam_R1(hv_NxLib, hv_Camera_1, hv_NumberOfDisparities, hv_MinimumDisparity, 
          hv_Projector, hv_FrontLigth, hv_AutoExposure, hv_AutoGain, hv_Gain, hv_Exposure, 
          hv_FlexView, out hv_TempCam);
      ho_ModelImage.Dispose();hv_Camara_conexion_Est.Dispose();
      Adq_Imagen(out ho_ModelImage, hv_NxLib, hv_Camera_1, out hv_Camara_conexion_Est);
      ho_ModelImage.Dispose();hv_Camara_conexion_Est.Dispose();
      Adq_Imagen(out ho_ModelImage, hv_NxLib, hv_Camera_1, out hv_Camara_conexion_Est);
      ho_X.Dispose();ho_Y.Dispose();ho_Z.Dispose();
      Adq_XYZ_Img(ho_ModelImage, out ho_X, out ho_Y, out ho_Z);




      //**********************************************************************
      //***** Guardo las Imagenes ********************************************
      hv_MSecond.Dispose();hv_Second.Dispose();hv_Minute.Dispose();hv_Hour.Dispose();hv_Day.Dispose();hv_YDay.Dispose();hv_Month.Dispose();hv_Year.Dispose();
      HOperatorSet.GetSystemTime(out hv_MSecond, out hv_Second, out hv_Minute, out hv_Hour, 
          out hv_Day, out hv_YDay, out hv_Month, out hv_Year);


      hv_Path_base.Dispose();
      hv_Path_base = "D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 2/";
      hv_Fecha.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Fecha = (((((((((((hv_Year+"_")+hv_Month)+"_")+hv_Day)+"_")+hv_Hour)+"_")+hv_Minute)+"_")+hv_Second)+"_")+hv_MSecond;
      }
      hv_PathFile.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_PathFile = (("Img_"+hv_Cod_Core_ToUse_COPY_INP_TMP)+"_")+hv_Fecha;
      }
      hv_PathFile.Dispose();
      hv_PathFile = "Img_6x4x8 ND sleeve_2019_8_15_9_36_50_814.hobj";


      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.WriteObject(ho_ModelImage, (("D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 2/Img_"+hv_Cod_Core_ToUse_COPY_INP_TMP)+"_")+hv_Fecha);
      }
      //***  read_object (ModelImage, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 2/Img_6x2.9x8 ND sleeve_2019_9_13_9_36_18_445.hobj')
      //************************************************************************
      hv_Is_a_Core.Dispose();
      Get_TipoEntidad(hv_Cod_Core_ToUse_COPY_INP_TMP, out hv_Is_a_Core);
      ho_X.Dispose();ho_Y.Dispose();ho_Z.Dispose();
      Adq_XYZ_Img(ho_ModelImage, out ho_X, out ho_Y, out ho_Z);

      hv_Width.Dispose();hv_Height.Dispose();
      HOperatorSet.GetImageSize(ho_X, out hv_Width, out hv_Height);
      //dev_resize_window_fit_image (X, 0, 0, Width, Height)

      //******************************************************
      //Segmento el dore de manera dinamica******************
      hv_DitsiObjMax.Dispose();
      hv_DitsiObjMax = 2515.0;
      ho_Entidad.Dispose();hv_Estado_Funcion.Dispose();
      Segmentar_Core(ho_Z, ho_X, ho_Y, ho_Z, out ho_Entidad, hv_DitsiObjMax, out hv_Estado_Funcion);
      //******************************************************



      ho_EntidadDilatada.Dispose();
      HOperatorSet.DilationCircle(ho_Entidad, out ho_EntidadDilatada, hv_Diametro_COPY_INP_TMP);
      {
      HObject ExpTmpOutVar_0;
      HOperatorSet.ReduceDomain(ho_Z, ho_EntidadDilatada, out ExpTmpOutVar_0);
      ho_Z.Dispose();
      ho_Z = ExpTmpOutVar_0;
      }

      ho_ImgLeftCamera.Dispose();
      HOperatorSet.SelectObj(ho_ModelImage, out ho_ImgLeftCamera, 1);
      HOperatorSet.DispObj(ho_EntidadDilatada, hv_ExpDefaultWinHandle);





      hv_Escena3D_RAW.Dispose();
      HOperatorSet.XyzToObjectModel3d(ho_X, ho_Y, ho_Z, out hv_Escena3D_RAW);

      //*****************************************************************************************************************************
      hv_Debug_View.Dispose();
      hv_Debug_View = 0;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_PoseOut1.Dispose();
      Visualizar_3D(hv_Escena3D_RAW, hv_Parametros_Visualizacion.TupleConcat("alpha"), 
          hv_Valores_Visualizacion.TupleConcat(0.5), hv_Debug_View, new HTuple(), 
          new HTuple(), new HTuple(), hv_WindowHandle, out hv_PoseOut1);
      }


      dev_resize_window_fit_image(ho_X, 0, 0, -1, -1);
      hv_Parametros_VisualizacionOut.Dispose();
      hv_Parametros_VisualizacionOut = new HTuple();
      hv_Parametros_VisualizacionOut[0] = "disp_pose";
      hv_Parametros_VisualizacionOut[1] = "color_attrib";
      hv_Parametros_VisualizacionOut[2] = "lut";
      hv_Parametros_VisualizacionOut[3] = "disp_lines";
      hv_Parametros_VisualizacionOut[4] = "point_size";
      hv_Valores_VisualizacionOut.Dispose();
      hv_Valores_VisualizacionOut = new HTuple();
      hv_Valores_VisualizacionOut[0] = "false";
      hv_Valores_VisualizacionOut[1] = "coord_z";
      hv_Valores_VisualizacionOut[2] = "rainbow";
      hv_Valores_VisualizacionOut[3] = "true";
      hv_Valores_VisualizacionOut[4] = 1;
      hv_PoseView.Dispose();
      HOperatorSet.CreatePose(250, 100, 3500, 0, 0, 0, "Rp+T", "gba", "point", out hv_PoseView);
      HOperatorSet.DispObjectModel3d(hv_ExpDefaultWinHandle, hv_Escena3D_RAW, new HTuple(), 
          hv_PoseView, hv_Parametros_VisualizacionOut, hv_Valores_VisualizacionOut);
      //*****************************************************************************************************************************




      //**********************************************
      //Foto pallet N sacada
      //************************************************
      hvec_Matrix_Sleeve_New[hv_IndexLast][1] = new HTupleVector(new HTuple(1));
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Matrix_Sleeve_New[hv_IndexLast][2] = dh.Add(new HTupleVector(hv_Path_base+hv_PathFile));
      }





      ho_Entidad.Dispose();
      ho_EntidadDilatada.Dispose();

      hv_Cod_Core_ToUse_COPY_INP_TMP.Dispose();
      hv_Diametro_COPY_INP_TMP.Dispose();
      hv_MinimumDisparity_Cam1.Dispose();
      hv_NumberOfDisparities_Cam1.Dispose();
      hv_Projector.Dispose();
      hv_FrontLigth.Dispose();
      hv_AutoExposure.Dispose();
      hv_AutoGain.Dispose();
      hv_Exposure.Dispose();
      hv_Gain.Dispose();
      hv_FlexView.Dispose();
      hv_TempCam.Dispose();
      hv_Pallet_To_Scan.Dispose();
      hv_Segmento_To_Scan.Dispose();
      hv_PitutoExist.Dispose();
      hv_FXcheck.Dispose();
      hv_Camara_conexion_Est.Dispose();
      hv_MinimumDisparity.Dispose();
      hv_NumberOfDisparities.Dispose();
      hv_MSecond.Dispose();
      hv_Second.Dispose();
      hv_Minute.Dispose();
      hv_Hour.Dispose();
      hv_Day.Dispose();
      hv_YDay.Dispose();
      hv_Month.Dispose();
      hv_Year.Dispose();
      hv_Path_base.Dispose();
      hv_Fecha.Dispose();
      hv_PathFile.Dispose();
      hv_Is_a_Core.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_DitsiObjMax.Dispose();
      hv_Estado_Funcion.Dispose();
      hv_Debug_View.Dispose();
      hv_PoseOut1.Dispose();
      hv_Parametros_VisualizacionOut.Dispose();
      hv_Valores_VisualizacionOut.Dispose();
      hv_PoseView.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_Entidad.Dispose();
      ho_EntidadDilatada.Dispose();

      hv_Cod_Core_ToUse_COPY_INP_TMP.Dispose();
      hv_Diametro_COPY_INP_TMP.Dispose();
      hv_MinimumDisparity_Cam1.Dispose();
      hv_NumberOfDisparities_Cam1.Dispose();
      hv_Projector.Dispose();
      hv_FrontLigth.Dispose();
      hv_AutoExposure.Dispose();
      hv_AutoGain.Dispose();
      hv_Exposure.Dispose();
      hv_Gain.Dispose();
      hv_FlexView.Dispose();
      hv_TempCam.Dispose();
      hv_Pallet_To_Scan.Dispose();
      hv_Segmento_To_Scan.Dispose();
      hv_PitutoExist.Dispose();
      hv_FXcheck.Dispose();
      hv_Camara_conexion_Est.Dispose();
      hv_MinimumDisparity.Dispose();
      hv_NumberOfDisparities.Dispose();
      hv_MSecond.Dispose();
      hv_Second.Dispose();
      hv_Minute.Dispose();
      hv_Hour.Dispose();
      hv_Day.Dispose();
      hv_YDay.Dispose();
      hv_Month.Dispose();
      hv_Year.Dispose();
      hv_Path_base.Dispose();
      hv_Fecha.Dispose();
      hv_PathFile.Dispose();
      hv_Is_a_Core.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_DitsiObjMax.Dispose();
      hv_Estado_Funcion.Dispose();
      hv_Debug_View.Dispose();
      hv_PoseOut1.Dispose();
      hv_Parametros_VisualizacionOut.Dispose();
      hv_Valores_VisualizacionOut.Dispose();
      hv_PoseView.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Image_Sleeve_Bloque3_Seccion0 (HObject ho_Objeto_1_mangas, out HObject ho_ModelImage, 
      out HObject ho_X, out HObject ho_Y, out HObject ho_Z, out HObject ho_ImgLeftCamera, 
      HTuple hv_NxLib, HTuple hv_Camera_1, HTuple hv_Parametros_Visualizacion, HTuple hv_Valores_Visualizacion, 
      HTuple hv_FOTO, HTuple hv_WindowHandle, HTuple hv_Cod_Core_ToUse, HTuple hv_SerialHandle, 
      HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Matrix_Sleeve, HTuple hv_IndexLast, 
      HTuple hv_Diametro, HTuple hv_Diametro_Interno, HTuple hv_g_CamInBasePose1, 
      out HTuple hv_Escena3D_RAW, out HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Matrix_Sleeve_New, 
      out HTuple hv_g_AltutaVirtualCamEstereo)
  {




    // Stack for temporary objects 
    HObject[] OTemp = new HObject[20];

    // Local iconic variables 

    HObject ho_ModelImage2, ho_Entidad, ho_EntidadDilatada;

    // Local control variables 

    HTuple hv_MinimumDisparity_Cam1 = new HTuple();
    HTuple hv_NumberOfDisparities_Cam1 = new HTuple(), hv_Projector = new HTuple();
    HTuple hv_FrontLigth = new HTuple(), hv_AutoExposure = new HTuple();
    HTuple hv_AutoGain = new HTuple(), hv_Exposure = new HTuple();
    HTuple hv_Gain = new HTuple(), hv_FlexView = new HTuple();
    HTuple hv_TempCam = new HTuple(), hv_Camara_conexion_Est = new HTuple();
    HTuple hv_MinimumDisparity = new HTuple(), hv_NumberOfDisparities = new HTuple();
    HTuple hv_Camara_conexion_Est3 = new HTuple(), hv_Fecha = new HTuple();
    HTuple hv_MSecond = new HTuple(), hv_Second = new HTuple();
    HTuple hv_Minute = new HTuple(), hv_Hour = new HTuple();
    HTuple hv_Day = new HTuple(), hv_YDay = new HTuple(), hv_Month = new HTuple();
    HTuple hv_Year = new HTuple(), hv_Path_base = new HTuple();
    HTuple hv_PathFile = new HTuple(), hv_Is_a_Core = new HTuple();
    HTuple hv_Width = new HTuple(), hv_Height = new HTuple();
    HTuple hv_DitsiObjMax = new HTuple(), hv_Estado_Funcion = new HTuple();
    HTuple hv_Parametros_VisualizacionOut = new HTuple(), hv_Valores_VisualizacionOut = new HTuple();
    HTuple hv_PoseView = new HTuple(), hv_Debug_View = new HTuple();
    HTuple hv_PoseOut1 = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ModelImage);
    HOperatorSet.GenEmptyObj(out ho_X);
    HOperatorSet.GenEmptyObj(out ho_Y);
    HOperatorSet.GenEmptyObj(out ho_Z);
    HOperatorSet.GenEmptyObj(out ho_ImgLeftCamera);
    HOperatorSet.GenEmptyObj(out ho_ModelImage2);
    HOperatorSet.GenEmptyObj(out ho_Entidad);
    HOperatorSet.GenEmptyObj(out ho_EntidadDilatada);
    hv_Escena3D_RAW = new HTuple();
    hvec_Matrix_Sleeve_New = new HTupleVector(2);
    hv_g_AltutaVirtualCamEstereo = new HTuple();
    try
    {
      //Configuracion de Parametros


      hvec_Matrix_Sleeve_New.Dispose();
      hvec_Matrix_Sleeve_New = new HTupleVector(hvec_Matrix_Sleeve);

      hv_MinimumDisparity_Cam1.Dispose();
      hv_MinimumDisparity_Cam1 = -64;
      hv_NumberOfDisparities_Cam1.Dispose();
      hv_NumberOfDisparities_Cam1 = 128;



      hv_Projector.Dispose();
      hv_Projector = "true";
      hv_FrontLigth.Dispose();
      hv_FrontLigth = "true";
      hv_AutoExposure.Dispose();
      hv_AutoExposure = "true";
      hv_AutoGain.Dispose();
      hv_AutoGain = "true";
      hv_Exposure.Dispose();
      hv_Exposure = 4.49;
      hv_Gain.Dispose();
      hv_Gain = 3;
      hv_FlexView.Dispose();
      hv_FlexView = 1;
      hv_TempCam.Dispose();
      Config_Parametros_Cam_R1(hv_NxLib, hv_Camera_1, hv_NumberOfDisparities_Cam1, 
          hv_MinimumDisparity_Cam1, hv_Projector, hv_FrontLigth, hv_AutoExposure, 
          hv_AutoGain, hv_Gain, hv_Exposure, hv_FlexView, out hv_TempCam);



      ho_ModelImage.Dispose();hv_Camara_conexion_Est.Dispose();
      Adq_Imagen(out ho_ModelImage, hv_NxLib, hv_Camera_1, out hv_Camara_conexion_Est);


      HOperatorSet.SetFramegrabberParam(hv_NxLib, "do_execute", "EstimateDisparitySettings");
      hv_MinimumDisparity.Dispose();
      HOperatorSet.GetFramegrabberParam(hv_NxLib, "//Execute/Default/Result/193216/MinimumDisparity", 
          out hv_MinimumDisparity);
      hv_NumberOfDisparities.Dispose();
      HOperatorSet.GetFramegrabberParam(hv_NxLib, "//Execute/Default/Result/193216/NumberOfDisparities", 
          out hv_NumberOfDisparities);


      hv_FlexView.Dispose();
      hv_FlexView = 8;
      hv_TempCam.Dispose();
      Config_Parametros_Cam_R1(hv_NxLib, hv_Camera_1, hv_NumberOfDisparities, hv_MinimumDisparity, 
          hv_Projector, hv_FrontLigth, hv_AutoExposure, hv_AutoGain, hv_Gain, hv_Exposure, 
          hv_FlexView, out hv_TempCam);
      ho_ModelImage.Dispose();hv_Camara_conexion_Est.Dispose();
      Adq_Imagen(out ho_ModelImage, hv_NxLib, hv_Camera_1, out hv_Camara_conexion_Est);
      ho_ModelImage.Dispose();hv_Camara_conexion_Est.Dispose();
      Adq_Imagen(out ho_ModelImage, hv_NxLib, hv_Camera_1, out hv_Camara_conexion_Est);
      ho_X.Dispose();ho_Y.Dispose();ho_Z.Dispose();
      Adq_XYZ_Img(ho_ModelImage, out ho_X, out ho_Y, out ho_Z);



      ho_ModelImage.Dispose();
      HOperatorSet.ConcatObj(ho_Objeto_1_mangas, ho_Objeto_1_mangas, out ho_ModelImage
          );
      {
      HObject ExpTmpOutVar_0;
      HOperatorSet.ConcatObj(ho_Objeto_1_mangas, ho_ModelImage, out ExpTmpOutVar_0
          );
      ho_ModelImage.Dispose();
      ho_ModelImage = ExpTmpOutVar_0;
      }


      //*******************************************
      ho_ModelImage2.Dispose();hv_Camara_conexion_Est3.Dispose();
      Adq_Imagen(out ho_ModelImage2, hv_NxLib, hv_Camera_1, out hv_Camara_conexion_Est3);
      ho_X.Dispose();ho_Y.Dispose();ho_Z.Dispose();
      Adq_XYZ_Img(ho_ModelImage2, out ho_X, out ho_Y, out ho_Z);
      //**********************************************



      //read_image (ModelImage, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/NuevaPosicionMangas/Foto1hobj.hobj')
      //read_image (ModelImage2, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/NuevaPosicionMangas/Foto2hobj.hobj')

      //write_object (ModelImage, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 2/Img_OBJ1'+Cod_Core_ToUse+'_'+Fecha)
      //write_object (ModelImage2, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 2/Img_OBJ2'+Cod_Core_ToUse+'_'+Fecha)
      ho_X.Dispose();ho_Y.Dispose();ho_Z.Dispose();
      {
      HObject ExpTmpOutVar_0;hv_Escena3D_RAW.Dispose();hv_g_AltutaVirtualCamEstereo.Dispose();
      Get_ImagenMangasResultante(ho_ModelImage, ho_ModelImage2, out ho_X, out ho_Y, 
          out ho_Z, out ExpTmpOutVar_0, hv_SerialHandle, hv_g_CamInBasePose1, out hv_Escena3D_RAW, 
          out hv_g_AltutaVirtualCamEstereo);
      ho_ModelImage.Dispose();
      ho_ModelImage = ExpTmpOutVar_0;
      }
      //**write_object (ModelImage, Escena3D_RAW)


      //read_image (ModelImage, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 2/Img_6x4x8 ND sleeve_2019_10_9_19_33_53_175.hobj')






      //**********************************************************************
      //***** Guardo las Imagenes ********************************************
      hv_MSecond.Dispose();hv_Second.Dispose();hv_Minute.Dispose();hv_Hour.Dispose();hv_Day.Dispose();hv_YDay.Dispose();hv_Month.Dispose();hv_Year.Dispose();
      HOperatorSet.GetSystemTime(out hv_MSecond, out hv_Second, out hv_Minute, out hv_Hour, 
          out hv_Day, out hv_YDay, out hv_Month, out hv_Year);


      hv_Path_base.Dispose();
      hv_Path_base = "D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 2/";
      hv_Fecha.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Fecha = (((((((((((hv_Year+"_")+hv_Month)+"_")+hv_Day)+"_")+hv_Hour)+"_")+hv_Minute)+"_")+hv_Second)+"_")+hv_MSecond;
      }
      hv_PathFile.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_PathFile = (("Img_"+hv_Cod_Core_ToUse)+"_")+hv_Fecha;
      }
      hv_PathFile.Dispose();
      hv_PathFile = "Img_6x4x8 ND sleeve_2019_8_15_9_36_50_814.hobj";


      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.WriteObject(ho_ModelImage, (("D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 2/Img_"+hv_Cod_Core_ToUse)+"_")+hv_Fecha);
      }
      //read_object (ModelImage, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 2/Img_6x6 Tube -HB6 sleeve_2019_10_9_19_34_18_18.hobj')


      //************************************************************************
      hv_Is_a_Core.Dispose();
      Get_TipoEntidad(hv_Cod_Core_ToUse, out hv_Is_a_Core);
      ho_X.Dispose();ho_Y.Dispose();ho_Z.Dispose();
      Adq_XYZ_Img(ho_ModelImage, out ho_X, out ho_Y, out ho_Z);

      hv_Width.Dispose();hv_Height.Dispose();
      HOperatorSet.GetImageSize(ho_X, out hv_Width, out hv_Height);
      //dev_resize_window_fit_image (X, 0, 0, Width, Height)

      //******************************************************
      //Segmento el dore de manera dinamica******************
      hv_DitsiObjMax.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_DitsiObjMax = 2240+hv_g_AltutaVirtualCamEstereo;
      }
      ho_Entidad.Dispose();hv_Estado_Funcion.Dispose();
      Segmentar_Core(ho_Z, ho_X, ho_Y, ho_Z, out ho_Entidad, hv_DitsiObjMax, out hv_Estado_Funcion);
      //******************************************************



      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      ho_EntidadDilatada.Dispose();
      HOperatorSet.DilationCircle(ho_Entidad, out ho_EntidadDilatada, hv_Diametro*0.1);
      }
      {
      HObject ExpTmpOutVar_0;
      HOperatorSet.ReduceDomain(ho_Z, ho_EntidadDilatada, out ExpTmpOutVar_0);
      ho_Z.Dispose();
      ho_Z = ExpTmpOutVar_0;
      }

      //select_obj (ModelImage, ImgLeftCamera, 1)
      HOperatorSet.DispObj(ho_EntidadDilatada, hv_ExpDefaultWinHandle);





      hv_Escena3D_RAW.Dispose();
      HOperatorSet.XyzToObjectModel3d(ho_X, ho_Y, ho_Z, out hv_Escena3D_RAW);

      //*****************************************************************************************************************************

      //dev_resize_window_fit_image (X, 0, 0, -1, -1)
      hv_Parametros_VisualizacionOut.Dispose();
      hv_Parametros_VisualizacionOut = new HTuple();
      hv_Parametros_VisualizacionOut[0] = "disp_pose";
      hv_Parametros_VisualizacionOut[1] = "color_attrib";
      hv_Parametros_VisualizacionOut[2] = "lut";
      hv_Parametros_VisualizacionOut[3] = "disp_lines";
      hv_Parametros_VisualizacionOut[4] = "point_size";
      hv_Valores_VisualizacionOut.Dispose();
      hv_Valores_VisualizacionOut = new HTuple();
      hv_Valores_VisualizacionOut[0] = "false";
      hv_Valores_VisualizacionOut[1] = "coord_z";
      hv_Valores_VisualizacionOut[2] = "rainbow";
      hv_Valores_VisualizacionOut[3] = "true";
      hv_Valores_VisualizacionOut[4] = 1;
      hv_PoseView.Dispose();
      HOperatorSet.CreatePose(500, 500, 10000, 0, 0, 0, "Rp+T", "gba", "point", out hv_PoseView);
      HOperatorSet.DispObjectModel3d(hv_ExpDefaultWinHandle, hv_Escena3D_RAW, new HTuple(), 
          hv_PoseView, hv_Parametros_VisualizacionOut, hv_Valores_VisualizacionOut);
      //*****************************************************************************************************************************
      hv_Debug_View.Dispose();
      hv_Debug_View = 0;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_PoseOut1.Dispose();
      Visualizar_3D(hv_Escena3D_RAW, hv_Parametros_VisualizacionOut.TupleConcat("alpha"), 
          hv_Valores_VisualizacionOut.TupleConcat(1), hv_Debug_View, new HTuple(), 
          new HTuple(), new HTuple(), hv_WindowHandle, out hv_PoseOut1);
      }





      //**********************************************
      //Foto pallet N sacada
      //************************************************
      hvec_Matrix_Sleeve_New[hv_IndexLast][1] = new HTupleVector(new HTuple(1));
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Matrix_Sleeve_New[hv_IndexLast][2] = dh.Add(new HTupleVector(hv_Path_base+hv_PathFile));
      }





      ho_ModelImage2.Dispose();
      ho_Entidad.Dispose();
      ho_EntidadDilatada.Dispose();

      hv_MinimumDisparity_Cam1.Dispose();
      hv_NumberOfDisparities_Cam1.Dispose();
      hv_Projector.Dispose();
      hv_FrontLigth.Dispose();
      hv_AutoExposure.Dispose();
      hv_AutoGain.Dispose();
      hv_Exposure.Dispose();
      hv_Gain.Dispose();
      hv_FlexView.Dispose();
      hv_TempCam.Dispose();
      hv_Camara_conexion_Est.Dispose();
      hv_MinimumDisparity.Dispose();
      hv_NumberOfDisparities.Dispose();
      hv_Camara_conexion_Est3.Dispose();
      hv_Fecha.Dispose();
      hv_MSecond.Dispose();
      hv_Second.Dispose();
      hv_Minute.Dispose();
      hv_Hour.Dispose();
      hv_Day.Dispose();
      hv_YDay.Dispose();
      hv_Month.Dispose();
      hv_Year.Dispose();
      hv_Path_base.Dispose();
      hv_PathFile.Dispose();
      hv_Is_a_Core.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_DitsiObjMax.Dispose();
      hv_Estado_Funcion.Dispose();
      hv_Parametros_VisualizacionOut.Dispose();
      hv_Valores_VisualizacionOut.Dispose();
      hv_PoseView.Dispose();
      hv_Debug_View.Dispose();
      hv_PoseOut1.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_ModelImage2.Dispose();
      ho_Entidad.Dispose();
      ho_EntidadDilatada.Dispose();

      hv_MinimumDisparity_Cam1.Dispose();
      hv_NumberOfDisparities_Cam1.Dispose();
      hv_Projector.Dispose();
      hv_FrontLigth.Dispose();
      hv_AutoExposure.Dispose();
      hv_AutoGain.Dispose();
      hv_Exposure.Dispose();
      hv_Gain.Dispose();
      hv_FlexView.Dispose();
      hv_TempCam.Dispose();
      hv_Camara_conexion_Est.Dispose();
      hv_MinimumDisparity.Dispose();
      hv_NumberOfDisparities.Dispose();
      hv_Camara_conexion_Est3.Dispose();
      hv_Fecha.Dispose();
      hv_MSecond.Dispose();
      hv_Second.Dispose();
      hv_Minute.Dispose();
      hv_Hour.Dispose();
      hv_Day.Dispose();
      hv_YDay.Dispose();
      hv_Month.Dispose();
      hv_Year.Dispose();
      hv_Path_base.Dispose();
      hv_PathFile.Dispose();
      hv_Is_a_Core.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_DitsiObjMax.Dispose();
      hv_Estado_Funcion.Dispose();
      hv_Parametros_VisualizacionOut.Dispose();
      hv_Valores_VisualizacionOut.Dispose();
      hv_PoseView.Dispose();
      hv_Debug_View.Dispose();
      hv_PoseOut1.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_ImagenMangasResultante (HObject ho_Image1, HObject ho_Image2, out HObject ho_Xm, 
      out HObject ho_Ym, out HObject ho_Zm, out HObject ho_Escena2D_RAW, HTuple hv_SerialHandle, 
      HTuple hv_g_CamInBasePose1, out HTuple hv_Escena3D_RAW, out HTuple hv_g_AltutaVirtualCamEstereo)
  {




    // Stack for temporary objects 
    HObject[] OTemp = new HObject[20];

    // Local iconic variables 

    HObject ho_X1, ho_Y1, ho_Z1, ho_X2, ho_Y2;
    HObject ho_Z2;

    // Local control variables 

    HTuple hv_g_CamInBasePose2 = new HTuple();
    HTuple hv_deffPose = new HTuple(), hv_ObjectModel3D_1 = new HTuple();
    HTuple hv_ObjectModel3D2 = new HTuple(), hv_ValorC_2 = new HTuple();
    HTuple hv_ValorMin_C = new HTuple(), hv_ValorB_2 = new HTuple();
    HTuple hv_ValorMin_B = new HTuple(), hv_ValorA_2 = new HTuple();
    HTuple hv_ValorMin_A = new HTuple(), hv_Index = new HTuple();
    HTuple hv_tuple_dist = new HTuple(), hv_MovRobot = new HTuple();
    HTuple hv_Pose_Translado = new HTuple(), hv_ObjectModel3D_1_New = new HTuple();
    HTuple hv_Parametros_Visualizacion = new HTuple(), hv_Valores_Visualizacion = new HTuple();
    HTuple hv_DebugView = new HTuple(), hv_PoseOut1 = new HTuple();
    HTuple hv_Width = new HTuple(), hv_Height = new HTuple();
    HTuple hv_WidthOrg = new HTuple(), hv_HeightOrg = new HTuple();
    HTuple hv_Nfotos = new HTuple(), hv_PixelSize = new HTuple();
    HTuple hv_CameraParam = new HTuple(), hv_Pose1 = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Xm);
    HOperatorSet.GenEmptyObj(out ho_Ym);
    HOperatorSet.GenEmptyObj(out ho_Zm);
    HOperatorSet.GenEmptyObj(out ho_Escena2D_RAW);
    HOperatorSet.GenEmptyObj(out ho_X1);
    HOperatorSet.GenEmptyObj(out ho_Y1);
    HOperatorSet.GenEmptyObj(out ho_Z1);
    HOperatorSet.GenEmptyObj(out ho_X2);
    HOperatorSet.GenEmptyObj(out ho_Y2);
    HOperatorSet.GenEmptyObj(out ho_Z2);
    hv_Escena3D_RAW = new HTuple();
    hv_g_AltutaVirtualCamEstereo = new HTuple();
    try
    {
      ho_X1.Dispose();ho_Y1.Dispose();ho_Z1.Dispose();
      Adq_XYZ_Img(ho_Image1, out ho_X1, out ho_Y1, out ho_Z1);
      ho_X2.Dispose();ho_Y2.Dispose();ho_Z2.Dispose();
      Adq_XYZ_Img(ho_Image2, out ho_X2, out ho_Y2, out ho_Z2);

      hv_g_CamInBasePose2.Dispose();
      Get_Robot_Pose(hv_SerialHandle, out hv_g_CamInBasePose2);


      hv_deffPose.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_deffPose = hv_g_CamInBasePose2-hv_g_CamInBasePose1;
      }


      //*************************************






      hv_ObjectModel3D_1.Dispose();
      HOperatorSet.XyzToObjectModel3d(ho_X1, ho_Y1, ho_Z1, out hv_ObjectModel3D_1);
      hv_ObjectModel3D2.Dispose();
      HOperatorSet.XyzToObjectModel3d(ho_X2, ho_Y2, ho_Z2, out hv_ObjectModel3D2);



      //******************************
      //
      //******************************

      hv_ValorC_2.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_ValorC_2 = hv_g_CamInBasePose2.TupleSelect(
          3);
      }
      hv_ValorMin_C.Dispose();
      Get_Diff_angular(hv_ValorC_2, out hv_ValorMin_C);
      hv_ValorB_2.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_ValorB_2 = hv_g_CamInBasePose2.TupleSelect(
          4);
      }
      hv_ValorMin_B.Dispose();
      Get_Diff_angular(hv_ValorB_2, out hv_ValorMin_B);
      hv_ValorA_2.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_ValorA_2 = hv_g_CamInBasePose2.TupleSelect(
          5);
      }
      hv_ValorMin_A.Dispose();
      Get_Diff_angular(hv_ValorA_2, out hv_ValorMin_A);



      {
      HTuple ExpTmpOutVar_0;
      HOperatorSet.TupleAbs(hv_deffPose, out ExpTmpOutVar_0);
      hv_deffPose.Dispose();
      hv_deffPose = ExpTmpOutVar_0;
      }

      for (hv_Index=0; (int)hv_Index<=1; hv_Index = (int)hv_Index + 1)
      {
        if ((int)(new HTuple(((hv_deffPose.TupleSelect(hv_Index))).TupleGreater(380))) != 0)
        {
          hv_tuple_dist.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_tuple_dist = hv_deffPose.TupleSelect(
              hv_Index);
          }
          break;
        }

      }


      hv_MovRobot.Dispose();
      HOperatorSet.TupleAbs(hv_tuple_dist, out hv_MovRobot);



      //MovRobot := -400
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Pose_Translado.Dispose();
      HOperatorSet.CreatePose(0, -hv_MovRobot, 0, -hv_ValorMin_C, -hv_ValorMin_B, 
          -hv_ValorMin_A, "Rp+T", "gba", "point", out hv_Pose_Translado);
      }


      //create_pose (0, MovRobot, 0, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose_Translado)



      hv_ObjectModel3D_1_New.Dispose();
      HOperatorSet.RigidTransObjectModel3d(hv_ObjectModel3D_1, hv_Pose_Translado, 
          out hv_ObjectModel3D_1_New);

      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Escena3D_RAW.Dispose();
      HOperatorSet.UnionObjectModel3d(hv_ObjectModel3D_1_New.TupleConcat(hv_ObjectModel3D2), 
          "points_surface", out hv_Escena3D_RAW);
      }
      hv_Parametros_Visualizacion.Dispose();
      hv_Parametros_Visualizacion = new HTuple();
      hv_Parametros_Visualizacion[0] = "disp_pose";
      hv_Parametros_Visualizacion[1] = "color_attrib";
      hv_Parametros_Visualizacion[2] = "lut";
      hv_Parametros_Visualizacion[3] = "disp_lines";
      hv_Parametros_Visualizacion[4] = "point_size";
      hv_Valores_Visualizacion.Dispose();
      hv_Valores_Visualizacion = new HTuple();
      hv_Valores_Visualizacion[0] = "true";
      hv_Valores_Visualizacion[1] = "coord_z";
      hv_Valores_Visualizacion[2] = "rainbow";
      hv_Valores_Visualizacion[3] = "true";
      hv_Valores_Visualizacion[4] = 1;

      //Parametros_Visualizacion := ['colored','disp_pose','point_size']
      //Valores_Visualizacion := [  12  ,'true',1]


      hv_DebugView.Dispose();
      hv_DebugView = 1;
      //Visualizar_3D_COPY_1 ([ObjectModel3D_1_New,ObjectModel3D2], Parametros_Visualizacion, Valores_Visualizacion, DebugView, [], [], [], PoseOut1)

      hv_PoseOut1.Dispose();
      Visualizar_3D_COPY_1(hv_Escena3D_RAW, hv_Parametros_Visualizacion, hv_Valores_Visualizacion, 
          hv_DebugView, new HTuple(), new HTuple(), new HTuple(), out hv_PoseOut1);



      hv_Width.Dispose();hv_Height.Dispose();
      HOperatorSet.GetImageSize(ho_X2, out hv_Width, out hv_Height);
      hv_WidthOrg.Dispose();hv_HeightOrg.Dispose();
      HOperatorSet.GetImageSize(ho_X2, out hv_WidthOrg, out hv_HeightOrg);
      hv_Nfotos.Dispose();
      hv_Nfotos = 1;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      {
      HTuple 
        ExpTmpLocalVar_Width = hv_Width*hv_Nfotos;
      hv_Width.Dispose();
      hv_Width = ExpTmpLocalVar_Width;
      }
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      {
      HTuple 
        ExpTmpLocalVar_Height = hv_Height*hv_Nfotos;
      hv_Height.Dispose();
      hv_Height = ExpTmpLocalVar_Height;
      }
      }
      hv_PixelSize.Dispose();
      hv_PixelSize = 5.3e-006;

      //************************************
      //Revizar y poner parametros de foto 3d no optica
      //************************************
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_CameraParam.Dispose();
      gen_cam_par_area_scan_division(12e-3, 0, hv_PixelSize, hv_PixelSize, hv_Width/2, 
          hv_Height/2, hv_Width, hv_Height, out hv_CameraParam);
      }

      //gen_cam_par_area_scan_polynomial (7/1000.0, 0, 0, 0, 0, 0, PixelSize, PixelSize, WidthOrg/2, Nfotos*HeightOrg/2, Width, Height, CameraParam)

      //*************************************************************************************
      //Muevo virtualmente la camara en Z para tener una imagen completa sin distorcion
      hv_g_AltutaVirtualCamEstereo.Dispose();
      hv_g_AltutaVirtualCamEstereo = 2000;
      //*************************************************************************************
      hv_Pose1.Dispose();
      HOperatorSet.CreatePose(0, 0, hv_g_AltutaVirtualCamEstereo, 0, 0, 0, "Rp+T", 
          "gba", "point", out hv_Pose1);
      ho_Xm.Dispose();ho_Ym.Dispose();ho_Zm.Dispose();
      HOperatorSet.ObjectModel3dToXyz(out ho_Xm, out ho_Ym, out ho_Zm, hv_Escena3D_RAW, 
          "cartesian", hv_CameraParam, hv_Pose1);


      ho_Escena2D_RAW.Dispose();
      HOperatorSet.Compose3(ho_Xm, ho_Ym, ho_Zm, out ho_Escena2D_RAW);
      {
      HObject ExpTmpOutVar_0;
      HOperatorSet.ConcatObj(ho_Escena2D_RAW, ho_Escena2D_RAW, out ExpTmpOutVar_0
          );
      ho_Escena2D_RAW.Dispose();
      ho_Escena2D_RAW = ExpTmpOutVar_0;
      }
      {
      HObject ExpTmpOutVar_0;
      HOperatorSet.ConcatObj(ho_Escena2D_RAW, ho_Escena2D_RAW, out ExpTmpOutVar_0
          );
      ho_Escena2D_RAW.Dispose();
      ho_Escena2D_RAW = ExpTmpOutVar_0;
      }

      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.ClearObjectModel3d(hv_ObjectModel3D_1.TupleConcat(hv_ObjectModel3D2));
      }
      ho_X1.Dispose();
      ho_Y1.Dispose();
      ho_Z1.Dispose();
      ho_X2.Dispose();
      ho_Y2.Dispose();
      ho_Z2.Dispose();

      hv_g_CamInBasePose2.Dispose();
      hv_deffPose.Dispose();
      hv_ObjectModel3D_1.Dispose();
      hv_ObjectModel3D2.Dispose();
      hv_ValorC_2.Dispose();
      hv_ValorMin_C.Dispose();
      hv_ValorB_2.Dispose();
      hv_ValorMin_B.Dispose();
      hv_ValorA_2.Dispose();
      hv_ValorMin_A.Dispose();
      hv_Index.Dispose();
      hv_tuple_dist.Dispose();
      hv_MovRobot.Dispose();
      hv_Pose_Translado.Dispose();
      hv_ObjectModel3D_1_New.Dispose();
      hv_Parametros_Visualizacion.Dispose();
      hv_Valores_Visualizacion.Dispose();
      hv_DebugView.Dispose();
      hv_PoseOut1.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_WidthOrg.Dispose();
      hv_HeightOrg.Dispose();
      hv_Nfotos.Dispose();
      hv_PixelSize.Dispose();
      hv_CameraParam.Dispose();
      hv_Pose1.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_X1.Dispose();
      ho_Y1.Dispose();
      ho_Z1.Dispose();
      ho_X2.Dispose();
      ho_Y2.Dispose();
      ho_Z2.Dispose();

      hv_g_CamInBasePose2.Dispose();
      hv_deffPose.Dispose();
      hv_ObjectModel3D_1.Dispose();
      hv_ObjectModel3D2.Dispose();
      hv_ValorC_2.Dispose();
      hv_ValorMin_C.Dispose();
      hv_ValorB_2.Dispose();
      hv_ValorMin_B.Dispose();
      hv_ValorA_2.Dispose();
      hv_ValorMin_A.Dispose();
      hv_Index.Dispose();
      hv_tuple_dist.Dispose();
      hv_MovRobot.Dispose();
      hv_Pose_Translado.Dispose();
      hv_ObjectModel3D_1_New.Dispose();
      hv_Parametros_Visualizacion.Dispose();
      hv_Valores_Visualizacion.Dispose();
      hv_DebugView.Dispose();
      hv_PoseOut1.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_WidthOrg.Dispose();
      hv_HeightOrg.Dispose();
      hv_Nfotos.Dispose();
      hv_PixelSize.Dispose();
      hv_CameraParam.Dispose();
      hv_Pose1.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Img_Camera_2 (out HObject ho_ModelImage, out HObject ho_Xm, out HObject ho_Ym, 
      out HObject ho_Zm, out HObject ho_ImgLeftCamera, HTuple hv_NxLib_1, HTuple hv_Camera_1, 
      out HTuple hv_Escena3D_RAW)
  {



    // Local control variables 

    HTuple hv_Camara_conexion_Est = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ModelImage);
    HOperatorSet.GenEmptyObj(out ho_Xm);
    HOperatorSet.GenEmptyObj(out ho_Ym);
    HOperatorSet.GenEmptyObj(out ho_Zm);
    HOperatorSet.GenEmptyObj(out ho_ImgLeftCamera);
    hv_Escena3D_RAW = new HTuple();
    try
    {
      ho_ModelImage.Dispose();hv_Camara_conexion_Est.Dispose();
      Adq_Imagen(out ho_ModelImage, hv_NxLib_1, hv_Camera_1, out hv_Camara_conexion_Est);
      ho_Xm.Dispose();ho_Ym.Dispose();ho_Zm.Dispose();
      Adq_XYZ_Img(ho_ModelImage, out ho_Xm, out ho_Ym, out ho_Zm);
      ho_ImgLeftCamera.Dispose();
      HOperatorSet.SelectObj(ho_ModelImage, out ho_ImgLeftCamera, 1);
      hv_Escena3D_RAW.Dispose();
      HOperatorSet.XyzToObjectModel3d(ho_Xm, ho_Ym, ho_Zm, out hv_Escena3D_RAW);

      hv_Camara_conexion_Est.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Camara_conexion_Est.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Img_Camera_R1 (out HObject ho_ModelImage, out HObject ho_Xm, out HObject ho_Ym, 
      out HObject ho_Zm, out HObject ho_ImgLeftCamera, HTuple hv_NxLib_1, HTuple hv_Camera_1, 
      out HTuple hv_Escena3D_RAW)
  {



    // Local control variables 

    HTuple hv_Camara_conexion_Est = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ModelImage);
    HOperatorSet.GenEmptyObj(out ho_Xm);
    HOperatorSet.GenEmptyObj(out ho_Ym);
    HOperatorSet.GenEmptyObj(out ho_Zm);
    HOperatorSet.GenEmptyObj(out ho_ImgLeftCamera);
    hv_Escena3D_RAW = new HTuple();
    try
    {


      ho_ModelImage.Dispose();hv_Camara_conexion_Est.Dispose();
      Adq_Imagen(out ho_ModelImage, hv_NxLib_1, hv_Camera_1, out hv_Camara_conexion_Est);
      ho_Xm.Dispose();ho_Ym.Dispose();ho_Zm.Dispose();
      Adq_XYZ_Img(ho_ModelImage, out ho_Xm, out ho_Ym, out ho_Zm);
      ho_ImgLeftCamera.Dispose();
      HOperatorSet.SelectObj(ho_ModelImage, out ho_ImgLeftCamera, 1);
      hv_Escena3D_RAW.Dispose();
      HOperatorSet.XyzToObjectModel3d(ho_Xm, ho_Ym, ho_Zm, out hv_Escena3D_RAW);


      hv_Camara_conexion_Est.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Camara_conexion_Est.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_ImgWhitROI_Camera_1 (out HObject ho_ModelImage, out HObject ho_Xm, 
      out HObject ho_Ym, out HObject ho_Zm, out HObject ho_ImgLeftCamera, HTuple hv_NxLib, 
      HTuple hv_Camera_1, out HTuple hv_Escena3D_RAW)
  {



    // Local control variables 

    HTuple hv_Camara_conexion_Est = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ModelImage);
    HOperatorSet.GenEmptyObj(out ho_Xm);
    HOperatorSet.GenEmptyObj(out ho_Ym);
    HOperatorSet.GenEmptyObj(out ho_Zm);
    HOperatorSet.GenEmptyObj(out ho_ImgLeftCamera);
    hv_Escena3D_RAW = new HTuple();
    try
    {
      ho_ModelImage.Dispose();hv_Camara_conexion_Est.Dispose();
      Adq_Imagen(out ho_ModelImage, hv_NxLib, hv_Camera_1, out hv_Camara_conexion_Est);
      ho_Xm.Dispose();ho_Ym.Dispose();ho_Zm.Dispose();
      Adq_XYZ_Img(ho_ModelImage, out ho_Xm, out ho_Ym, out ho_Zm);
      ho_ImgLeftCamera.Dispose();
      HOperatorSet.SelectObj(ho_ModelImage, out ho_ImgLeftCamera, 1);
      hv_Escena3D_RAW.Dispose();
      HOperatorSet.XyzToObjectModel3d(ho_Xm, ho_Ym, ho_Zm, out hv_Escena3D_RAW);




      hv_Camara_conexion_Est.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Camara_conexion_Est.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Max_Altura (HObject ho_Zred, out HObject ho_ImageGauss, out HObject ho_LocalMaxima, 
      out HObject ho_ConnectedRegions, out HTuple hv_AlturaBase)
  {



    // Stack for temporary objects 
    HObject[] OTemp = new HObject[20];

    // Local control variables 

    HTuple hv_Area = new HTuple(), hv_Row = new HTuple();
    HTuple hv_Column = new HTuple(), hv_Grayval = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ImageGauss);
    HOperatorSet.GenEmptyObj(out ho_LocalMaxima);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
    hv_AlturaBase = new HTuple();
    try
    {
      ho_ImageGauss.Dispose();
      HOperatorSet.GaussFilter(ho_Zred, out ho_ImageGauss, 11);
      {
      HObject ExpTmpOutVar_0;
      HOperatorSet.GaussFilter(ho_ImageGauss, out ExpTmpOutVar_0, 11);
      ho_ImageGauss.Dispose();
      ho_ImageGauss = ExpTmpOutVar_0;
      }


      ho_LocalMaxima.Dispose();
      HOperatorSet.LocalMax(ho_ImageGauss, out ho_LocalMaxima);
      ho_ConnectedRegions.Dispose();
      HOperatorSet.Connection(ho_LocalMaxima, out ho_ConnectedRegions);
      hv_Area.Dispose();hv_Row.Dispose();hv_Column.Dispose();
      HOperatorSet.AreaCenter(ho_ConnectedRegions, out hv_Area, out hv_Row, out hv_Column);
      hv_Grayval.Dispose();
      HOperatorSet.GetGrayval(ho_ImageGauss, hv_Row, hv_Column, out hv_Grayval);

      hv_AlturaBase.Dispose();
      HOperatorSet.TupleMax(hv_Grayval, out hv_AlturaBase);

      hv_Area.Dispose();
      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_Grayval.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Area.Dispose();
      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_Grayval.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Max_Altura_Mangas (HObject ho_Zred, out HObject ho_ImageGauss, 
      out HObject ho_LocalMaxima, out HObject ho_ConnectedRegions, HTuple hv_g_AltutaVirtualCamEstereo, 
      out HTuple hv_AlturaBase)
  {




    // Stack for temporary objects 
    HObject[] OTemp = new HObject[20];

    // Local iconic variables 

    HObject ho_Region=null, ho_RegionErosion=null;

    // Local copy input parameter variables 
    HObject ho_Zred_COPY_INP_TMP;
    ho_Zred_COPY_INP_TMP = new HObject(ho_Zred);



    // Local control variables 

    HTuple hv_DiametroPx = new HTuple(), hv_Area = new HTuple();
    HTuple hv_Row = new HTuple(), hv_Column = new HTuple();
    HTuple hv_Grayval = new HTuple(), hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ImageGauss);
    HOperatorSet.GenEmptyObj(out ho_LocalMaxima);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
    HOperatorSet.GenEmptyObj(out ho_Region);
    HOperatorSet.GenEmptyObj(out ho_RegionErosion);
    hv_AlturaBase = new HTuple();
    try
    {

      try
      {

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        ho_Region.Dispose();
        HOperatorSet.Threshold(ho_Zred_COPY_INP_TMP, out ho_Region, hv_g_AltutaVirtualCamEstereo+10, 
            3000+hv_g_AltutaVirtualCamEstereo);
        }
        hv_DiametroPx.Dispose();
        HOperatorSet.RegionFeatures(ho_Region, "width", out hv_DiametroPx);

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        ho_RegionErosion.Dispose();
        HOperatorSet.ErosionCircle(ho_Region, out ho_RegionErosion, hv_DiametroPx*0.1);
        }
        {
        HObject ExpTmpOutVar_0;
        HOperatorSet.ReduceDomain(ho_Zred_COPY_INP_TMP, ho_RegionErosion, out ExpTmpOutVar_0
            );
        ho_Zred_COPY_INP_TMP.Dispose();
        ho_Zred_COPY_INP_TMP = ExpTmpOutVar_0;
        }

        ho_ImageGauss.Dispose();
        HOperatorSet.GaussFilter(ho_Zred_COPY_INP_TMP, out ho_ImageGauss, 11);
        {
        HObject ExpTmpOutVar_0;
        HOperatorSet.GaussFilter(ho_ImageGauss, out ExpTmpOutVar_0, 11);
        ho_ImageGauss.Dispose();
        ho_ImageGauss = ExpTmpOutVar_0;
        }


        ho_LocalMaxima.Dispose();
        HOperatorSet.LocalMax(ho_ImageGauss, out ho_LocalMaxima);
        ho_ConnectedRegions.Dispose();
        HOperatorSet.Connection(ho_LocalMaxima, out ho_ConnectedRegions);
        hv_Area.Dispose();hv_Row.Dispose();hv_Column.Dispose();
        HOperatorSet.AreaCenter(ho_ConnectedRegions, out hv_Area, out hv_Row, out hv_Column);
        hv_Grayval.Dispose();
        HOperatorSet.GetGrayval(ho_ImageGauss, hv_Row, hv_Column, out hv_Grayval);

        hv_AlturaBase.Dispose();
        HOperatorSet.TupleMax(hv_Grayval, out hv_AlturaBase);
        ho_Zred_COPY_INP_TMP.Dispose();
        ho_Region.Dispose();
        ho_RegionErosion.Dispose();

        hv_DiametroPx.Dispose();
        hv_Area.Dispose();
        hv_Row.Dispose();
        hv_Column.Dispose();
        hv_Grayval.Dispose();
        hv_Exception.Dispose();

        return;
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);


      }

    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_Zred_COPY_INP_TMP.Dispose();
      ho_Region.Dispose();
      ho_RegionErosion.Dispose();

      hv_DiametroPx.Dispose();
      hv_Area.Dispose();
      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_Grayval.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Max_Altura_Mangas_COPY_1 (HObject ho_Zred, out HObject ho_ImageGauss, 
      out HObject ho_LocalMaxima, out HObject ho_ConnectedRegions, out HTuple hv_AlturaBase)
  {



    // Stack for temporary objects 
    HObject[] OTemp = new HObject[20];

    // Local iconic variables 

    HObject ho_Region, ho_RegionErosion;

    // Local copy input parameter variables 
    HObject ho_Zred_COPY_INP_TMP;
    ho_Zred_COPY_INP_TMP = new HObject(ho_Zred);



    // Local control variables 

    HTuple hv_DiametroPx = new HTuple(), hv_Area = new HTuple();
    HTuple hv_Row = new HTuple(), hv_Column = new HTuple();
    HTuple hv_Grayval = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ImageGauss);
    HOperatorSet.GenEmptyObj(out ho_LocalMaxima);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
    HOperatorSet.GenEmptyObj(out ho_Region);
    HOperatorSet.GenEmptyObj(out ho_RegionErosion);
    hv_AlturaBase = new HTuple();
    try
    {
      ho_Region.Dispose();
      HOperatorSet.Threshold(ho_Zred_COPY_INP_TMP, out ho_Region, 10, 3000);
      hv_DiametroPx.Dispose();
      HOperatorSet.RegionFeatures(ho_Region, "width", out hv_DiametroPx);

      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      ho_RegionErosion.Dispose();
      HOperatorSet.ErosionCircle(ho_Region, out ho_RegionErosion, hv_DiametroPx*0.1);
      }
      {
      HObject ExpTmpOutVar_0;
      HOperatorSet.ReduceDomain(ho_Zred_COPY_INP_TMP, ho_RegionErosion, out ExpTmpOutVar_0
          );
      ho_Zred_COPY_INP_TMP.Dispose();
      ho_Zred_COPY_INP_TMP = ExpTmpOutVar_0;
      }

      ho_ImageGauss.Dispose();
      HOperatorSet.GaussFilter(ho_Zred_COPY_INP_TMP, out ho_ImageGauss, 11);
      {
      HObject ExpTmpOutVar_0;
      HOperatorSet.GaussFilter(ho_ImageGauss, out ExpTmpOutVar_0, 11);
      ho_ImageGauss.Dispose();
      ho_ImageGauss = ExpTmpOutVar_0;
      }


      ho_LocalMaxima.Dispose();
      HOperatorSet.LocalMax(ho_ImageGauss, out ho_LocalMaxima);
      ho_ConnectedRegions.Dispose();
      HOperatorSet.Connection(ho_LocalMaxima, out ho_ConnectedRegions);
      hv_Area.Dispose();hv_Row.Dispose();hv_Column.Dispose();
      HOperatorSet.AreaCenter(ho_ConnectedRegions, out hv_Area, out hv_Row, out hv_Column);
      hv_Grayval.Dispose();
      HOperatorSet.GetGrayval(ho_ImageGauss, hv_Row, hv_Column, out hv_Grayval);

      hv_AlturaBase.Dispose();
      HOperatorSet.TupleMax(hv_Grayval, out hv_AlturaBase);
      ho_Zred_COPY_INP_TMP.Dispose();
      ho_Region.Dispose();
      ho_RegionErosion.Dispose();

      hv_DiametroPx.Dispose();
      hv_Area.Dispose();
      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_Grayval.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_Zred_COPY_INP_TMP.Dispose();
      ho_Region.Dispose();
      ho_RegionErosion.Dispose();

      hv_DiametroPx.Dispose();
      hv_Area.Dispose();
      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_Grayval.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Min_Altura (HObject ho_Zred, out HObject ho_ImageGauss, out HObject ho_LocalMaxima, 
      out HObject ho_ConnectedRegions, out HTuple hv_AlturaBase)
  {



    // Stack for temporary objects 
    HObject[] OTemp = new HObject[20];

    // Local control variables 

    HTuple hv_Area = new HTuple(), hv_Row = new HTuple();
    HTuple hv_Column = new HTuple(), hv_Grayval = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ImageGauss);
    HOperatorSet.GenEmptyObj(out ho_LocalMaxima);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
    hv_AlturaBase = new HTuple();
    try
    {
      ho_ImageGauss.Dispose();
      HOperatorSet.GaussFilter(ho_Zred, out ho_ImageGauss, 11);
      {
      HObject ExpTmpOutVar_0;
      HOperatorSet.GaussFilter(ho_ImageGauss, out ExpTmpOutVar_0, 11);
      ho_ImageGauss.Dispose();
      ho_ImageGauss = ExpTmpOutVar_0;
      }


      ho_LocalMaxima.Dispose();
      HOperatorSet.LocalMax(ho_ImageGauss, out ho_LocalMaxima);
      ho_ConnectedRegions.Dispose();
      HOperatorSet.Connection(ho_LocalMaxima, out ho_ConnectedRegions);
      hv_Area.Dispose();hv_Row.Dispose();hv_Column.Dispose();
      HOperatorSet.AreaCenter(ho_ConnectedRegions, out hv_Area, out hv_Row, out hv_Column);
      hv_Grayval.Dispose();
      HOperatorSet.GetGrayval(ho_ImageGauss, hv_Row, hv_Column, out hv_Grayval);

      hv_AlturaBase.Dispose();
      HOperatorSet.TupleMax(hv_Grayval, out hv_AlturaBase);

      hv_Area.Dispose();
      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_Grayval.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Area.Dispose();
      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_Grayval.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_NPallet (HTuple hv__EV1_O_CmdDatos, out HTuple hv_N_Pallet_to_Scan)
  {



    // Local iconic variables 
    // Initialize local and output iconic variables 
    hv_N_Pallet_to_Scan = new HTuple();
    switch (hv__EV1_O_CmdDatos.I)
    {

    case 300:
      hv_N_Pallet_to_Scan.Dispose();
      hv_N_Pallet_to_Scan = 1;
      break;

    case 400:
      hv_N_Pallet_to_Scan.Dispose();
      hv_N_Pallet_to_Scan = 2;
      break;
    case 500:
      hv_N_Pallet_to_Scan.Dispose();
      hv_N_Pallet_to_Scan = 3;
      break;

    case 600:
      hv_N_Pallet_to_Scan.Dispose();
      hv_N_Pallet_to_Scan = 4;
      break;

    case 700:
      hv_N_Pallet_to_Scan.Dispose();
      hv_N_Pallet_to_Scan = 5;
      break;
    case 800:
      hv_N_Pallet_to_Scan.Dispose();
      hv_N_Pallet_to_Scan = 6;
      break;



    }


    return;
  }

  public void Get_ObjectModel3D_Util (HObject ho_Z, HObject ho_X, HObject ho_Y, HObject ho_ImgLeftCamera_Esq, 
      HTuple hv_Rango_posible_borde_pallet, HTuple hv_Rango_Seg, out HTuple hv_ObjectModel3D)
  {




    // Local iconic variables 

    HObject ho_Esquina, ho_ConnectedRegions, ho_SelectedRegions;
    HObject ho_ImageReduced, ho_Zred;

    // Local control variables 

    HTuple hv_Parametros_Visualizacion = new HTuple();
    HTuple hv_Valores_Visualizacion = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Esquina);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
    HOperatorSet.GenEmptyObj(out ho_SelectedRegions);
    HOperatorSet.GenEmptyObj(out ho_ImageReduced);
    HOperatorSet.GenEmptyObj(out ho_Zred);
    hv_ObjectModel3D = new HTuple();
    try
    {
      hv_Parametros_Visualizacion.Dispose();
      hv_Parametros_Visualizacion = new HTuple();
      hv_Parametros_Visualizacion[0] = "colored";
      hv_Parametros_Visualizacion[1] = "disp_pose";
      hv_Parametros_Visualizacion[2] = "point_size";
      hv_Valores_Visualizacion.Dispose();
      hv_Valores_Visualizacion = new HTuple();
      hv_Valores_Visualizacion[0] = 12;
      hv_Valores_Visualizacion[1] = "true";
      hv_Valores_Visualizacion[2] = 1;




      ho_Esquina.Dispose();
      HOperatorSet.Threshold(ho_ImgLeftCamera_Esq, out ho_Esquina, 180, 255);

      ho_ConnectedRegions.Dispose();
      HOperatorSet.Connection(ho_Esquina, out ho_ConnectedRegions);
      ho_SelectedRegions.Dispose();
      HOperatorSet.SelectShapeStd(ho_ConnectedRegions, out ho_SelectedRegions, "max_area", 
          90);


      ho_ImageReduced.Dispose();
      HOperatorSet.ReduceDomain(ho_Z, ho_Esquina, out ho_ImageReduced);


      ho_Zred.Dispose();
      HOperatorSet.ReduceDomain(ho_Z, ho_SelectedRegions, out ho_Zred);

      //# ################################################
      //*Funcion para  hacer la sfm de la esquina
      //MakeSFM_Palletr (Esquina, Z, X, Y, ConnectedRegions, SelectedRegions, ImageReduced, MultiChannelImage, Parametros_Visualizacion, Valores_Visualizacion, Esquina3D, Pose, Esquina3D_Trans, Pose1, PoseOut1, Sampling, SurfaceModelID, ObjectModel3DNormals, Esquina_Tri, Information)
      //# ################################################


      hv_ObjectModel3D.Dispose();
      HOperatorSet.XyzToObjectModel3d(ho_X, ho_Y, ho_ImageReduced, out hv_ObjectModel3D);
















      ho_Esquina.Dispose();
      ho_ConnectedRegions.Dispose();
      ho_SelectedRegions.Dispose();
      ho_ImageReduced.Dispose();
      ho_Zred.Dispose();

      hv_Parametros_Visualizacion.Dispose();
      hv_Valores_Visualizacion.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_Esquina.Dispose();
      ho_ConnectedRegions.Dispose();
      ho_SelectedRegions.Dispose();
      ho_ImageReduced.Dispose();
      ho_Zred.Dispose();

      hv_Parametros_Visualizacion.Dispose();
      hv_Valores_Visualizacion.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Objeto_0_and_1 (out HObject ho_Objeto_0, out HObject ho_Objeto_1, 
      HTuple hv_NxLib_1, HTuple hv_Camera_1, HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Vector_Estado_Fx, 
      HTuple hv_SerialHandle, HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Pose_Robot, 
      HTuple hv_MinimumDisparity_Cam1, HTuple hv_NumberOfDisparities_Cam1, HTuple hv_Exposure, 
      out HTuple hv_Pose_Robot_New)
  {



    // Local iconic variables 

    HObject ho_ModelImage, ho_X_Esq, ho_Y_Esq;
    HObject ho_Z_Esq, ho_ImgLeftCamera_Esq, ho_X=null, ho_Y=null;
    HObject ho_Z=null, ho_ImgLeftCamera=null;

    // Local control variables 

    HTuple hv_Projector = new HTuple(), hv_FrontLigth = new HTuple();
    HTuple hv_AutoExposure = new HTuple(), hv_AutoGain = new HTuple();
    HTuple hv_Gain = new HTuple(), hv_FlexView = new HTuple();
    HTuple hv_TempCam = new HTuple(), hv_Escena3D_RAW_Esq = new HTuple();
    HTuple hv_ToolInBasePose = new HTuple(), hv_Escena3D_RAW = new HTuple();
    HTuple hv_Exception = new HTuple(), hv_MnjERROR = new HTuple();
    HTuple   hv_Exposure_COPY_INP_TMP = new HTuple(hv_Exposure);

    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Objeto_0);
    HOperatorSet.GenEmptyObj(out ho_Objeto_1);
    HOperatorSet.GenEmptyObj(out ho_ModelImage);
    HOperatorSet.GenEmptyObj(out ho_X_Esq);
    HOperatorSet.GenEmptyObj(out ho_Y_Esq);
    HOperatorSet.GenEmptyObj(out ho_Z_Esq);
    HOperatorSet.GenEmptyObj(out ho_ImgLeftCamera_Esq);
    HOperatorSet.GenEmptyObj(out ho_X);
    HOperatorSet.GenEmptyObj(out ho_Y);
    HOperatorSet.GenEmptyObj(out ho_Z);
    HOperatorSet.GenEmptyObj(out ho_ImgLeftCamera);
    hv_Pose_Robot_New = new HTuple();
    try
    {
      //# ########################################################################
      //Configuracion de Parametros

      hv_Projector.Dispose();
      hv_Projector = "false";
      hv_FrontLigth.Dispose();
      hv_FrontLigth = "true";
      hv_AutoExposure.Dispose();
      hv_AutoExposure = "false";
      hv_AutoGain.Dispose();
      hv_AutoGain = "false";
      hv_Exposure_COPY_INP_TMP.Dispose();
      hv_Exposure_COPY_INP_TMP = 5;
      hv_Gain.Dispose();
      hv_Gain = 8;
      hv_Gain.Dispose();
      hv_Gain = 10;
      hv_FlexView.Dispose();
      hv_FlexView = 1;
      hv_TempCam.Dispose();
      Config_Parametros_Cam_R1(hv_NxLib_1, hv_Camera_1, hv_NumberOfDisparities_Cam1, 
          hv_MinimumDisparity_Cam1, hv_Projector, hv_FrontLigth, hv_AutoExposure, 
          hv_AutoGain, hv_Gain, hv_Exposure_COPY_INP_TMP, hv_FlexView, out hv_TempCam);
      ho_ModelImage.Dispose();ho_X_Esq.Dispose();ho_Y_Esq.Dispose();ho_Z_Esq.Dispose();ho_ImgLeftCamera_Esq.Dispose();hv_Escena3D_RAW_Esq.Dispose();
      Get_Img_Camera_R1(out ho_ModelImage, out ho_X_Esq, out ho_Y_Esq, out ho_Z_Esq, 
          out ho_ImgLeftCamera_Esq, hv_NxLib_1, hv_Camera_1, out hv_Escena3D_RAW_Esq);






      ho_Objeto_0.Dispose();
      HOperatorSet.Compose4(ho_X_Esq, ho_Y_Esq, ho_Z_Esq, ho_ImgLeftCamera_Esq, out ho_Objeto_0
          );
      //# ###########################################################################
      hv_ToolInBasePose.Dispose();
      Get_Pose_Tool(hv_SerialHandle, out hv_ToolInBasePose);
      hv_Pose_Robot_New.Dispose();
      hv_Pose_Robot_New = new HTuple(hv_ToolInBasePose);
      //# ########################################################################
      //Configuracion de Parametros

      hv_Projector.Dispose();
      hv_Projector = "true";
      hv_FrontLigth.Dispose();
      hv_FrontLigth = "true";
      hv_AutoExposure.Dispose();
      hv_AutoExposure = "true";
      hv_AutoGain.Dispose();
      hv_AutoGain = "true";
      //Valor Chile*
      hv_Exposure_COPY_INP_TMP.Dispose();
      hv_Exposure_COPY_INP_TMP = 5;
      //Valor Usa teach*
      hv_Exposure_COPY_INP_TMP.Dispose();
      hv_Exposure_COPY_INP_TMP = 2;
      hv_Gain.Dispose();
      hv_Gain = 1;
      hv_FlexView.Dispose();
      hv_FlexView = 4;
      try
      {

        hv_TempCam.Dispose();
        Config_Parametros_Cam_R1(hv_NxLib_1, hv_Camera_1, hv_NumberOfDisparities_Cam1, 
            hv_MinimumDisparity_Cam1, hv_Projector, hv_FrontLigth, hv_AutoExposure, 
            hv_AutoGain, hv_Gain, hv_Exposure_COPY_INP_TMP, hv_FlexView, out hv_TempCam);
        ho_ModelImage.Dispose();ho_X.Dispose();ho_Y.Dispose();ho_Z.Dispose();ho_ImgLeftCamera.Dispose();hv_Escena3D_RAW.Dispose();
        Get_Img_Camera_R1(out ho_ModelImage, out ho_X, out ho_Y, out ho_Z, out ho_ImgLeftCamera, 
            hv_NxLib_1, hv_Camera_1, out hv_Escena3D_RAW);

      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_MnjERROR.Dispose();
        hv_MnjERROR = "ERROR DE CONEXION";
        HDevelopStop();
      }
      //set_framegrabber_param (NxLib_1, 'do_execute', 'EstimateDisparitySettings')
      //get_framegrabber_param (NxLib_1, '//Execute/Default/Result/193216/MinimumDisparity', MinimumDisparity)
      //get_framegrabber_param (NxLib_1, '//Execute/Default/Result/193216/NumberOfDisparities', NumberOfDisparities)



      ho_Objeto_1.Dispose();
      HOperatorSet.Compose3(ho_X, ho_Y, ho_Z, out ho_Objeto_1);


      //# ###########################################################################
      //Estado := 3
      //[3] -> Sacar otra foto
      //Resultado := 3
      //Procesando := 1
      //Send_Data_Proceso (SerialHandle, Resultado, Procesando)
      //# ###############################################################################

      ho_ModelImage.Dispose();
      ho_X_Esq.Dispose();
      ho_Y_Esq.Dispose();
      ho_Z_Esq.Dispose();
      ho_ImgLeftCamera_Esq.Dispose();
      ho_X.Dispose();
      ho_Y.Dispose();
      ho_Z.Dispose();
      ho_ImgLeftCamera.Dispose();

      hv_Exposure_COPY_INP_TMP.Dispose();
      hv_Projector.Dispose();
      hv_FrontLigth.Dispose();
      hv_AutoExposure.Dispose();
      hv_AutoGain.Dispose();
      hv_Gain.Dispose();
      hv_FlexView.Dispose();
      hv_TempCam.Dispose();
      hv_Escena3D_RAW_Esq.Dispose();
      hv_ToolInBasePose.Dispose();
      hv_Escena3D_RAW.Dispose();
      hv_Exception.Dispose();
      hv_MnjERROR.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_ModelImage.Dispose();
      ho_X_Esq.Dispose();
      ho_Y_Esq.Dispose();
      ho_Z_Esq.Dispose();
      ho_ImgLeftCamera_Esq.Dispose();
      ho_X.Dispose();
      ho_Y.Dispose();
      ho_Z.Dispose();
      ho_ImgLeftCamera.Dispose();

      hv_Exposure_COPY_INP_TMP.Dispose();
      hv_Projector.Dispose();
      hv_FrontLigth.Dispose();
      hv_AutoExposure.Dispose();
      hv_AutoGain.Dispose();
      hv_Gain.Dispose();
      hv_FlexView.Dispose();
      hv_TempCam.Dispose();
      hv_Escena3D_RAW_Esq.Dispose();
      hv_ToolInBasePose.Dispose();
      hv_Escena3D_RAW.Dispose();
      hv_Exception.Dispose();
      hv_MnjERROR.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_objeto_0_and_1 (HObject ho_X, HObject ho_Y, HObject ho_Z, out HObject ho_Objeto_0, 
      out HObject ho_Objeto_1, HTuple hv_NxLib_1, HTuple hv_Camera_1, HTuple hv_NumberOfDisparities_Cam1, 
      HTuple hv_MinimumDisparity_Cam1, HTuple hv_Projector, HTuple hv_FrontLigth, 
      HTuple hv_AutoExposure, HTuple hv_AutoGain, HTuple hv_Gain, HTuple hv_Exposure, 
      HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Vector_Estado_Fx, HTuple hv_SerialHandle, 
      out HTuple hv_Escena3D_RAW_Esq, out HTuple hv_Escena3D_RAW)
  {




    // Local iconic variables 

    HObject ho_XOut=null, ho_YOut=null, ho_ZOut=null;
    HObject ho_ModelImage, ho_X_Esq, ho_Y_Esq, ho_Z_Esq, ho_ImgLeftCamera_Esq;
    HObject ho_ImgLeftCamera;

    // Local control variables 

    HTuple hv_AutoExposureOut = new HTuple(), hv_AutoGainOut = new HTuple();
    HTuple hv_ExposureOut = new HTuple(), hv_FrontLigthOut = new HTuple();
    HTuple hv_GainOut = new HTuple(), hv_MinimumDisparity_Cam1Out = new HTuple();
    HTuple hv_NumberOfDisparities_Cam1Out = new HTuple(), hv_ProjectorOut = new HTuple();
    HTuple hv_FlexView = new HTuple(), hv_TempCam = new HTuple();
    HTuple hv_Estado = new HTuple(), hv_Resultado = new HTuple();
    HTuple hv_Procesando = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Objeto_0);
    HOperatorSet.GenEmptyObj(out ho_Objeto_1);
    HOperatorSet.GenEmptyObj(out ho_XOut);
    HOperatorSet.GenEmptyObj(out ho_YOut);
    HOperatorSet.GenEmptyObj(out ho_ZOut);
    HOperatorSet.GenEmptyObj(out ho_ModelImage);
    HOperatorSet.GenEmptyObj(out ho_X_Esq);
    HOperatorSet.GenEmptyObj(out ho_Y_Esq);
    HOperatorSet.GenEmptyObj(out ho_Z_Esq);
    HOperatorSet.GenEmptyObj(out ho_ImgLeftCamera_Esq);
    HOperatorSet.GenEmptyObj(out ho_ImgLeftCamera);
    hv_Escena3D_RAW_Esq = new HTuple();
    hv_Escena3D_RAW = new HTuple();
    try
    {
      ho_XOut.Dispose();
      ho_XOut = new HObject(ho_X);
      ho_YOut.Dispose();
      ho_YOut = new HObject(ho_Y);
      ho_ZOut.Dispose();
      ho_ZOut = new HObject(ho_Z);
      hv_AutoExposureOut.Dispose();
      hv_AutoExposureOut = new HTuple(hv_AutoExposure);
      hv_AutoGainOut.Dispose();
      hv_AutoGainOut = new HTuple(hv_AutoGain);
      hv_ExposureOut.Dispose();
      hv_ExposureOut = new HTuple(hv_Exposure);
      hv_FrontLigthOut.Dispose();
      hv_FrontLigthOut = new HTuple(hv_FrontLigth);
      hv_GainOut.Dispose();
      hv_GainOut = new HTuple(hv_Gain);
      hv_MinimumDisparity_Cam1Out.Dispose();
      hv_MinimumDisparity_Cam1Out = new HTuple(hv_MinimumDisparity_Cam1);
      hv_NumberOfDisparities_Cam1Out.Dispose();
      hv_NumberOfDisparities_Cam1Out = new HTuple(hv_NumberOfDisparities_Cam1);
      hv_ProjectorOut.Dispose();
      hv_ProjectorOut = new HTuple(hv_Projector);
      hv_FlexView.Dispose();
      hv_FlexView = 8;
      hv_TempCam.Dispose();
      Config_Parametros_Cam_R1(hv_NxLib_1, hv_Camera_1, hv_NumberOfDisparities_Cam1Out, 
          hv_MinimumDisparity_Cam1Out, hv_ProjectorOut, hv_FrontLigthOut, hv_AutoExposureOut, 
          hv_AutoGainOut, hv_GainOut, hv_ExposureOut, hv_FlexView, out hv_TempCam);
      ho_ModelImage.Dispose();ho_X_Esq.Dispose();ho_Y_Esq.Dispose();ho_Z_Esq.Dispose();ho_ImgLeftCamera_Esq.Dispose();hv_Escena3D_RAW_Esq.Dispose();
      Get_Img_Camera_R1(out ho_ModelImage, out ho_X_Esq, out ho_Y_Esq, out ho_Z_Esq, 
          out ho_ImgLeftCamera_Esq, hv_NxLib_1, hv_Camera_1, out hv_Escena3D_RAW_Esq);

      ho_Objeto_0.Dispose();
      HOperatorSet.Compose3(ho_XOut, ho_YOut, ho_ZOut, out ho_Objeto_0);
      //# ###########################################################################

      //# ########################################################################
      //Configuracion de Parametros
      hv_MinimumDisparity_Cam1Out.Dispose();
      hv_MinimumDisparity_Cam1Out = -97;
      hv_NumberOfDisparities_Cam1Out.Dispose();
      hv_NumberOfDisparities_Cam1Out = 32;
      hv_ProjectorOut.Dispose();
      hv_ProjectorOut = "true";
      hv_FrontLigthOut.Dispose();
      hv_FrontLigthOut = "true";
      hv_AutoExposureOut.Dispose();
      hv_AutoExposureOut = "true";
      hv_AutoGainOut.Dispose();
      hv_AutoGainOut = "true";
      hv_ExposureOut.Dispose();
      hv_ExposureOut = 4.9;
      hv_GainOut.Dispose();
      hv_GainOut = 1;
      hv_TempCam.Dispose();
      Config_Parametros_Cam_R1(hv_NxLib_1, hv_Camera_1, hv_NumberOfDisparities_Cam1Out, 
          hv_MinimumDisparity_Cam1Out, hv_ProjectorOut, hv_FrontLigthOut, hv_AutoExposureOut, 
          hv_AutoGainOut, hv_GainOut, hv_ExposureOut, hv_FlexView, out hv_TempCam);
      ho_ModelImage.Dispose();ho_XOut.Dispose();ho_YOut.Dispose();ho_ZOut.Dispose();ho_ImgLeftCamera.Dispose();hv_Escena3D_RAW.Dispose();
      Get_Img_Camera_R1(out ho_ModelImage, out ho_XOut, out ho_YOut, out ho_ZOut, 
          out ho_ImgLeftCamera, hv_NxLib_1, hv_Camera_1, out hv_Escena3D_RAW);

      ho_Objeto_1.Dispose();
      HOperatorSet.Compose3(ho_XOut, ho_YOut, ho_ZOut, out ho_Objeto_1);
      //# ###########################################################################
      hv_Estado.Dispose();
      hv_Estado = 3;
      //[3] -> Sacar otr foto
      hv_Resultado.Dispose();
      hv_Resultado = 3;
      hv_Procesando.Dispose();
      hv_Procesando = 1;
      Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
      //# ###############################################################################


      ho_XOut.Dispose();
      ho_YOut.Dispose();
      ho_ZOut.Dispose();
      ho_ModelImage.Dispose();
      ho_X_Esq.Dispose();
      ho_Y_Esq.Dispose();
      ho_Z_Esq.Dispose();
      ho_ImgLeftCamera_Esq.Dispose();
      ho_ImgLeftCamera.Dispose();

      hv_AutoExposureOut.Dispose();
      hv_AutoGainOut.Dispose();
      hv_ExposureOut.Dispose();
      hv_FrontLigthOut.Dispose();
      hv_GainOut.Dispose();
      hv_MinimumDisparity_Cam1Out.Dispose();
      hv_NumberOfDisparities_Cam1Out.Dispose();
      hv_ProjectorOut.Dispose();
      hv_FlexView.Dispose();
      hv_TempCam.Dispose();
      hv_Estado.Dispose();
      hv_Resultado.Dispose();
      hv_Procesando.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_XOut.Dispose();
      ho_YOut.Dispose();
      ho_ZOut.Dispose();
      ho_ModelImage.Dispose();
      ho_X_Esq.Dispose();
      ho_Y_Esq.Dispose();
      ho_Z_Esq.Dispose();
      ho_ImgLeftCamera_Esq.Dispose();
      ho_ImgLeftCamera.Dispose();

      hv_AutoExposureOut.Dispose();
      hv_AutoGainOut.Dispose();
      hv_ExposureOut.Dispose();
      hv_FrontLigthOut.Dispose();
      hv_GainOut.Dispose();
      hv_MinimumDisparity_Cam1Out.Dispose();
      hv_NumberOfDisparities_Cam1Out.Dispose();
      hv_ProjectorOut.Dispose();
      hv_FlexView.Dispose();
      hv_TempCam.Dispose();
      hv_Estado.Dispose();
      hv_Resultado.Dispose();
      hv_Procesando.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Objeto_2 (out HObject ho_Objeto_2, HTuple hv_NxLib_1, HTuple hv_Camera_1, 
      HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Vector_Estado_Fx, HTuple hv_SerialHandle, 
      HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Pose_Robot, HTuple hv_MinimumDisparity_Cam1, 
      HTuple hv_NumberOfDisparities_Cam1, HTuple hv_Exposure, out HTuple hv_Pose_Robot_New)
  {



    // Local iconic variables 

    HObject ho_ModelImage, ho_XOut, ho_YOut, ho_ZOut;
    HObject ho_ImgLeftCamera;

    // Local control variables 

    HTuple hv_Projector = new HTuple(), hv_FrontLigth = new HTuple();
    HTuple hv_AutoExposure = new HTuple(), hv_AutoGain = new HTuple();
    HTuple hv_Gain = new HTuple(), hv_FlexView = new HTuple();
    HTuple hv_TempCam = new HTuple(), hv_Escena3D_RAW = new HTuple();
    HTuple hv_ToolInBasePose = new HTuple(), hv_Estado = new HTuple();
    HTuple hv_Resultado = new HTuple(), hv_Procesando = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Objeto_2);
    HOperatorSet.GenEmptyObj(out ho_ModelImage);
    HOperatorSet.GenEmptyObj(out ho_XOut);
    HOperatorSet.GenEmptyObj(out ho_YOut);
    HOperatorSet.GenEmptyObj(out ho_ZOut);
    HOperatorSet.GenEmptyObj(out ho_ImgLeftCamera);
    hv_Pose_Robot_New = new HTuple();
    try
    {
      //#########################################################################
      //Configuracion de Parametros

      hv_Projector.Dispose();
      hv_Projector = "true";
      hv_FrontLigth.Dispose();
      hv_FrontLigth = "true";
      hv_AutoExposure.Dispose();
      hv_AutoExposure = "true";
      hv_AutoGain.Dispose();
      hv_AutoGain = "true";
      hv_Gain.Dispose();
      hv_Gain = 1;
      hv_FlexView.Dispose();
      hv_FlexView = 8;
      hv_TempCam.Dispose();
      Config_Parametros_Cam_R1(hv_NxLib_1, hv_Camera_1, hv_NumberOfDisparities_Cam1, 
          hv_MinimumDisparity_Cam1, hv_Projector, hv_FrontLigth, hv_AutoExposure, 
          hv_AutoGain, hv_Gain, hv_Exposure, hv_FlexView, out hv_TempCam);
      ho_ModelImage.Dispose();ho_XOut.Dispose();ho_YOut.Dispose();ho_ZOut.Dispose();ho_ImgLeftCamera.Dispose();hv_Escena3D_RAW.Dispose();
      Get_Img_Camera_R1(out ho_ModelImage, out ho_XOut, out ho_YOut, out ho_ZOut, 
          out ho_ImgLeftCamera, hv_NxLib_1, hv_Camera_1, out hv_Escena3D_RAW);

      ho_Objeto_2.Dispose();
      HOperatorSet.Compose3(ho_XOut, ho_YOut, ho_ZOut, out ho_Objeto_2);

      //# ###########################################################################
      hv_ToolInBasePose.Dispose();
      Get_Pose_Tool(hv_SerialHandle, out hv_ToolInBasePose);
      hv_Pose_Robot_New.Dispose();
      hv_Pose_Robot_New = new HTuple(hv_ToolInBasePose);
      //# ########################################################################


      //# ###########################################################################
      hv_Estado.Dispose();
      hv_Estado = 3;
      //[3] -> Sacar otr foto
      hv_Resultado.Dispose();
      hv_Resultado = 3;
      hv_Procesando.Dispose();
      hv_Procesando = 1;
      Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
      //# ###############################################################################


      ho_ModelImage.Dispose();
      ho_XOut.Dispose();
      ho_YOut.Dispose();
      ho_ZOut.Dispose();
      ho_ImgLeftCamera.Dispose();

      hv_Projector.Dispose();
      hv_FrontLigth.Dispose();
      hv_AutoExposure.Dispose();
      hv_AutoGain.Dispose();
      hv_Gain.Dispose();
      hv_FlexView.Dispose();
      hv_TempCam.Dispose();
      hv_Escena3D_RAW.Dispose();
      hv_ToolInBasePose.Dispose();
      hv_Estado.Dispose();
      hv_Resultado.Dispose();
      hv_Procesando.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_ModelImage.Dispose();
      ho_XOut.Dispose();
      ho_YOut.Dispose();
      ho_ZOut.Dispose();
      ho_ImgLeftCamera.Dispose();

      hv_Projector.Dispose();
      hv_FrontLigth.Dispose();
      hv_AutoExposure.Dispose();
      hv_AutoGain.Dispose();
      hv_Gain.Dispose();
      hv_FlexView.Dispose();
      hv_TempCam.Dispose();
      hv_Escena3D_RAW.Dispose();
      hv_ToolInBasePose.Dispose();
      hv_Estado.Dispose();
      hv_Resultado.Dispose();
      hv_Procesando.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Objeto_3 (out HObject ho_Objeto_3, HTuple hv_NxLib_1, HTuple hv_Camera_1, 
      HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Vector_Estado_Fx, HTuple hv_SerialHandle, 
      HTuple hv_MinimumDisparity_Cam1, HTuple hv_NumberOfDisparities_Cam1, HTuple hv_Exposure, 
      out HTuple hv_Pose_Robot_New)
  {



    // Local iconic variables 

    HObject ho_ModelImage, ho_XOut, ho_YOut, ho_ZOut;
    HObject ho_ImgLeftCamera;

    // Local control variables 

    HTuple hv_Projector = new HTuple(), hv_FrontLigth = new HTuple();
    HTuple hv_AutoExposure = new HTuple(), hv_AutoGain = new HTuple();
    HTuple hv_Gain = new HTuple(), hv_FlexView = new HTuple();
    HTuple hv_TempCam = new HTuple(), hv_Escena3D_RAW = new HTuple();
    HTuple hv_ToolInBasePose = new HTuple(), hv_Estado = new HTuple();
    HTuple hv_Resultado = new HTuple(), hv_Procesando = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Objeto_3);
    HOperatorSet.GenEmptyObj(out ho_ModelImage);
    HOperatorSet.GenEmptyObj(out ho_XOut);
    HOperatorSet.GenEmptyObj(out ho_YOut);
    HOperatorSet.GenEmptyObj(out ho_ZOut);
    HOperatorSet.GenEmptyObj(out ho_ImgLeftCamera);
    hv_Pose_Robot_New = new HTuple();
    try
    {
      //#########################################################################
      //Configuracion de Parametros

      hv_Projector.Dispose();
      hv_Projector = "true";
      hv_FrontLigth.Dispose();
      hv_FrontLigth = "true";
      hv_AutoExposure.Dispose();
      hv_AutoExposure = "true";
      hv_AutoGain.Dispose();
      hv_AutoGain = "true";

      hv_Gain.Dispose();
      hv_Gain = 1;
      hv_FlexView.Dispose();
      hv_FlexView = 8;
      hv_TempCam.Dispose();
      Config_Parametros_Cam_R1(hv_NxLib_1, hv_Camera_1, hv_NumberOfDisparities_Cam1, 
          hv_MinimumDisparity_Cam1, hv_Projector, hv_FrontLigth, hv_AutoExposure, 
          hv_AutoGain, hv_Gain, hv_Exposure, hv_FlexView, out hv_TempCam);
      ho_ModelImage.Dispose();ho_XOut.Dispose();ho_YOut.Dispose();ho_ZOut.Dispose();ho_ImgLeftCamera.Dispose();hv_Escena3D_RAW.Dispose();
      Get_Img_Camera_R1(out ho_ModelImage, out ho_XOut, out ho_YOut, out ho_ZOut, 
          out ho_ImgLeftCamera, hv_NxLib_1, hv_Camera_1, out hv_Escena3D_RAW);

      ho_Objeto_3.Dispose();
      HOperatorSet.Compose3(ho_XOut, ho_YOut, ho_ZOut, out ho_Objeto_3);

      //# ###########################################################################
      hv_ToolInBasePose.Dispose();
      Get_Pose_Tool(hv_SerialHandle, out hv_ToolInBasePose);
      hv_Pose_Robot_New.Dispose();
      hv_Pose_Robot_New = new HTuple(hv_ToolInBasePose);
      //# ########################################################################



      //# ###########################################################################
      hv_Estado.Dispose();
      hv_Estado = 3;
      //[3] -> Sacar otr foto
      hv_Resultado.Dispose();
      hv_Resultado = 3;
      hv_Procesando.Dispose();
      hv_Procesando = 1;
      Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
      //# ###############################################################################

      ho_ModelImage.Dispose();
      ho_XOut.Dispose();
      ho_YOut.Dispose();
      ho_ZOut.Dispose();
      ho_ImgLeftCamera.Dispose();

      hv_Projector.Dispose();
      hv_FrontLigth.Dispose();
      hv_AutoExposure.Dispose();
      hv_AutoGain.Dispose();
      hv_Gain.Dispose();
      hv_FlexView.Dispose();
      hv_TempCam.Dispose();
      hv_Escena3D_RAW.Dispose();
      hv_ToolInBasePose.Dispose();
      hv_Estado.Dispose();
      hv_Resultado.Dispose();
      hv_Procesando.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_ModelImage.Dispose();
      ho_XOut.Dispose();
      ho_YOut.Dispose();
      ho_ZOut.Dispose();
      ho_ImgLeftCamera.Dispose();

      hv_Projector.Dispose();
      hv_FrontLigth.Dispose();
      hv_AutoExposure.Dispose();
      hv_AutoGain.Dispose();
      hv_Gain.Dispose();
      hv_FlexView.Dispose();
      hv_TempCam.Dispose();
      hv_Escena3D_RAW.Dispose();
      hv_ToolInBasePose.Dispose();
      hv_Estado.Dispose();
      hv_Resultado.Dispose();
      hv_Procesando.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_ObjInBasePose (HTuple hv_Pose_Refinada, HTuple hv_Pose_Robot, out HTuple hv_ObjInBasePose)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_ObjInCamPose = new HTuple(), hv_ToolInBasePose = new HTuple();
    HTuple hv_ToolInCamPose = new HTuple(), hv_CamInToolPose = new HTuple();
    HTuple hv_CamInBasePose = new HTuple();
    // Initialize local and output iconic variables 
    hv_ObjInBasePose = new HTuple();
    try
    {
      hv_ObjInCamPose.Dispose();
      hv_ObjInCamPose = new HTuple(hv_Pose_Refinada);

      hv_ToolInBasePose.Dispose();
      hv_ToolInBasePose = new HTuple(hv_Pose_Robot);
      //Get_ToolInCamPose (ToolInCamPose)

      hv_ToolInCamPose.Dispose();
      HOperatorSet.CreatePose(110.842, -272.211, 160.559, 1.15, 359.672, 1.076, "Rp+T", 
          "abg", "point", out hv_ToolInCamPose);


      hv_CamInToolPose.Dispose();
      HOperatorSet.PoseInvert(hv_ToolInCamPose, out hv_CamInToolPose);
      hv_CamInBasePose.Dispose();
      HOperatorSet.PoseCompose(hv_ToolInBasePose, hv_CamInToolPose, out hv_CamInBasePose);
      hv_ObjInBasePose.Dispose();
      HOperatorSet.PoseCompose(hv_CamInBasePose, hv_ObjInCamPose, out hv_ObjInBasePose);

      // dev_inspect_ctrl(...); only in hdevelop

      hv_ObjInCamPose.Dispose();
      hv_ToolInBasePose.Dispose();
      hv_ToolInCamPose.Dispose();
      hv_CamInToolPose.Dispose();
      hv_CamInBasePose.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_ObjInCamPose.Dispose();
      hv_ToolInBasePose.Dispose();
      hv_ToolInCamPose.Dispose();
      hv_CamInToolPose.Dispose();
      hv_CamInBasePose.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_ObjInBasePose_COPY_1 (HTuple hv_Pose_Refinada, HTuple hv_SerialHandle, 
      out HTuple hv_ObjInBasePose)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_ObjInCamPose = new HTuple(), hv_ToolInCamPose = new HTuple();
    HTuple hv_ToolInBasePose = new HTuple(), hv_CamInToolPose = new HTuple();
    HTuple hv_CamInBasePose = new HTuple();
    // Initialize local and output iconic variables 
    hv_ObjInBasePose = new HTuple();
    try
    {
      hv_ObjInCamPose.Dispose();
      hv_ObjInCamPose = new HTuple(hv_Pose_Refinada);
      //
      hv_ToolInCamPose.Dispose();
      HOperatorSet.ReadPose("C:/Users/Usuario/Dropbox (MIRS)/1.-Servidor Desarrollo Software/7.-Magotteaux/7.-HandEye/1.- Ensenso R1/ToolInCamPose_R1.dat", 
          out hv_ToolInCamPose);
      //
      //
      hv_ToolInBasePose.Dispose();
      Get_Robot_Pose(hv_SerialHandle, out hv_ToolInBasePose);
      //
      hv_CamInToolPose.Dispose();
      HOperatorSet.PoseInvert(hv_ToolInCamPose, out hv_CamInToolPose);
      hv_CamInBasePose.Dispose();
      HOperatorSet.PoseCompose(hv_ToolInBasePose, hv_CamInToolPose, out hv_CamInBasePose);
      hv_ObjInBasePose.Dispose();
      HOperatorSet.PoseCompose(hv_CamInBasePose, hv_ObjInCamPose, out hv_ObjInBasePose);

      hv_ObjInCamPose.Dispose();
      hv_ToolInCamPose.Dispose();
      hv_ToolInBasePose.Dispose();
      hv_CamInToolPose.Dispose();
      hv_CamInBasePose.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_ObjInCamPose.Dispose();
      hv_ToolInCamPose.Dispose();
      hv_ToolInBasePose.Dispose();
      hv_CamInToolPose.Dispose();
      hv_CamInBasePose.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_OpticaConection (HTuple hv_Conexion_Camara_0, HTuple hv_SerialHandle, 
      out HTuple hv_ReintentosConexionOptica, out HTuple hv_AcqHandle_Cam_0, out HTuple hv_Camera0_Parameters, 
      out HTuple hv_Camera0_Pose, out HTuple hv_Conexion_Camara_0Out, out HTuple hv_CalTabFile)
  {



    // Local iconic variables 
    // Initialize local and output iconic variables 
    hv_ReintentosConexionOptica = new HTuple();
    hv_AcqHandle_Cam_0 = new HTuple();
    hv_Camera0_Parameters = new HTuple();
    hv_Camera0_Pose = new HTuple();
    hv_Conexion_Camara_0Out = new HTuple();
    hv_CalTabFile = new HTuple();
    hv_Conexion_Camara_0Out.Dispose();
    hv_Conexion_Camara_0Out = new HTuple(hv_Conexion_Camara_0);
    hv_ReintentosConexionOptica.Dispose();
    hv_ReintentosConexionOptica = 1;
    while ((int)((new HTuple(hv_Conexion_Camara_0Out.TupleNot())).TupleAnd(new HTuple(hv_ReintentosConexionOptica.TupleLessEqual(
        3)))) != 0)
    {


      hv_AcqHandle_Cam_0.Dispose();hv_Camera0_Parameters.Dispose();hv_Camera0_Pose.Dispose();hv_Conexion_Camara_0Out.Dispose();hv_CalTabFile.Dispose();
      Set_Config_Cam(out hv_AcqHandle_Cam_0, out hv_Camera0_Parameters, out hv_Camera0_Pose, 
          out hv_Conexion_Camara_0Out, out hv_CalTabFile);

      Send_Data_Info("### Error Faltal #### Camara Optica R1 NO Conectada ", hv_SerialHandle);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      Send_Data_Info("### Error Faltal #### Reintento Numero ->  "+hv_ReintentosConexionOptica, 
          hv_SerialHandle);
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      {
      HTuple 
        ExpTmpLocalVar_ReintentosConexionOptica = hv_ReintentosConexionOptica+1;
      hv_ReintentosConexionOptica.Dispose();
      hv_ReintentosConexionOptica = ExpTmpLocalVar_ReintentosConexionOptica;
      }
      }

    }


    return;
  }

  public void Get_Pallet_BD (HTuple hv_Variable_BD, HTuple hv_SerialHandle, out HTuple hv_DataBD, 
      out HTuple hv_FXcheck)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Peticion = new HTuple(), hv_Data = new HTuple();
    HTuple hv_VarSerial = new HTuple(), hv_Conteo = new HTuple();
    HTuple hv_Nchar = new HTuple(), hv_Variable = new HTuple();
    HTuple hv_Substrings = new HTuple(), hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    hv_DataBD = new HTuple();
    hv_FXcheck = new HTuple();
    try
    {


      HOperatorSet.WaitSeconds(0.005);
      try
      {
        //
        hv_Peticion.Dispose();
        hv_Peticion = "BaseDatos";
        hv_Data.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Data = (hv_Peticion+";")+hv_Variable_BD;
        }
        //
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.WriteSerial(hv_SerialHandle, hv_Data.TupleOrds());
        }

        HOperatorSet.WaitSeconds(0.10);
        hv_VarSerial.Dispose();
        hv_VarSerial = 0;
        hv_Conteo.Dispose();
        hv_Conteo = 0;
        while ((int)((new HTuple(hv_VarSerial.TupleLess(1))).TupleAnd(new HTuple(hv_Conteo.TupleLess(
            50)))) != 0)
        {

          //Numero de caracteres a leer
          hv_Nchar.Dispose();
          HOperatorSet.ReadSerial(hv_SerialHandle, 500, out hv_Nchar);
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Nchar = hv_Nchar.TupleChrt()
              ;
          hv_Nchar.Dispose();
          hv_Nchar = ExpTmpLocalVar_Nchar;
          }
          }
          hv_Variable.Dispose();
          HOperatorSet.TupleNumber(hv_Nchar, out hv_Variable);
          hv_VarSerial.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_VarSerial = new HTuple(hv_Nchar.TupleLength()
              );
          }

          hv_Substrings.Dispose();
          HOperatorSet.TupleSplit(hv_Nchar, "#", out hv_Substrings);
          hv_DataBD.Dispose();
          HOperatorSet.TupleSplit(hv_Substrings, "||", out hv_DataBD);
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Conteo = hv_Conteo+1;
          hv_Conteo.Dispose();
          hv_Conteo = ExpTmpLocalVar_Conteo;
          }
          }
          hv_FXcheck.Dispose();
          hv_FXcheck = 1;
        }

        if ((int)(new HTuple(hv_Conteo.TupleGreaterEqual(10))) != 0)
        {

          hv_FXcheck.Dispose();
          hv_FXcheck = 0;
        }
        else
        {
          hv_FXcheck.Dispose();
          hv_FXcheck = 1;
        }

      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);

      }
      //
      //
      //
      //

      hv_Peticion.Dispose();
      hv_Data.Dispose();
      hv_VarSerial.Dispose();
      hv_Conteo.Dispose();
      hv_Nchar.Dispose();
      hv_Variable.Dispose();
      hv_Substrings.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Peticion.Dispose();
      hv_Data.Dispose();
      hv_VarSerial.Dispose();
      hv_Conteo.Dispose();
      hv_Nchar.Dispose();
      hv_Variable.Dispose();
      hv_Substrings.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Pallet_BD_COPY_1 (HTuple hv_Variable_BD, HTuple hv_SerialHandle, 
      out HTuple hv_DataBD)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Peticion = new HTuple(), hv_Data = new HTuple();
    HTuple hv_VarSerial = new HTuple(), hv_Nchar = new HTuple();
    HTuple hv_Variable = new HTuple(), hv_Substrings = new HTuple();
    HTuple hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    hv_DataBD = new HTuple();
    try
    {


      HOperatorSet.WaitSeconds(0.005);
      try
      {

        hv_Peticion.Dispose();
        hv_Peticion = "BaseDatos";
        hv_Data.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Data = (hv_Peticion+";")+hv_Variable_BD;
        }

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.WriteSerial(hv_SerialHandle, hv_Data.TupleOrds());
        }


        hv_VarSerial.Dispose();
        hv_VarSerial = 0;
        while ((int)(new HTuple(hv_VarSerial.TupleLess(1))) != 0)
        {

          //Numero de caracteres a leer
          hv_Nchar.Dispose();
          HOperatorSet.ReadSerial(hv_SerialHandle, 100, out hv_Nchar);
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Nchar = hv_Nchar.TupleChrt()
              ;
          hv_Nchar.Dispose();
          hv_Nchar = ExpTmpLocalVar_Nchar;
          }
          }
          hv_Variable.Dispose();
          HOperatorSet.TupleNumber(hv_Nchar, out hv_Variable);
          hv_VarSerial.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_VarSerial = new HTuple(hv_Nchar.TupleLength()
              );
          }

          hv_Substrings.Dispose();
          HOperatorSet.TupleSplit(hv_Nchar, "#", out hv_Substrings);
          hv_DataBD.Dispose();
          HOperatorSet.TupleSplit(hv_Substrings, "||", out hv_DataBD);

        }


      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
      }





      hv_Peticion.Dispose();
      hv_Data.Dispose();
      hv_VarSerial.Dispose();
      hv_Nchar.Dispose();
      hv_Variable.Dispose();
      hv_Substrings.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Peticion.Dispose();
      hv_Data.Dispose();
      hv_VarSerial.Dispose();
      hv_Nchar.Dispose();
      hv_Variable.Dispose();
      hv_Substrings.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Pallet_BD_COPY_2 (HTuple hv_Variable_BD, HTuple hv_SerialHandle, 
      out HTuple hv_DataBD, out HTuple hv_FXcheck)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Peticion = new HTuple(), hv_Data = new HTuple();
    HTuple hv_VarSerial = new HTuple(), hv_Conteo = new HTuple();
    HTuple hv_Nchar = new HTuple(), hv_Variable = new HTuple();
    HTuple hv_Substrings = new HTuple(), hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    hv_DataBD = new HTuple();
    hv_FXcheck = new HTuple();
    try
    {


      HOperatorSet.WaitSeconds(0.005);
      try
      {

        hv_Peticion.Dispose();
        hv_Peticion = "BaseDatos";
        hv_Data.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Data = (hv_Peticion+";")+hv_Variable_BD;
        }

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.WriteSerial(hv_SerialHandle, hv_Data.TupleOrds());
        }

        HOperatorSet.WaitSeconds(0.10);
        hv_VarSerial.Dispose();
        hv_VarSerial = 0;
        hv_Conteo.Dispose();
        hv_Conteo = 0;
        while ((int)((new HTuple(hv_VarSerial.TupleLess(1))).TupleAnd(new HTuple(hv_Conteo.TupleLess(
            50)))) != 0)
        {

          //Numero de caracteres a leer
          hv_Nchar.Dispose();
          HOperatorSet.ReadSerial(hv_SerialHandle, 500, out hv_Nchar);
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Nchar = hv_Nchar.TupleChrt()
              ;
          hv_Nchar.Dispose();
          hv_Nchar = ExpTmpLocalVar_Nchar;
          }
          }
          hv_Variable.Dispose();
          HOperatorSet.TupleNumber(hv_Nchar, out hv_Variable);
          hv_VarSerial.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_VarSerial = new HTuple(hv_Nchar.TupleLength()
              );
          }

          hv_Substrings.Dispose();
          HOperatorSet.TupleSplit(hv_Nchar, "#", out hv_Substrings);
          hv_DataBD.Dispose();
          HOperatorSet.TupleSplit(hv_Substrings, "||", out hv_DataBD);
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Conteo = hv_Conteo+1;
          hv_Conteo.Dispose();
          hv_Conteo = ExpTmpLocalVar_Conteo;
          }
          }
          hv_FXcheck.Dispose();
          hv_FXcheck = 1;
        }

        if ((int)(new HTuple(hv_Conteo.TupleGreaterEqual(10))) != 0)
        {

          hv_FXcheck.Dispose();
          hv_FXcheck = 0;
        }
        else
        {
          hv_FXcheck.Dispose();
          hv_FXcheck = 1;
        }

      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);

      }





      hv_Peticion.Dispose();
      hv_Data.Dispose();
      hv_VarSerial.Dispose();
      hv_Conteo.Dispose();
      hv_Nchar.Dispose();
      hv_Variable.Dispose();
      hv_Substrings.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Peticion.Dispose();
      hv_Data.Dispose();
      hv_VarSerial.Dispose();
      hv_Conteo.Dispose();
      hv_Nchar.Dispose();
      hv_Variable.Dispose();
      hv_Substrings.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Pallet_Bd_Fast (HTuple hv_Variable_BD, HTuple hv_SerialHandle, 
      out HTuple hv_DataBD, out HTuple hv_FXcheck)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Peticion = new HTuple(), hv_Data = new HTuple();
    HTuple hv_VarSerial = new HTuple(), hv_Conteo = new HTuple();
    HTuple hv_Nchar = new HTuple(), hv_Variable = new HTuple();
    HTuple hv_Substrings = new HTuple(), hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    hv_DataBD = new HTuple();
    hv_FXcheck = new HTuple();
    try
    {


      HOperatorSet.WaitSeconds(0.005);
      try
      {
        //
        hv_Peticion.Dispose();
        hv_Peticion = "BaseDatos";
        hv_Data.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Data = (hv_Peticion+";")+hv_Variable_BD;
        }
        //
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.WriteSerial(hv_SerialHandle, hv_Data.TupleOrds());
        }

        HOperatorSet.WaitSeconds(0.10);
        hv_VarSerial.Dispose();
        hv_VarSerial = 0;
        hv_Conteo.Dispose();
        hv_Conteo = 0;
        while ((int)((new HTuple(hv_VarSerial.TupleLess(1))).TupleAnd(new HTuple(hv_Conteo.TupleLess(
            50)))) != 0)
        {

          //Numero de caracteres a leer
          hv_Nchar.Dispose();
          HOperatorSet.ReadSerial(hv_SerialHandle, 150, out hv_Nchar);
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Nchar = hv_Nchar.TupleChrt()
              ;
          hv_Nchar.Dispose();
          hv_Nchar = ExpTmpLocalVar_Nchar;
          }
          }
          hv_Variable.Dispose();
          HOperatorSet.TupleNumber(hv_Nchar, out hv_Variable);
          hv_VarSerial.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_VarSerial = new HTuple(hv_Nchar.TupleLength()
              );
          }

          hv_Substrings.Dispose();
          HOperatorSet.TupleSplit(hv_Nchar, "#", out hv_Substrings);
          hv_DataBD.Dispose();
          HOperatorSet.TupleSplit(hv_Substrings, "||", out hv_DataBD);
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Conteo = hv_Conteo+1;
          hv_Conteo.Dispose();
          hv_Conteo = ExpTmpLocalVar_Conteo;
          }
          }
          hv_FXcheck.Dispose();
          hv_FXcheck = 1;
        }

        if ((int)(new HTuple(hv_Conteo.TupleGreaterEqual(10))) != 0)
        {

          hv_FXcheck.Dispose();
          hv_FXcheck = 0;
        }
        else
        {
          hv_FXcheck.Dispose();
          hv_FXcheck = 1;
        }

      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);

      }
      //
      //
      //
      //

      hv_Peticion.Dispose();
      hv_Data.Dispose();
      hv_VarSerial.Dispose();
      hv_Conteo.Dispose();
      hv_Nchar.Dispose();
      hv_Variable.Dispose();
      hv_Substrings.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Peticion.Dispose();
      hv_Data.Dispose();
      hv_VarSerial.Dispose();
      hv_Conteo.Dispose();
      hv_Nchar.Dispose();
      hv_Variable.Dispose();
      hv_Substrings.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Pallet_Bd_Fast_COPY_1 (HTuple hv_Variable_BD, HTuple hv_SerialHandle, 
      out HTuple hv_DataBD, out HTuple hv_FXcheck)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Peticion = new HTuple(), hv_Data = new HTuple();
    HTuple hv_VarSerial = new HTuple(), hv_Conteo = new HTuple();
    HTuple hv_Nchar = new HTuple(), hv_Variable = new HTuple();
    HTuple hv_Substrings = new HTuple(), hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    hv_DataBD = new HTuple();
    hv_FXcheck = new HTuple();
    try
    {


      HOperatorSet.WaitSeconds(0.005);
      try
      {

        hv_Peticion.Dispose();
        hv_Peticion = "BaseDatos";
        hv_Data.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Data = (hv_Peticion+";")+hv_Variable_BD;
        }

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.WriteSerial(hv_SerialHandle, hv_Data.TupleOrds());
        }

        HOperatorSet.WaitSeconds(0.10);
        hv_VarSerial.Dispose();
        hv_VarSerial = 0;
        hv_Conteo.Dispose();
        hv_Conteo = 0;
        while ((int)((new HTuple(hv_VarSerial.TupleLess(1))).TupleAnd(new HTuple(hv_Conteo.TupleLess(
            50)))) != 0)
        {

          //Numero de caracteres a leer
          hv_Nchar.Dispose();
          HOperatorSet.ReadSerial(hv_SerialHandle, 150, out hv_Nchar);
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Nchar = hv_Nchar.TupleChrt()
              ;
          hv_Nchar.Dispose();
          hv_Nchar = ExpTmpLocalVar_Nchar;
          }
          }
          hv_Variable.Dispose();
          HOperatorSet.TupleNumber(hv_Nchar, out hv_Variable);
          hv_VarSerial.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_VarSerial = new HTuple(hv_Nchar.TupleLength()
              );
          }

          hv_Substrings.Dispose();
          HOperatorSet.TupleSplit(hv_Nchar, "#", out hv_Substrings);
          hv_DataBD.Dispose();
          HOperatorSet.TupleSplit(hv_Substrings, "||", out hv_DataBD);
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Conteo = hv_Conteo+1;
          hv_Conteo.Dispose();
          hv_Conteo = ExpTmpLocalVar_Conteo;
          }
          }
          hv_FXcheck.Dispose();
          hv_FXcheck = 1;
        }

        if ((int)(new HTuple(hv_Conteo.TupleGreaterEqual(10))) != 0)
        {

          hv_FXcheck.Dispose();
          hv_FXcheck = 0;
        }
        else
        {
          hv_FXcheck.Dispose();
          hv_FXcheck = 1;
        }

      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);

      }





      hv_Peticion.Dispose();
      hv_Data.Dispose();
      hv_VarSerial.Dispose();
      hv_Conteo.Dispose();
      hv_Nchar.Dispose();
      hv_Variable.Dispose();
      hv_Substrings.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Peticion.Dispose();
      hv_Data.Dispose();
      hv_VarSerial.Dispose();
      hv_Conteo.Dispose();
      hv_Nchar.Dispose();
      hv_Variable.Dispose();
      hv_Substrings.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Pallet_Model (out HObject ho_Objeto_0, out HObject ho_Objeto_1, 
      out HObject ho_Objeto_2, out HObject ho_Objeto_3, out HObject ho_Zobj1, out HObject ho_Xobj1, 
      out HObject ho_Yobj1, out HObject ho_Img_Left_Esquina, HTuple hv_NxLib_1, HTuple hv_Camera_1, 
      HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Vector_Estado_Fx, HTuple hv_SerialHandle, 
      HTuple hv_N_Pallet_to_Scan, HTuple hv_IsA_Sleeve, out HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Pose_Robot, 
      out HTuple hv_Escena3D_RAW, out HTuple hv_Base_esquina, out HTuple hv_Estado_Fx)
  {



    // Stack for temporary objects 
    HObject[] OTemp = new HObject[20];

    // Local iconic variables 

    HObject ho_X=null, ho_Y=null, ho_Z=null, ho_ModelImage=null;
    HObject ho_ImgLeftCamera=null, ho_Esquina_Left=null, ho_Esquina_Right=null;
    HObject ho_ROI_2_0=null, ho_ROI_2_3=null;

    // Local control variables 

    HTuple hv_Estado = new HTuple(), hv_Mensaje = new HTuple();
    HTuple hv_WindowHandle = new HTuple(), hv_Contador_foto = new HTuple();
    HTuple hv_Escuhar_Robot = new HTuple(), hv_NumberOfDisparities_Cam1 = new HTuple();
    HTuple hv_MinimumDisparity_Cam1 = new HTuple(), hv_Exposure = new HTuple();
    HTuple hv_Pose_Robot_New = new HTuple(), hv_Projector = new HTuple();
    HTuple hv_FrontLigth = new HTuple(), hv_AutoExposure = new HTuple();
    HTuple hv_AutoGain = new HTuple(), hv_Gain = new HTuple();
    HTuple hv_FlexView = new HTuple(), hv_TempCam = new HTuple();
    HTuple hv_MinimumDisparity = new HTuple(), hv_NumberOfDisparities = new HTuple();
    HTuple hv_MSecond = new HTuple(), hv_Second = new HTuple();
    HTuple hv_Minute = new HTuple(), hv_Hour = new HTuple();
    HTuple hv_Day = new HTuple(), hv_YDay = new HTuple(), hv_Month = new HTuple();
    HTuple hv_Year = new HTuple(), hv_Fecha = new HTuple();
    HTuple hv_Estado_Funcion = new HTuple(), hv_Exception = new HTuple();
    HTuple hv_EstadoFx = new HTuple(), hv_Resultado = new HTuple();
    HTuple hv_Procesando = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Objeto_0);
    HOperatorSet.GenEmptyObj(out ho_Objeto_1);
    HOperatorSet.GenEmptyObj(out ho_Objeto_2);
    HOperatorSet.GenEmptyObj(out ho_Objeto_3);
    HOperatorSet.GenEmptyObj(out ho_Zobj1);
    HOperatorSet.GenEmptyObj(out ho_Xobj1);
    HOperatorSet.GenEmptyObj(out ho_Yobj1);
    HOperatorSet.GenEmptyObj(out ho_Img_Left_Esquina);
    HOperatorSet.GenEmptyObj(out ho_X);
    HOperatorSet.GenEmptyObj(out ho_Y);
    HOperatorSet.GenEmptyObj(out ho_Z);
    HOperatorSet.GenEmptyObj(out ho_ModelImage);
    HOperatorSet.GenEmptyObj(out ho_ImgLeftCamera);
    HOperatorSet.GenEmptyObj(out ho_Esquina_Left);
    HOperatorSet.GenEmptyObj(out ho_Esquina_Right);
    HOperatorSet.GenEmptyObj(out ho_ROI_2_0);
    HOperatorSet.GenEmptyObj(out ho_ROI_2_3);
    hvec_Pose_Robot = new HTupleVector(2);
    hv_Escena3D_RAW = new HTuple();
    hv_Base_esquina = new HTuple();
    hv_Estado_Fx = new HTuple();
    try
    {

      try
      {



        //# ###################################################
        hv_Estado.Dispose();
        hv_Estado = 20;
        Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
        hv_Mensaje.Dispose();
        hv_Mensaje = "Inicio de captura Bloque 0";
        Send_Data_Info(hv_Mensaje, hv_SerialHandle);
        //# ##################################################
        //dev_get_window(...);
        hvec_Pose_Robot.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hvec_Pose_Robot = dh.Take((
            dh.Add(new HTupleVector(2)).Insert(0,(dh.Add(new HTupleVector(1)).Insert(0,dh.Add(new HTupleVector(new HTuple())))))));
        }
        hvec_Pose_Robot[0][0] = new HTupleVector(new HTuple("CORE"));
        hv_Contador_foto.Dispose();
        hv_Contador_foto = 0;

        hv_Escuhar_Robot.Dispose();
        hv_Escuhar_Robot = 1;
        hv_Contador_foto.Dispose();
        hv_Contador_foto = 0;


        //# ####################################################

        //*** -> VAlores de Chile <- ****
        hv_NumberOfDisparities_Cam1.Dispose();
        hv_NumberOfDisparities_Cam1 = 64;
        hv_MinimumDisparity_Cam1.Dispose();
        hv_MinimumDisparity_Cam1 = -89;
        //*******************************

        //*** -> VAlores de USA TeachMode <- ****
        hv_NumberOfDisparities_Cam1.Dispose();
        hv_NumberOfDisparities_Cam1 = 64;
        hv_MinimumDisparity_Cam1.Dispose();
        hv_MinimumDisparity_Cam1 = -63;
        //*******************************
        hv_Exposure.Dispose();
        hv_Exposure = 9;
        //# ####################################################
        //Si es un Core
        if ((int)(hv_IsA_Sleeve.TupleNot()) != 0)
        {
          Send_Data_Info("-------------> Es un CORE <-------------", hv_SerialHandle);

          ho_Objeto_0.Dispose();ho_Objeto_1.Dispose();hv_Pose_Robot_New.Dispose();
          Get_Objeto_0_and_1(out ho_Objeto_0, out ho_Objeto_1, hv_NxLib_1, hv_Camera_1, 
              hvec_Vector_Estado_Fx, hv_SerialHandle, hvec_Pose_Robot, hv_MinimumDisparity_Cam1, 
              hv_NumberOfDisparities_Cam1, hv_Exposure, out hv_Pose_Robot_New);

          //read_image (Objeto_0, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 0/Obj0_Pallet_1_2019_10_11_10_8_5_769.hobj')
          //read_image (Objeto_1, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 0/Obj1_Pallet_1_2019_10_11_10_8_5_769.hobj')



          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hvec_Pose_Robot[0][0] = dh.Add(new HTupleVector(hv_Pose_Robot_New));
          }
          ho_X.Dispose();ho_Y.Dispose();ho_Z.Dispose();ho_Img_Left_Esquina.Dispose();
          HOperatorSet.Decompose4(ho_Objeto_0, out ho_X, out ho_Y, out ho_Z, out ho_Img_Left_Esquina
              );
          ho_Xobj1.Dispose();ho_Yobj1.Dispose();ho_Zobj1.Dispose();
          HOperatorSet.Decompose3(ho_Objeto_1, out ho_Xobj1, out ho_Yobj1, out ho_Zobj1
              );

          HOperatorSet.DispObj(ho_Img_Left_Esquina, hv_ExpDefaultWinHandle);
          dev_resize_window_fit_image(ho_Img_Left_Esquina, 0, 0, -1, -1);

        }





        //* Si es una manga corrijo de manera dinamica
        if ((int)(hv_IsA_Sleeve) != 0)
        {
          Send_Data_Info("-------------> Es una Manga <-------------", hv_SerialHandle);



          hv_MinimumDisparity_Cam1.Dispose();
          hv_MinimumDisparity_Cam1 = -64;
          hv_NumberOfDisparities_Cam1.Dispose();
          hv_NumberOfDisparities_Cam1 = 128;
          hv_Projector.Dispose();
          hv_Projector = "false";
          hv_FrontLigth.Dispose();
          hv_FrontLigth = "true";
          hv_AutoExposure.Dispose();
          hv_AutoExposure = "true";
          hv_AutoGain.Dispose();
          hv_AutoGain = "true";
          hv_Exposure.Dispose();
          hv_Exposure = 5;
          hv_Gain.Dispose();
          hv_Gain = 1;
          hv_FlexView.Dispose();
          hv_FlexView = 3;
          Send_Data_Info("-------------> Foto 1 ", hv_SerialHandle);

          hv_TempCam.Dispose();
          Config_Parametros_Cam_R1(hv_NxLib_1, hv_Camera_1, hv_NumberOfDisparities_Cam1, 
              hv_MinimumDisparity_Cam1, hv_Projector, hv_FrontLigth, hv_AutoExposure, 
              hv_AutoGain, hv_Gain, hv_Exposure, hv_FlexView, out hv_TempCam);
          ho_ModelImage.Dispose();ho_X.Dispose();ho_Y.Dispose();ho_Z.Dispose();ho_ImgLeftCamera.Dispose();hv_Escena3D_RAW.Dispose();
          Get_Img_Camera_R1(out ho_ModelImage, out ho_X, out ho_Y, out ho_Z, out ho_ImgLeftCamera, 
              hv_NxLib_1, hv_Camera_1, out hv_Escena3D_RAW);






          hv_MinimumDisparity_Cam1.Dispose();
          hv_MinimumDisparity_Cam1 = -64;
          hv_NumberOfDisparities_Cam1.Dispose();
          hv_NumberOfDisparities_Cam1 = 128;
          hv_Projector.Dispose();
          hv_Projector = "true";
          hv_FrontLigth.Dispose();
          hv_FrontLigth = "true";
          hv_AutoExposure.Dispose();
          hv_AutoExposure = "true";
          hv_AutoGain.Dispose();
          hv_AutoGain = "true";
          hv_Exposure.Dispose();
          hv_Exposure = 5;
          hv_Gain.Dispose();
          hv_Gain = 1;
          hv_FlexView.Dispose();
          hv_FlexView = 3;
          Send_Data_Info("-------------> Foto 1 ", hv_SerialHandle);

          hv_TempCam.Dispose();
          Config_Parametros_Cam_R1(hv_NxLib_1, hv_Camera_1, hv_NumberOfDisparities_Cam1, 
              hv_MinimumDisparity_Cam1, hv_Projector, hv_FrontLigth, hv_AutoExposure, 
              hv_AutoGain, hv_Gain, hv_Exposure, hv_FlexView, out hv_TempCam);
          ho_ModelImage.Dispose();ho_X.Dispose();ho_Y.Dispose();ho_Z.Dispose();ho_ImgLeftCamera.Dispose();hv_Escena3D_RAW.Dispose();
          Get_Img_Camera_R1(out ho_ModelImage, out ho_X, out ho_Y, out ho_Z, out ho_ImgLeftCamera, 
              hv_NxLib_1, hv_Camera_1, out hv_Escena3D_RAW);


          //# ####################################################
          Send_Data_Info("-------------> Adaptando Parametros", hv_SerialHandle);

          HOperatorSet.SetFramegrabberParam(hv_NxLib_1, "do_execute", "EstimateDisparitySettings");
          hv_MinimumDisparity.Dispose();
          HOperatorSet.GetFramegrabberParam(hv_NxLib_1, "//Execute/Default/Result/193216/MinimumDisparity", 
              out hv_MinimumDisparity);
          hv_NumberOfDisparities.Dispose();
          HOperatorSet.GetFramegrabberParam(hv_NxLib_1, "//Execute/Default/Result/193216/NumberOfDisparities", 
              out hv_NumberOfDisparities);
          //# ####################################################
          hv_MinimumDisparity_Cam1.Dispose();
          hv_MinimumDisparity_Cam1 = new HTuple(hv_MinimumDisparity);
          hv_NumberOfDisparities_Cam1.Dispose();
          hv_NumberOfDisparities_Cam1 = new HTuple(hv_NumberOfDisparities);
          hv_TempCam.Dispose();
          Config_Parametros_Cam_R1(hv_NxLib_1, hv_Camera_1, hv_NumberOfDisparities_Cam1, 
              hv_MinimumDisparity_Cam1, hv_Projector, hv_FrontLigth, hv_AutoExposure, 
              hv_AutoGain, hv_Gain, hv_Exposure, hv_FlexView, out hv_TempCam);

          //# ####################################################
          //Get_Objeto_0_and_1 (Objeto_0, Objeto_1, NxLib_1, Camera_1, Vector_Estado_Fx, SerialHandle, Pose_Robot, MinimumDisparity_Cam1, NumberOfDisparities_Cam1, Exposure, Pose_Robot_New)
          Send_Data_Info("-------------> Foto 1.1 ", hv_SerialHandle);
          ho_ModelImage.Dispose();ho_X.Dispose();ho_Y.Dispose();ho_Z.Dispose();ho_ImgLeftCamera.Dispose();hv_Escena3D_RAW.Dispose();
          Get_Img_Camera_R1(out ho_ModelImage, out ho_X, out ho_Y, out ho_Z, out ho_ImgLeftCamera, 
              hv_NxLib_1, hv_Camera_1, out hv_Escena3D_RAW);



          ho_Objeto_0.Dispose();
          HOperatorSet.Compose3(ho_X, ho_Y, ho_Z, out ho_Objeto_0);
          ho_Objeto_1.Dispose();
          HOperatorSet.Compose3(ho_X, ho_Y, ho_Z, out ho_Objeto_1);


          {
          HObject ExpTmpOutVar_0;
          HOperatorSet.ConcatObj(ho_Objeto_0, ho_Objeto_0, out ExpTmpOutVar_0);
          ho_Objeto_0.Dispose();
          ho_Objeto_0 = ExpTmpOutVar_0;
          }
          {
          HObject ExpTmpOutVar_0;
          HOperatorSet.ConcatObj(ho_Objeto_0, ho_Objeto_0, out ExpTmpOutVar_0);
          ho_Objeto_0.Dispose();
          ho_Objeto_0 = ExpTmpOutVar_0;
          }
        }



        //# ####################################################

        hv_Mensaje.Dispose();
        hv_Mensaje = "Imagen 1 capturada";
        Send_Data_Info(hv_Mensaje, hv_SerialHandle);
        //**********************************************************************
        //***** Guardo las Imagenes ********************************************
        hv_MSecond.Dispose();hv_Second.Dispose();hv_Minute.Dispose();hv_Hour.Dispose();hv_Day.Dispose();hv_YDay.Dispose();hv_Month.Dispose();hv_Year.Dispose();
        HOperatorSet.GetSystemTime(out hv_MSecond, out hv_Second, out hv_Minute, 
            out hv_Hour, out hv_Day, out hv_YDay, out hv_Month, out hv_Year);

        hv_Fecha.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Fecha = (((((((((((((("_Pallet_"+hv_N_Pallet_to_Scan)+"_")+hv_Year)+"_")+hv_Month)+"_")+hv_Day)+"_")+hv_Hour)+"_")+hv_Minute)+"_")+hv_Second)+"_")+hv_MSecond;
        }

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.WriteObject(ho_Objeto_0, ("D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 0/Obj0"+hv_Fecha)+".hobj");
        }
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.WriteObject(ho_Objeto_1, ("D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 0/Obj1"+hv_Fecha)+".hobj");
        }




        //**** Genero la Imagen.  ******
        //*### Translado la imagen segun lo que se movio #####

        if ((int)(hv_IsA_Sleeve) != 0)
        {

          try
          {

            hv_Estado_Funcion.Dispose();hv_Estado_Fx.Dispose();
            Send_Pase_Sleeve(ho_Objeto_1, hv_SerialHandle, out hv_Estado_Funcion, 
                out hv_Estado_Fx);


          }
          // catch (Exception) 
          catch (HalconException HDevExpDefaultException2)
          {
            HDevExpDefaultException2.ToHTuple(out hv_Exception);

            hv_EstadoFx.Dispose();
            Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx);
          }

        }
        else
        {

          ho_Esquina_Left.Dispose();ho_Esquina_Right.Dispose();ho_ROI_2_0.Dispose();ho_ROI_2_3.Dispose();hv_Estado_Fx.Dispose();
          Get_Pose_Pallet_Core(ho_Img_Left_Esquina, ho_Zobj1, ho_Xobj1, ho_Yobj1, 
              out ho_Esquina_Left, out ho_Esquina_Right, out ho_ROI_2_0, out ho_ROI_2_3, 
              hv_SerialHandle, out hv_Estado_Fx);



        }







      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);


        //# ###################################################
        hv_Mensaje.Dispose();
        hv_Mensaje = "NO SE ENCONTRO ESQUINA PALLET";
        Send_Data_Info(hv_Mensaje, hv_SerialHandle);
        hv_EstadoFx.Dispose();
        Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx);

        hv_Estado_Fx.Dispose();
        hv_Estado_Fx = 0;
        hv_Resultado.Dispose();
        hv_Resultado = 2;
        hv_Procesando.Dispose();
        hv_Procesando = 1;
        Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);


        //# ##################################################  

      }






      ho_X.Dispose();
      ho_Y.Dispose();
      ho_Z.Dispose();
      ho_ModelImage.Dispose();
      ho_ImgLeftCamera.Dispose();
      ho_Esquina_Left.Dispose();
      ho_Esquina_Right.Dispose();
      ho_ROI_2_0.Dispose();
      ho_ROI_2_3.Dispose();

      hv_Estado.Dispose();
      hv_Mensaje.Dispose();
      hv_WindowHandle.Dispose();
      hv_Contador_foto.Dispose();
      hv_Escuhar_Robot.Dispose();
      hv_NumberOfDisparities_Cam1.Dispose();
      hv_MinimumDisparity_Cam1.Dispose();
      hv_Exposure.Dispose();
      hv_Pose_Robot_New.Dispose();
      hv_Projector.Dispose();
      hv_FrontLigth.Dispose();
      hv_AutoExposure.Dispose();
      hv_AutoGain.Dispose();
      hv_Gain.Dispose();
      hv_FlexView.Dispose();
      hv_TempCam.Dispose();
      hv_MinimumDisparity.Dispose();
      hv_NumberOfDisparities.Dispose();
      hv_MSecond.Dispose();
      hv_Second.Dispose();
      hv_Minute.Dispose();
      hv_Hour.Dispose();
      hv_Day.Dispose();
      hv_YDay.Dispose();
      hv_Month.Dispose();
      hv_Year.Dispose();
      hv_Fecha.Dispose();
      hv_Estado_Funcion.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();
      hv_Resultado.Dispose();
      hv_Procesando.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_X.Dispose();
      ho_Y.Dispose();
      ho_Z.Dispose();
      ho_ModelImage.Dispose();
      ho_ImgLeftCamera.Dispose();
      ho_Esquina_Left.Dispose();
      ho_Esquina_Right.Dispose();
      ho_ROI_2_0.Dispose();
      ho_ROI_2_3.Dispose();

      hv_Estado.Dispose();
      hv_Mensaje.Dispose();
      hv_WindowHandle.Dispose();
      hv_Contador_foto.Dispose();
      hv_Escuhar_Robot.Dispose();
      hv_NumberOfDisparities_Cam1.Dispose();
      hv_MinimumDisparity_Cam1.Dispose();
      hv_Exposure.Dispose();
      hv_Pose_Robot_New.Dispose();
      hv_Projector.Dispose();
      hv_FrontLigth.Dispose();
      hv_AutoExposure.Dispose();
      hv_AutoGain.Dispose();
      hv_Gain.Dispose();
      hv_FlexView.Dispose();
      hv_TempCam.Dispose();
      hv_MinimumDisparity.Dispose();
      hv_NumberOfDisparities.Dispose();
      hv_MSecond.Dispose();
      hv_Second.Dispose();
      hv_Minute.Dispose();
      hv_Hour.Dispose();
      hv_Day.Dispose();
      hv_YDay.Dispose();
      hv_Month.Dispose();
      hv_Year.Dispose();
      hv_Fecha.Dispose();
      hv_Estado_Funcion.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();
      hv_Resultado.Dispose();
      hv_Procesando.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Picture (out HObject ho_Zm, out HObject ho_ImgLeftCamera, HTuple hv_NxLib, 
      HTuple hv_Camera_1)
  {



    // Local iconic variables 

    HObject ho_ModelImage, ho_Xm, ho_Ym, ho_MultiChannelImage;

    // Local control variables 

    HTuple hv_MinimumDisparity_Cam1 = new HTuple();
    HTuple hv_NumberOfDisparities_Cam1 = new HTuple(), hv_Projector = new HTuple();
    HTuple hv_FrontLigth = new HTuple(), hv_AutoExposure = new HTuple();
    HTuple hv_AutoGain = new HTuple(), hv_Exposure = new HTuple();
    HTuple hv_Gain = new HTuple(), hv_FlexView = new HTuple();
    HTuple hv_TempCam = new HTuple(), hv_Camara_conexion_Est = new HTuple();
    HTuple hv_MSecond = new HTuple(), hv_Second = new HTuple();
    HTuple hv_Minute = new HTuple(), hv_Hour = new HTuple();
    HTuple hv_Day = new HTuple(), hv_YDay = new HTuple(), hv_Month = new HTuple();
    HTuple hv_Year = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Zm);
    HOperatorSet.GenEmptyObj(out ho_ImgLeftCamera);
    HOperatorSet.GenEmptyObj(out ho_ModelImage);
    HOperatorSet.GenEmptyObj(out ho_Xm);
    HOperatorSet.GenEmptyObj(out ho_Ym);
    HOperatorSet.GenEmptyObj(out ho_MultiChannelImage);
    try
    {
      //Configuracion de Parametros
      hv_MinimumDisparity_Cam1.Dispose();
      hv_MinimumDisparity_Cam1 = -85;
      hv_NumberOfDisparities_Cam1.Dispose();
      hv_NumberOfDisparities_Cam1 = 100;

      hv_Projector.Dispose();
      hv_Projector = "true";
      hv_FrontLigth.Dispose();
      hv_FrontLigth = "true";
      hv_AutoExposure.Dispose();
      hv_AutoExposure = "true";
      hv_AutoGain.Dispose();
      hv_AutoGain = "true";
      hv_Exposure.Dispose();
      hv_Exposure = 1.5;
      hv_Gain.Dispose();
      hv_Gain = 1;
      hv_FlexView.Dispose();
      hv_FlexView = 1;
      hv_TempCam.Dispose();
      Config_Parametros_Cam_R1(hv_NxLib, hv_Camera_1, hv_NumberOfDisparities_Cam1, 
          hv_MinimumDisparity_Cam1, hv_Projector, hv_FrontLigth, hv_AutoExposure, 
          hv_AutoGain, hv_Gain, hv_Exposure, hv_FlexView, out hv_TempCam);



      ho_ModelImage.Dispose();hv_Camara_conexion_Est.Dispose();
      Adq_Imagen(out ho_ModelImage, hv_NxLib, hv_Camera_1, out hv_Camara_conexion_Est);

      //******************************************************************************
      //list_files ('D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Localizadores', 'files', Files)
      //read_image (ModelImage, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Localizadores/ModelImage9101125.hobj')
      //******************************************************************************
      HOperatorSet.DispObj(ho_ModelImage, hv_ExpDefaultWinHandle);

      ho_Xm.Dispose();ho_Ym.Dispose();ho_Zm.Dispose();
      Adq_XYZ_Img(ho_ModelImage, out ho_Xm, out ho_Ym, out ho_Zm);
      ho_MultiChannelImage.Dispose();
      HOperatorSet.Compose3(ho_Xm, ho_Ym, ho_Zm, out ho_MultiChannelImage);
      ho_ImgLeftCamera.Dispose();
      HOperatorSet.SelectObj(ho_ModelImage, out ho_ImgLeftCamera, 1);



      //**********************************************************************
      //***** Guardo las Imagenes ********************************************
      hv_MSecond.Dispose();hv_Second.Dispose();hv_Minute.Dispose();hv_Hour.Dispose();hv_Day.Dispose();hv_YDay.Dispose();hv_Month.Dispose();hv_Year.Dispose();
      HOperatorSet.GetSystemTime(out hv_MSecond, out hv_Second, out hv_Minute, out hv_Hour, 
          out hv_Day, out hv_YDay, out hv_Month, out hv_Year);

      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.WriteObject(ho_ModelImage, ((("D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Localizadores/ModelImage"+hv_Month)+hv_Day)+hv_Hour)+hv_Second);
      }



      //**********************************************************************

      ho_ModelImage.Dispose();
      ho_Xm.Dispose();
      ho_Ym.Dispose();
      ho_MultiChannelImage.Dispose();

      hv_MinimumDisparity_Cam1.Dispose();
      hv_NumberOfDisparities_Cam1.Dispose();
      hv_Projector.Dispose();
      hv_FrontLigth.Dispose();
      hv_AutoExposure.Dispose();
      hv_AutoGain.Dispose();
      hv_Exposure.Dispose();
      hv_Gain.Dispose();
      hv_FlexView.Dispose();
      hv_TempCam.Dispose();
      hv_Camara_conexion_Est.Dispose();
      hv_MSecond.Dispose();
      hv_Second.Dispose();
      hv_Minute.Dispose();
      hv_Hour.Dispose();
      hv_Day.Dispose();
      hv_YDay.Dispose();
      hv_Month.Dispose();
      hv_Year.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_ModelImage.Dispose();
      ho_Xm.Dispose();
      ho_Ym.Dispose();
      ho_MultiChannelImage.Dispose();

      hv_MinimumDisparity_Cam1.Dispose();
      hv_NumberOfDisparities_Cam1.Dispose();
      hv_Projector.Dispose();
      hv_FrontLigth.Dispose();
      hv_AutoExposure.Dispose();
      hv_AutoGain.Dispose();
      hv_Exposure.Dispose();
      hv_Gain.Dispose();
      hv_FlexView.Dispose();
      hv_TempCam.Dispose();
      hv_Camara_conexion_Est.Dispose();
      hv_MSecond.Dispose();
      hv_Second.Dispose();
      hv_Minute.Dispose();
      hv_Hour.Dispose();
      hv_Day.Dispose();
      hv_YDay.Dispose();
      hv_Month.Dispose();
      hv_Year.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_PorcentajeBusqueda (HTuple hv_Vector_ID_Core_by_Segment_Pallet, 
      HTuple hv_SerialHandle, out HTuple hv_Porcentaje)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Peticion = new HTuple(), hv_SubRutina = new HTuple();
    HTuple hv_Data = new HTuple(), hv_VarSerial = new HTuple();
    HTuple hv_Conteo = new HTuple(), hv_Nchar = new HTuple();
    HTuple hv_Variable = new HTuple(), hv_FXcheck = new HTuple();
    HTuple hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    hv_Porcentaje = new HTuple();
    try
    {
      try
      {
        //
        hv_Peticion.Dispose();
        hv_Peticion = "BaseDatos";
        hv_SubRutina.Dispose();
        hv_SubRutina = "Get_Porcentaje_Entd";

        hv_Data.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Data = (((hv_Peticion+";")+hv_SubRutina)+";")+hv_Vector_ID_Core_by_Segment_Pallet;
        }
        //
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.WriteSerial(hv_SerialHandle, hv_Data.TupleOrds());
        }




        hv_VarSerial.Dispose();
        hv_VarSerial = 0;
        hv_Conteo.Dispose();
        hv_Conteo = 0;
        while ((int)((new HTuple(hv_VarSerial.TupleLess(1))).TupleAnd(new HTuple(hv_Conteo.TupleLess(
            50)))) != 0)
        {

          //Numero de caracteres a leer
          hv_Nchar.Dispose();
          HOperatorSet.ReadSerial(hv_SerialHandle, 10, out hv_Nchar);
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Nchar = hv_Nchar.TupleChrt()
              ;
          hv_Nchar.Dispose();
          hv_Nchar = ExpTmpLocalVar_Nchar;
          }
          }
          hv_Variable.Dispose();
          HOperatorSet.TupleNumber(hv_Nchar, out hv_Variable);
          hv_VarSerial.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_VarSerial = new HTuple(hv_Nchar.TupleLength()
              );
          }

          hv_Porcentaje.Dispose();
          hv_Porcentaje = new HTuple(hv_Variable);

          if ((int)(new HTuple(hv_Variable.TupleEqual("###ERROR###"))) != 0)
          {
            hv_FXcheck.Dispose();
            hv_FXcheck = 0;

            hv_Peticion.Dispose();
            hv_SubRutina.Dispose();
            hv_Data.Dispose();
            hv_VarSerial.Dispose();
            hv_Conteo.Dispose();
            hv_Nchar.Dispose();
            hv_Variable.Dispose();
            hv_FXcheck.Dispose();
            hv_Exception.Dispose();

            return;
          }

          //tuple_split (Substrings, ';', DataBD)
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Conteo = hv_Conteo+1;
          hv_Conteo.Dispose();
          hv_Conteo = ExpTmpLocalVar_Conteo;
          }
          }
          hv_FXcheck.Dispose();
          hv_FXcheck = 1;
        }



      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);

        hv_Porcentaje.Dispose();
        hv_Porcentaje = 1;

      }


      hv_Peticion.Dispose();
      hv_SubRutina.Dispose();
      hv_Data.Dispose();
      hv_VarSerial.Dispose();
      hv_Conteo.Dispose();
      hv_Nchar.Dispose();
      hv_Variable.Dispose();
      hv_FXcheck.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Peticion.Dispose();
      hv_SubRutina.Dispose();
      hv_Data.Dispose();
      hv_VarSerial.Dispose();
      hv_Conteo.Dispose();
      hv_Nchar.Dispose();
      hv_Variable.Dispose();
      hv_FXcheck.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Pose_Caltab (HObject ho_Image, HTuple hv_CameraParameters, HTuple hv_CalTabFile, 
      HTuple hv_SerialHandle, out HTuple hv_PoseForCalibrationPlate, out HTuple hv_EstadoFx)
  {




    // Local iconic variables 

    HObject ho_ImageOut=null, ho_Caltab=null;

    // Local control variables 

    HTuple hv_WindowHandle = new HTuple(), hv_CalibDataID = new HTuple();
    HTuple hv_RCoord = new HTuple(), hv_CCoord = new HTuple();
    HTuple hv_Index = new HTuple(), hv_OsffetX = new HTuple();
    HTuple hv_OsffetY = new HTuple(), hv_OsffetZ = new HTuple();
    HTuple hv_PoseDisplay = new HTuple(), hv_Length = new HTuple();
    HTuple hv_texto = new HTuple(), hv_N_ossf = new HTuple();
    HTuple hv_Exception = new HTuple(), hv_MSecond = new HTuple();
    HTuple hv_Second = new HTuple(), hv_Minute = new HTuple();
    HTuple hv_Hour = new HTuple(), hv_Day = new HTuple(), hv_YDay = new HTuple();
    HTuple hv_Month = new HTuple(), hv_Year = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ImageOut);
    HOperatorSet.GenEmptyObj(out ho_Caltab);
    hv_PoseForCalibrationPlate = new HTuple();
    hv_EstadoFx = new HTuple();
    try
    {
      try
      {
        ho_ImageOut.Dispose();
        ho_ImageOut = new HObject(ho_Image);

        //dev_get_window(...);

        hv_CalibDataID.Dispose();
        HOperatorSet.CreateCalibData("hand_eye_moving_cam", 1, 1, out hv_CalibDataID);
        HOperatorSet.SetCalibDataCamParam(hv_CalibDataID, 0, new HTuple(), hv_CameraParameters);
        HOperatorSet.SetCalibDataCalibObject(hv_CalibDataID, 0, hv_CalTabFile);
        HOperatorSet.SetCalibData(hv_CalibDataID, "model", "general", "optimization_method", 
            "nonlinear");
        //
        HOperatorSet.FindCalibObject(ho_ImageOut, hv_CalibDataID, 0, 0, 0, new HTuple(), 
            new HTuple());

        //find_caltab (Image, CalPlate, CalTabFile, 11, 100, 20)
        //find_marks_and_pose (Image, CalPlate, CalTabFile, CameraParameters, 128, 10, 18, 0.9, 15, 100, RCoord1, CCoord1, StartPose)
        //dev_set_color ('blue')
        //disp_cross (200000, RCoord1, CCoord1, 40, StartPose[5])
        //
        ho_Caltab.Dispose();
        HOperatorSet.GetCalibDataObservContours(out ho_Caltab, hv_CalibDataID, "caltab", 
            0, 0, 0);
        hv_RCoord.Dispose();hv_CCoord.Dispose();hv_Index.Dispose();hv_PoseForCalibrationPlate.Dispose();
        HOperatorSet.GetCalibDataObservPoints(hv_CalibDataID, 0, 0, 0, out hv_RCoord, 
            out hv_CCoord, out hv_Index, out hv_PoseForCalibrationPlate);
        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RCoord, hv_CCoord, 50, 
            0);
        //*****************************************************************
        //Si quiero [mm]
        HOperatorSet.SetColored(hv_ExpDefaultWinHandle, 3);
        disp_3d_coord_system(hv_ExpDefaultWinHandle, hv_CameraParameters, hv_PoseForCalibrationPlate, 
            0.20);

        //****************************
        hv_OsffetX.Dispose();
        hv_OsffetX = 23.8;
        hv_OsffetY.Dispose();
        hv_OsffetY = 17.19;
        hv_OsffetZ.Dispose();
        hv_OsffetZ = 5.08;
        //****************************

        if (hv_PoseForCalibrationPlate == null)
          hv_PoseForCalibrationPlate = new HTuple();
        hv_PoseForCalibrationPlate[0] = (hv_PoseForCalibrationPlate.TupleSelect(0))+(hv_OsffetX*1e-3);
        if (hv_PoseForCalibrationPlate == null)
          hv_PoseForCalibrationPlate = new HTuple();
        hv_PoseForCalibrationPlate[1] = (hv_PoseForCalibrationPlate.TupleSelect(1))+(hv_OsffetY*1e-3);
        if (hv_PoseForCalibrationPlate == null)
          hv_PoseForCalibrationPlate = new HTuple();
        hv_PoseForCalibrationPlate[2] = (hv_PoseForCalibrationPlate.TupleSelect(2))+(hv_OsffetZ*1e-3);

        //****************************

        if (hv_PoseForCalibrationPlate == null)
          hv_PoseForCalibrationPlate = new HTuple();
        hv_PoseForCalibrationPlate[HTuple.TupleGenSequence(0,2,1)] = (hv_PoseForCalibrationPlate.TupleSelectRange(
            0,2))*1000;
        if (hv_PoseForCalibrationPlate == null)
          hv_PoseForCalibrationPlate = new HTuple();
        hv_PoseForCalibrationPlate[3] = (hv_PoseForCalibrationPlate.TupleSelect(3))*0;
        if (hv_PoseForCalibrationPlate == null)
          hv_PoseForCalibrationPlate = new HTuple();
        hv_PoseForCalibrationPlate[4] = (hv_PoseForCalibrationPlate.TupleSelect(4))*0;


        //dev_inspect_ctrl (PoseForCalibrationPlate)
        hv_PoseDisplay.Dispose();
        hv_PoseDisplay = new HTuple(hv_PoseForCalibrationPlate);



        //****************************************************************
        //
        //dev_inspect_ctrl (PoseForCalibrationPlate)
        //
        //

        hv_Length.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Length = new HTuple(hv_RCoord.TupleLength()
            );
        }
        if (hv_texto == null)
          hv_texto = new HTuple();
        hv_texto[0] = "Org X: ";
        if (hv_texto == null)
          hv_texto = new HTuple();
        hv_texto[1] = "Org Y: ";
        if (hv_texto == null)
          hv_texto = new HTuple();
        hv_texto[2] = "Org Z: ";
        if (hv_texto == null)
          hv_texto = new HTuple();
        hv_texto[3] = "Org C: ";
        if (hv_texto == null)
          hv_texto = new HTuple();
        hv_texto[4] = "Org B: ";
        if (hv_texto == null)
          hv_texto = new HTuple();
        hv_texto[5] = "Org A: ";
        if (hv_texto == null)
          hv_texto = new HTuple();
        hv_texto[6] = " ";
        //
        hv_N_ossf.Dispose();
        hv_N_ossf = 13;
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.DispText(hv_ExpDefaultWinHandle, hv_texto+hv_PoseDisplay, "image", 
            hv_RCoord.TupleSelect(hv_Length-hv_N_ossf), hv_CCoord.TupleSelect(hv_Length-hv_N_ossf), 
            "black", "box_color", "#ffffff77");
        }

        HOperatorSet.ClearCalibData(hv_CalibDataID);


        hv_EstadoFx.Dispose();
        hv_EstadoFx = 1;
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_MSecond.Dispose();hv_Second.Dispose();hv_Minute.Dispose();hv_Hour.Dispose();hv_Day.Dispose();hv_YDay.Dispose();hv_Month.Dispose();hv_Year.Dispose();
        HOperatorSet.GetSystemTime(out hv_MSecond, out hv_Second, out hv_Minute, 
            out hv_Hour, out hv_Day, out hv_YDay, out hv_Month, out hv_Year);
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.WriteObject(ho_Image, ((("D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/ImagenNODECT_"+hv_Month)+hv_Day)+hv_Hour)+hv_Second);
        }

        hv_EstadoFx.Dispose();
        Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx);



      }
      //
      ho_ImageOut.Dispose();
      ho_Caltab.Dispose();

      hv_WindowHandle.Dispose();
      hv_CalibDataID.Dispose();
      hv_RCoord.Dispose();
      hv_CCoord.Dispose();
      hv_Index.Dispose();
      hv_OsffetX.Dispose();
      hv_OsffetY.Dispose();
      hv_OsffetZ.Dispose();
      hv_PoseDisplay.Dispose();
      hv_Length.Dispose();
      hv_texto.Dispose();
      hv_N_ossf.Dispose();
      hv_Exception.Dispose();
      hv_MSecond.Dispose();
      hv_Second.Dispose();
      hv_Minute.Dispose();
      hv_Hour.Dispose();
      hv_Day.Dispose();
      hv_YDay.Dispose();
      hv_Month.Dispose();
      hv_Year.Dispose();

      return;
      //
      //
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_ImageOut.Dispose();
      ho_Caltab.Dispose();

      hv_WindowHandle.Dispose();
      hv_CalibDataID.Dispose();
      hv_RCoord.Dispose();
      hv_CCoord.Dispose();
      hv_Index.Dispose();
      hv_OsffetX.Dispose();
      hv_OsffetY.Dispose();
      hv_OsffetZ.Dispose();
      hv_PoseDisplay.Dispose();
      hv_Length.Dispose();
      hv_texto.Dispose();
      hv_N_ossf.Dispose();
      hv_Exception.Dispose();
      hv_MSecond.Dispose();
      hv_Second.Dispose();
      hv_Minute.Dispose();
      hv_Hour.Dispose();
      hv_Day.Dispose();
      hv_YDay.Dispose();
      hv_Month.Dispose();
      hv_Year.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Pose_Caltab_Smart (HObject ho_Image, HTuple hv_CameraParameters, 
      HTuple hv_CalTabFile, HTuple hv_SerialHandle, out HTuple hv_PoseForCalibrationPlate, 
      out HTuple hv_EstadoFx, out HTuple hv_ExceptionFile)
  {




    // Local iconic variables 

    HObject ho_ImageOut=null, ho_Caltab=null;

    // Local control variables 

    HTuple hv_WindowHandle = new HTuple(), hv_CalibDataID = new HTuple();
    HTuple hv_RCoord = new HTuple(), hv_CCoord = new HTuple();
    HTuple hv_Index = new HTuple(), hv_OsffetX = new HTuple();
    HTuple hv_OsffetY = new HTuple(), hv_OsffetZ = new HTuple();
    HTuple hv_PoseDisplay = new HTuple(), hv_Length = new HTuple();
    HTuple hv_texto = new HTuple(), hv_N_ossf = new HTuple();
    HTuple hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ImageOut);
    HOperatorSet.GenEmptyObj(out ho_Caltab);
    hv_PoseForCalibrationPlate = new HTuple();
    hv_EstadoFx = new HTuple();
    hv_ExceptionFile = new HTuple();
    try
    {
      try
      {
        ho_ImageOut.Dispose();
        ho_ImageOut = new HObject(ho_Image);

        //dev_get_window(...);

        hv_CalibDataID.Dispose();
        HOperatorSet.CreateCalibData("hand_eye_moving_cam", 1, 1, out hv_CalibDataID);
        HOperatorSet.SetCalibDataCamParam(hv_CalibDataID, 0, new HTuple(), hv_CameraParameters);
        HOperatorSet.SetCalibDataCalibObject(hv_CalibDataID, 0, hv_CalTabFile);
        HOperatorSet.SetCalibData(hv_CalibDataID, "model", "general", "optimization_method", 
            "nonlinear");
        //
        HOperatorSet.FindCalibObject(ho_ImageOut, hv_CalibDataID, 0, 0, 0, new HTuple(), 
            new HTuple());

        //find_caltab (Image, CalPlate, CalTabFile, 11, 100, 20)
        //find_marks_and_pose (Image, CalPlate, CalTabFile, CameraParameters, 128, 10, 18, 0.9, 15, 100, RCoord1, CCoord1, StartPose)
        //dev_set_color ('blue')
        //disp_cross (200000, RCoord1, CCoord1, 40, StartPose[5])
        //
        ho_Caltab.Dispose();
        HOperatorSet.GetCalibDataObservContours(out ho_Caltab, hv_CalibDataID, "caltab", 
            0, 0, 0);
        hv_RCoord.Dispose();hv_CCoord.Dispose();hv_Index.Dispose();hv_PoseForCalibrationPlate.Dispose();
        HOperatorSet.GetCalibDataObservPoints(hv_CalibDataID, 0, 0, 0, out hv_RCoord, 
            out hv_CCoord, out hv_Index, out hv_PoseForCalibrationPlate);
        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RCoord, hv_CCoord, 50, 
            0);
        //*****************************************************************
        //Si quiero [mm]
        HOperatorSet.SetColored(hv_ExpDefaultWinHandle, 3);
        disp_3d_coord_system(hv_ExpDefaultWinHandle, hv_CameraParameters, hv_PoseForCalibrationPlate, 
            0.20);

        //****************************
        hv_OsffetX.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_OsffetX = ((47.34+3.5)+1)*0;
        }
        hv_OsffetY.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_OsffetY = ((25.09+4.5)-1)*0;
        }
        hv_OsffetZ.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_OsffetZ = ((-18.88-7.1)+4.4)*0;
        }
        //****************************

        if (hv_PoseForCalibrationPlate == null)
          hv_PoseForCalibrationPlate = new HTuple();
        hv_PoseForCalibrationPlate[0] = (hv_PoseForCalibrationPlate.TupleSelect(0))+(hv_OsffetX*1e-3);
        if (hv_PoseForCalibrationPlate == null)
          hv_PoseForCalibrationPlate = new HTuple();
        hv_PoseForCalibrationPlate[1] = (hv_PoseForCalibrationPlate.TupleSelect(1))+(hv_OsffetY*1e-3);
        if (hv_PoseForCalibrationPlate == null)
          hv_PoseForCalibrationPlate = new HTuple();
        hv_PoseForCalibrationPlate[2] = (hv_PoseForCalibrationPlate.TupleSelect(2))+(hv_OsffetZ*1e-3);

        //****************************

        if (hv_PoseForCalibrationPlate == null)
          hv_PoseForCalibrationPlate = new HTuple();
        hv_PoseForCalibrationPlate[HTuple.TupleGenSequence(0,2,1)] = (hv_PoseForCalibrationPlate.TupleSelectRange(
            0,2))*1000;
        if (hv_PoseForCalibrationPlate == null)
          hv_PoseForCalibrationPlate = new HTuple();
        hv_PoseForCalibrationPlate[3] = (hv_PoseForCalibrationPlate.TupleSelect(3))*0;
        if (hv_PoseForCalibrationPlate == null)
          hv_PoseForCalibrationPlate = new HTuple();
        hv_PoseForCalibrationPlate[4] = (hv_PoseForCalibrationPlate.TupleSelect(4))*0;


        //dev_inspect_ctrl (PoseForCalibrationPlate)
        hv_PoseDisplay.Dispose();
        hv_PoseDisplay = new HTuple(hv_PoseForCalibrationPlate);



        //****************************************************************


        hv_Length.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Length = new HTuple(hv_RCoord.TupleLength()
            );
        }
        if (hv_texto == null)
          hv_texto = new HTuple();
        hv_texto[0] = "Org X: ";
        if (hv_texto == null)
          hv_texto = new HTuple();
        hv_texto[1] = "Org Y: ";
        if (hv_texto == null)
          hv_texto = new HTuple();
        hv_texto[2] = "Org Z: ";
        if (hv_texto == null)
          hv_texto = new HTuple();
        hv_texto[3] = "Org C: ";
        if (hv_texto == null)
          hv_texto = new HTuple();
        hv_texto[4] = "Org B: ";
        if (hv_texto == null)
          hv_texto = new HTuple();
        hv_texto[5] = "Org A: ";
        if (hv_texto == null)
          hv_texto = new HTuple();
        hv_texto[6] = " ";
        //
        hv_N_ossf.Dispose();
        hv_N_ossf = 13;
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.DispText(hv_ExpDefaultWinHandle, hv_texto+hv_PoseDisplay, "image", 
            hv_RCoord.TupleSelect(hv_Length-hv_N_ossf), hv_CCoord.TupleSelect(hv_Length-hv_N_ossf), 
            "black", "box_color", "#ffffff77");
        }

        HOperatorSet.ClearCalibData(hv_CalibDataID);


        hv_EstadoFx.Dispose();
        hv_EstadoFx = 1;
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_EstadoFx.Dispose();
        hv_EstadoFx = 0;
        hv_ExceptionFile.Dispose();
        hv_ExceptionFile = new HTuple(hv_Exception);

      }
      //
      ho_ImageOut.Dispose();
      ho_Caltab.Dispose();

      hv_WindowHandle.Dispose();
      hv_CalibDataID.Dispose();
      hv_RCoord.Dispose();
      hv_CCoord.Dispose();
      hv_Index.Dispose();
      hv_OsffetX.Dispose();
      hv_OsffetY.Dispose();
      hv_OsffetZ.Dispose();
      hv_PoseDisplay.Dispose();
      hv_Length.Dispose();
      hv_texto.Dispose();
      hv_N_ossf.Dispose();
      hv_Exception.Dispose();

      return;
      //
      //
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_ImageOut.Dispose();
      ho_Caltab.Dispose();

      hv_WindowHandle.Dispose();
      hv_CalibDataID.Dispose();
      hv_RCoord.Dispose();
      hv_CCoord.Dispose();
      hv_Index.Dispose();
      hv_OsffetX.Dispose();
      hv_OsffetY.Dispose();
      hv_OsffetZ.Dispose();
      hv_PoseDisplay.Dispose();
      hv_Length.Dispose();
      hv_texto.Dispose();
      hv_N_ossf.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Pose_Caltab_Smart_COPY_1 (HObject ho_Image, HTuple hv_CameraParameters, 
      HTuple hv_CalTabFile, HTuple hv_SerialHandle, out HTuple hv_PoseForCalibrationPlate, 
      out HTuple hv_EstadoFx)
  {




    // Local iconic variables 

    HObject ho_ImageOut=null, ho_Caltab=null;

    // Local control variables 

    HTuple hv_WindowHandle = new HTuple(), hv_CalibDataID = new HTuple();
    HTuple hv_RCoord = new HTuple(), hv_CCoord = new HTuple();
    HTuple hv_Index = new HTuple(), hv_OsffetX = new HTuple();
    HTuple hv_OsffetY = new HTuple(), hv_OsffetZ = new HTuple();
    HTuple hv_PoseDisplay = new HTuple(), hv_Length = new HTuple();
    HTuple hv_texto = new HTuple(), hv_N_ossf = new HTuple();
    HTuple hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ImageOut);
    HOperatorSet.GenEmptyObj(out ho_Caltab);
    hv_PoseForCalibrationPlate = new HTuple();
    hv_EstadoFx = new HTuple();
    try
    {
      try
      {
        ho_ImageOut.Dispose();
        ho_ImageOut = new HObject(ho_Image);

        //dev_get_window(...);

        hv_CalibDataID.Dispose();
        HOperatorSet.CreateCalibData("hand_eye_moving_cam", 1, 1, out hv_CalibDataID);
        HOperatorSet.SetCalibDataCamParam(hv_CalibDataID, 0, new HTuple(), hv_CameraParameters);
        HOperatorSet.SetCalibDataCalibObject(hv_CalibDataID, 0, hv_CalTabFile);
        HOperatorSet.SetCalibData(hv_CalibDataID, "model", "general", "optimization_method", 
            "nonlinear");

        HOperatorSet.FindCalibObject(ho_ImageOut, hv_CalibDataID, 0, 0, 0, new HTuple(), 
            new HTuple());

        //find_caltab (Image, CalPlate, CalTabFile, 11, 100, 20)
        //find_marks_and_pose (Image, CalPlate, CalTabFile, CameraParameters, 128, 10, 18, 0.9, 15, 100, RCoord1, CCoord1, StartPose)
        //dev_set_color ('blue')
        //disp_cross (200000, RCoord1, CCoord1, 40, StartPose[5])

        ho_Caltab.Dispose();
        HOperatorSet.GetCalibDataObservContours(out ho_Caltab, hv_CalibDataID, "caltab", 
            0, 0, 0);
        hv_RCoord.Dispose();hv_CCoord.Dispose();hv_Index.Dispose();hv_PoseForCalibrationPlate.Dispose();
        HOperatorSet.GetCalibDataObservPoints(hv_CalibDataID, 0, 0, 0, out hv_RCoord, 
            out hv_CCoord, out hv_Index, out hv_PoseForCalibrationPlate);
        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RCoord, hv_CCoord, 50, 
            0);
        //*****************************************************************
        //Si quiero [mm]
        HOperatorSet.SetColored(hv_ExpDefaultWinHandle, 3);
        disp_3d_coord_system(hv_ExpDefaultWinHandle, hv_CameraParameters, hv_PoseForCalibrationPlate, 
            0.20);

        //****************************
        hv_OsffetX.Dispose();
        hv_OsffetX = 23.8;
        hv_OsffetY.Dispose();
        hv_OsffetY = 17.19;
        hv_OsffetZ.Dispose();
        hv_OsffetZ = 5.08;
        //****************************

        if (hv_PoseForCalibrationPlate == null)
          hv_PoseForCalibrationPlate = new HTuple();
        hv_PoseForCalibrationPlate[0] = (hv_PoseForCalibrationPlate.TupleSelect(0))+(hv_OsffetX*1e-3);
        if (hv_PoseForCalibrationPlate == null)
          hv_PoseForCalibrationPlate = new HTuple();
        hv_PoseForCalibrationPlate[1] = (hv_PoseForCalibrationPlate.TupleSelect(1))+(hv_OsffetY*1e-3);
        if (hv_PoseForCalibrationPlate == null)
          hv_PoseForCalibrationPlate = new HTuple();
        hv_PoseForCalibrationPlate[2] = (hv_PoseForCalibrationPlate.TupleSelect(2))+(hv_OsffetZ*1e-3);

        //****************************

        if (hv_PoseForCalibrationPlate == null)
          hv_PoseForCalibrationPlate = new HTuple();
        hv_PoseForCalibrationPlate[HTuple.TupleGenSequence(0,2,1)] = (hv_PoseForCalibrationPlate.TupleSelectRange(
            0,2))*1000;
        if (hv_PoseForCalibrationPlate == null)
          hv_PoseForCalibrationPlate = new HTuple();
        hv_PoseForCalibrationPlate[3] = (hv_PoseForCalibrationPlate.TupleSelect(3))*0;
        if (hv_PoseForCalibrationPlate == null)
          hv_PoseForCalibrationPlate = new HTuple();
        hv_PoseForCalibrationPlate[4] = (hv_PoseForCalibrationPlate.TupleSelect(4))*0;


        //dev_inspect_ctrl (PoseForCalibrationPlate)
        hv_PoseDisplay.Dispose();
        hv_PoseDisplay = new HTuple(hv_PoseForCalibrationPlate);



        //****************************************************************

        //dev_inspect_ctrl (PoseForCalibrationPlate)



        hv_Length.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Length = new HTuple(hv_RCoord.TupleLength()
            );
        }
        if (hv_texto == null)
          hv_texto = new HTuple();
        hv_texto[0] = "Org X: ";
        if (hv_texto == null)
          hv_texto = new HTuple();
        hv_texto[1] = "Org Y: ";
        if (hv_texto == null)
          hv_texto = new HTuple();
        hv_texto[2] = "Org Z: ";
        if (hv_texto == null)
          hv_texto = new HTuple();
        hv_texto[3] = "Org C: ";
        if (hv_texto == null)
          hv_texto = new HTuple();
        hv_texto[4] = "Org B: ";
        if (hv_texto == null)
          hv_texto = new HTuple();
        hv_texto[5] = "Org A: ";
        if (hv_texto == null)
          hv_texto = new HTuple();
        hv_texto[6] = " ";

        hv_N_ossf.Dispose();
        hv_N_ossf = 13;
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.DispText(hv_ExpDefaultWinHandle, hv_texto+hv_PoseDisplay, "image", 
            hv_RCoord.TupleSelect(hv_Length-hv_N_ossf), hv_CCoord.TupleSelect(hv_Length-hv_N_ossf), 
            "black", "box_color", "#ffffff77");
        }

        HOperatorSet.ClearCalibData(hv_CalibDataID);


        hv_EstadoFx.Dispose();
        hv_EstadoFx = 1;
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_EstadoFx.Dispose();
        hv_EstadoFx = 0;


      }

      ho_ImageOut.Dispose();
      ho_Caltab.Dispose();

      hv_WindowHandle.Dispose();
      hv_CalibDataID.Dispose();
      hv_RCoord.Dispose();
      hv_CCoord.Dispose();
      hv_Index.Dispose();
      hv_OsffetX.Dispose();
      hv_OsffetY.Dispose();
      hv_OsffetZ.Dispose();
      hv_PoseDisplay.Dispose();
      hv_Length.Dispose();
      hv_texto.Dispose();
      hv_N_ossf.Dispose();
      hv_Exception.Dispose();

      return;


    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_ImageOut.Dispose();
      ho_Caltab.Dispose();

      hv_WindowHandle.Dispose();
      hv_CalibDataID.Dispose();
      hv_RCoord.Dispose();
      hv_CCoord.Dispose();
      hv_Index.Dispose();
      hv_OsffetX.Dispose();
      hv_OsffetY.Dispose();
      hv_OsffetZ.Dispose();
      hv_PoseDisplay.Dispose();
      hv_Length.Dispose();
      hv_texto.Dispose();
      hv_N_ossf.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Pose_Caltab_Smart_COPY_2 (HObject ho_Image, HTuple hv_CameraParameters, 
      HTuple hv_CalTabFile, HTuple hv_SerialHandle, out HTuple hv_PoseForCalibrationPlate, 
      out HTuple hv_EstadoFx, out HTuple hv_ExceptionFile)
  {




    // Local iconic variables 

    HObject ho_ImageOut=null, ho_Caltab=null;

    // Local control variables 

    HTuple hv_WindowHandle = new HTuple(), hv_CalibDataID = new HTuple();
    HTuple hv_RCoord = new HTuple(), hv_CCoord = new HTuple();
    HTuple hv_Index = new HTuple(), hv_OsffetX = new HTuple();
    HTuple hv_OsffetY = new HTuple(), hv_OsffetZ = new HTuple();
    HTuple hv_PoseDisplay = new HTuple(), hv_Length = new HTuple();
    HTuple hv_texto = new HTuple(), hv_N_ossf = new HTuple();
    HTuple hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ImageOut);
    HOperatorSet.GenEmptyObj(out ho_Caltab);
    hv_PoseForCalibrationPlate = new HTuple();
    hv_EstadoFx = new HTuple();
    hv_ExceptionFile = new HTuple();
    try
    {
      try
      {
        ho_ImageOut.Dispose();
        ho_ImageOut = new HObject(ho_Image);

        //dev_get_window(...);

        hv_CalibDataID.Dispose();
        HOperatorSet.CreateCalibData("hand_eye_moving_cam", 1, 1, out hv_CalibDataID);
        HOperatorSet.SetCalibDataCamParam(hv_CalibDataID, 0, new HTuple(), hv_CameraParameters);
        HOperatorSet.SetCalibDataCalibObject(hv_CalibDataID, 0, hv_CalTabFile);
        HOperatorSet.SetCalibData(hv_CalibDataID, "model", "general", "optimization_method", 
            "nonlinear");

        HOperatorSet.FindCalibObject(ho_ImageOut, hv_CalibDataID, 0, 0, 0, new HTuple(), 
            new HTuple());

        //find_caltab (Image, CalPlate, CalTabFile, 11, 100, 20)
        //find_marks_and_pose (Image, CalPlate, CalTabFile, CameraParameters, 128, 10, 18, 0.9, 15, 100, RCoord1, CCoord1, StartPose)
        //dev_set_color ('blue')
        //disp_cross (200000, RCoord1, CCoord1, 40, StartPose[5])

        ho_Caltab.Dispose();
        HOperatorSet.GetCalibDataObservContours(out ho_Caltab, hv_CalibDataID, "caltab", 
            0, 0, 0);
        hv_RCoord.Dispose();hv_CCoord.Dispose();hv_Index.Dispose();hv_PoseForCalibrationPlate.Dispose();
        HOperatorSet.GetCalibDataObservPoints(hv_CalibDataID, 0, 0, 0, out hv_RCoord, 
            out hv_CCoord, out hv_Index, out hv_PoseForCalibrationPlate);
        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RCoord, hv_CCoord, 50, 
            0);
        //*****************************************************************
        //Si quiero [mm]
        HOperatorSet.SetColored(hv_ExpDefaultWinHandle, 3);
        disp_3d_coord_system(hv_ExpDefaultWinHandle, hv_CameraParameters, hv_PoseForCalibrationPlate, 
            0.20);

        //****************************
        hv_OsffetX.Dispose();
        hv_OsffetX = 23.8;
        hv_OsffetY.Dispose();
        hv_OsffetY = 17.19;
        hv_OsffetZ.Dispose();
        hv_OsffetZ = 5.08;
        //****************************

        if (hv_PoseForCalibrationPlate == null)
          hv_PoseForCalibrationPlate = new HTuple();
        hv_PoseForCalibrationPlate[0] = (hv_PoseForCalibrationPlate.TupleSelect(0))+(hv_OsffetX*1e-3);
        if (hv_PoseForCalibrationPlate == null)
          hv_PoseForCalibrationPlate = new HTuple();
        hv_PoseForCalibrationPlate[1] = (hv_PoseForCalibrationPlate.TupleSelect(1))+(hv_OsffetY*1e-3);
        if (hv_PoseForCalibrationPlate == null)
          hv_PoseForCalibrationPlate = new HTuple();
        hv_PoseForCalibrationPlate[2] = (hv_PoseForCalibrationPlate.TupleSelect(2))+(hv_OsffetZ*1e-3);

        //****************************

        if (hv_PoseForCalibrationPlate == null)
          hv_PoseForCalibrationPlate = new HTuple();
        hv_PoseForCalibrationPlate[HTuple.TupleGenSequence(0,2,1)] = (hv_PoseForCalibrationPlate.TupleSelectRange(
            0,2))*1000;
        if (hv_PoseForCalibrationPlate == null)
          hv_PoseForCalibrationPlate = new HTuple();
        hv_PoseForCalibrationPlate[3] = (hv_PoseForCalibrationPlate.TupleSelect(3))*0;
        if (hv_PoseForCalibrationPlate == null)
          hv_PoseForCalibrationPlate = new HTuple();
        hv_PoseForCalibrationPlate[4] = (hv_PoseForCalibrationPlate.TupleSelect(4))*0;


        //dev_inspect_ctrl (PoseForCalibrationPlate)
        hv_PoseDisplay.Dispose();
        hv_PoseDisplay = new HTuple(hv_PoseForCalibrationPlate);



        //****************************************************************

        //dev_inspect_ctrl (PoseForCalibrationPlate)



        hv_Length.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Length = new HTuple(hv_RCoord.TupleLength()
            );
        }
        if (hv_texto == null)
          hv_texto = new HTuple();
        hv_texto[0] = "Org X: ";
        if (hv_texto == null)
          hv_texto = new HTuple();
        hv_texto[1] = "Org Y: ";
        if (hv_texto == null)
          hv_texto = new HTuple();
        hv_texto[2] = "Org Z: ";
        if (hv_texto == null)
          hv_texto = new HTuple();
        hv_texto[3] = "Org C: ";
        if (hv_texto == null)
          hv_texto = new HTuple();
        hv_texto[4] = "Org B: ";
        if (hv_texto == null)
          hv_texto = new HTuple();
        hv_texto[5] = "Org A: ";
        if (hv_texto == null)
          hv_texto = new HTuple();
        hv_texto[6] = " ";

        hv_N_ossf.Dispose();
        hv_N_ossf = 13;
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.DispText(hv_ExpDefaultWinHandle, hv_texto+hv_PoseDisplay, "image", 
            hv_RCoord.TupleSelect(hv_Length-hv_N_ossf), hv_CCoord.TupleSelect(hv_Length-hv_N_ossf), 
            "black", "box_color", "#ffffff77");
        }

        HOperatorSet.ClearCalibData(hv_CalibDataID);


        hv_EstadoFx.Dispose();
        hv_EstadoFx = 1;
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_EstadoFx.Dispose();
        hv_EstadoFx = 0;
        hv_ExceptionFile.Dispose();
        hv_ExceptionFile = new HTuple(hv_Exception);

      }

      ho_ImageOut.Dispose();
      ho_Caltab.Dispose();

      hv_WindowHandle.Dispose();
      hv_CalibDataID.Dispose();
      hv_RCoord.Dispose();
      hv_CCoord.Dispose();
      hv_Index.Dispose();
      hv_OsffetX.Dispose();
      hv_OsffetY.Dispose();
      hv_OsffetZ.Dispose();
      hv_PoseDisplay.Dispose();
      hv_Length.Dispose();
      hv_texto.Dispose();
      hv_N_ossf.Dispose();
      hv_Exception.Dispose();

      return;


    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_ImageOut.Dispose();
      ho_Caltab.Dispose();

      hv_WindowHandle.Dispose();
      hv_CalibDataID.Dispose();
      hv_RCoord.Dispose();
      hv_CCoord.Dispose();
      hv_Index.Dispose();
      hv_OsffetX.Dispose();
      hv_OsffetY.Dispose();
      hv_OsffetZ.Dispose();
      hv_PoseDisplay.Dispose();
      hv_Length.Dispose();
      hv_texto.Dispose();
      hv_N_ossf.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Pose_Caltab_Smart_COPY_3 (HObject ho_Image, HTuple hv_CameraParameters, 
      HTuple hv_CalTabFile, HTuple hv_SerialHandle, out HTuple hv_PoseForCalibrationPlate, 
      out HTuple hv_EstadoFx, out HTuple hv_ExceptionFile)
  {




    // Local iconic variables 

    HObject ho_ImageOut=null, ho_Caltab=null;

    // Local control variables 

    HTuple hv_WindowHandle = new HTuple(), hv_CalibDataID = new HTuple();
    HTuple hv_RCoord = new HTuple(), hv_CCoord = new HTuple();
    HTuple hv_Index = new HTuple(), hv_OsffetX = new HTuple();
    HTuple hv_OsffetY = new HTuple(), hv_OsffetZ = new HTuple();
    HTuple hv_PoseDisplay = new HTuple(), hv_Length = new HTuple();
    HTuple hv_texto = new HTuple(), hv_N_ossf = new HTuple();
    HTuple hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ImageOut);
    HOperatorSet.GenEmptyObj(out ho_Caltab);
    hv_PoseForCalibrationPlate = new HTuple();
    hv_EstadoFx = new HTuple();
    hv_ExceptionFile = new HTuple();
    try
    {
      try
      {
        ho_ImageOut.Dispose();
        ho_ImageOut = new HObject(ho_Image);

        //dev_get_window(...);

        hv_CalibDataID.Dispose();
        HOperatorSet.CreateCalibData("hand_eye_moving_cam", 1, 1, out hv_CalibDataID);
        HOperatorSet.SetCalibDataCamParam(hv_CalibDataID, 0, new HTuple(), hv_CameraParameters);
        HOperatorSet.SetCalibDataCalibObject(hv_CalibDataID, 0, hv_CalTabFile);
        HOperatorSet.SetCalibData(hv_CalibDataID, "model", "general", "optimization_method", 
            "nonlinear");

        HOperatorSet.FindCalibObject(ho_ImageOut, hv_CalibDataID, 0, 0, 0, new HTuple(), 
            new HTuple());

        //find_caltab (Image, CalPlate, CalTabFile, 11, 100, 20)
        //find_marks_and_pose (Image, CalPlate, CalTabFile, CameraParameters, 128, 10, 18, 0.9, 15, 100, RCoord1, CCoord1, StartPose)
        //dev_set_color ('blue')
        //disp_cross (200000, RCoord1, CCoord1, 40, StartPose[5])

        ho_Caltab.Dispose();
        HOperatorSet.GetCalibDataObservContours(out ho_Caltab, hv_CalibDataID, "caltab", 
            0, 0, 0);
        hv_RCoord.Dispose();hv_CCoord.Dispose();hv_Index.Dispose();hv_PoseForCalibrationPlate.Dispose();
        HOperatorSet.GetCalibDataObservPoints(hv_CalibDataID, 0, 0, 0, out hv_RCoord, 
            out hv_CCoord, out hv_Index, out hv_PoseForCalibrationPlate);
        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RCoord, hv_CCoord, 50, 
            0);
        //*****************************************************************
        //Si quiero [mm]
        HOperatorSet.SetColored(hv_ExpDefaultWinHandle, 3);
        disp_3d_coord_system(hv_ExpDefaultWinHandle, hv_CameraParameters, hv_PoseForCalibrationPlate, 
            0.20);

        //****************************
        hv_OsffetX.Dispose();
        hv_OsffetX = 16.25;
        hv_OsffetY.Dispose();
        hv_OsffetY = 18.19;
        hv_OsffetZ.Dispose();
        hv_OsffetZ = 5.08;
        //****************************

        if (hv_PoseForCalibrationPlate == null)
          hv_PoseForCalibrationPlate = new HTuple();
        hv_PoseForCalibrationPlate[0] = (hv_PoseForCalibrationPlate.TupleSelect(0))+(hv_OsffetX*1e-3);
        if (hv_PoseForCalibrationPlate == null)
          hv_PoseForCalibrationPlate = new HTuple();
        hv_PoseForCalibrationPlate[1] = (hv_PoseForCalibrationPlate.TupleSelect(1))+(hv_OsffetY*1e-3);
        if (hv_PoseForCalibrationPlate == null)
          hv_PoseForCalibrationPlate = new HTuple();
        hv_PoseForCalibrationPlate[2] = (hv_PoseForCalibrationPlate.TupleSelect(2))+(hv_OsffetZ*1e-3);

        //****************************

        if (hv_PoseForCalibrationPlate == null)
          hv_PoseForCalibrationPlate = new HTuple();
        hv_PoseForCalibrationPlate[HTuple.TupleGenSequence(0,2,1)] = (hv_PoseForCalibrationPlate.TupleSelectRange(
            0,2))*1000;
        if (hv_PoseForCalibrationPlate == null)
          hv_PoseForCalibrationPlate = new HTuple();
        hv_PoseForCalibrationPlate[3] = (hv_PoseForCalibrationPlate.TupleSelect(3))*0;
        if (hv_PoseForCalibrationPlate == null)
          hv_PoseForCalibrationPlate = new HTuple();
        hv_PoseForCalibrationPlate[4] = (hv_PoseForCalibrationPlate.TupleSelect(4))*0;


        //dev_inspect_ctrl (PoseForCalibrationPlate)
        hv_PoseDisplay.Dispose();
        hv_PoseDisplay = new HTuple(hv_PoseForCalibrationPlate);



        //****************************************************************

        //dev_inspect_ctrl (PoseForCalibrationPlate)



        hv_Length.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Length = new HTuple(hv_RCoord.TupleLength()
            );
        }
        if (hv_texto == null)
          hv_texto = new HTuple();
        hv_texto[0] = "Org X: ";
        if (hv_texto == null)
          hv_texto = new HTuple();
        hv_texto[1] = "Org Y: ";
        if (hv_texto == null)
          hv_texto = new HTuple();
        hv_texto[2] = "Org Z: ";
        if (hv_texto == null)
          hv_texto = new HTuple();
        hv_texto[3] = "Org C: ";
        if (hv_texto == null)
          hv_texto = new HTuple();
        hv_texto[4] = "Org B: ";
        if (hv_texto == null)
          hv_texto = new HTuple();
        hv_texto[5] = "Org A: ";
        if (hv_texto == null)
          hv_texto = new HTuple();
        hv_texto[6] = " ";

        hv_N_ossf.Dispose();
        hv_N_ossf = 13;
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.DispText(hv_ExpDefaultWinHandle, hv_texto+hv_PoseDisplay, "image", 
            hv_RCoord.TupleSelect(hv_Length-hv_N_ossf), hv_CCoord.TupleSelect(hv_Length-hv_N_ossf), 
            "black", "box_color", "#ffffff77");
        }

        HOperatorSet.ClearCalibData(hv_CalibDataID);


        hv_EstadoFx.Dispose();
        hv_EstadoFx = 1;
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_EstadoFx.Dispose();
        hv_EstadoFx = 0;
        hv_ExceptionFile.Dispose();
        hv_ExceptionFile = new HTuple(hv_Exception);

      }

      ho_ImageOut.Dispose();
      ho_Caltab.Dispose();

      hv_WindowHandle.Dispose();
      hv_CalibDataID.Dispose();
      hv_RCoord.Dispose();
      hv_CCoord.Dispose();
      hv_Index.Dispose();
      hv_OsffetX.Dispose();
      hv_OsffetY.Dispose();
      hv_OsffetZ.Dispose();
      hv_PoseDisplay.Dispose();
      hv_Length.Dispose();
      hv_texto.Dispose();
      hv_N_ossf.Dispose();
      hv_Exception.Dispose();

      return;


    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_ImageOut.Dispose();
      ho_Caltab.Dispose();

      hv_WindowHandle.Dispose();
      hv_CalibDataID.Dispose();
      hv_RCoord.Dispose();
      hv_CCoord.Dispose();
      hv_Index.Dispose();
      hv_OsffetX.Dispose();
      hv_OsffetY.Dispose();
      hv_OsffetZ.Dispose();
      hv_PoseDisplay.Dispose();
      hv_Length.Dispose();
      hv_texto.Dispose();
      hv_N_ossf.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Pose_Pallet_Core (HObject ho_Img_Left_Esquina, HObject ho_Zobj1, 
      HObject ho_Xobj1, HObject ho_Yobj1, out HObject ho_Esquina_Left, out HObject ho_Esquina_Right, 
      out HObject ho_ROI_2_0, out HObject ho_ROI_2_3, HTuple hv_SerialHandle, out HTuple hv_Estado_Fx)
  {




    // Stack for temporary objects 
    HObject[] OTemp = new HObject[20];

    // Local iconic variables 

    // Local control variables 

    HTuple hv_row1_L = new HTuple(), hv_col1_L = new HTuple();
    HTuple hv_CentroX_L = new HTuple(), hv_CentroY_L = new HTuple();
    HTuple hv_CentroZ_L = new HTuple(), hv_Nelementos_Left = new HTuple();
    HTuple hv_Angle = new HTuple(), hv_Limite_Altura_Z = new HTuple();
    HTuple hv_Mensaje = new HTuple(), hv_Resultado = new HTuple();
    HTuple hv_Procesando = new HTuple(), hv_Area = new HTuple();
    HTuple hv_rectangularidad = new HTuple(), hv_Base_esquina = new HTuple();
    HTuple hv_TagToWrite = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Esquina_Left);
    HOperatorSet.GenEmptyObj(out ho_Esquina_Right);
    HOperatorSet.GenEmptyObj(out ho_ROI_2_0);
    HOperatorSet.GenEmptyObj(out ho_ROI_2_3);
    hv_Estado_Fx = new HTuple();
    try
    {

      HOperatorSet.SetLineWidth(hv_ExpDefaultWinHandle, 2);
      ho_Esquina_Left.Dispose();ho_Esquina_Right.Dispose();
      Get_Esquina_LeftRight(ho_Img_Left_Esquina, out ho_Esquina_Left, out ho_Esquina_Right
          );
      {
      HObject ExpTmpOutVar_0;hv_row1_L.Dispose();hv_col1_L.Dispose();hv_CentroX_L.Dispose();hv_CentroY_L.Dispose();hv_CentroZ_L.Dispose();hv_Nelementos_Left.Dispose();
      Get_Centro_and_Esquina(ho_Esquina_Left, ho_Xobj1, ho_Yobj1, ho_Zobj1, out ExpTmpOutVar_0, 
          out hv_row1_L, out hv_col1_L, out hv_CentroX_L, out hv_CentroY_L, out hv_CentroZ_L, 
          out hv_Nelementos_Left);
      ho_Esquina_Left.Dispose();
      ho_Esquina_Left = ExpTmpOutVar_0;
      }
      HOperatorSet.SetLineWidth(hv_ExpDefaultWinHandle, 2);
      hv_Angle.Dispose();
      Silple_Orientation(ho_Img_Left_Esquina, ho_Zobj1, ho_Esquina_Left, out hv_Angle);

      //Get_Centro_and_Esquina (Esquina_Right, Xobj1, Yobj1, Zobj1, Esquina_Right, row1_R, col1_R, CentroX, CentroY, CentroZ, Nelementos_Rigth)

      //* Limito la distancia posible
      hv_Limite_Altura_Z.Dispose();
      hv_Limite_Altura_Z = 1550.0;
      if ((int)(new HTuple(hv_CentroZ_L.TupleGreater(hv_Limite_Altura_Z))) != 0)
      {
        hv_Mensaje.Dispose();
        hv_Mensaje = "¡¡¡PELIGRO!!!  PALLET MUY CERCA DE LA CAMARA";
        Send_Data_Info(hv_Mensaje, hv_SerialHandle);
        hv_Estado_Fx.Dispose();
        hv_Estado_Fx = 0;
        hv_Resultado.Dispose();
        hv_Resultado = 2;
        hv_Procesando.Dispose();
        hv_Procesando = 1;
        Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);

        hv_row1_L.Dispose();
        hv_col1_L.Dispose();
        hv_CentroX_L.Dispose();
        hv_CentroY_L.Dispose();
        hv_CentroZ_L.Dispose();
        hv_Nelementos_Left.Dispose();
        hv_Angle.Dispose();
        hv_Limite_Altura_Z.Dispose();
        hv_Mensaje.Dispose();
        hv_Resultado.Dispose();
        hv_Procesando.Dispose();
        hv_Area.Dispose();
        hv_rectangularidad.Dispose();
        hv_Base_esquina.Dispose();
        hv_TagToWrite.Dispose();

        return;
      }


      hv_Area.Dispose();
      HOperatorSet.RegionFeatures(ho_Esquina_Left, "area", out hv_Area);
      hv_rectangularidad.Dispose();
      HOperatorSet.RegionFeatures(ho_Esquina_Left, "rectangularity", out hv_rectangularidad);

      if ((int)((new HTuple((new HTuple(hv_rectangularidad.TupleLess(0.9))).TupleOr(
          new HTuple(hv_Area.TupleLess(9000))))).TupleOr(new HTuple(hv_Area.TupleGreater(
          11500)))) != 0)
      {
        hv_Mensaje.Dispose();
        hv_Mensaje = "¡¡¡PELIGRO!!!  Objeto detectado no cumple condiciones morfologicas. Revisar iluminacion";
        Send_Data_Info(hv_Mensaje, hv_SerialHandle);
        hv_Estado_Fx.Dispose();
        hv_Estado_Fx = 0;
        hv_Resultado.Dispose();
        hv_Resultado = 2;
        hv_Procesando.Dispose();
        hv_Procesando = 1;
        Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);

        hv_row1_L.Dispose();
        hv_col1_L.Dispose();
        hv_CentroX_L.Dispose();
        hv_CentroY_L.Dispose();
        hv_CentroZ_L.Dispose();
        hv_Nelementos_Left.Dispose();
        hv_Angle.Dispose();
        hv_Limite_Altura_Z.Dispose();
        hv_Mensaje.Dispose();
        hv_Resultado.Dispose();
        hv_Procesando.Dispose();
        hv_Area.Dispose();
        hv_rectangularidad.Dispose();
        hv_Base_esquina.Dispose();
        hv_TagToWrite.Dispose();

        return;
      }




      if ((int)(new HTuple(hv_Nelementos_Left.TupleEqual(1))) != 0)
      {

        //*******************************
        //Angle := 0
        //*******************************
        hv_Base_esquina.Dispose();
        HOperatorSet.CreatePose(hv_CentroX_L, hv_CentroY_L, hv_CentroZ_L, 0, 0, hv_Angle, 
            "Rp+T", "gba", "point", out hv_Base_esquina);


        Send_Data_To_Robot(hv_Base_esquina, hv_SerialHandle);


        hv_Mensaje.Dispose();
        hv_Mensaje = "####################################";
        Send_Data_Info(hv_Mensaje, hv_SerialHandle);
        hv_Mensaje.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Mensaje = (((((((new HTuple("Base Pallet -> ")+"  Ang Z -> ")+hv_Angle)+" # ")+hv_CentroX_L)+" # ")+hv_CentroY_L)+" # ")+hv_CentroZ_L;
        }
        Send_Data_Info(hv_Mensaje, hv_SerialHandle);
        hv_Mensaje.Dispose();
        hv_Mensaje = "####################################";
        Send_Data_Info(hv_Mensaje, hv_SerialHandle);

        //* Altura desde la camara deseada ***
        hv_TagToWrite.Dispose();
        hv_TagToWrite = "_EV01_I_EjeZZ";
        Send_EthernetIP_Data(hv_TagToWrite, 1100, hv_SerialHandle);

        hv_Estado_Fx.Dispose();
        hv_Estado_Fx = 1;


      }
      else
      {
        hv_Mensaje.Dispose();
        hv_Mensaje = "NO SE ENCONTRO ESQUINA PALLET";
        Send_Data_Info(hv_Mensaje, hv_SerialHandle);
        hv_Estado_Fx.Dispose();
        hv_Estado_Fx = 0;
        hv_Resultado.Dispose();
        hv_Resultado = 2;
        hv_Procesando.Dispose();
        hv_Procesando = 0;
        Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);

        hv_row1_L.Dispose();
        hv_col1_L.Dispose();
        hv_CentroX_L.Dispose();
        hv_CentroY_L.Dispose();
        hv_CentroZ_L.Dispose();
        hv_Nelementos_Left.Dispose();
        hv_Angle.Dispose();
        hv_Limite_Altura_Z.Dispose();
        hv_Mensaje.Dispose();
        hv_Resultado.Dispose();
        hv_Procesando.Dispose();
        hv_Area.Dispose();
        hv_rectangularidad.Dispose();
        hv_Base_esquina.Dispose();
        hv_TagToWrite.Dispose();

        return;



      }





      hv_row1_L.Dispose();
      hv_col1_L.Dispose();
      hv_CentroX_L.Dispose();
      hv_CentroY_L.Dispose();
      hv_CentroZ_L.Dispose();
      hv_Nelementos_Left.Dispose();
      hv_Angle.Dispose();
      hv_Limite_Altura_Z.Dispose();
      hv_Mensaje.Dispose();
      hv_Resultado.Dispose();
      hv_Procesando.Dispose();
      hv_Area.Dispose();
      hv_rectangularidad.Dispose();
      hv_Base_esquina.Dispose();
      hv_TagToWrite.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_row1_L.Dispose();
      hv_col1_L.Dispose();
      hv_CentroX_L.Dispose();
      hv_CentroY_L.Dispose();
      hv_CentroZ_L.Dispose();
      hv_Nelementos_Left.Dispose();
      hv_Angle.Dispose();
      hv_Limite_Altura_Z.Dispose();
      hv_Mensaje.Dispose();
      hv_Resultado.Dispose();
      hv_Procesando.Dispose();
      hv_Area.Dispose();
      hv_rectangularidad.Dispose();
      hv_Base_esquina.Dispose();
      hv_TagToWrite.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Pose_Punto_Insercion (HTuple hv_PoseForCalibrationPlate, HTuple hv_ToolInCamPose, 
      HTuple hv_ToolInBasePose, HTuple hv_SerialHandle, out HTuple hv_ObjInBasePose)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_ObjInCamPose = new HTuple(), hv_ToolInCamPose_Aux = new HTuple();
    HTuple hv_CamInToolPose = new HTuple(), hv_CamInBasePose = new HTuple();
    HTuple hv_osffetX = new HTuple(), hv_osffetY = new HTuple();
    HTuple hv_osffetZ = new HTuple(), hv_pto1 = new HTuple();
    HTuple hv_pto2 = new HTuple(), hv_pto3 = new HTuple();
    HTuple hv_LapizInBasePose = new HTuple(), hv_DinOssfet = new HTuple();
    HTuple hv_LapizInBasePose_Estimado = new HTuple();
    // Initialize local and output iconic variables 
    hv_ObjInBasePose = new HTuple();
    try
    {
      //
      hv_ObjInCamPose.Dispose();
      hv_ObjInCamPose = new HTuple(hv_PoseForCalibrationPlate);
      //
      hv_ToolInCamPose_Aux.Dispose();
      hv_ToolInCamPose_Aux = new HTuple(hv_ToolInCamPose);
      //
      hv_CamInToolPose.Dispose();
      HOperatorSet.PoseInvert(hv_ToolInCamPose, out hv_CamInToolPose);
      hv_CamInBasePose.Dispose();
      HOperatorSet.PoseCompose(hv_ToolInBasePose, hv_CamInToolPose, out hv_CamInBasePose);
      hv_ObjInBasePose.Dispose();
      HOperatorSet.PoseCompose(hv_CamInBasePose, hv_ObjInCamPose, out hv_ObjInBasePose);
      //
      // dev_inspect_ctrl(...); only in hdevelop
      //
      hv_osffetX.Dispose();
      hv_osffetX = 0;
      hv_osffetY.Dispose();
      hv_osffetY = 0;
      hv_osffetZ.Dispose();
      hv_osffetZ = 0;
      //
      hv_pto1.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_pto1 = (hv_ObjInBasePose.TupleSelect(
          0))+hv_osffetX;
      }
      hv_pto2.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_pto2 = (hv_ObjInBasePose.TupleSelect(
          1))+hv_osffetY;
      }
      hv_pto3.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_pto3 = (hv_ObjInBasePose.TupleSelect(
          2))+hv_osffetZ;
      }
      //
      if (hv_ObjInBasePose == null)
        hv_ObjInBasePose = new HTuple();
      hv_ObjInBasePose[0] = hv_pto1;
      if (hv_ObjInBasePose == null)
        hv_ObjInBasePose = new HTuple();
      hv_ObjInBasePose[1] = hv_pto2;
      if (hv_ObjInBasePose == null)
        hv_ObjInBasePose = new HTuple();
      hv_ObjInBasePose[2] = hv_pto3;
      //
      //
      hv_LapizInBasePose.Dispose();
      Get_Pose_Tool(hv_SerialHandle, out hv_LapizInBasePose);
      if (hv_DinOssfet == null)
        hv_DinOssfet = new HTuple();
      hv_DinOssfet[0] = (hv_LapizInBasePose.TupleSelect(0))-(hv_ObjInBasePose.TupleSelect(
          0));
      if (hv_DinOssfet == null)
        hv_DinOssfet = new HTuple();
      hv_DinOssfet[1] = (hv_LapizInBasePose.TupleSelect(1))-(hv_ObjInBasePose.TupleSelect(
          1));
      if (hv_DinOssfet == null)
        hv_DinOssfet = new HTuple();
      hv_DinOssfet[2] = (hv_LapizInBasePose.TupleSelect(2))-(hv_ObjInBasePose.TupleSelect(
          2));
      //
      hv_LapizInBasePose_Estimado.Dispose();
      Get_Pose_Tool(hv_SerialHandle, out hv_LapizInBasePose_Estimado);
      if (hv_DinOssfet == null)
        hv_DinOssfet = new HTuple();
      hv_DinOssfet[0] = (hv_LapizInBasePose.TupleSelect(0))-(hv_LapizInBasePose_Estimado.TupleSelect(
          0));
      if (hv_DinOssfet == null)
        hv_DinOssfet = new HTuple();
      hv_DinOssfet[1] = (hv_LapizInBasePose.TupleSelect(1))-(hv_LapizInBasePose_Estimado.TupleSelect(
          1));
      if (hv_DinOssfet == null)
        hv_DinOssfet = new HTuple();
      hv_DinOssfet[2] = (hv_LapizInBasePose.TupleSelect(2))-(hv_LapizInBasePose_Estimado.TupleSelect(
          2));
      //
      //
      //
      //
      HDevelopStop();
      //
      //

      hv_ObjInCamPose.Dispose();
      hv_ToolInCamPose_Aux.Dispose();
      hv_CamInToolPose.Dispose();
      hv_CamInBasePose.Dispose();
      hv_osffetX.Dispose();
      hv_osffetY.Dispose();
      hv_osffetZ.Dispose();
      hv_pto1.Dispose();
      hv_pto2.Dispose();
      hv_pto3.Dispose();
      hv_LapizInBasePose.Dispose();
      hv_DinOssfet.Dispose();
      hv_LapizInBasePose_Estimado.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_ObjInCamPose.Dispose();
      hv_ToolInCamPose_Aux.Dispose();
      hv_CamInToolPose.Dispose();
      hv_CamInBasePose.Dispose();
      hv_osffetX.Dispose();
      hv_osffetY.Dispose();
      hv_osffetZ.Dispose();
      hv_pto1.Dispose();
      hv_pto2.Dispose();
      hv_pto3.Dispose();
      hv_LapizInBasePose.Dispose();
      hv_DinOssfet.Dispose();
      hv_LapizInBasePose_Estimado.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Pose_Tool (HTuple hv_SerialHandle, out HTuple hv_ToolInBasePose)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_I = new HTuple(), hv_Tag_Lectura = new HTuple();
    HTuple hv_RV_CmdFotogen = new HTuple(), hv_Number = new HTuple();
    HTuple hv_posx = new HTuple(), hv_posy = new HTuple();
    HTuple hv_posz = new HTuple(), hv_Roll = new HTuple();
    HTuple hv_Pitch = new HTuple(), hv_Yaw = new HTuple();
    HTuple hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    hv_ToolInBasePose = new HTuple();
    try
    {
      HOperatorSet.WaitSeconds(0.1);

      try
      {

        hv_I.Dispose();
        hv_I = 0;
        //Leo Posicion del robot
        disp_message(hv_ExpDefaultWinHandle, "NO MOVER ROBOT", "window", 30, 12, 
            "black", "true");
        //
        hv_Tag_Lectura.Dispose();
        hv_Tag_Lectura = "_EV01_O_EjeX";
        hv_RV_CmdFotogen.Dispose();
        Read_EthernetIP_Data(hv_Tag_Lectura, hv_SerialHandle, out hv_RV_CmdFotogen);
        hv_Number.Dispose();
        HOperatorSet.TupleReal(hv_RV_CmdFotogen, out hv_Number);
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Number = (hv_Number/10000.0)-4000.0;
        hv_Number.Dispose();
        hv_Number = ExpTmpLocalVar_Number;
        }
        }
        //
        if (hv_posx == null)
          hv_posx = new HTuple();
        hv_posx[hv_I] = hv_Number;


        HOperatorSet.WaitSeconds(0.1);


        hv_Tag_Lectura.Dispose();
        hv_Tag_Lectura = "_EV01_O_EjeY";
        hv_RV_CmdFotogen.Dispose();
        Read_EthernetIP_Data(hv_Tag_Lectura, hv_SerialHandle, out hv_RV_CmdFotogen);
        hv_Number.Dispose();
        HOperatorSet.TupleReal(hv_RV_CmdFotogen, out hv_Number);
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Number = (hv_Number/10000.0)-4000.0;
        hv_Number.Dispose();
        hv_Number = ExpTmpLocalVar_Number;
        }
        }
        if (hv_posy == null)
          hv_posy = new HTuple();
        hv_posy[hv_I] = hv_Number;
        HOperatorSet.WaitSeconds(0.1);
        hv_Tag_Lectura.Dispose();
        hv_Tag_Lectura = "_EV01_O_EjeZ";
        hv_RV_CmdFotogen.Dispose();
        Read_EthernetIP_Data(hv_Tag_Lectura, hv_SerialHandle, out hv_RV_CmdFotogen);
        hv_Number.Dispose();
        HOperatorSet.TupleReal(hv_RV_CmdFotogen, out hv_Number);
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Number = (hv_Number/10000.0)-4000.0;
        hv_Number.Dispose();
        hv_Number = ExpTmpLocalVar_Number;
        }
        }
        if (hv_posz == null)
          hv_posz = new HTuple();
        hv_posz[hv_I] = hv_Number;
        HOperatorSet.WaitSeconds(0.1);
        hv_Tag_Lectura.Dispose();
        hv_Tag_Lectura = "_EV01_O_EjeC";
        hv_RV_CmdFotogen.Dispose();
        Read_EthernetIP_Data(hv_Tag_Lectura, hv_SerialHandle, out hv_RV_CmdFotogen);
        hv_Number.Dispose();
        HOperatorSet.TupleReal(hv_RV_CmdFotogen, out hv_Number);
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Number = (hv_Number/10000.0)-4000.0;
        hv_Number.Dispose();
        hv_Number = ExpTmpLocalVar_Number;
        }
        }
        if (hv_Roll == null)
          hv_Roll = new HTuple();
        hv_Roll[hv_I] = hv_Number;
        HOperatorSet.WaitSeconds(0.1);
        hv_Tag_Lectura.Dispose();
        hv_Tag_Lectura = "_EV01_O_EjeB";
        hv_RV_CmdFotogen.Dispose();
        Read_EthernetIP_Data(hv_Tag_Lectura, hv_SerialHandle, out hv_RV_CmdFotogen);
        HOperatorSet.WaitSeconds(0.1);
        hv_Number.Dispose();
        HOperatorSet.TupleReal(hv_RV_CmdFotogen, out hv_Number);
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Number = (hv_Number/10000.0)-4000;
        hv_Number.Dispose();
        hv_Number = ExpTmpLocalVar_Number;
        }
        }
        if (hv_Pitch == null)
          hv_Pitch = new HTuple();
        hv_Pitch[hv_I] = hv_Number;
        HOperatorSet.WaitSeconds(0.1);
        hv_Tag_Lectura.Dispose();
        hv_Tag_Lectura = "_EV01_O_EjeA";
        hv_RV_CmdFotogen.Dispose();
        Read_EthernetIP_Data(hv_Tag_Lectura, hv_SerialHandle, out hv_RV_CmdFotogen);
        hv_Number.Dispose();
        HOperatorSet.TupleReal(hv_RV_CmdFotogen, out hv_Number);
        HOperatorSet.WaitSeconds(0.1);
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Number = (hv_Number/10000)-4000;
        hv_Number.Dispose();
        hv_Number = ExpTmpLocalVar_Number;
        }
        }
        if (hv_Yaw == null)
          hv_Yaw = new HTuple();
        hv_Yaw[hv_I] = hv_Number;
        //
        //Read pose of tool in robot base coordinates (ToolInBasePose)
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_ToolInBasePose.Dispose();
        HOperatorSet.CreatePose(hv_posx.TupleSelect(hv_I), hv_posy.TupleSelect(hv_I), 
            hv_posz.TupleSelect(hv_I), hv_Roll.TupleSelect(hv_I), hv_Pitch.TupleSelect(
            hv_I), hv_Yaw.TupleSelect(hv_I), "Rp+T", "abg", "point", out hv_ToolInBasePose);
        }
        //
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);

        hv_ToolInBasePose.Dispose();
        hv_ToolInBasePose = new HTuple();
        hv_ToolInBasePose.Dispose();
        HOperatorSet.CreatePose(-1, -1, -1, -1, -1, -1, "Rp+T", "abg", "point", out hv_ToolInBasePose);
        //
      }




      hv_I.Dispose();
      hv_Tag_Lectura.Dispose();
      hv_RV_CmdFotogen.Dispose();
      hv_Number.Dispose();
      hv_posx.Dispose();
      hv_posy.Dispose();
      hv_posz.Dispose();
      hv_Roll.Dispose();
      hv_Pitch.Dispose();
      hv_Yaw.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_I.Dispose();
      hv_Tag_Lectura.Dispose();
      hv_RV_CmdFotogen.Dispose();
      hv_Number.Dispose();
      hv_posx.Dispose();
      hv_posy.Dispose();
      hv_posz.Dispose();
      hv_Roll.Dispose();
      hv_Pitch.Dispose();
      hv_Yaw.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Pose_Tool_COPY_1 (HTuple hv_SerialHandle, out HTuple hv_ToolInBasePose)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_I = new HTuple(), hv_Tag_Lectura = new HTuple();
    HTuple hv_RV_CmdFotogen = new HTuple(), hv_Number = new HTuple();
    HTuple hv_posx = new HTuple(), hv_posy = new HTuple();
    HTuple hv_posz = new HTuple(), hv_Roll = new HTuple();
    HTuple hv_Pitch = new HTuple(), hv_Yaw = new HTuple();
    HTuple hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    hv_ToolInBasePose = new HTuple();
    try
    {
      HOperatorSet.WaitSeconds(0.1);

      try
      {

        hv_I.Dispose();
        hv_I = 0;
        //Leo Posicion del robot
        disp_message(hv_ExpDefaultWinHandle, "NO MOVER ROBOT", "window", 30, 12, 
            "black", "true");

        hv_Tag_Lectura.Dispose();
        hv_Tag_Lectura = "_EV01_O_EjeX";
        hv_RV_CmdFotogen.Dispose();
        Read_EthernetIP_Data(hv_Tag_Lectura, hv_SerialHandle, out hv_RV_CmdFotogen);
        hv_Number.Dispose();
        HOperatorSet.TupleReal(hv_RV_CmdFotogen, out hv_Number);
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Number = (hv_Number/10000.0)-4000.0;
        hv_Number.Dispose();
        hv_Number = ExpTmpLocalVar_Number;
        }
        }

        if (hv_posx == null)
          hv_posx = new HTuple();
        hv_posx[hv_I] = hv_Number;


        HOperatorSet.WaitSeconds(0.1);


        hv_Tag_Lectura.Dispose();
        hv_Tag_Lectura = "_EV01_O_EjeY";
        hv_RV_CmdFotogen.Dispose();
        Read_EthernetIP_Data(hv_Tag_Lectura, hv_SerialHandle, out hv_RV_CmdFotogen);
        hv_Number.Dispose();
        HOperatorSet.TupleReal(hv_RV_CmdFotogen, out hv_Number);
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Number = (hv_Number/10000.0)-4000.0;
        hv_Number.Dispose();
        hv_Number = ExpTmpLocalVar_Number;
        }
        }
        if (hv_posy == null)
          hv_posy = new HTuple();
        hv_posy[hv_I] = hv_Number;
        HOperatorSet.WaitSeconds(0.1);
        hv_Tag_Lectura.Dispose();
        hv_Tag_Lectura = "_EV01_O_EjeZ";
        hv_RV_CmdFotogen.Dispose();
        Read_EthernetIP_Data(hv_Tag_Lectura, hv_SerialHandle, out hv_RV_CmdFotogen);
        hv_Number.Dispose();
        HOperatorSet.TupleReal(hv_RV_CmdFotogen, out hv_Number);
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Number = (hv_Number/10000.0)-4000.0;
        hv_Number.Dispose();
        hv_Number = ExpTmpLocalVar_Number;
        }
        }
        if (hv_posz == null)
          hv_posz = new HTuple();
        hv_posz[hv_I] = hv_Number;
        HOperatorSet.WaitSeconds(0.1);
        hv_Tag_Lectura.Dispose();
        hv_Tag_Lectura = "_EV01_O_EjeC";
        hv_RV_CmdFotogen.Dispose();
        Read_EthernetIP_Data(hv_Tag_Lectura, hv_SerialHandle, out hv_RV_CmdFotogen);
        hv_Number.Dispose();
        HOperatorSet.TupleReal(hv_RV_CmdFotogen, out hv_Number);
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Number = (hv_Number/10000.0)-4000.0;
        hv_Number.Dispose();
        hv_Number = ExpTmpLocalVar_Number;
        }
        }
        if (hv_Roll == null)
          hv_Roll = new HTuple();
        hv_Roll[hv_I] = hv_Number;
        HOperatorSet.WaitSeconds(0.1);
        hv_Tag_Lectura.Dispose();
        hv_Tag_Lectura = "_EV01_O_EjeB";
        hv_RV_CmdFotogen.Dispose();
        Read_EthernetIP_Data(hv_Tag_Lectura, hv_SerialHandle, out hv_RV_CmdFotogen);
        HOperatorSet.WaitSeconds(0.1);
        hv_Number.Dispose();
        HOperatorSet.TupleReal(hv_RV_CmdFotogen, out hv_Number);
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Number = (hv_Number/10000.0)-4000;
        hv_Number.Dispose();
        hv_Number = ExpTmpLocalVar_Number;
        }
        }
        if (hv_Pitch == null)
          hv_Pitch = new HTuple();
        hv_Pitch[hv_I] = hv_Number;
        HOperatorSet.WaitSeconds(0.1);
        hv_Tag_Lectura.Dispose();
        hv_Tag_Lectura = "_EV01_O_EjeA";
        hv_RV_CmdFotogen.Dispose();
        Read_EthernetIP_Data(hv_Tag_Lectura, hv_SerialHandle, out hv_RV_CmdFotogen);
        hv_Number.Dispose();
        HOperatorSet.TupleReal(hv_RV_CmdFotogen, out hv_Number);
        HOperatorSet.WaitSeconds(0.1);
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Number = (hv_Number/10000)-4000;
        hv_Number.Dispose();
        hv_Number = ExpTmpLocalVar_Number;
        }
        }
        if (hv_Yaw == null)
          hv_Yaw = new HTuple();
        hv_Yaw[hv_I] = hv_Number;

        //Read pose of tool in robot base coordinates (ToolInBasePose)
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_ToolInBasePose.Dispose();
        HOperatorSet.CreatePose(hv_posx.TupleSelect(hv_I), hv_posy.TupleSelect(hv_I), 
            hv_posz.TupleSelect(hv_I), hv_Roll.TupleSelect(hv_I), hv_Pitch.TupleSelect(
            hv_I), hv_Yaw.TupleSelect(hv_I), "Rp+T", "abg", "point", out hv_ToolInBasePose);
        }

      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);

        hv_ToolInBasePose.Dispose();
        hv_ToolInBasePose = new HTuple();
        hv_ToolInBasePose.Dispose();
        HOperatorSet.CreatePose(-1, -1, -1, -1, -1, -1, "Rp+T", "abg", "point", out hv_ToolInBasePose);

      }




      hv_I.Dispose();
      hv_Tag_Lectura.Dispose();
      hv_RV_CmdFotogen.Dispose();
      hv_Number.Dispose();
      hv_posx.Dispose();
      hv_posy.Dispose();
      hv_posz.Dispose();
      hv_Roll.Dispose();
      hv_Pitch.Dispose();
      hv_Yaw.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_I.Dispose();
      hv_Tag_Lectura.Dispose();
      hv_RV_CmdFotogen.Dispose();
      hv_Number.Dispose();
      hv_posx.Dispose();
      hv_posy.Dispose();
      hv_posz.Dispose();
      hv_Roll.Dispose();
      hv_Pitch.Dispose();
      hv_Yaw.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Puntero_Carga_BDD (HTuple hv_SerialHandle, out HTuple hv_VarSerial)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Peticion = new HTuple(), hv_DatoOk = new HTuple();
    HTuple hv_Conteo = new HTuple(), hv_Nchar = new HTuple();
    HTuple hv_FXcheck = new HTuple(), hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    hv_VarSerial = new HTuple();
    try
    {


      try
      {
        //
        hv_Peticion.Dispose();
        hv_Peticion = "BaseDatos;Dinamica";

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.WriteSerial(hv_SerialHandle, hv_Peticion.TupleOrds());
        }


        hv_DatoOk.Dispose();
        hv_DatoOk = 0;
        hv_Conteo.Dispose();
        hv_Conteo = 0;
        while ((int)((new HTuple(hv_DatoOk.TupleLess(1))).TupleAnd(new HTuple(hv_Conteo.TupleLess(
            50)))) != 0)
        {

          //Numero de caracteres a leer
          hv_Nchar.Dispose();
          HOperatorSet.ReadSerial(hv_SerialHandle, 10, out hv_Nchar);
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Nchar = hv_Nchar.TupleChrt()
              ;
          hv_Nchar.Dispose();
          hv_Nchar = ExpTmpLocalVar_Nchar;
          }
          }
          hv_DatoOk.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_DatoOk = new HTuple(hv_Nchar.TupleLength()
              );
          }
          hv_VarSerial.Dispose();
          HOperatorSet.TupleNumber(hv_Nchar, out hv_VarSerial);
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Conteo = hv_Conteo+1;
          hv_Conteo.Dispose();
          hv_Conteo = ExpTmpLocalVar_Conteo;
          }
          }
          hv_FXcheck.Dispose();
          hv_FXcheck = 1;
        }

        if ((int)(new HTuple(hv_Conteo.TupleGreaterEqual(10))) != 0)
        {

          hv_FXcheck.Dispose();
          hv_FXcheck = 0;
        }
        else
        {
          hv_FXcheck.Dispose();
          hv_FXcheck = 1;
        }

      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_VarSerial.Dispose();
        hv_VarSerial = 0;
        //Send_Data_Error (Exception, SerialHandle, FXcheck)
      }

      hv_Peticion.Dispose();
      hv_DatoOk.Dispose();
      hv_Conteo.Dispose();
      hv_Nchar.Dispose();
      hv_FXcheck.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Peticion.Dispose();
      hv_DatoOk.Dispose();
      hv_Conteo.Dispose();
      hv_Nchar.Dispose();
      hv_FXcheck.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Puntero_Cerrar_SistemaV1 (HTuple hv_SerialHandle, out HTuple hv_VarSerial)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Peticion = new HTuple(), hv_DatoOk = new HTuple();
    HTuple hv_Conteo = new HTuple(), hv_Nchar = new HTuple();
    HTuple hv_FXcheck = new HTuple(), hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    hv_VarSerial = new HTuple();
    try
    {


      try
      {
        //
        hv_Peticion.Dispose();
        hv_Peticion = "BaseDatos;CerrarVision_Uno";

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.WriteSerial(hv_SerialHandle, hv_Peticion.TupleOrds());
        }


        hv_DatoOk.Dispose();
        hv_DatoOk = 0;
        hv_Conteo.Dispose();
        hv_Conteo = 0;
        while ((int)((new HTuple(hv_DatoOk.TupleLess(1))).TupleAnd(new HTuple(hv_Conteo.TupleLess(
            50)))) != 0)
        {

          //Numero de caracteres a leer
          hv_Nchar.Dispose();
          HOperatorSet.ReadSerial(hv_SerialHandle, 40, out hv_Nchar);
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Nchar = hv_Nchar.TupleChrt()
              ;
          hv_Nchar.Dispose();
          hv_Nchar = ExpTmpLocalVar_Nchar;
          }
          }
          hv_DatoOk.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_DatoOk = new HTuple(hv_Nchar.TupleLength()
              );
          }
          hv_VarSerial.Dispose();
          hv_VarSerial = new HTuple(hv_Nchar);
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Conteo = hv_Conteo+1;
          hv_Conteo.Dispose();
          hv_Conteo = ExpTmpLocalVar_Conteo;
          }
          }
          hv_FXcheck.Dispose();
          hv_FXcheck = 1;
        }

        if ((int)(new HTuple(hv_Conteo.TupleGreaterEqual(10))) != 0)
        {

          hv_FXcheck.Dispose();
          hv_FXcheck = 0;
        }
        else
        {
          hv_FXcheck.Dispose();
          hv_FXcheck = 1;
        }

      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_VarSerial.Dispose();
        hv_VarSerial = 0;
        //Send_Data_Error (Exception, SerialHandle, FXcheck)
      }


      if ((int)(new HTuple(hv_VarSerial.TupleEqual("Cerrar_Programa"))) != 0)
      {


        hv_Peticion.Dispose();
        hv_DatoOk.Dispose();
        hv_Conteo.Dispose();
        hv_Nchar.Dispose();
        hv_FXcheck.Dispose();
        hv_Exception.Dispose();

        return;
      }
      else
      {
        hv_VarSerial.Dispose();
        hv_VarSerial = "MantenVision";
      }


      hv_Peticion.Dispose();
      hv_DatoOk.Dispose();
      hv_Conteo.Dispose();
      hv_Nchar.Dispose();
      hv_FXcheck.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Peticion.Dispose();
      hv_DatoOk.Dispose();
      hv_Conteo.Dispose();
      hv_Nchar.Dispose();
      hv_FXcheck.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Puntero_Cerrar_SistemaV1_COPY_1 (HTuple hv_SerialHandle, out HTuple hv_VarSerial)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Peticion = new HTuple(), hv_DatoOk = new HTuple();
    HTuple hv_Conteo = new HTuple(), hv_Nchar = new HTuple();
    HTuple hv_FXcheck = new HTuple(), hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    hv_VarSerial = new HTuple();
    try
    {


      try
      {

        hv_Peticion.Dispose();
        hv_Peticion = "BaseDatos;CerrarVision_Uno";

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.WriteSerial(hv_SerialHandle, hv_Peticion.TupleOrds());
        }


        hv_DatoOk.Dispose();
        hv_DatoOk = 0;
        hv_Conteo.Dispose();
        hv_Conteo = 0;
        while ((int)((new HTuple(hv_DatoOk.TupleLess(1))).TupleAnd(new HTuple(hv_Conteo.TupleLess(
            50)))) != 0)
        {

          //Numero de caracteres a leer
          hv_Nchar.Dispose();
          HOperatorSet.ReadSerial(hv_SerialHandle, 40, out hv_Nchar);
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Nchar = hv_Nchar.TupleChrt()
              ;
          hv_Nchar.Dispose();
          hv_Nchar = ExpTmpLocalVar_Nchar;
          }
          }
          hv_DatoOk.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_DatoOk = new HTuple(hv_Nchar.TupleLength()
              );
          }
          hv_VarSerial.Dispose();
          hv_VarSerial = new HTuple(hv_Nchar);
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Conteo = hv_Conteo+1;
          hv_Conteo.Dispose();
          hv_Conteo = ExpTmpLocalVar_Conteo;
          }
          }
          hv_FXcheck.Dispose();
          hv_FXcheck = 1;
        }

        if ((int)(new HTuple(hv_Conteo.TupleGreaterEqual(10))) != 0)
        {

          hv_FXcheck.Dispose();
          hv_FXcheck = 0;
        }
        else
        {
          hv_FXcheck.Dispose();
          hv_FXcheck = 1;
        }

      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_VarSerial.Dispose();
        hv_VarSerial = 0;
        //Send_Data_Error (Exception, SerialHandle, FXcheck)
      }


      if ((int)(new HTuple(hv_VarSerial.TupleEqual("Cerrar_Programa"))) != 0)
      {


        hv_Peticion.Dispose();
        hv_DatoOk.Dispose();
        hv_Conteo.Dispose();
        hv_Nchar.Dispose();
        hv_FXcheck.Dispose();
        hv_Exception.Dispose();

        return;
      }
      else
      {
        hv_VarSerial.Dispose();
        hv_VarSerial = "MantenVision";
      }


      hv_Peticion.Dispose();
      hv_DatoOk.Dispose();
      hv_Conteo.Dispose();
      hv_Nchar.Dispose();
      hv_FXcheck.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Peticion.Dispose();
      hv_DatoOk.Dispose();
      hv_Conteo.Dispose();
      hv_Nchar.Dispose();
      hv_FXcheck.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_PunteroBDD (HTuple hv_SerialHandle, out HTuple hv_VarSerial)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Peticion = new HTuple(), hv_DatoOk = new HTuple();
    HTuple hv_Conteo = new HTuple(), hv_Nchar = new HTuple();
    HTuple hv_FXcheck = new HTuple(), hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    hv_VarSerial = new HTuple();
    try
    {


      try
      {
        //
        hv_Peticion.Dispose();
        hv_Peticion = "BaseDatos;PunteroBDD";

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.WriteSerial(hv_SerialHandle, hv_Peticion.TupleOrds());
        }


        hv_DatoOk.Dispose();
        hv_DatoOk = 0;
        hv_Conteo.Dispose();
        hv_Conteo = 0;
        while ((int)((new HTuple(hv_DatoOk.TupleLess(1))).TupleAnd(new HTuple(hv_Conteo.TupleLess(
            50)))) != 0)
        {

          //Numero de caracteres a leer
          hv_Nchar.Dispose();
          HOperatorSet.ReadSerial(hv_SerialHandle, 10, out hv_Nchar);
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Nchar = hv_Nchar.TupleChrt()
              ;
          hv_Nchar.Dispose();
          hv_Nchar = ExpTmpLocalVar_Nchar;
          }
          }
          hv_DatoOk.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_DatoOk = new HTuple(hv_Nchar.TupleLength()
              );
          }
          hv_VarSerial.Dispose();
          HOperatorSet.TupleNumber(hv_Nchar, out hv_VarSerial);
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Conteo = hv_Conteo+1;
          hv_Conteo.Dispose();
          hv_Conteo = ExpTmpLocalVar_Conteo;
          }
          }
          hv_FXcheck.Dispose();
          hv_FXcheck = 1;
        }

        if ((int)(new HTuple(hv_Conteo.TupleGreaterEqual(10))) != 0)
        {

          hv_FXcheck.Dispose();
          hv_FXcheck = 0;
        }
        else
        {
          hv_FXcheck.Dispose();
          hv_FXcheck = 1;
        }

      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_FXcheck.Dispose();
        Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_FXcheck);
      }

      hv_Peticion.Dispose();
      hv_DatoOk.Dispose();
      hv_Conteo.Dispose();
      hv_Nchar.Dispose();
      hv_FXcheck.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Peticion.Dispose();
      hv_DatoOk.Dispose();
      hv_Conteo.Dispose();
      hv_Nchar.Dispose();
      hv_FXcheck.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_PunteroBDD_COPY_1 (HTuple hv_SerialHandle, out HTuple hv_VarSerial)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Peticion = new HTuple(), hv_DatoOk = new HTuple();
    HTuple hv_Conteo = new HTuple(), hv_Nchar = new HTuple();
    HTuple hv_FXcheck = new HTuple(), hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    hv_VarSerial = new HTuple();
    try
    {


      try
      {

        hv_Peticion.Dispose();
        hv_Peticion = "BaseDatos;PunteroBDD";

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.WriteSerial(hv_SerialHandle, hv_Peticion.TupleOrds());
        }


        hv_DatoOk.Dispose();
        hv_DatoOk = 0;
        hv_Conteo.Dispose();
        hv_Conteo = 0;
        while ((int)((new HTuple(hv_DatoOk.TupleLess(1))).TupleAnd(new HTuple(hv_Conteo.TupleLess(
            50)))) != 0)
        {

          //Numero de caracteres a leer
          hv_Nchar.Dispose();
          HOperatorSet.ReadSerial(hv_SerialHandle, 10, out hv_Nchar);
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Nchar = hv_Nchar.TupleChrt()
              ;
          hv_Nchar.Dispose();
          hv_Nchar = ExpTmpLocalVar_Nchar;
          }
          }
          hv_DatoOk.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_DatoOk = new HTuple(hv_Nchar.TupleLength()
              );
          }
          hv_VarSerial.Dispose();
          HOperatorSet.TupleNumber(hv_Nchar, out hv_VarSerial);
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Conteo = hv_Conteo+1;
          hv_Conteo.Dispose();
          hv_Conteo = ExpTmpLocalVar_Conteo;
          }
          }
          hv_FXcheck.Dispose();
          hv_FXcheck = 1;
        }

        if ((int)(new HTuple(hv_Conteo.TupleGreaterEqual(10))) != 0)
        {

          hv_FXcheck.Dispose();
          hv_FXcheck = 0;
        }
        else
        {
          hv_FXcheck.Dispose();
          hv_FXcheck = 1;
        }

      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);

      }

      hv_Peticion.Dispose();
      hv_DatoOk.Dispose();
      hv_Conteo.Dispose();
      hv_Nchar.Dispose();
      hv_FXcheck.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Peticion.Dispose();
      hv_DatoOk.Dispose();
      hv_Conteo.Dispose();
      hv_Nchar.Dispose();
      hv_FXcheck.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_PunteroBDD_COPY_2 (HTuple hv_SerialHandle, out HTuple hv_VarSerial)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Peticion = new HTuple(), hv_DatoOk = new HTuple();
    HTuple hv_Conteo = new HTuple(), hv_Nchar = new HTuple();
    HTuple hv_FXcheck = new HTuple(), hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    hv_VarSerial = new HTuple();
    try
    {


      try
      {

        hv_Peticion.Dispose();
        hv_Peticion = "BaseDatos;PunteroBDD";

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.WriteSerial(hv_SerialHandle, hv_Peticion.TupleOrds());
        }


        hv_DatoOk.Dispose();
        hv_DatoOk = 0;
        hv_Conteo.Dispose();
        hv_Conteo = 0;
        while ((int)((new HTuple(hv_DatoOk.TupleLess(1))).TupleAnd(new HTuple(hv_Conteo.TupleLess(
            50)))) != 0)
        {

          //Numero de caracteres a leer
          hv_Nchar.Dispose();
          HOperatorSet.ReadSerial(hv_SerialHandle, 10, out hv_Nchar);
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Nchar = hv_Nchar.TupleChrt()
              ;
          hv_Nchar.Dispose();
          hv_Nchar = ExpTmpLocalVar_Nchar;
          }
          }
          hv_DatoOk.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_DatoOk = new HTuple(hv_Nchar.TupleLength()
              );
          }
          hv_VarSerial.Dispose();
          HOperatorSet.TupleNumber(hv_Nchar, out hv_VarSerial);
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Conteo = hv_Conteo+1;
          hv_Conteo.Dispose();
          hv_Conteo = ExpTmpLocalVar_Conteo;
          }
          }
          hv_FXcheck.Dispose();
          hv_FXcheck = 1;
        }

        if ((int)(new HTuple(hv_Conteo.TupleGreaterEqual(10))) != 0)
        {

          hv_FXcheck.Dispose();
          hv_FXcheck = 0;
        }
        else
        {
          hv_FXcheck.Dispose();
          hv_FXcheck = 1;
        }

      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_FXcheck.Dispose();
        Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_FXcheck);
      }

      hv_Peticion.Dispose();
      hv_DatoOk.Dispose();
      hv_Conteo.Dispose();
      hv_Nchar.Dispose();
      hv_FXcheck.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Peticion.Dispose();
      hv_DatoOk.Dispose();
      hv_Conteo.Dispose();
      hv_Nchar.Dispose();
      hv_FXcheck.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Rectif_Image (HObject ho_Image, out HObject ho_ImageMapped, HTuple hv_CameraParameters, 
      HTuple hv_CameraPose, out HTuple hv_ScaleForCenteredImage, out HTuple hv_PoseForCenteredImage)
  {




    // Local iconic variables 

    HObject ho_ImageOut=null, ho_Map;

    // Local control variables 

    HTuple hv_Width = new HTuple(), hv_Height = new HTuple();
    HTuple hv_CenterRow = new HTuple(), hv_CenterCol = new HTuple();
    HTuple hv_WidthMappedImage = new HTuple(), hv_HeightMappedImage = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ImageMapped);
    HOperatorSet.GenEmptyObj(out ho_ImageOut);
    HOperatorSet.GenEmptyObj(out ho_Map);
    hv_ScaleForCenteredImage = new HTuple();
    hv_PoseForCenteredImage = new HTuple();
    try
    {
      ho_ImageOut.Dispose();
      ho_ImageOut = new HObject(ho_Image);
      hv_Width.Dispose();hv_Height.Dispose();
      HOperatorSet.GetImageSize(ho_ImageOut, out hv_Width, out hv_Height);
      hv_CenterRow.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_CenterRow = hv_Width/2;
      }
      hv_CenterCol.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_CenterCol = hv_Height/2;
      }
      hv_WidthMappedImage.Dispose();
      hv_WidthMappedImage = new HTuple(hv_Width);
      hv_HeightMappedImage.Dispose();
      hv_HeightMappedImage = new HTuple(hv_Height);
      hv_ScaleForCenteredImage.Dispose();hv_PoseForCenteredImage.Dispose();
      parameters_image_to_world_plane_centered(hv_CameraParameters, hv_CameraPose, 
          hv_CenterRow, hv_CenterCol, hv_WidthMappedImage, hv_HeightMappedImage, 
          out hv_ScaleForCenteredImage, out hv_PoseForCenteredImage);
      //
      //
      ho_Map.Dispose();
      HOperatorSet.GenImageToWorldPlaneMap(out ho_Map, hv_CameraParameters, hv_PoseForCenteredImage, 
          hv_Width, hv_Height, hv_WidthMappedImage, hv_HeightMappedImage, hv_ScaleForCenteredImage, 
          "bilinear");
      ho_ImageMapped.Dispose();
      HOperatorSet.MapImage(ho_ImageOut, ho_Map, out ho_ImageMapped);
      //
      ho_ImageOut.Dispose();
      ho_Map.Dispose();

      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_CenterRow.Dispose();
      hv_CenterCol.Dispose();
      hv_WidthMappedImage.Dispose();
      hv_HeightMappedImage.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_ImageOut.Dispose();
      ho_Map.Dispose();

      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_CenterRow.Dispose();
      hv_CenterCol.Dispose();
      hv_WidthMappedImage.Dispose();
      hv_HeightMappedImage.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Robot_Pose (HTuple hv_SerialHandle, out HTuple hv_ToolInBasePose)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Escalamiento = new HTuple(), hv_Tag_Lectura = new HTuple();
    HTuple hv_RV_CmdFotogen = new HTuple(), hv_Number = new HTuple();
    HTuple hv_posx = new HTuple(), hv_posy = new HTuple();
    HTuple hv_posz = new HTuple(), hv_Roll = new HTuple();
    HTuple hv_Pitch = new HTuple(), hv_Yaw = new HTuple();
    HTuple hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    hv_ToolInBasePose = new HTuple();
    try
    {
      try
      {

        hv_Escalamiento.Dispose();
        hv_Escalamiento = 1;
        hv_Tag_Lectura.Dispose();
        hv_Tag_Lectura = "_EV01_O_EjeX";
        hv_RV_CmdFotogen.Dispose();
        Read_EthernetIP_Data(hv_Tag_Lectura, hv_SerialHandle, out hv_RV_CmdFotogen);
        hv_Number.Dispose();
        HOperatorSet.TupleReal(hv_RV_CmdFotogen, out hv_Number);
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Number = (hv_Number/10000.0)-4000.0;
        hv_Number.Dispose();
        hv_Number = ExpTmpLocalVar_Number;
        }
        }
        //dev_inspect_ctrl (Number)
        hv_posx.Dispose();
        hv_posx = new HTuple(hv_Number);

        hv_Tag_Lectura.Dispose();
        hv_Tag_Lectura = "_EV01_O_EjeY";
        hv_RV_CmdFotogen.Dispose();
        Read_EthernetIP_Data(hv_Tag_Lectura, hv_SerialHandle, out hv_RV_CmdFotogen);
        hv_Number.Dispose();
        HOperatorSet.TupleReal(hv_RV_CmdFotogen, out hv_Number);
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Number = (hv_Number/10000.0)-4000.0;
        hv_Number.Dispose();
        hv_Number = ExpTmpLocalVar_Number;
        }
        }
        hv_posy.Dispose();
        hv_posy = new HTuple(hv_Number);
        //
        hv_Tag_Lectura.Dispose();
        hv_Tag_Lectura = "_EV01_O_EjeZ";
        hv_RV_CmdFotogen.Dispose();
        Read_EthernetIP_Data(hv_Tag_Lectura, hv_SerialHandle, out hv_RV_CmdFotogen);
        hv_Number.Dispose();
        HOperatorSet.TupleReal(hv_RV_CmdFotogen, out hv_Number);
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Number = (hv_Number/10000.0)-4000.0;
        hv_Number.Dispose();
        hv_Number = ExpTmpLocalVar_Number;
        }
        }
        hv_posz.Dispose();
        hv_posz = new HTuple(hv_Number);
        //
        hv_Tag_Lectura.Dispose();
        hv_Tag_Lectura = "_EV01_O_EjeC";
        hv_RV_CmdFotogen.Dispose();
        Read_EthernetIP_Data(hv_Tag_Lectura, hv_SerialHandle, out hv_RV_CmdFotogen);
        hv_Number.Dispose();
        HOperatorSet.TupleReal(hv_RV_CmdFotogen, out hv_Number);
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Number = (hv_Number/10000.0)-4000.0;
        hv_Number.Dispose();
        hv_Number = ExpTmpLocalVar_Number;
        }
        }
        hv_Roll.Dispose();
        hv_Roll = new HTuple(hv_Number);
        //
        hv_Tag_Lectura.Dispose();
        hv_Tag_Lectura = "_EV01_O_EjeB";
        hv_RV_CmdFotogen.Dispose();
        Read_EthernetIP_Data(hv_Tag_Lectura, hv_SerialHandle, out hv_RV_CmdFotogen);
        //
        hv_Number.Dispose();
        HOperatorSet.TupleReal(hv_RV_CmdFotogen, out hv_Number);
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Number = (hv_Number/10000.0)-4000;
        hv_Number.Dispose();
        hv_Number = ExpTmpLocalVar_Number;
        }
        }
        hv_Pitch.Dispose();
        hv_Pitch = new HTuple(hv_Number);
        //
        hv_Tag_Lectura.Dispose();
        hv_Tag_Lectura = "_EV01_O_EjeA";
        hv_RV_CmdFotogen.Dispose();
        Read_EthernetIP_Data(hv_Tag_Lectura, hv_SerialHandle, out hv_RV_CmdFotogen);
        hv_Number.Dispose();
        HOperatorSet.TupleReal(hv_RV_CmdFotogen, out hv_Number);
        //
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Number = (hv_Number/10000)-4000;
        hv_Number.Dispose();
        hv_Number = ExpTmpLocalVar_Number;
        }
        }
        hv_Yaw.Dispose();
        hv_Yaw = new HTuple(hv_Number);
        //
        //Read pose of tool in robot base coordinates (ToolInBasePose)
        hv_ToolInBasePose.Dispose();
        HOperatorSet.CreatePose(hv_posx, hv_posy, hv_posz, hv_Roll, hv_Pitch, hv_Yaw, 
            "Rp+T", "abg", "point", out hv_ToolInBasePose);
        //
        //dev_inspect_ctrl (ToolInBasePose)

        hv_Escalamiento.Dispose();
        hv_Tag_Lectura.Dispose();
        hv_RV_CmdFotogen.Dispose();
        hv_Number.Dispose();
        hv_posx.Dispose();
        hv_posy.Dispose();
        hv_posz.Dispose();
        hv_Roll.Dispose();
        hv_Pitch.Dispose();
        hv_Yaw.Dispose();
        hv_Exception.Dispose();

        return;

      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);


      }












    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Escalamiento.Dispose();
      hv_Tag_Lectura.Dispose();
      hv_RV_CmdFotogen.Dispose();
      hv_Number.Dispose();
      hv_posx.Dispose();
      hv_posy.Dispose();
      hv_posz.Dispose();
      hv_Roll.Dispose();
      hv_Pitch.Dispose();
      hv_Yaw.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Robot_Pose_COPY_1 (HTuple hv_SerialHandle, out HTuple hv_ToolInBasePose)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Escalamiento = new HTuple(), hv_Tag_Lectura = new HTuple();
    HTuple hv_RV_CmdFotogen = new HTuple(), hv_Number = new HTuple();
    HTuple hv_posx = new HTuple(), hv_posy = new HTuple();
    HTuple hv_posz = new HTuple(), hv_Roll = new HTuple();
    HTuple hv_Pitch = new HTuple(), hv_Yaw = new HTuple();
    HTuple hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    hv_ToolInBasePose = new HTuple();
    try
    {
      try
      {

        hv_Escalamiento.Dispose();
        hv_Escalamiento = 1;
        hv_Tag_Lectura.Dispose();
        hv_Tag_Lectura = "_EV01_O_EjeX";
        hv_RV_CmdFotogen.Dispose();
        Read_EthernetIP_Data(hv_Tag_Lectura, hv_SerialHandle, out hv_RV_CmdFotogen);
        hv_Number.Dispose();
        HOperatorSet.TupleReal(hv_RV_CmdFotogen, out hv_Number);
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Number = (hv_Number/10000.0)-4000.0;
        hv_Number.Dispose();
        hv_Number = ExpTmpLocalVar_Number;
        }
        }
        //dev_inspect_ctrl (Number)
        hv_posx.Dispose();
        hv_posx = new HTuple(hv_Number);

        hv_Tag_Lectura.Dispose();
        hv_Tag_Lectura = "_EV01_O_EjeY";
        hv_RV_CmdFotogen.Dispose();
        Read_EthernetIP_Data(hv_Tag_Lectura, hv_SerialHandle, out hv_RV_CmdFotogen);
        hv_Number.Dispose();
        HOperatorSet.TupleReal(hv_RV_CmdFotogen, out hv_Number);
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Number = (hv_Number/10000.0)-4000.0;
        hv_Number.Dispose();
        hv_Number = ExpTmpLocalVar_Number;
        }
        }
        hv_posy.Dispose();
        hv_posy = new HTuple(hv_Number);

        hv_Tag_Lectura.Dispose();
        hv_Tag_Lectura = "_EV01_O_EjeZ";
        hv_RV_CmdFotogen.Dispose();
        Read_EthernetIP_Data(hv_Tag_Lectura, hv_SerialHandle, out hv_RV_CmdFotogen);
        hv_Number.Dispose();
        HOperatorSet.TupleReal(hv_RV_CmdFotogen, out hv_Number);
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Number = (hv_Number/10000.0)-4000.0;
        hv_Number.Dispose();
        hv_Number = ExpTmpLocalVar_Number;
        }
        }
        hv_posz.Dispose();
        hv_posz = new HTuple(hv_Number);

        hv_Tag_Lectura.Dispose();
        hv_Tag_Lectura = "_EV01_O_EjeC";
        hv_RV_CmdFotogen.Dispose();
        Read_EthernetIP_Data(hv_Tag_Lectura, hv_SerialHandle, out hv_RV_CmdFotogen);
        hv_Number.Dispose();
        HOperatorSet.TupleReal(hv_RV_CmdFotogen, out hv_Number);
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Number = (hv_Number/10000.0)-4000.0;
        hv_Number.Dispose();
        hv_Number = ExpTmpLocalVar_Number;
        }
        }
        hv_Roll.Dispose();
        hv_Roll = new HTuple(hv_Number);

        hv_Tag_Lectura.Dispose();
        hv_Tag_Lectura = "_EV01_O_EjeB";
        hv_RV_CmdFotogen.Dispose();
        Read_EthernetIP_Data(hv_Tag_Lectura, hv_SerialHandle, out hv_RV_CmdFotogen);

        hv_Number.Dispose();
        HOperatorSet.TupleReal(hv_RV_CmdFotogen, out hv_Number);
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Number = (hv_Number/10000.0)-4000;
        hv_Number.Dispose();
        hv_Number = ExpTmpLocalVar_Number;
        }
        }
        hv_Pitch.Dispose();
        hv_Pitch = new HTuple(hv_Number);

        hv_Tag_Lectura.Dispose();
        hv_Tag_Lectura = "_EV01_O_EjeA";
        hv_RV_CmdFotogen.Dispose();
        Read_EthernetIP_Data(hv_Tag_Lectura, hv_SerialHandle, out hv_RV_CmdFotogen);
        hv_Number.Dispose();
        HOperatorSet.TupleReal(hv_RV_CmdFotogen, out hv_Number);

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Number = (hv_Number/10000)-4000;
        hv_Number.Dispose();
        hv_Number = ExpTmpLocalVar_Number;
        }
        }
        hv_Yaw.Dispose();
        hv_Yaw = new HTuple(hv_Number);

        //Read pose of tool in robot base coordinates (ToolInBasePose)
        hv_ToolInBasePose.Dispose();
        HOperatorSet.CreatePose(hv_posx, hv_posy, hv_posz, hv_Roll, hv_Pitch, hv_Yaw, 
            "Rp+T", "abg", "point", out hv_ToolInBasePose);

        //dev_inspect_ctrl (ToolInBasePose)

        hv_Escalamiento.Dispose();
        hv_Tag_Lectura.Dispose();
        hv_RV_CmdFotogen.Dispose();
        hv_Number.Dispose();
        hv_posx.Dispose();
        hv_posy.Dispose();
        hv_posz.Dispose();
        hv_Roll.Dispose();
        hv_Pitch.Dispose();
        hv_Yaw.Dispose();
        hv_Exception.Dispose();

        return;

      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);


      }












    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Escalamiento.Dispose();
      hv_Tag_Lectura.Dispose();
      hv_RV_CmdFotogen.Dispose();
      hv_Number.Dispose();
      hv_posx.Dispose();
      hv_posy.Dispose();
      hv_posz.Dispose();
      hv_Roll.Dispose();
      hv_Pitch.Dispose();
      hv_Yaw.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_ROI3D_Pallet (out HTuple hv_ROI3D_NullFrame, out HTuple hv_ROI3D_rotate)
  {


    // Local iconic variables 

    // Local control variables 

    HTuple hv_Parametros_Visualizacion = new HTuple();
    HTuple hv_Valores_Visualizacion = new HTuple(), hv_VisualizationPlaneSize = new HTuple();
    HTuple hv_Z_alt = new HTuple(), hv_Pose = new HTuple();
    HTuple hv_Plano = new HTuple(), hv_PoseEsquina = new HTuple();
    HTuple hv_Trans_X = new HTuple(), hv_Trans_Y = new HTuple();
    HTuple hv_Ncuadrantes = new HTuple(), hv_Index = new HTuple();
    HTuple hv_Alto_Sector = new HTuple(), hv_Plano_1 = new HTuple();
    HTuple hv_ThreshDistance = new HTuple(), hv_Modelos3d = new HTuple();
    HTuple hv_Vector_Segmento = new HTuple(), hv_Index_Y = new HTuple();
    HTuple hv_Index_X = new HTuple(), hv_Pose_Trans = new HTuple();
    HTuple hv_ObjectModel3DRigidTrans1 = new HTuple(), hv_ROI3D_rotate_Aux = new HTuple();
    // Initialize local and output iconic variables 
    hv_ROI3D_NullFrame = new HTuple();
    hv_ROI3D_rotate = new HTuple();
    try
    {
      hv_Parametros_Visualizacion.Dispose();
      hv_Parametros_Visualizacion = new HTuple();
      hv_Parametros_Visualizacion[0] = "colored";
      hv_Parametros_Visualizacion[1] = "disp_pose";
      hv_Parametros_Visualizacion[2] = "point_size";
      hv_Valores_Visualizacion.Dispose();
      hv_Valores_Visualizacion = new HTuple();
      hv_Valores_Visualizacion[0] = 12;
      hv_Valores_Visualizacion[1] = "true";
      hv_Valores_Visualizacion[2] = 25;



      //Creo Plano
      //****************************************************
      //Dimenciones del cubo/2 en XY en mm
      hv_VisualizationPlaneSize.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_VisualizationPlaneSize = 1000.0/2;
      }
      hv_Z_alt.Dispose();
      hv_Z_alt = 3000;
      //****************************************************

      hv_Pose.Dispose();
      HOperatorSet.CreatePose(0, 0, 0, 0, 0, 0, "Rp+T", "gba", "point", out hv_Pose);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Plano.Dispose();
      HOperatorSet.GenPlaneObjectModel3d(hv_Pose, (((new HTuple(-1)).TupleConcat(
          -1)).TupleConcat(1)).TupleConcat(1)*hv_VisualizationPlaneSize, (((new HTuple(-1)).TupleConcat(
          1)).TupleConcat(1)).TupleConcat(-1)*hv_VisualizationPlaneSize, out hv_Plano);
      }
      hv_PoseEsquina.Dispose();
      HOperatorSet.CreatePose(hv_VisualizationPlaneSize, hv_VisualizationPlaneSize, 
          0, 0, 0, 0, "Rp+T", "gba", "point", out hv_PoseEsquina);
      {
      HTuple ExpTmpOutVar_0;
      HOperatorSet.RigidTransObjectModel3d(hv_Plano, hv_PoseEsquina, out ExpTmpOutVar_0);
      hv_Plano.Dispose();
      hv_Plano = ExpTmpOutVar_0;
      }
      //visualize_object_model_3d (200000, [Plano], [], [], Parametros_Visualizacion, Valores_Visualizacion, [], [], [], PoseOut1)


      hv_Trans_X.Dispose();
      hv_Trans_X = new HTuple();
      hv_Trans_Y.Dispose();
      hv_Trans_Y = new HTuple();
      hv_Ncuadrantes.Dispose();
      hv_Ncuadrantes = 3.0;
      if (hv_Trans_X == null)
        hv_Trans_X = new HTuple();
      hv_Trans_X[0] = 0;
      if (hv_Trans_Y == null)
        hv_Trans_Y = new HTuple();
      hv_Trans_Y[0] = 0;
      HTuple end_val24 = hv_Ncuadrantes;
      HTuple step_val24 = 1;
      for (hv_Index=1; hv_Index.Continue(end_val24, step_val24); hv_Index = hv_Index.TupleAdd(step_val24))
      {
        if (hv_Trans_X == null)
          hv_Trans_X = new HTuple();
        hv_Trans_X[hv_Index] = (hv_VisualizationPlaneSize/hv_Ncuadrantes)*hv_Index;
        if (hv_Trans_Y == null)
          hv_Trans_Y = new HTuple();
        hv_Trans_Y[hv_Index] = (hv_VisualizationPlaneSize/hv_Ncuadrantes)*hv_Index;
      }

      hv_Alto_Sector.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Alto_Sector = (hv_VisualizationPlaneSize*2)/hv_Ncuadrantes;
      }


      hv_Pose.Dispose();
      HOperatorSet.CreatePose(0, 0, -1, 0, 0, 0, "Rp+T", "gba", "point", out hv_Pose);

      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_PoseEsquina.Dispose();
      HOperatorSet.CreatePose(-(hv_Trans_X.TupleSelect(1)), -(hv_Trans_Y.TupleSelect(
          1)), hv_Z_alt*0.5, 0, 0, 0, "Rp+T", "gba", "point", out hv_PoseEsquina);
      }
      hv_Plano_1.Dispose();
      HOperatorSet.GenBoxObjectModel3d(hv_Pose, hv_Alto_Sector, hv_Alto_Sector, hv_Z_alt, 
          out hv_Plano_1);
      {
      HTuple ExpTmpOutVar_0;
      HOperatorSet.RigidTransObjectModel3d(hv_Plano_1, hv_PoseEsquina, out ExpTmpOutVar_0);
      hv_Plano_1.Dispose();
      hv_Plano_1 = ExpTmpOutVar_0;
      }


      //visualize_object_model_3d (200000, [ Plano_1,Plano], [], [], Parametros_Visualizacion, Valores_Visualizacion, [], [], [], PoseOut1)


      hv_ThreshDistance.Dispose();
      hv_ThreshDistance = 1500;
      hv_Modelos3d.Dispose();
      hv_Modelos3d = new HTuple(hv_Plano_1);
      hv_ROI3D_NullFrame.Dispose();
      hv_ROI3D_NullFrame = new HTuple();
      hv_Vector_Segmento.Dispose();
      hv_Vector_Segmento = new HTuple();
      hv_Vector_Segmento[0] = "A";
      hv_Vector_Segmento[1] = "B";
      hv_Vector_Segmento[2] = "C";
      hv_Vector_Segmento[3] = "D";
      hv_Vector_Segmento[4] = "E";
      hv_Vector_Segmento[5] = "F";
      hv_Vector_Segmento[6] = "G";
      hv_Vector_Segmento[7] = "H";
      hv_Vector_Segmento[8] = "I";
      HTuple end_val46 = hv_Ncuadrantes;
      HTuple step_val46 = 1;
      for (hv_Index_Y=1; hv_Index_Y.Continue(end_val46, step_val46); hv_Index_Y = hv_Index_Y.TupleAdd(step_val46))
      {

        HTuple end_val48 = hv_Ncuadrantes;
        HTuple step_val48 = 1;
        for (hv_Index_X=1; hv_Index_X.Continue(end_val48, step_val48); hv_Index_X = hv_Index_X.TupleAdd(step_val48))
        {
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Pose_Trans.Dispose();
          HOperatorSet.CreatePose(2*(hv_Trans_X.TupleSelect(hv_Index_X)), 2*(hv_Trans_Y.TupleSelect(
              hv_Index_Y)), -hv_ThreshDistance, 0, 0, 0, "Rp+T", "gba", "point", 
              out hv_Pose_Trans);
          }
          hv_ObjectModel3DRigidTrans1.Dispose();
          HOperatorSet.RigidTransObjectModel3d(hv_Modelos3d, hv_Pose_Trans, out hv_ObjectModel3DRigidTrans1);
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_ROI3D_NullFrame = hv_ROI3D_NullFrame.TupleConcat(
              hv_ObjectModel3DRigidTrans1);
          hv_ROI3D_NullFrame.Dispose();
          hv_ROI3D_NullFrame = ExpTmpLocalVar_ROI3D_NullFrame;
          }
          }
          //visualize_object_model_3d (200000, [ ROI3D_NullFrame,Plano], [], [], Parametros_Visualizacion, Valores_Visualizacion, [], [], [], PoseOut1)

        }

      }




      hv_ROI3D_rotate.Dispose();
      hv_ROI3D_rotate = new HTuple();
      HOperatorSet.ClearObjectModel3d(hv_ROI3D_rotate);

      for (hv_Index=0; (int)hv_Index<=(int)((new HTuple(hv_ROI3D_NullFrame.TupleLength()
          ))-1); hv_Index = (int)hv_Index + 1)
      {

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_ROI3D_rotate_Aux.Dispose();
        HOperatorSet.CopyObjectModel3d(hv_ROI3D_NullFrame.TupleSelect(hv_Index), 
            "all", out hv_ROI3D_rotate_Aux);
        }
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_ROI3D_rotate = hv_ROI3D_rotate.TupleConcat(
            hv_ROI3D_rotate_Aux);
        hv_ROI3D_rotate.Dispose();
        hv_ROI3D_rotate = ExpTmpLocalVar_ROI3D_rotate;
        }
        }
        hv_ROI3D_rotate_Aux.Dispose();
        hv_ROI3D_rotate_Aux = new HTuple();

      }






      HOperatorSet.ClearObjectModel3d(hv_Modelos3d);
      HOperatorSet.ClearObjectModel3d(hv_Plano);


      hv_Parametros_Visualizacion.Dispose();
      hv_Valores_Visualizacion.Dispose();
      hv_VisualizationPlaneSize.Dispose();
      hv_Z_alt.Dispose();
      hv_Pose.Dispose();
      hv_Plano.Dispose();
      hv_PoseEsquina.Dispose();
      hv_Trans_X.Dispose();
      hv_Trans_Y.Dispose();
      hv_Ncuadrantes.Dispose();
      hv_Index.Dispose();
      hv_Alto_Sector.Dispose();
      hv_Plano_1.Dispose();
      hv_ThreshDistance.Dispose();
      hv_Modelos3d.Dispose();
      hv_Vector_Segmento.Dispose();
      hv_Index_Y.Dispose();
      hv_Index_X.Dispose();
      hv_Pose_Trans.Dispose();
      hv_ObjectModel3DRigidTrans1.Dispose();
      hv_ROI3D_rotate_Aux.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Parametros_Visualizacion.Dispose();
      hv_Valores_Visualizacion.Dispose();
      hv_VisualizationPlaneSize.Dispose();
      hv_Z_alt.Dispose();
      hv_Pose.Dispose();
      hv_Plano.Dispose();
      hv_PoseEsquina.Dispose();
      hv_Trans_X.Dispose();
      hv_Trans_Y.Dispose();
      hv_Ncuadrantes.Dispose();
      hv_Index.Dispose();
      hv_Alto_Sector.Dispose();
      hv_Plano_1.Dispose();
      hv_ThreshDistance.Dispose();
      hv_Modelos3d.Dispose();
      hv_Vector_Segmento.Dispose();
      hv_Index_Y.Dispose();
      hv_Index_X.Dispose();
      hv_Pose_Trans.Dispose();
      hv_ObjectModel3DRigidTrans1.Dispose();
      hv_ROI3D_rotate_Aux.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_ROI_3D (HTuple hv_ROI3D, HTuple hv_ObjectModel3D, out HTuple hv_Modelo_3D_RED)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_N_ROI = new HTuple(), hv_GenParamValue = new HTuple();
    HTuple hv_x_min = new HTuple(), hv_y_min = new HTuple();
    HTuple hv_z_min = new HTuple(), hv_x_max = new HTuple();
    HTuple hv_y_max = new HTuple(), hv_z_max = new HTuple();
    HTuple hv_ObjectModel3DThresholded = new HTuple();
    // Initialize local and output iconic variables 
    hv_Modelo_3D_RED = new HTuple();
    try
    {

      hv_Modelo_3D_RED.Dispose();
      hv_Modelo_3D_RED = new HTuple();

      for (hv_N_ROI=0; (int)hv_N_ROI<=(int)((new HTuple(hv_ROI3D.TupleLength()))-1); hv_N_ROI = (int)hv_N_ROI + 1)
      {
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_GenParamValue.Dispose();
        HOperatorSet.GetObjectModel3dParams(hv_ROI3D.TupleSelect(hv_N_ROI), "bounding_box1", 
            out hv_GenParamValue);
        }

        hv_x_min.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_x_min = hv_GenParamValue.TupleSelect(
            0);
        }
        hv_y_min.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_y_min = hv_GenParamValue.TupleSelect(
            1);
        }
        hv_z_min.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_z_min = hv_GenParamValue.TupleSelect(
            2);
        }
        hv_x_max.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_x_max = hv_GenParamValue.TupleSelect(
            3);
        }
        hv_y_max.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_y_max = hv_GenParamValue.TupleSelect(
            4);
        }
        hv_z_max.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_z_max = hv_GenParamValue.TupleSelect(
            5);
        }

        hv_ObjectModel3DThresholded.Dispose();
        HOperatorSet.SelectPointsObjectModel3d(hv_ObjectModel3D, "point_coord_z", 
            hv_z_min, hv_z_max, out hv_ObjectModel3DThresholded);
        {
        HTuple ExpTmpOutVar_0;
        HOperatorSet.SelectPointsObjectModel3d(hv_ObjectModel3DThresholded, "point_coord_y", 
            hv_y_min, hv_y_max, out ExpTmpOutVar_0);
        hv_ObjectModel3DThresholded.Dispose();
        hv_ObjectModel3DThresholded = ExpTmpOutVar_0;
        }
        {
        HTuple ExpTmpOutVar_0;
        HOperatorSet.SelectPointsObjectModel3d(hv_ObjectModel3DThresholded, "point_coord_x", 
            hv_x_min, hv_x_max, out ExpTmpOutVar_0);
        hv_ObjectModel3DThresholded.Dispose();
        hv_ObjectModel3DThresholded = ExpTmpOutVar_0;
        }

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Modelo_3D_RED = hv_Modelo_3D_RED.TupleConcat(
            hv_ObjectModel3DThresholded);
        hv_Modelo_3D_RED.Dispose();
        hv_Modelo_3D_RED = ExpTmpLocalVar_Modelo_3D_RED;
        }
        }

      }



      hv_N_ROI.Dispose();
      hv_GenParamValue.Dispose();
      hv_x_min.Dispose();
      hv_y_min.Dispose();
      hv_z_min.Dispose();
      hv_x_max.Dispose();
      hv_y_max.Dispose();
      hv_z_max.Dispose();
      hv_ObjectModel3DThresholded.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_N_ROI.Dispose();
      hv_GenParamValue.Dispose();
      hv_x_min.Dispose();
      hv_y_min.Dispose();
      hv_z_min.Dispose();
      hv_x_max.Dispose();
      hv_y_max.Dispose();
      hv_z_max.Dispose();
      hv_ObjectModel3DThresholded.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Rotate_ROI3D (HTuple hv_Pose_Refinada, HTuple hv_ROI3D_rotate, 
      out HTuple hv_Pose_Segmentos, out HTuple hv_ROI3D_rotateOut)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Z_Seguridad = new HTuple();
    // Initialize local and output iconic variables 
    hv_Pose_Segmentos = new HTuple();
    hv_ROI3D_rotateOut = new HTuple();
    try
    {




      hv_ROI3D_rotateOut.Dispose();
      hv_ROI3D_rotateOut = new HTuple(hv_ROI3D_rotate);
      //Variable para asegurarme que tome lo sque existe por sobre el pallet

      hv_Z_Seguridad.Dispose();
      hv_Z_Seguridad = 800;


      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Pose_Segmentos.Dispose();
      HOperatorSet.CreatePose(hv_Pose_Refinada.TupleSelect(0), hv_Pose_Refinada.TupleSelect(
          1), (hv_Pose_Refinada.TupleSelect(2))-hv_Z_Seguridad, hv_Pose_Refinada.TupleSelect(
          3), hv_Pose_Refinada.TupleSelect(4), hv_Pose_Refinada.TupleSelect(5), "Rp+T", 
          "gba", "point", out hv_Pose_Segmentos);
      }

      {
      HTuple ExpTmpOutVar_0;
      HOperatorSet.RigidTransObjectModel3d(hv_ROI3D_rotateOut, hv_Pose_Segmentos, 
          out ExpTmpOutVar_0);
      hv_ROI3D_rotateOut.Dispose();
      hv_ROI3D_rotateOut = ExpTmpOutVar_0;
      }

      hv_Z_Seguridad.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Z_Seguridad.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Segmento (HTuple hv_SerialHandle, HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Vector_Estado_Fx, 
      HTuple hv_Pose_Esquina, HTuple hv_Escena3D_RAW, HTuple hv_Parametros_Visualizacion, 
      HTuple hv_Valores_Visualizacion, HTuple hv_Visualizar3D, HTuple hv_WindowHandle, 
      out HTuple hv_Vector_Segmento, out HTuple hv_ROI3D_NullFrame, out HTuple hv_ROI3D_rotate, 
      out HTuple hv_Exception, out HTuple hv_EstadoFx, out HTuple hv_Estado, out HTuple hv_Pose_Segmentos)
  {



    // Local iconic variables 
    // Initialize local and output iconic variables 
    hv_Vector_Segmento = new HTuple();
    hv_ROI3D_NullFrame = new HTuple();
    hv_ROI3D_rotate = new HTuple();
    hv_Exception = new HTuple();
    hv_EstadoFx = new HTuple();
    hv_Estado = new HTuple();
    hv_Pose_Segmentos = new HTuple();
    hv_Vector_Segmento.Dispose();
    hv_Vector_Segmento = new HTuple();
    hv_Vector_Segmento[0] = "A";
    hv_Vector_Segmento[1] = "B";
    hv_Vector_Segmento[2] = "C";
    hv_Vector_Segmento[3] = "D";
    hv_Vector_Segmento[4] = "E";
    hv_Vector_Segmento[5] = "F";
    hv_Vector_Segmento[6] = "G";
    hv_Vector_Segmento[7] = "H";
    hv_Vector_Segmento[8] = "I";


    try
    {
      hv_ROI3D_NullFrame.Dispose();hv_ROI3D_rotate.Dispose();
      Get_ROI3D_Pallet(out hv_ROI3D_NullFrame, out hv_ROI3D_rotate);
    }
    // catch (Exception) 
    catch (HalconException HDevExpDefaultException1)
    {
      HDevExpDefaultException1.ToHTuple(out hv_Exception);

      hv_EstadoFx.Dispose();
      Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx);
      //throw (MensajeError)
      //
      //# ### Envio data de estado ########################

      hv_Estado.Dispose();
      hv_Estado = 5;
      Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);

      //# ################################################# 



      return;
    }

    //# #### ROTO EL ROI 3D ######
    //
    try
    {
      //# ####################################################################################
      //Funcion que Lee la pose guardada en el Bloque 0, y que referencia la orientacion de la camara
      //# ####################################################################################
      hv_Pose_Segmentos.Dispose();
      {
      HTuple ExpTmpOutVar_0;
      Get_Rotate_ROI3D(hv_Pose_Esquina, hv_ROI3D_rotate, out hv_Pose_Segmentos, out ExpTmpOutVar_0);
      hv_ROI3D_rotate.Dispose();
      hv_ROI3D_rotate = ExpTmpOutVar_0;
      }
      //Visualizar_3D ([Escena3D_RAW], Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, [], [], ['Modelo'], WindowHandle, PoseOut1)
      //
    }
    // catch (Exception) 
    catch (HalconException HDevExpDefaultException1)
    {
      HDevExpDefaultException1.ToHTuple(out hv_Exception);

      hv_EstadoFx.Dispose();
      Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx);


      return;
    }


    return;
  }

  public void Get_Segmento_AND_Pallet (HTuple hv__EV1_O_CmdDatos, out HTuple hv_Pallet, 
      out HTuple hv_Pallet_int, out HTuple hv_Segmento)
  {



    // Local iconic variables 
    // Initialize local and output iconic variables 
    hv_Pallet = new HTuple();
    hv_Pallet_int = new HTuple();
    hv_Segmento = new HTuple();
    hv_Pallet.Dispose();
    HOperatorSet.TupleReal(hv__EV1_O_CmdDatos, out hv_Pallet);
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    {
    HTuple 
      ExpTmpLocalVar_Pallet = hv_Pallet/100.0;
    hv_Pallet.Dispose();
    hv_Pallet = ExpTmpLocalVar_Pallet;
    }
    }
    hv_Pallet_int.Dispose();
    HOperatorSet.TupleInt(hv_Pallet, out hv_Pallet_int);

    hv_Segmento.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_Segmento = (hv_Pallet-hv_Pallet_int)*100.0;
    }
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_Segmento.Dispose();
    HOperatorSet.TupleInt(hv_Segmento+0.009, out hv_Segmento);
    }
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    {
    HTuple 
      ExpTmpLocalVar_Pallet_int = hv_Pallet_int-2;
    hv_Pallet_int.Dispose();
    hv_Pallet_int = ExpTmpLocalVar_Pallet_int;
    }
    }


    return;
  }

  public void Get_Segmento_COPY_1 (HTuple hv_SerialHandle, HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Vector_Estado_Fx, 
      HTuple hv_Pose_Esquina, HTuple hv_Escena3D_RAW, HTuple hv_Parametros_Visualizacion, 
      HTuple hv_Valores_Visualizacion, HTuple hv_Visualizar3D, HTuple hv_WindowHandle, 
      out HTuple hv_Vector_Segmento, out HTuple hv_ROI3D_NullFrame, out HTuple hv_ROI3D_rotate, 
      out HTuple hv_Exception, out HTuple hv_EstadoFx, out HTuple hv_Estado, out HTuple hv_Pose_Segmentos)
  {



    // Local iconic variables 
    // Initialize local and output iconic variables 
    hv_Vector_Segmento = new HTuple();
    hv_ROI3D_NullFrame = new HTuple();
    hv_ROI3D_rotate = new HTuple();
    hv_Exception = new HTuple();
    hv_EstadoFx = new HTuple();
    hv_Estado = new HTuple();
    hv_Pose_Segmentos = new HTuple();
    hv_Vector_Segmento.Dispose();
    hv_Vector_Segmento = new HTuple();
    hv_Vector_Segmento[0] = "A";
    hv_Vector_Segmento[1] = "B";
    hv_Vector_Segmento[2] = "C";
    hv_Vector_Segmento[3] = "D";
    hv_Vector_Segmento[4] = "E";
    hv_Vector_Segmento[5] = "F";
    hv_Vector_Segmento[6] = "G";
    hv_Vector_Segmento[7] = "H";
    hv_Vector_Segmento[8] = "I";


    try
    {
      hv_ROI3D_NullFrame.Dispose();hv_ROI3D_rotate.Dispose();
      Get_ROI3D_Pallet(out hv_ROI3D_NullFrame, out hv_ROI3D_rotate);
    }
    // catch (Exception) 
    catch (HalconException HDevExpDefaultException1)
    {
      HDevExpDefaultException1.ToHTuple(out hv_Exception);

      hv_EstadoFx.Dispose();
      Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx);
      //throw (MensajeError)

      //# ### Envio data de estado ########################

      hv_Estado.Dispose();
      hv_Estado = 5;
      Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);

      //# ################################################# 



      return;
    }

    //# #### ROTO EL ROI 3D ######

    try
    {
      //# ####################################################################################
      //Funcion que Lee la pose guardada en el Bloque 0, y que referencia la orientacion de la camara
      //# ####################################################################################
      hv_Pose_Segmentos.Dispose();
      {
      HTuple ExpTmpOutVar_0;
      Get_Rotate_ROI3D(hv_Pose_Esquina, hv_ROI3D_rotate, out hv_Pose_Segmentos, out ExpTmpOutVar_0);
      hv_ROI3D_rotate.Dispose();
      hv_ROI3D_rotate = ExpTmpOutVar_0;
      }
      //Visualizar_3D ([Escena3D_RAW], Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, [], [], ['Modelo'], WindowHandle, PoseOut1)

    }
    // catch (Exception) 
    catch (HalconException HDevExpDefaultException1)
    {
      HDevExpDefaultException1.ToHTuple(out hv_Exception);

      hv_EstadoFx.Dispose();
      Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx);


      return;
    }


    return;
  }

  public void Get_SFM (out HTuple hv_Modelo3D, out HTuple hv_SFM)
  {


    // Local control variables 

    HTuple hv_Status = new HTuple();
    // Initialize local and output iconic variables 
    hv_Modelo3D = new HTuple();
    hv_SFM = new HTuple();
    try
    {
      hv_Modelo3D.Dispose();hv_Status.Dispose();
      HOperatorSet.ReadObjectModel3d("D:/AI/Vision Artificial/4.-MAGOTTEAUX/21.-HandEye/3DBUFhandeye.om3", 
          1, new HTuple(), new HTuple(), out hv_Modelo3D, out hv_Status);
      hv_SFM.Dispose();
      HOperatorSet.ReadSurfaceModel("D:/AI/Vision Artificial/4.-MAGOTTEAUX/21.-HandEye/SFMBUFhandeye.sfm", 
          out hv_SFM);

      hv_Status.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Status.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_SFM_3D_Pallet (out HTuple hv_SFM_Pallet, out HTuple hv_Pallet_3D_Esquina)
  {


    // Local control variables 

    HTuple hv_Status = new HTuple();
    // Initialize local and output iconic variables 
    hv_SFM_Pallet = new HTuple();
    hv_Pallet_3D_Esquina = new HTuple();
    try
    {





      hv_SFM_Pallet.Dispose();
      HOperatorSet.ReadSurfaceModel("D:/AI/Vision Artificial/4.-MAGOTTEAUX/SFM_PALLET/SFM_Pallet_beta.sfm", 
          out hv_SFM_Pallet);
      hv_Pallet_3D_Esquina.Dispose();hv_Status.Dispose();
      HOperatorSet.ReadObjectModel3d("D:/AI/Vision Artificial/4.-MAGOTTEAUX/SFM_PALLET/3D_Pallet_beta.om3", 
          1, new HTuple(), new HTuple(), out hv_Pallet_3D_Esquina, out hv_Status);


      hv_Status.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Status.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_SFM_STL (HTuple hv_Vector_ID_Core_by_Segment_Pallet, HTuple hv_Path_CORE_ID, 
      HTuple hv_Path_3D_Segmentos, HTuple hv_Path_SFM_Segmentos, HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Vector_Estado_Fx, 
      HTuple hv_SerialHandle, out HTuple hv_ObjectModel3D_Core_Pallet, out HTuple hv_SFM_Core_Pallet, 
      out HTuple hv_Estado_Get_SFM_STL, out HTuple hv_Modelo3D_Select)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Core_Find_by_User = new HTuple();
    HTuple hv_Index_Core = new HTuple(), hv_Core_Get = new HTuple();
    HTuple hv_Index_Core_find = new HTuple(), hv_Status = new HTuple();
    HTuple hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    hv_ObjectModel3D_Core_Pallet = new HTuple();
    hv_SFM_Core_Pallet = new HTuple();
    hv_Estado_Get_SFM_STL = new HTuple();
    hv_Modelo3D_Select = new HTuple();
    try
    {
      hv_Estado_Get_SFM_STL.Dispose();
      hv_Estado_Get_SFM_STL = 0;
      try
      {

        hv_Core_Find_by_User.Dispose();
        hv_Core_Find_by_User = new HTuple(hv_Vector_ID_Core_by_Segment_Pallet);

        if ((int)(new HTuple(hv_Core_Find_by_User.TupleEqual(""))) != 0)
        {
          hv_Estado_Get_SFM_STL.Dispose();
          hv_Estado_Get_SFM_STL = 0;

          hv_Core_Find_by_User.Dispose();
          hv_Index_Core.Dispose();
          hv_Core_Get.Dispose();
          hv_Index_Core_find.Dispose();
          hv_Status.Dispose();
          hv_Exception.Dispose();

          return;
        }

        hv_Index_Core.Dispose();
        hv_Index_Core = new HTuple();
        hv_Core_Get.Dispose();
        hv_Core_Get = 0;

        for (hv_Index_Core_find=0; (int)hv_Index_Core_find<=(int)((new HTuple(hv_Path_CORE_ID.TupleLength()
            ))-1); hv_Index_Core_find = (int)hv_Index_Core_find + 1)
        {

          if ((int)(new HTuple(((hv_Path_CORE_ID.TupleSelect(hv_Index_Core_find))).TupleEqual(
              hv_Core_Find_by_User))) != 0)
          {
            hv_Index_Core.Dispose();
            hv_Index_Core = new HTuple(hv_Index_Core_find);
            hv_Core_Get.Dispose();
            hv_Core_Get = 1;
          }
        }

        if ((int)(hv_Core_Get.TupleNot()) != 0)
        {



          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          Send_Data_Info("Surface File Leido  -------> "+hv_Core_Find_by_User, hv_SerialHandle);
          }



          hv_Core_Find_by_User.Dispose();
          hv_Index_Core.Dispose();
          hv_Core_Get.Dispose();
          hv_Index_Core_find.Dispose();
          hv_Status.Dispose();
          hv_Exception.Dispose();

          return;

        }


        Send_Estado_Vision(hvec_Vector_Estado_Fx, hv_SerialHandle, 24);
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_ObjectModel3D_Core_Pallet.Dispose();hv_Status.Dispose();
        HOperatorSet.ReadObjectModel3d(hv_Path_3D_Segmentos.TupleSelect(hv_Index_Core), 
            1, new HTuple(), new HTuple(), out hv_ObjectModel3D_Core_Pallet, out hv_Status);
        }
        Send_Estado_Vision(hvec_Vector_Estado_Fx, hv_SerialHandle, 25);
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_SFM_Core_Pallet.Dispose();
        HOperatorSet.ReadSurfaceModel(hv_Path_SFM_Segmentos.TupleSelect(hv_Index_Core), 
            out hv_SFM_Core_Pallet);
        }
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        Send_Data_Info("Surface File Leido  -------> "+hv_Core_Find_by_User, hv_SerialHandle);
        }

        hv_Modelo3D_Select.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Modelo3D_Select = hv_Path_3D_Segmentos.TupleSelect(
            hv_Index_Core);
        }


        hv_Estado_Get_SFM_STL.Dispose();
        hv_Estado_Get_SFM_STL = 1;

      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);



        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        Send_Data_Info("### ERROR ### NO se pudo leer el modelo 3D o el SFM de "+hv_Core_Find_by_User, 
            hv_SerialHandle);
        }

      }

      hv_Core_Find_by_User.Dispose();
      hv_Index_Core.Dispose();
      hv_Core_Get.Dispose();
      hv_Index_Core_find.Dispose();
      hv_Status.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Core_Find_by_User.Dispose();
      hv_Index_Core.Dispose();
      hv_Core_Get.Dispose();
      hv_Index_Core_find.Dispose();
      hv_Status.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_sleeve_Vector (HObject ho_SelectedRegions1, HObject ho_Z, HObject ho_Y, 
      HObject ho_X, out HObject ho_SelectedRegions2, out HObject ho_Zred, out HObject ho_Yred, 
      out HObject ho_Xred, HTuple hv_Parametros_Visualizacion, HTuple hv_Valores_Visualizacion, 
      HTuple hv_WindowHandle, HTuple hv_ObjectModel3D_Core_Pallet, HTuple hv_Diametro, 
      HTuple hv_g_CamInBasePose2, HTuple hv_SerialHandle, HTuple hv_g_AltutaVirtualCamEstereo, 
      HTuple hv_Diametro_Interno, out HTuple hv_PosX, out HTuple hv_PosY, out HTuple hv_PosZ, 
      out HTuple hv_PosicionSleeve)
  {




    // Stack for temporary objects 
    HObject[] OTemp = new HObject[20];

    // Local iconic variables 

    HObject ho_ImageGauss, ho_LocalMaxima, ho_ConnectedRegions;
    HObject ho_Region_SupManga=null, ho_ConnectedRegions1=null;
    HObject ho_SelectedRegions=null;

    // Local control variables 

    HTuple hv_AlturaBase = new HTuple(), hv_ObjectModel3D = new HTuple();
    HTuple hv_SmoothObjectModel3D = new HTuple(), hv_NumNeighbors = new HTuple();
    HTuple hv_DistanceDistribution = new HTuple(), hv_NumPoints = new HTuple();
    HTuple hv_InlierRate = new HTuple(), hv_Distance = new HTuple();
    HTuple hv_PoseOut1 = new HTuple(), hv_BoxSlevee = new HTuple();
    HTuple hv_Centro = new HTuple(), hv_Escena3D_RAWOut = new HTuple();
    HTuple hv_Sleeve3DBox = new HTuple(), hv_AltoNominal = new HTuple();
    HTuple hv_Pose2 = new HTuple(), hv_Lx = new HTuple(), hv_Ly = new HTuple();
    HTuple hv_Lz = new HTuple(), hv_ObjectModel3D2 = new HTuple();
    HTuple hv_ESFERA = new HTuple(), hv_ZMinBase = new HTuple();
    HTuple hv_ZSleeve = new HTuple(), hv_Delta_X = new HTuple();
    HTuple hv_Delta_Y = new HTuple(), hv_Delta_Z = new HTuple();
    HTuple hv_Estado_Funcion = new HTuple(), hv_Diametro_en_X = new HTuple();
    HTuple hv_Diametro_en_Y = new HTuple(), hv_AltoNominal_raw = new HTuple();
    HTuple hv_Diametro_en_X_abs = new HTuple(), hv_Diametro_en_Y_abs = new HTuple();
    HTuple hv_AltoNominal_raw_abs = new HTuple(), hv_Pose1 = new HTuple();
    HTuple hv_Length1 = new HTuple(), hv_Length2 = new HTuple();
    HTuple hv_Length3 = new HTuple(), hv_ObjectModel3D1 = new HTuple();
    HTuple hv_Diametro_Nominal_en_X = new HTuple(), hv_Diametro_Nominal_en_Y = new HTuple();
    HTuple hv_Error_ejeX = new HTuple(), hv_Error_ejeY = new HTuple();
    HTuple hv_Pose = new HTuple(), hv_ObjectModel3DRigidTrans = new HTuple();
    HTuple hv_AlturaSupManga = new HTuple();
    HTuple   hv_Parametros_Visualizacion_COPY_INP_TMP = new HTuple(hv_Parametros_Visualizacion);
    HTuple   hv_Valores_Visualizacion_COPY_INP_TMP = new HTuple(hv_Valores_Visualizacion);

    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_SelectedRegions2);
    HOperatorSet.GenEmptyObj(out ho_Zred);
    HOperatorSet.GenEmptyObj(out ho_Yred);
    HOperatorSet.GenEmptyObj(out ho_Xred);
    HOperatorSet.GenEmptyObj(out ho_ImageGauss);
    HOperatorSet.GenEmptyObj(out ho_LocalMaxima);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
    HOperatorSet.GenEmptyObj(out ho_Region_SupManga);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions1);
    HOperatorSet.GenEmptyObj(out ho_SelectedRegions);
    hv_PosX = new HTuple();
    hv_PosY = new HTuple();
    hv_PosZ = new HTuple();
    hv_PosicionSleeve = new HTuple();
    try
    {

      hv_Parametros_Visualizacion_COPY_INP_TMP.Dispose();
      hv_Parametros_Visualizacion_COPY_INP_TMP = new HTuple();
      hv_Parametros_Visualizacion_COPY_INP_TMP[0] = "disp_pose";
      hv_Parametros_Visualizacion_COPY_INP_TMP[1] = "color_attrib";
      hv_Parametros_Visualizacion_COPY_INP_TMP[2] = "lut";
      hv_Parametros_Visualizacion_COPY_INP_TMP[3] = "disp_lines";
      hv_Parametros_Visualizacion_COPY_INP_TMP[4] = "point_size";
      hv_Valores_Visualizacion_COPY_INP_TMP.Dispose();
      hv_Valores_Visualizacion_COPY_INP_TMP = new HTuple();
      hv_Valores_Visualizacion_COPY_INP_TMP[0] = "false";
      hv_Valores_Visualizacion_COPY_INP_TMP[1] = "coord_z";
      hv_Valores_Visualizacion_COPY_INP_TMP[2] = "rainbow";
      hv_Valores_Visualizacion_COPY_INP_TMP[3] = "true";
      hv_Valores_Visualizacion_COPY_INP_TMP[4] = 1;

      //Busco el area mas gande ( se supone que todas son iguales)
      ho_SelectedRegions2.Dispose();
      HOperatorSet.SelectShapeStd(ho_SelectedRegions1, out ho_SelectedRegions2, "max_area", 
          90);
      {
      HObject ExpTmpOutVar_0;
      HOperatorSet.DilationCircle(ho_SelectedRegions2, out ExpTmpOutVar_0, 10.5);
      ho_SelectedRegions2.Dispose();
      ho_SelectedRegions2 = ExpTmpOutVar_0;
      }




      ho_Zred.Dispose();
      HOperatorSet.ReduceDomain(ho_Z, ho_SelectedRegions2, out ho_Zred);
      ho_Yred.Dispose();
      HOperatorSet.ReduceDomain(ho_Y, ho_SelectedRegions2, out ho_Yred);
      ho_Xred.Dispose();
      HOperatorSet.ReduceDomain(ho_X, ho_SelectedRegions2, out ho_Xred);


      ho_ImageGauss.Dispose();ho_LocalMaxima.Dispose();ho_ConnectedRegions.Dispose();hv_AlturaBase.Dispose();
      Get_Max_Altura_Mangas(ho_Zred, out ho_ImageGauss, out ho_LocalMaxima, out ho_ConnectedRegions, 
          hv_g_AltutaVirtualCamEstereo, out hv_AlturaBase);



      hv_ObjectModel3D.Dispose();
      HOperatorSet.XyzToObjectModel3d(ho_Xred, ho_Yred, ho_Zred, out hv_ObjectModel3D);


      {
      HTuple ExpTmpOutVar_0;
      NotZeroModel_3D_Sleeve(hv_ObjectModel3D, hv_g_AltutaVirtualCamEstereo, out ExpTmpOutVar_0);
      hv_ObjectModel3D.Dispose();
      hv_ObjectModel3D = ExpTmpOutVar_0;
      }


      hv_SmoothObjectModel3D.Dispose();
      HOperatorSet.SmoothObjectModel3d(hv_ObjectModel3D, "mls", "mls_kNN", 5, out hv_SmoothObjectModel3D);

      //************************************************
      hv_NumNeighbors.Dispose();
      hv_NumNeighbors = 15;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_DistanceDistribution.Dispose();
      HOperatorSet.GetObjectModel3dParams(hv_SmoothObjectModel3D, "neighbor_distance "+hv_NumNeighbors, 
          out hv_DistanceDistribution);
      }
      hv_NumPoints.Dispose();
      HOperatorSet.GetObjectModel3dParams(hv_SmoothObjectModel3D, "num_points", out hv_NumPoints);

      hv_InlierRate.Dispose();
      hv_InlierRate = 70;
      hv_Distance.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Distance = ((hv_DistanceDistribution.TupleSort()
          )).TupleSelect(((new HTuple(hv_DistanceDistribution.TupleLength()))*hv_InlierRate)/100);
      }


      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_SmoothObjectModel3D.Dispose();
      HOperatorSet.SelectPointsObjectModel3d(hv_ObjectModel3D, "num_neighbors "+hv_Distance, 
          15, hv_NumPoints, out hv_SmoothObjectModel3D);
      }
      //Visualizar_3D ([ SmoothObjectModel3D], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,1], 1, [], [], [], WindowHandle, PoseOut1)

      //*******************************************************************
      //Calculo de orientacion de manga
      //********************************************************************




      //*********************************************************************



      hv_BoxSlevee.Dispose();
      HOperatorSet.GetObjectModel3dParams(hv_SmoothObjectModel3D, "bounding_box1", 
          out hv_BoxSlevee);
      hv_Centro.Dispose();
      HOperatorSet.GetObjectModel3dParams(hv_SmoothObjectModel3D, "center", out hv_Centro);

      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Escena3D_RAWOut.Dispose();
      HOperatorSet.SelectPointsObjectModel3d(hv_SmoothObjectModel3D, "point_coord_z", 
          500, (hv_BoxSlevee.TupleSelect(2))+80, out hv_Escena3D_RAWOut);
      }
      hv_Centro.Dispose();
      HOperatorSet.GetObjectModel3dParams(hv_Escena3D_RAWOut, "center", out hv_Centro);




      //Visualizar_3D ([ Escena3D_RAWOut], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,1], 1, [], [], [], WindowHandle, PoseOut1)



      //Obtengo el modelo 3D de la manga y extarigo su altura.
      hv_Sleeve3DBox.Dispose();
      HOperatorSet.GetObjectModel3dParams(hv_ObjectModel3D_Core_Pallet, "bounding_box1", 
          out hv_Sleeve3DBox);
      hv_AltoNominal.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_AltoNominal = (hv_Sleeve3DBox.TupleSelect(
          5))-(hv_Sleeve3DBox.TupleSelect(2));
      }
      {
      HTuple ExpTmpOutVar_0;
      HOperatorSet.TupleAbs(hv_AltoNominal, out ExpTmpOutVar_0);
      hv_AltoNominal.Dispose();
      hv_AltoNominal = ExpTmpOutVar_0;
      }

      //**************************************************************************************

      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Pose2.Dispose();
      HOperatorSet.CreatePose(hv_Centro.TupleSelect(0), hv_Centro.TupleSelect(1), 
          hv_Centro.TupleSelect(2), 0, 0, 0, "Rp+T", "gba", "point", out hv_Pose2);
      }
      hv_Lx.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Lx = (hv_Sleeve3DBox.TupleSelect(
          0))-(hv_Sleeve3DBox.TupleSelect(3));
      }
      hv_Ly.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Ly = (hv_Sleeve3DBox.TupleSelect(
          1))-(hv_Sleeve3DBox.TupleSelect(4));
      }
      hv_Lz.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Lz = (hv_Sleeve3DBox.TupleSelect(
          2))-(hv_Sleeve3DBox.TupleSelect(5));
      }

      {
      HTuple ExpTmpOutVar_0;
      HOperatorSet.TupleAbs(hv_Lx, out ExpTmpOutVar_0);
      hv_Lx.Dispose();
      hv_Lx = ExpTmpOutVar_0;
      }
      {
      HTuple ExpTmpOutVar_0;
      HOperatorSet.TupleAbs(hv_Ly, out ExpTmpOutVar_0);
      hv_Ly.Dispose();
      hv_Ly = ExpTmpOutVar_0;
      }
      {
      HTuple ExpTmpOutVar_0;
      HOperatorSet.TupleAbs(hv_Lz, out ExpTmpOutVar_0);
      hv_Lz.Dispose();
      hv_Lz = ExpTmpOutVar_0;
      }

      hv_ObjectModel3D2.Dispose();
      HOperatorSet.GenBoxObjectModel3d(hv_Pose2, hv_Lx, hv_Ly, hv_Lz, out hv_ObjectModel3D2);

      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_ESFERA.Dispose();
      HOperatorSet.GenSphereObjectModel3d(hv_Pose2, hv_Diametro_Interno*0.5, out hv_ESFERA);
      }

      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_PoseOut1.Dispose();
      Visualizar_3D(((hv_Escena3D_RAWOut.TupleConcat(hv_ESFERA))).TupleConcat(hv_ObjectModel3D), 
          hv_Parametros_Visualizacion_COPY_INP_TMP.TupleConcat("alpha"), hv_Valores_Visualizacion_COPY_INP_TMP.TupleConcat(
          0.4), 1, new HTuple(), new HTuple(), new HTuple(), hv_WindowHandle, out hv_PoseOut1);
      }


      //****************************************************************************************
      hv_ZMinBase.Dispose();
      hv_ZMinBase = new HTuple(hv_AlturaBase);

      //desde la Base calculo la mitad de la manga.

      hv_ZSleeve.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_ZSleeve = hv_ZMinBase-(hv_AltoNominal*0.45);
      }



      //# #####################################
      //OFFSET PARA TOMAR MANGA
      //# #####################################
      hv_Delta_X.Dispose();
      hv_Delta_X = 0;
      hv_Delta_Y.Dispose();
      hv_Delta_Y = 0;
      hv_Delta_Z.Dispose();
      hv_Delta_Z = 0;
      //# #####################################
      hv_PosX.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_PosX = (hv_Centro.TupleSelect(
          0))+hv_Delta_X;
      }
      hv_PosY.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_PosY = (hv_Centro.TupleSelect(
          1))+hv_Delta_Y;
      }
      hv_PosZ.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_PosZ = (hv_ZSleeve-hv_g_AltutaVirtualCamEstereo)+hv_Delta_Z;
      }

      hv_PosicionSleeve.Dispose();
      HOperatorSet.CreatePose(hv_PosX, hv_PosY, hv_PosZ, 0, 0, 0, "Rp+T", "gba", 
          "point", out hv_PosicionSleeve);
      ho_ImageGauss.Dispose();
      ho_LocalMaxima.Dispose();
      ho_ConnectedRegions.Dispose();
      ho_Region_SupManga.Dispose();
      ho_ConnectedRegions1.Dispose();
      ho_SelectedRegions.Dispose();

      hv_Parametros_Visualizacion_COPY_INP_TMP.Dispose();
      hv_Valores_Visualizacion_COPY_INP_TMP.Dispose();
      hv_AlturaBase.Dispose();
      hv_ObjectModel3D.Dispose();
      hv_SmoothObjectModel3D.Dispose();
      hv_NumNeighbors.Dispose();
      hv_DistanceDistribution.Dispose();
      hv_NumPoints.Dispose();
      hv_InlierRate.Dispose();
      hv_Distance.Dispose();
      hv_PoseOut1.Dispose();
      hv_BoxSlevee.Dispose();
      hv_Centro.Dispose();
      hv_Escena3D_RAWOut.Dispose();
      hv_Sleeve3DBox.Dispose();
      hv_AltoNominal.Dispose();
      hv_Pose2.Dispose();
      hv_Lx.Dispose();
      hv_Ly.Dispose();
      hv_Lz.Dispose();
      hv_ObjectModel3D2.Dispose();
      hv_ESFERA.Dispose();
      hv_ZMinBase.Dispose();
      hv_ZSleeve.Dispose();
      hv_Delta_X.Dispose();
      hv_Delta_Y.Dispose();
      hv_Delta_Z.Dispose();
      hv_Estado_Funcion.Dispose();
      hv_Diametro_en_X.Dispose();
      hv_Diametro_en_Y.Dispose();
      hv_AltoNominal_raw.Dispose();
      hv_Diametro_en_X_abs.Dispose();
      hv_Diametro_en_Y_abs.Dispose();
      hv_AltoNominal_raw_abs.Dispose();
      hv_Pose1.Dispose();
      hv_Length1.Dispose();
      hv_Length2.Dispose();
      hv_Length3.Dispose();
      hv_ObjectModel3D1.Dispose();
      hv_Diametro_Nominal_en_X.Dispose();
      hv_Diametro_Nominal_en_Y.Dispose();
      hv_Error_ejeX.Dispose();
      hv_Error_ejeY.Dispose();
      hv_Pose.Dispose();
      hv_ObjectModel3DRigidTrans.Dispose();
      hv_AlturaSupManga.Dispose();

      return;









      //*****************************************************************************************











      if ((int)(0) != 0)
      {






        //Busco el area mas gande ( se supone que todas son iguales)
        ho_SelectedRegions2.Dispose();
        HOperatorSet.SelectShapeStd(ho_SelectedRegions1, out ho_SelectedRegions2, 
            "max_area", 90);
        //dilation_circle (SelectedRegions2, SelectedRegions2, 10.5)



        ho_Yred.Dispose();
        HOperatorSet.ReduceDomain(ho_Y, ho_SelectedRegions2, out ho_Yred);
        ho_Xred.Dispose();
        HOperatorSet.ReduceDomain(ho_X, ho_SelectedRegions2, out ho_Xred);

        ho_Zred.Dispose();
        HOperatorSet.ReduceDomain(ho_Z, ho_SelectedRegions2, out ho_Zred);




        ho_Region_SupManga.Dispose();hv_Estado_Funcion.Dispose();
        Histagram_Filter(ho_Zred, ho_X, ho_Y, ho_Zred, out ho_Region_SupManga, out hv_Estado_Funcion);
        //***************************************************
        {
        HObject ExpTmpOutVar_0;
        HOperatorSet.ErosionCircle(ho_Region_SupManga, out ExpTmpOutVar_0, 1);
        ho_Region_SupManga.Dispose();
        ho_Region_SupManga = ExpTmpOutVar_0;
        }
        //*******************************************************
        {
        HObject ExpTmpOutVar_0;
        HOperatorSet.ClosingCircle(ho_Region_SupManga, out ExpTmpOutVar_0, 3.5);
        ho_Region_SupManga.Dispose();
        ho_Region_SupManga = ExpTmpOutVar_0;
        }
        {
        HObject ExpTmpOutVar_0;
        HOperatorSet.OpeningCircle(ho_Region_SupManga, out ExpTmpOutVar_0, 3.5);
        ho_Region_SupManga.Dispose();
        ho_Region_SupManga = ExpTmpOutVar_0;
        }

        ho_ConnectedRegions1.Dispose();
        HOperatorSet.Connection(ho_Region_SupManga, out ho_ConnectedRegions1);
        ho_SelectedRegions.Dispose();
        HOperatorSet.SelectShapeStd(ho_ConnectedRegions1, out ho_SelectedRegions, 
            "max_area", 90);

        {
        HObject ExpTmpOutVar_0;
        HOperatorSet.ReduceDomain(ho_Zred, ho_SelectedRegions, out ExpTmpOutVar_0
            );
        ho_Zred.Dispose();
        ho_Zred = ExpTmpOutVar_0;
        }
        {
        HObject ExpTmpOutVar_0;
        HOperatorSet.ReduceDomain(ho_Yred, ho_SelectedRegions, out ExpTmpOutVar_0
            );
        ho_Yred.Dispose();
        ho_Yred = ExpTmpOutVar_0;
        }
        {
        HObject ExpTmpOutVar_0;
        HOperatorSet.ReduceDomain(ho_Xred, ho_SelectedRegions, out ExpTmpOutVar_0
            );
        ho_Xred.Dispose();
        ho_Xred = ExpTmpOutVar_0;
        }



        ho_ImageGauss.Dispose();ho_LocalMaxima.Dispose();ho_ConnectedRegions.Dispose();hv_AlturaBase.Dispose();
        Get_Max_Altura_Mangas(ho_Zred, out ho_ImageGauss, out ho_LocalMaxima, out ho_ConnectedRegions, 
            hv_g_AltutaVirtualCamEstereo, out hv_AlturaBase);



        hv_ObjectModel3D.Dispose();
        HOperatorSet.XyzToObjectModel3d(ho_Xred, ho_Yred, ho_Zred, out hv_ObjectModel3D);
        {
        HTuple ExpTmpOutVar_0;
        NotZeroModel_3D_Sleeve(hv_ObjectModel3D, hv_g_AltutaVirtualCamEstereo, out ExpTmpOutVar_0);
        hv_ObjectModel3D.Dispose();
        hv_ObjectModel3D = ExpTmpOutVar_0;
        }


        hv_SmoothObjectModel3D.Dispose();
        HOperatorSet.SmoothObjectModel3d(hv_ObjectModel3D, "mls", "mls_kNN", 80, 
            out hv_SmoothObjectModel3D);
        {
        HTuple ExpTmpOutVar_0;
        HOperatorSet.SmoothObjectModel3d(hv_SmoothObjectModel3D, "mls", "mls_kNN", 
            80, out ExpTmpOutVar_0);
        hv_SmoothObjectModel3D.Dispose();
        hv_SmoothObjectModel3D = ExpTmpOutVar_0;
        }
        hv_BoxSlevee.Dispose();
        HOperatorSet.GetObjectModel3dParams(hv_SmoothObjectModel3D, "bounding_box1", 
            out hv_BoxSlevee);
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HTuple ExpTmpOutVar_0;
        HOperatorSet.SelectPointsObjectModel3d(hv_SmoothObjectModel3D, "point_coord_z", 
            500, (hv_BoxSlevee.TupleSelect(2))+25, out ExpTmpOutVar_0);
        hv_SmoothObjectModel3D.Dispose();
        hv_SmoothObjectModel3D = ExpTmpOutVar_0;
        }

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_PoseOut1.Dispose();
        Visualizar_3D(hv_SmoothObjectModel3D, hv_Parametros_Visualizacion_COPY_INP_TMP.TupleConcat(
            "alpha"), hv_Valores_Visualizacion_COPY_INP_TMP.TupleConcat(0.5), 1, 
            new HTuple(), new HTuple(), new HTuple(), hv_WindowHandle, out hv_PoseOut1);
        }

        hv_BoxSlevee.Dispose();
        HOperatorSet.GetObjectModel3dParams(hv_SmoothObjectModel3D, "bounding_box1", 
            out hv_BoxSlevee);
        hv_Centro.Dispose();
        HOperatorSet.GetObjectModel3dParams(hv_SmoothObjectModel3D, "center", out hv_Centro);
        //* (min_x, min_y, min_z, max_x, max_y, max_z)
        hv_Diametro_en_X.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Diametro_en_X = (hv_BoxSlevee.TupleSelect(
            3))-(hv_BoxSlevee.TupleSelect(0));
        }
        hv_Diametro_en_Y.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Diametro_en_Y = (hv_BoxSlevee.TupleSelect(
            4))-(hv_BoxSlevee.TupleSelect(1));
        }
        hv_AltoNominal_raw.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_AltoNominal_raw = (hv_BoxSlevee.TupleSelect(
            5))-(hv_BoxSlevee.TupleSelect(2));
        }


        hv_Diametro_en_X_abs.Dispose();
        HOperatorSet.TupleAbs(hv_Diametro_en_X, out hv_Diametro_en_X_abs);
        hv_Diametro_en_Y_abs.Dispose();
        HOperatorSet.TupleAbs(hv_Diametro_en_Y, out hv_Diametro_en_Y_abs);
        hv_AltoNominal_raw_abs.Dispose();
        HOperatorSet.TupleAbs(hv_AltoNominal_raw, out hv_AltoNominal_raw_abs);



        hv_Pose1.Dispose();hv_Length1.Dispose();hv_Length2.Dispose();hv_Length3.Dispose();
        HOperatorSet.SmallestBoundingBoxObjectModel3d(hv_SmoothObjectModel3D, "axis_aligned", 
            out hv_Pose1, out hv_Length1, out hv_Length2, out hv_Length3);


        hv_ObjectModel3D1.Dispose();
        HOperatorSet.GenBoxObjectModel3d(hv_Pose1, hv_Length1, hv_Length2, hv_Length3, 
            out hv_ObjectModel3D1);

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_PoseOut1.Dispose();
        Visualizar_3D(hv_SmoothObjectModel3D.TupleConcat(hv_ObjectModel3D1), hv_Parametros_Visualizacion_COPY_INP_TMP.TupleConcat(
            "alpha"), hv_Valores_Visualizacion_COPY_INP_TMP.TupleConcat(0.5), 1, 
            new HTuple(), new HTuple(), new HTuple(), hv_WindowHandle, out hv_PoseOut1);
        }



        //Obtengo el modelo 3D de la manga y extarigo su altura.
        hv_Sleeve3DBox.Dispose();
        HOperatorSet.GetObjectModel3dParams(hv_ObjectModel3D_Core_Pallet, "bounding_box1", 
            out hv_Sleeve3DBox);
        hv_Diametro_Nominal_en_X.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Diametro_Nominal_en_X = (hv_Sleeve3DBox.TupleSelect(
            3))-(hv_Sleeve3DBox.TupleSelect(0));
        }
        hv_Diametro_Nominal_en_Y.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Diametro_Nominal_en_Y = (hv_Sleeve3DBox.TupleSelect(
            4))-(hv_Sleeve3DBox.TupleSelect(1));
        }




        hv_Error_ejeX.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Error_ejeX = hv_Diametro_en_X-hv_Diametro_Nominal_en_X;
        }
        hv_Error_ejeY.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Error_ejeY = hv_Diametro_en_Y-hv_Diametro_Nominal_en_Y;
        }
        {
        HTuple ExpTmpOutVar_0;
        HOperatorSet.TupleAbs(hv_Error_ejeX, out ExpTmpOutVar_0);
        hv_Error_ejeX.Dispose();
        hv_Error_ejeX = ExpTmpOutVar_0;
        }
        {
        HTuple ExpTmpOutVar_0;
        HOperatorSet.TupleAbs(hv_Error_ejeY, out ExpTmpOutVar_0);
        hv_Error_ejeY.Dispose();
        hv_Error_ejeY = ExpTmpOutVar_0;
        }

        if ((int)(new HTuple(((hv_Centro.TupleSelect(0))).TupleLess(0))) != 0)
        {
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Error_ejeX = -hv_Error_ejeX;
          hv_Error_ejeX.Dispose();
          hv_Error_ejeX = ExpTmpLocalVar_Error_ejeX;
          }
          }
        }
        else if ((int)(new HTuple(((hv_Centro.TupleSelect(0))).TupleGreaterEqual(
            0))) != 0)
        {
          {
          HTuple 
            ExpTmpLocalVar_Error_ejeX = new HTuple(hv_Error_ejeX);
          hv_Error_ejeX.Dispose();
          hv_Error_ejeX = ExpTmpLocalVar_Error_ejeX;
          }
        }


        if ((int)(new HTuple(((hv_Centro.TupleSelect(1))).TupleLess(0))) != 0)
        {
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Error_ejeY = -hv_Error_ejeY;
          hv_Error_ejeY.Dispose();
          hv_Error_ejeY = ExpTmpLocalVar_Error_ejeY;
          }
          }
        }
        else if ((int)(new HTuple(((hv_Centro.TupleSelect(1))).TupleGreaterEqual(
            0))) != 0)
        {
          {
          HTuple 
            ExpTmpLocalVar_Error_ejeY = new HTuple(hv_Error_ejeY);
          hv_Error_ejeY.Dispose();
          hv_Error_ejeY = ExpTmpLocalVar_Error_ejeY;
          }
        }


        hv_Pose.Dispose();
        HOperatorSet.CreatePose(hv_Error_ejeX, hv_Error_ejeY, 0, 0, 0, 0, "Rp+T", 
            "gba", "point", out hv_Pose);
        hv_ObjectModel3DRigidTrans.Dispose();
        HOperatorSet.RigidTransObjectModel3d(hv_SmoothObjectModel3D, hv_Pose, out hv_ObjectModel3DRigidTrans);
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_PoseOut1.Dispose();
        Visualizar_3D(hv_ObjectModel3DRigidTrans.TupleConcat(hv_ObjectModel3D1), 
            hv_Parametros_Visualizacion_COPY_INP_TMP.TupleConcat("alpha"), hv_Valores_Visualizacion_COPY_INP_TMP.TupleConcat(
            0.5), 1, new HTuple(), new HTuple(), new HTuple(), hv_WindowHandle, out hv_PoseOut1);
        }



        hv_AltoNominal.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_AltoNominal = (hv_Sleeve3DBox.TupleSelect(
            5))-(hv_Sleeve3DBox.TupleSelect(2));
        }
        {
        HTuple ExpTmpOutVar_0;
        HOperatorSet.TupleAbs(hv_AltoNominal, out ExpTmpOutVar_0);
        hv_AltoNominal.Dispose();
        hv_AltoNominal = ExpTmpOutVar_0;
        }

        //**************************************************************************************
        hv_AlturaSupManga.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_AlturaSupManga = (hv_Centro.TupleSelect(
            2))-hv_g_AltutaVirtualCamEstereo;
        }

        hv_ZSleeve.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_ZSleeve = hv_AlturaSupManga+(hv_AltoNominal*0.20);
        }

        //****************************************************************************************

        //desde la Base calculo la mitad de la manga.


        hv_Delta_X.Dispose();
        hv_Delta_X = 0;
        hv_Delta_Y.Dispose();
        hv_Delta_Y = 0;
        hv_Delta_Z.Dispose();
        hv_Delta_Z = 0;

        hv_PosX.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_PosX = ((hv_Centro.TupleSelect(
            0))+hv_Delta_X)+hv_Error_ejeX;
        }
        hv_PosY.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_PosY = ((hv_Centro.TupleSelect(
            1))+hv_Delta_Y)+hv_Error_ejeY;
        }
        hv_PosZ.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_PosZ = hv_ZSleeve+hv_Delta_Z;
        }

        hv_PosicionSleeve.Dispose();
        HOperatorSet.CreatePose(hv_PosX, hv_PosY, hv_PosZ, 0, 0, 0, "Rp+T", "gba", 
            "point", out hv_PosicionSleeve);


        ho_ImageGauss.Dispose();
        ho_LocalMaxima.Dispose();
        ho_ConnectedRegions.Dispose();
        ho_Region_SupManga.Dispose();
        ho_ConnectedRegions1.Dispose();
        ho_SelectedRegions.Dispose();

        hv_Parametros_Visualizacion_COPY_INP_TMP.Dispose();
        hv_Valores_Visualizacion_COPY_INP_TMP.Dispose();
        hv_AlturaBase.Dispose();
        hv_ObjectModel3D.Dispose();
        hv_SmoothObjectModel3D.Dispose();
        hv_NumNeighbors.Dispose();
        hv_DistanceDistribution.Dispose();
        hv_NumPoints.Dispose();
        hv_InlierRate.Dispose();
        hv_Distance.Dispose();
        hv_PoseOut1.Dispose();
        hv_BoxSlevee.Dispose();
        hv_Centro.Dispose();
        hv_Escena3D_RAWOut.Dispose();
        hv_Sleeve3DBox.Dispose();
        hv_AltoNominal.Dispose();
        hv_Pose2.Dispose();
        hv_Lx.Dispose();
        hv_Ly.Dispose();
        hv_Lz.Dispose();
        hv_ObjectModel3D2.Dispose();
        hv_ESFERA.Dispose();
        hv_ZMinBase.Dispose();
        hv_ZSleeve.Dispose();
        hv_Delta_X.Dispose();
        hv_Delta_Y.Dispose();
        hv_Delta_Z.Dispose();
        hv_Estado_Funcion.Dispose();
        hv_Diametro_en_X.Dispose();
        hv_Diametro_en_Y.Dispose();
        hv_AltoNominal_raw.Dispose();
        hv_Diametro_en_X_abs.Dispose();
        hv_Diametro_en_Y_abs.Dispose();
        hv_AltoNominal_raw_abs.Dispose();
        hv_Pose1.Dispose();
        hv_Length1.Dispose();
        hv_Length2.Dispose();
        hv_Length3.Dispose();
        hv_ObjectModel3D1.Dispose();
        hv_Diametro_Nominal_en_X.Dispose();
        hv_Diametro_Nominal_en_Y.Dispose();
        hv_Error_ejeX.Dispose();
        hv_Error_ejeY.Dispose();
        hv_Pose.Dispose();
        hv_ObjectModel3DRigidTrans.Dispose();
        hv_AlturaSupManga.Dispose();

        return;


      }
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_ImageGauss.Dispose();
      ho_LocalMaxima.Dispose();
      ho_ConnectedRegions.Dispose();
      ho_Region_SupManga.Dispose();
      ho_ConnectedRegions1.Dispose();
      ho_SelectedRegions.Dispose();

      hv_Parametros_Visualizacion_COPY_INP_TMP.Dispose();
      hv_Valores_Visualizacion_COPY_INP_TMP.Dispose();
      hv_AlturaBase.Dispose();
      hv_ObjectModel3D.Dispose();
      hv_SmoothObjectModel3D.Dispose();
      hv_NumNeighbors.Dispose();
      hv_DistanceDistribution.Dispose();
      hv_NumPoints.Dispose();
      hv_InlierRate.Dispose();
      hv_Distance.Dispose();
      hv_PoseOut1.Dispose();
      hv_BoxSlevee.Dispose();
      hv_Centro.Dispose();
      hv_Escena3D_RAWOut.Dispose();
      hv_Sleeve3DBox.Dispose();
      hv_AltoNominal.Dispose();
      hv_Pose2.Dispose();
      hv_Lx.Dispose();
      hv_Ly.Dispose();
      hv_Lz.Dispose();
      hv_ObjectModel3D2.Dispose();
      hv_ESFERA.Dispose();
      hv_ZMinBase.Dispose();
      hv_ZSleeve.Dispose();
      hv_Delta_X.Dispose();
      hv_Delta_Y.Dispose();
      hv_Delta_Z.Dispose();
      hv_Estado_Funcion.Dispose();
      hv_Diametro_en_X.Dispose();
      hv_Diametro_en_Y.Dispose();
      hv_AltoNominal_raw.Dispose();
      hv_Diametro_en_X_abs.Dispose();
      hv_Diametro_en_Y_abs.Dispose();
      hv_AltoNominal_raw_abs.Dispose();
      hv_Pose1.Dispose();
      hv_Length1.Dispose();
      hv_Length2.Dispose();
      hv_Length3.Dispose();
      hv_ObjectModel3D1.Dispose();
      hv_Diametro_Nominal_en_X.Dispose();
      hv_Diametro_Nominal_en_Y.Dispose();
      hv_Error_ejeX.Dispose();
      hv_Error_ejeY.Dispose();
      hv_Pose.Dispose();
      hv_ObjectModel3DRigidTrans.Dispose();
      hv_AlturaSupManga.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void get_SleeveImage (HObject ho_ModelImage, out HObject ho_X, out HObject ho_Y, 
      out HObject ho_Z, HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Matrix_Sleeve_New, 
      HTuple hv_Cod_Core_ToUse)
  {




    // Stack for temporary objects 
    HObject[] OTemp = new HObject[20];

    // Local iconic variables 

    HObject ho_Image, ho_SleevePos, ho_EntidadDilatada;
    HObject ho_ImgLeftCamera;

    // Local control variables 

    HTuple hv_Nelementos = new HTuple(), hv_Index1 = new HTuple();
    HTuple hv_Path_to_Img = new HTuple(), hv_DitsiObjMax = new HTuple();
    HTuple hv_Estado_Funcion = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_X);
    HOperatorSet.GenEmptyObj(out ho_Y);
    HOperatorSet.GenEmptyObj(out ho_Z);
    HOperatorSet.GenEmptyObj(out ho_Image);
    HOperatorSet.GenEmptyObj(out ho_SleevePos);
    HOperatorSet.GenEmptyObj(out ho_EntidadDilatada);
    HOperatorSet.GenEmptyObj(out ho_ImgLeftCamera);
    try
    {
      //Busco dependiendo del path de la manga, la imagen que corresponde
      hv_Nelementos.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Nelementos = new HTuple(hvec_Matrix_Sleeve_New.Length);
      }
      HTuple end_val2 = hv_Nelementos-1;
      HTuple step_val2 = 1;
      for (hv_Index1=1; hv_Index1.Continue(end_val2, step_val2); hv_Index1 = hv_Index1.TupleAdd(step_val2))
      {


        if ((int)(new HTuple(hv_Cod_Core_ToUse.TupleEqual(hvec_Matrix_Sleeve_New[hv_Index1][0].T))) != 0)
        {
          hv_Path_to_Img.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Path_to_Img = new HTuple(hvec_Matrix_Sleeve_New[hv_Index1][2].T);
          }
          break;
        }
      }

      ho_Image.Dispose();
      HOperatorSet.ReadImage(out ho_Image, hv_Path_to_Img);
      ho_X.Dispose();ho_Y.Dispose();ho_Z.Dispose();
      Adq_XYZ_Img(ho_Image, out ho_X, out ho_Y, out ho_Z);

      //******************************************************
      //Segmento el dore de manera dinamica******************
      hv_DitsiObjMax.Dispose();
      hv_DitsiObjMax = 2515.0;
      ho_SleevePos.Dispose();hv_Estado_Funcion.Dispose();
      Segmentar_Core(ho_Z, ho_X, ho_Y, ho_Z, out ho_SleevePos, hv_DitsiObjMax, out hv_Estado_Funcion);
      //******************************************************
      ho_EntidadDilatada.Dispose();
      HOperatorSet.DilationCircle(ho_SleevePos, out ho_EntidadDilatada, 60.5);
      {
      HObject ExpTmpOutVar_0;
      HOperatorSet.ReduceDomain(ho_Z, ho_EntidadDilatada, out ExpTmpOutVar_0);
      ho_Z.Dispose();
      ho_Z = ExpTmpOutVar_0;
      }

      ho_ImgLeftCamera.Dispose();
      HOperatorSet.SelectObj(ho_ModelImage, out ho_ImgLeftCamera, 1);
      HOperatorSet.DispObj(ho_EntidadDilatada, hv_ExpDefaultWinHandle);
      ho_Image.Dispose();
      ho_SleevePos.Dispose();
      ho_EntidadDilatada.Dispose();
      ho_ImgLeftCamera.Dispose();

      hv_Nelementos.Dispose();
      hv_Index1.Dispose();
      hv_Path_to_Img.Dispose();
      hv_DitsiObjMax.Dispose();
      hv_Estado_Funcion.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_Image.Dispose();
      ho_SleevePos.Dispose();
      ho_EntidadDilatada.Dispose();
      ho_ImgLeftCamera.Dispose();

      hv_Nelementos.Dispose();
      hv_Index1.Dispose();
      hv_Path_to_Img.Dispose();
      hv_DitsiObjMax.Dispose();
      hv_Estado_Funcion.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Smart_Patron (out HObject ho_Image, HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Vector_Estado_Fx, 
      HTuple hv_SerialHandle, HTuple hv_ExposureTime, HTuple hv_Ganancia, HTuple hv_AcqHandle, 
      HTuple hv_ConteoFotoPatron, HTuple hv_errorZ_dentroMargen, HTuple hv_Index, 
      out HTuple hv_Estado, out HTuple hv_Exception, out HTuple hv_ConteoFotoPatron_New, 
      out HTuple hv_errorZ_dentroMargen_New, out HTuple hv_g_Error_CamaraOpt_Adq)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Time = new HTuple(), hv_Gain = new HTuple();
    HTuple hv_FotoN = new HTuple(), hv_Resultado = new HTuple();
    HTuple hv_Procesando = new HTuple(), hv_Mensaje = new HTuple();
    HTuple hv_Width = new HTuple(), hv_Height = new HTuple();
    HTuple hv_MSecond = new HTuple(), hv_Second = new HTuple();
    HTuple hv_Minute = new HTuple(), hv_Hour = new HTuple();
    HTuple hv_Day = new HTuple(), hv_YDay = new HTuple(), hv_Month = new HTuple();
    HTuple hv_Year = new HTuple(), hv_Calibration = new HTuple();
    HTuple hv_CalTabFile = new HTuple(), hv_StartCamParam = new HTuple();
    HTuple hv_CameraPoseOut = new HTuple(), hv_PoseForCalibrationPlate = new HTuple();
    HTuple hv_EstadoFx = new HTuple(), hv_ExceptionFile = new HTuple();
    HTuple hv_WindowHandle = new HTuple(), hv_PosicionEnZ = new HTuple();
    HTuple hv_umbral = new HTuple(), hv_Z_Objetivo = new HTuple();
    HTuple hv_Error_Z = new HTuple(), hv_Distancia_Cero = new HTuple();
    HTuple   hv_ConteoFotoPatron_COPY_INP_TMP = new HTuple(hv_ConteoFotoPatron);

    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Image);
    hv_Estado = new HTuple();
    hv_Exception = new HTuple();
    hv_ConteoFotoPatron_New = new HTuple();
    hv_errorZ_dentroMargen_New = new HTuple();
    hv_g_Error_CamaraOpt_Adq = new HTuple();
    try
    {
      try
      {

        hv_Time.Dispose();
        hv_Time = new HTuple(hv_ExposureTime);
        hv_Gain.Dispose();
        hv_Gain = new HTuple(hv_Ganancia);
        Set_exposure_Time_cam_0(hv_AcqHandle, hv_Time, hv_Gain);



        //# ##########################################    
        //# ##########################################  
        //# ##########################################  
        hv_FotoN.Dispose();
        hv_FotoN = 1;



        ho_Image.Dispose();hv_g_Error_CamaraOpt_Adq.Dispose();
        Get_Image(out ho_Image, hv_AcqHandle, out hv_g_Error_CamaraOpt_Adq);

        if ((int)(hv_g_Error_CamaraOpt_Adq) != 0)
        {
          hv_Resultado.Dispose();
          hv_Resultado = 2;
          hv_Procesando.Dispose();
          hv_Procesando = 1;
          Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
          hv_ConteoFotoPatron_New.Dispose();
          hv_ConteoFotoPatron_New = 0;
          hv_Mensaje.Dispose();
          hv_Mensaje = "### ERROR ### Conexion de optica Perdida";
          Send_Data_Info(hv_Mensaje, hv_SerialHandle);


          hv_ConteoFotoPatron_COPY_INP_TMP.Dispose();
          hv_Time.Dispose();
          hv_Gain.Dispose();
          hv_FotoN.Dispose();
          hv_Resultado.Dispose();
          hv_Procesando.Dispose();
          hv_Mensaje.Dispose();
          hv_Width.Dispose();
          hv_Height.Dispose();
          hv_MSecond.Dispose();
          hv_Second.Dispose();
          hv_Minute.Dispose();
          hv_Hour.Dispose();
          hv_Day.Dispose();
          hv_YDay.Dispose();
          hv_Month.Dispose();
          hv_Year.Dispose();
          hv_Calibration.Dispose();
          hv_CalTabFile.Dispose();
          hv_StartCamParam.Dispose();
          hv_CameraPoseOut.Dispose();
          hv_PoseForCalibrationPlate.Dispose();
          hv_EstadoFx.Dispose();
          hv_ExceptionFile.Dispose();
          hv_WindowHandle.Dispose();
          hv_PosicionEnZ.Dispose();
          hv_umbral.Dispose();
          hv_Z_Objetivo.Dispose();
          hv_Error_Z.Dispose();
          hv_Distancia_Cero.Dispose();

          return;
        }







        //# ##########################################  
        //# ##########################################  
        //# ##########################################  

        dev_resize_window_fit_image(ho_Image, 0, 0, 500, 500);
        HOperatorSet.DispObj(ho_Image, hv_ExpDefaultWinHandle);
        hv_Width.Dispose();hv_Height.Dispose();
        HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);


        //**********************************************************************
        //***** Guardo las Imagenes ********************************************
        hv_MSecond.Dispose();hv_Second.Dispose();hv_Minute.Dispose();hv_Hour.Dispose();hv_Day.Dispose();hv_YDay.Dispose();hv_Month.Dispose();hv_Year.Dispose();
        HOperatorSet.GetSystemTime(out hv_MSecond, out hv_Second, out hv_Minute, 
            out hv_Hour, out hv_Day, out hv_YDay, out hv_Month, out hv_Year);

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.WriteObject(ho_Image, ((("D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/Imagen"+hv_Month)+hv_Day)+hv_Hour)+hv_Second);
        }


        //read_image (Image, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/Imagen1025129.hobj')

        //read_image (Image, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/Imagen1091955.hobj')



        //***********************************************************************
        //**************************************************
        //Hand Eye Apunto al Descriptor
        //**************************************************
        hv_Mensaje.Dispose();
        hv_Mensaje = "Cargando descriptores de distorcion y de patron";
        Send_Data_Info(hv_Mensaje, hv_SerialHandle);

        hv_Calibration.Dispose();
        hv_Calibration = "5x5_10";
        hv_CalTabFile.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_CalTabFile = ("C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/6.- Caltab Din3/Caltab"+hv_Calibration)+".descr";
        }

        hv_StartCamParam.Dispose();hv_CameraPoseOut.Dispose();
        Get_Cam_Parameters(out hv_StartCamParam, out hv_CameraPoseOut);


        //**************************************************
        //# ### Envio data de estado ########################
        hv_Estado.Dispose();
        hv_Estado = 16;
        Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
        //# #################################################
        //
        hv_PoseForCalibrationPlate.Dispose();hv_EstadoFx.Dispose();hv_ExceptionFile.Dispose();
        Get_Pose_Caltab_Smart(ho_Image, hv_StartCamParam, hv_CalTabFile, hv_SerialHandle, 
            out hv_PoseForCalibrationPlate, out hv_EstadoFx, out hv_ExceptionFile);




        //dev_get_window(...);
        if ((int)(hv_EstadoFx) != 0)
        {

          hv_errorZ_dentroMargen_New.Dispose();
          hv_errorZ_dentroMargen_New = 1;
          hv_PosicionEnZ.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_PosicionEnZ = hv_PoseForCalibrationPlate.TupleSelect(
              2);
          }
          hv_umbral.Dispose();
          hv_umbral = 4;
          hv_Z_Objetivo.Dispose();
          hv_Z_Objetivo = 1625.0;

          hv_Error_Z.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Error_Z = hv_Z_Objetivo-hv_PosicionEnZ;
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          disp_message(hv_ExpDefaultWinHandle, "Error de Altura -> "+hv_Error_Z, 
              "window", 12, 12, "black", "true");
          }
          {
          HTuple ExpTmpOutVar_0;
          HOperatorSet.TupleAbs(hv_Error_Z, out ExpTmpOutVar_0);
          hv_Error_Z.Dispose();
          hv_Error_Z = ExpTmpOutVar_0;
          }


          if ((int)((new HTuple(hv_Error_Z.TupleGreater(hv_umbral))).TupleAnd(new HTuple(hv_ConteoFotoPatron_COPY_INP_TMP.TupleEqual(
              3)))) != 0)
          {

            hv_Mensaje.Dispose();
            hv_Mensaje = "####### ERROR. ####### Umbral de Z excede el Maximo";
            Send_Data_Info(hv_Mensaje, hv_SerialHandle);
            hv_errorZ_dentroMargen_New.Dispose();
            hv_errorZ_dentroMargen_New = 0;
            hv_ConteoFotoPatron_COPY_INP_TMP.Dispose();
            hv_ConteoFotoPatron_COPY_INP_TMP = 0;
            hv_ConteoFotoPatron_New.Dispose();
            hv_ConteoFotoPatron_New = new HTuple(hv_ConteoFotoPatron_COPY_INP_TMP);

            hv_ConteoFotoPatron_COPY_INP_TMP.Dispose();
            hv_Time.Dispose();
            hv_Gain.Dispose();
            hv_FotoN.Dispose();
            hv_Resultado.Dispose();
            hv_Procesando.Dispose();
            hv_Mensaje.Dispose();
            hv_Width.Dispose();
            hv_Height.Dispose();
            hv_MSecond.Dispose();
            hv_Second.Dispose();
            hv_Minute.Dispose();
            hv_Hour.Dispose();
            hv_Day.Dispose();
            hv_YDay.Dispose();
            hv_Month.Dispose();
            hv_Year.Dispose();
            hv_Calibration.Dispose();
            hv_CalTabFile.Dispose();
            hv_StartCamParam.Dispose();
            hv_CameraPoseOut.Dispose();
            hv_PoseForCalibrationPlate.Dispose();
            hv_EstadoFx.Dispose();
            hv_ExceptionFile.Dispose();
            hv_WindowHandle.Dispose();
            hv_PosicionEnZ.Dispose();
            hv_umbral.Dispose();
            hv_Z_Objetivo.Dispose();
            hv_Error_Z.Dispose();
            hv_Distancia_Cero.Dispose();

            return;

          }
          else if ((int)((new HTuple(((hv_PoseForCalibrationPlate.TupleSelect(
              5))).TupleGreater(45))).TupleAnd(new HTuple(((hv_PoseForCalibrationPlate.TupleSelect(
              5))).TupleLess(315)))) != 0)
          {
            hv_Distancia_Cero.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_Distancia_Cero = hv_PoseForCalibrationPlate.TupleSelect(
                5);
            }
            hv_Mensaje.Dispose();
            hv_Mensaje = "####### ERROR. ####### Patron detectado AL REVEZ";
            Send_Data_Info(hv_Mensaje, hv_SerialHandle);
            hv_errorZ_dentroMargen_New.Dispose();
            hv_errorZ_dentroMargen_New = 0;
            hv_ConteoFotoPatron_COPY_INP_TMP.Dispose();
            hv_ConteoFotoPatron_COPY_INP_TMP = 0;
            hv_ConteoFotoPatron_New.Dispose();
            hv_ConteoFotoPatron_New = new HTuple(hv_ConteoFotoPatron_COPY_INP_TMP);

            hv_ConteoFotoPatron_COPY_INP_TMP.Dispose();
            hv_Time.Dispose();
            hv_Gain.Dispose();
            hv_FotoN.Dispose();
            hv_Resultado.Dispose();
            hv_Procesando.Dispose();
            hv_Mensaje.Dispose();
            hv_Width.Dispose();
            hv_Height.Dispose();
            hv_MSecond.Dispose();
            hv_Second.Dispose();
            hv_Minute.Dispose();
            hv_Hour.Dispose();
            hv_Day.Dispose();
            hv_YDay.Dispose();
            hv_Month.Dispose();
            hv_Year.Dispose();
            hv_Calibration.Dispose();
            hv_CalTabFile.Dispose();
            hv_StartCamParam.Dispose();
            hv_CameraPoseOut.Dispose();
            hv_PoseForCalibrationPlate.Dispose();
            hv_EstadoFx.Dispose();
            hv_ExceptionFile.Dispose();
            hv_WindowHandle.Dispose();
            hv_PosicionEnZ.Dispose();
            hv_umbral.Dispose();
            hv_Z_Objetivo.Dispose();
            hv_Error_Z.Dispose();
            hv_Distancia_Cero.Dispose();

            return;

          }
          else if ((int)(new HTuple(hv_ConteoFotoPatron_COPY_INP_TMP.TupleGreaterEqual(
              2))) != 0)
          {
            hv_ConteoFotoPatron_COPY_INP_TMP.Dispose();
            hv_ConteoFotoPatron_COPY_INP_TMP = 0;
            hv_ConteoFotoPatron_New.Dispose();
            hv_ConteoFotoPatron_New = new HTuple(hv_ConteoFotoPatron_COPY_INP_TMP);
          }


          hv_Estado.Dispose();
          hv_Estado = 14;
          Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
          //*******************************
          //Enviar por ETHERNETIP
          //*******************************
          //# ### Envio data de estado ########################
          hv_Estado.Dispose();
          hv_Estado = 17;
          Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
          //# #################################################


          Send_Data_To_Robot(hv_PoseForCalibrationPlate, hv_SerialHandle);
          hv_Resultado.Dispose();
          hv_Resultado = 1;
          hv_Procesando.Dispose();
          hv_Procesando = 1;
          Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
          //# #################################################
          hv_Estado.Dispose();
          hv_Estado = new HTuple(hv_EstadoFx);
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_ConteoFotoPatron = hv_ConteoFotoPatron_COPY_INP_TMP+1;
          hv_ConteoFotoPatron_COPY_INP_TMP.Dispose();
          hv_ConteoFotoPatron_COPY_INP_TMP = ExpTmpLocalVar_ConteoFotoPatron;
          }
          }
          hv_ConteoFotoPatron_New.Dispose();
          hv_ConteoFotoPatron_New = new HTuple(hv_ConteoFotoPatron_COPY_INP_TMP);

        }
        else
        {

          hv_Estado.Dispose();
          hv_Estado = 0;
          hv_Mensaje.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Mensaje = ("####### FIN BLOQUE 2. ERROR en Busqueda N°->"+hv_Index)+" de patron #######";
          }
          Send_Data_Info(hv_Mensaje, hv_SerialHandle);

          hv_ConteoFotoPatron_New.Dispose();
          hv_ConteoFotoPatron_New = 0;

        }


        //Exception := ExceptionFile



        hv_ConteoFotoPatron_COPY_INP_TMP.Dispose();
        hv_Time.Dispose();
        hv_Gain.Dispose();
        hv_FotoN.Dispose();
        hv_Resultado.Dispose();
        hv_Procesando.Dispose();
        hv_Mensaje.Dispose();
        hv_Width.Dispose();
        hv_Height.Dispose();
        hv_MSecond.Dispose();
        hv_Second.Dispose();
        hv_Minute.Dispose();
        hv_Hour.Dispose();
        hv_Day.Dispose();
        hv_YDay.Dispose();
        hv_Month.Dispose();
        hv_Year.Dispose();
        hv_Calibration.Dispose();
        hv_CalTabFile.Dispose();
        hv_StartCamParam.Dispose();
        hv_CameraPoseOut.Dispose();
        hv_PoseForCalibrationPlate.Dispose();
        hv_EstadoFx.Dispose();
        hv_ExceptionFile.Dispose();
        hv_WindowHandle.Dispose();
        hv_PosicionEnZ.Dispose();
        hv_umbral.Dispose();
        hv_Z_Objetivo.Dispose();
        hv_Error_Z.Dispose();
        hv_Distancia_Cero.Dispose();

        return;

      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);

        //write_object (Image, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/ImagenNODECT_'+Month+Day+Hour+Second)
        hv_Resultado.Dispose();
        hv_Resultado = 2;
        hv_Procesando.Dispose();
        hv_Procesando = 1;
        Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
        hv_ConteoFotoPatron_New.Dispose();
        hv_ConteoFotoPatron_New = 0;


        hv_ConteoFotoPatron_COPY_INP_TMP.Dispose();
        hv_Time.Dispose();
        hv_Gain.Dispose();
        hv_FotoN.Dispose();
        hv_Resultado.Dispose();
        hv_Procesando.Dispose();
        hv_Mensaje.Dispose();
        hv_Width.Dispose();
        hv_Height.Dispose();
        hv_MSecond.Dispose();
        hv_Second.Dispose();
        hv_Minute.Dispose();
        hv_Hour.Dispose();
        hv_Day.Dispose();
        hv_YDay.Dispose();
        hv_Month.Dispose();
        hv_Year.Dispose();
        hv_Calibration.Dispose();
        hv_CalTabFile.Dispose();
        hv_StartCamParam.Dispose();
        hv_CameraPoseOut.Dispose();
        hv_PoseForCalibrationPlate.Dispose();
        hv_EstadoFx.Dispose();
        hv_ExceptionFile.Dispose();
        hv_WindowHandle.Dispose();
        hv_PosicionEnZ.Dispose();
        hv_umbral.Dispose();
        hv_Z_Objetivo.Dispose();
        hv_Error_Z.Dispose();
        hv_Distancia_Cero.Dispose();

        return;

        //# #################################################

      }

      hv_ConteoFotoPatron_COPY_INP_TMP.Dispose();
      hv_Time.Dispose();
      hv_Gain.Dispose();
      hv_FotoN.Dispose();
      hv_Resultado.Dispose();
      hv_Procesando.Dispose();
      hv_Mensaje.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_MSecond.Dispose();
      hv_Second.Dispose();
      hv_Minute.Dispose();
      hv_Hour.Dispose();
      hv_Day.Dispose();
      hv_YDay.Dispose();
      hv_Month.Dispose();
      hv_Year.Dispose();
      hv_Calibration.Dispose();
      hv_CalTabFile.Dispose();
      hv_StartCamParam.Dispose();
      hv_CameraPoseOut.Dispose();
      hv_PoseForCalibrationPlate.Dispose();
      hv_EstadoFx.Dispose();
      hv_ExceptionFile.Dispose();
      hv_WindowHandle.Dispose();
      hv_PosicionEnZ.Dispose();
      hv_umbral.Dispose();
      hv_Z_Objetivo.Dispose();
      hv_Error_Z.Dispose();
      hv_Distancia_Cero.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_ConteoFotoPatron_COPY_INP_TMP.Dispose();
      hv_Time.Dispose();
      hv_Gain.Dispose();
      hv_FotoN.Dispose();
      hv_Resultado.Dispose();
      hv_Procesando.Dispose();
      hv_Mensaje.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_MSecond.Dispose();
      hv_Second.Dispose();
      hv_Minute.Dispose();
      hv_Hour.Dispose();
      hv_Day.Dispose();
      hv_YDay.Dispose();
      hv_Month.Dispose();
      hv_Year.Dispose();
      hv_Calibration.Dispose();
      hv_CalTabFile.Dispose();
      hv_StartCamParam.Dispose();
      hv_CameraPoseOut.Dispose();
      hv_PoseForCalibrationPlate.Dispose();
      hv_EstadoFx.Dispose();
      hv_ExceptionFile.Dispose();
      hv_WindowHandle.Dispose();
      hv_PosicionEnZ.Dispose();
      hv_umbral.Dispose();
      hv_Z_Objetivo.Dispose();
      hv_Error_Z.Dispose();
      hv_Distancia_Cero.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Smart_Patron_COPY_1 (out HObject ho_Image, HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Vector_Estado_Fx, 
      HTuple hv_SerialHandle, HTuple hv_ExposureTime, HTuple hv_Ganancia, HTuple hv_AcqHandle, 
      out HTuple hv_Estado, out HTuple hv_Exception)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Time = new HTuple(), hv_Gain = new HTuple();
    HTuple hv_g_Error_CamaraOpt_Adq = new HTuple(), hv_Width = new HTuple();
    HTuple hv_Height = new HTuple(), hv_MSecond = new HTuple();
    HTuple hv_Second = new HTuple(), hv_Minute = new HTuple();
    HTuple hv_Hour = new HTuple(), hv_Day = new HTuple(), hv_YDay = new HTuple();
    HTuple hv_Month = new HTuple(), hv_Year = new HTuple();
    HTuple hv_Mensaje = new HTuple(), hv_Calibration = new HTuple();
    HTuple hv_CalTabFile = new HTuple(), hv_StartCamParam = new HTuple();
    HTuple hv_CameraPoseOut = new HTuple(), hv_PoseForCalibrationPlate = new HTuple();
    HTuple hv_EstadoFx = new HTuple(), hv_ExceptionFile = new HTuple();
    HTuple hv_Resultado = new HTuple(), hv_Procesando = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Image);
    hv_Estado = new HTuple();
    hv_Exception = new HTuple();
    try
    {
      try
      {

        hv_Time.Dispose();
        hv_Time = new HTuple(hv_ExposureTime);
        hv_Gain.Dispose();
        hv_Gain = new HTuple(hv_Ganancia);
        Set_exposure_Time_cam_0(hv_AcqHandle, hv_Time, hv_Gain);

        ho_Image.Dispose();hv_g_Error_CamaraOpt_Adq.Dispose();
        Get_Image(out ho_Image, hv_AcqHandle, out hv_g_Error_CamaraOpt_Adq);
        HOperatorSet.DispObj(ho_Image, hv_ExpDefaultWinHandle);
        hv_Width.Dispose();hv_Height.Dispose();
        HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);


        //**********************************************************************
        //***** Guardo las Imagenes ********************************************
        hv_MSecond.Dispose();hv_Second.Dispose();hv_Minute.Dispose();hv_Hour.Dispose();hv_Day.Dispose();hv_YDay.Dispose();hv_Month.Dispose();hv_Year.Dispose();
        HOperatorSet.GetSystemTime(out hv_MSecond, out hv_Second, out hv_Minute, 
            out hv_Hour, out hv_Day, out hv_YDay, out hv_Month, out hv_Year);

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.WriteObject(ho_Image, ((("D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/Imagen"+hv_Month)+hv_Day)+hv_Hour)+hv_Second);
        }

        //read_image (Image, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/Imagen941134.hobj')



        //***********************************************************************
        //**************************************************
        //Hand Eye Apunto al Descriptor
        //**************************************************
        hv_Mensaje.Dispose();
        hv_Mensaje = "Cargando descriptores de distorcion y de patron";
        Send_Data_Info(hv_Mensaje, hv_SerialHandle);

        hv_Calibration.Dispose();
        hv_Calibration = "5x5_10";
        hv_CalTabFile.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_CalTabFile = ("C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/6.- Caltab Din3/Caltab"+hv_Calibration)+".descr";
        }
        hv_StartCamParam.Dispose();hv_CameraPoseOut.Dispose();
        Get_Cam_Parameters(out hv_StartCamParam, out hv_CameraPoseOut);


        //**************************************************
        //# ### Envio data de estado ########################
        hv_Estado.Dispose();
        hv_Estado = 16;
        Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
        //# #################################################

        hv_PoseForCalibrationPlate.Dispose();hv_EstadoFx.Dispose();hv_ExceptionFile.Dispose();
        Get_Pose_Caltab_Smart_COPY_3(ho_Image, hv_StartCamParam, hv_CalTabFile, hv_SerialHandle, 
            out hv_PoseForCalibrationPlate, out hv_EstadoFx, out hv_ExceptionFile);




        if ((int)(hv_EstadoFx) != 0)
        {
          hv_Estado.Dispose();
          hv_Estado = 14;
          Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
          //*******************************
          //Enviar por ETHERNETIP
          //*******************************
          //# ### Envio data de estado ########################
          hv_Estado.Dispose();
          hv_Estado = 17;
          Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
          //# #################################################


          Send_Data_To_Robot(hv_PoseForCalibrationPlate, hv_SerialHandle);
          hv_Resultado.Dispose();
          hv_Resultado = 1;
          hv_Procesando.Dispose();
          hv_Procesando = 1;
          Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
          //# #################################################
          hv_Estado.Dispose();
          hv_Estado = new HTuple(hv_EstadoFx);

        }
        else
        {
          hv_Estado.Dispose();
          hv_Estado = 0;
          hv_Mensaje.Dispose();
          hv_Mensaje = "####### FIN BLOQUE 2. Busqueda de patron en Pattern FALLIDA #######";
          Send_Data_Info(hv_Mensaje, hv_SerialHandle);
        }


        hv_Exception.Dispose();
        hv_Exception = new HTuple(hv_ExceptionFile);



        hv_Time.Dispose();
        hv_Gain.Dispose();
        hv_g_Error_CamaraOpt_Adq.Dispose();
        hv_Width.Dispose();
        hv_Height.Dispose();
        hv_MSecond.Dispose();
        hv_Second.Dispose();
        hv_Minute.Dispose();
        hv_Hour.Dispose();
        hv_Day.Dispose();
        hv_YDay.Dispose();
        hv_Month.Dispose();
        hv_Year.Dispose();
        hv_Mensaje.Dispose();
        hv_Calibration.Dispose();
        hv_CalTabFile.Dispose();
        hv_StartCamParam.Dispose();
        hv_CameraPoseOut.Dispose();
        hv_PoseForCalibrationPlate.Dispose();
        hv_EstadoFx.Dispose();
        hv_ExceptionFile.Dispose();
        hv_Resultado.Dispose();
        hv_Procesando.Dispose();

        return;

      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.WriteObject(ho_Image, ((("D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/ImagenNODECT_"+hv_Month)+hv_Day)+hv_Hour)+hv_Second);
        }



        hv_Time.Dispose();
        hv_Gain.Dispose();
        hv_g_Error_CamaraOpt_Adq.Dispose();
        hv_Width.Dispose();
        hv_Height.Dispose();
        hv_MSecond.Dispose();
        hv_Second.Dispose();
        hv_Minute.Dispose();
        hv_Hour.Dispose();
        hv_Day.Dispose();
        hv_YDay.Dispose();
        hv_Month.Dispose();
        hv_Year.Dispose();
        hv_Mensaje.Dispose();
        hv_Calibration.Dispose();
        hv_CalTabFile.Dispose();
        hv_StartCamParam.Dispose();
        hv_CameraPoseOut.Dispose();
        hv_PoseForCalibrationPlate.Dispose();
        hv_EstadoFx.Dispose();
        hv_ExceptionFile.Dispose();
        hv_Resultado.Dispose();
        hv_Procesando.Dispose();

        return;

        //# #################################################

      }

      hv_Time.Dispose();
      hv_Gain.Dispose();
      hv_g_Error_CamaraOpt_Adq.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_MSecond.Dispose();
      hv_Second.Dispose();
      hv_Minute.Dispose();
      hv_Hour.Dispose();
      hv_Day.Dispose();
      hv_YDay.Dispose();
      hv_Month.Dispose();
      hv_Year.Dispose();
      hv_Mensaje.Dispose();
      hv_Calibration.Dispose();
      hv_CalTabFile.Dispose();
      hv_StartCamParam.Dispose();
      hv_CameraPoseOut.Dispose();
      hv_PoseForCalibrationPlate.Dispose();
      hv_EstadoFx.Dispose();
      hv_ExceptionFile.Dispose();
      hv_Resultado.Dispose();
      hv_Procesando.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Time.Dispose();
      hv_Gain.Dispose();
      hv_g_Error_CamaraOpt_Adq.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_MSecond.Dispose();
      hv_Second.Dispose();
      hv_Minute.Dispose();
      hv_Hour.Dispose();
      hv_Day.Dispose();
      hv_YDay.Dispose();
      hv_Month.Dispose();
      hv_Year.Dispose();
      hv_Mensaje.Dispose();
      hv_Calibration.Dispose();
      hv_CalTabFile.Dispose();
      hv_StartCamParam.Dispose();
      hv_CameraPoseOut.Dispose();
      hv_PoseForCalibrationPlate.Dispose();
      hv_EstadoFx.Dispose();
      hv_ExceptionFile.Dispose();
      hv_Resultado.Dispose();
      hv_Procesando.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Smart_Patron_COPY_2 (out HObject ho_Image, HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Vector_Estado_Fx, 
      HTuple hv_SerialHandle, HTuple hv_ExposureTime, HTuple hv_Ganancia, HTuple hv_AcqHandle, 
      out HTuple hv_Estado, out HTuple hv_Exception)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Time = new HTuple(), hv_Gain = new HTuple();
    HTuple hv_g_Error_CamaraOpt_Adq = new HTuple(), hv_Width = new HTuple();
    HTuple hv_Height = new HTuple(), hv_MSecond = new HTuple();
    HTuple hv_Second = new HTuple(), hv_Minute = new HTuple();
    HTuple hv_Hour = new HTuple(), hv_Day = new HTuple(), hv_YDay = new HTuple();
    HTuple hv_Month = new HTuple(), hv_Year = new HTuple();
    HTuple hv_Mensaje = new HTuple(), hv_Calibration = new HTuple();
    HTuple hv_CalTabFile = new HTuple(), hv_StartCamParam = new HTuple();
    HTuple hv_CameraPoseOut = new HTuple(), hv_PoseForCalibrationPlate = new HTuple();
    HTuple hv_EstadoFx = new HTuple(), hv_ExceptionFile = new HTuple();
    HTuple hv_Resultado = new HTuple(), hv_Procesando = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Image);
    hv_Estado = new HTuple();
    hv_Exception = new HTuple();
    try
    {
      try
      {

        hv_Time.Dispose();
        hv_Time = new HTuple(hv_ExposureTime);
        hv_Gain.Dispose();
        hv_Gain = new HTuple(hv_Ganancia);
        Set_exposure_Time_cam_0(hv_AcqHandle, hv_Time, hv_Gain);

        ho_Image.Dispose();hv_g_Error_CamaraOpt_Adq.Dispose();
        Get_Image(out ho_Image, hv_AcqHandle, out hv_g_Error_CamaraOpt_Adq);
        HOperatorSet.DispObj(ho_Image, hv_ExpDefaultWinHandle);
        hv_Width.Dispose();hv_Height.Dispose();
        HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);


        //**********************************************************************
        //***** Guardo las Imagenes ********************************************
        hv_MSecond.Dispose();hv_Second.Dispose();hv_Minute.Dispose();hv_Hour.Dispose();hv_Day.Dispose();hv_YDay.Dispose();hv_Month.Dispose();hv_Year.Dispose();
        HOperatorSet.GetSystemTime(out hv_MSecond, out hv_Second, out hv_Minute, 
            out hv_Hour, out hv_Day, out hv_YDay, out hv_Month, out hv_Year);

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.WriteObject(ho_Image, ((("D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/Imagen"+hv_Month)+hv_Day)+hv_Hour)+hv_Second);
        }

        //read_image (Image, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/Imagen941134.hobj')



        //***********************************************************************
        //**************************************************
        //Hand Eye Apunto al Descriptor
        //**************************************************
        hv_Mensaje.Dispose();
        hv_Mensaje = "Cargando descriptores de distorcion y de patron";
        Send_Data_Info(hv_Mensaje, hv_SerialHandle);

        hv_Calibration.Dispose();
        hv_Calibration = "5x5_10";
        hv_CalTabFile.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_CalTabFile = ("C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/6.- Caltab Din3/Caltab"+hv_Calibration)+".descr";
        }
        hv_StartCamParam.Dispose();hv_CameraPoseOut.Dispose();
        Get_Cam_Parameters(out hv_StartCamParam, out hv_CameraPoseOut);


        //**************************************************
        //# ### Envio data de estado ########################
        hv_Estado.Dispose();
        hv_Estado = 16;
        Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
        //# #################################################

        hv_PoseForCalibrationPlate.Dispose();hv_EstadoFx.Dispose();hv_ExceptionFile.Dispose();
        Get_Pose_Caltab_Smart_COPY_3(ho_Image, hv_StartCamParam, hv_CalTabFile, hv_SerialHandle, 
            out hv_PoseForCalibrationPlate, out hv_EstadoFx, out hv_ExceptionFile);




        if ((int)(hv_EstadoFx) != 0)
        {
          hv_Estado.Dispose();
          hv_Estado = 14;
          Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
          //*******************************
          //Enviar por ETHERNETIP
          //*******************************
          //# ### Envio data de estado ########################
          hv_Estado.Dispose();
          hv_Estado = 17;
          Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
          //# #################################################


          Send_Data_To_Robot(hv_PoseForCalibrationPlate, hv_SerialHandle);
          hv_Resultado.Dispose();
          hv_Resultado = 1;
          hv_Procesando.Dispose();
          hv_Procesando = 1;
          Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
          //# #################################################
          hv_Estado.Dispose();
          hv_Estado = new HTuple(hv_EstadoFx);

        }
        else
        {
          hv_Estado.Dispose();
          hv_Estado = 0;
          hv_Mensaje.Dispose();
          hv_Mensaje = "####### FIN BLOQUE 2. Busqueda de patron en Pattern FALLIDA #######";
          Send_Data_Info(hv_Mensaje, hv_SerialHandle);
        }


        hv_Exception.Dispose();
        hv_Exception = new HTuple(hv_ExceptionFile);



        hv_Time.Dispose();
        hv_Gain.Dispose();
        hv_g_Error_CamaraOpt_Adq.Dispose();
        hv_Width.Dispose();
        hv_Height.Dispose();
        hv_MSecond.Dispose();
        hv_Second.Dispose();
        hv_Minute.Dispose();
        hv_Hour.Dispose();
        hv_Day.Dispose();
        hv_YDay.Dispose();
        hv_Month.Dispose();
        hv_Year.Dispose();
        hv_Mensaje.Dispose();
        hv_Calibration.Dispose();
        hv_CalTabFile.Dispose();
        hv_StartCamParam.Dispose();
        hv_CameraPoseOut.Dispose();
        hv_PoseForCalibrationPlate.Dispose();
        hv_EstadoFx.Dispose();
        hv_ExceptionFile.Dispose();
        hv_Resultado.Dispose();
        hv_Procesando.Dispose();

        return;

      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.WriteObject(ho_Image, ((("D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/ImagenNODECT_"+hv_Month)+hv_Day)+hv_Hour)+hv_Second);
        }



        hv_Time.Dispose();
        hv_Gain.Dispose();
        hv_g_Error_CamaraOpt_Adq.Dispose();
        hv_Width.Dispose();
        hv_Height.Dispose();
        hv_MSecond.Dispose();
        hv_Second.Dispose();
        hv_Minute.Dispose();
        hv_Hour.Dispose();
        hv_Day.Dispose();
        hv_YDay.Dispose();
        hv_Month.Dispose();
        hv_Year.Dispose();
        hv_Mensaje.Dispose();
        hv_Calibration.Dispose();
        hv_CalTabFile.Dispose();
        hv_StartCamParam.Dispose();
        hv_CameraPoseOut.Dispose();
        hv_PoseForCalibrationPlate.Dispose();
        hv_EstadoFx.Dispose();
        hv_ExceptionFile.Dispose();
        hv_Resultado.Dispose();
        hv_Procesando.Dispose();

        return;

        //# #################################################

      }

      hv_Time.Dispose();
      hv_Gain.Dispose();
      hv_g_Error_CamaraOpt_Adq.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_MSecond.Dispose();
      hv_Second.Dispose();
      hv_Minute.Dispose();
      hv_Hour.Dispose();
      hv_Day.Dispose();
      hv_YDay.Dispose();
      hv_Month.Dispose();
      hv_Year.Dispose();
      hv_Mensaje.Dispose();
      hv_Calibration.Dispose();
      hv_CalTabFile.Dispose();
      hv_StartCamParam.Dispose();
      hv_CameraPoseOut.Dispose();
      hv_PoseForCalibrationPlate.Dispose();
      hv_EstadoFx.Dispose();
      hv_ExceptionFile.Dispose();
      hv_Resultado.Dispose();
      hv_Procesando.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Time.Dispose();
      hv_Gain.Dispose();
      hv_g_Error_CamaraOpt_Adq.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_MSecond.Dispose();
      hv_Second.Dispose();
      hv_Minute.Dispose();
      hv_Hour.Dispose();
      hv_Day.Dispose();
      hv_YDay.Dispose();
      hv_Month.Dispose();
      hv_Year.Dispose();
      hv_Mensaje.Dispose();
      hv_Calibration.Dispose();
      hv_CalTabFile.Dispose();
      hv_StartCamParam.Dispose();
      hv_CameraPoseOut.Dispose();
      hv_PoseForCalibrationPlate.Dispose();
      hv_EstadoFx.Dispose();
      hv_ExceptionFile.Dispose();
      hv_Resultado.Dispose();
      hv_Procesando.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Smart_Patron_COPY_3 (out HObject ho_Image, HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Vector_Estado_Fx, 
      HTuple hv_SerialHandle, HTuple hv_ExposureTime, HTuple hv_Ganancia, HTuple hv_AcqHandle, 
      out HTuple hv_Estado, out HTuple hv_Exception)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Time = new HTuple(), hv_Gain = new HTuple();
    HTuple hv_g_Error_CamaraOpt_Adq = new HTuple(), hv_Width = new HTuple();
    HTuple hv_Height = new HTuple(), hv_MSecond = new HTuple();
    HTuple hv_Second = new HTuple(), hv_Minute = new HTuple();
    HTuple hv_Hour = new HTuple(), hv_Day = new HTuple(), hv_YDay = new HTuple();
    HTuple hv_Month = new HTuple(), hv_Year = new HTuple();
    HTuple hv_Mensaje = new HTuple(), hv_Calibration = new HTuple();
    HTuple hv_CalTabFile = new HTuple(), hv_StartCamParam = new HTuple();
    HTuple hv_CameraPoseOut = new HTuple(), hv_PoseForCalibrationPlate = new HTuple();
    HTuple hv_EstadoFx = new HTuple(), hv_ExceptionFile = new HTuple();
    HTuple hv_Resultado = new HTuple(), hv_Procesando = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Image);
    hv_Estado = new HTuple();
    hv_Exception = new HTuple();
    try
    {
      try
      {

        hv_Time.Dispose();
        hv_Time = new HTuple(hv_ExposureTime);
        hv_Gain.Dispose();
        hv_Gain = new HTuple(hv_Ganancia);
        Set_exposure_Time_cam_0(hv_AcqHandle, hv_Time, hv_Gain);

        ho_Image.Dispose();hv_g_Error_CamaraOpt_Adq.Dispose();
        Get_Image(out ho_Image, hv_AcqHandle, out hv_g_Error_CamaraOpt_Adq);
        HOperatorSet.DispObj(ho_Image, hv_ExpDefaultWinHandle);
        hv_Width.Dispose();hv_Height.Dispose();
        HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);


        //**********************************************************************
        //***** Guardo las Imagenes ********************************************
        hv_MSecond.Dispose();hv_Second.Dispose();hv_Minute.Dispose();hv_Hour.Dispose();hv_Day.Dispose();hv_YDay.Dispose();hv_Month.Dispose();hv_Year.Dispose();
        HOperatorSet.GetSystemTime(out hv_MSecond, out hv_Second, out hv_Minute, 
            out hv_Hour, out hv_Day, out hv_YDay, out hv_Month, out hv_Year);

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.WriteObject(ho_Image, ((("D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/Imagen"+hv_Month)+hv_Day)+hv_Hour)+hv_Second);
        }

        //read_image (Image, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/Imagen941134.hobj')



        //***********************************************************************
        //**************************************************
        //Hand Eye Apunto al Descriptor
        //**************************************************
        hv_Mensaje.Dispose();
        hv_Mensaje = "Cargando descriptores de distorcion y de patron";
        Send_Data_Info(hv_Mensaje, hv_SerialHandle);

        hv_Calibration.Dispose();
        hv_Calibration = "5x5_10";
        hv_CalTabFile.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_CalTabFile = ("C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/6.- Caltab Din3/Caltab"+hv_Calibration)+".descr";
        }
        hv_StartCamParam.Dispose();hv_CameraPoseOut.Dispose();
        Get_Cam_Parameters(out hv_StartCamParam, out hv_CameraPoseOut);


        //**************************************************
        //# ### Envio data de estado ########################
        hv_Estado.Dispose();
        hv_Estado = 16;
        Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
        //# #################################################

        hv_PoseForCalibrationPlate.Dispose();hv_EstadoFx.Dispose();hv_ExceptionFile.Dispose();
        Get_Pose_Caltab_Smart_COPY_3(ho_Image, hv_StartCamParam, hv_CalTabFile, hv_SerialHandle, 
            out hv_PoseForCalibrationPlate, out hv_EstadoFx, out hv_ExceptionFile);




        if ((int)(hv_EstadoFx) != 0)
        {
          hv_Estado.Dispose();
          hv_Estado = 14;
          Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
          //*******************************
          //Enviar por ETHERNETIP
          //*******************************
          //# ### Envio data de estado ########################
          hv_Estado.Dispose();
          hv_Estado = 17;
          Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
          //# #################################################


          Send_Data_To_Robot(hv_PoseForCalibrationPlate, hv_SerialHandle);
          hv_Resultado.Dispose();
          hv_Resultado = 1;
          hv_Procesando.Dispose();
          hv_Procesando = 1;
          Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
          //# #################################################
          hv_Estado.Dispose();
          hv_Estado = new HTuple(hv_EstadoFx);

        }
        else
        {
          hv_Estado.Dispose();
          hv_Estado = 0;
          hv_Mensaje.Dispose();
          hv_Mensaje = "####### FIN BLOQUE 2. Busqueda de patron en Pattern FALLIDA #######";
          Send_Data_Info(hv_Mensaje, hv_SerialHandle);
        }


        hv_Exception.Dispose();
        hv_Exception = new HTuple(hv_ExceptionFile);



        hv_Time.Dispose();
        hv_Gain.Dispose();
        hv_g_Error_CamaraOpt_Adq.Dispose();
        hv_Width.Dispose();
        hv_Height.Dispose();
        hv_MSecond.Dispose();
        hv_Second.Dispose();
        hv_Minute.Dispose();
        hv_Hour.Dispose();
        hv_Day.Dispose();
        hv_YDay.Dispose();
        hv_Month.Dispose();
        hv_Year.Dispose();
        hv_Mensaje.Dispose();
        hv_Calibration.Dispose();
        hv_CalTabFile.Dispose();
        hv_StartCamParam.Dispose();
        hv_CameraPoseOut.Dispose();
        hv_PoseForCalibrationPlate.Dispose();
        hv_EstadoFx.Dispose();
        hv_ExceptionFile.Dispose();
        hv_Resultado.Dispose();
        hv_Procesando.Dispose();

        return;

      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.WriteObject(ho_Image, ((("D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/ImagenNODECT_"+hv_Month)+hv_Day)+hv_Hour)+hv_Second);
        }



        hv_Time.Dispose();
        hv_Gain.Dispose();
        hv_g_Error_CamaraOpt_Adq.Dispose();
        hv_Width.Dispose();
        hv_Height.Dispose();
        hv_MSecond.Dispose();
        hv_Second.Dispose();
        hv_Minute.Dispose();
        hv_Hour.Dispose();
        hv_Day.Dispose();
        hv_YDay.Dispose();
        hv_Month.Dispose();
        hv_Year.Dispose();
        hv_Mensaje.Dispose();
        hv_Calibration.Dispose();
        hv_CalTabFile.Dispose();
        hv_StartCamParam.Dispose();
        hv_CameraPoseOut.Dispose();
        hv_PoseForCalibrationPlate.Dispose();
        hv_EstadoFx.Dispose();
        hv_ExceptionFile.Dispose();
        hv_Resultado.Dispose();
        hv_Procesando.Dispose();

        return;

        //# #################################################

      }

      hv_Time.Dispose();
      hv_Gain.Dispose();
      hv_g_Error_CamaraOpt_Adq.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_MSecond.Dispose();
      hv_Second.Dispose();
      hv_Minute.Dispose();
      hv_Hour.Dispose();
      hv_Day.Dispose();
      hv_YDay.Dispose();
      hv_Month.Dispose();
      hv_Year.Dispose();
      hv_Mensaje.Dispose();
      hv_Calibration.Dispose();
      hv_CalTabFile.Dispose();
      hv_StartCamParam.Dispose();
      hv_CameraPoseOut.Dispose();
      hv_PoseForCalibrationPlate.Dispose();
      hv_EstadoFx.Dispose();
      hv_ExceptionFile.Dispose();
      hv_Resultado.Dispose();
      hv_Procesando.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Time.Dispose();
      hv_Gain.Dispose();
      hv_g_Error_CamaraOpt_Adq.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_MSecond.Dispose();
      hv_Second.Dispose();
      hv_Minute.Dispose();
      hv_Hour.Dispose();
      hv_Day.Dispose();
      hv_YDay.Dispose();
      hv_Month.Dispose();
      hv_Year.Dispose();
      hv_Mensaje.Dispose();
      hv_Calibration.Dispose();
      hv_CalTabFile.Dispose();
      hv_StartCamParam.Dispose();
      hv_CameraPoseOut.Dispose();
      hv_PoseForCalibrationPlate.Dispose();
      hv_EstadoFx.Dispose();
      hv_ExceptionFile.Dispose();
      hv_Resultado.Dispose();
      hv_Procesando.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Smart_Patron_COPY_4 (out HObject ho_Image, HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Vector_Estado_Fx, 
      HTuple hv_SerialHandle, HTuple hv_ExposureTime, HTuple hv_Ganancia, HTuple hv_AcqHandle, 
      out HTuple hv_Estado, out HTuple hv_Exception)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Time = new HTuple(), hv_Gain = new HTuple();
    HTuple hv_g_Error_CamaraOpt_Adq = new HTuple(), hv_Width = new HTuple();
    HTuple hv_Height = new HTuple(), hv_MSecond = new HTuple();
    HTuple hv_Second = new HTuple(), hv_Minute = new HTuple();
    HTuple hv_Hour = new HTuple(), hv_Day = new HTuple(), hv_YDay = new HTuple();
    HTuple hv_Month = new HTuple(), hv_Year = new HTuple();
    HTuple hv_Mensaje = new HTuple(), hv_Calibration = new HTuple();
    HTuple hv_CalTabFile = new HTuple(), hv_StartCamParam = new HTuple();
    HTuple hv_CameraPoseOut = new HTuple(), hv_PoseForCalibrationPlate = new HTuple();
    HTuple hv_EstadoFx = new HTuple(), hv_ExceptionFile = new HTuple();
    HTuple hv_Resultado = new HTuple(), hv_Procesando = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Image);
    hv_Estado = new HTuple();
    hv_Exception = new HTuple();
    try
    {
      try
      {

        hv_Time.Dispose();
        hv_Time = new HTuple(hv_ExposureTime);
        hv_Gain.Dispose();
        hv_Gain = new HTuple(hv_Ganancia);
        Set_exposure_Time_cam_0(hv_AcqHandle, hv_Time, hv_Gain);

        ho_Image.Dispose();hv_g_Error_CamaraOpt_Adq.Dispose();
        Get_Image(out ho_Image, hv_AcqHandle, out hv_g_Error_CamaraOpt_Adq);
        HOperatorSet.DispObj(ho_Image, hv_ExpDefaultWinHandle);
        hv_Width.Dispose();hv_Height.Dispose();
        HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);


        //**********************************************************************
        //***** Guardo las Imagenes ********************************************
        hv_MSecond.Dispose();hv_Second.Dispose();hv_Minute.Dispose();hv_Hour.Dispose();hv_Day.Dispose();hv_YDay.Dispose();hv_Month.Dispose();hv_Year.Dispose();
        HOperatorSet.GetSystemTime(out hv_MSecond, out hv_Second, out hv_Minute, 
            out hv_Hour, out hv_Day, out hv_YDay, out hv_Month, out hv_Year);

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.WriteObject(ho_Image, ((("D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/Imagen"+hv_Month)+hv_Day)+hv_Hour)+hv_Second);
        }

        //read_image (Image, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/Imagen941134.hobj')



        //***********************************************************************
        //**************************************************
        //Hand Eye Apunto al Descriptor
        //**************************************************
        hv_Mensaje.Dispose();
        hv_Mensaje = "Cargando descriptores de distorcion y de patron";
        Send_Data_Info(hv_Mensaje, hv_SerialHandle);

        hv_Calibration.Dispose();
        hv_Calibration = "5x5_10";
        hv_CalTabFile.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_CalTabFile = ("C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/6.- Caltab Din3/Caltab"+hv_Calibration)+".descr";
        }
        hv_StartCamParam.Dispose();hv_CameraPoseOut.Dispose();
        Get_Cam_Parameters(out hv_StartCamParam, out hv_CameraPoseOut);


        //**************************************************
        //# ### Envio data de estado ########################
        hv_Estado.Dispose();
        hv_Estado = 16;
        Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
        //# #################################################

        hv_PoseForCalibrationPlate.Dispose();hv_EstadoFx.Dispose();hv_ExceptionFile.Dispose();
        Get_Pose_Caltab_Smart_COPY_3(ho_Image, hv_StartCamParam, hv_CalTabFile, hv_SerialHandle, 
            out hv_PoseForCalibrationPlate, out hv_EstadoFx, out hv_ExceptionFile);




        if ((int)(hv_EstadoFx) != 0)
        {
          hv_Estado.Dispose();
          hv_Estado = 14;
          Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
          //*******************************
          //Enviar por ETHERNETIP
          //*******************************
          //# ### Envio data de estado ########################
          hv_Estado.Dispose();
          hv_Estado = 17;
          Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
          //# #################################################


          Send_Data_To_Robot(hv_PoseForCalibrationPlate, hv_SerialHandle);
          hv_Resultado.Dispose();
          hv_Resultado = 1;
          hv_Procesando.Dispose();
          hv_Procesando = 1;
          Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
          //# #################################################
          hv_Estado.Dispose();
          hv_Estado = new HTuple(hv_EstadoFx);

        }
        else
        {
          hv_Estado.Dispose();
          hv_Estado = 0;
          hv_Mensaje.Dispose();
          hv_Mensaje = "####### FIN BLOQUE 2. Busqueda de patron en Pattern FALLIDA #######";
          Send_Data_Info(hv_Mensaje, hv_SerialHandle);
        }


        hv_Exception.Dispose();
        hv_Exception = new HTuple(hv_ExceptionFile);



        hv_Time.Dispose();
        hv_Gain.Dispose();
        hv_g_Error_CamaraOpt_Adq.Dispose();
        hv_Width.Dispose();
        hv_Height.Dispose();
        hv_MSecond.Dispose();
        hv_Second.Dispose();
        hv_Minute.Dispose();
        hv_Hour.Dispose();
        hv_Day.Dispose();
        hv_YDay.Dispose();
        hv_Month.Dispose();
        hv_Year.Dispose();
        hv_Mensaje.Dispose();
        hv_Calibration.Dispose();
        hv_CalTabFile.Dispose();
        hv_StartCamParam.Dispose();
        hv_CameraPoseOut.Dispose();
        hv_PoseForCalibrationPlate.Dispose();
        hv_EstadoFx.Dispose();
        hv_ExceptionFile.Dispose();
        hv_Resultado.Dispose();
        hv_Procesando.Dispose();

        return;

      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.WriteObject(ho_Image, ((("D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/ImagenNODECT_"+hv_Month)+hv_Day)+hv_Hour)+hv_Second);
        }



        hv_Time.Dispose();
        hv_Gain.Dispose();
        hv_g_Error_CamaraOpt_Adq.Dispose();
        hv_Width.Dispose();
        hv_Height.Dispose();
        hv_MSecond.Dispose();
        hv_Second.Dispose();
        hv_Minute.Dispose();
        hv_Hour.Dispose();
        hv_Day.Dispose();
        hv_YDay.Dispose();
        hv_Month.Dispose();
        hv_Year.Dispose();
        hv_Mensaje.Dispose();
        hv_Calibration.Dispose();
        hv_CalTabFile.Dispose();
        hv_StartCamParam.Dispose();
        hv_CameraPoseOut.Dispose();
        hv_PoseForCalibrationPlate.Dispose();
        hv_EstadoFx.Dispose();
        hv_ExceptionFile.Dispose();
        hv_Resultado.Dispose();
        hv_Procesando.Dispose();

        return;

        //# #################################################

      }

      hv_Time.Dispose();
      hv_Gain.Dispose();
      hv_g_Error_CamaraOpt_Adq.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_MSecond.Dispose();
      hv_Second.Dispose();
      hv_Minute.Dispose();
      hv_Hour.Dispose();
      hv_Day.Dispose();
      hv_YDay.Dispose();
      hv_Month.Dispose();
      hv_Year.Dispose();
      hv_Mensaje.Dispose();
      hv_Calibration.Dispose();
      hv_CalTabFile.Dispose();
      hv_StartCamParam.Dispose();
      hv_CameraPoseOut.Dispose();
      hv_PoseForCalibrationPlate.Dispose();
      hv_EstadoFx.Dispose();
      hv_ExceptionFile.Dispose();
      hv_Resultado.Dispose();
      hv_Procesando.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Time.Dispose();
      hv_Gain.Dispose();
      hv_g_Error_CamaraOpt_Adq.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_MSecond.Dispose();
      hv_Second.Dispose();
      hv_Minute.Dispose();
      hv_Hour.Dispose();
      hv_Day.Dispose();
      hv_YDay.Dispose();
      hv_Month.Dispose();
      hv_Year.Dispose();
      hv_Mensaje.Dispose();
      hv_Calibration.Dispose();
      hv_CalTabFile.Dispose();
      hv_StartCamParam.Dispose();
      hv_CameraPoseOut.Dispose();
      hv_PoseForCalibrationPlate.Dispose();
      hv_EstadoFx.Dispose();
      hv_ExceptionFile.Dispose();
      hv_Resultado.Dispose();
      hv_Procesando.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Smart_Patron_COPY_5 (out HObject ho_Image, HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Vector_Estado_Fx, 
      HTuple hv_SerialHandle, HTuple hv_ExposureTime, HTuple hv_Ganancia, HTuple hv_AcqHandle, 
      out HTuple hv_Estado, out HTuple hv_Exception)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Time = new HTuple(), hv_Gain = new HTuple();
    HTuple hv_g_Error_CamaraOpt_Adq = new HTuple(), hv_Width = new HTuple();
    HTuple hv_Height = new HTuple(), hv_MSecond = new HTuple();
    HTuple hv_Second = new HTuple(), hv_Minute = new HTuple();
    HTuple hv_Hour = new HTuple(), hv_Day = new HTuple(), hv_YDay = new HTuple();
    HTuple hv_Month = new HTuple(), hv_Year = new HTuple();
    HTuple hv_Mensaje = new HTuple(), hv_Calibration = new HTuple();
    HTuple hv_CalTabFile = new HTuple(), hv_StartCamParam = new HTuple();
    HTuple hv_CameraPoseOut = new HTuple(), hv_PoseForCalibrationPlate = new HTuple();
    HTuple hv_EstadoFx = new HTuple(), hv_ExceptionFile = new HTuple();
    HTuple hv_Resultado = new HTuple(), hv_Procesando = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Image);
    hv_Estado = new HTuple();
    hv_Exception = new HTuple();
    try
    {
      try
      {

        hv_Time.Dispose();
        hv_Time = new HTuple(hv_ExposureTime);
        hv_Gain.Dispose();
        hv_Gain = new HTuple(hv_Ganancia);
        Set_exposure_Time_cam_0(hv_AcqHandle, hv_Time, hv_Gain);

        ho_Image.Dispose();hv_g_Error_CamaraOpt_Adq.Dispose();
        Get_Image(out ho_Image, hv_AcqHandle, out hv_g_Error_CamaraOpt_Adq);
        HOperatorSet.DispObj(ho_Image, hv_ExpDefaultWinHandle);
        hv_Width.Dispose();hv_Height.Dispose();
        HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);


        //**********************************************************************
        //***** Guardo las Imagenes ********************************************
        hv_MSecond.Dispose();hv_Second.Dispose();hv_Minute.Dispose();hv_Hour.Dispose();hv_Day.Dispose();hv_YDay.Dispose();hv_Month.Dispose();hv_Year.Dispose();
        HOperatorSet.GetSystemTime(out hv_MSecond, out hv_Second, out hv_Minute, 
            out hv_Hour, out hv_Day, out hv_YDay, out hv_Month, out hv_Year);

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.WriteObject(ho_Image, ((("D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/Imagen"+hv_Month)+hv_Day)+hv_Hour)+hv_Second);
        }

        //read_image (Image, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/Imagen941134.hobj')



        //***********************************************************************
        //**************************************************
        //Hand Eye Apunto al Descriptor
        //**************************************************
        hv_Mensaje.Dispose();
        hv_Mensaje = "Cargando descriptores de distorcion y de patron";
        Send_Data_Info(hv_Mensaje, hv_SerialHandle);

        hv_Calibration.Dispose();
        hv_Calibration = "5x5_10";
        hv_CalTabFile.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_CalTabFile = ("C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/6.- Caltab Din3/Caltab"+hv_Calibration)+".descr";
        }
        hv_StartCamParam.Dispose();hv_CameraPoseOut.Dispose();
        Get_Cam_Parameters(out hv_StartCamParam, out hv_CameraPoseOut);


        //**************************************************
        //# ### Envio data de estado ########################
        hv_Estado.Dispose();
        hv_Estado = 16;
        Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
        //# #################################################

        hv_PoseForCalibrationPlate.Dispose();hv_EstadoFx.Dispose();hv_ExceptionFile.Dispose();
        Get_Pose_Caltab_Smart_COPY_3(ho_Image, hv_StartCamParam, hv_CalTabFile, hv_SerialHandle, 
            out hv_PoseForCalibrationPlate, out hv_EstadoFx, out hv_ExceptionFile);




        if ((int)(hv_EstadoFx) != 0)
        {
          hv_Estado.Dispose();
          hv_Estado = 14;
          Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
          //*******************************
          //Enviar por ETHERNETIP
          //*******************************
          //# ### Envio data de estado ########################
          hv_Estado.Dispose();
          hv_Estado = 17;
          Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
          //# #################################################


          Send_Data_To_Robot(hv_PoseForCalibrationPlate, hv_SerialHandle);
          hv_Resultado.Dispose();
          hv_Resultado = 1;
          hv_Procesando.Dispose();
          hv_Procesando = 1;
          Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
          //# #################################################
          hv_Estado.Dispose();
          hv_Estado = new HTuple(hv_EstadoFx);

        }
        else
        {
          hv_Estado.Dispose();
          hv_Estado = 0;
          hv_Mensaje.Dispose();
          hv_Mensaje = "####### FIN BLOQUE 2. Busqueda de patron en Pattern FALLIDA #######";
          Send_Data_Info(hv_Mensaje, hv_SerialHandle);
        }


        hv_Exception.Dispose();
        hv_Exception = new HTuple(hv_ExceptionFile);



        hv_Time.Dispose();
        hv_Gain.Dispose();
        hv_g_Error_CamaraOpt_Adq.Dispose();
        hv_Width.Dispose();
        hv_Height.Dispose();
        hv_MSecond.Dispose();
        hv_Second.Dispose();
        hv_Minute.Dispose();
        hv_Hour.Dispose();
        hv_Day.Dispose();
        hv_YDay.Dispose();
        hv_Month.Dispose();
        hv_Year.Dispose();
        hv_Mensaje.Dispose();
        hv_Calibration.Dispose();
        hv_CalTabFile.Dispose();
        hv_StartCamParam.Dispose();
        hv_CameraPoseOut.Dispose();
        hv_PoseForCalibrationPlate.Dispose();
        hv_EstadoFx.Dispose();
        hv_ExceptionFile.Dispose();
        hv_Resultado.Dispose();
        hv_Procesando.Dispose();

        return;

      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.WriteObject(ho_Image, ((("D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/ImagenNODECT_"+hv_Month)+hv_Day)+hv_Hour)+hv_Second);
        }



        hv_Time.Dispose();
        hv_Gain.Dispose();
        hv_g_Error_CamaraOpt_Adq.Dispose();
        hv_Width.Dispose();
        hv_Height.Dispose();
        hv_MSecond.Dispose();
        hv_Second.Dispose();
        hv_Minute.Dispose();
        hv_Hour.Dispose();
        hv_Day.Dispose();
        hv_YDay.Dispose();
        hv_Month.Dispose();
        hv_Year.Dispose();
        hv_Mensaje.Dispose();
        hv_Calibration.Dispose();
        hv_CalTabFile.Dispose();
        hv_StartCamParam.Dispose();
        hv_CameraPoseOut.Dispose();
        hv_PoseForCalibrationPlate.Dispose();
        hv_EstadoFx.Dispose();
        hv_ExceptionFile.Dispose();
        hv_Resultado.Dispose();
        hv_Procesando.Dispose();

        return;

        //# #################################################

      }

      hv_Time.Dispose();
      hv_Gain.Dispose();
      hv_g_Error_CamaraOpt_Adq.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_MSecond.Dispose();
      hv_Second.Dispose();
      hv_Minute.Dispose();
      hv_Hour.Dispose();
      hv_Day.Dispose();
      hv_YDay.Dispose();
      hv_Month.Dispose();
      hv_Year.Dispose();
      hv_Mensaje.Dispose();
      hv_Calibration.Dispose();
      hv_CalTabFile.Dispose();
      hv_StartCamParam.Dispose();
      hv_CameraPoseOut.Dispose();
      hv_PoseForCalibrationPlate.Dispose();
      hv_EstadoFx.Dispose();
      hv_ExceptionFile.Dispose();
      hv_Resultado.Dispose();
      hv_Procesando.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Time.Dispose();
      hv_Gain.Dispose();
      hv_g_Error_CamaraOpt_Adq.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_MSecond.Dispose();
      hv_Second.Dispose();
      hv_Minute.Dispose();
      hv_Hour.Dispose();
      hv_Day.Dispose();
      hv_YDay.Dispose();
      hv_Month.Dispose();
      hv_Year.Dispose();
      hv_Mensaje.Dispose();
      hv_Calibration.Dispose();
      hv_CalTabFile.Dispose();
      hv_StartCamParam.Dispose();
      hv_CameraPoseOut.Dispose();
      hv_PoseForCalibrationPlate.Dispose();
      hv_EstadoFx.Dispose();
      hv_ExceptionFile.Dispose();
      hv_Resultado.Dispose();
      hv_Procesando.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Smart_Patron_COPY_6 (out HObject ho_Image, HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Vector_Estado_Fx, 
      HTuple hv_SerialHandle, HTuple hv_ExposureTime, HTuple hv_Ganancia, HTuple hv_AcqHandle, 
      out HTuple hv_Estado, out HTuple hv_Exception)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Time = new HTuple(), hv_Gain = new HTuple();
    HTuple hv_g_Error_CamaraOpt_Adq = new HTuple(), hv_Width = new HTuple();
    HTuple hv_Height = new HTuple(), hv_MSecond = new HTuple();
    HTuple hv_Second = new HTuple(), hv_Minute = new HTuple();
    HTuple hv_Hour = new HTuple(), hv_Day = new HTuple(), hv_YDay = new HTuple();
    HTuple hv_Month = new HTuple(), hv_Year = new HTuple();
    HTuple hv_Mensaje = new HTuple(), hv_Calibration = new HTuple();
    HTuple hv_CalTabFile = new HTuple(), hv_StartCamParam = new HTuple();
    HTuple hv_CameraPoseOut = new HTuple(), hv_PoseForCalibrationPlate = new HTuple();
    HTuple hv_EstadoFx = new HTuple(), hv_ExceptionFile = new HTuple();
    HTuple hv_Resultado = new HTuple(), hv_Procesando = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Image);
    hv_Estado = new HTuple();
    hv_Exception = new HTuple();
    try
    {
      try
      {

        hv_Time.Dispose();
        hv_Time = new HTuple(hv_ExposureTime);
        hv_Gain.Dispose();
        hv_Gain = new HTuple(hv_Ganancia);
        Set_exposure_Time_cam_0(hv_AcqHandle, hv_Time, hv_Gain);

        ho_Image.Dispose();hv_g_Error_CamaraOpt_Adq.Dispose();
        Get_Image(out ho_Image, hv_AcqHandle, out hv_g_Error_CamaraOpt_Adq);
        HOperatorSet.DispObj(ho_Image, hv_ExpDefaultWinHandle);
        hv_Width.Dispose();hv_Height.Dispose();
        HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);


        //**********************************************************************
        //***** Guardo las Imagenes ********************************************
        hv_MSecond.Dispose();hv_Second.Dispose();hv_Minute.Dispose();hv_Hour.Dispose();hv_Day.Dispose();hv_YDay.Dispose();hv_Month.Dispose();hv_Year.Dispose();
        HOperatorSet.GetSystemTime(out hv_MSecond, out hv_Second, out hv_Minute, 
            out hv_Hour, out hv_Day, out hv_YDay, out hv_Month, out hv_Year);

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.WriteObject(ho_Image, ((("D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/Imagen"+hv_Month)+hv_Day)+hv_Hour)+hv_Second);
        }

        //read_image (Image, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/Imagen941134.hobj')



        //***********************************************************************
        //**************************************************
        //Hand Eye Apunto al Descriptor
        //**************************************************
        hv_Mensaje.Dispose();
        hv_Mensaje = "Cargando descriptores de distorcion y de patron";
        Send_Data_Info(hv_Mensaje, hv_SerialHandle);

        hv_Calibration.Dispose();
        hv_Calibration = "5x5_10";
        hv_CalTabFile.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_CalTabFile = ("C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/6.- Caltab Din3/Caltab"+hv_Calibration)+".descr";
        }
        hv_StartCamParam.Dispose();hv_CameraPoseOut.Dispose();
        Get_Cam_Parameters(out hv_StartCamParam, out hv_CameraPoseOut);


        //**************************************************
        //# ### Envio data de estado ########################
        hv_Estado.Dispose();
        hv_Estado = 16;
        Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
        //# #################################################

        hv_PoseForCalibrationPlate.Dispose();hv_EstadoFx.Dispose();hv_ExceptionFile.Dispose();
        Get_Pose_Caltab_Smart_COPY_3(ho_Image, hv_StartCamParam, hv_CalTabFile, hv_SerialHandle, 
            out hv_PoseForCalibrationPlate, out hv_EstadoFx, out hv_ExceptionFile);




        if ((int)(hv_EstadoFx) != 0)
        {
          hv_Estado.Dispose();
          hv_Estado = 14;
          Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
          //*******************************
          //Enviar por ETHERNETIP
          //*******************************
          //# ### Envio data de estado ########################
          hv_Estado.Dispose();
          hv_Estado = 17;
          Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
          //# #################################################


          Send_Data_To_Robot(hv_PoseForCalibrationPlate, hv_SerialHandle);
          hv_Resultado.Dispose();
          hv_Resultado = 1;
          hv_Procesando.Dispose();
          hv_Procesando = 1;
          Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
          //# #################################################
          hv_Estado.Dispose();
          hv_Estado = new HTuple(hv_EstadoFx);

        }
        else
        {
          hv_Estado.Dispose();
          hv_Estado = 0;
          hv_Mensaje.Dispose();
          hv_Mensaje = "####### FIN BLOQUE 2. Busqueda de patron en Pattern FALLIDA #######";
          Send_Data_Info(hv_Mensaje, hv_SerialHandle);
        }


        hv_Exception.Dispose();
        hv_Exception = new HTuple(hv_ExceptionFile);



        hv_Time.Dispose();
        hv_Gain.Dispose();
        hv_g_Error_CamaraOpt_Adq.Dispose();
        hv_Width.Dispose();
        hv_Height.Dispose();
        hv_MSecond.Dispose();
        hv_Second.Dispose();
        hv_Minute.Dispose();
        hv_Hour.Dispose();
        hv_Day.Dispose();
        hv_YDay.Dispose();
        hv_Month.Dispose();
        hv_Year.Dispose();
        hv_Mensaje.Dispose();
        hv_Calibration.Dispose();
        hv_CalTabFile.Dispose();
        hv_StartCamParam.Dispose();
        hv_CameraPoseOut.Dispose();
        hv_PoseForCalibrationPlate.Dispose();
        hv_EstadoFx.Dispose();
        hv_ExceptionFile.Dispose();
        hv_Resultado.Dispose();
        hv_Procesando.Dispose();

        return;

      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.WriteObject(ho_Image, ((("D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/ImagenNODECT_"+hv_Month)+hv_Day)+hv_Hour)+hv_Second);
        }



        hv_Time.Dispose();
        hv_Gain.Dispose();
        hv_g_Error_CamaraOpt_Adq.Dispose();
        hv_Width.Dispose();
        hv_Height.Dispose();
        hv_MSecond.Dispose();
        hv_Second.Dispose();
        hv_Minute.Dispose();
        hv_Hour.Dispose();
        hv_Day.Dispose();
        hv_YDay.Dispose();
        hv_Month.Dispose();
        hv_Year.Dispose();
        hv_Mensaje.Dispose();
        hv_Calibration.Dispose();
        hv_CalTabFile.Dispose();
        hv_StartCamParam.Dispose();
        hv_CameraPoseOut.Dispose();
        hv_PoseForCalibrationPlate.Dispose();
        hv_EstadoFx.Dispose();
        hv_ExceptionFile.Dispose();
        hv_Resultado.Dispose();
        hv_Procesando.Dispose();

        return;

        //# #################################################

      }

      hv_Time.Dispose();
      hv_Gain.Dispose();
      hv_g_Error_CamaraOpt_Adq.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_MSecond.Dispose();
      hv_Second.Dispose();
      hv_Minute.Dispose();
      hv_Hour.Dispose();
      hv_Day.Dispose();
      hv_YDay.Dispose();
      hv_Month.Dispose();
      hv_Year.Dispose();
      hv_Mensaje.Dispose();
      hv_Calibration.Dispose();
      hv_CalTabFile.Dispose();
      hv_StartCamParam.Dispose();
      hv_CameraPoseOut.Dispose();
      hv_PoseForCalibrationPlate.Dispose();
      hv_EstadoFx.Dispose();
      hv_ExceptionFile.Dispose();
      hv_Resultado.Dispose();
      hv_Procesando.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Time.Dispose();
      hv_Gain.Dispose();
      hv_g_Error_CamaraOpt_Adq.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_MSecond.Dispose();
      hv_Second.Dispose();
      hv_Minute.Dispose();
      hv_Hour.Dispose();
      hv_Day.Dispose();
      hv_YDay.Dispose();
      hv_Month.Dispose();
      hv_Year.Dispose();
      hv_Mensaje.Dispose();
      hv_Calibration.Dispose();
      hv_CalTabFile.Dispose();
      hv_StartCamParam.Dispose();
      hv_CameraPoseOut.Dispose();
      hv_PoseForCalibrationPlate.Dispose();
      hv_EstadoFx.Dispose();
      hv_ExceptionFile.Dispose();
      hv_Resultado.Dispose();
      hv_Procesando.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Smart_Patron_COPY_7 (out HObject ho_Image, HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Vector_Estado_Fx, 
      HTuple hv_SerialHandle, HTuple hv_ExposureTime, HTuple hv_Ganancia, HTuple hv_AcqHandle, 
      out HTuple hv_Estado, out HTuple hv_Exception)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Time = new HTuple(), hv_Gain = new HTuple();
    HTuple hv_g_Error_CamaraOpt_Adq = new HTuple(), hv_Width = new HTuple();
    HTuple hv_Height = new HTuple(), hv_MSecond = new HTuple();
    HTuple hv_Second = new HTuple(), hv_Minute = new HTuple();
    HTuple hv_Hour = new HTuple(), hv_Day = new HTuple(), hv_YDay = new HTuple();
    HTuple hv_Month = new HTuple(), hv_Year = new HTuple();
    HTuple hv_Mensaje = new HTuple(), hv_Calibration = new HTuple();
    HTuple hv_CalTabFile = new HTuple(), hv_StartCamParam = new HTuple();
    HTuple hv_CameraPoseOut = new HTuple(), hv_PoseForCalibrationPlate = new HTuple();
    HTuple hv_EstadoFx = new HTuple(), hv_ExceptionFile = new HTuple();
    HTuple hv_Resultado = new HTuple(), hv_Procesando = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Image);
    hv_Estado = new HTuple();
    hv_Exception = new HTuple();
    try
    {
      try
      {

        hv_Time.Dispose();
        hv_Time = new HTuple(hv_ExposureTime);
        hv_Gain.Dispose();
        hv_Gain = new HTuple(hv_Ganancia);
        Set_exposure_Time_cam_0(hv_AcqHandle, hv_Time, hv_Gain);

        ho_Image.Dispose();hv_g_Error_CamaraOpt_Adq.Dispose();
        Get_Image(out ho_Image, hv_AcqHandle, out hv_g_Error_CamaraOpt_Adq);
        HOperatorSet.DispObj(ho_Image, hv_ExpDefaultWinHandle);
        hv_Width.Dispose();hv_Height.Dispose();
        HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);


        //**********************************************************************
        //***** Guardo las Imagenes ********************************************
        hv_MSecond.Dispose();hv_Second.Dispose();hv_Minute.Dispose();hv_Hour.Dispose();hv_Day.Dispose();hv_YDay.Dispose();hv_Month.Dispose();hv_Year.Dispose();
        HOperatorSet.GetSystemTime(out hv_MSecond, out hv_Second, out hv_Minute, 
            out hv_Hour, out hv_Day, out hv_YDay, out hv_Month, out hv_Year);

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.WriteObject(ho_Image, ((("D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/Imagen"+hv_Month)+hv_Day)+hv_Hour)+hv_Second);
        }

        //read_image (Image, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/Imagen941134.hobj')



        //***********************************************************************
        //**************************************************
        //Hand Eye Apunto al Descriptor
        //**************************************************
        hv_Mensaje.Dispose();
        hv_Mensaje = "Cargando descriptores de distorcion y de patron";
        Send_Data_Info(hv_Mensaje, hv_SerialHandle);

        hv_Calibration.Dispose();
        hv_Calibration = "5x5_10";
        hv_CalTabFile.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_CalTabFile = ("C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/6.- Caltab Din3/Caltab"+hv_Calibration)+".descr";
        }
        hv_StartCamParam.Dispose();hv_CameraPoseOut.Dispose();
        Get_Cam_Parameters(out hv_StartCamParam, out hv_CameraPoseOut);


        //**************************************************
        //# ### Envio data de estado ########################
        hv_Estado.Dispose();
        hv_Estado = 16;
        Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
        //# #################################################

        hv_PoseForCalibrationPlate.Dispose();hv_EstadoFx.Dispose();hv_ExceptionFile.Dispose();
        Get_Pose_Caltab_Smart_COPY_3(ho_Image, hv_StartCamParam, hv_CalTabFile, hv_SerialHandle, 
            out hv_PoseForCalibrationPlate, out hv_EstadoFx, out hv_ExceptionFile);




        if ((int)(hv_EstadoFx) != 0)
        {
          hv_Estado.Dispose();
          hv_Estado = 14;
          Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
          //*******************************
          //Enviar por ETHERNETIP
          //*******************************
          //# ### Envio data de estado ########################
          hv_Estado.Dispose();
          hv_Estado = 17;
          Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
          //# #################################################


          Send_Data_To_Robot(hv_PoseForCalibrationPlate, hv_SerialHandle);
          hv_Resultado.Dispose();
          hv_Resultado = 1;
          hv_Procesando.Dispose();
          hv_Procesando = 1;
          Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
          //# #################################################
          hv_Estado.Dispose();
          hv_Estado = new HTuple(hv_EstadoFx);

        }
        else
        {
          hv_Estado.Dispose();
          hv_Estado = 0;
          hv_Mensaje.Dispose();
          hv_Mensaje = "####### FIN BLOQUE 2. Busqueda de patron en Pattern FALLIDA #######";
          Send_Data_Info(hv_Mensaje, hv_SerialHandle);
        }


        hv_Exception.Dispose();
        hv_Exception = new HTuple(hv_ExceptionFile);



        hv_Time.Dispose();
        hv_Gain.Dispose();
        hv_g_Error_CamaraOpt_Adq.Dispose();
        hv_Width.Dispose();
        hv_Height.Dispose();
        hv_MSecond.Dispose();
        hv_Second.Dispose();
        hv_Minute.Dispose();
        hv_Hour.Dispose();
        hv_Day.Dispose();
        hv_YDay.Dispose();
        hv_Month.Dispose();
        hv_Year.Dispose();
        hv_Mensaje.Dispose();
        hv_Calibration.Dispose();
        hv_CalTabFile.Dispose();
        hv_StartCamParam.Dispose();
        hv_CameraPoseOut.Dispose();
        hv_PoseForCalibrationPlate.Dispose();
        hv_EstadoFx.Dispose();
        hv_ExceptionFile.Dispose();
        hv_Resultado.Dispose();
        hv_Procesando.Dispose();

        return;

      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.WriteObject(ho_Image, ((("D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/ImagenNODECT_"+hv_Month)+hv_Day)+hv_Hour)+hv_Second);
        }



        hv_Time.Dispose();
        hv_Gain.Dispose();
        hv_g_Error_CamaraOpt_Adq.Dispose();
        hv_Width.Dispose();
        hv_Height.Dispose();
        hv_MSecond.Dispose();
        hv_Second.Dispose();
        hv_Minute.Dispose();
        hv_Hour.Dispose();
        hv_Day.Dispose();
        hv_YDay.Dispose();
        hv_Month.Dispose();
        hv_Year.Dispose();
        hv_Mensaje.Dispose();
        hv_Calibration.Dispose();
        hv_CalTabFile.Dispose();
        hv_StartCamParam.Dispose();
        hv_CameraPoseOut.Dispose();
        hv_PoseForCalibrationPlate.Dispose();
        hv_EstadoFx.Dispose();
        hv_ExceptionFile.Dispose();
        hv_Resultado.Dispose();
        hv_Procesando.Dispose();

        return;

        //# #################################################

      }

      hv_Time.Dispose();
      hv_Gain.Dispose();
      hv_g_Error_CamaraOpt_Adq.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_MSecond.Dispose();
      hv_Second.Dispose();
      hv_Minute.Dispose();
      hv_Hour.Dispose();
      hv_Day.Dispose();
      hv_YDay.Dispose();
      hv_Month.Dispose();
      hv_Year.Dispose();
      hv_Mensaje.Dispose();
      hv_Calibration.Dispose();
      hv_CalTabFile.Dispose();
      hv_StartCamParam.Dispose();
      hv_CameraPoseOut.Dispose();
      hv_PoseForCalibrationPlate.Dispose();
      hv_EstadoFx.Dispose();
      hv_ExceptionFile.Dispose();
      hv_Resultado.Dispose();
      hv_Procesando.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Time.Dispose();
      hv_Gain.Dispose();
      hv_g_Error_CamaraOpt_Adq.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_MSecond.Dispose();
      hv_Second.Dispose();
      hv_Minute.Dispose();
      hv_Hour.Dispose();
      hv_Day.Dispose();
      hv_YDay.Dispose();
      hv_Month.Dispose();
      hv_Year.Dispose();
      hv_Mensaje.Dispose();
      hv_Calibration.Dispose();
      hv_CalTabFile.Dispose();
      hv_StartCamParam.Dispose();
      hv_CameraPoseOut.Dispose();
      hv_PoseForCalibrationPlate.Dispose();
      hv_EstadoFx.Dispose();
      hv_ExceptionFile.Dispose();
      hv_Resultado.Dispose();
      hv_Procesando.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Smart_Patron_COPY_8 (out HObject ho_Image, HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Vector_Estado_Fx, 
      HTuple hv_SerialHandle, HTuple hv_ExposureTime, HTuple hv_Ganancia, HTuple hv_AcqHandle, 
      out HTuple hv_Estado, out HTuple hv_Exception)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Time = new HTuple(), hv_Gain = new HTuple();
    HTuple hv_g_Error_CamaraOpt_Adq = new HTuple(), hv_Width = new HTuple();
    HTuple hv_Height = new HTuple(), hv_MSecond = new HTuple();
    HTuple hv_Second = new HTuple(), hv_Minute = new HTuple();
    HTuple hv_Hour = new HTuple(), hv_Day = new HTuple(), hv_YDay = new HTuple();
    HTuple hv_Month = new HTuple(), hv_Year = new HTuple();
    HTuple hv_Mensaje = new HTuple(), hv_Calibration = new HTuple();
    HTuple hv_CalTabFile = new HTuple(), hv_StartCamParam = new HTuple();
    HTuple hv_CameraPoseOut = new HTuple(), hv_PoseForCalibrationPlate = new HTuple();
    HTuple hv_EstadoFx = new HTuple(), hv_ExceptionFile = new HTuple();
    HTuple hv_Resultado = new HTuple(), hv_Procesando = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Image);
    hv_Estado = new HTuple();
    hv_Exception = new HTuple();
    try
    {
      try
      {

        hv_Time.Dispose();
        hv_Time = new HTuple(hv_ExposureTime);
        hv_Gain.Dispose();
        hv_Gain = new HTuple(hv_Ganancia);
        Set_exposure_Time_cam_0(hv_AcqHandle, hv_Time, hv_Gain);

        ho_Image.Dispose();hv_g_Error_CamaraOpt_Adq.Dispose();
        Get_Image(out ho_Image, hv_AcqHandle, out hv_g_Error_CamaraOpt_Adq);
        HOperatorSet.DispObj(ho_Image, hv_ExpDefaultWinHandle);
        hv_Width.Dispose();hv_Height.Dispose();
        HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);


        //**********************************************************************
        //***** Guardo las Imagenes ********************************************
        hv_MSecond.Dispose();hv_Second.Dispose();hv_Minute.Dispose();hv_Hour.Dispose();hv_Day.Dispose();hv_YDay.Dispose();hv_Month.Dispose();hv_Year.Dispose();
        HOperatorSet.GetSystemTime(out hv_MSecond, out hv_Second, out hv_Minute, 
            out hv_Hour, out hv_Day, out hv_YDay, out hv_Month, out hv_Year);

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.WriteObject(ho_Image, ((("D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/Imagen"+hv_Month)+hv_Day)+hv_Hour)+hv_Second);
        }

        //read_image (Image, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/Imagen941134.hobj')



        //***********************************************************************
        //**************************************************
        //Hand Eye Apunto al Descriptor
        //**************************************************
        hv_Mensaje.Dispose();
        hv_Mensaje = "Cargando descriptores de distorcion y de patron";
        Send_Data_Info(hv_Mensaje, hv_SerialHandle);

        hv_Calibration.Dispose();
        hv_Calibration = "5x5_10";
        hv_CalTabFile.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_CalTabFile = ("C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/6.- Caltab Din3/Caltab"+hv_Calibration)+".descr";
        }
        hv_StartCamParam.Dispose();hv_CameraPoseOut.Dispose();
        Get_Cam_Parameters(out hv_StartCamParam, out hv_CameraPoseOut);


        //**************************************************
        //# ### Envio data de estado ########################
        hv_Estado.Dispose();
        hv_Estado = 16;
        Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
        //# #################################################

        hv_PoseForCalibrationPlate.Dispose();hv_EstadoFx.Dispose();hv_ExceptionFile.Dispose();
        Get_Pose_Caltab_Smart_COPY_3(ho_Image, hv_StartCamParam, hv_CalTabFile, hv_SerialHandle, 
            out hv_PoseForCalibrationPlate, out hv_EstadoFx, out hv_ExceptionFile);




        if ((int)(hv_EstadoFx) != 0)
        {
          hv_Estado.Dispose();
          hv_Estado = 14;
          Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
          //*******************************
          //Enviar por ETHERNETIP
          //*******************************
          //# ### Envio data de estado ########################
          hv_Estado.Dispose();
          hv_Estado = 17;
          Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
          //# #################################################


          Send_Data_To_Robot(hv_PoseForCalibrationPlate, hv_SerialHandle);
          hv_Resultado.Dispose();
          hv_Resultado = 1;
          hv_Procesando.Dispose();
          hv_Procesando = 1;
          Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
          //# #################################################
          hv_Estado.Dispose();
          hv_Estado = new HTuple(hv_EstadoFx);

        }
        else
        {
          hv_Estado.Dispose();
          hv_Estado = 0;
          hv_Mensaje.Dispose();
          hv_Mensaje = "####### FIN BLOQUE 2. Busqueda de patron en Pattern FALLIDA #######";
          Send_Data_Info(hv_Mensaje, hv_SerialHandle);
        }


        hv_Exception.Dispose();
        hv_Exception = new HTuple(hv_ExceptionFile);



        hv_Time.Dispose();
        hv_Gain.Dispose();
        hv_g_Error_CamaraOpt_Adq.Dispose();
        hv_Width.Dispose();
        hv_Height.Dispose();
        hv_MSecond.Dispose();
        hv_Second.Dispose();
        hv_Minute.Dispose();
        hv_Hour.Dispose();
        hv_Day.Dispose();
        hv_YDay.Dispose();
        hv_Month.Dispose();
        hv_Year.Dispose();
        hv_Mensaje.Dispose();
        hv_Calibration.Dispose();
        hv_CalTabFile.Dispose();
        hv_StartCamParam.Dispose();
        hv_CameraPoseOut.Dispose();
        hv_PoseForCalibrationPlate.Dispose();
        hv_EstadoFx.Dispose();
        hv_ExceptionFile.Dispose();
        hv_Resultado.Dispose();
        hv_Procesando.Dispose();

        return;

      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.WriteObject(ho_Image, ((("D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 1/ImagenNODECT_"+hv_Month)+hv_Day)+hv_Hour)+hv_Second);
        }



        hv_Time.Dispose();
        hv_Gain.Dispose();
        hv_g_Error_CamaraOpt_Adq.Dispose();
        hv_Width.Dispose();
        hv_Height.Dispose();
        hv_MSecond.Dispose();
        hv_Second.Dispose();
        hv_Minute.Dispose();
        hv_Hour.Dispose();
        hv_Day.Dispose();
        hv_YDay.Dispose();
        hv_Month.Dispose();
        hv_Year.Dispose();
        hv_Mensaje.Dispose();
        hv_Calibration.Dispose();
        hv_CalTabFile.Dispose();
        hv_StartCamParam.Dispose();
        hv_CameraPoseOut.Dispose();
        hv_PoseForCalibrationPlate.Dispose();
        hv_EstadoFx.Dispose();
        hv_ExceptionFile.Dispose();
        hv_Resultado.Dispose();
        hv_Procesando.Dispose();

        return;

        //# #################################################

      }

      hv_Time.Dispose();
      hv_Gain.Dispose();
      hv_g_Error_CamaraOpt_Adq.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_MSecond.Dispose();
      hv_Second.Dispose();
      hv_Minute.Dispose();
      hv_Hour.Dispose();
      hv_Day.Dispose();
      hv_YDay.Dispose();
      hv_Month.Dispose();
      hv_Year.Dispose();
      hv_Mensaje.Dispose();
      hv_Calibration.Dispose();
      hv_CalTabFile.Dispose();
      hv_StartCamParam.Dispose();
      hv_CameraPoseOut.Dispose();
      hv_PoseForCalibrationPlate.Dispose();
      hv_EstadoFx.Dispose();
      hv_ExceptionFile.Dispose();
      hv_Resultado.Dispose();
      hv_Procesando.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Time.Dispose();
      hv_Gain.Dispose();
      hv_g_Error_CamaraOpt_Adq.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_MSecond.Dispose();
      hv_Second.Dispose();
      hv_Minute.Dispose();
      hv_Hour.Dispose();
      hv_Day.Dispose();
      hv_YDay.Dispose();
      hv_Month.Dispose();
      hv_Year.Dispose();
      hv_Mensaje.Dispose();
      hv_Calibration.Dispose();
      hv_CalTabFile.Dispose();
      hv_StartCamParam.Dispose();
      hv_CameraPoseOut.Dispose();
      hv_PoseForCalibrationPlate.Dispose();
      hv_EstadoFx.Dispose();
      hv_ExceptionFile.Dispose();
      hv_Resultado.Dispose();
      hv_Procesando.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_SprueExistence (HTuple hv_SerialHandle, out HTuple hv_Pattern, 
      out HTuple hv_PosicionRack, out HTuple hv_ExisteEnRack)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Tag_Lectura = new HTuple(), hv_Peticion = new HTuple();
    HTuple hv_Variable_OPC = new HTuple(), hv_Data = new HTuple();
    HTuple hv_Nchar = new HTuple(), hv_Variable = new HTuple();
    // Initialize local and output iconic variables 
    hv_Pattern = new HTuple();
    hv_PosicionRack = new HTuple();
    hv_ExisteEnRack = new HTuple();
    try
    {
      hv_Tag_Lectura.Dispose();
      hv_Tag_Lectura = "_EBD_I_PatternList";
      hv_Pattern.Dispose();
      Read_EthernetIP_Data(hv_Tag_Lectura, hv_SerialHandle, out hv_Pattern);

      //*******************************************
      //Peticion de RamSprue
      //********************************************

      hv_Peticion.Dispose();
      hv_Peticion = "RamSprue";
      hv_Variable_OPC.Dispose();
      hv_Variable_OPC = new HTuple(hv_Pattern);

      hv_Data.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Data = (hv_Peticion+";")+hv_Variable_OPC;
      }

      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.WriteSerial(hv_SerialHandle, hv_Data.TupleOrds());
      }

      HOperatorSet.WaitSeconds(0.08);
      //Numero de caracteres a leer
      hv_Nchar.Dispose();
      HOperatorSet.ReadSerial(hv_SerialHandle, 20, out hv_Nchar);
      hv_Variable.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Variable = hv_Nchar.TupleChrt()
          ;
      }
      hv_Data.Dispose();
      HOperatorSet.TupleSplit(hv_Variable, ";", out hv_Data);

      hv_Pattern.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Pattern = hv_Data.TupleSelect(
          0);
      }
      hv_PosicionRack.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_PosicionRack = hv_Data.TupleSelect(
          1);
      }
      if ((int)(new HTuple(((hv_Data.TupleSelect(2))).TupleEqual("O"))) != 0)
      {
        hv_ExisteEnRack.Dispose();
        hv_ExisteEnRack = 1;
      }
      else if ((int)(new HTuple(((hv_Data.TupleSelect(2))).TupleEqual("X"))) != 0)
      {
        hv_ExisteEnRack.Dispose();
        hv_ExisteEnRack = 0;
      }

      hv_Tag_Lectura.Dispose();
      hv_Peticion.Dispose();
      hv_Variable_OPC.Dispose();
      hv_Data.Dispose();
      hv_Nchar.Dispose();
      hv_Variable.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Tag_Lectura.Dispose();
      hv_Peticion.Dispose();
      hv_Variable_OPC.Dispose();
      hv_Data.Dispose();
      hv_Nchar.Dispose();
      hv_Variable.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Stl_Object_Core (HTuple hv_Vector_ID_Core_by_Segment_Pallet, HTuple hv_Path_CORE_ID, 
      HTuple hv_Path_3D_Segmentos, HTuple hv_Path_SFM_Segmentos, HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Vector_Estado_Fx, 
      HTuple hv_SerialHandle, out HTuple hv_ObjectModel3D_Core_Pallet, out HTuple hv_Estado_Get_SFM_STL, 
      out HTuple hv_Modelo3D_Select)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Core_Find_by_User = new HTuple();
    HTuple hv_Index_Core = new HTuple(), hv_Core_Get = new HTuple();
    HTuple hv_Index_Core_find = new HTuple(), hv_Status = new HTuple();
    HTuple hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    hv_ObjectModel3D_Core_Pallet = new HTuple();
    hv_Estado_Get_SFM_STL = new HTuple();
    hv_Modelo3D_Select = new HTuple();
    try
    {
      hv_Estado_Get_SFM_STL.Dispose();
      hv_Estado_Get_SFM_STL = 0;
      try
      {

        hv_Core_Find_by_User.Dispose();
        hv_Core_Find_by_User = new HTuple(hv_Vector_ID_Core_by_Segment_Pallet);

        if ((int)(new HTuple(hv_Core_Find_by_User.TupleEqual(""))) != 0)
        {
          hv_Estado_Get_SFM_STL.Dispose();
          hv_Estado_Get_SFM_STL = 0;

          hv_Core_Find_by_User.Dispose();
          hv_Index_Core.Dispose();
          hv_Core_Get.Dispose();
          hv_Index_Core_find.Dispose();
          hv_Status.Dispose();
          hv_Exception.Dispose();

          return;
        }

        hv_Index_Core.Dispose();
        hv_Index_Core = new HTuple();
        hv_Core_Get.Dispose();
        hv_Core_Get = 0;

        for (hv_Index_Core_find=0; (int)hv_Index_Core_find<=(int)((new HTuple(hv_Path_CORE_ID.TupleLength()
            ))-1); hv_Index_Core_find = (int)hv_Index_Core_find + 1)
        {

          if ((int)(new HTuple(((hv_Path_CORE_ID.TupleSelect(hv_Index_Core_find))).TupleEqual(
              hv_Core_Find_by_User))) != 0)
          {
            hv_Index_Core.Dispose();
            hv_Index_Core = new HTuple(hv_Index_Core_find);
            hv_Core_Get.Dispose();
            hv_Core_Get = 1;
          }
        }

        if ((int)(hv_Core_Get.TupleNot()) != 0)
        {


          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          Send_Data_Info(("### ERROR ### No se encuentra la Ruta del modelo 3D  -> "+hv_Core_Find_by_User)+" <- \nVerificar que los nombres coincidan en la base de datos dinamica y estaica", 
              hv_SerialHandle);
          }
          //throw ('CORE NO EXISTE EN BD')




          hv_Core_Find_by_User.Dispose();
          hv_Index_Core.Dispose();
          hv_Core_Get.Dispose();
          hv_Index_Core_find.Dispose();
          hv_Status.Dispose();
          hv_Exception.Dispose();

          return;

        }


        Send_Estado_Vision(hvec_Vector_Estado_Fx, hv_SerialHandle, 24);
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_ObjectModel3D_Core_Pallet.Dispose();hv_Status.Dispose();
        HOperatorSet.ReadObjectModel3d(hv_Path_3D_Segmentos.TupleSelect(hv_Index_Core), 
            1, new HTuple(), new HTuple(), out hv_ObjectModel3D_Core_Pallet, out hv_Status);
        }
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        Send_Data_Info("Modelo 3D Leido  -------> "+hv_Core_Find_by_User, hv_SerialHandle);
        }

        hv_Modelo3D_Select.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Modelo3D_Select = hv_Path_3D_Segmentos.TupleSelect(
            hv_Index_Core);
        }


        hv_Estado_Get_SFM_STL.Dispose();
        hv_Estado_Get_SFM_STL = 1;

      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        Send_Data_Info(("### ERROR ### No se encuentra la Ruta del modelo 3D  -> "+hv_Core_Find_by_User)+" <- \nVerificar que los nombres coincidan en la base de datos dinamica y estaica", 
            hv_SerialHandle);
        }
      }

      hv_Core_Find_by_User.Dispose();
      hv_Index_Core.Dispose();
      hv_Core_Get.Dispose();
      hv_Index_Core_find.Dispose();
      hv_Status.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Core_Find_by_User.Dispose();
      hv_Index_Core.Dispose();
      hv_Core_Get.Dispose();
      hv_Index_Core_find.Dispose();
      hv_Status.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_STL_Sleeve (HTuple hv_Vector_ID_Core_by_Segment_Pallet, HTuple hv_Path_CORE_ID, 
      HTuple hv_Path_3D_Segmentos, HTuple hv_Path_SFM_Segmentos, HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Vector_Estado_Fx, 
      HTuple hv_SerialHandle, out HTuple hv_ObjectModel3D_Core_Pallet, out HTuple hv_Estado_Get_SFM_STL, 
      out HTuple hv_Modelo3D_Select)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Core_Find_by_User = new HTuple();
    HTuple hv_Index_Core = new HTuple(), hv_Core_Get = new HTuple();
    HTuple hv_Index_Core_find = new HTuple(), hv_Status = new HTuple();
    HTuple hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    hv_ObjectModel3D_Core_Pallet = new HTuple();
    hv_Estado_Get_SFM_STL = new HTuple();
    hv_Modelo3D_Select = new HTuple();
    try
    {
      hv_Estado_Get_SFM_STL.Dispose();
      hv_Estado_Get_SFM_STL = 0;
      try
      {

        hv_Core_Find_by_User.Dispose();
        hv_Core_Find_by_User = new HTuple(hv_Vector_ID_Core_by_Segment_Pallet);

        if ((int)(new HTuple(hv_Core_Find_by_User.TupleEqual(""))) != 0)
        {
          hv_Estado_Get_SFM_STL.Dispose();
          hv_Estado_Get_SFM_STL = 0;

          hv_Core_Find_by_User.Dispose();
          hv_Index_Core.Dispose();
          hv_Core_Get.Dispose();
          hv_Index_Core_find.Dispose();
          hv_Status.Dispose();
          hv_Exception.Dispose();

          return;
        }

        hv_Index_Core.Dispose();
        hv_Index_Core = new HTuple();
        hv_Core_Get.Dispose();
        hv_Core_Get = 0;

        for (hv_Index_Core_find=0; (int)hv_Index_Core_find<=(int)((new HTuple(hv_Path_CORE_ID.TupleLength()
            ))-1); hv_Index_Core_find = (int)hv_Index_Core_find + 1)
        {

          if ((int)(new HTuple(((hv_Path_CORE_ID.TupleSelect(hv_Index_Core_find))).TupleEqual(
              hv_Core_Find_by_User))) != 0)
          {
            hv_Index_Core.Dispose();
            hv_Index_Core = new HTuple(hv_Index_Core_find);
            hv_Core_Get.Dispose();
            hv_Core_Get = 1;
          }
        }

        if ((int)(hv_Core_Get.TupleNot()) != 0)
        {



          throw new HalconException("CORE NO EXISTE EN BD");




          hv_Core_Find_by_User.Dispose();
          hv_Index_Core.Dispose();
          hv_Core_Get.Dispose();
          hv_Index_Core_find.Dispose();
          hv_Status.Dispose();
          hv_Exception.Dispose();

          return;

        }


        Send_Estado_Vision(hvec_Vector_Estado_Fx, hv_SerialHandle, 24);
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_ObjectModel3D_Core_Pallet.Dispose();hv_Status.Dispose();
        HOperatorSet.ReadObjectModel3d(hv_Path_3D_Segmentos.TupleSelect(hv_Index_Core), 
            1, new HTuple(), new HTuple(), out hv_ObjectModel3D_Core_Pallet, out hv_Status);
        }
        //Send_Estado_Vision (Vector_Estado_Fx, SerialHandle, 25)
        //read_surface_model (Path_SFM_Segmentos[Index_Core], SFM_Core_Pallet)
        //Send_Data_Info ('Surface File Leido '+Core_Find_by_User, SerialHandle)

        hv_Modelo3D_Select.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Modelo3D_Select = hv_Path_3D_Segmentos.TupleSelect(
            hv_Index_Core);
        }


        hv_Estado_Get_SFM_STL.Dispose();
        hv_Estado_Get_SFM_STL = 1;

      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);


        throw new HalconException("NO se pudo leer el modelo 3D o el SFM de "+hv_Core_Find_by_User);
      }

      hv_Core_Find_by_User.Dispose();
      hv_Index_Core.Dispose();
      hv_Core_Get.Dispose();
      hv_Index_Core_find.Dispose();
      hv_Status.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Core_Find_by_User.Dispose();
      hv_Index_Core.Dispose();
      hv_Core_Get.Dispose();
      hv_Index_Core_find.Dispose();
      hv_Status.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Tipo_EntidadBDD (HTuple hv_Cod_Core_ToUse, out HTuple hv_Entidad)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Entidad2 = new HTuple(), hv_Entidad3 = new HTuple();
    HTuple hv_Entidad4 = new HTuple(), hv_NUMERO = new HTuple();
    HTuple hv_DOWEL = new HTuple(), hv_LID = new HTuple();
    // Initialize local and output iconic variables 
    hv_Entidad = new HTuple();
    try
    {

      hv_Entidad2.Dispose();
      HOperatorSet.TupleStrrstr(hv_Cod_Core_ToUse, "PIN", out hv_Entidad2);
      hv_Entidad3.Dispose();
      HOperatorSet.TupleStrrstr(hv_Cod_Core_ToUse, "SPRUE", out hv_Entidad3);
      hv_Entidad4.Dispose();
      HOperatorSet.TupleStrrstr(hv_Cod_Core_ToUse, "LOC", out hv_Entidad4);

      hv_NUMERO.Dispose();
      HOperatorSet.TupleStrrstr(hv_Cod_Core_ToUse, "NUM", out hv_NUMERO);
      hv_DOWEL.Dispose();
      HOperatorSet.TupleStrrstr(hv_Cod_Core_ToUse, "DOWEL", out hv_DOWEL);
      hv_LID.Dispose();
      HOperatorSet.TupleStrrstr(hv_Cod_Core_ToUse, "LID", out hv_LID);


      if ((int)((new HTuple((new HTuple((new HTuple((new HTuple((new HTuple(hv_Entidad2.TupleEqual(
          -1))).TupleAnd(new HTuple(hv_Entidad3.TupleEqual(-1))))).TupleAnd(new HTuple(hv_Entidad4.TupleEqual(
          -1))))).TupleAnd(new HTuple(hv_NUMERO.TupleEqual(-1))))).TupleAnd(new HTuple(hv_DOWEL.TupleEqual(
          -1))))).TupleAnd(new HTuple(hv_LID.TupleEqual(-1)))) != 0)
      {
        hv_Entidad.Dispose();
        hv_Entidad = 1;
      }
      else
      {
        hv_Entidad.Dispose();
        hv_Entidad = 0;

      }


      hv_Entidad2.Dispose();
      hv_Entidad3.Dispose();
      hv_Entidad4.Dispose();
      hv_NUMERO.Dispose();
      hv_DOWEL.Dispose();
      hv_LID.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Entidad2.Dispose();
      hv_Entidad3.Dispose();
      hv_Entidad4.Dispose();
      hv_NUMERO.Dispose();
      hv_DOWEL.Dispose();
      hv_LID.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_TipoEntidad (HTuple hv_Cod_Core_ToUse, out HTuple hv_Entidad)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Entidad1 = new HTuple(), hv_Entidad2 = new HTuple();
    HTuple hv_Entidad3 = new HTuple(), hv_Entidad4 = new HTuple();
    HTuple hv_NUMERO = new HTuple(), hv_DOWEL = new HTuple();
    HTuple hv_LID = new HTuple();
    // Initialize local and output iconic variables 
    hv_Entidad = new HTuple();
    try
    {
      hv_Entidad.Dispose();
      HOperatorSet.TupleStrrstr(hv_Cod_Core_ToUse, "sleeve", out hv_Entidad);
      hv_Entidad1.Dispose();
      HOperatorSet.TupleStrrstr(hv_Cod_Core_ToUse, "sleeve", out hv_Entidad1);
      hv_Entidad2.Dispose();
      HOperatorSet.TupleStrrstr(hv_Cod_Core_ToUse, "PIN", out hv_Entidad2);
      hv_Entidad3.Dispose();
      HOperatorSet.TupleStrrstr(hv_Cod_Core_ToUse, "SPRUE", out hv_Entidad3);
      hv_Entidad4.Dispose();
      HOperatorSet.TupleStrrstr(hv_Cod_Core_ToUse, "LOC", out hv_Entidad4);

      hv_NUMERO.Dispose();
      HOperatorSet.TupleStrrstr(hv_Cod_Core_ToUse, "NUM", out hv_NUMERO);
      hv_DOWEL.Dispose();
      HOperatorSet.TupleStrrstr(hv_Cod_Core_ToUse, "DOWEL", out hv_DOWEL);
      hv_LID.Dispose();
      HOperatorSet.TupleStrrstr(hv_Cod_Core_ToUse, "LID", out hv_LID);


      if ((int)((new HTuple((new HTuple((new HTuple((new HTuple((new HTuple((new HTuple(hv_Entidad.TupleEqual(
          -1))).TupleAnd(new HTuple(hv_Entidad1.TupleEqual(-1))))).TupleAnd(new HTuple(hv_Entidad3.TupleEqual(
          -1))))).TupleAnd(new HTuple(hv_Entidad4.TupleEqual(-1))))).TupleAnd(new HTuple(hv_NUMERO.TupleEqual(
          -1))))).TupleAnd(new HTuple(hv_DOWEL.TupleEqual(-1))))).TupleAnd(new HTuple(hv_LID.TupleEqual(
          -1)))) != 0)
      {
        hv_Entidad.Dispose();
        hv_Entidad = 1;
      }
      else
      {
        hv_Entidad.Dispose();
        hv_Entidad = 0;

      }


      hv_Entidad1.Dispose();
      hv_Entidad2.Dispose();
      hv_Entidad3.Dispose();
      hv_Entidad4.Dispose();
      hv_NUMERO.Dispose();
      hv_DOWEL.Dispose();
      hv_LID.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Entidad1.Dispose();
      hv_Entidad2.Dispose();
      hv_Entidad3.Dispose();
      hv_Entidad4.Dispose();
      hv_NUMERO.Dispose();
      hv_DOWEL.Dispose();
      hv_LID.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_ToolInCamPose (out HTuple hv_ToolInCamPose)
  {

    // Initialize local and output iconic variables 
    hv_ToolInCamPose = new HTuple();
    hv_ToolInCamPose.Dispose();
    HOperatorSet.ReadPose("C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/7.-HandEye/1.- Ensenso R1/ToolInCamPose_R1.dat", 
        out hv_ToolInCamPose);



    return;
  }

  public void Get_Vector_Entidades (HTuple hv_Vector_ID_Core_by_Segment_Pallet, out HTuple hv_Vector_Entidades_Segmento)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_N_Cores_Segmento = new HTuple();
    HTuple hv_Vector_N_Elementos = new HTuple(), hv_idx_aux = new HTuple();
    HTuple hv_Index_Core_Seg = new HTuple(), hv_Core_Find_by_User = new HTuple();
    HTuple hv_Aux = new HTuple(), hv_Index_temp = new HTuple();
    HTuple hv_Vector_Entidades = new HTuple(), hv_idx_Vector_Entidades = new HTuple();
    HTuple hv_N_core = new HTuple(), hv_Core_To_Find = new HTuple();
    HTuple hv_Index_temp_b = new HTuple(), hv_Entidad = new HTuple();
    HTuple hv_Puntero_segmentos = new HTuple(), hv_CoreExist = new HTuple();
    // Initialize local and output iconic variables 
    hv_Vector_Entidades_Segmento = new HTuple();
    try
    {

      //0.1.- identifico cuantos Cores existen por segmento


      hv_N_Cores_Segmento.Dispose();
      hv_N_Cores_Segmento = new HTuple();
      hv_Vector_N_Elementos.Dispose();
      hv_Vector_N_Elementos = new HTuple();
      hv_idx_aux.Dispose();
      hv_idx_aux = 0;
      for (hv_Index_Core_Seg=0; (int)hv_Index_Core_Seg<=(int)((new HTuple(hv_Vector_ID_Core_by_Segment_Pallet.TupleLength()
          ))-1); hv_Index_Core_Seg = (int)hv_Index_Core_Seg + 1)
      {

        hv_Core_Find_by_User.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Core_Find_by_User = hv_Vector_ID_Core_by_Segment_Pallet.TupleSelect(
            hv_Index_Core_Seg);
        }

        hv_Aux.Dispose();
        HOperatorSet.TupleSplit(hv_Core_Find_by_User, ";", out hv_Aux);
        if (hv_N_Cores_Segmento == null)
          hv_N_Cores_Segmento = new HTuple();
        hv_N_Cores_Segmento[hv_Index_Core_Seg] = new HTuple(hv_Aux.TupleLength());


        for (hv_Index_temp=0; (int)hv_Index_temp<=(int)((new HTuple(hv_Aux.TupleLength()
            ))-1); hv_Index_temp = (int)hv_Index_temp + 1)
        {

          if (hv_Vector_N_Elementos == null)
            hv_Vector_N_Elementos = new HTuple();
          hv_Vector_N_Elementos[hv_idx_aux] = hv_Aux.TupleSelect(hv_Index_temp);
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_idx_aux = hv_idx_aux+1;
          hv_idx_aux.Dispose();
          hv_idx_aux = ExpTmpLocalVar_idx_aux;
          }
          }
        }

      }


      //0.2.- identifico cuantos Cores existen y cuantas veces se repiten
      hv_Vector_Entidades.Dispose();
      hv_Vector_Entidades = new HTuple();
      hv_idx_Vector_Entidades.Dispose();
      hv_idx_Vector_Entidades = 0;
      for (hv_Index_temp=0; (int)hv_Index_temp<=(int)((new HTuple(hv_Vector_N_Elementos.TupleLength()
          ))-1); hv_Index_temp = (int)hv_Index_temp + 1)
      {
        if ((int)(new HTuple(((hv_Vector_N_Elementos.TupleSelect(hv_Index_temp))).TupleEqual(
            ""))) != 0)
        {
          continue;
        }
        hv_N_core.Dispose();
        hv_N_core = 1;
        hv_Core_To_Find.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Core_To_Find = hv_Vector_N_Elementos.TupleSelect(
            hv_Index_temp);
        }
        if ((int)(new HTuple(hv_Core_To_Find.TupleEqual(" "))) != 0)
        {
          continue;
        }
        if (hv_Vector_N_Elementos == null)
          hv_Vector_N_Elementos = new HTuple();
        hv_Vector_N_Elementos[hv_Index_temp] = " ";

        for (hv_Index_temp_b=0; (int)hv_Index_temp_b<=(int)((new HTuple(hv_Vector_N_Elementos.TupleLength()
            ))-1); hv_Index_temp_b = (int)hv_Index_temp_b + 1)
        {
          if ((int)(new HTuple(hv_Core_To_Find.TupleEqual(hv_Vector_N_Elementos.TupleSelect(
              hv_Index_temp_b)))) != 0)
          {
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            {
            HTuple 
              ExpTmpLocalVar_N_core = hv_N_core+1;
            hv_N_core.Dispose();
            hv_N_core = ExpTmpLocalVar_N_core;
            }
            }
            if (hv_Vector_N_Elementos == null)
              hv_Vector_N_Elementos = new HTuple();
            hv_Vector_N_Elementos[hv_Index_temp_b] = " ";
          }
        }


        if (hv_Vector_Entidades == null)
          hv_Vector_Entidades = new HTuple();
        hv_Vector_Entidades[hv_idx_Vector_Entidades] = (hv_Core_To_Find+";")+hv_N_core;
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_idx_Vector_Entidades = hv_idx_Vector_Entidades+1;
        hv_idx_Vector_Entidades.Dispose();
        hv_idx_Vector_Entidades = ExpTmpLocalVar_idx_Vector_Entidades;
        }
        }
      }

      //0.3 Busco los cores y en que segmento se encuentran

      hv_Vector_Entidades_Segmento.Dispose();
      hv_Vector_Entidades_Segmento = new HTuple();
      for (hv_Index_temp=0; (int)hv_Index_temp<=(int)((new HTuple(hv_Vector_Entidades.TupleLength()
          ))-1); hv_Index_temp = (int)hv_Index_temp + 1)
      {

        hv_Aux.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Aux = hv_Vector_Entidades.TupleSelect(
            hv_Index_temp);
        }
        {
        HTuple ExpTmpOutVar_0;
        HOperatorSet.TupleSplit(hv_Aux, ";", out ExpTmpOutVar_0);
        hv_Aux.Dispose();
        hv_Aux = ExpTmpOutVar_0;
        }
        hv_Entidad.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Entidad = hv_Aux.TupleSelect(
            0);
        }

        hv_Puntero_segmentos.Dispose();
        hv_Puntero_segmentos = "";
        for (hv_Index_temp_b=0; (int)hv_Index_temp_b<=(int)((new HTuple(hv_Vector_ID_Core_by_Segment_Pallet.TupleLength()
            ))-1); hv_Index_temp_b = (int)hv_Index_temp_b + 1)
        {
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_CoreExist.Dispose();
          HOperatorSet.TupleStrrstr(hv_Vector_ID_Core_by_Segment_Pallet.TupleSelect(
              hv_Index_temp_b), hv_Entidad, out hv_CoreExist);
          }
          if ((int)(new HTuple(hv_CoreExist.TupleGreaterEqual(0))) != 0)
          {
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            {
            HTuple 
              ExpTmpLocalVar_Puntero_segmentos = (hv_Puntero_segmentos+";")+hv_Index_temp_b;
            hv_Puntero_segmentos.Dispose();
            hv_Puntero_segmentos = ExpTmpLocalVar_Puntero_segmentos;
            }
            }
          }

        }

        if (hv_Vector_Entidades_Segmento == null)
          hv_Vector_Entidades_Segmento = new HTuple();
        hv_Vector_Entidades_Segmento[hv_Index_temp] = hv_Entidad+hv_Puntero_segmentos;
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Aux.Dispose();
        HOperatorSet.TupleSplit(hv_Vector_Entidades_Segmento.TupleSelect(hv_Index_temp), 
            ";", out hv_Aux);
        }
      }

      hv_N_Cores_Segmento.Dispose();
      hv_Vector_N_Elementos.Dispose();
      hv_idx_aux.Dispose();
      hv_Index_Core_Seg.Dispose();
      hv_Core_Find_by_User.Dispose();
      hv_Aux.Dispose();
      hv_Index_temp.Dispose();
      hv_Vector_Entidades.Dispose();
      hv_idx_Vector_Entidades.Dispose();
      hv_N_core.Dispose();
      hv_Core_To_Find.Dispose();
      hv_Index_temp_b.Dispose();
      hv_Entidad.Dispose();
      hv_Puntero_segmentos.Dispose();
      hv_CoreExist.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_N_Cores_Segmento.Dispose();
      hv_Vector_N_Elementos.Dispose();
      hv_idx_aux.Dispose();
      hv_Index_Core_Seg.Dispose();
      hv_Core_Find_by_User.Dispose();
      hv_Aux.Dispose();
      hv_Index_temp.Dispose();
      hv_Vector_Entidades.Dispose();
      hv_idx_Vector_Entidades.Dispose();
      hv_N_core.Dispose();
      hv_Core_To_Find.Dispose();
      hv_Index_temp_b.Dispose();
      hv_Entidad.Dispose();
      hv_Puntero_segmentos.Dispose();
      hv_CoreExist.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Vector_Estados (out HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Vector_Estado_Fx)
  {


    // Local iconic variables 

    // Local control variables 

    HTuple hv_Nestado = new HTuple();
    // Initialize local and output iconic variables 
    hvec_Vector_Estado_Fx = new HTupleVector(2);
    try
    {
      hvec_Vector_Estado_Fx.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx = dh.Take((
          dh.Add(new HTupleVector(2)).Insert(0,(dh.Add(new HTupleVector(1)).Insert(0,dh.Add(new HTupleVector(new HTuple())))))));
      }
      hvec_Vector_Estado_Fx[0][0] = new HTupleVector(new HTuple("Valor Estado"));
      hvec_Vector_Estado_Fx[0][1] = new HTupleVector(new HTuple("Codificacion"));

      hv_Nestado.Dispose();
      hv_Nestado = 1;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple("Adquiriendo fotografia"));
      hv_Nestado.Dispose();
      hv_Nestado = 2;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" Adquiriendo informacion de pallets"));
      hv_Nestado.Dispose();
      hv_Nestado = 3;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple("Analizando Pallet"));
      hv_Nestado.Dispose();
      hv_Nestado = 4;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple("Fallo en adquisición de imagen"));
      hv_Nestado.Dispose();
      hv_Nestado = 5;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple("Fallo en ROI Pallet"));
      hv_Nestado.Dispose();
      hv_Nestado = 6;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple("Buscando esquina del pallet"));
      hv_Nestado.Dispose();
      hv_Nestado = 7;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple("No se detecto Esquina de Pallet"));
      hv_Nestado.Dispose();
      hv_Nestado = 8;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" Busco de manera sectorizada cada core en el pallet"));
      hv_Nestado.Dispose();
      hv_Nestado = 9;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple("Leyendo STl del Core"));
      hv_Nestado.Dispose();
      hv_Nestado = 10;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple("Buscando core en el segmento del pallet"));
      hv_Nestado.Dispose();
      hv_Nestado = 11;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple("Core  DETECTADO en segmento de PALLET"));
      hv_Nestado.Dispose();
      hv_Nestado = 12;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple("No se detecto Core en el segmento del pallet"));
      hv_Nestado.Dispose();
      hv_Nestado = 13;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple("Escritura de existencia de cores de Pallet solicitado"));
      hv_Nestado.Dispose();
      hv_Nestado = 14;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple("Detección de patrón Exitoso"));
      hv_Nestado.Dispose();
      hv_Nestado = 15;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple("No se a logrado extraer el patrón"));
      hv_Nestado.Dispose();
      hv_Nestado = 16;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple("Buscando Patrón"));
      hv_Nestado.Dispose();
      hv_Nestado = 17;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple("Enviando coordenadas de patrón al Robot"));
      hv_Nestado.Dispose();
      hv_Nestado = 18;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple("Fin GET_PATRON_POSE"));
      hv_Nestado.Dispose();
      hv_Nestado = 19;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple("#### BLOQUE  0 INICIADO ####"));
      hv_Nestado.Dispose();
      hv_Nestado = 20;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple("Adquiriendo Multifoto"));
      hv_Nestado.Dispose();
      hv_Nestado = 21;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" Busqueda Finalizada"));
      hv_Nestado.Dispose();
      hv_Nestado = 22;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple("  ### Error ### Orientacion de Core detectado Incorrecta "));
      hv_Nestado.Dispose();
      hv_Nestado = 23;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" ### Error ### Manga No Detectada"));
      hv_Nestado.Dispose();
      hv_Nestado = 24;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" Leyendo Modelo de 3D"));
      hv_Nestado.Dispose();
      hv_Nestado = 25;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" Leyendo Modelo de Superficie"));
      hv_Nestado.Dispose();
      hv_Nestado = 26;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 27;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 28;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 29;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 30;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 31;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 32;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 33;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 34;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 35;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 36;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 37;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 38;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 39;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 40;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 41;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 42;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 43;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 44;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 45;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 46;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 47;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 48;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 49;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 50;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 51;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 52;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 53;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 54;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 55;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 56;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 57;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 58;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 59;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 60;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 61;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 62;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 63;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 64;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 65;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 66;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 67;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 68;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 69;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 70;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 71;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 72;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 73;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 74;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 75;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 76;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 77;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 78;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 79;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 80;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 81;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 82;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 83;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 84;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 85;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 86;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 87;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 88;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 89;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 90;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 91;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));
      hv_Nestado.Dispose();
      hv_Nestado = 92;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_Vector_Estado_Fx[hv_Nestado][0] = dh.Add(new HTupleVector(hv_Nestado));
      }
      hvec_Vector_Estado_Fx[hv_Nestado][1] = new HTupleVector(new HTuple(" "));

    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Nestado.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Get_Vector_Info_Cores_byUser (HTuple hv_N_pallet, HTuple hv_Vector_ID_Core_by_Segment_Pallet_1, 
      HTuple hv_Vector_ID_Core_by_Segment_Pallet_2, HTuple hv_Vector_ID_Core_by_Segment_Pallet_3, 
      HTuple hv_Vector_ID_Core_by_Segment_Pallet_4, HTuple hv_Vector_ID_Core_by_Segment_Pallet_5, 
      HTuple hv_Vector_ID_Core_by_Segment_Pallet_6, out HTuple hv_Vector_ID_Core_by_Segment_Pallet)
  {



    // Local iconic variables 
    // Initialize local and output iconic variables 
    hv_Vector_ID_Core_by_Segment_Pallet = new HTuple();
    switch (hv_N_pallet.I)
    {
    case 1:
      hv_Vector_ID_Core_by_Segment_Pallet.Dispose();
      hv_Vector_ID_Core_by_Segment_Pallet = new HTuple(hv_Vector_ID_Core_by_Segment_Pallet_1);
      break;
    case 2:
      hv_Vector_ID_Core_by_Segment_Pallet.Dispose();
      hv_Vector_ID_Core_by_Segment_Pallet = new HTuple(hv_Vector_ID_Core_by_Segment_Pallet_2);
      break;
    case 3:
      hv_Vector_ID_Core_by_Segment_Pallet.Dispose();
      hv_Vector_ID_Core_by_Segment_Pallet = new HTuple(hv_Vector_ID_Core_by_Segment_Pallet_3);
      break;
    case 4:
      hv_Vector_ID_Core_by_Segment_Pallet.Dispose();
      hv_Vector_ID_Core_by_Segment_Pallet = new HTuple(hv_Vector_ID_Core_by_Segment_Pallet_4);
      break;
    case 5:
      hv_Vector_ID_Core_by_Segment_Pallet.Dispose();
      hv_Vector_ID_Core_by_Segment_Pallet = new HTuple(hv_Vector_ID_Core_by_Segment_Pallet_5);
      break;

    case 6:
      hv_Vector_ID_Core_by_Segment_Pallet.Dispose();
      hv_Vector_ID_Core_by_Segment_Pallet = new HTuple(hv_Vector_ID_Core_by_Segment_Pallet_6);
      break;
    }


    return;
  }

  public void Get_VectorVariables (out HTuple hv_Vector_Variables)
  {

    // Initialize local and output iconic variables 
    hv_Vector_Variables = new HTuple();
    if (hv_Vector_Variables == null)
      hv_Vector_Variables = new HTuple();
    hv_Vector_Variables[0] = "_EV01_I_CodEntidad";
    if (hv_Vector_Variables == null)
      hv_Vector_Variables = new HTuple();
    hv_Vector_Variables[1] = "_EBD_I_PalletIr";
    if (hv_Vector_Variables == null)
      hv_Vector_Variables = new HTuple();
    hv_Vector_Variables[2] = "_EBD_I_SegmentoIr";
    if (hv_Vector_Variables == null)
      hv_Vector_Variables = new HTuple();
    hv_Vector_Variables[3] = "_EBD_I_EjeY";
    if (hv_Vector_Variables == null)
      hv_Vector_Variables = new HTuple();
    hv_Vector_Variables[4] = "_EV01_I_EsApilado";
    if (hv_Vector_Variables == null)
      hv_Vector_Variables = new HTuple();
    hv_Vector_Variables[5] = "_EBD_I_EjeZ";
    if (hv_Vector_Variables == null)
      hv_Vector_Variables = new HTuple();
    hv_Vector_Variables[6] = "_EBD_I_EjeA";
    if (hv_Vector_Variables == null)
      hv_Vector_Variables = new HTuple();
    hv_Vector_Variables[7] = "_EBD_I_Diametro";


    return;
  }

  public void Get_VectorVariables_COPY_1 (out HTuple hv_Vector_Variables)
  {

    // Initialize local and output iconic variables 
    hv_Vector_Variables = new HTuple();
    if (hv_Vector_Variables == null)
      hv_Vector_Variables = new HTuple();
    hv_Vector_Variables[0] = "_EBD_I_EjeX";
    if (hv_Vector_Variables == null)
      hv_Vector_Variables = new HTuple();
    hv_Vector_Variables[1] = "_EBD_I_PalletIr";
    if (hv_Vector_Variables == null)
      hv_Vector_Variables = new HTuple();
    hv_Vector_Variables[2] = "_EBD_I_SegmentoIr";
    if (hv_Vector_Variables == null)
      hv_Vector_Variables = new HTuple();
    hv_Vector_Variables[3] = "_EBD_I_EjeY";
    if (hv_Vector_Variables == null)
      hv_Vector_Variables = new HTuple();
    hv_Vector_Variables[4] = "_EV01_I_EsApilado";
    if (hv_Vector_Variables == null)
      hv_Vector_Variables = new HTuple();
    hv_Vector_Variables[5] = "_EBD_I_EjeZ";
    if (hv_Vector_Variables == null)
      hv_Vector_Variables = new HTuple();
    hv_Vector_Variables[6] = "_EBD_I_EjeA";
    if (hv_Vector_Variables == null)
      hv_Vector_Variables = new HTuple();
    hv_Vector_Variables[7] = "_EV01_I_FotoApilado";
    if (hv_Vector_Variables == null)
      hv_Vector_Variables = new HTuple();
    hv_Vector_Variables[8] = "_EV01_I_EjeA";
    if (hv_Vector_Variables == null)
      hv_Vector_Variables = new HTuple();
    hv_Vector_Variables[9] = "_EV01_I_EjeB";
    if (hv_Vector_Variables == null)
      hv_Vector_Variables = new HTuple();
    hv_Vector_Variables[10] = "_EV01_I_EjeC";
    if (hv_Vector_Variables == null)
      hv_Vector_Variables = new HTuple();
    hv_Vector_Variables[11] = "_EV01_I_EjeX";
    if (hv_Vector_Variables == null)
      hv_Vector_Variables = new HTuple();
    hv_Vector_Variables[12] = "_EV01_I_EjeY";
    if (hv_Vector_Variables == null)
      hv_Vector_Variables = new HTuple();
    hv_Vector_Variables[13] = "_EV01_I_EjeZ";


    return;
  }

  public void Get_Zona_ROI (HObject ho_Zm, out HObject ho_Zmred, HTuple hv_N_Localizador)
  {




    // Local iconic variables 

    HObject ho_ROI_0_V=null, ho_ROI_0=null, ho_Zona1=null;
    HObject ho_ROI_1_V=null, ho_ROI_1=null, ho_Zona2=null, ho_ROI_2_V=null;
    HObject ho_ROI_2=null, ho_Zona3=null, ho_ROI_3_V=null, ho_ROI_3=null;
    HObject ho_Zona4=null, ho_ROI_4_V=null, ho_ROI_4=null, ho_Zona5=null;
    HObject ho_ROI_5_V=null, ho_ROI_5=null, ho_Zona6=null, ho_ROI_6_V=null;
    HObject ho_ROI_6=null, ho_Zona7=null, ho_ROI_7_V=null, ho_ROI_7=null;
    HObject ho_Zona8=null, ho_ROI_8_V=null, ho_ROI_8=null, ho_Zona9=null;
    HObject ho_ROI_9_V=null, ho_ROI_9=null, ho_Zona10=null;
    HObject ho_ROI_10_V=null, ho_ROI_10=null, ho_Zona11=null;
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Zmred);
    HOperatorSet.GenEmptyObj(out ho_ROI_0_V);
    HOperatorSet.GenEmptyObj(out ho_ROI_0);
    HOperatorSet.GenEmptyObj(out ho_Zona1);
    HOperatorSet.GenEmptyObj(out ho_ROI_1_V);
    HOperatorSet.GenEmptyObj(out ho_ROI_1);
    HOperatorSet.GenEmptyObj(out ho_Zona2);
    HOperatorSet.GenEmptyObj(out ho_ROI_2_V);
    HOperatorSet.GenEmptyObj(out ho_ROI_2);
    HOperatorSet.GenEmptyObj(out ho_Zona3);
    HOperatorSet.GenEmptyObj(out ho_ROI_3_V);
    HOperatorSet.GenEmptyObj(out ho_ROI_3);
    HOperatorSet.GenEmptyObj(out ho_Zona4);
    HOperatorSet.GenEmptyObj(out ho_ROI_4_V);
    HOperatorSet.GenEmptyObj(out ho_ROI_4);
    HOperatorSet.GenEmptyObj(out ho_Zona5);
    HOperatorSet.GenEmptyObj(out ho_ROI_5_V);
    HOperatorSet.GenEmptyObj(out ho_ROI_5);
    HOperatorSet.GenEmptyObj(out ho_Zona6);
    HOperatorSet.GenEmptyObj(out ho_ROI_6_V);
    HOperatorSet.GenEmptyObj(out ho_ROI_6);
    HOperatorSet.GenEmptyObj(out ho_Zona7);
    HOperatorSet.GenEmptyObj(out ho_ROI_7_V);
    HOperatorSet.GenEmptyObj(out ho_ROI_7);
    HOperatorSet.GenEmptyObj(out ho_Zona8);
    HOperatorSet.GenEmptyObj(out ho_ROI_8_V);
    HOperatorSet.GenEmptyObj(out ho_ROI_8);
    HOperatorSet.GenEmptyObj(out ho_Zona9);
    HOperatorSet.GenEmptyObj(out ho_ROI_9_V);
    HOperatorSet.GenEmptyObj(out ho_ROI_9);
    HOperatorSet.GenEmptyObj(out ho_Zona10);
    HOperatorSet.GenEmptyObj(out ho_ROI_10_V);
    HOperatorSet.GenEmptyObj(out ho_ROI_10);
    HOperatorSet.GenEmptyObj(out ho_Zona11);
    try
    {


      //*read_image (ModelImage, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Localizadores/ModelImage881613.hobj')
      switch (hv_N_Localizador.I)
      {
      case 1:
        //ROI Zona 1

        ho_ROI_0_V.Dispose();
        HOperatorSet.GenRegionRuns(out ho_ROI_0_V, ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
            (new HTuple(705)).TupleConcat(706)).TupleConcat(707)).TupleConcat(708)).TupleConcat(
            709)).TupleConcat(710)).TupleConcat(711)).TupleConcat(712)).TupleConcat(
            713)).TupleConcat(714)).TupleConcat(715)).TupleConcat(716)).TupleConcat(
            717)).TupleConcat(718)).TupleConcat(719)).TupleConcat(720)).TupleConcat(
            721)).TupleConcat(722)).TupleConcat(723)).TupleConcat(724)).TupleConcat(
            725)).TupleConcat(726)).TupleConcat(727)).TupleConcat(728)).TupleConcat(
            729)).TupleConcat(730)).TupleConcat(731)).TupleConcat(732)).TupleConcat(
            733)).TupleConcat(734)).TupleConcat(735)).TupleConcat(736)).TupleConcat(
            737)).TupleConcat(738)).TupleConcat(739)).TupleConcat(740)).TupleConcat(
            741)).TupleConcat(742)).TupleConcat(743)).TupleConcat(744)).TupleConcat(
            745)).TupleConcat(746)).TupleConcat(747)).TupleConcat(748)).TupleConcat(
            749)).TupleConcat(750)).TupleConcat(751)).TupleConcat(752)).TupleConcat(
            753)).TupleConcat(754)).TupleConcat(755)).TupleConcat(756)).TupleConcat(
            757)).TupleConcat(758)).TupleConcat(759)).TupleConcat(760)).TupleConcat(
            761)).TupleConcat(762)).TupleConcat(763)).TupleConcat(764)).TupleConcat(
            765)).TupleConcat(766)).TupleConcat(767)).TupleConcat(768)).TupleConcat(
            769)).TupleConcat(770)).TupleConcat(771)).TupleConcat(772)).TupleConcat(
            773)).TupleConcat(774)).TupleConcat(775)).TupleConcat(776)).TupleConcat(
            777)).TupleConcat(778)).TupleConcat(779)).TupleConcat(780)).TupleConcat(
            781)).TupleConcat(782)).TupleConcat(783)).TupleConcat(783)).TupleConcat(
            784)).TupleConcat(784)).TupleConcat(785)).TupleConcat(786)).TupleConcat(
            787)).TupleConcat(788)).TupleConcat(789)).TupleConcat(790), ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
            (new HTuple(206)).TupleConcat(205)).TupleConcat(202)).TupleConcat(201)).TupleConcat(
            198)).TupleConcat(197)).TupleConcat(195)).TupleConcat(194)).TupleConcat(
            191)).TupleConcat(191)).TupleConcat(190)).TupleConcat(188)).TupleConcat(
            187)).TupleConcat(185)).TupleConcat(184)).TupleConcat(181)).TupleConcat(
            180)).TupleConcat(177)).TupleConcat(176)).TupleConcat(175)).TupleConcat(
            173)).TupleConcat(173)).TupleConcat(171)).TupleConcat(169)).TupleConcat(
            168)).TupleConcat(167)).TupleConcat(166)).TupleConcat(163)).TupleConcat(
            162)).TupleConcat(160)).TupleConcat(160)).TupleConcat(157)).TupleConcat(
            157)).TupleConcat(153)).TupleConcat(153)).TupleConcat(151)).TupleConcat(
            150)).TupleConcat(149)).TupleConcat(147)).TupleConcat(147)).TupleConcat(
            145)).TupleConcat(145)).TupleConcat(143)).TupleConcat(143)).TupleConcat(
            140)).TupleConcat(140)).TupleConcat(138)).TupleConcat(138)).TupleConcat(
            136)).TupleConcat(130)).TupleConcat(130)).TupleConcat(128)).TupleConcat(
            127)).TupleConcat(126)).TupleConcat(126)).TupleConcat(125)).TupleConcat(
            125)).TupleConcat(124)).TupleConcat(122)).TupleConcat(121)).TupleConcat(
            121)).TupleConcat(121)).TupleConcat(120)).TupleConcat(120)).TupleConcat(
            120)).TupleConcat(120)).TupleConcat(120)).TupleConcat(120)).TupleConcat(
            120)).TupleConcat(120)).TupleConcat(120)).TupleConcat(120)).TupleConcat(
            121)).TupleConcat(121)).TupleConcat(123)).TupleConcat(123)).TupleConcat(
            124)).TupleConcat(126)).TupleConcat(126)).TupleConcat(151)).TupleConcat(
            127)).TupleConcat(152)).TupleConcat(153)).TupleConcat(153)).TupleConcat(
            154)).TupleConcat(154)).TupleConcat(155)).TupleConcat(155), ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
            (new HTuple(222)).TupleConcat(224)).TupleConcat(227)).TupleConcat(230)).TupleConcat(
            232)).TupleConcat(234)).TupleConcat(235)).TupleConcat(236)).TupleConcat(
            237)).TupleConcat(237)).TupleConcat(238)).TupleConcat(239)).TupleConcat(
            239)).TupleConcat(239)).TupleConcat(239)).TupleConcat(239)).TupleConcat(
            239)).TupleConcat(239)).TupleConcat(239)).TupleConcat(239)).TupleConcat(
            239)).TupleConcat(239)).TupleConcat(239)).TupleConcat(239)).TupleConcat(
            239)).TupleConcat(238)).TupleConcat(238)).TupleConcat(236)).TupleConcat(
            234)).TupleConcat(233)).TupleConcat(232)).TupleConcat(231)).TupleConcat(
            230)).TupleConcat(230)).TupleConcat(229)).TupleConcat(228)).TupleConcat(
            228)).TupleConcat(227)).TupleConcat(226)).TupleConcat(225)).TupleConcat(
            225)).TupleConcat(224)).TupleConcat(223)).TupleConcat(222)).TupleConcat(
            221)).TupleConcat(220)).TupleConcat(219)).TupleConcat(219)).TupleConcat(
            218)).TupleConcat(217)).TupleConcat(215)).TupleConcat(215)).TupleConcat(
            213)).TupleConcat(212)).TupleConcat(211)).TupleConcat(210)).TupleConcat(
            208)).TupleConcat(207)).TupleConcat(205)).TupleConcat(202)).TupleConcat(
            202)).TupleConcat(200)).TupleConcat(198)).TupleConcat(195)).TupleConcat(
            194)).TupleConcat(191)).TupleConcat(190)).TupleConcat(189)).TupleConcat(
            188)).TupleConcat(187)).TupleConcat(184)).TupleConcat(181)).TupleConcat(
            178)).TupleConcat(177)).TupleConcat(174)).TupleConcat(172)).TupleConcat(
            171)).TupleConcat(169)).TupleConcat(136)).TupleConcat(169)).TupleConcat(
            134)).TupleConcat(167)).TupleConcat(166)).TupleConcat(164)).TupleConcat(
            163)).TupleConcat(160)).TupleConcat(159)).TupleConcat(158));
        ho_ROI_0.Dispose();
        HOperatorSet.GenRectangle1(out ho_ROI_0, 684.939, 115.029, 808.666, 260.411);

        ho_Zona1.Dispose();
        HOperatorSet.Difference(ho_ROI_0, ho_ROI_0_V, out ho_Zona1);
        ho_Zmred.Dispose();
        HOperatorSet.ReduceDomain(ho_Zm, ho_Zona1, out ho_Zmred);
        break;

      case 2:
        //ROI Zona 2
        ho_ROI_1_V.Dispose();
        HOperatorSet.GenRegionRuns(out ho_ROI_1_V, (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
            (new HTuple(702)).TupleConcat(703)).TupleConcat(704)).TupleConcat(705)).TupleConcat(
            706)).TupleConcat(707)).TupleConcat(708)).TupleConcat(709)).TupleConcat(
            710)).TupleConcat(711)).TupleConcat(712)).TupleConcat(713)).TupleConcat(
            714)).TupleConcat(715)).TupleConcat(716)).TupleConcat(717)).TupleConcat(
            718)).TupleConcat(719)).TupleConcat(720)).TupleConcat(721)).TupleConcat(
            722)).TupleConcat(723)).TupleConcat(724)).TupleConcat(725)).TupleConcat(
            726)).TupleConcat(727)).TupleConcat(728)).TupleConcat(729)).TupleConcat(
            730)).TupleConcat(731)).TupleConcat(732)).TupleConcat(733)).TupleConcat(
            734)).TupleConcat(735)).TupleConcat(736)).TupleConcat(737)).TupleConcat(
            738)).TupleConcat(739)).TupleConcat(740)).TupleConcat(741)).TupleConcat(
            742)).TupleConcat(743)).TupleConcat(744)).TupleConcat(745)).TupleConcat(
            746)).TupleConcat(747)).TupleConcat(748)).TupleConcat(749)).TupleConcat(
            750)).TupleConcat(751)).TupleConcat(752)).TupleConcat(753)).TupleConcat(
            754)).TupleConcat(755)).TupleConcat(756)).TupleConcat(757)).TupleConcat(
            758)).TupleConcat(759)).TupleConcat(760)).TupleConcat(761)).TupleConcat(
            762)).TupleConcat(763)).TupleConcat(764)).TupleConcat(765)).TupleConcat(
            766)).TupleConcat(767)).TupleConcat(768)).TupleConcat(769)).TupleConcat(
            770)).TupleConcat(771)).TupleConcat(772)).TupleConcat(773)).TupleConcat(
            774)).TupleConcat(775)).TupleConcat(776)).TupleConcat(777)).TupleConcat(
            778)).TupleConcat(779)).TupleConcat(780)).TupleConcat(781)).TupleConcat(
            782)).TupleConcat(783)).TupleConcat(784), (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
            (new HTuple(458)).TupleConcat(454)).TupleConcat(453)).TupleConcat(451)).TupleConcat(
            450)).TupleConcat(448)).TupleConcat(448)).TupleConcat(449)).TupleConcat(
            449)).TupleConcat(449)).TupleConcat(448)).TupleConcat(446)).TupleConcat(
            445)).TupleConcat(444)).TupleConcat(442)).TupleConcat(440)).TupleConcat(
            439)).TupleConcat(438)).TupleConcat(435)).TupleConcat(434)).TupleConcat(
            432)).TupleConcat(430)).TupleConcat(429)).TupleConcat(429)).TupleConcat(
            428)).TupleConcat(427)).TupleConcat(425)).TupleConcat(425)).TupleConcat(
            423)).TupleConcat(423)).TupleConcat(423)).TupleConcat(422)).TupleConcat(
            420)).TupleConcat(419)).TupleConcat(419)).TupleConcat(419)).TupleConcat(
            418)).TupleConcat(417)).TupleConcat(417)).TupleConcat(417)).TupleConcat(
            416)).TupleConcat(416)).TupleConcat(415)).TupleConcat(415)).TupleConcat(
            414)).TupleConcat(414)).TupleConcat(414)).TupleConcat(414)).TupleConcat(
            413)).TupleConcat(413)).TupleConcat(412)).TupleConcat(412)).TupleConcat(
            411)).TupleConcat(411)).TupleConcat(410)).TupleConcat(410)).TupleConcat(
            409)).TupleConcat(409)).TupleConcat(409)).TupleConcat(408)).TupleConcat(
            408)).TupleConcat(408)).TupleConcat(408)).TupleConcat(408)).TupleConcat(
            408)).TupleConcat(408)).TupleConcat(408)).TupleConcat(408)).TupleConcat(
            408)).TupleConcat(408)).TupleConcat(408)).TupleConcat(408)).TupleConcat(
            408)).TupleConcat(408)).TupleConcat(409)).TupleConcat(409)).TupleConcat(
            409)).TupleConcat(410)).TupleConcat(410)).TupleConcat(411)).TupleConcat(
            411)).TupleConcat(413)).TupleConcat(414), (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
            (new HTuple(466)).TupleConcat(471)).TupleConcat(473)).TupleConcat(474)).TupleConcat(
            475)).TupleConcat(477)).TupleConcat(478)).TupleConcat(479)).TupleConcat(
            480)).TupleConcat(481)).TupleConcat(482)).TupleConcat(483)).TupleConcat(
            483)).TupleConcat(483)).TupleConcat(483)).TupleConcat(483)).TupleConcat(
            483)).TupleConcat(483)).TupleConcat(483)).TupleConcat(483)).TupleConcat(
            483)).TupleConcat(483)).TupleConcat(483)).TupleConcat(483)).TupleConcat(
            483)).TupleConcat(483)).TupleConcat(483)).TupleConcat(483)).TupleConcat(
            483)).TupleConcat(483)).TupleConcat(483)).TupleConcat(483)).TupleConcat(
            483)).TupleConcat(482)).TupleConcat(482)).TupleConcat(482)).TupleConcat(
            482)).TupleConcat(481)).TupleConcat(481)).TupleConcat(481)).TupleConcat(
            481)).TupleConcat(480)).TupleConcat(480)).TupleConcat(480)).TupleConcat(
            479)).TupleConcat(479)).TupleConcat(478)).TupleConcat(478)).TupleConcat(
            477)).TupleConcat(477)).TupleConcat(476)).TupleConcat(476)).TupleConcat(
            475)).TupleConcat(474)).TupleConcat(474)).TupleConcat(474)).TupleConcat(
            473)).TupleConcat(473)).TupleConcat(473)).TupleConcat(472)).TupleConcat(
            471)).TupleConcat(470)).TupleConcat(470)).TupleConcat(469)).TupleConcat(
            468)).TupleConcat(467)).TupleConcat(466)).TupleConcat(465)).TupleConcat(
            464)).TupleConcat(463)).TupleConcat(463)).TupleConcat(462)).TupleConcat(
            460)).TupleConcat(459)).TupleConcat(457)).TupleConcat(455)).TupleConcat(
            453)).TupleConcat(451)).TupleConcat(451)).TupleConcat(448)).TupleConcat(
            446)).TupleConcat(442)).TupleConcat(438));

        ho_ROI_1.Dispose();
        HOperatorSet.GenRectangle1(out ho_ROI_1, 697.392, 388.714, 812.836, 536.584);

        ho_Zona2.Dispose();
        HOperatorSet.Difference(ho_ROI_1, ho_ROI_1_V, out ho_Zona2);
        ho_Zmred.Dispose();
        HOperatorSet.ReduceDomain(ho_Zm, ho_Zona2, out ho_Zmred);
        break;

      case 3:
        //ROI Zona 3


        ho_ROI_2_V.Dispose();
        HOperatorSet.GenRegionRuns(out ho_ROI_2_V, (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
            (new HTuple(694)).TupleConcat(695)).TupleConcat(696)).TupleConcat(697)).TupleConcat(
            698)).TupleConcat(699)).TupleConcat(700)).TupleConcat(701)).TupleConcat(
            702)).TupleConcat(703)).TupleConcat(704)).TupleConcat(705)).TupleConcat(
            706)).TupleConcat(707)).TupleConcat(708)).TupleConcat(709)).TupleConcat(
            710)).TupleConcat(711)).TupleConcat(712)).TupleConcat(713)).TupleConcat(
            714)).TupleConcat(715)).TupleConcat(716)).TupleConcat(717)).TupleConcat(
            718)).TupleConcat(719)).TupleConcat(720)).TupleConcat(721)).TupleConcat(
            722)).TupleConcat(723)).TupleConcat(724)).TupleConcat(725)).TupleConcat(
            726)).TupleConcat(727)).TupleConcat(728)).TupleConcat(729)).TupleConcat(
            730)).TupleConcat(731)).TupleConcat(732)).TupleConcat(733)).TupleConcat(
            734)).TupleConcat(735)).TupleConcat(736)).TupleConcat(737)).TupleConcat(
            738)).TupleConcat(739)).TupleConcat(740)).TupleConcat(741)).TupleConcat(
            742)).TupleConcat(743)).TupleConcat(744)).TupleConcat(745)).TupleConcat(
            746)).TupleConcat(747)).TupleConcat(748)).TupleConcat(749)).TupleConcat(
            750)).TupleConcat(751)).TupleConcat(752)).TupleConcat(753)).TupleConcat(
            754)).TupleConcat(755)).TupleConcat(756)).TupleConcat(757)).TupleConcat(
            758)).TupleConcat(759)).TupleConcat(760)).TupleConcat(761)).TupleConcat(
            762)).TupleConcat(763)).TupleConcat(764)).TupleConcat(765)).TupleConcat(
            766)).TupleConcat(767)).TupleConcat(768)).TupleConcat(769)).TupleConcat(
            770)).TupleConcat(771)).TupleConcat(772)).TupleConcat(773)).TupleConcat(
            774)).TupleConcat(775)).TupleConcat(776)).TupleConcat(777)).TupleConcat(
            778)).TupleConcat(779)).TupleConcat(780)).TupleConcat(781)).TupleConcat(
            782)).TupleConcat(783)).TupleConcat(784)).TupleConcat(785)).TupleConcat(
            786)).TupleConcat(787)).TupleConcat(788)).TupleConcat(789)).TupleConcat(
            790)).TupleConcat(791)).TupleConcat(792)).TupleConcat(793)).TupleConcat(
            794)).TupleConcat(795)).TupleConcat(796)).TupleConcat(797)).TupleConcat(
            798)).TupleConcat(799)).TupleConcat(800)).TupleConcat(801)).TupleConcat(
            802)).TupleConcat(803)).TupleConcat(804)).TupleConcat(805)).TupleConcat(
            806)).TupleConcat(807)).TupleConcat(808)).TupleConcat(809)).TupleConcat(
            810)).TupleConcat(811)).TupleConcat(812)).TupleConcat(813)).TupleConcat(
            814)).TupleConcat(815)).TupleConcat(816), (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
            (new HTuple(750)).TupleConcat(749)).TupleConcat(748)).TupleConcat(748)).TupleConcat(
            747)).TupleConcat(747)).TupleConcat(747)).TupleConcat(747)).TupleConcat(
            747)).TupleConcat(747)).TupleConcat(747)).TupleConcat(747)).TupleConcat(
            747)).TupleConcat(747)).TupleConcat(747)).TupleConcat(747)).TupleConcat(
            748)).TupleConcat(749)).TupleConcat(749)).TupleConcat(750)).TupleConcat(
            751)).TupleConcat(752)).TupleConcat(752)).TupleConcat(752)).TupleConcat(
            753)).TupleConcat(755)).TupleConcat(755)).TupleConcat(757)).TupleConcat(
            757)).TupleConcat(758)).TupleConcat(758)).TupleConcat(759)).TupleConcat(
            759)).TupleConcat(760)).TupleConcat(760)).TupleConcat(761)).TupleConcat(
            761)).TupleConcat(761)).TupleConcat(761)).TupleConcat(762)).TupleConcat(
            762)).TupleConcat(763)).TupleConcat(763)).TupleConcat(763)).TupleConcat(
            764)).TupleConcat(764)).TupleConcat(764)).TupleConcat(765)).TupleConcat(
            765)).TupleConcat(766)).TupleConcat(766)).TupleConcat(766)).TupleConcat(
            767)).TupleConcat(767)).TupleConcat(767)).TupleConcat(768)).TupleConcat(
            769)).TupleConcat(770)).TupleConcat(770)).TupleConcat(770)).TupleConcat(
            771)).TupleConcat(772)).TupleConcat(772)).TupleConcat(773)).TupleConcat(
            773)).TupleConcat(774)).TupleConcat(775)).TupleConcat(776)).TupleConcat(
            777)).TupleConcat(778)).TupleConcat(779)).TupleConcat(780)).TupleConcat(
            781)).TupleConcat(782)).TupleConcat(782)).TupleConcat(783)).TupleConcat(
            783)).TupleConcat(784)).TupleConcat(785)).TupleConcat(786)).TupleConcat(
            787)).TupleConcat(789)).TupleConcat(789)).TupleConcat(791)).TupleConcat(
            791)).TupleConcat(792)).TupleConcat(794)).TupleConcat(795)).TupleConcat(
            797)).TupleConcat(797)).TupleConcat(797)).TupleConcat(798)).TupleConcat(
            800)).TupleConcat(800)).TupleConcat(801)).TupleConcat(802)).TupleConcat(
            803)).TupleConcat(805)).TupleConcat(807)).TupleConcat(808)).TupleConcat(
            809)).TupleConcat(811)).TupleConcat(812)).TupleConcat(813)).TupleConcat(
            814)).TupleConcat(814)).TupleConcat(815)).TupleConcat(815)).TupleConcat(
            816)).TupleConcat(816)).TupleConcat(816)).TupleConcat(816)).TupleConcat(
            816)).TupleConcat(816)).TupleConcat(816)).TupleConcat(816)).TupleConcat(
            816)).TupleConcat(816)).TupleConcat(816)).TupleConcat(816)).TupleConcat(
            817)).TupleConcat(818)).TupleConcat(820), (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
            (new HTuple(764)).TupleConcat(769)).TupleConcat(771)).TupleConcat(773)).TupleConcat(
            774)).TupleConcat(777)).TupleConcat(780)).TupleConcat(781)).TupleConcat(
            781)).TupleConcat(784)).TupleConcat(785)).TupleConcat(787)).TupleConcat(
            788)).TupleConcat(789)).TupleConcat(790)).TupleConcat(792)).TupleConcat(
            794)).TupleConcat(795)).TupleConcat(796)).TupleConcat(797)).TupleConcat(
            798)).TupleConcat(800)).TupleConcat(800)).TupleConcat(801)).TupleConcat(
            803)).TupleConcat(804)).TupleConcat(804)).TupleConcat(806)).TupleConcat(
            807)).TupleConcat(821)).TupleConcat(823)).TupleConcat(826)).TupleConcat(
            826)).TupleConcat(828)).TupleConcat(829)).TupleConcat(832)).TupleConcat(
            833)).TupleConcat(833)).TupleConcat(834)).TupleConcat(834)).TupleConcat(
            835)).TupleConcat(836)).TupleConcat(837)).TupleConcat(838)).TupleConcat(
            838)).TupleConcat(839)).TupleConcat(839)).TupleConcat(839)).TupleConcat(
            840)).TupleConcat(840)).TupleConcat(840)).TupleConcat(840)).TupleConcat(
            840)).TupleConcat(840)).TupleConcat(840)).TupleConcat(840)).TupleConcat(
            840)).TupleConcat(840)).TupleConcat(840)).TupleConcat(840)).TupleConcat(
            840)).TupleConcat(840)).TupleConcat(840)).TupleConcat(840)).TupleConcat(
            840)).TupleConcat(840)).TupleConcat(840)).TupleConcat(840)).TupleConcat(
            840)).TupleConcat(840)).TupleConcat(841)).TupleConcat(841)).TupleConcat(
            841)).TupleConcat(842)).TupleConcat(842)).TupleConcat(843)).TupleConcat(
            843)).TupleConcat(844)).TupleConcat(844)).TupleConcat(844)).TupleConcat(
            845)).TupleConcat(845)).TupleConcat(845)).TupleConcat(845)).TupleConcat(
            845)).TupleConcat(845)).TupleConcat(846)).TupleConcat(846)).TupleConcat(
            846)).TupleConcat(846)).TupleConcat(846)).TupleConcat(846)).TupleConcat(
            846)).TupleConcat(846)).TupleConcat(846)).TupleConcat(846)).TupleConcat(
            846)).TupleConcat(846)).TupleConcat(846)).TupleConcat(846)).TupleConcat(
            846)).TupleConcat(846)).TupleConcat(846)).TupleConcat(846)).TupleConcat(
            846)).TupleConcat(846)).TupleConcat(846)).TupleConcat(846)).TupleConcat(
            846)).TupleConcat(846)).TupleConcat(846)).TupleConcat(846)).TupleConcat(
            846)).TupleConcat(846)).TupleConcat(846)).TupleConcat(846)).TupleConcat(
            846)).TupleConcat(846)).TupleConcat(846)).TupleConcat(846)).TupleConcat(
            846)).TupleConcat(845)).TupleConcat(842));

        ho_ROI_2.Dispose();
        HOperatorSet.GenRectangle1(out ho_ROI_2, 678.747, 704.335, 832.419, 859.679);
        ho_Zona3.Dispose();
        HOperatorSet.Difference(ho_ROI_2, ho_ROI_2_V, out ho_Zona3);
        ho_Zmred.Dispose();
        HOperatorSet.ReduceDomain(ho_Zm, ho_Zona3, out ho_Zmred);
        break;
      case 4:
        //ROI Zona 4

        ho_ROI_3_V.Dispose();
        HOperatorSet.GenRegionRuns(out ho_ROI_3_V, ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
            (new HTuple(703)).TupleConcat(704)).TupleConcat(705)).TupleConcat(706)).TupleConcat(
            707)).TupleConcat(708)).TupleConcat(709)).TupleConcat(710)).TupleConcat(
            711)).TupleConcat(712)).TupleConcat(713)).TupleConcat(714)).TupleConcat(
            715)).TupleConcat(716)).TupleConcat(717)).TupleConcat(718)).TupleConcat(
            719)).TupleConcat(720)).TupleConcat(721)).TupleConcat(722)).TupleConcat(
            723)).TupleConcat(724)).TupleConcat(725)).TupleConcat(726)).TupleConcat(
            727)).TupleConcat(728)).TupleConcat(729)).TupleConcat(730)).TupleConcat(
            731)).TupleConcat(732)).TupleConcat(733)).TupleConcat(734)).TupleConcat(
            735)).TupleConcat(736)).TupleConcat(737)).TupleConcat(738)).TupleConcat(
            739)).TupleConcat(740)).TupleConcat(741)).TupleConcat(742)).TupleConcat(
            743)).TupleConcat(744)).TupleConcat(745)).TupleConcat(746)).TupleConcat(
            747)).TupleConcat(748)).TupleConcat(749)).TupleConcat(750)).TupleConcat(
            751)).TupleConcat(752)).TupleConcat(753)).TupleConcat(754)).TupleConcat(
            755)).TupleConcat(756)).TupleConcat(757)).TupleConcat(758)).TupleConcat(
            759)).TupleConcat(760)).TupleConcat(761)).TupleConcat(762)).TupleConcat(
            763)).TupleConcat(764)).TupleConcat(765)).TupleConcat(766)).TupleConcat(
            767)).TupleConcat(768)).TupleConcat(769)).TupleConcat(770)).TupleConcat(
            771)).TupleConcat(772)).TupleConcat(773)).TupleConcat(774)).TupleConcat(
            775)).TupleConcat(776)).TupleConcat(777)).TupleConcat(778)).TupleConcat(
            779)).TupleConcat(780)).TupleConcat(781)).TupleConcat(782)).TupleConcat(
            783)).TupleConcat(784)).TupleConcat(785)).TupleConcat(786)).TupleConcat(
            787)).TupleConcat(788)).TupleConcat(789)).TupleConcat(790)).TupleConcat(
            791)).TupleConcat(792)).TupleConcat(793)).TupleConcat(794)).TupleConcat(
            795)).TupleConcat(796)).TupleConcat(797)).TupleConcat(798)).TupleConcat(
            799)).TupleConcat(800)).TupleConcat(801)).TupleConcat(802)).TupleConcat(
            803)).TupleConcat(804)).TupleConcat(805)).TupleConcat(806)).TupleConcat(
            807)).TupleConcat(808)).TupleConcat(809)).TupleConcat(810)).TupleConcat(
            811)).TupleConcat(812)).TupleConcat(813)).TupleConcat(814)).TupleConcat(
            815)).TupleConcat(816)).TupleConcat(817)).TupleConcat(818), ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
            (new HTuple(1094)).TupleConcat(1094)).TupleConcat(1092)).TupleConcat(
            1089)).TupleConcat(1087)).TupleConcat(1085)).TupleConcat(1085)).TupleConcat(
            1084)).TupleConcat(1083)).TupleConcat(1083)).TupleConcat(1082)).TupleConcat(
            1082)).TupleConcat(1082)).TupleConcat(1081)).TupleConcat(1081)).TupleConcat(
            1081)).TupleConcat(1081)).TupleConcat(1081)).TupleConcat(1081)).TupleConcat(
            1080)).TupleConcat(1080)).TupleConcat(1080)).TupleConcat(1080)).TupleConcat(
            1080)).TupleConcat(1080)).TupleConcat(1080)).TupleConcat(1080)).TupleConcat(
            1080)).TupleConcat(1080)).TupleConcat(1081)).TupleConcat(1083)).TupleConcat(
            1085)).TupleConcat(1086)).TupleConcat(1087)).TupleConcat(1088)).TupleConcat(
            1090)).TupleConcat(1091)).TupleConcat(1093)).TupleConcat(1094)).TupleConcat(
            1096)).TupleConcat(1098)).TupleConcat(1100)).TupleConcat(1101)).TupleConcat(
            1102)).TupleConcat(1103)).TupleConcat(1104)).TupleConcat(1106)).TupleConcat(
            1108)).TupleConcat(1109)).TupleConcat(1110)).TupleConcat(1110)).TupleConcat(
            1113)).TupleConcat(1114)).TupleConcat(1116)).TupleConcat(1118)).TupleConcat(
            1120)).TupleConcat(1122)).TupleConcat(1123)).TupleConcat(1123)).TupleConcat(
            1125)).TupleConcat(1126)).TupleConcat(1128)).TupleConcat(1130)).TupleConcat(
            1131)).TupleConcat(1133)).TupleConcat(1136)).TupleConcat(1137)).TupleConcat(
            1139)).TupleConcat(1140)).TupleConcat(1142)).TupleConcat(1146)).TupleConcat(
            1148)).TupleConcat(1149)).TupleConcat(1149)).TupleConcat(1150)).TupleConcat(
            1151)).TupleConcat(1151)).TupleConcat(1151)).TupleConcat(1151)).TupleConcat(
            1152)).TupleConcat(1152)).TupleConcat(1153)).TupleConcat(1153)).TupleConcat(
            1153)).TupleConcat(1154)).TupleConcat(1154)).TupleConcat(1155)).TupleConcat(
            1155)).TupleConcat(1155)).TupleConcat(1156)).TupleConcat(1157)).TupleConcat(
            1157)).TupleConcat(1158)).TupleConcat(1159)).TupleConcat(1159)).TupleConcat(
            1160)).TupleConcat(1161)).TupleConcat(1161)).TupleConcat(1162)).TupleConcat(
            1163)).TupleConcat(1164)).TupleConcat(1164)).TupleConcat(1165)).TupleConcat(
            1166)).TupleConcat(1166)).TupleConcat(1167)).TupleConcat(1167)).TupleConcat(
            1168)).TupleConcat(1168)).TupleConcat(1169)).TupleConcat(1169)).TupleConcat(
            1171)).TupleConcat(1172)).TupleConcat(1173)).TupleConcat(1173)).TupleConcat(
            1175), ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
            (new HTuple(1114)).TupleConcat(1117)).TupleConcat(1129)).TupleConcat(
            1139)).TupleConcat(1147)).TupleConcat(1155)).TupleConcat(1160)).TupleConcat(
            1162)).TupleConcat(1169)).TupleConcat(1178)).TupleConcat(1185)).TupleConcat(
            1185)).TupleConcat(1188)).TupleConcat(1190)).TupleConcat(1192)).TupleConcat(
            1193)).TupleConcat(1195)).TupleConcat(1196)).TupleConcat(1198)).TupleConcat(
            1199)).TupleConcat(1200)).TupleConcat(1201)).TupleConcat(1202)).TupleConcat(
            1203)).TupleConcat(1204)).TupleConcat(1205)).TupleConcat(1206)).TupleConcat(
            1207)).TupleConcat(1208)).TupleConcat(1209)).TupleConcat(1210)).TupleConcat(
            1211)).TupleConcat(1212)).TupleConcat(1212)).TupleConcat(1213)).TupleConcat(
            1214)).TupleConcat(1214)).TupleConcat(1214)).TupleConcat(1216)).TupleConcat(
            1217)).TupleConcat(1217)).TupleConcat(1218)).TupleConcat(1219)).TupleConcat(
            1220)).TupleConcat(1221)).TupleConcat(1222)).TupleConcat(1223)).TupleConcat(
            1223)).TupleConcat(1225)).TupleConcat(1226)).TupleConcat(1227)).TupleConcat(
            1228)).TupleConcat(1228)).TupleConcat(1229)).TupleConcat(1229)).TupleConcat(
            1230)).TupleConcat(1231)).TupleConcat(1231)).TupleConcat(1231)).TupleConcat(
            1232)).TupleConcat(1232)).TupleConcat(1232)).TupleConcat(1232)).TupleConcat(
            1232)).TupleConcat(1232)).TupleConcat(1232)).TupleConcat(1232)).TupleConcat(
            1232)).TupleConcat(1232)).TupleConcat(1232)).TupleConcat(1232)).TupleConcat(
            1232)).TupleConcat(1232)).TupleConcat(1232)).TupleConcat(1232)).TupleConcat(
            1232)).TupleConcat(1232)).TupleConcat(1232)).TupleConcat(1232)).TupleConcat(
            1232)).TupleConcat(1232)).TupleConcat(1232)).TupleConcat(1232)).TupleConcat(
            1232)).TupleConcat(1232)).TupleConcat(1232)).TupleConcat(1231)).TupleConcat(
            1231)).TupleConcat(1231)).TupleConcat(1231)).TupleConcat(1231)).TupleConcat(
            1231)).TupleConcat(1231)).TupleConcat(1230)).TupleConcat(1229)).TupleConcat(
            1229)).TupleConcat(1229)).TupleConcat(1229)).TupleConcat(1228)).TupleConcat(
            1227)).TupleConcat(1226)).TupleConcat(1225)).TupleConcat(1225)).TupleConcat(
            1224)).TupleConcat(1223)).TupleConcat(1222)).TupleConcat(1221)).TupleConcat(
            1220)).TupleConcat(1218)).TupleConcat(1216)).TupleConcat(1212)).TupleConcat(
            1209)).TupleConcat(1203)).TupleConcat(1191)).TupleConcat(1186)).TupleConcat(
            1182));

        ho_ROI_3.Dispose();
        HOperatorSet.GenRectangle1(out ho_ROI_3, 669.534, 1031.58, 852.053, 1240.65);

        ho_Zona4.Dispose();
        HOperatorSet.Difference(ho_ROI_3, ho_ROI_3_V, out ho_Zona4);
        ho_Zmred.Dispose();
        HOperatorSet.ReduceDomain(ho_Zm, ho_Zona4, out ho_Zmred);
        break;
      case 5:
        //ROI Zona 5
        ho_ROI_4_V.Dispose();
        HOperatorSet.GenRegionRuns(out ho_ROI_4_V, ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
            (new HTuple(492)).TupleConcat(493)).TupleConcat(494)).TupleConcat(495)).TupleConcat(
            496)).TupleConcat(497)).TupleConcat(498)).TupleConcat(499)).TupleConcat(
            500)).TupleConcat(501)).TupleConcat(502)).TupleConcat(503)).TupleConcat(
            504)).TupleConcat(505)).TupleConcat(506)).TupleConcat(507)).TupleConcat(
            508)).TupleConcat(509)).TupleConcat(510)).TupleConcat(511)).TupleConcat(
            512)).TupleConcat(513)).TupleConcat(514)).TupleConcat(515)).TupleConcat(
            516)).TupleConcat(517)).TupleConcat(518)).TupleConcat(519)).TupleConcat(
            520)).TupleConcat(521)).TupleConcat(522)).TupleConcat(523)).TupleConcat(
            524)).TupleConcat(525)).TupleConcat(526)).TupleConcat(527)).TupleConcat(
            528)).TupleConcat(529)).TupleConcat(530)).TupleConcat(531)).TupleConcat(
            532)).TupleConcat(533)).TupleConcat(534)).TupleConcat(535)).TupleConcat(
            536)).TupleConcat(537)).TupleConcat(538)).TupleConcat(539)).TupleConcat(
            540)).TupleConcat(541)).TupleConcat(542)).TupleConcat(543)).TupleConcat(
            544)).TupleConcat(545)).TupleConcat(546)).TupleConcat(547)).TupleConcat(
            548)).TupleConcat(549)).TupleConcat(550)).TupleConcat(551)).TupleConcat(
            552)).TupleConcat(553)).TupleConcat(554)).TupleConcat(555)).TupleConcat(
            556)).TupleConcat(557)).TupleConcat(558)).TupleConcat(559)).TupleConcat(
            560)).TupleConcat(561)).TupleConcat(562)).TupleConcat(563)).TupleConcat(
            564)).TupleConcat(565)).TupleConcat(566)).TupleConcat(567)).TupleConcat(
            568)).TupleConcat(569)).TupleConcat(570)).TupleConcat(571)).TupleConcat(
            572)).TupleConcat(573)).TupleConcat(574)).TupleConcat(575)).TupleConcat(
            576)).TupleConcat(577)).TupleConcat(578)).TupleConcat(579)).TupleConcat(
            580)).TupleConcat(581)).TupleConcat(582)).TupleConcat(583)).TupleConcat(
            584)).TupleConcat(585)).TupleConcat(586)).TupleConcat(587)).TupleConcat(
            588)).TupleConcat(589)).TupleConcat(590)).TupleConcat(591)).TupleConcat(
            592)).TupleConcat(593)).TupleConcat(594)).TupleConcat(595)).TupleConcat(
            596)).TupleConcat(597)).TupleConcat(598)).TupleConcat(599), ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
            (new HTuple(258)).TupleConcat(252)).TupleConcat(251)).TupleConcat(247)).TupleConcat(
            243)).TupleConcat(242)).TupleConcat(241)).TupleConcat(240)).TupleConcat(
            238)).TupleConcat(236)).TupleConcat(236)).TupleConcat(234)).TupleConcat(
            234)).TupleConcat(233)).TupleConcat(232)).TupleConcat(231)).TupleConcat(
            231)).TupleConcat(231)).TupleConcat(230)).TupleConcat(230)).TupleConcat(
            229)).TupleConcat(229)).TupleConcat(229)).TupleConcat(229)).TupleConcat(
            229)).TupleConcat(229)).TupleConcat(229)).TupleConcat(229)).TupleConcat(
            229)).TupleConcat(229)).TupleConcat(229)).TupleConcat(229)).TupleConcat(
            229)).TupleConcat(229)).TupleConcat(229)).TupleConcat(229)).TupleConcat(
            230)).TupleConcat(230)).TupleConcat(230)).TupleConcat(230)).TupleConcat(
            230)).TupleConcat(230)).TupleConcat(230)).TupleConcat(230)).TupleConcat(
            230)).TupleConcat(230)).TupleConcat(230)).TupleConcat(231)).TupleConcat(
            231)).TupleConcat(231)).TupleConcat(231)).TupleConcat(231)).TupleConcat(
            231)).TupleConcat(231)).TupleConcat(231)).TupleConcat(231)).TupleConcat(
            232)).TupleConcat(232)).TupleConcat(232)).TupleConcat(232)).TupleConcat(
            232)).TupleConcat(232)).TupleConcat(233)).TupleConcat(233)).TupleConcat(
            233)).TupleConcat(233)).TupleConcat(233)).TupleConcat(233)).TupleConcat(
            234)).TupleConcat(234)).TupleConcat(234)).TupleConcat(234)).TupleConcat(
            235)).TupleConcat(235)).TupleConcat(235)).TupleConcat(235)).TupleConcat(
            236)).TupleConcat(236)).TupleConcat(236)).TupleConcat(236)).TupleConcat(
            237)).TupleConcat(237)).TupleConcat(237)).TupleConcat(238)).TupleConcat(
            238)).TupleConcat(238)).TupleConcat(239)).TupleConcat(239)).TupleConcat(
            239)).TupleConcat(239)).TupleConcat(240)).TupleConcat(240)).TupleConcat(
            240)).TupleConcat(241)).TupleConcat(241)).TupleConcat(241)).TupleConcat(
            241)).TupleConcat(242)).TupleConcat(242)).TupleConcat(243)).TupleConcat(
            243)).TupleConcat(244)).TupleConcat(246)).TupleConcat(248)).TupleConcat(
            250)).TupleConcat(253)).TupleConcat(256)).TupleConcat(260), ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
            (new HTuple(271)).TupleConcat(300)).TupleConcat(306)).TupleConcat(311)).TupleConcat(
            314)).TupleConcat(321)).TupleConcat(321)).TupleConcat(323)).TupleConcat(
            325)).TupleConcat(326)).TupleConcat(328)).TupleConcat(329)).TupleConcat(
            329)).TupleConcat(330)).TupleConcat(331)).TupleConcat(332)).TupleConcat(
            332)).TupleConcat(332)).TupleConcat(333)).TupleConcat(334)).TupleConcat(
            334)).TupleConcat(335)).TupleConcat(335)).TupleConcat(335)).TupleConcat(
            335)).TupleConcat(336)).TupleConcat(336)).TupleConcat(336)).TupleConcat(
            336)).TupleConcat(336)).TupleConcat(336)).TupleConcat(336)).TupleConcat(
            336)).TupleConcat(336)).TupleConcat(336)).TupleConcat(336)).TupleConcat(
            336)).TupleConcat(336)).TupleConcat(336)).TupleConcat(336)).TupleConcat(
            336)).TupleConcat(335)).TupleConcat(335)).TupleConcat(335)).TupleConcat(
            335)).TupleConcat(334)).TupleConcat(334)).TupleConcat(333)).TupleConcat(
            333)).TupleConcat(333)).TupleConcat(332)).TupleConcat(332)).TupleConcat(
            331)).TupleConcat(331)).TupleConcat(330)).TupleConcat(329)).TupleConcat(
            329)).TupleConcat(328)).TupleConcat(327)).TupleConcat(326)).TupleConcat(
            325)).TupleConcat(324)).TupleConcat(323)).TupleConcat(322)).TupleConcat(
            321)).TupleConcat(320)).TupleConcat(319)).TupleConcat(318)).TupleConcat(
            317)).TupleConcat(316)).TupleConcat(315)).TupleConcat(315)).TupleConcat(
            313)).TupleConcat(313)).TupleConcat(312)).TupleConcat(311)).TupleConcat(
            310)).TupleConcat(309)).TupleConcat(307)).TupleConcat(306)).TupleConcat(
            306)).TupleConcat(305)).TupleConcat(305)).TupleConcat(304)).TupleConcat(
            303)).TupleConcat(302)).TupleConcat(302)).TupleConcat(301)).TupleConcat(
            300)).TupleConcat(300)).TupleConcat(300)).TupleConcat(299)).TupleConcat(
            299)).TupleConcat(299)).TupleConcat(299)).TupleConcat(298)).TupleConcat(
            297)).TupleConcat(295)).TupleConcat(294)).TupleConcat(293)).TupleConcat(
            292)).TupleConcat(290)).TupleConcat(290)).TupleConcat(287)).TupleConcat(
            286)).TupleConcat(284)).TupleConcat(281)).TupleConcat(278));
        ho_ROI_4.Dispose();
        HOperatorSet.GenRectangle1(out ho_ROI_4, 461.517, 202.065, 609.641, 367.087);
        ho_Zona5.Dispose();
        HOperatorSet.Difference(ho_ROI_4, ho_ROI_4_V, out ho_Zona5);
        ho_Zmred.Dispose();
        HOperatorSet.ReduceDomain(ho_Zm, ho_Zona5, out ho_Zmred);

        break;
      case 6:
        //ROI Zona 6


        ho_ROI_5_V.Dispose();
        HOperatorSet.GenRegionRuns(out ho_ROI_5_V, ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
            (new HTuple(486)).TupleConcat(487)).TupleConcat(488)).TupleConcat(489)).TupleConcat(
            490)).TupleConcat(491)).TupleConcat(492)).TupleConcat(493)).TupleConcat(
            494)).TupleConcat(495)).TupleConcat(496)).TupleConcat(497)).TupleConcat(
            498)).TupleConcat(499)).TupleConcat(500)).TupleConcat(501)).TupleConcat(
            502)).TupleConcat(503)).TupleConcat(504)).TupleConcat(505)).TupleConcat(
            506)).TupleConcat(507)).TupleConcat(508)).TupleConcat(509)).TupleConcat(
            510)).TupleConcat(511)).TupleConcat(512)).TupleConcat(513)).TupleConcat(
            514)).TupleConcat(515)).TupleConcat(516)).TupleConcat(517)).TupleConcat(
            518)).TupleConcat(519)).TupleConcat(520)).TupleConcat(521)).TupleConcat(
            522)).TupleConcat(523)).TupleConcat(524)).TupleConcat(525)).TupleConcat(
            526)).TupleConcat(527)).TupleConcat(528)).TupleConcat(529)).TupleConcat(
            530)).TupleConcat(531)).TupleConcat(532)).TupleConcat(533)).TupleConcat(
            534)).TupleConcat(535)).TupleConcat(536)).TupleConcat(537)).TupleConcat(
            538)).TupleConcat(539)).TupleConcat(540)).TupleConcat(541)).TupleConcat(
            542)).TupleConcat(543)).TupleConcat(544)).TupleConcat(545)).TupleConcat(
            546)).TupleConcat(547)).TupleConcat(548)).TupleConcat(549)).TupleConcat(
            550)).TupleConcat(551)).TupleConcat(552)).TupleConcat(553), ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
            (new HTuple(603)).TupleConcat(599)).TupleConcat(597)).TupleConcat(595)).TupleConcat(
            594)).TupleConcat(587)).TupleConcat(584)).TupleConcat(583)).TupleConcat(
            581)).TupleConcat(579)).TupleConcat(577)).TupleConcat(574)).TupleConcat(
            574)).TupleConcat(573)).TupleConcat(572)).TupleConcat(572)).TupleConcat(
            572)).TupleConcat(572)).TupleConcat(570)).TupleConcat(570)).TupleConcat(
            569)).TupleConcat(569)).TupleConcat(569)).TupleConcat(568)).TupleConcat(
            568)).TupleConcat(568)).TupleConcat(568)).TupleConcat(567)).TupleConcat(
            567)).TupleConcat(566)).TupleConcat(566)).TupleConcat(566)).TupleConcat(
            566)).TupleConcat(566)).TupleConcat(566)).TupleConcat(566)).TupleConcat(
            566)).TupleConcat(566)).TupleConcat(566)).TupleConcat(566)).TupleConcat(
            567)).TupleConcat(567)).TupleConcat(568)).TupleConcat(568)).TupleConcat(
            569)).TupleConcat(570)).TupleConcat(570)).TupleConcat(572)).TupleConcat(
            572)).TupleConcat(573)).TupleConcat(574)).TupleConcat(574)).TupleConcat(
            575)).TupleConcat(576)).TupleConcat(577)).TupleConcat(578)).TupleConcat(
            579)).TupleConcat(581)).TupleConcat(581)).TupleConcat(583)).TupleConcat(
            583)).TupleConcat(584)).TupleConcat(584)).TupleConcat(585)).TupleConcat(
            585)).TupleConcat(587)).TupleConcat(588)).TupleConcat(592), ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
            (new HTuple(615)).TupleConcat(624)).TupleConcat(626)).TupleConcat(628)).TupleConcat(
            630)).TupleConcat(632)).TupleConcat(633)).TupleConcat(634)).TupleConcat(
            635)).TupleConcat(636)).TupleConcat(637)).TupleConcat(637)).TupleConcat(
            638)).TupleConcat(638)).TupleConcat(639)).TupleConcat(639)).TupleConcat(
            639)).TupleConcat(639)).TupleConcat(640)).TupleConcat(641)).TupleConcat(
            642)).TupleConcat(642)).TupleConcat(643)).TupleConcat(644)).TupleConcat(
            644)).TupleConcat(644)).TupleConcat(644)).TupleConcat(644)).TupleConcat(
            644)).TupleConcat(644)).TupleConcat(644)).TupleConcat(644)).TupleConcat(
            644)).TupleConcat(644)).TupleConcat(644)).TupleConcat(644)).TupleConcat(
            644)).TupleConcat(644)).TupleConcat(644)).TupleConcat(643)).TupleConcat(
            643)).TupleConcat(643)).TupleConcat(643)).TupleConcat(643)).TupleConcat(
            642)).TupleConcat(642)).TupleConcat(641)).TupleConcat(641)).TupleConcat(
            641)).TupleConcat(640)).TupleConcat(639)).TupleConcat(639)).TupleConcat(
            639)).TupleConcat(639)).TupleConcat(639)).TupleConcat(637)).TupleConcat(
            637)).TupleConcat(637)).TupleConcat(636)).TupleConcat(635)).TupleConcat(
            635)).TupleConcat(634)).TupleConcat(633)).TupleConcat(632)).TupleConcat(
            631)).TupleConcat(626)).TupleConcat(625)).TupleConcat(616));
        ho_ROI_5.Dispose();
        HOperatorSet.GenRectangle1(out ho_ROI_5, 457.595, 519.157, 590.174, 706.961);


        ho_Zona6.Dispose();
        HOperatorSet.Difference(ho_ROI_5, ho_ROI_5_V, out ho_Zona6);
        ho_Zmred.Dispose();
        HOperatorSet.ReduceDomain(ho_Zm, ho_Zona6, out ho_Zmred);
        break;

      case 7:

        //ROI Zona 7


        ho_ROI_6_V.Dispose();
        HOperatorSet.GenRegionRuns(out ho_ROI_6_V, ((((((((((((((((((((((((((((((((((((((((((((((
            (new HTuple(493)).TupleConcat(494)).TupleConcat(495)).TupleConcat(496)).TupleConcat(
            497)).TupleConcat(498)).TupleConcat(499)).TupleConcat(500)).TupleConcat(
            501)).TupleConcat(502)).TupleConcat(503)).TupleConcat(504)).TupleConcat(
            505)).TupleConcat(506)).TupleConcat(507)).TupleConcat(508)).TupleConcat(
            509)).TupleConcat(510)).TupleConcat(511)).TupleConcat(512)).TupleConcat(
            513)).TupleConcat(514)).TupleConcat(515)).TupleConcat(516)).TupleConcat(
            517)).TupleConcat(518)).TupleConcat(519)).TupleConcat(520)).TupleConcat(
            521)).TupleConcat(522)).TupleConcat(523)).TupleConcat(524)).TupleConcat(
            525)).TupleConcat(526)).TupleConcat(527)).TupleConcat(528)).TupleConcat(
            529)).TupleConcat(530)).TupleConcat(531)).TupleConcat(532)).TupleConcat(
            533)).TupleConcat(534)).TupleConcat(535)).TupleConcat(536)).TupleConcat(
            537)).TupleConcat(538)).TupleConcat(539)).TupleConcat(540), ((((((((((((((((((((((((((((((((((((((((((((((
            (new HTuple(949)).TupleConcat(908)).TupleConcat(907)).TupleConcat(902)).TupleConcat(
            902)).TupleConcat(901)).TupleConcat(901)).TupleConcat(901)).TupleConcat(
            899)).TupleConcat(899)).TupleConcat(899)).TupleConcat(899)).TupleConcat(
            898)).TupleConcat(898)).TupleConcat(898)).TupleConcat(898)).TupleConcat(
            898)).TupleConcat(898)).TupleConcat(898)).TupleConcat(898)).TupleConcat(
            898)).TupleConcat(898)).TupleConcat(898)).TupleConcat(897)).TupleConcat(
            897)).TupleConcat(897)).TupleConcat(897)).TupleConcat(897)).TupleConcat(
            897)).TupleConcat(896)).TupleConcat(896)).TupleConcat(896)).TupleConcat(
            896)).TupleConcat(896)).TupleConcat(896)).TupleConcat(896)).TupleConcat(
            896)).TupleConcat(896)).TupleConcat(896)).TupleConcat(896)).TupleConcat(
            896)).TupleConcat(896)).TupleConcat(896)).TupleConcat(896)).TupleConcat(
            897)).TupleConcat(912)).TupleConcat(947)).TupleConcat(950), ((((((((((((((((((((((((((((((((((((((((((((((
            (new HTuple(991)).TupleConcat(996)).TupleConcat(996)).TupleConcat(999)).TupleConcat(
            1001)).TupleConcat(1006)).TupleConcat(1008)).TupleConcat(1014)).TupleConcat(
            1017)).TupleConcat(1021)).TupleConcat(1022)).TupleConcat(1023)).TupleConcat(
            1023)).TupleConcat(1024)).TupleConcat(1024)).TupleConcat(1024)).TupleConcat(
            1026)).TupleConcat(1027)).TupleConcat(1027)).TupleConcat(1027)).TupleConcat(
            1028)).TupleConcat(1028)).TupleConcat(1030)).TupleConcat(1031)).TupleConcat(
            1031)).TupleConcat(1031)).TupleConcat(1032)).TupleConcat(1033)).TupleConcat(
            1033)).TupleConcat(1033)).TupleConcat(1035)).TupleConcat(1036)).TupleConcat(
            1037)).TupleConcat(1037)).TupleConcat(1037)).TupleConcat(1037)).TupleConcat(
            1037)).TupleConcat(1037)).TupleConcat(1037)).TupleConcat(1037)).TupleConcat(
            1037)).TupleConcat(1037)).TupleConcat(1037)).TupleConcat(1037)).TupleConcat(
            1037)).TupleConcat(1037)).TupleConcat(1036)).TupleConcat(1036));

        ho_ROI_6.Dispose();
        HOperatorSet.GenRectangle1(out ho_ROI_6, 463.963, 856.122, 600.802, 1054.59);

        ho_Zona7.Dispose();
        HOperatorSet.Difference(ho_ROI_6, ho_ROI_6_V, out ho_Zona7);
        ho_Zmred.Dispose();
        HOperatorSet.ReduceDomain(ho_Zm, ho_Zona7, out ho_Zmred);
        break;

      case 8:

        //ROI Zona 8
        ho_ROI_7_V.Dispose();
        HOperatorSet.GenRegionRuns(out ho_ROI_7_V, (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
            (new HTuple(235)).TupleConcat(236)).TupleConcat(237)).TupleConcat(238)).TupleConcat(
            239)).TupleConcat(240)).TupleConcat(241)).TupleConcat(242)).TupleConcat(
            243)).TupleConcat(244)).TupleConcat(245)).TupleConcat(246)).TupleConcat(
            247)).TupleConcat(248)).TupleConcat(249)).TupleConcat(250)).TupleConcat(
            251)).TupleConcat(252)).TupleConcat(253)).TupleConcat(254)).TupleConcat(
            255)).TupleConcat(256)).TupleConcat(257)).TupleConcat(258)).TupleConcat(
            259)).TupleConcat(260)).TupleConcat(261)).TupleConcat(262)).TupleConcat(
            263)).TupleConcat(264)).TupleConcat(265)).TupleConcat(266)).TupleConcat(
            267)).TupleConcat(268)).TupleConcat(269)).TupleConcat(270)).TupleConcat(
            271)).TupleConcat(272)).TupleConcat(273)).TupleConcat(274)).TupleConcat(
            275)).TupleConcat(276)).TupleConcat(277)).TupleConcat(278)).TupleConcat(
            279)).TupleConcat(280)).TupleConcat(281)).TupleConcat(282)).TupleConcat(
            283)).TupleConcat(284)).TupleConcat(285)).TupleConcat(286)).TupleConcat(
            287)).TupleConcat(288)).TupleConcat(289)).TupleConcat(290)).TupleConcat(
            291)).TupleConcat(292)).TupleConcat(293)).TupleConcat(294)).TupleConcat(
            295)).TupleConcat(296)).TupleConcat(297)).TupleConcat(298)).TupleConcat(
            299)).TupleConcat(300)).TupleConcat(301)).TupleConcat(302)).TupleConcat(
            303)).TupleConcat(304)).TupleConcat(305)).TupleConcat(306)).TupleConcat(
            307)).TupleConcat(308)).TupleConcat(309)).TupleConcat(310)).TupleConcat(
            311)).TupleConcat(312)).TupleConcat(313)).TupleConcat(314)).TupleConcat(
            315)).TupleConcat(316)).TupleConcat(317)).TupleConcat(318)).TupleConcat(
            319)).TupleConcat(320)).TupleConcat(321)).TupleConcat(322)).TupleConcat(
            323)).TupleConcat(324)).TupleConcat(325)).TupleConcat(326)).TupleConcat(
            327)).TupleConcat(328)).TupleConcat(329)).TupleConcat(330)).TupleConcat(
            331)).TupleConcat(332)).TupleConcat(333)).TupleConcat(334)).TupleConcat(
            335)).TupleConcat(336)).TupleConcat(337)).TupleConcat(338)).TupleConcat(
            339)).TupleConcat(340)).TupleConcat(341)).TupleConcat(342)).TupleConcat(
            343)).TupleConcat(344)).TupleConcat(345)).TupleConcat(346)).TupleConcat(
            347)).TupleConcat(348)).TupleConcat(349)).TupleConcat(350)).TupleConcat(
            351)).TupleConcat(352)).TupleConcat(353)).TupleConcat(354)).TupleConcat(
            355), (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
            (new HTuple(84)).TupleConcat(84)).TupleConcat(84)).TupleConcat(84)).TupleConcat(
            84)).TupleConcat(84)).TupleConcat(84)).TupleConcat(84)).TupleConcat(84)).TupleConcat(
            84)).TupleConcat(84)).TupleConcat(84)).TupleConcat(84)).TupleConcat(84)).TupleConcat(
            84)).TupleConcat(84)).TupleConcat(86)).TupleConcat(86)).TupleConcat(85)).TupleConcat(
            88)).TupleConcat(88)).TupleConcat(90)).TupleConcat(90)).TupleConcat(92)).TupleConcat(
            93)).TupleConcat(93)).TupleConcat(94)).TupleConcat(95)).TupleConcat(96)).TupleConcat(
            98)).TupleConcat(98)).TupleConcat(99)).TupleConcat(99)).TupleConcat(100)).TupleConcat(
            102)).TupleConcat(103)).TupleConcat(104)).TupleConcat(106)).TupleConcat(
            106)).TupleConcat(107)).TupleConcat(109)).TupleConcat(110)).TupleConcat(
            110)).TupleConcat(112)).TupleConcat(112)).TupleConcat(112)).TupleConcat(
            113)).TupleConcat(114)).TupleConcat(116)).TupleConcat(116)).TupleConcat(
            118)).TupleConcat(118)).TupleConcat(120)).TupleConcat(121)).TupleConcat(
            122)).TupleConcat(123)).TupleConcat(124)).TupleConcat(125)).TupleConcat(
            127)).TupleConcat(129)).TupleConcat(130)).TupleConcat(131)).TupleConcat(
            132)).TupleConcat(133)).TupleConcat(133)).TupleConcat(135)).TupleConcat(
            136)).TupleConcat(138)).TupleConcat(140)).TupleConcat(141)).TupleConcat(
            143)).TupleConcat(144)).TupleConcat(145)).TupleConcat(146)).TupleConcat(
            148)).TupleConcat(150)).TupleConcat(152)).TupleConcat(153)).TupleConcat(
            154)).TupleConcat(155)).TupleConcat(156)).TupleConcat(158)).TupleConcat(
            160)).TupleConcat(161)).TupleConcat(164)).TupleConcat(164)).TupleConcat(
            166)).TupleConcat(167)).TupleConcat(169)).TupleConcat(169)).TupleConcat(
            170)).TupleConcat(171)).TupleConcat(174)).TupleConcat(175)).TupleConcat(
            176)).TupleConcat(177)).TupleConcat(178)).TupleConcat(180)).TupleConcat(
            180)).TupleConcat(181)).TupleConcat(183)).TupleConcat(183)).TupleConcat(
            185)).TupleConcat(187)).TupleConcat(187)).TupleConcat(190)).TupleConcat(
            190)).TupleConcat(193)).TupleConcat(193)).TupleConcat(195)).TupleConcat(
            195)).TupleConcat(197)).TupleConcat(198)).TupleConcat(201)).TupleConcat(
            206)).TupleConcat(207)).TupleConcat(215)).TupleConcat(219)).TupleConcat(
            223)).TupleConcat(225)).TupleConcat(229), (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
            (new HTuple(93)).TupleConcat(96)).TupleConcat(98)).TupleConcat(101)).TupleConcat(
            110)).TupleConcat(113)).TupleConcat(115)).TupleConcat(119)).TupleConcat(
            121)).TupleConcat(124)).TupleConcat(126)).TupleConcat(130)).TupleConcat(
            132)).TupleConcat(136)).TupleConcat(140)).TupleConcat(143)).TupleConcat(
            146)).TupleConcat(150)).TupleConcat(153)).TupleConcat(155)).TupleConcat(
            159)).TupleConcat(163)).TupleConcat(167)).TupleConcat(171)).TupleConcat(
            174)).TupleConcat(174)).TupleConcat(179)).TupleConcat(181)).TupleConcat(
            182)).TupleConcat(184)).TupleConcat(186)).TupleConcat(188)).TupleConcat(
            188)).TupleConcat(190)).TupleConcat(192)).TupleConcat(194)).TupleConcat(
            195)).TupleConcat(197)).TupleConcat(199)).TupleConcat(199)).TupleConcat(
            202)).TupleConcat(203)).TupleConcat(205)).TupleConcat(206)).TupleConcat(
            208)).TupleConcat(210)).TupleConcat(211)).TupleConcat(214)).TupleConcat(
            215)).TupleConcat(218)).TupleConcat(219)).TupleConcat(220)).TupleConcat(
            221)).TupleConcat(222)).TupleConcat(223)).TupleConcat(224)).TupleConcat(
            226)).TupleConcat(226)).TupleConcat(228)).TupleConcat(229)).TupleConcat(
            230)).TupleConcat(231)).TupleConcat(232)).TupleConcat(232)).TupleConcat(
            234)).TupleConcat(234)).TupleConcat(235)).TupleConcat(235)).TupleConcat(
            237)).TupleConcat(238)).TupleConcat(238)).TupleConcat(239)).TupleConcat(
            240)).TupleConcat(241)).TupleConcat(242)).TupleConcat(243)).TupleConcat(
            244)).TupleConcat(244)).TupleConcat(244)).TupleConcat(245)).TupleConcat(
            246)).TupleConcat(246)).TupleConcat(247)).TupleConcat(248)).TupleConcat(
            248)).TupleConcat(249)).TupleConcat(250)).TupleConcat(250)).TupleConcat(
            250)).TupleConcat(250)).TupleConcat(250)).TupleConcat(250)).TupleConcat(
            250)).TupleConcat(250)).TupleConcat(250)).TupleConcat(250)).TupleConcat(
            250)).TupleConcat(250)).TupleConcat(250)).TupleConcat(250)).TupleConcat(
            250)).TupleConcat(250)).TupleConcat(250)).TupleConcat(250)).TupleConcat(
            250)).TupleConcat(250)).TupleConcat(250)).TupleConcat(250)).TupleConcat(
            250)).TupleConcat(250)).TupleConcat(250)).TupleConcat(249)).TupleConcat(
            249)).TupleConcat(249)).TupleConcat(248)).TupleConcat(248)).TupleConcat(
            246)).TupleConcat(246)).TupleConcat(244)).TupleConcat(243)).TupleConcat(
            239));
        ho_ROI_7.Dispose();
        HOperatorSet.GenRectangle1(out ho_ROI_7, 166.582, 70.0958, 381.295, 282.423);

        ho_Zona8.Dispose();
        HOperatorSet.Difference(ho_ROI_7, ho_ROI_7_V, out ho_Zona8);
        ho_Zmred.Dispose();
        HOperatorSet.ReduceDomain(ho_Zm, ho_Zona8, out ho_Zmred);
        break;


      case 9:
        //ROI Zona 9
        ho_ROI_8_V.Dispose();
        HOperatorSet.GenRegionRuns(out ho_ROI_8_V, (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
            (new HTuple(224)).TupleConcat(225)).TupleConcat(226)).TupleConcat(227)).TupleConcat(
            228)).TupleConcat(229)).TupleConcat(230)).TupleConcat(231)).TupleConcat(
            232)).TupleConcat(233)).TupleConcat(234)).TupleConcat(235)).TupleConcat(
            236)).TupleConcat(237)).TupleConcat(238)).TupleConcat(239)).TupleConcat(
            240)).TupleConcat(241)).TupleConcat(242)).TupleConcat(243)).TupleConcat(
            244)).TupleConcat(245)).TupleConcat(246)).TupleConcat(247)).TupleConcat(
            248)).TupleConcat(249)).TupleConcat(250)).TupleConcat(251)).TupleConcat(
            252)).TupleConcat(253)).TupleConcat(254)).TupleConcat(255)).TupleConcat(
            256)).TupleConcat(257)).TupleConcat(258)).TupleConcat(259)).TupleConcat(
            260)).TupleConcat(261)).TupleConcat(262)).TupleConcat(263)).TupleConcat(
            264)).TupleConcat(265)).TupleConcat(266)).TupleConcat(267)).TupleConcat(
            268)).TupleConcat(269)).TupleConcat(270)).TupleConcat(271)).TupleConcat(
            272)).TupleConcat(273)).TupleConcat(274)).TupleConcat(275)).TupleConcat(
            276)).TupleConcat(277)).TupleConcat(278)).TupleConcat(279)).TupleConcat(
            280)).TupleConcat(281)).TupleConcat(282)).TupleConcat(283)).TupleConcat(
            284)).TupleConcat(285)).TupleConcat(286)).TupleConcat(287)).TupleConcat(
            288)).TupleConcat(289)).TupleConcat(290)).TupleConcat(291)).TupleConcat(
            292)).TupleConcat(293)).TupleConcat(294)).TupleConcat(295)).TupleConcat(
            296)).TupleConcat(297)).TupleConcat(298)).TupleConcat(299)).TupleConcat(
            300)).TupleConcat(301)).TupleConcat(302)).TupleConcat(303)).TupleConcat(
            304)).TupleConcat(305)).TupleConcat(306)).TupleConcat(307)).TupleConcat(
            308)).TupleConcat(309)).TupleConcat(310)).TupleConcat(311)).TupleConcat(
            312)).TupleConcat(313)).TupleConcat(314)).TupleConcat(315)).TupleConcat(
            316)).TupleConcat(317)).TupleConcat(318)).TupleConcat(319)).TupleConcat(
            320)).TupleConcat(321)).TupleConcat(322)).TupleConcat(323)).TupleConcat(
            324)).TupleConcat(325)).TupleConcat(326)).TupleConcat(327)).TupleConcat(
            328)).TupleConcat(329)).TupleConcat(330)).TupleConcat(331)).TupleConcat(
            332)).TupleConcat(333)).TupleConcat(334), (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
            (new HTuple(400)).TupleConcat(399)).TupleConcat(398)).TupleConcat(398)).TupleConcat(
            397)).TupleConcat(397)).TupleConcat(397)).TupleConcat(397)).TupleConcat(
            397)).TupleConcat(397)).TupleConcat(397)).TupleConcat(397)).TupleConcat(
            397)).TupleConcat(397)).TupleConcat(397)).TupleConcat(397)).TupleConcat(
            397)).TupleConcat(397)).TupleConcat(398)).TupleConcat(398)).TupleConcat(
            399)).TupleConcat(399)).TupleConcat(399)).TupleConcat(399)).TupleConcat(
            400)).TupleConcat(401)).TupleConcat(401)).TupleConcat(401)).TupleConcat(
            402)).TupleConcat(402)).TupleConcat(403)).TupleConcat(403)).TupleConcat(
            403)).TupleConcat(403)).TupleConcat(404)).TupleConcat(405)).TupleConcat(
            405)).TupleConcat(405)).TupleConcat(406)).TupleConcat(407)).TupleConcat(
            407)).TupleConcat(407)).TupleConcat(407)).TupleConcat(407)).TupleConcat(
            408)).TupleConcat(408)).TupleConcat(408)).TupleConcat(409)).TupleConcat(
            410)).TupleConcat(410)).TupleConcat(410)).TupleConcat(411)).TupleConcat(
            411)).TupleConcat(412)).TupleConcat(412)).TupleConcat(412)).TupleConcat(
            412)).TupleConcat(412)).TupleConcat(414)).TupleConcat(414)).TupleConcat(
            414)).TupleConcat(415)).TupleConcat(415)).TupleConcat(416)).TupleConcat(
            416)).TupleConcat(417)).TupleConcat(417)).TupleConcat(418)).TupleConcat(
            418)).TupleConcat(419)).TupleConcat(419)).TupleConcat(420)).TupleConcat(
            421)).TupleConcat(421)).TupleConcat(422)).TupleConcat(424)).TupleConcat(
            425)).TupleConcat(425)).TupleConcat(427)).TupleConcat(427)).TupleConcat(
            428)).TupleConcat(429)).TupleConcat(430)).TupleConcat(431)).TupleConcat(
            431)).TupleConcat(432)).TupleConcat(432)).TupleConcat(433)).TupleConcat(
            434)).TupleConcat(434)).TupleConcat(435)).TupleConcat(436)).TupleConcat(
            438)).TupleConcat(440)).TupleConcat(441)).TupleConcat(442)).TupleConcat(
            443)).TupleConcat(444)).TupleConcat(446)).TupleConcat(446)).TupleConcat(
            448)).TupleConcat(449)).TupleConcat(451)).TupleConcat(451)).TupleConcat(
            453)).TupleConcat(455)).TupleConcat(456)).TupleConcat(459)).TupleConcat(
            460)).TupleConcat(462)).TupleConcat(464), (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
            (new HTuple(408)).TupleConcat(408)).TupleConcat(411)).TupleConcat(411)).TupleConcat(
            413)).TupleConcat(414)).TupleConcat(415)).TupleConcat(417)).TupleConcat(
            418)).TupleConcat(421)).TupleConcat(422)).TupleConcat(423)).TupleConcat(
            425)).TupleConcat(428)).TupleConcat(430)).TupleConcat(432)).TupleConcat(
            432)).TupleConcat(433)).TupleConcat(434)).TupleConcat(436)).TupleConcat(
            437)).TupleConcat(437)).TupleConcat(438)).TupleConcat(439)).TupleConcat(
            439)).TupleConcat(440)).TupleConcat(441)).TupleConcat(442)).TupleConcat(
            443)).TupleConcat(444)).TupleConcat(445)).TupleConcat(445)).TupleConcat(
            445)).TupleConcat(447)).TupleConcat(448)).TupleConcat(448)).TupleConcat(
            448)).TupleConcat(449)).TupleConcat(450)).TupleConcat(451)).TupleConcat(
            452)).TupleConcat(452)).TupleConcat(453)).TupleConcat(454)).TupleConcat(
            454)).TupleConcat(454)).TupleConcat(456)).TupleConcat(456)).TupleConcat(
            456)).TupleConcat(457)).TupleConcat(458)).TupleConcat(458)).TupleConcat(
            459)).TupleConcat(459)).TupleConcat(459)).TupleConcat(461)).TupleConcat(
            461)).TupleConcat(462)).TupleConcat(463)).TupleConcat(464)).TupleConcat(
            465)).TupleConcat(465)).TupleConcat(466)).TupleConcat(467)).TupleConcat(
            468)).TupleConcat(468)).TupleConcat(469)).TupleConcat(470)).TupleConcat(
            470)).TupleConcat(471)).TupleConcat(471)).TupleConcat(472)).TupleConcat(
            473)).TupleConcat(473)).TupleConcat(474)).TupleConcat(474)).TupleConcat(
            476)).TupleConcat(476)).TupleConcat(477)).TupleConcat(478)).TupleConcat(
            478)).TupleConcat(478)).TupleConcat(479)).TupleConcat(479)).TupleConcat(
            479)).TupleConcat(479)).TupleConcat(479)).TupleConcat(480)).TupleConcat(
            480)).TupleConcat(481)).TupleConcat(481)).TupleConcat(481)).TupleConcat(
            481)).TupleConcat(481)).TupleConcat(481)).TupleConcat(481)).TupleConcat(
            481)).TupleConcat(481)).TupleConcat(481)).TupleConcat(481)).TupleConcat(
            480)).TupleConcat(480)).TupleConcat(480)).TupleConcat(480)).TupleConcat(
            479)).TupleConcat(479)).TupleConcat(479)).TupleConcat(478)).TupleConcat(
            478)).TupleConcat(476)).TupleConcat(475));
        ho_ROI_8.Dispose();
        HOperatorSet.GenRectangle1(out ho_ROI_8, 188.947, 368.633, 365.503, 547.401);



        ho_Zona9.Dispose();
        HOperatorSet.Difference(ho_ROI_8, ho_ROI_8_V, out ho_Zona9);
        ho_Zmred.Dispose();
        HOperatorSet.ReduceDomain(ho_Zm, ho_Zona9, out ho_Zmred);
        break;

      case 10:
        //ROI Zona 10


        ho_ROI_9_V.Dispose();
        HOperatorSet.GenRegionRuns(out ho_ROI_9_V, (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
            (new HTuple(210)).TupleConcat(211)).TupleConcat(212)).TupleConcat(213)).TupleConcat(
            214)).TupleConcat(215)).TupleConcat(216)).TupleConcat(217)).TupleConcat(
            218)).TupleConcat(219)).TupleConcat(220)).TupleConcat(221)).TupleConcat(
            222)).TupleConcat(223)).TupleConcat(224)).TupleConcat(225)).TupleConcat(
            226)).TupleConcat(227)).TupleConcat(228)).TupleConcat(229)).TupleConcat(
            230)).TupleConcat(231)).TupleConcat(232)).TupleConcat(233)).TupleConcat(
            234)).TupleConcat(235)).TupleConcat(236)).TupleConcat(237)).TupleConcat(
            238)).TupleConcat(239)).TupleConcat(240)).TupleConcat(241)).TupleConcat(
            242)).TupleConcat(243)).TupleConcat(244)).TupleConcat(245)).TupleConcat(
            246)).TupleConcat(247)).TupleConcat(248)).TupleConcat(249)).TupleConcat(
            250)).TupleConcat(251)).TupleConcat(252)).TupleConcat(253)).TupleConcat(
            254)).TupleConcat(255)).TupleConcat(256)).TupleConcat(257)).TupleConcat(
            258)).TupleConcat(259)).TupleConcat(260)).TupleConcat(261)).TupleConcat(
            262)).TupleConcat(263)).TupleConcat(264)).TupleConcat(265)).TupleConcat(
            266)).TupleConcat(267)).TupleConcat(268)).TupleConcat(269)).TupleConcat(
            270)).TupleConcat(271)).TupleConcat(272)).TupleConcat(273)).TupleConcat(
            274)).TupleConcat(275)).TupleConcat(276)).TupleConcat(277)).TupleConcat(
            278)).TupleConcat(279)).TupleConcat(280)).TupleConcat(281)).TupleConcat(
            282)).TupleConcat(283)).TupleConcat(284)).TupleConcat(285)).TupleConcat(
            286)).TupleConcat(287)).TupleConcat(288)).TupleConcat(289)).TupleConcat(
            290)).TupleConcat(291)).TupleConcat(292)).TupleConcat(293)).TupleConcat(
            294)).TupleConcat(295)).TupleConcat(296)).TupleConcat(297)).TupleConcat(
            298)).TupleConcat(299)).TupleConcat(300)).TupleConcat(301)).TupleConcat(
            302)).TupleConcat(303)).TupleConcat(304)).TupleConcat(305)).TupleConcat(
            306)).TupleConcat(307)).TupleConcat(308)).TupleConcat(309)).TupleConcat(
            310)).TupleConcat(311)).TupleConcat(312)).TupleConcat(313)).TupleConcat(
            314)).TupleConcat(315)).TupleConcat(316)).TupleConcat(317)).TupleConcat(
            318)).TupleConcat(319)).TupleConcat(320)).TupleConcat(321)).TupleConcat(
            322)).TupleConcat(323)).TupleConcat(324)).TupleConcat(325)).TupleConcat(
            326)).TupleConcat(327)).TupleConcat(328)).TupleConcat(329)).TupleConcat(
            330)).TupleConcat(331)).TupleConcat(332)).TupleConcat(333)).TupleConcat(
            334)).TupleConcat(335)).TupleConcat(336)).TupleConcat(337)).TupleConcat(
            338)).TupleConcat(339)).TupleConcat(340)).TupleConcat(341)).TupleConcat(
            342), (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
            (new HTuple(825)).TupleConcat(822)).TupleConcat(820)).TupleConcat(817)).TupleConcat(
            812)).TupleConcat(809)).TupleConcat(807)).TupleConcat(806)).TupleConcat(
            803)).TupleConcat(801)).TupleConcat(800)).TupleConcat(798)).TupleConcat(
            797)).TupleConcat(796)).TupleConcat(795)).TupleConcat(794)).TupleConcat(
            793)).TupleConcat(792)).TupleConcat(792)).TupleConcat(792)).TupleConcat(
            792)).TupleConcat(792)).TupleConcat(790)).TupleConcat(789)).TupleConcat(
            789)).TupleConcat(788)).TupleConcat(788)).TupleConcat(787)).TupleConcat(
            786)).TupleConcat(785)).TupleConcat(784)).TupleConcat(784)).TupleConcat(
            783)).TupleConcat(782)).TupleConcat(781)).TupleConcat(780)).TupleConcat(
            780)).TupleConcat(780)).TupleConcat(780)).TupleConcat(780)).TupleConcat(
            779)).TupleConcat(779)).TupleConcat(778)).TupleConcat(776)).TupleConcat(
            776)).TupleConcat(774)).TupleConcat(774)).TupleConcat(774)).TupleConcat(
            774)).TupleConcat(773)).TupleConcat(772)).TupleConcat(771)).TupleConcat(
            771)).TupleConcat(771)).TupleConcat(771)).TupleConcat(771)).TupleConcat(
            771)).TupleConcat(771)).TupleConcat(771)).TupleConcat(771)).TupleConcat(
            771)).TupleConcat(771)).TupleConcat(771)).TupleConcat(770)).TupleConcat(
            770)).TupleConcat(770)).TupleConcat(770)).TupleConcat(770)).TupleConcat(
            770)).TupleConcat(770)).TupleConcat(770)).TupleConcat(769)).TupleConcat(
            769)).TupleConcat(769)).TupleConcat(769)).TupleConcat(769)).TupleConcat(
            768)).TupleConcat(768)).TupleConcat(767)).TupleConcat(767)).TupleConcat(
            767)).TupleConcat(767)).TupleConcat(766)).TupleConcat(766)).TupleConcat(
            766)).TupleConcat(766)).TupleConcat(766)).TupleConcat(766)).TupleConcat(
            766)).TupleConcat(766)).TupleConcat(766)).TupleConcat(766)).TupleConcat(
            766)).TupleConcat(766)).TupleConcat(765)).TupleConcat(765)).TupleConcat(
            765)).TupleConcat(764)).TupleConcat(760)).TupleConcat(759)).TupleConcat(
            758)).TupleConcat(756)).TupleConcat(755)).TupleConcat(753)).TupleConcat(
            753)).TupleConcat(753)).TupleConcat(752)).TupleConcat(751)).TupleConcat(
            751)).TupleConcat(751)).TupleConcat(749)).TupleConcat(748)).TupleConcat(
            748)).TupleConcat(748)).TupleConcat(748)).TupleConcat(747)).TupleConcat(
            746)).TupleConcat(745)).TupleConcat(745)).TupleConcat(744)).TupleConcat(
            743)).TupleConcat(743)).TupleConcat(737)).TupleConcat(739)).TupleConcat(
            740)).TupleConcat(743)).TupleConcat(744)).TupleConcat(744)).TupleConcat(
            744)).TupleConcat(748)).TupleConcat(749)).TupleConcat(749)).TupleConcat(
            753), (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
            (new HTuple(860)).TupleConcat(862)).TupleConcat(863)).TupleConcat(864)).TupleConcat(
            865)).TupleConcat(866)).TupleConcat(866)).TupleConcat(869)).TupleConcat(
            870)).TupleConcat(871)).TupleConcat(871)).TupleConcat(871)).TupleConcat(
            872)).TupleConcat(873)).TupleConcat(873)).TupleConcat(873)).TupleConcat(
            873)).TupleConcat(873)).TupleConcat(873)).TupleConcat(873)).TupleConcat(
            873)).TupleConcat(873)).TupleConcat(872)).TupleConcat(872)).TupleConcat(
            872)).TupleConcat(871)).TupleConcat(871)).TupleConcat(870)).TupleConcat(
            870)).TupleConcat(869)).TupleConcat(869)).TupleConcat(869)).TupleConcat(
            869)).TupleConcat(868)).TupleConcat(868)).TupleConcat(867)).TupleConcat(
            866)).TupleConcat(865)).TupleConcat(865)).TupleConcat(865)).TupleConcat(
            864)).TupleConcat(864)).TupleConcat(863)).TupleConcat(862)).TupleConcat(
            862)).TupleConcat(860)).TupleConcat(859)).TupleConcat(859)).TupleConcat(
            857)).TupleConcat(856)).TupleConcat(856)).TupleConcat(855)).TupleConcat(
            854)).TupleConcat(853)).TupleConcat(851)).TupleConcat(850)).TupleConcat(
            850)).TupleConcat(849)).TupleConcat(848)).TupleConcat(846)).TupleConcat(
            846)).TupleConcat(845)).TupleConcat(844)).TupleConcat(844)).TupleConcat(
            844)).TupleConcat(844)).TupleConcat(842)).TupleConcat(842)).TupleConcat(
            842)).TupleConcat(842)).TupleConcat(841)).TupleConcat(841)).TupleConcat(
            841)).TupleConcat(841)).TupleConcat(841)).TupleConcat(840)).TupleConcat(
            839)).TupleConcat(838)).TupleConcat(837)).TupleConcat(837)).TupleConcat(
            837)).TupleConcat(836)).TupleConcat(836)).TupleConcat(835)).TupleConcat(
            834)).TupleConcat(833)).TupleConcat(833)).TupleConcat(832)).TupleConcat(
            832)).TupleConcat(830)).TupleConcat(829)).TupleConcat(828)).TupleConcat(
            828)).TupleConcat(828)).TupleConcat(828)).TupleConcat(827)).TupleConcat(
            827)).TupleConcat(825)).TupleConcat(824)).TupleConcat(823)).TupleConcat(
            823)).TupleConcat(821)).TupleConcat(819)).TupleConcat(819)).TupleConcat(
            818)).TupleConcat(818)).TupleConcat(815)).TupleConcat(814)).TupleConcat(
            814)).TupleConcat(813)).TupleConcat(812)).TupleConcat(811)).TupleConcat(
            811)).TupleConcat(810)).TupleConcat(810)).TupleConcat(809)).TupleConcat(
            808)).TupleConcat(806)).TupleConcat(806)).TupleConcat(805)).TupleConcat(
            805)).TupleConcat(804)).TupleConcat(802)).TupleConcat(802)).TupleConcat(
            801)).TupleConcat(799)).TupleConcat(798)).TupleConcat(797)).TupleConcat(
            795)).TupleConcat(792)).TupleConcat(788)).TupleConcat(787)).TupleConcat(
            783));


        ho_ROI_9.Dispose();
        HOperatorSet.GenRectangle1(out ho_ROI_9, 199.09, 696.446, 374.657, 880.735);


        ho_Zona10.Dispose();
        HOperatorSet.Difference(ho_ROI_9, ho_ROI_9_V, out ho_Zona10);
        ho_Zmred.Dispose();
        HOperatorSet.ReduceDomain(ho_Zm, ho_Zona10, out ho_Zmred);
        break;

      case 11:
        //ROI Zona 11
        ho_ROI_10_V.Dispose();
        HOperatorSet.GenRegionRuns(out ho_ROI_10_V, (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
            (new HTuple(241)).TupleConcat(242)).TupleConcat(243)).TupleConcat(244)).TupleConcat(
            245)).TupleConcat(246)).TupleConcat(247)).TupleConcat(248)).TupleConcat(
            249)).TupleConcat(250)).TupleConcat(251)).TupleConcat(252)).TupleConcat(
            253)).TupleConcat(254)).TupleConcat(255)).TupleConcat(256)).TupleConcat(
            257)).TupleConcat(258)).TupleConcat(259)).TupleConcat(260)).TupleConcat(
            261)).TupleConcat(262)).TupleConcat(263)).TupleConcat(264)).TupleConcat(
            265)).TupleConcat(266)).TupleConcat(267)).TupleConcat(268)).TupleConcat(
            269)).TupleConcat(270)).TupleConcat(271)).TupleConcat(272)).TupleConcat(
            273)).TupleConcat(274)).TupleConcat(275)).TupleConcat(276)).TupleConcat(
            277)).TupleConcat(278)).TupleConcat(279)).TupleConcat(280)).TupleConcat(
            281)).TupleConcat(282)).TupleConcat(283)).TupleConcat(284)).TupleConcat(
            285)).TupleConcat(286)).TupleConcat(287)).TupleConcat(288)).TupleConcat(
            289)).TupleConcat(290)).TupleConcat(291)).TupleConcat(292)).TupleConcat(
            293)).TupleConcat(294)).TupleConcat(295)).TupleConcat(296)).TupleConcat(
            297)).TupleConcat(298)).TupleConcat(299)).TupleConcat(300)).TupleConcat(
            301)).TupleConcat(302)).TupleConcat(303)).TupleConcat(304)).TupleConcat(
            305)).TupleConcat(306)).TupleConcat(307)).TupleConcat(308)).TupleConcat(
            309)).TupleConcat(310)).TupleConcat(311)).TupleConcat(312)).TupleConcat(
            313)).TupleConcat(314)).TupleConcat(315)).TupleConcat(316)).TupleConcat(
            317)).TupleConcat(318)).TupleConcat(319)).TupleConcat(320)).TupleConcat(
            321)).TupleConcat(322)).TupleConcat(323)).TupleConcat(324)).TupleConcat(
            325)).TupleConcat(326)).TupleConcat(327)).TupleConcat(328)).TupleConcat(
            329)).TupleConcat(330)).TupleConcat(331)).TupleConcat(332)).TupleConcat(
            333)).TupleConcat(334)).TupleConcat(335)).TupleConcat(336)).TupleConcat(
            337)).TupleConcat(338)).TupleConcat(339), (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
            (new HTuple(1230)).TupleConcat(1228)).TupleConcat(1226)).TupleConcat(
            1225)).TupleConcat(1220)).TupleConcat(1217)).TupleConcat(1215)).TupleConcat(
            1210)).TupleConcat(1207)).TupleConcat(1185)).TupleConcat(1182)).TupleConcat(
            1177)).TupleConcat(1172)).TupleConcat(1168)).TupleConcat(1165)).TupleConcat(
            1158)).TupleConcat(1153)).TupleConcat(1149)).TupleConcat(1146)).TupleConcat(
            1144)).TupleConcat(1141)).TupleConcat(1138)).TupleConcat(1134)).TupleConcat(
            1132)).TupleConcat(1130)).TupleConcat(1127)).TupleConcat(1123)).TupleConcat(
            1121)).TupleConcat(1119)).TupleConcat(1115)).TupleConcat(1114)).TupleConcat(
            1111)).TupleConcat(1110)).TupleConcat(1106)).TupleConcat(1105)).TupleConcat(
            1102)).TupleConcat(1099)).TupleConcat(1093)).TupleConcat(1091)).TupleConcat(
            1090)).TupleConcat(1086)).TupleConcat(1084)).TupleConcat(1082)).TupleConcat(
            1079)).TupleConcat(1079)).TupleConcat(1076)).TupleConcat(1073)).TupleConcat(
            1072)).TupleConcat(1072)).TupleConcat(1072)).TupleConcat(1072)).TupleConcat(
            1072)).TupleConcat(1072)).TupleConcat(1072)).TupleConcat(1072)).TupleConcat(
            1072)).TupleConcat(1071)).TupleConcat(1071)).TupleConcat(1071)).TupleConcat(
            1071)).TupleConcat(1070)).TupleConcat(1070)).TupleConcat(1070)).TupleConcat(
            1070)).TupleConcat(1070)).TupleConcat(1070)).TupleConcat(1070)).TupleConcat(
            1070)).TupleConcat(1070)).TupleConcat(1070)).TupleConcat(1069)).TupleConcat(
            1069)).TupleConcat(1069)).TupleConcat(1069)).TupleConcat(1069)).TupleConcat(
            1069)).TupleConcat(1069)).TupleConcat(1069)).TupleConcat(1069)).TupleConcat(
            1069)).TupleConcat(1070)).TupleConcat(1070)).TupleConcat(1070)).TupleConcat(
            1071)).TupleConcat(1071)).TupleConcat(1071)).TupleConcat(1071)).TupleConcat(
            1072)).TupleConcat(1072)).TupleConcat(1073)).TupleConcat(1075)).TupleConcat(
            1077)).TupleConcat(1078)).TupleConcat(1080)).TupleConcat(1080)).TupleConcat(
            1081)).TupleConcat(1082)).TupleConcat(1082)).TupleConcat(1083), (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
            (new HTuple(1237)).TupleConcat(1237)).TupleConcat(1238)).TupleConcat(
            1238)).TupleConcat(1239)).TupleConcat(1239)).TupleConcat(1240)).TupleConcat(
            1240)).TupleConcat(1241)).TupleConcat(1242)).TupleConcat(1242)).TupleConcat(
            1242)).TupleConcat(1243)).TupleConcat(1243)).TupleConcat(1244)).TupleConcat(
            1244)).TupleConcat(1244)).TupleConcat(1246)).TupleConcat(1246)).TupleConcat(
            1247)).TupleConcat(1247)).TupleConcat(1248)).TupleConcat(1248)).TupleConcat(
            1248)).TupleConcat(1248)).TupleConcat(1248)).TupleConcat(1248)).TupleConcat(
            1250)).TupleConcat(1250)).TupleConcat(1250)).TupleConcat(1250)).TupleConcat(
            1251)).TupleConcat(1252)).TupleConcat(1252)).TupleConcat(1253)).TupleConcat(
            1253)).TupleConcat(1254)).TupleConcat(1254)).TupleConcat(1254)).TupleConcat(
            1254)).TupleConcat(1254)).TupleConcat(1254)).TupleConcat(1254)).TupleConcat(
            1254)).TupleConcat(1254)).TupleConcat(1253)).TupleConcat(1253)).TupleConcat(
            1252)).TupleConcat(1251)).TupleConcat(1249)).TupleConcat(1248)).TupleConcat(
            1247)).TupleConcat(1243)).TupleConcat(1242)).TupleConcat(1240)).TupleConcat(
            1237)).TupleConcat(1235)).TupleConcat(1230)).TupleConcat(1228)).TupleConcat(
            1224)).TupleConcat(1222)).TupleConcat(1220)).TupleConcat(1218)).TupleConcat(
            1217)).TupleConcat(1216)).TupleConcat(1212)).TupleConcat(1208)).TupleConcat(
            1204)).TupleConcat(1202)).TupleConcat(1199)).TupleConcat(1195)).TupleConcat(
            1193)).TupleConcat(1191)).TupleConcat(1186)).TupleConcat(1181)).TupleConcat(
            1179)).TupleConcat(1175)).TupleConcat(1173)).TupleConcat(1171)).TupleConcat(
            1167)).TupleConcat(1164)).TupleConcat(1160)).TupleConcat(1156)).TupleConcat(
            1148)).TupleConcat(1145)).TupleConcat(1140)).TupleConcat(1135)).TupleConcat(
            1132)).TupleConcat(1130)).TupleConcat(1128)).TupleConcat(1124)).TupleConcat(
            1119)).TupleConcat(1115)).TupleConcat(1111)).TupleConcat(1108)).TupleConcat(
            1104)).TupleConcat(1102)).TupleConcat(1098)).TupleConcat(1085));
        ho_ROI_10.Dispose();
        HOperatorSet.GenRectangle1(out ho_ROI_10, 188.517, 1041.07, 399.55, 1276.33);


        ho_Zona11.Dispose();
        HOperatorSet.Difference(ho_ROI_10, ho_ROI_10_V, out ho_Zona11);
        ho_Zmred.Dispose();
        HOperatorSet.ReduceDomain(ho_Zm, ho_Zona11, out ho_Zmred);
        break;

      }
      ho_ROI_0_V.Dispose();
      ho_ROI_0.Dispose();
      ho_Zona1.Dispose();
      ho_ROI_1_V.Dispose();
      ho_ROI_1.Dispose();
      ho_Zona2.Dispose();
      ho_ROI_2_V.Dispose();
      ho_ROI_2.Dispose();
      ho_Zona3.Dispose();
      ho_ROI_3_V.Dispose();
      ho_ROI_3.Dispose();
      ho_Zona4.Dispose();
      ho_ROI_4_V.Dispose();
      ho_ROI_4.Dispose();
      ho_Zona5.Dispose();
      ho_ROI_5_V.Dispose();
      ho_ROI_5.Dispose();
      ho_Zona6.Dispose();
      ho_ROI_6_V.Dispose();
      ho_ROI_6.Dispose();
      ho_Zona7.Dispose();
      ho_ROI_7_V.Dispose();
      ho_ROI_7.Dispose();
      ho_Zona8.Dispose();
      ho_ROI_8_V.Dispose();
      ho_ROI_8.Dispose();
      ho_Zona9.Dispose();
      ho_ROI_9_V.Dispose();
      ho_ROI_9.Dispose();
      ho_Zona10.Dispose();
      ho_ROI_10_V.Dispose();
      ho_ROI_10.Dispose();
      ho_Zona11.Dispose();


      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_ROI_0_V.Dispose();
      ho_ROI_0.Dispose();
      ho_Zona1.Dispose();
      ho_ROI_1_V.Dispose();
      ho_ROI_1.Dispose();
      ho_Zona2.Dispose();
      ho_ROI_2_V.Dispose();
      ho_ROI_2.Dispose();
      ho_Zona3.Dispose();
      ho_ROI_3_V.Dispose();
      ho_ROI_3.Dispose();
      ho_Zona4.Dispose();
      ho_ROI_4_V.Dispose();
      ho_ROI_4.Dispose();
      ho_Zona5.Dispose();
      ho_ROI_5_V.Dispose();
      ho_ROI_5.Dispose();
      ho_Zona6.Dispose();
      ho_ROI_6_V.Dispose();
      ho_ROI_6.Dispose();
      ho_Zona7.Dispose();
      ho_ROI_7_V.Dispose();
      ho_ROI_7.Dispose();
      ho_Zona8.Dispose();
      ho_ROI_8_V.Dispose();
      ho_ROI_8.Dispose();
      ho_Zona9.Dispose();
      ho_ROI_9_V.Dispose();
      ho_ROI_9.Dispose();
      ho_Zona10.Dispose();
      ho_ROI_10_V.Dispose();
      ho_ROI_10.Dispose();
      ho_Zona11.Dispose();


      throw HDevExpDefaultException;
    }
  }

  public void Histagram_Filter (HObject ho_HeightMap, HObject ho_X, HObject ho_Y, 
      HObject ho_Z, out HObject ho_Entidad, out HTuple hv_Estado_Funcion)
  {



    // Local iconic variables 

    HObject ho_Region=null, ho_HeightMap_Scalada=null;
    HObject ho_HeightMap_Region=null;

    // Local control variables 

    HTuple hv_UmbralMaxThr = new HTuple(), hv_escala = new HTuple();
    HTuple hv_Histo = new HTuple(), hv_BinSize = new HTuple();
    HTuple hv_Sum_Histo = new HTuple(), hv_Mascara = new HTuple();
    HTuple hv_Vector_Distribucion = new HTuple(), hv_init_vector = new HTuple();
    HTuple hv_flag_vector = new HTuple(), hv_aux_suma = new HTuple();
    HTuple hv_Index = new HTuple(), hv_Derivada = new HTuple();
    HTuple hv_Factor_Der = new HTuple(), hv_Function = new HTuple();
    HTuple hv_Aux_Val_Max = new HTuple(), hv_Flag_indx_max = new HTuple();
    HTuple hv_index_protection = new HTuple(), hv_Alt_Min = new HTuple();
    HTuple hv_Alt_Max = new HTuple(), hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Entidad);
    HOperatorSet.GenEmptyObj(out ho_Region);
    HOperatorSet.GenEmptyObj(out ho_HeightMap_Scalada);
    HOperatorSet.GenEmptyObj(out ho_HeightMap_Region);
    hv_Estado_Funcion = new HTuple();
    try
    {
      hv_Estado_Funcion.Dispose();
      hv_Estado_Funcion = 0;

      try
      {

        //********************************************************
        //1.-  !!!!!!!!! threshols dinamico!!!!!!!!!!!!!!!!!!!!!!!!!!
        //********************************************************

        hv_UmbralMaxThr.Dispose();
        hv_UmbralMaxThr = 2800.0;
        ho_Region.Dispose();
        HOperatorSet.Threshold(ho_HeightMap, out ho_Region, 900, hv_UmbralMaxThr);
        hv_escala.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_escala = 255.0/hv_UmbralMaxThr;
        }
        ho_HeightMap_Scalada.Dispose();
        HOperatorSet.ScaleImage(ho_HeightMap, out ho_HeightMap_Scalada, hv_escala, 
            0);
        ho_HeightMap_Region.Dispose();
        HOperatorSet.Threshold(ho_HeightMap_Scalada, out ho_HeightMap_Region, 0, 
            255);
        hv_Histo.Dispose();hv_BinSize.Dispose();
        HOperatorSet.GrayHistoRange(ho_HeightMap_Region, ho_HeightMap_Scalada, 0, 
            255, 256, out hv_Histo, out hv_BinSize);
        hv_Sum_Histo.Dispose();
        HOperatorSet.TupleSum(hv_Histo, out hv_Sum_Histo);

        //# #########################################################
        //# ### Mientras mas grabnde menos sensible a cambios #######   
        hv_Mascara.Dispose();
        hv_Mascara = 1;
        //# ########################################################

        hv_Vector_Distribucion.Dispose();
        hv_Vector_Distribucion = new HTuple();
        hv_init_vector.Dispose();
        hv_init_vector = 255;
        hv_flag_vector.Dispose();
        hv_flag_vector = 0;
        hv_aux_suma.Dispose();
        hv_aux_suma = 0.0;

        HTuple end_val26 = 0;
        HTuple step_val26 = -1;
        for (hv_Index=hv_init_vector; hv_Index.Continue(end_val26, step_val26); hv_Index = hv_Index.TupleAdd(step_val26))
        {

          if (hv_Vector_Distribucion == null)
            hv_Vector_Distribucion = new HTuple();
          hv_Vector_Distribucion[hv_Index] = hv_aux_suma+(((hv_Histo.TupleSelect(
              hv_Index))*100.0)/hv_Sum_Histo);
          hv_aux_suma.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_aux_suma = hv_Vector_Distribucion.TupleSelect(
              hv_Index);
          }
        }

        hv_Derivada.Dispose();
        hv_Derivada = new HTuple();
        hv_Factor_Der.Dispose();
        hv_Factor_Der = 1000;
        hv_Mascara.Dispose();
        hv_Mascara = 1;
        HTuple end_val35 = 50;
        HTuple step_val35 = -hv_Mascara;
        for (hv_Index=hv_init_vector; hv_Index.Continue(end_val35, step_val35); hv_Index = hv_Index.TupleAdd(step_val35))
        {

          if (hv_Derivada == null)
            hv_Derivada = new HTuple();
          hv_Derivada[hv_Index] = ((((hv_Vector_Distribucion.TupleSelect(hv_Index))-(hv_Vector_Distribucion.TupleSelect(
              hv_Index-hv_Mascara)))).TupleAbs())*hv_Factor_Der;

        }


        //*********************************************************
        //* Busco el primer cambio brusco de posicion *************
        //* El umbral de cambio es Aux_Val_Max ********************
        //*********************************************************
        hv_Function.Dispose();
        HOperatorSet.CreateFunct1dArray(hv_Derivada, out hv_Function);

        //dev_inspect_ctrl (Function)
        //***********************************************************************************************
        hv_Aux_Val_Max.Dispose();
        hv_Aux_Val_Max = 2000;
        //****************************************************************************************************
        hv_Flag_indx_max.Dispose();
        hv_Flag_indx_max = 255;
        HTuple end_val53 = 255;
        HTuple step_val53 = hv_Mascara;
        for (hv_Index=50; hv_Index.Continue(end_val53, step_val53); hv_Index = hv_Index.TupleAdd(step_val53))
        {
          //Busca el primer conjunto de elementos y sale
          if ((int)(new HTuple(((hv_Derivada.TupleSelect(hv_Index))).TupleGreater(
              hv_Aux_Val_Max))) != 0)
          {
            hv_Aux_Val_Max.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_Aux_Val_Max = hv_Derivada.TupleSelect(
                hv_Index);
            }
            hv_Flag_indx_max.Dispose();
            hv_Flag_indx_max = new HTuple(hv_Index);
            break;
          }

        }

        //# #########################################################
        //# ######## Grado de proteccion para moverse entre el 
        //# ####### histograma
        hv_index_protection.Dispose();
        hv_index_protection = 2;
        //# #########################################################

        hv_Alt_Min.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Alt_Min = hv_Flag_indx_max-hv_index_protection;
        }
        hv_Alt_Max.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Alt_Max = hv_Flag_indx_max+hv_index_protection;
        }
        ho_Entidad.Dispose();
        HOperatorSet.Threshold(ho_HeightMap_Scalada, out ho_Entidad, hv_Alt_Min, 
            hv_Alt_Max);

        hv_Estado_Funcion.Dispose();
        hv_Estado_Funcion = 1;
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_Estado_Funcion.Dispose();
        hv_Estado_Funcion = 0;
        //* --> descomentar EN c#  Fx_Aux.DataLogError = Fx_Aux.ErrorCatch(HDevExpDefaultException1);

      }


      ho_Region.Dispose();
      ho_HeightMap_Scalada.Dispose();
      ho_HeightMap_Region.Dispose();

      hv_UmbralMaxThr.Dispose();
      hv_escala.Dispose();
      hv_Histo.Dispose();
      hv_BinSize.Dispose();
      hv_Sum_Histo.Dispose();
      hv_Mascara.Dispose();
      hv_Vector_Distribucion.Dispose();
      hv_init_vector.Dispose();
      hv_flag_vector.Dispose();
      hv_aux_suma.Dispose();
      hv_Index.Dispose();
      hv_Derivada.Dispose();
      hv_Factor_Der.Dispose();
      hv_Function.Dispose();
      hv_Aux_Val_Max.Dispose();
      hv_Flag_indx_max.Dispose();
      hv_index_protection.Dispose();
      hv_Alt_Min.Dispose();
      hv_Alt_Max.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_Region.Dispose();
      ho_HeightMap_Scalada.Dispose();
      ho_HeightMap_Region.Dispose();

      hv_UmbralMaxThr.Dispose();
      hv_escala.Dispose();
      hv_Histo.Dispose();
      hv_BinSize.Dispose();
      hv_Sum_Histo.Dispose();
      hv_Mascara.Dispose();
      hv_Vector_Distribucion.Dispose();
      hv_init_vector.Dispose();
      hv_flag_vector.Dispose();
      hv_aux_suma.Dispose();
      hv_Index.Dispose();
      hv_Derivada.Dispose();
      hv_Factor_Der.Dispose();
      hv_Function.Dispose();
      hv_Aux_Val_Max.Dispose();
      hv_Flag_indx_max.Dispose();
      hv_index_protection.Dispose();
      hv_Alt_Min.Dispose();
      hv_Alt_Max.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Is_a_Sleeve (HTuple hv_Vector_ID_Core_by_Segment_Pallet, out HTuple hv_IsA_Sleeve)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_TipoPallet = new HTuple(), hv_Index = new HTuple();
    HTuple hv_SleevPosition = new HTuple();
    // Initialize local and output iconic variables 
    hv_IsA_Sleeve = new HTuple();
    try
    {
      hv_IsA_Sleeve.Dispose();
      hv_IsA_Sleeve = 0;
      hv_TipoPallet.Dispose();
      hv_TipoPallet = 0;
      for (hv_Index=0; (int)hv_Index<=(int)((new HTuple(hv_Vector_ID_Core_by_Segment_Pallet.TupleLength()
          ))-1); hv_Index = (int)hv_Index + 1)
      {

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_SleevPosition.Dispose();
        HOperatorSet.TupleStrchr(hv_Vector_ID_Core_by_Segment_Pallet.TupleSelect(
            hv_Index), "sleeve", out hv_SleevPosition);
        }
        if ((int)(new HTuple(hv_SleevPosition.TupleGreater(0))) != 0)
        {

          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_TipoPallet = hv_TipoPallet+1;
          hv_TipoPallet.Dispose();
          hv_TipoPallet = ExpTmpLocalVar_TipoPallet;
          }
          }
        }


      }

      if ((int)(new HTuple(hv_TipoPallet.TupleGreater(0))) != 0)
      {
        hv_IsA_Sleeve.Dispose();
        hv_IsA_Sleeve = 1;

      }

      hv_TipoPallet.Dispose();
      hv_Index.Dispose();
      hv_SleevPosition.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_TipoPallet.Dispose();
      hv_Index.Dispose();
      hv_SleevPosition.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Is_Camera_Online (HTuple hv_NxLib, HTuple hv_AcqHandle_Cam_0, HTuple hv_SerialHandle, 
      HTuple hv_CamerasConection_In, out HTuple hv_CamerasConection, out HTuple hv_Exception)
  {


    // Initialize local and output iconic variables 
    hv_CamerasConection = new HTuple();
    hv_Exception = new HTuple();

    try
    {

      hv_CamerasConection.Dispose();
      IsCamerasOnline(hv_NxLib, hv_AcqHandle_Cam_0, hv_SerialHandle, hv_CamerasConection_In, 
          out hv_CamerasConection);

      if ((int)(new HTuple(((hv_CamerasConection.TupleSelect(0))).TupleEqual(0))) != 0)
      {

        Send_Data_Info("### ERROR ### CAMARA  ESTEREO DESCONECTADA", hv_SerialHandle);

      }
      if ((int)(new HTuple(((hv_CamerasConection.TupleSelect(1))).TupleEqual(0))) != 0)
      {

        Send_Data_Info("### ERROR ### CAMARA  OPTICA DESCONECTADA", hv_SerialHandle);

      }

    }
    // catch (Exception) 
    catch (HalconException HDevExpDefaultException1)
    {
      HDevExpDefaultException1.ToHTuple(out hv_Exception);

    }





    return;
  }

  public void IsCamerasOnline (HTuple hv_NxLib, HTuple hv_AcqHandle_Cam_0, HTuple hv_SerialHandle, 
      HTuple hv_CamerasConection_In, out HTuple hv_CamerasConection)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_EstatusCamara = new HTuple(), hv_Tag = new HTuple();
    HTuple hv_Exception = new HTuple(), hv_ConexionOptica = new HTuple();
    // Initialize local and output iconic variables 
    hv_CamerasConection = new HTuple();
    try
    {

      hv_CamerasConection.Dispose();
      hv_CamerasConection = new HTuple(hv_CamerasConection_In);
      try
      {

        hv_EstatusCamara.Dispose();
        HOperatorSet.GetFramegrabberParam(hv_NxLib, "//Cameras/BySerialNo/193216/Status/Available", 
            out hv_EstatusCamara);

        if ((int)(new HTuple(hv_EstatusCamara.TupleEqual("true"))) != 0)
        {
          if (hv_CamerasConection == null)
            hv_CamerasConection = new HTuple();
          hv_CamerasConection[0] = 0;
          hv_Tag.Dispose();
          hv_Tag = "_EV01_I_BitVida_CamEster";
          Send_EthernetIP_Data(hv_Tag, 0, hv_SerialHandle);
        }
        else
        {
          hv_Tag.Dispose();
          hv_Tag = "_EV01_I_BitVida_CamEster";
          Send_EthernetIP_Data(hv_Tag, 1, hv_SerialHandle);
          if (hv_CamerasConection == null)
            hv_CamerasConection = new HTuple();
          hv_CamerasConection[0] = 1;
        }


      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        if (hv_CamerasConection == null)
          hv_CamerasConection = new HTuple();
        hv_CamerasConection[0] = 0;
        hv_Tag.Dispose();
        hv_Tag = "_EV01_I_BitVida_CamEster";
        Send_EthernetIP_Data(hv_Tag, 0, hv_SerialHandle);
      }




      try
      {
        hv_ConexionOptica.Dispose();
        HOperatorSet.GetFramegrabberParam(hv_AcqHandle_Cam_0, "DeviceTemperature", 
            out hv_ConexionOptica);
        hv_Tag.Dispose();
        hv_Tag = "_EV01_I_BitVida_CamOpt";
        Send_EthernetIP_Data(hv_Tag, 1, hv_SerialHandle);
        if (hv_CamerasConection == null)
          hv_CamerasConection = new HTuple();
        hv_CamerasConection[1] = 1;
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        if (hv_CamerasConection == null)
          hv_CamerasConection = new HTuple();
        hv_CamerasConection[1] = 0;
        hv_Tag.Dispose();
        hv_Tag = "_EV01_I_BitVida_CamOpt";
        Send_EthernetIP_Data(hv_Tag, 0, hv_SerialHandle);

      }

      hv_EstatusCamara.Dispose();
      hv_Tag.Dispose();
      hv_Exception.Dispose();
      hv_ConexionOptica.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_EstatusCamara.Dispose();
      hv_Tag.Dispose();
      hv_Exception.Dispose();
      hv_ConexionOptica.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void MakeSFM_Palletr (HObject ho_Esquina, HObject ho_Z, HObject ho_X, HObject ho_Y, 
      out HObject ho_ConnectedRegions, out HObject ho_SelectedRegions, out HObject ho_ImageReduced, 
      out HObject ho_MultiChannelImage, HTuple hv_Parametros_Visualizacion, HTuple hv_Valores_Visualizacion, 
      out HTuple hv_Esquina3D, out HTuple hv_Pose, out HTuple hv_Esquina3D_Trans, 
      out HTuple hv_Pose1, out HTuple hv_PoseOut1, out HTuple hv_Sampling, out HTuple hv_SurfaceModelID, 
      out HTuple hv_ObjectModel3DNormals, out HTuple hv_Esquina_Tri, out HTuple hv_Information)
  {




    // Local iconic variables 

    HObject ho_RegionDilation;

    // Local control variables 

    HTuple hv_Area = new HTuple(), hv_Row = new HTuple();
    HTuple hv_Column = new HTuple(), hv_X1 = new HTuple();
    HTuple hv_Y1 = new HTuple(), hv_Z1 = new HTuple(), hv_WindowHandle = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
    HOperatorSet.GenEmptyObj(out ho_SelectedRegions);
    HOperatorSet.GenEmptyObj(out ho_ImageReduced);
    HOperatorSet.GenEmptyObj(out ho_MultiChannelImage);
    HOperatorSet.GenEmptyObj(out ho_RegionDilation);
    hv_Esquina3D = new HTuple();
    hv_Pose = new HTuple();
    hv_Esquina3D_Trans = new HTuple();
    hv_Pose1 = new HTuple();
    hv_PoseOut1 = new HTuple();
    hv_Sampling = new HTuple();
    hv_SurfaceModelID = new HTuple();
    hv_ObjectModel3DNormals = new HTuple();
    hv_Esquina_Tri = new HTuple();
    hv_Information = new HTuple();
    try
    {

      ho_ConnectedRegions.Dispose();
      HOperatorSet.Connection(ho_Esquina, out ho_ConnectedRegions);
      ho_SelectedRegions.Dispose();
      HOperatorSet.SelectShapeStd(ho_ConnectedRegions, out ho_SelectedRegions, "max_area", 
          90);
      ho_RegionDilation.Dispose();
      HOperatorSet.DilationRectangle1(ho_SelectedRegions, out ho_RegionDilation, 
          19, 19);
      ho_ImageReduced.Dispose();
      HOperatorSet.ReduceDomain(ho_Z, ho_RegionDilation, out ho_ImageReduced);





      ho_MultiChannelImage.Dispose();
      HOperatorSet.Compose3(ho_X, ho_Y, ho_ImageReduced, out ho_MultiChannelImage
          );

      hv_Area.Dispose();hv_Row.Dispose();hv_Column.Dispose();
      HOperatorSet.AreaCenter(ho_SelectedRegions, out hv_Area, out hv_Row, out hv_Column);
      hv_X1.Dispose();
      HOperatorSet.GetGrayval(ho_X, hv_Row, hv_Column, out hv_X1);
      hv_Y1.Dispose();
      HOperatorSet.GetGrayval(ho_Y, hv_Row, hv_Column, out hv_Y1);
      hv_Z1.Dispose();
      HOperatorSet.GetGrayval(ho_Z, hv_Row, hv_Column, out hv_Z1);


      hv_Esquina3D.Dispose();
      HOperatorSet.XyzToObjectModel3d(ho_X, ho_Y, ho_ImageReduced, out hv_Esquina3D);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Pose.Dispose();
      HOperatorSet.CreatePose(-hv_X1, -hv_Y1, -hv_Z1, 0, 0, 0, "Rp+T", "gba", "point", 
          out hv_Pose);
      }
      hv_Esquina3D_Trans.Dispose();
      HOperatorSet.RigidTransObjectModel3d(hv_Esquina3D, hv_Pose, out hv_Esquina3D_Trans);

      //dev_get_window(...);
      hv_PoseOut1.Dispose();
      Visualizar_3D(hv_Esquina3D_Trans, hv_Parametros_Visualizacion, hv_Valores_Visualizacion, 
          1, new HTuple(), new HTuple(), new HTuple(), hv_WindowHandle, out hv_PoseOut1);

      //create_pose (0, 0, 0, 0, 180, 0, 'Rp+T', 'gba', 'point', Pose1)
      //rigid_trans_object_model_3d (Esquina3D_Trans, Pose1, Esquina3D_Trans)

      //create_pose (0, 0, 0, 0, 0, -90, 'Rp+T', 'gba', 'point', Pose1)
      //rigid_trans_object_model_3d (Esquina3D_Trans, Pose1, Esquina3D_Trans)


      //*****************************************************************************************************************************
      hv_PoseOut1.Dispose();
      Visualizar_3D(hv_Esquina3D_Trans, hv_Parametros_Visualizacion, hv_Valores_Visualizacion, 
          1, new HTuple(), new HTuple(), new HTuple(), hv_WindowHandle, out hv_PoseOut1);
      //*****************************************************************************************************************************


      hv_Sampling.Dispose();
      hv_Sampling = 0.01;

      //***************************************************************************************************
      //5.- Creo Surface Model
      //***************************************************************************************************
      //Si es necesario samplear el objeto
      //surface_normals_object_model_3d (Esquina3D_Trans, 'mls', [], [], Esquina3D_Trans2)
      //triangulate_object_model_3d (Esquina3D_Trans, 'greedy', [], [], Esquina_Tri, Information)

      hv_SurfaceModelID.Dispose();
      HOperatorSet.CreateSurfaceModel(hv_Esquina3D_Trans, hv_Sampling, new HTuple(), 
          new HTuple(), out hv_SurfaceModelID);


      //***************************************************************************************************
      //6.- Guardo Surface Model y Modelo 3D
      //***************************************************************************************************
      //

      HOperatorSet.WriteSurfaceModel(hv_SurfaceModelID, "D:/AI/Vision Artificial/4.-MAGOTTEAUX/SFM_PALLET/SFM_Pallet_beta.sfm");
      HOperatorSet.WriteObjectModel3d(hv_Esquina3D_Trans, "om3", "D:/AI/Vision Artificial/4.-MAGOTTEAUX/SFM_PALLET/3D_Pallet_beta.om3", 
          new HTuple(), new HTuple());

      ho_RegionDilation.Dispose();

      hv_Area.Dispose();
      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_X1.Dispose();
      hv_Y1.Dispose();
      hv_Z1.Dispose();
      hv_WindowHandle.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_RegionDilation.Dispose();

      hv_Area.Dispose();
      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_X1.Dispose();
      hv_Y1.Dispose();
      hv_Z1.Dispose();
      hv_WindowHandle.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void NotZeroModel (HTuple hv_Escena3D_RAW, out HTuple hv_Escena3D_RAWOut)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_GenParamValue = new HTuple(), hv_x_min = new HTuple();
    HTuple hv_y_min = new HTuple(), hv_z_min = new HTuple();
    HTuple hv_x_max = new HTuple(), hv_y_max = new HTuple();
    HTuple hv_z_max = new HTuple();
    // Initialize local and output iconic variables 
    hv_Escena3D_RAWOut = new HTuple();
    try
    {
      hv_Escena3D_RAWOut.Dispose();
      hv_Escena3D_RAWOut = new HTuple(hv_Escena3D_RAW);
      hv_GenParamValue.Dispose();
      HOperatorSet.GetObjectModel3dParams(hv_Escena3D_RAWOut, "bounding_box1", out hv_GenParamValue);

      hv_x_min.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_x_min = hv_GenParamValue.TupleSelect(
          0);
      }
      hv_y_min.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_y_min = hv_GenParamValue.TupleSelect(
          1);
      }
      hv_z_min.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_z_min = hv_GenParamValue.TupleSelect(
          2);
      }
      hv_x_max.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_x_max = hv_GenParamValue.TupleSelect(
          3);
      }
      hv_y_max.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_y_max = hv_GenParamValue.TupleSelect(
          4);
      }
      hv_z_max.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_z_max = hv_GenParamValue.TupleSelect(
          5);
      }

      {
      HTuple ExpTmpOutVar_0;
      HOperatorSet.SelectPointsObjectModel3d(hv_Escena3D_RAWOut, "point_coord_z", 
          300, 2500, out ExpTmpOutVar_0);
      hv_Escena3D_RAWOut.Dispose();
      hv_Escena3D_RAWOut = ExpTmpOutVar_0;
      }

      hv_GenParamValue.Dispose();
      hv_x_min.Dispose();
      hv_y_min.Dispose();
      hv_z_min.Dispose();
      hv_x_max.Dispose();
      hv_y_max.Dispose();
      hv_z_max.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_GenParamValue.Dispose();
      hv_x_min.Dispose();
      hv_y_min.Dispose();
      hv_z_min.Dispose();
      hv_x_max.Dispose();
      hv_y_max.Dispose();
      hv_z_max.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void NotZeroModel_3D (HTuple hv_Escena3D_RAW, out HTuple hv_Escena3D_RAWOut)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_GenParamValue = new HTuple(), hv_x_min = new HTuple();
    HTuple hv_y_min = new HTuple(), hv_z_min = new HTuple();
    HTuple hv_x_max = new HTuple(), hv_y_max = new HTuple();
    HTuple hv_z_max = new HTuple();
    // Initialize local and output iconic variables 
    hv_Escena3D_RAWOut = new HTuple();
    try
    {
      hv_Escena3D_RAWOut.Dispose();
      hv_Escena3D_RAWOut = new HTuple(hv_Escena3D_RAW);
      hv_GenParamValue.Dispose();
      HOperatorSet.GetObjectModel3dParams(hv_Escena3D_RAWOut, "bounding_box1", out hv_GenParamValue);

      hv_x_min.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_x_min = hv_GenParamValue.TupleSelect(
          0);
      }
      hv_y_min.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_y_min = hv_GenParamValue.TupleSelect(
          1);
      }
      hv_z_min.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_z_min = hv_GenParamValue.TupleSelect(
          2);
      }
      hv_x_max.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_x_max = hv_GenParamValue.TupleSelect(
          3);
      }
      hv_y_max.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_y_max = hv_GenParamValue.TupleSelect(
          4);
      }
      hv_z_max.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_z_max = hv_GenParamValue.TupleSelect(
          5);
      }

      {
      HTuple ExpTmpOutVar_0;
      HOperatorSet.SelectPointsObjectModel3d(hv_Escena3D_RAWOut, "point_coord_z", 
          500, 2500, out ExpTmpOutVar_0);
      hv_Escena3D_RAWOut.Dispose();
      hv_Escena3D_RAWOut = ExpTmpOutVar_0;
      }

      hv_GenParamValue.Dispose();
      hv_x_min.Dispose();
      hv_y_min.Dispose();
      hv_z_min.Dispose();
      hv_x_max.Dispose();
      hv_y_max.Dispose();
      hv_z_max.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_GenParamValue.Dispose();
      hv_x_min.Dispose();
      hv_y_min.Dispose();
      hv_z_min.Dispose();
      hv_x_max.Dispose();
      hv_y_max.Dispose();
      hv_z_max.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void NotZeroModel_3D_Sleeve (HTuple hv_Escena3D_RAW, HTuple hv_g_AltutaVirtualCamEstereo, 
      out HTuple hv_Escena3D_RAWOut)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_GenParamValue = new HTuple(), hv_x_min = new HTuple();
    HTuple hv_y_min = new HTuple(), hv_z_min = new HTuple();
    HTuple hv_x_max = new HTuple(), hv_y_max = new HTuple();
    HTuple hv_z_max = new HTuple();
    // Initialize local and output iconic variables 
    hv_Escena3D_RAWOut = new HTuple();
    try
    {
      hv_Escena3D_RAWOut.Dispose();
      hv_Escena3D_RAWOut = new HTuple(hv_Escena3D_RAW);
      hv_GenParamValue.Dispose();
      HOperatorSet.GetObjectModel3dParams(hv_Escena3D_RAWOut, "bounding_box1", out hv_GenParamValue);

      hv_x_min.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_x_min = hv_GenParamValue.TupleSelect(
          0);
      }
      hv_y_min.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_y_min = hv_GenParamValue.TupleSelect(
          1);
      }
      hv_z_min.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_z_min = hv_GenParamValue.TupleSelect(
          2);
      }
      hv_x_max.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_x_max = hv_GenParamValue.TupleSelect(
          3);
      }
      hv_y_max.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_y_max = hv_GenParamValue.TupleSelect(
          4);
      }
      hv_z_max.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_z_max = hv_GenParamValue.TupleSelect(
          5);
      }

      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HTuple ExpTmpOutVar_0;
      HOperatorSet.SelectPointsObjectModel3d(hv_Escena3D_RAWOut, "point_coord_z", 
          500+hv_g_AltutaVirtualCamEstereo, 2900+hv_g_AltutaVirtualCamEstereo, out ExpTmpOutVar_0);
      hv_Escena3D_RAWOut.Dispose();
      hv_Escena3D_RAWOut = ExpTmpOutVar_0;
      }

      hv_GenParamValue.Dispose();
      hv_x_min.Dispose();
      hv_y_min.Dispose();
      hv_z_min.Dispose();
      hv_x_max.Dispose();
      hv_y_max.Dispose();
      hv_z_max.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_GenParamValue.Dispose();
      hv_x_min.Dispose();
      hv_y_min.Dispose();
      hv_z_min.Dispose();
      hv_x_max.Dispose();
      hv_y_max.Dispose();
      hv_z_max.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void NotZeroModel_3D_Sleeve_COPY_1 (HTuple hv_Escena3D_RAW, out HTuple hv_Escena3D_RAWOut)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_GenParamValue = new HTuple(), hv_x_min = new HTuple();
    HTuple hv_y_min = new HTuple(), hv_z_min = new HTuple();
    HTuple hv_x_max = new HTuple(), hv_y_max = new HTuple();
    HTuple hv_z_max = new HTuple();
    // Initialize local and output iconic variables 
    hv_Escena3D_RAWOut = new HTuple();
    try
    {
      hv_Escena3D_RAWOut.Dispose();
      hv_Escena3D_RAWOut = new HTuple(hv_Escena3D_RAW);
      hv_GenParamValue.Dispose();
      HOperatorSet.GetObjectModel3dParams(hv_Escena3D_RAWOut, "bounding_box1", out hv_GenParamValue);

      hv_x_min.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_x_min = hv_GenParamValue.TupleSelect(
          0);
      }
      hv_y_min.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_y_min = hv_GenParamValue.TupleSelect(
          1);
      }
      hv_z_min.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_z_min = hv_GenParamValue.TupleSelect(
          2);
      }
      hv_x_max.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_x_max = hv_GenParamValue.TupleSelect(
          3);
      }
      hv_y_max.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_y_max = hv_GenParamValue.TupleSelect(
          4);
      }
      hv_z_max.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_z_max = hv_GenParamValue.TupleSelect(
          5);
      }

      {
      HTuple ExpTmpOutVar_0;
      HOperatorSet.SelectPointsObjectModel3d(hv_Escena3D_RAWOut, "point_coord_z", 
          500, 2700, out ExpTmpOutVar_0);
      hv_Escena3D_RAWOut.Dispose();
      hv_Escena3D_RAWOut = ExpTmpOutVar_0;
      }

      hv_GenParamValue.Dispose();
      hv_x_min.Dispose();
      hv_y_min.Dispose();
      hv_z_min.Dispose();
      hv_x_max.Dispose();
      hv_y_max.Dispose();
      hv_z_max.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_GenParamValue.Dispose();
      hv_x_min.Dispose();
      hv_y_min.Dispose();
      hv_z_min.Dispose();
      hv_x_max.Dispose();
      hv_y_max.Dispose();
      hv_z_max.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void OLDCODE (HObject ho_Z, HObject ho_X, HObject ho_Y, HObject ho_Objeto_1, 
      HTuple hv_SerialHandle)
  {




    // Stack for temporary objects 
    HObject[] OTemp = new HObject[20];

    // Local iconic variables 

    HObject ho_XOut=null, ho_YOut=null, ho_ZOut=null;
    HObject ho_Region, ho_ROI_0, ho_RegionSleeve, ho_ConnectedRegions;
    HObject ho_SelectedRegions, ho_RegionTrans, ho_ImageReduced;
    HObject ho_Zred, ho_LocalMaxima, ho_ConnectedRegions1;

    // Local control variables 

    HTuple hv_Estado_Funcion = new HTuple(), hv_WindowHandle = new HTuple();
    HTuple hv_Area = new HTuple(), hv_Row = new HTuple(), hv_Column = new HTuple();
    HTuple hv_BaseSleeve = new HTuple(), hv_PosX = new HTuple();
    HTuple hv_PosY = new HTuple(), hv_PosZ = new HTuple();
    HTuple hv_Offsety = new HTuple(), hv_Area1 = new HTuple();
    HTuple hv_Row1 = new HTuple(), hv_Column1 = new HTuple();
    HTuple hv_AlturaMaxima = new HTuple(), hv_Min = new HTuple();
    HTuple hv_ZObjective = new HTuple(), hv_Osffet_Z = new HTuple();
    HTuple hv_Pose_Base_Sleeve = new HTuple(), hv_Mensaje = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_XOut);
    HOperatorSet.GenEmptyObj(out ho_YOut);
    HOperatorSet.GenEmptyObj(out ho_ZOut);
    HOperatorSet.GenEmptyObj(out ho_Region);
    HOperatorSet.GenEmptyObj(out ho_ROI_0);
    HOperatorSet.GenEmptyObj(out ho_RegionSleeve);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
    HOperatorSet.GenEmptyObj(out ho_SelectedRegions);
    HOperatorSet.GenEmptyObj(out ho_RegionTrans);
    HOperatorSet.GenEmptyObj(out ho_ImageReduced);
    HOperatorSet.GenEmptyObj(out ho_Zred);
    HOperatorSet.GenEmptyObj(out ho_LocalMaxima);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions1);
    try
    {
      ho_XOut.Dispose();
      ho_XOut = new HObject(ho_X);
      ho_YOut.Dispose();
      ho_YOut = new HObject(ho_Y);
      ho_ZOut.Dispose();
      ho_ZOut = new HObject(ho_Z);
      //****************************************
      //
      //***************************************
      ho_Region.Dispose();
      HOperatorSet.Threshold(ho_ZOut, out ho_Region, 200, 2500);
      {
      HObject ExpTmpOutVar_0;
      HOperatorSet.ReduceDomain(ho_ZOut, ho_Region, out ExpTmpOutVar_0);
      ho_ZOut.Dispose();
      ho_ZOut = ExpTmpOutVar_0;
      }

      ho_ROI_0.Dispose();
      HOperatorSet.GenRectangle1(out ho_ROI_0, 14.5, 135.75, 1022.5, 1048.25);

      {
      HObject ExpTmpOutVar_0;
      HOperatorSet.ReduceDomain(ho_XOut, ho_ROI_0, out ExpTmpOutVar_0);
      ho_XOut.Dispose();
      ho_XOut = ExpTmpOutVar_0;
      }
      {
      HObject ExpTmpOutVar_0;
      HOperatorSet.ReduceDomain(ho_YOut, ho_ROI_0, out ExpTmpOutVar_0);
      ho_YOut.Dispose();
      ho_YOut = ExpTmpOutVar_0;
      }
      {
      HObject ExpTmpOutVar_0;
      HOperatorSet.ReduceDomain(ho_ZOut, ho_ROI_0, out ExpTmpOutVar_0);
      ho_ZOut.Dispose();
      ho_ZOut = ExpTmpOutVar_0;
      }


      //Segmento por histograma
      ho_RegionSleeve.Dispose();hv_Estado_Funcion.Dispose();
      Segmentar_Sleeve_pallet(ho_ZOut, ho_XOut, ho_YOut, ho_ZOut, out ho_RegionSleeve, 
          out hv_Estado_Funcion);

      //dev_get_window(...);
      //Elimino el ruido de regiones pequeñas
      ho_ConnectedRegions.Dispose();
      HOperatorSet.Connection(ho_RegionSleeve, out ho_ConnectedRegions);
      ho_SelectedRegions.Dispose();
      HOperatorSet.SelectShapeStd(ho_ConnectedRegions, out ho_SelectedRegions, "max_area", 
          90);
      //erosion_circle (RegionSleeve, RegionErosion, 8.5)
      //busco hoyos

      ho_RegionTrans.Dispose();
      HOperatorSet.ShapeTrans(ho_SelectedRegions, out ho_RegionTrans, "rectangle1");
      ho_ImageReduced.Dispose();
      HOperatorSet.ReduceDomain(ho_Objeto_1, ho_RegionTrans, out ho_ImageReduced);

      hv_Area.Dispose();hv_Row.Dispose();hv_Column.Dispose();
      HOperatorSet.AreaCenter(ho_RegionTrans, out hv_Area, out hv_Row, out hv_Column);


      hv_BaseSleeve.Dispose();
      HOperatorSet.GetGrayval(ho_ImageReduced, hv_Row, hv_Column, out hv_BaseSleeve);

      hv_PosX.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_PosX = hv_BaseSleeve.TupleSelect(
          0);
      }
      hv_PosY.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_PosY = hv_BaseSleeve.TupleSelect(
          1);
      }
      hv_PosZ.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_PosZ = hv_BaseSleeve.TupleSelect(
          2);
      }

      hv_Offsety.Dispose();
      hv_Offsety = 5;
      while ((int)((new HTuple(hv_PosX.TupleEqual(0))).TupleOr(new HTuple(hv_PosY.TupleEqual(
          0)))) != 0)
      {
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_BaseSleeve.Dispose();
        HOperatorSet.GetGrayval(ho_ImageReduced, hv_Row+10, hv_Column+hv_Offsety, 
            out hv_BaseSleeve);
        }
        hv_PosX.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_PosX = hv_BaseSleeve.TupleSelect(
            0);
        }
        hv_PosY.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_PosY = hv_BaseSleeve.TupleSelect(
            1);
        }
        hv_PosZ.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_PosZ = hv_BaseSleeve.TupleSelect(
            2);
        }
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Offsety = hv_Offsety+1;
        hv_Offsety.Dispose();
        hv_Offsety = ExpTmpLocalVar_Offsety;
        }
        }

      }

      ho_Zred.Dispose();
      HOperatorSet.ReduceDomain(ho_ZOut, ho_SelectedRegions, out ho_Zred);
      {
      HObject ExpTmpOutVar_0;
      HOperatorSet.GaussFilter(ho_Zred, out ExpTmpOutVar_0, 5);
      ho_Zred.Dispose();
      ho_Zred = ExpTmpOutVar_0;
      }
      ho_LocalMaxima.Dispose();
      HOperatorSet.LocalMin(ho_Zred, out ho_LocalMaxima);
      ho_ConnectedRegions1.Dispose();
      HOperatorSet.Connection(ho_LocalMaxima, out ho_ConnectedRegions1);
      hv_Area1.Dispose();hv_Row1.Dispose();hv_Column1.Dispose();
      HOperatorSet.AreaCenter(ho_ConnectedRegions1, out hv_Area1, out hv_Row1, out hv_Column1);

      hv_AlturaMaxima.Dispose();
      HOperatorSet.GetGrayval(ho_Zred, hv_Row1, hv_Column1, out hv_AlturaMaxima);

      hv_Min.Dispose();
      HOperatorSet.TupleMin(hv_AlturaMaxima, out hv_Min);
      hv_ZObjective.Dispose();
      hv_ZObjective = 1800;
      hv_Osffet_Z.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Osffet_Z = hv_Min-hv_ZObjective;
      }

      hv_Pose_Base_Sleeve.Dispose();
      HOperatorSet.CreatePose(hv_PosX, hv_PosY, hv_Osffet_Z, 0, 0, 0, "Rp+T", "gba", 
          "point", out hv_Pose_Base_Sleeve);

      HOperatorSet.DispObj(ho_ImageReduced, hv_ExpDefaultWinHandle);
      //**********************************************
      //Delimitar falsos Positivos
      //**********************************************

      Send_Data_To_Robot(hv_Pose_Base_Sleeve, hv_SerialHandle);

      hv_Mensaje.Dispose();
      hv_Mensaje = "####################################";
      Send_Data_Info(hv_Mensaje, hv_SerialHandle);
      hv_Mensaje.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Mensaje = (((("Base Pallet -> "+hv_PosX)+" # ")+hv_PosY)+" # ")+hv_Osffet_Z;
      }
      Send_Data_Info(hv_Mensaje, hv_SerialHandle);
      hv_Mensaje.Dispose();
      hv_Mensaje = "####################################";
      Send_Data_Info(hv_Mensaje, hv_SerialHandle);
      //***********************************************
      ho_XOut.Dispose();
      ho_YOut.Dispose();
      ho_ZOut.Dispose();
      ho_Region.Dispose();
      ho_ROI_0.Dispose();
      ho_RegionSleeve.Dispose();
      ho_ConnectedRegions.Dispose();
      ho_SelectedRegions.Dispose();
      ho_RegionTrans.Dispose();
      ho_ImageReduced.Dispose();
      ho_Zred.Dispose();
      ho_LocalMaxima.Dispose();
      ho_ConnectedRegions1.Dispose();

      hv_Estado_Funcion.Dispose();
      hv_WindowHandle.Dispose();
      hv_Area.Dispose();
      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_BaseSleeve.Dispose();
      hv_PosX.Dispose();
      hv_PosY.Dispose();
      hv_PosZ.Dispose();
      hv_Offsety.Dispose();
      hv_Area1.Dispose();
      hv_Row1.Dispose();
      hv_Column1.Dispose();
      hv_AlturaMaxima.Dispose();
      hv_Min.Dispose();
      hv_ZObjective.Dispose();
      hv_Osffet_Z.Dispose();
      hv_Pose_Base_Sleeve.Dispose();
      hv_Mensaje.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_XOut.Dispose();
      ho_YOut.Dispose();
      ho_ZOut.Dispose();
      ho_Region.Dispose();
      ho_ROI_0.Dispose();
      ho_RegionSleeve.Dispose();
      ho_ConnectedRegions.Dispose();
      ho_SelectedRegions.Dispose();
      ho_RegionTrans.Dispose();
      ho_ImageReduced.Dispose();
      ho_Zred.Dispose();
      ho_LocalMaxima.Dispose();
      ho_ConnectedRegions1.Dispose();

      hv_Estado_Funcion.Dispose();
      hv_WindowHandle.Dispose();
      hv_Area.Dispose();
      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_BaseSleeve.Dispose();
      hv_PosX.Dispose();
      hv_PosY.Dispose();
      hv_PosZ.Dispose();
      hv_Offsety.Dispose();
      hv_Area1.Dispose();
      hv_Row1.Dispose();
      hv_Column1.Dispose();
      hv_AlturaMaxima.Dispose();
      hv_Min.Dispose();
      hv_ZObjective.Dispose();
      hv_Osffet_Z.Dispose();
      hv_Pose_Base_Sleeve.Dispose();
      hv_Mensaje.Dispose();

      throw HDevExpDefaultException;
    }
  }

  // Short Description: Determines scale and pose for the operator image_to_world_plane such that a given point appears in the center and that the scale of the rectified image is similar to the scale of the original image. 
  public void parameters_image_to_world_plane_centered (HTuple hv_CamParam, HTuple hv_Pose, 
      HTuple hv_CenterRow, HTuple hv_CenterCol, HTuple hv_WidthMappedImage, HTuple hv_HeightMappedImage, 
      out HTuple hv_ScaleForCenteredImage, out HTuple hv_PoseForCenteredImage)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Dist_ICS = new HTuple(), hv_CenterX = new HTuple();
    HTuple hv_CenterY = new HTuple(), hv_BelowCenterX = new HTuple();
    HTuple hv_BelowCenterY = new HTuple(), hv_RightOfCenterX = new HTuple();
    HTuple hv_RightOfCenterY = new HTuple(), hv_Dist_WCS_Vertical = new HTuple();
    HTuple hv_Dist_WCS_Horizontal = new HTuple(), hv_ScaleVertical = new HTuple();
    HTuple hv_ScaleHorizontal = new HTuple(), hv_DX = new HTuple();
    HTuple hv_DY = new HTuple(), hv_DZ = new HTuple();
    // Initialize local and output iconic variables 
    hv_ScaleForCenteredImage = new HTuple();
    hv_PoseForCenteredImage = new HTuple();
    try
    {
      //Determine the scale for the mapping
      //(here, the scale is determined such that in the
      //  surroundings of the given point  the image scale of the
      //  mapped image is similar to the image scale of the original image)
      hv_Dist_ICS.Dispose();
      hv_Dist_ICS = 1;
      hv_CenterX.Dispose();hv_CenterY.Dispose();
      HOperatorSet.ImagePointsToWorldPlane(hv_CamParam, hv_Pose, hv_CenterRow, hv_CenterCol, 
          1, out hv_CenterX, out hv_CenterY);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_BelowCenterX.Dispose();hv_BelowCenterY.Dispose();
      HOperatorSet.ImagePointsToWorldPlane(hv_CamParam, hv_Pose, hv_CenterRow+hv_Dist_ICS, 
          hv_CenterCol, 1, out hv_BelowCenterX, out hv_BelowCenterY);
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_RightOfCenterX.Dispose();hv_RightOfCenterY.Dispose();
      HOperatorSet.ImagePointsToWorldPlane(hv_CamParam, hv_Pose, hv_CenterRow, hv_CenterCol+hv_Dist_ICS, 
          1, out hv_RightOfCenterX, out hv_RightOfCenterY);
      }
      hv_Dist_WCS_Vertical.Dispose();
      HOperatorSet.DistancePp(hv_CenterY, hv_CenterX, hv_BelowCenterY, hv_BelowCenterX, 
          out hv_Dist_WCS_Vertical);
      hv_Dist_WCS_Horizontal.Dispose();
      HOperatorSet.DistancePp(hv_CenterY, hv_CenterX, hv_RightOfCenterY, hv_RightOfCenterX, 
          out hv_Dist_WCS_Horizontal);
      hv_ScaleVertical.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_ScaleVertical = hv_Dist_WCS_Vertical/hv_Dist_ICS;
      }
      hv_ScaleHorizontal.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_ScaleHorizontal = hv_Dist_WCS_Horizontal/hv_Dist_ICS;
      }
      hv_ScaleForCenteredImage.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_ScaleForCenteredImage = (hv_ScaleVertical+hv_ScaleHorizontal)/2.0;
      }
      //Determine the parameters for set_origin_pose such
      //that the point given via get_mbutton will be in the center of the
      //mapped image
      hv_DX.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_DX = hv_CenterX-((hv_ScaleForCenteredImage*hv_WidthMappedImage)/2.0);
      }
      hv_DY.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_DY = hv_CenterY-((hv_ScaleForCenteredImage*hv_HeightMappedImage)/2.0);
      }
      hv_DZ.Dispose();
      hv_DZ = 0;
      hv_PoseForCenteredImage.Dispose();
      HOperatorSet.SetOriginPose(hv_Pose, hv_DX, hv_DY, hv_DZ, out hv_PoseForCenteredImage);

      hv_Dist_ICS.Dispose();
      hv_CenterX.Dispose();
      hv_CenterY.Dispose();
      hv_BelowCenterX.Dispose();
      hv_BelowCenterY.Dispose();
      hv_RightOfCenterX.Dispose();
      hv_RightOfCenterY.Dispose();
      hv_Dist_WCS_Vertical.Dispose();
      hv_Dist_WCS_Horizontal.Dispose();
      hv_ScaleVertical.Dispose();
      hv_ScaleHorizontal.Dispose();
      hv_DX.Dispose();
      hv_DY.Dispose();
      hv_DZ.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Dist_ICS.Dispose();
      hv_CenterX.Dispose();
      hv_CenterY.Dispose();
      hv_BelowCenterX.Dispose();
      hv_BelowCenterY.Dispose();
      hv_RightOfCenterX.Dispose();
      hv_RightOfCenterY.Dispose();
      hv_Dist_WCS_Vertical.Dispose();
      hv_Dist_WCS_Horizontal.Dispose();
      hv_ScaleVertical.Dispose();
      hv_ScaleHorizontal.Dispose();
      hv_DX.Dispose();
      hv_DY.Dispose();
      hv_DZ.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Read_EthernetIP_Data (HTuple hv_Tag_Lectura, HTuple hv_SerialHandle, 
      out HTuple hv_Variable)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Limite = new HTuple(), hv_Conteo = new HTuple();
    HTuple hv_Peticion = new HTuple(), hv_Variable_OPC = new HTuple();
    HTuple hv_Data = new HTuple(), hv_VarSerial = new HTuple();
    HTuple hv_Nchar = new HTuple();
    // Initialize local and output iconic variables 
    hv_Variable = new HTuple();
    try
    {


      hv_Limite.Dispose();
      hv_Limite = 50;
      hv_Conteo.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Conteo = hv_Limite+1;
      }
      hv_Peticion.Dispose();
      hv_Peticion = "Lectura";
      hv_Variable_OPC.Dispose();
      hv_Variable_OPC = new HTuple(hv_Tag_Lectura);

      hv_Data.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Data = (hv_Peticion+";")+hv_Variable_OPC;
      }

      while ((int)(new HTuple(hv_Conteo.TupleGreater(hv_Limite))) != 0)
      {
        hv_Conteo.Dispose();
        hv_Conteo = 0;



        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.WriteSerial(hv_SerialHandle, hv_Data.TupleOrds());
        }




        hv_VarSerial.Dispose();
        hv_VarSerial = 0;

        while ((int)((new HTuple(hv_VarSerial.TupleLess(1))).TupleAnd(new HTuple(hv_Conteo.TupleLess(
            hv_Limite)))) != 0)
        {

          //Numero de caracteres a leer
          hv_Nchar.Dispose();
          HOperatorSet.ReadSerial(hv_SerialHandle, 50, out hv_Nchar);
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Nchar = hv_Nchar.TupleChrt()
              ;
          hv_Nchar.Dispose();
          hv_Nchar = ExpTmpLocalVar_Nchar;
          }
          }
          hv_Variable.Dispose();
          HOperatorSet.TupleNumber(hv_Nchar, out hv_Variable);
          hv_VarSerial.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_VarSerial = new HTuple(hv_Nchar.TupleLength()
              );
          }

          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Conteo = hv_Conteo+1;
          hv_Conteo.Dispose();
          hv_Conteo = ExpTmpLocalVar_Conteo;
          }
          }
        }



      }


      hv_Limite.Dispose();
      hv_Conteo.Dispose();
      hv_Peticion.Dispose();
      hv_Variable_OPC.Dispose();
      hv_Data.Dispose();
      hv_VarSerial.Dispose();
      hv_Nchar.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Limite.Dispose();
      hv_Conteo.Dispose();
      hv_Peticion.Dispose();
      hv_Variable_OPC.Dispose();
      hv_Data.Dispose();
      hv_VarSerial.Dispose();
      hv_Nchar.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void RECETA_AUTOMATICA (HTuple hv_SerialHandle, HTuple hv_Receta)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Entidad = new HTuple(), hv_ToolInBasePoseIni = new HTuple();
    HTuple hv_ToolInBasePose = new HTuple(), hv_Derivada = new HTuple();
    HTuple hv_TodosCeros = new HTuple(), hv_Index = new HTuple();
    HTuple hv_FileHandle = new HTuple(), hv_OffsetZ = new HTuple();
    HTuple hv_Zpos = new HTuple(), hv_Datos = new HTuple();
    // Initialize local and output iconic variables 
    try
    {




      while ((int)(hv_Receta) != 0)
      {
        //********************************
        //    ENTIDAD A GUARDAR
        //********************************
        hv_Entidad.Dispose();
        hv_Entidad = "MANGA";
        //********************************

        hv_ToolInBasePoseIni.Dispose();
        Get_Robot_Pose(hv_SerialHandle, out hv_ToolInBasePoseIni);

        while ((int)(hv_Receta) != 0)
        {

          hv_ToolInBasePose.Dispose();
          Get_Robot_Pose_COPY_1(hv_SerialHandle, out hv_ToolInBasePose);
          // dev_inspect_ctrl(...); only in hdevelop
          hv_Derivada.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Derivada = hv_ToolInBasePoseIni-hv_ToolInBasePose;
          }

          hv_TodosCeros.Dispose();
          hv_TodosCeros = 0;
          for (hv_Index=0; (int)hv_Index<=(int)((new HTuple(hv_ToolInBasePose.TupleLength()
              ))-1); hv_Index = (int)hv_Index + 1)
          {
            if ((int)(new HTuple(((hv_Derivada.TupleSelect(hv_Index))).TupleNotEqual(
                0))) != 0)
            {
              using (HDevDisposeHelper dh = new HDevDisposeHelper())
              {
              {
              HTuple 
                ExpTmpLocalVar_TodosCeros = hv_TodosCeros+1;
              hv_TodosCeros.Dispose();
              hv_TodosCeros = ExpTmpLocalVar_TodosCeros;
              }
              }
            }

          }


          if ((int)(new HTuple(hv_TodosCeros.TupleGreater(0))) != 0)
          {

            hv_ToolInBasePose.Dispose();
            Get_Robot_Pose(hv_SerialHandle, out hv_ToolInBasePose);
            hv_ToolInBasePose.Dispose();
            Get_Robot_Pose(hv_SerialHandle, out hv_ToolInBasePose);
            hv_ToolInBasePose.Dispose();
            Get_Robot_Pose(hv_SerialHandle, out hv_ToolInBasePose);
            hv_FileHandle.Dispose();
            HOperatorSet.OpenFile("C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/1.- BD/Receta.csv", 
                "append", out hv_FileHandle);


            hv_OffsetZ.Dispose();
            hv_OffsetZ = 0;

            hv_Zpos.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_Zpos = (hv_ToolInBasePose.TupleSelect(
                2))+hv_OffsetZ;
            }

            hv_Datos.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_Datos = (((((((((((hv_Entidad+";")+(hv_ToolInBasePose.TupleSelect(
                0)))+";")+(hv_ToolInBasePose.TupleSelect(1)))+";")+hv_Zpos)+";")+(hv_ToolInBasePose.TupleSelect(
                5)))+";")+(hv_ToolInBasePose.TupleSelect(4)))+";")+(hv_ToolInBasePose.TupleSelect(
                3));
            }
            HOperatorSet.FwriteString(hv_FileHandle, hv_Datos);
            HOperatorSet.FnewLine(hv_FileHandle);
            HOperatorSet.CloseFile(hv_FileHandle);

          }

          hv_ToolInBasePoseIni.Dispose();
          hv_ToolInBasePoseIni = new HTuple(hv_ToolInBasePose);


        }
      }

      hv_Entidad.Dispose();
      hv_ToolInBasePoseIni.Dispose();
      hv_ToolInBasePose.Dispose();
      hv_Derivada.Dispose();
      hv_TodosCeros.Dispose();
      hv_Index.Dispose();
      hv_FileHandle.Dispose();
      hv_OffsetZ.Dispose();
      hv_Zpos.Dispose();
      hv_Datos.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Entidad.Dispose();
      hv_ToolInBasePoseIni.Dispose();
      hv_ToolInBasePose.Dispose();
      hv_Derivada.Dispose();
      hv_TodosCeros.Dispose();
      hv_Index.Dispose();
      hv_FileHandle.Dispose();
      hv_OffsetZ.Dispose();
      hv_Zpos.Dispose();
      hv_Datos.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Rototate_ROI (HTuple hv_Pose_Refinada, HTuple hv_ROI3D_rotate, HTuple hv_Escena3D_RAW, 
      HTuple hv_Parametros_Visualizacion, HTuple hv_Valores_Visualizacion, HTuple hv_Visualizar3D, 
      HTuple hv_Vector_Segmento, out HTuple hv_Pose_Segmentos, out HTuple hv_ROI3D_rotateOut)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_WindowHandle = new HTuple(), hv_PoseOut1 = new HTuple();
    HTuple hv_Exception = new HTuple(), hv_ErrorMsg0 = new HTuple();
    HTuple hv_ErrorMsg1 = new HTuple(), hv_ErrorMsg2 = new HTuple();
    HTuple hv_ErrorMsg3 = new HTuple(), hv_MensajeError = new HTuple();
    HTuple hv_Msg_Sub_Proceso = new HTuple(), hv_Estado_SubProceso = new HTuple();
    // Initialize local and output iconic variables 
    hv_Pose_Segmentos = new HTuple();
    hv_ROI3D_rotateOut = new HTuple();
    try
    {
      hv_ROI3D_rotateOut.Dispose();
      hv_ROI3D_rotateOut = new HTuple(hv_ROI3D_rotate);
      try
      {

        //Roto el ROI 3D respecto a la esquina encontrada
        hv_Pose_Segmentos.Dispose();
        {
        HTuple ExpTmpOutVar_0;
        Get_Rotate_ROI3D(hv_Pose_Refinada, hv_ROI3D_rotateOut, out hv_Pose_Segmentos, 
            out ExpTmpOutVar_0);
        hv_ROI3D_rotateOut.Dispose();
        hv_ROI3D_rotateOut = ExpTmpOutVar_0;
        }
        //dev_get_window(...);
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_PoseOut1.Dispose();
        Visualizar_3D(hv_ROI3D_rotateOut.TupleConcat(hv_Escena3D_RAW), hv_Parametros_Visualizacion, 
            hv_Valores_Visualizacion, hv_Visualizar3D, new HTuple(), new HTuple(), 
            hv_Vector_Segmento.TupleConcat("Modelo"), hv_WindowHandle, out hv_PoseOut1);
        }


      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        HalconException.GetExceptionData(hv_Exception,"error_msg",out hv_ErrorMsg0);
        HalconException.GetExceptionData(hv_Exception,"procedure",out hv_ErrorMsg1);
        HalconException.GetExceptionData(hv_Exception,"operator",out hv_ErrorMsg2);
        HalconException.GetExceptionData(hv_Exception,"program_line",out hv_ErrorMsg3);

        hv_MensajeError.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_MensajeError = (((((hv_ErrorMsg0+" IN ")+hv_ErrorMsg1)+" IN FUNTION ")+hv_ErrorMsg2)+" IN LINE ")+hv_ErrorMsg3;
        }
        //throw (MensajeError)
        hv_Msg_Sub_Proceso.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Msg_Sub_Proceso = "#Error# "+hv_MensajeError;
        }
        hv_Estado_SubProceso.Dispose();
        hv_Estado_SubProceso = 0;

        hv_WindowHandle.Dispose();
        hv_PoseOut1.Dispose();
        hv_Exception.Dispose();
        hv_ErrorMsg0.Dispose();
        hv_ErrorMsg1.Dispose();
        hv_ErrorMsg2.Dispose();
        hv_ErrorMsg3.Dispose();
        hv_MensajeError.Dispose();
        hv_Msg_Sub_Proceso.Dispose();
        hv_Estado_SubProceso.Dispose();

        return;
      }

      hv_WindowHandle.Dispose();
      hv_PoseOut1.Dispose();
      hv_Exception.Dispose();
      hv_ErrorMsg0.Dispose();
      hv_ErrorMsg1.Dispose();
      hv_ErrorMsg2.Dispose();
      hv_ErrorMsg3.Dispose();
      hv_MensajeError.Dispose();
      hv_Msg_Sub_Proceso.Dispose();
      hv_Estado_SubProceso.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_WindowHandle.Dispose();
      hv_PoseOut1.Dispose();
      hv_Exception.Dispose();
      hv_ErrorMsg0.Dispose();
      hv_ErrorMsg1.Dispose();
      hv_ErrorMsg2.Dispose();
      hv_ErrorMsg3.Dispose();
      hv_MensajeError.Dispose();
      hv_Msg_Sub_Proceso.Dispose();
      hv_Estado_SubProceso.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Save_Path_SleeveImg (HTuple hv_PathFile)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_PathLog = new HTuple(), hv_FileHandle = new HTuple();
    // Initialize local and output iconic variables 
    try
    {
      hv_PathLog.Dispose();
      hv_PathLog = "D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/SleeveImg.txt";
      hv_FileHandle.Dispose();
      HOperatorSet.OpenFile(hv_PathLog, "output", out hv_FileHandle);
      HOperatorSet.FwriteString(hv_FileHandle, hv_PathFile);
      HOperatorSet.FnewLine(hv_FileHandle);
      HOperatorSet.CloseFile(hv_FileHandle);

      hv_PathLog.Dispose();
      hv_FileHandle.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_PathLog.Dispose();
      hv_FileHandle.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Save_Pose_Palle (HTuple hv_SerialHandle, HTuple hv_Pose_Refinada, HTuple hv_N_Pallet_to_Scan, 
      HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Pose_Robot)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_ToolInBasePose = new HTuple(), hv_Path = new HTuple();
    HTuple hv_ToolInCamPose = new HTuple(), hv_ObjInCamPose = new HTuple();
    HTuple hv_CamInToolPose = new HTuple(), hv_CamInBasePose = new HTuple();
    HTuple hv_ObjInBasePose = new HTuple(), hv_NamePose = new HTuple();
    HTuple hv_Path_Save_Pose_PalletN = new HTuple();
    // Initialize local and output iconic variables 
    try
    {

      hv_ToolInBasePose.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_ToolInBasePose = new HTuple(hvec_Pose_Robot[0][0].T);
      }

      hv_Path.Dispose();
      hv_Path = "C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/7.-HandEye/1.- Ensenso R1/ToolInCamPose_R1.dat";
      hv_ToolInCamPose.Dispose();
      HOperatorSet.ReadPose(hv_Path, out hv_ToolInCamPose);

      if (hv_ToolInCamPose == null)
        hv_ToolInCamPose = new HTuple();
      hv_ToolInCamPose[HTuple.TupleGenSequence(0,2,1)] = (hv_ToolInCamPose.TupleSelectRange(
          0,2))*1e3;

      hv_ObjInCamPose.Dispose();
      hv_ObjInCamPose = new HTuple(hv_Pose_Refinada);

      hv_CamInToolPose.Dispose();
      HOperatorSet.PoseInvert(hv_ToolInCamPose, out hv_CamInToolPose);
      hv_CamInBasePose.Dispose();
      HOperatorSet.PoseCompose(hv_ToolInBasePose, hv_CamInToolPose, out hv_CamInBasePose);
      hv_ObjInBasePose.Dispose();
      HOperatorSet.PoseCompose(hv_CamInBasePose, hv_ObjInCamPose, out hv_ObjInBasePose);

      hv_NamePose.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_NamePose = "Pallet_"+hv_N_Pallet_to_Scan;
      }
      hv_Path_Save_Pose_PalletN.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Path_Save_Pose_PalletN = ("C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/5.-Ing Software/0 Identificacion de Pallet/"+hv_NamePose)+".dat";
      }

      HOperatorSet.WritePose(hv_CamInBasePose, hv_Path_Save_Pose_PalletN);
      hv_Path_Save_Pose_PalletN.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Path_Save_Pose_PalletN = ("C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/5.-Ing Software/0 Identificacion de Pallet/"+hv_NamePose)+"ObjInBase.dat";
      }
      HOperatorSet.WritePose(hv_ObjInBasePose, hv_Path_Save_Pose_PalletN);
      hv_Path_Save_Pose_PalletN.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Path_Save_Pose_PalletN = ("C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/5.-Ing Software/0 Identificacion de Pallet/"+hv_NamePose)+"ToolInBase.dat";
      }
      HOperatorSet.WritePose(hv_ToolInBasePose, hv_Path_Save_Pose_PalletN);
      hv_Path_Save_Pose_PalletN.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Path_Save_Pose_PalletN = ("C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/5.-Ing Software/0 Identificacion de Pallet/"+hv_NamePose)+"ObjInCam.dat";
      }
      HOperatorSet.WritePose(hv_ObjInCamPose, hv_Path_Save_Pose_PalletN);



      hv_ToolInBasePose.Dispose();
      hv_Path.Dispose();
      hv_ToolInCamPose.Dispose();
      hv_ObjInCamPose.Dispose();
      hv_CamInToolPose.Dispose();
      hv_CamInBasePose.Dispose();
      hv_ObjInBasePose.Dispose();
      hv_NamePose.Dispose();
      hv_Path_Save_Pose_PalletN.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_ToolInBasePose.Dispose();
      hv_Path.Dispose();
      hv_ToolInCamPose.Dispose();
      hv_ObjInCamPose.Dispose();
      hv_CamInToolPose.Dispose();
      hv_CamInBasePose.Dispose();
      hv_ObjInBasePose.Dispose();
      hv_NamePose.Dispose();
      hv_Path_Save_Pose_PalletN.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Segmentar_Core (HObject ho_HeightMap, HObject ho_X, HObject ho_Y, HObject ho_Z, 
      out HObject ho_Entidad, HTuple hv_DitsiObjMax, out HTuple hv_Estado_Funcion)
  {




    // Local iconic variables 

    HObject ho_Region=null, ho_HeightMap_Scalada=null;
    HObject ho_HeightMap_Region=null;

    // Local control variables 

    HTuple hv_UmbralMaxThr = new HTuple(), hv_escala = new HTuple();
    HTuple hv_Histo = new HTuple(), hv_BinSize = new HTuple();
    HTuple hv_Sum_Histo = new HTuple(), hv_Mascara = new HTuple();
    HTuple hv_Vector_Distribucion = new HTuple(), hv_init_vector = new HTuple();
    HTuple hv_flag_vector = new HTuple(), hv_aux_suma = new HTuple();
    HTuple hv_Index = new HTuple(), hv_Derivada = new HTuple();
    HTuple hv_Factor_Der = new HTuple(), hv_Function = new HTuple();
    HTuple hv_Aux_Val_Max = new HTuple(), hv_Flag_indx_max = new HTuple();
    HTuple hv_index_protection = new HTuple(), hv_Alt_Min = new HTuple();
    HTuple hv_Alt_Max = new HTuple(), hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Entidad);
    HOperatorSet.GenEmptyObj(out ho_Region);
    HOperatorSet.GenEmptyObj(out ho_HeightMap_Scalada);
    HOperatorSet.GenEmptyObj(out ho_HeightMap_Region);
    hv_Estado_Funcion = new HTuple();
    try
    {
      hv_Estado_Funcion.Dispose();
      hv_Estado_Funcion = 0;
      //
      try
      {
        //
        //********************************************************
        //1.-  !!!!!!!!! threshols dinamico!!!!!!!!!!!!!!!!!!!!!!!!!!
        //********************************************************

        hv_UmbralMaxThr.Dispose();
        hv_UmbralMaxThr = new HTuple(hv_DitsiObjMax);
        ho_Region.Dispose();
        HOperatorSet.Threshold(ho_HeightMap, out ho_Region, 900, hv_UmbralMaxThr);
        hv_escala.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_escala = 255.0/hv_UmbralMaxThr;
        }
        ho_HeightMap_Scalada.Dispose();
        HOperatorSet.ScaleImage(ho_HeightMap, out ho_HeightMap_Scalada, hv_escala, 
            0);
        ho_HeightMap_Region.Dispose();
        HOperatorSet.Threshold(ho_HeightMap_Scalada, out ho_HeightMap_Region, 0, 
            255);
        hv_Histo.Dispose();hv_BinSize.Dispose();
        HOperatorSet.GrayHistoRange(ho_HeightMap_Region, ho_HeightMap_Scalada, 0, 
            255, 256, out hv_Histo, out hv_BinSize);
        hv_Sum_Histo.Dispose();
        HOperatorSet.TupleSum(hv_Histo, out hv_Sum_Histo);
        //
        //# #########################################################
        //# ### Mientras mas grabnde menos sensible a cambios #######   
        hv_Mascara.Dispose();
        hv_Mascara = 1;
        //# ########################################################
        //
        hv_Vector_Distribucion.Dispose();
        hv_Vector_Distribucion = new HTuple();
        hv_init_vector.Dispose();
        hv_init_vector = 255;
        hv_flag_vector.Dispose();
        hv_flag_vector = 0;
        hv_aux_suma.Dispose();
        hv_aux_suma = 0.0;
        //
        HTuple end_val26 = 0;
        HTuple step_val26 = -1;
        for (hv_Index=hv_init_vector; hv_Index.Continue(end_val26, step_val26); hv_Index = hv_Index.TupleAdd(step_val26))
        {
          //
          if (hv_Vector_Distribucion == null)
            hv_Vector_Distribucion = new HTuple();
          hv_Vector_Distribucion[hv_Index] = hv_aux_suma+(((hv_Histo.TupleSelect(
              hv_Index))*100.0)/hv_Sum_Histo);
          hv_aux_suma.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_aux_suma = hv_Vector_Distribucion.TupleSelect(
              hv_Index);
          }
        }
        //
        hv_Derivada.Dispose();
        hv_Derivada = new HTuple();
        hv_Factor_Der.Dispose();
        hv_Factor_Der = 1000;
        hv_Mascara.Dispose();
        hv_Mascara = 1;
        HTuple end_val35 = 50;
        HTuple step_val35 = -hv_Mascara;
        for (hv_Index=hv_init_vector; hv_Index.Continue(end_val35, step_val35); hv_Index = hv_Index.TupleAdd(step_val35))
        {
          //
          if (hv_Derivada == null)
            hv_Derivada = new HTuple();
          hv_Derivada[hv_Index] = ((((hv_Vector_Distribucion.TupleSelect(hv_Index))-(hv_Vector_Distribucion.TupleSelect(
              hv_Index-hv_Mascara)))).TupleAbs())*hv_Factor_Der;
          //
        }
        //
        //
        //*********************************************************
        //* Busco el primer cambio brusco de posicion *************
        //* El umbral de cambio es Aux_Val_Max ********************
        //*********************************************************
        hv_Function.Dispose();
        HOperatorSet.CreateFunct1dArray(hv_Derivada, out hv_Function);

        //*  dev_inspect_ctrl (Function)
        //***********************************************************************************************
        hv_Aux_Val_Max.Dispose();
        hv_Aux_Val_Max = 30000;
        //****************************************************************************************************
        hv_Flag_indx_max.Dispose();
        hv_Flag_indx_max = 255;
        HTuple end_val53 = 50;
        HTuple step_val53 = -hv_Mascara;
        for (hv_Index=hv_init_vector; hv_Index.Continue(end_val53, step_val53); hv_Index = hv_Index.TupleAdd(step_val53))
        {
          //
          if ((int)(new HTuple(((hv_Derivada.TupleSelect(hv_Index))).TupleGreater(
              hv_Aux_Val_Max))) != 0)
          {
            hv_Aux_Val_Max.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_Aux_Val_Max = hv_Derivada.TupleSelect(
                hv_Index);
            }
            hv_Flag_indx_max.Dispose();
            hv_Flag_indx_max = new HTuple(hv_Index);
          }
          //
        }

        //# #########################################################
        //# ######## Grado de proteccion para moverse entre el 
        //# ####### histograma
        hv_index_protection.Dispose();
        hv_index_protection = 3;
        //# #########################################################
        //
        hv_Alt_Min.Dispose();
        hv_Alt_Min = 110;
        hv_Alt_Max.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Alt_Max = hv_Flag_indx_max+hv_index_protection;
        }
        ho_Entidad.Dispose();
        HOperatorSet.Threshold(ho_HeightMap_Scalada, out ho_Entidad, hv_Alt_Min, 
            hv_Alt_Max);

        hv_Estado_Funcion.Dispose();
        hv_Estado_Funcion = 1;
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_Estado_Funcion.Dispose();
        hv_Estado_Funcion = 0;
        //* --> descomentar EN c#  Fx_Aux.DataLogError = Fx_Aux.ErrorCatch(HDevExpDefaultException1);
        //
      }
      //
      //
      ho_Region.Dispose();
      ho_HeightMap_Scalada.Dispose();
      ho_HeightMap_Region.Dispose();

      hv_UmbralMaxThr.Dispose();
      hv_escala.Dispose();
      hv_Histo.Dispose();
      hv_BinSize.Dispose();
      hv_Sum_Histo.Dispose();
      hv_Mascara.Dispose();
      hv_Vector_Distribucion.Dispose();
      hv_init_vector.Dispose();
      hv_flag_vector.Dispose();
      hv_aux_suma.Dispose();
      hv_Index.Dispose();
      hv_Derivada.Dispose();
      hv_Factor_Der.Dispose();
      hv_Function.Dispose();
      hv_Aux_Val_Max.Dispose();
      hv_Flag_indx_max.Dispose();
      hv_index_protection.Dispose();
      hv_Alt_Min.Dispose();
      hv_Alt_Max.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_Region.Dispose();
      ho_HeightMap_Scalada.Dispose();
      ho_HeightMap_Region.Dispose();

      hv_UmbralMaxThr.Dispose();
      hv_escala.Dispose();
      hv_Histo.Dispose();
      hv_BinSize.Dispose();
      hv_Sum_Histo.Dispose();
      hv_Mascara.Dispose();
      hv_Vector_Distribucion.Dispose();
      hv_init_vector.Dispose();
      hv_flag_vector.Dispose();
      hv_aux_suma.Dispose();
      hv_Index.Dispose();
      hv_Derivada.Dispose();
      hv_Factor_Der.Dispose();
      hv_Function.Dispose();
      hv_Aux_Val_Max.Dispose();
      hv_Flag_indx_max.Dispose();
      hv_index_protection.Dispose();
      hv_Alt_Min.Dispose();
      hv_Alt_Max.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Segmentar_Core_COPY_1 (HObject ho_HeightMap, HObject ho_X, HObject ho_Y, 
      HObject ho_Z, out HObject ho_Entidad, out HTuple hv_Estado_Funcion)
  {



    // Local iconic variables 

    HObject ho_Region=null, ho_HeightMap_Scalada=null;
    HObject ho_HeightMap_Region=null;

    // Local control variables 

    HTuple hv_UmbralMaxThr = new HTuple(), hv_escala = new HTuple();
    HTuple hv_Histo = new HTuple(), hv_BinSize = new HTuple();
    HTuple hv_Sum_Histo = new HTuple(), hv_Mascara = new HTuple();
    HTuple hv_Vector_Distribucion = new HTuple(), hv_init_vector = new HTuple();
    HTuple hv_flag_vector = new HTuple(), hv_aux_suma = new HTuple();
    HTuple hv_Index = new HTuple(), hv_Derivada = new HTuple();
    HTuple hv_Factor_Der = new HTuple(), hv_Function = new HTuple();
    HTuple hv_Aux_Val_Max = new HTuple(), hv_Flag_indx_max = new HTuple();
    HTuple hv_index_protection = new HTuple(), hv_Alt_Min = new HTuple();
    HTuple hv_Alt_Max = new HTuple(), hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Entidad);
    HOperatorSet.GenEmptyObj(out ho_Region);
    HOperatorSet.GenEmptyObj(out ho_HeightMap_Scalada);
    HOperatorSet.GenEmptyObj(out ho_HeightMap_Region);
    hv_Estado_Funcion = new HTuple();
    try
    {
      hv_Estado_Funcion.Dispose();
      hv_Estado_Funcion = 0;

      try
      {

        //********************************************************
        //1.-  !!!!!!!!! threshols dinamico!!!!!!!!!!!!!!!!!!!!!!!!!!
        //********************************************************

        hv_UmbralMaxThr.Dispose();
        hv_UmbralMaxThr = 1600.0;
        ho_Region.Dispose();
        HOperatorSet.Threshold(ho_HeightMap, out ho_Region, 900, hv_UmbralMaxThr);
        hv_escala.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_escala = 255.0/hv_UmbralMaxThr;
        }
        ho_HeightMap_Scalada.Dispose();
        HOperatorSet.ScaleImage(ho_HeightMap, out ho_HeightMap_Scalada, hv_escala, 
            0);
        ho_HeightMap_Region.Dispose();
        HOperatorSet.Threshold(ho_HeightMap_Scalada, out ho_HeightMap_Region, 0, 
            255);
        hv_Histo.Dispose();hv_BinSize.Dispose();
        HOperatorSet.GrayHistoRange(ho_HeightMap_Region, ho_HeightMap_Scalada, 0, 
            255, 256, out hv_Histo, out hv_BinSize);
        hv_Sum_Histo.Dispose();
        HOperatorSet.TupleSum(hv_Histo, out hv_Sum_Histo);

        //# #########################################################
        //# ### Mientras mas grabnde menos sensible a cambios #######   
        hv_Mascara.Dispose();
        hv_Mascara = 1;
        //# ########################################################

        hv_Vector_Distribucion.Dispose();
        hv_Vector_Distribucion = new HTuple();
        hv_init_vector.Dispose();
        hv_init_vector = 255;
        hv_flag_vector.Dispose();
        hv_flag_vector = 0;
        hv_aux_suma.Dispose();
        hv_aux_suma = 0.0;

        HTuple end_val26 = 0;
        HTuple step_val26 = -1;
        for (hv_Index=hv_init_vector; hv_Index.Continue(end_val26, step_val26); hv_Index = hv_Index.TupleAdd(step_val26))
        {

          if (hv_Vector_Distribucion == null)
            hv_Vector_Distribucion = new HTuple();
          hv_Vector_Distribucion[hv_Index] = hv_aux_suma+(((hv_Histo.TupleSelect(
              hv_Index))*100.0)/hv_Sum_Histo);
          hv_aux_suma.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_aux_suma = hv_Vector_Distribucion.TupleSelect(
              hv_Index);
          }
        }

        hv_Derivada.Dispose();
        hv_Derivada = new HTuple();
        hv_Factor_Der.Dispose();
        hv_Factor_Der = 1000;
        hv_Mascara.Dispose();
        hv_Mascara = 1;
        HTuple end_val35 = 50;
        HTuple step_val35 = -hv_Mascara;
        for (hv_Index=hv_init_vector; hv_Index.Continue(end_val35, step_val35); hv_Index = hv_Index.TupleAdd(step_val35))
        {

          if (hv_Derivada == null)
            hv_Derivada = new HTuple();
          hv_Derivada[hv_Index] = ((((hv_Vector_Distribucion.TupleSelect(hv_Index))-(hv_Vector_Distribucion.TupleSelect(
              hv_Index-hv_Mascara)))).TupleAbs())*hv_Factor_Der;

        }


        //*********************************************************
        //* Busco el primer cambio brusco de posicion *************
        //* El umbral de cambio es Aux_Val_Max ********************
        //*********************************************************
        hv_Function.Dispose();
        HOperatorSet.CreateFunct1dArray(hv_Derivada, out hv_Function);

        //*   dev_inspect_ctrl (Function)
        //***********************************************************************************************
        hv_Aux_Val_Max.Dispose();
        hv_Aux_Val_Max = 30000;
        //****************************************************************************************************
        hv_Flag_indx_max.Dispose();
        hv_Flag_indx_max = 255;
        HTuple end_val53 = 50;
        HTuple step_val53 = -hv_Mascara;
        for (hv_Index=hv_init_vector; hv_Index.Continue(end_val53, step_val53); hv_Index = hv_Index.TupleAdd(step_val53))
        {

          if ((int)(new HTuple(((hv_Derivada.TupleSelect(hv_Index))).TupleGreater(
              hv_Aux_Val_Max))) != 0)
          {
            hv_Aux_Val_Max.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_Aux_Val_Max = hv_Derivada.TupleSelect(
                hv_Index);
            }
            hv_Flag_indx_max.Dispose();
            hv_Flag_indx_max = new HTuple(hv_Index);
          }

        }

        //# #########################################################
        //# ######## Grado de proteccion para moverse entre el 
        //# ####### histograma
        hv_index_protection.Dispose();
        hv_index_protection = 4;
        //# #########################################################

        hv_Alt_Min.Dispose();
        hv_Alt_Min = 110;
        hv_Alt_Max.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Alt_Max = hv_Flag_indx_max-hv_index_protection;
        }
        ho_Entidad.Dispose();
        HOperatorSet.Threshold(ho_HeightMap_Scalada, out ho_Entidad, hv_Alt_Min, 
            hv_Alt_Max);

        hv_Estado_Funcion.Dispose();
        hv_Estado_Funcion = 1;
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_Estado_Funcion.Dispose();
        hv_Estado_Funcion = 0;
        //* --> descomentar EN c#  Fx_Aux.DataLogError = Fx_Aux.ErrorCatch(HDevExpDefaultException1);

      }


      ho_Region.Dispose();
      ho_HeightMap_Scalada.Dispose();
      ho_HeightMap_Region.Dispose();

      hv_UmbralMaxThr.Dispose();
      hv_escala.Dispose();
      hv_Histo.Dispose();
      hv_BinSize.Dispose();
      hv_Sum_Histo.Dispose();
      hv_Mascara.Dispose();
      hv_Vector_Distribucion.Dispose();
      hv_init_vector.Dispose();
      hv_flag_vector.Dispose();
      hv_aux_suma.Dispose();
      hv_Index.Dispose();
      hv_Derivada.Dispose();
      hv_Factor_Der.Dispose();
      hv_Function.Dispose();
      hv_Aux_Val_Max.Dispose();
      hv_Flag_indx_max.Dispose();
      hv_index_protection.Dispose();
      hv_Alt_Min.Dispose();
      hv_Alt_Max.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_Region.Dispose();
      ho_HeightMap_Scalada.Dispose();
      ho_HeightMap_Region.Dispose();

      hv_UmbralMaxThr.Dispose();
      hv_escala.Dispose();
      hv_Histo.Dispose();
      hv_BinSize.Dispose();
      hv_Sum_Histo.Dispose();
      hv_Mascara.Dispose();
      hv_Vector_Distribucion.Dispose();
      hv_init_vector.Dispose();
      hv_flag_vector.Dispose();
      hv_aux_suma.Dispose();
      hv_Index.Dispose();
      hv_Derivada.Dispose();
      hv_Factor_Der.Dispose();
      hv_Function.Dispose();
      hv_Aux_Val_Max.Dispose();
      hv_Flag_indx_max.Dispose();
      hv_index_protection.Dispose();
      hv_Alt_Min.Dispose();
      hv_Alt_Max.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Segmentar_Core_COPY_2 (HObject ho_HeightMap, HObject ho_X, HObject ho_Y, 
      HObject ho_Z, out HObject ho_Entidad, HTuple hv_DitsiObjMax, out HTuple hv_Estado_Funcion)
  {




    // Local iconic variables 

    HObject ho_Region=null, ho_HeightMap_Scalada=null;
    HObject ho_HeightMap_Region=null;

    // Local control variables 

    HTuple hv_UmbralMaxThr = new HTuple(), hv_escala = new HTuple();
    HTuple hv_Histo = new HTuple(), hv_BinSize = new HTuple();
    HTuple hv_Sum_Histo = new HTuple(), hv_Mascara = new HTuple();
    HTuple hv_Vector_Distribucion = new HTuple(), hv_init_vector = new HTuple();
    HTuple hv_flag_vector = new HTuple(), hv_aux_suma = new HTuple();
    HTuple hv_Index = new HTuple(), hv_Derivada = new HTuple();
    HTuple hv_Factor_Der = new HTuple(), hv_Function = new HTuple();
    HTuple hv_Aux_Val_Max = new HTuple(), hv_Flag_indx_max = new HTuple();
    HTuple hv_index_protection = new HTuple(), hv_Alt_Min = new HTuple();
    HTuple hv_Alt_Max = new HTuple(), hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Entidad);
    HOperatorSet.GenEmptyObj(out ho_Region);
    HOperatorSet.GenEmptyObj(out ho_HeightMap_Scalada);
    HOperatorSet.GenEmptyObj(out ho_HeightMap_Region);
    hv_Estado_Funcion = new HTuple();
    try
    {
      hv_Estado_Funcion.Dispose();
      hv_Estado_Funcion = 0;

      try
      {

        //********************************************************
        //1.-  !!!!!!!!! threshols dinamico!!!!!!!!!!!!!!!!!!!!!!!!!!
        //********************************************************

        hv_UmbralMaxThr.Dispose();
        hv_UmbralMaxThr = new HTuple(hv_DitsiObjMax);
        ho_Region.Dispose();
        HOperatorSet.Threshold(ho_HeightMap, out ho_Region, 900, hv_UmbralMaxThr);
        hv_escala.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_escala = 255.0/hv_UmbralMaxThr;
        }
        ho_HeightMap_Scalada.Dispose();
        HOperatorSet.ScaleImage(ho_HeightMap, out ho_HeightMap_Scalada, hv_escala, 
            0);
        ho_HeightMap_Region.Dispose();
        HOperatorSet.Threshold(ho_HeightMap_Scalada, out ho_HeightMap_Region, 0, 
            255);
        hv_Histo.Dispose();hv_BinSize.Dispose();
        HOperatorSet.GrayHistoRange(ho_HeightMap_Region, ho_HeightMap_Scalada, 0, 
            255, 256, out hv_Histo, out hv_BinSize);
        hv_Sum_Histo.Dispose();
        HOperatorSet.TupleSum(hv_Histo, out hv_Sum_Histo);

        //# #########################################################
        //# ### Mientras mas grabnde menos sensible a cambios #######   
        hv_Mascara.Dispose();
        hv_Mascara = 1;
        //# ########################################################

        hv_Vector_Distribucion.Dispose();
        hv_Vector_Distribucion = new HTuple();
        hv_init_vector.Dispose();
        hv_init_vector = 255;
        hv_flag_vector.Dispose();
        hv_flag_vector = 0;
        hv_aux_suma.Dispose();
        hv_aux_suma = 0.0;

        HTuple end_val26 = 0;
        HTuple step_val26 = -1;
        for (hv_Index=hv_init_vector; hv_Index.Continue(end_val26, step_val26); hv_Index = hv_Index.TupleAdd(step_val26))
        {

          if (hv_Vector_Distribucion == null)
            hv_Vector_Distribucion = new HTuple();
          hv_Vector_Distribucion[hv_Index] = hv_aux_suma+(((hv_Histo.TupleSelect(
              hv_Index))*100.0)/hv_Sum_Histo);
          hv_aux_suma.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_aux_suma = hv_Vector_Distribucion.TupleSelect(
              hv_Index);
          }
        }

        hv_Derivada.Dispose();
        hv_Derivada = new HTuple();
        hv_Factor_Der.Dispose();
        hv_Factor_Der = 1000;
        hv_Mascara.Dispose();
        hv_Mascara = 1;
        HTuple end_val35 = 50;
        HTuple step_val35 = -hv_Mascara;
        for (hv_Index=hv_init_vector; hv_Index.Continue(end_val35, step_val35); hv_Index = hv_Index.TupleAdd(step_val35))
        {

          if (hv_Derivada == null)
            hv_Derivada = new HTuple();
          hv_Derivada[hv_Index] = ((((hv_Vector_Distribucion.TupleSelect(hv_Index))-(hv_Vector_Distribucion.TupleSelect(
              hv_Index-hv_Mascara)))).TupleAbs())*hv_Factor_Der;

        }


        //*********************************************************
        //* Busco el primer cambio brusco de posicion *************
        //* El umbral de cambio es Aux_Val_Max ********************
        //*********************************************************
        hv_Function.Dispose();
        HOperatorSet.CreateFunct1dArray(hv_Derivada, out hv_Function);

        //*   dev_inspect_ctrl (Function)
        //***********************************************************************************************
        hv_Aux_Val_Max.Dispose();
        hv_Aux_Val_Max = 30000;
        //****************************************************************************************************
        hv_Flag_indx_max.Dispose();
        hv_Flag_indx_max = 255;
        HTuple end_val53 = 50;
        HTuple step_val53 = -hv_Mascara;
        for (hv_Index=hv_init_vector; hv_Index.Continue(end_val53, step_val53); hv_Index = hv_Index.TupleAdd(step_val53))
        {

          if ((int)(new HTuple(((hv_Derivada.TupleSelect(hv_Index))).TupleGreater(
              hv_Aux_Val_Max))) != 0)
          {
            hv_Aux_Val_Max.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_Aux_Val_Max = hv_Derivada.TupleSelect(
                hv_Index);
            }
            hv_Flag_indx_max.Dispose();
            hv_Flag_indx_max = new HTuple(hv_Index);
          }

        }

        //# #########################################################
        //# ######## Grado de proteccion para moverse entre el 
        //# ####### histograma
        hv_index_protection.Dispose();
        hv_index_protection = 3;
        //# #########################################################

        hv_Alt_Min.Dispose();
        hv_Alt_Min = 110;
        hv_Alt_Max.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Alt_Max = hv_Flag_indx_max-hv_index_protection;
        }
        ho_Entidad.Dispose();
        HOperatorSet.Threshold(ho_HeightMap_Scalada, out ho_Entidad, hv_Alt_Min, 
            hv_Alt_Max);

        hv_Estado_Funcion.Dispose();
        hv_Estado_Funcion = 1;
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_Estado_Funcion.Dispose();
        hv_Estado_Funcion = 0;
        //* --> descomentar EN c#  Fx_Aux.DataLogError = Fx_Aux.ErrorCatch(HDevExpDefaultException1);

      }


      ho_Region.Dispose();
      ho_HeightMap_Scalada.Dispose();
      ho_HeightMap_Region.Dispose();

      hv_UmbralMaxThr.Dispose();
      hv_escala.Dispose();
      hv_Histo.Dispose();
      hv_BinSize.Dispose();
      hv_Sum_Histo.Dispose();
      hv_Mascara.Dispose();
      hv_Vector_Distribucion.Dispose();
      hv_init_vector.Dispose();
      hv_flag_vector.Dispose();
      hv_aux_suma.Dispose();
      hv_Index.Dispose();
      hv_Derivada.Dispose();
      hv_Factor_Der.Dispose();
      hv_Function.Dispose();
      hv_Aux_Val_Max.Dispose();
      hv_Flag_indx_max.Dispose();
      hv_index_protection.Dispose();
      hv_Alt_Min.Dispose();
      hv_Alt_Max.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_Region.Dispose();
      ho_HeightMap_Scalada.Dispose();
      ho_HeightMap_Region.Dispose();

      hv_UmbralMaxThr.Dispose();
      hv_escala.Dispose();
      hv_Histo.Dispose();
      hv_BinSize.Dispose();
      hv_Sum_Histo.Dispose();
      hv_Mascara.Dispose();
      hv_Vector_Distribucion.Dispose();
      hv_init_vector.Dispose();
      hv_flag_vector.Dispose();
      hv_aux_suma.Dispose();
      hv_Index.Dispose();
      hv_Derivada.Dispose();
      hv_Factor_Der.Dispose();
      hv_Function.Dispose();
      hv_Aux_Val_Max.Dispose();
      hv_Flag_indx_max.Dispose();
      hv_index_protection.Dispose();
      hv_Alt_Min.Dispose();
      hv_Alt_Max.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Segmentar_Core_COPY_3 (HObject ho_HeightMap, HObject ho_X, HObject ho_Y, 
      HObject ho_Z, out HObject ho_Entidad, HTuple hv_DitsiObjMax, out HTuple hv_Estado_Funcion)
  {




    // Local iconic variables 

    HObject ho_Region=null, ho_HeightMap_Scalada=null;
    HObject ho_HeightMap_Region=null;

    // Local control variables 

    HTuple hv_UmbralMaxThr = new HTuple(), hv_escala = new HTuple();
    HTuple hv_Histo = new HTuple(), hv_BinSize = new HTuple();
    HTuple hv_Sum_Histo = new HTuple(), hv_Mascara = new HTuple();
    HTuple hv_Vector_Distribucion = new HTuple(), hv_init_vector = new HTuple();
    HTuple hv_flag_vector = new HTuple(), hv_aux_suma = new HTuple();
    HTuple hv_Index = new HTuple(), hv_Derivada = new HTuple();
    HTuple hv_Factor_Der = new HTuple(), hv_Function = new HTuple();
    HTuple hv_Aux_Val_Max = new HTuple(), hv_Flag_indx_max = new HTuple();
    HTuple hv_index_protection = new HTuple(), hv_Alt_Min = new HTuple();
    HTuple hv_Alt_Max = new HTuple(), hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Entidad);
    HOperatorSet.GenEmptyObj(out ho_Region);
    HOperatorSet.GenEmptyObj(out ho_HeightMap_Scalada);
    HOperatorSet.GenEmptyObj(out ho_HeightMap_Region);
    hv_Estado_Funcion = new HTuple();
    try
    {
      hv_Estado_Funcion.Dispose();
      hv_Estado_Funcion = 0;

      try
      {

        //********************************************************
        //1.-  !!!!!!!!! threshols dinamico!!!!!!!!!!!!!!!!!!!!!!!!!!
        //********************************************************

        hv_UmbralMaxThr.Dispose();
        hv_UmbralMaxThr = new HTuple(hv_DitsiObjMax);
        ho_Region.Dispose();
        HOperatorSet.Threshold(ho_HeightMap, out ho_Region, 900, hv_UmbralMaxThr);
        hv_escala.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_escala = 255.0/hv_UmbralMaxThr;
        }
        ho_HeightMap_Scalada.Dispose();
        HOperatorSet.ScaleImage(ho_HeightMap, out ho_HeightMap_Scalada, hv_escala, 
            0);
        ho_HeightMap_Region.Dispose();
        HOperatorSet.Threshold(ho_HeightMap_Scalada, out ho_HeightMap_Region, 0, 
            255);
        hv_Histo.Dispose();hv_BinSize.Dispose();
        HOperatorSet.GrayHistoRange(ho_HeightMap_Region, ho_HeightMap_Scalada, 0, 
            255, 256, out hv_Histo, out hv_BinSize);
        hv_Sum_Histo.Dispose();
        HOperatorSet.TupleSum(hv_Histo, out hv_Sum_Histo);

        //# #########################################################
        //# ### Mientras mas grabnde menos sensible a cambios #######   
        hv_Mascara.Dispose();
        hv_Mascara = 1;
        //# ########################################################

        hv_Vector_Distribucion.Dispose();
        hv_Vector_Distribucion = new HTuple();
        hv_init_vector.Dispose();
        hv_init_vector = 255;
        hv_flag_vector.Dispose();
        hv_flag_vector = 0;
        hv_aux_suma.Dispose();
        hv_aux_suma = 0.0;

        HTuple end_val26 = 0;
        HTuple step_val26 = -1;
        for (hv_Index=hv_init_vector; hv_Index.Continue(end_val26, step_val26); hv_Index = hv_Index.TupleAdd(step_val26))
        {

          if (hv_Vector_Distribucion == null)
            hv_Vector_Distribucion = new HTuple();
          hv_Vector_Distribucion[hv_Index] = hv_aux_suma+(((hv_Histo.TupleSelect(
              hv_Index))*100.0)/hv_Sum_Histo);
          hv_aux_suma.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_aux_suma = hv_Vector_Distribucion.TupleSelect(
              hv_Index);
          }
        }

        hv_Derivada.Dispose();
        hv_Derivada = new HTuple();
        hv_Factor_Der.Dispose();
        hv_Factor_Der = 1000;
        hv_Mascara.Dispose();
        hv_Mascara = 1;
        HTuple end_val35 = 50;
        HTuple step_val35 = -hv_Mascara;
        for (hv_Index=hv_init_vector; hv_Index.Continue(end_val35, step_val35); hv_Index = hv_Index.TupleAdd(step_val35))
        {

          if (hv_Derivada == null)
            hv_Derivada = new HTuple();
          hv_Derivada[hv_Index] = ((((hv_Vector_Distribucion.TupleSelect(hv_Index))-(hv_Vector_Distribucion.TupleSelect(
              hv_Index-hv_Mascara)))).TupleAbs())*hv_Factor_Der;

        }


        //*********************************************************
        //* Busco el primer cambio brusco de posicion *************
        //* El umbral de cambio es Aux_Val_Max ********************
        //*********************************************************
        hv_Function.Dispose();
        HOperatorSet.CreateFunct1dArray(hv_Derivada, out hv_Function);

        //*  dev_inspect_ctrl (Function)
        //***********************************************************************************************
        hv_Aux_Val_Max.Dispose();
        hv_Aux_Val_Max = 30000;
        //****************************************************************************************************
        hv_Flag_indx_max.Dispose();
        hv_Flag_indx_max = 255;
        HTuple end_val53 = 50;
        HTuple step_val53 = -hv_Mascara;
        for (hv_Index=hv_init_vector; hv_Index.Continue(end_val53, step_val53); hv_Index = hv_Index.TupleAdd(step_val53))
        {

          if ((int)(new HTuple(((hv_Derivada.TupleSelect(hv_Index))).TupleGreater(
              hv_Aux_Val_Max))) != 0)
          {
            hv_Aux_Val_Max.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_Aux_Val_Max = hv_Derivada.TupleSelect(
                hv_Index);
            }
            hv_Flag_indx_max.Dispose();
            hv_Flag_indx_max = new HTuple(hv_Index);
          }

        }

        //# #########################################################
        //# ######## Grado de proteccion para moverse entre el 
        //# ####### histograma
        hv_index_protection.Dispose();
        hv_index_protection = 3;
        //# #########################################################

        hv_Alt_Min.Dispose();
        hv_Alt_Min = 110;
        hv_Alt_Max.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Alt_Max = hv_Flag_indx_max+hv_index_protection;
        }
        ho_Entidad.Dispose();
        HOperatorSet.Threshold(ho_HeightMap_Scalada, out ho_Entidad, hv_Alt_Min, 
            hv_Alt_Max);

        hv_Estado_Funcion.Dispose();
        hv_Estado_Funcion = 1;
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_Estado_Funcion.Dispose();
        hv_Estado_Funcion = 0;
        //* --> descomentar EN c#  Fx_Aux.DataLogError = Fx_Aux.ErrorCatch(HDevExpDefaultException1);

      }


      ho_Region.Dispose();
      ho_HeightMap_Scalada.Dispose();
      ho_HeightMap_Region.Dispose();

      hv_UmbralMaxThr.Dispose();
      hv_escala.Dispose();
      hv_Histo.Dispose();
      hv_BinSize.Dispose();
      hv_Sum_Histo.Dispose();
      hv_Mascara.Dispose();
      hv_Vector_Distribucion.Dispose();
      hv_init_vector.Dispose();
      hv_flag_vector.Dispose();
      hv_aux_suma.Dispose();
      hv_Index.Dispose();
      hv_Derivada.Dispose();
      hv_Factor_Der.Dispose();
      hv_Function.Dispose();
      hv_Aux_Val_Max.Dispose();
      hv_Flag_indx_max.Dispose();
      hv_index_protection.Dispose();
      hv_Alt_Min.Dispose();
      hv_Alt_Max.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_Region.Dispose();
      ho_HeightMap_Scalada.Dispose();
      ho_HeightMap_Region.Dispose();

      hv_UmbralMaxThr.Dispose();
      hv_escala.Dispose();
      hv_Histo.Dispose();
      hv_BinSize.Dispose();
      hv_Sum_Histo.Dispose();
      hv_Mascara.Dispose();
      hv_Vector_Distribucion.Dispose();
      hv_init_vector.Dispose();
      hv_flag_vector.Dispose();
      hv_aux_suma.Dispose();
      hv_Index.Dispose();
      hv_Derivada.Dispose();
      hv_Factor_Der.Dispose();
      hv_Function.Dispose();
      hv_Aux_Val_Max.Dispose();
      hv_Flag_indx_max.Dispose();
      hv_index_protection.Dispose();
      hv_Alt_Min.Dispose();
      hv_Alt_Max.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Segmentar_Sleeve (HObject ho_HeightMap, HObject ho_X, HObject ho_Y, 
      HObject ho_Z, out HObject ho_Entidad, HTuple hv_DitsiObjMax, out HTuple hv_Estado_Funcion)
  {




    // Local iconic variables 

    HObject ho_Region=null, ho_HeightMap_Scalada=null;
    HObject ho_HeightMap_Region=null;

    // Local control variables 

    HTuple hv_UmbralMaxThr = new HTuple(), hv_escala = new HTuple();
    HTuple hv_Histo = new HTuple(), hv_BinSize = new HTuple();
    HTuple hv_Sum_Histo = new HTuple(), hv_Mascara = new HTuple();
    HTuple hv_Vector_Distribucion = new HTuple(), hv_init_vector = new HTuple();
    HTuple hv_flag_vector = new HTuple(), hv_aux_suma = new HTuple();
    HTuple hv_Index = new HTuple(), hv_Derivada = new HTuple();
    HTuple hv_Factor_Der = new HTuple(), hv_Function = new HTuple();
    HTuple hv_Aux_Val_Max = new HTuple(), hv_Flag_indx_max = new HTuple();
    HTuple hv_index_protection = new HTuple(), hv_Alt_Min = new HTuple();
    HTuple hv_Alt_Max = new HTuple(), hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Entidad);
    HOperatorSet.GenEmptyObj(out ho_Region);
    HOperatorSet.GenEmptyObj(out ho_HeightMap_Scalada);
    HOperatorSet.GenEmptyObj(out ho_HeightMap_Region);
    hv_Estado_Funcion = new HTuple();
    try
    {
      hv_Estado_Funcion.Dispose();
      hv_Estado_Funcion = 0;
      //
      try
      {
        //
        //********************************************************
        //1.-  !!!!!!!!! threshols dinamico!!!!!!!!!!!!!!!!!!!!!!!!!!
        //********************************************************

        hv_UmbralMaxThr.Dispose();
        hv_UmbralMaxThr = new HTuple(hv_DitsiObjMax);
        ho_Region.Dispose();
        HOperatorSet.Threshold(ho_HeightMap, out ho_Region, 900, hv_UmbralMaxThr);
        hv_escala.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_escala = 255.0/hv_UmbralMaxThr;
        }
        ho_HeightMap_Scalada.Dispose();
        HOperatorSet.ScaleImage(ho_HeightMap, out ho_HeightMap_Scalada, hv_escala, 
            0);
        ho_HeightMap_Region.Dispose();
        HOperatorSet.Threshold(ho_HeightMap_Scalada, out ho_HeightMap_Region, 0, 
            255);
        hv_Histo.Dispose();hv_BinSize.Dispose();
        HOperatorSet.GrayHistoRange(ho_HeightMap_Region, ho_HeightMap_Scalada, 0, 
            255, 256, out hv_Histo, out hv_BinSize);
        hv_Sum_Histo.Dispose();
        HOperatorSet.TupleSum(hv_Histo, out hv_Sum_Histo);
        //
        //# #########################################################
        //# ### Mientras mas grabnde menos sensible a cambios #######   
        hv_Mascara.Dispose();
        hv_Mascara = 1;
        //# ########################################################
        //
        hv_Vector_Distribucion.Dispose();
        hv_Vector_Distribucion = new HTuple();
        hv_init_vector.Dispose();
        hv_init_vector = 255;
        hv_flag_vector.Dispose();
        hv_flag_vector = 0;
        hv_aux_suma.Dispose();
        hv_aux_suma = 0.0;
        //
        HTuple end_val26 = 0;
        HTuple step_val26 = -1;
        for (hv_Index=hv_init_vector; hv_Index.Continue(end_val26, step_val26); hv_Index = hv_Index.TupleAdd(step_val26))
        {
          //
          if (hv_Vector_Distribucion == null)
            hv_Vector_Distribucion = new HTuple();
          hv_Vector_Distribucion[hv_Index] = hv_aux_suma+(((hv_Histo.TupleSelect(
              hv_Index))*100.0)/hv_Sum_Histo);
          hv_aux_suma.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_aux_suma = hv_Vector_Distribucion.TupleSelect(
              hv_Index);
          }
        }
        //
        hv_Derivada.Dispose();
        hv_Derivada = new HTuple();
        hv_Factor_Der.Dispose();
        hv_Factor_Der = 10000;
        hv_Mascara.Dispose();
        hv_Mascara = 1;
        HTuple end_val35 = 50;
        HTuple step_val35 = -hv_Mascara;
        for (hv_Index=hv_init_vector; hv_Index.Continue(end_val35, step_val35); hv_Index = hv_Index.TupleAdd(step_val35))
        {
          //
          if (hv_Derivada == null)
            hv_Derivada = new HTuple();
          hv_Derivada[hv_Index] = ((((hv_Vector_Distribucion.TupleSelect(hv_Index))-(hv_Vector_Distribucion.TupleSelect(
              hv_Index-hv_Mascara)))).TupleAbs())*hv_Factor_Der;
          //
        }
        //
        //
        //*********************************************************
        //* Busco el primer cambio brusco de posicion *************
        //* El umbral de cambio es Aux_Val_Max ********************
        //*********************************************************
        hv_Function.Dispose();
        HOperatorSet.CreateFunct1dArray(hv_Derivada, out hv_Function);

        //dev_inspect_ctrl (Function)
        //***********************************************************************************************
        hv_Aux_Val_Max.Dispose();
        hv_Aux_Val_Max = 4000;
        //****************************************************************************************************

        hv_Flag_indx_max.Dispose();
        hv_Flag_indx_max = 255;
        HTuple end_val54 = 255;
        HTuple step_val54 = hv_Mascara;
        for (hv_Index=50; hv_Index.Continue(end_val54, step_val54); hv_Index = hv_Index.TupleAdd(step_val54))
        {
          //
          if ((int)(new HTuple(((hv_Derivada.TupleSelect(hv_Index))).TupleGreater(
              hv_Aux_Val_Max))) != 0)
          {
            hv_Aux_Val_Max.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_Aux_Val_Max = hv_Derivada.TupleSelect(
                hv_Index);
            }
            hv_Flag_indx_max.Dispose();
            hv_Flag_indx_max = new HTuple(hv_Index);
            break;
          }
          //
        }

        //# #########################################################
        //# ######## Grado de proteccion para moverse entre el 
        //# ####### histograma
        hv_index_protection.Dispose();
        hv_index_protection = 2;
        //# #########################################################

        hv_Alt_Min.Dispose();
        hv_Alt_Min = 50;
        hv_Alt_Max.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Alt_Max = hv_Flag_indx_max+hv_index_protection;
        }
        ho_Entidad.Dispose();
        HOperatorSet.Threshold(ho_HeightMap_Scalada, out ho_Entidad, hv_Alt_Min, 
            hv_Alt_Max);

        hv_Estado_Funcion.Dispose();
        hv_Estado_Funcion = 1;
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_Estado_Funcion.Dispose();
        hv_Estado_Funcion = 0;
        //* --> descomentar EN c#  Fx_Aux.DataLogError = Fx_Aux.ErrorCatch(HDevExpDefaultException1);
        //
      }
      //
      //
      ho_Region.Dispose();
      ho_HeightMap_Scalada.Dispose();
      ho_HeightMap_Region.Dispose();

      hv_UmbralMaxThr.Dispose();
      hv_escala.Dispose();
      hv_Histo.Dispose();
      hv_BinSize.Dispose();
      hv_Sum_Histo.Dispose();
      hv_Mascara.Dispose();
      hv_Vector_Distribucion.Dispose();
      hv_init_vector.Dispose();
      hv_flag_vector.Dispose();
      hv_aux_suma.Dispose();
      hv_Index.Dispose();
      hv_Derivada.Dispose();
      hv_Factor_Der.Dispose();
      hv_Function.Dispose();
      hv_Aux_Val_Max.Dispose();
      hv_Flag_indx_max.Dispose();
      hv_index_protection.Dispose();
      hv_Alt_Min.Dispose();
      hv_Alt_Max.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_Region.Dispose();
      ho_HeightMap_Scalada.Dispose();
      ho_HeightMap_Region.Dispose();

      hv_UmbralMaxThr.Dispose();
      hv_escala.Dispose();
      hv_Histo.Dispose();
      hv_BinSize.Dispose();
      hv_Sum_Histo.Dispose();
      hv_Mascara.Dispose();
      hv_Vector_Distribucion.Dispose();
      hv_init_vector.Dispose();
      hv_flag_vector.Dispose();
      hv_aux_suma.Dispose();
      hv_Index.Dispose();
      hv_Derivada.Dispose();
      hv_Factor_Der.Dispose();
      hv_Function.Dispose();
      hv_Aux_Val_Max.Dispose();
      hv_Flag_indx_max.Dispose();
      hv_index_protection.Dispose();
      hv_Alt_Min.Dispose();
      hv_Alt_Max.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Segmentar_Sleeve_COPY_1 (HObject ho_HeightMap, HObject ho_X, HObject ho_Y, 
      HObject ho_Z, out HObject ho_Entidad, out HTuple hv_Estado_Funcion)
  {



    // Local iconic variables 

    HObject ho_Region=null, ho_HeightMap_Scalada=null;
    HObject ho_HeightMap_Region=null;

    // Local control variables 

    HTuple hv_UmbralMaxThr = new HTuple(), hv_escala = new HTuple();
    HTuple hv_Histo = new HTuple(), hv_BinSize = new HTuple();
    HTuple hv_Sum_Histo = new HTuple(), hv_Mascara = new HTuple();
    HTuple hv_Vector_Distribucion = new HTuple(), hv_init_vector = new HTuple();
    HTuple hv_flag_vector = new HTuple(), hv_aux_suma = new HTuple();
    HTuple hv_Index = new HTuple(), hv_Derivada = new HTuple();
    HTuple hv_Factor_Der = new HTuple(), hv_Function = new HTuple();
    HTuple hv_Aux_Val_Max = new HTuple(), hv_Flag_indx_max = new HTuple();
    HTuple hv_index_protection = new HTuple(), hv_Alt_Min = new HTuple();
    HTuple hv_Alt_Max = new HTuple(), hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Entidad);
    HOperatorSet.GenEmptyObj(out ho_Region);
    HOperatorSet.GenEmptyObj(out ho_HeightMap_Scalada);
    HOperatorSet.GenEmptyObj(out ho_HeightMap_Region);
    hv_Estado_Funcion = new HTuple();
    try
    {
      hv_Estado_Funcion.Dispose();
      hv_Estado_Funcion = 0;

      try
      {

        //********************************************************
        //1.-  !!!!!!!!! threshols dinamico!!!!!!!!!!!!!!!!!!!!!!!!!!
        //********************************************************

        hv_UmbralMaxThr.Dispose();
        hv_UmbralMaxThr = 1600.0;
        ho_Region.Dispose();
        HOperatorSet.Threshold(ho_HeightMap, out ho_Region, 900, hv_UmbralMaxThr);
        hv_escala.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_escala = 255.0/hv_UmbralMaxThr;
        }
        ho_HeightMap_Scalada.Dispose();
        HOperatorSet.ScaleImage(ho_HeightMap, out ho_HeightMap_Scalada, hv_escala, 
            0);
        ho_HeightMap_Region.Dispose();
        HOperatorSet.Threshold(ho_HeightMap_Scalada, out ho_HeightMap_Region, 0, 
            255);
        hv_Histo.Dispose();hv_BinSize.Dispose();
        HOperatorSet.GrayHistoRange(ho_HeightMap_Region, ho_HeightMap_Scalada, 0, 
            255, 256, out hv_Histo, out hv_BinSize);
        hv_Sum_Histo.Dispose();
        HOperatorSet.TupleSum(hv_Histo, out hv_Sum_Histo);

        //# #########################################################
        //# ### Mientras mas grabnde menos sensible a cambios #######   
        hv_Mascara.Dispose();
        hv_Mascara = 1;
        //# ########################################################

        hv_Vector_Distribucion.Dispose();
        hv_Vector_Distribucion = new HTuple();
        hv_init_vector.Dispose();
        hv_init_vector = 255;
        hv_flag_vector.Dispose();
        hv_flag_vector = 0;
        hv_aux_suma.Dispose();
        hv_aux_suma = 0.0;

        HTuple end_val26 = 0;
        HTuple step_val26 = -1;
        for (hv_Index=hv_init_vector; hv_Index.Continue(end_val26, step_val26); hv_Index = hv_Index.TupleAdd(step_val26))
        {

          if (hv_Vector_Distribucion == null)
            hv_Vector_Distribucion = new HTuple();
          hv_Vector_Distribucion[hv_Index] = hv_aux_suma+(((hv_Histo.TupleSelect(
              hv_Index))*100.0)/hv_Sum_Histo);
          hv_aux_suma.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_aux_suma = hv_Vector_Distribucion.TupleSelect(
              hv_Index);
          }
        }

        hv_Derivada.Dispose();
        hv_Derivada = new HTuple();
        hv_Factor_Der.Dispose();
        hv_Factor_Der = 10000;
        hv_Mascara.Dispose();
        hv_Mascara = 1;
        HTuple end_val35 = 50;
        HTuple step_val35 = -hv_Mascara;
        for (hv_Index=hv_init_vector; hv_Index.Continue(end_val35, step_val35); hv_Index = hv_Index.TupleAdd(step_val35))
        {

          if (hv_Derivada == null)
            hv_Derivada = new HTuple();
          hv_Derivada[hv_Index] = ((((hv_Vector_Distribucion.TupleSelect(hv_Index))-(hv_Vector_Distribucion.TupleSelect(
              hv_Index-hv_Mascara)))).TupleAbs())*hv_Factor_Der;

        }


        //*********************************************************
        //* Busco el primer cambio brusco de posicion *************
        //* El umbral de cambio es Aux_Val_Max ********************
        //*********************************************************
        hv_Function.Dispose();
        HOperatorSet.CreateFunct1dArray(hv_Derivada, out hv_Function);

        //dev_inspect_ctrl (Function)
        //***********************************************************************************************
        hv_Aux_Val_Max.Dispose();
        hv_Aux_Val_Max = 60000;
        //****************************************************************************************************
        hv_Flag_indx_max.Dispose();
        hv_Flag_indx_max = 255;
        HTuple end_val53 = 50;
        HTuple step_val53 = -hv_Mascara;
        for (hv_Index=hv_init_vector; hv_Index.Continue(end_val53, step_val53); hv_Index = hv_Index.TupleAdd(step_val53))
        {

          if ((int)(new HTuple(((hv_Derivada.TupleSelect(hv_Index))).TupleGreater(
              hv_Aux_Val_Max))) != 0)
          {
            hv_Aux_Val_Max.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_Aux_Val_Max = hv_Derivada.TupleSelect(
                hv_Index);
            }
            hv_Flag_indx_max.Dispose();
            hv_Flag_indx_max = new HTuple(hv_Index);
          }

        }

        //# #########################################################
        //# ######## Grado de proteccion para moverse entre el 
        //# ####### histograma
        hv_index_protection.Dispose();
        hv_index_protection = 20;
        //# #########################################################

        hv_Alt_Min.Dispose();
        hv_Alt_Min = 50;
        hv_Alt_Max.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Alt_Max = hv_Flag_indx_max-hv_index_protection;
        }
        ho_Entidad.Dispose();
        HOperatorSet.Threshold(ho_HeightMap_Scalada, out ho_Entidad, hv_Alt_Min, 
            hv_Alt_Max);


        hv_Estado_Funcion.Dispose();
        hv_Estado_Funcion = 1;
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_Estado_Funcion.Dispose();
        hv_Estado_Funcion = 0;
        //* --> descomentar EN c#  Fx_Aux.DataLogError = Fx_Aux.ErrorCatch(HDevExpDefaultException1);

      }


      ho_Region.Dispose();
      ho_HeightMap_Scalada.Dispose();
      ho_HeightMap_Region.Dispose();

      hv_UmbralMaxThr.Dispose();
      hv_escala.Dispose();
      hv_Histo.Dispose();
      hv_BinSize.Dispose();
      hv_Sum_Histo.Dispose();
      hv_Mascara.Dispose();
      hv_Vector_Distribucion.Dispose();
      hv_init_vector.Dispose();
      hv_flag_vector.Dispose();
      hv_aux_suma.Dispose();
      hv_Index.Dispose();
      hv_Derivada.Dispose();
      hv_Factor_Der.Dispose();
      hv_Function.Dispose();
      hv_Aux_Val_Max.Dispose();
      hv_Flag_indx_max.Dispose();
      hv_index_protection.Dispose();
      hv_Alt_Min.Dispose();
      hv_Alt_Max.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_Region.Dispose();
      ho_HeightMap_Scalada.Dispose();
      ho_HeightMap_Region.Dispose();

      hv_UmbralMaxThr.Dispose();
      hv_escala.Dispose();
      hv_Histo.Dispose();
      hv_BinSize.Dispose();
      hv_Sum_Histo.Dispose();
      hv_Mascara.Dispose();
      hv_Vector_Distribucion.Dispose();
      hv_init_vector.Dispose();
      hv_flag_vector.Dispose();
      hv_aux_suma.Dispose();
      hv_Index.Dispose();
      hv_Derivada.Dispose();
      hv_Factor_Der.Dispose();
      hv_Function.Dispose();
      hv_Aux_Val_Max.Dispose();
      hv_Flag_indx_max.Dispose();
      hv_index_protection.Dispose();
      hv_Alt_Min.Dispose();
      hv_Alt_Max.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Segmentar_Sleeve_COPY_2 (HObject ho_HeightMap, HObject ho_X, HObject ho_Y, 
      HObject ho_Z, out HObject ho_Entidad, out HTuple hv_Estado_Funcion)
  {



    // Local iconic variables 

    HObject ho_Region=null, ho_HeightMap_Scalada=null;
    HObject ho_HeightMap_Region=null;

    // Local control variables 

    HTuple hv_UmbralMaxThr = new HTuple(), hv_escala = new HTuple();
    HTuple hv_Histo = new HTuple(), hv_BinSize = new HTuple();
    HTuple hv_Sum_Histo = new HTuple(), hv_Mascara = new HTuple();
    HTuple hv_Vector_Distribucion = new HTuple(), hv_init_vector = new HTuple();
    HTuple hv_flag_vector = new HTuple(), hv_aux_suma = new HTuple();
    HTuple hv_Index = new HTuple(), hv_Derivada = new HTuple();
    HTuple hv_Factor_Der = new HTuple(), hv_Function = new HTuple();
    HTuple hv_Aux_Val_Max = new HTuple(), hv_Flag_indx_max = new HTuple();
    HTuple hv_index_protection = new HTuple(), hv_Alt_Min = new HTuple();
    HTuple hv_Alt_Max = new HTuple(), hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Entidad);
    HOperatorSet.GenEmptyObj(out ho_Region);
    HOperatorSet.GenEmptyObj(out ho_HeightMap_Scalada);
    HOperatorSet.GenEmptyObj(out ho_HeightMap_Region);
    hv_Estado_Funcion = new HTuple();
    try
    {
      hv_Estado_Funcion.Dispose();
      hv_Estado_Funcion = 0;

      try
      {

        //********************************************************
        //1.-  !!!!!!!!! threshols dinamico!!!!!!!!!!!!!!!!!!!!!!!!!!
        //********************************************************

        hv_UmbralMaxThr.Dispose();
        hv_UmbralMaxThr = 1600.0;
        ho_Region.Dispose();
        HOperatorSet.Threshold(ho_HeightMap, out ho_Region, 900, hv_UmbralMaxThr);
        hv_escala.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_escala = 255.0/hv_UmbralMaxThr;
        }
        ho_HeightMap_Scalada.Dispose();
        HOperatorSet.ScaleImage(ho_HeightMap, out ho_HeightMap_Scalada, hv_escala, 
            0);
        ho_HeightMap_Region.Dispose();
        HOperatorSet.Threshold(ho_HeightMap_Scalada, out ho_HeightMap_Region, 0, 
            255);
        hv_Histo.Dispose();hv_BinSize.Dispose();
        HOperatorSet.GrayHistoRange(ho_HeightMap_Region, ho_HeightMap_Scalada, 0, 
            255, 256, out hv_Histo, out hv_BinSize);
        hv_Sum_Histo.Dispose();
        HOperatorSet.TupleSum(hv_Histo, out hv_Sum_Histo);

        //# #########################################################
        //# ### Mientras mas grabnde menos sensible a cambios #######   
        hv_Mascara.Dispose();
        hv_Mascara = 1;
        //# ########################################################

        hv_Vector_Distribucion.Dispose();
        hv_Vector_Distribucion = new HTuple();
        hv_init_vector.Dispose();
        hv_init_vector = 255;
        hv_flag_vector.Dispose();
        hv_flag_vector = 0;
        hv_aux_suma.Dispose();
        hv_aux_suma = 0.0;

        HTuple end_val26 = 0;
        HTuple step_val26 = -1;
        for (hv_Index=hv_init_vector; hv_Index.Continue(end_val26, step_val26); hv_Index = hv_Index.TupleAdd(step_val26))
        {

          if (hv_Vector_Distribucion == null)
            hv_Vector_Distribucion = new HTuple();
          hv_Vector_Distribucion[hv_Index] = hv_aux_suma+(((hv_Histo.TupleSelect(
              hv_Index))*100.0)/hv_Sum_Histo);
          hv_aux_suma.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_aux_suma = hv_Vector_Distribucion.TupleSelect(
              hv_Index);
          }
        }

        hv_Derivada.Dispose();
        hv_Derivada = new HTuple();
        hv_Factor_Der.Dispose();
        hv_Factor_Der = 10000;
        hv_Mascara.Dispose();
        hv_Mascara = 1;
        HTuple end_val35 = 50;
        HTuple step_val35 = -hv_Mascara;
        for (hv_Index=hv_init_vector; hv_Index.Continue(end_val35, step_val35); hv_Index = hv_Index.TupleAdd(step_val35))
        {

          if (hv_Derivada == null)
            hv_Derivada = new HTuple();
          hv_Derivada[hv_Index] = ((((hv_Vector_Distribucion.TupleSelect(hv_Index))-(hv_Vector_Distribucion.TupleSelect(
              hv_Index-hv_Mascara)))).TupleAbs())*hv_Factor_Der;

        }


        //*********************************************************
        //* Busco el primer cambio brusco de posicion *************
        //* El umbral de cambio es Aux_Val_Max ********************
        //*********************************************************
        hv_Function.Dispose();
        HOperatorSet.CreateFunct1dArray(hv_Derivada, out hv_Function);

        //dev_inspect_ctrl (Function)
        //***********************************************************************************************
        hv_Aux_Val_Max.Dispose();
        hv_Aux_Val_Max = 60000;
        //****************************************************************************************************

        hv_Flag_indx_max.Dispose();
        hv_Flag_indx_max = 255;
        HTuple end_val54 = 50;
        HTuple step_val54 = -hv_Mascara;
        for (hv_Index=hv_init_vector; hv_Index.Continue(end_val54, step_val54); hv_Index = hv_Index.TupleAdd(step_val54))
        {

          if ((int)(new HTuple(((hv_Derivada.TupleSelect(hv_Index))).TupleGreater(
              hv_Aux_Val_Max))) != 0)
          {
            hv_Aux_Val_Max.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_Aux_Val_Max = hv_Derivada.TupleSelect(
                hv_Index);
            }
            hv_Flag_indx_max.Dispose();
            hv_Flag_indx_max = new HTuple(hv_Index);
          }

        }

        //# #########################################################
        //# ######## Grado de proteccion para moverse entre el 
        //# ####### histograma
        hv_index_protection.Dispose();
        hv_index_protection = 20;
        //# #########################################################

        hv_Alt_Min.Dispose();
        hv_Alt_Min = 50;
        hv_Alt_Max.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Alt_Max = hv_Flag_indx_max-hv_index_protection;
        }
        ho_Entidad.Dispose();
        HOperatorSet.Threshold(ho_HeightMap_Scalada, out ho_Entidad, hv_Alt_Min, 
            hv_Alt_Max);

        hv_Estado_Funcion.Dispose();
        hv_Estado_Funcion = 1;
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_Estado_Funcion.Dispose();
        hv_Estado_Funcion = 0;
        //* --> descomentar EN c#  Fx_Aux.DataLogError = Fx_Aux.ErrorCatch(HDevExpDefaultException1);

      }


      ho_Region.Dispose();
      ho_HeightMap_Scalada.Dispose();
      ho_HeightMap_Region.Dispose();

      hv_UmbralMaxThr.Dispose();
      hv_escala.Dispose();
      hv_Histo.Dispose();
      hv_BinSize.Dispose();
      hv_Sum_Histo.Dispose();
      hv_Mascara.Dispose();
      hv_Vector_Distribucion.Dispose();
      hv_init_vector.Dispose();
      hv_flag_vector.Dispose();
      hv_aux_suma.Dispose();
      hv_Index.Dispose();
      hv_Derivada.Dispose();
      hv_Factor_Der.Dispose();
      hv_Function.Dispose();
      hv_Aux_Val_Max.Dispose();
      hv_Flag_indx_max.Dispose();
      hv_index_protection.Dispose();
      hv_Alt_Min.Dispose();
      hv_Alt_Max.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_Region.Dispose();
      ho_HeightMap_Scalada.Dispose();
      ho_HeightMap_Region.Dispose();

      hv_UmbralMaxThr.Dispose();
      hv_escala.Dispose();
      hv_Histo.Dispose();
      hv_BinSize.Dispose();
      hv_Sum_Histo.Dispose();
      hv_Mascara.Dispose();
      hv_Vector_Distribucion.Dispose();
      hv_init_vector.Dispose();
      hv_flag_vector.Dispose();
      hv_aux_suma.Dispose();
      hv_Index.Dispose();
      hv_Derivada.Dispose();
      hv_Factor_Der.Dispose();
      hv_Function.Dispose();
      hv_Aux_Val_Max.Dispose();
      hv_Flag_indx_max.Dispose();
      hv_index_protection.Dispose();
      hv_Alt_Min.Dispose();
      hv_Alt_Max.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Segmentar_Sleeve_COPY_3 (HObject ho_HeightMap, HObject ho_X, HObject ho_Y, 
      HObject ho_Z, out HObject ho_Entidad, HTuple hv_DitsiObjMax, out HTuple hv_Estado_Funcion)
  {




    // Local iconic variables 

    HObject ho_Region=null, ho_HeightMap_Scalada=null;
    HObject ho_HeightMap_Region=null;

    // Local control variables 

    HTuple hv_UmbralMaxThr = new HTuple(), hv_escala = new HTuple();
    HTuple hv_Histo = new HTuple(), hv_BinSize = new HTuple();
    HTuple hv_Sum_Histo = new HTuple(), hv_Mascara = new HTuple();
    HTuple hv_Vector_Distribucion = new HTuple(), hv_init_vector = new HTuple();
    HTuple hv_flag_vector = new HTuple(), hv_aux_suma = new HTuple();
    HTuple hv_Index = new HTuple(), hv_Derivada = new HTuple();
    HTuple hv_Factor_Der = new HTuple(), hv_Function = new HTuple();
    HTuple hv_Aux_Val_Max = new HTuple(), hv_Flag_indx_max = new HTuple();
    HTuple hv_index_protection = new HTuple(), hv_Alt_Min = new HTuple();
    HTuple hv_Alt_Max = new HTuple(), hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Entidad);
    HOperatorSet.GenEmptyObj(out ho_Region);
    HOperatorSet.GenEmptyObj(out ho_HeightMap_Scalada);
    HOperatorSet.GenEmptyObj(out ho_HeightMap_Region);
    hv_Estado_Funcion = new HTuple();
    try
    {
      hv_Estado_Funcion.Dispose();
      hv_Estado_Funcion = 0;

      try
      {

        //********************************************************
        //1.-  !!!!!!!!! threshols dinamico!!!!!!!!!!!!!!!!!!!!!!!!!!
        //********************************************************

        hv_UmbralMaxThr.Dispose();
        hv_UmbralMaxThr = new HTuple(hv_DitsiObjMax);
        ho_Region.Dispose();
        HOperatorSet.Threshold(ho_HeightMap, out ho_Region, 900, hv_UmbralMaxThr);
        hv_escala.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_escala = 255.0/hv_UmbralMaxThr;
        }
        ho_HeightMap_Scalada.Dispose();
        HOperatorSet.ScaleImage(ho_HeightMap, out ho_HeightMap_Scalada, hv_escala, 
            0);
        ho_HeightMap_Region.Dispose();
        HOperatorSet.Threshold(ho_HeightMap_Scalada, out ho_HeightMap_Region, 0, 
            255);
        hv_Histo.Dispose();hv_BinSize.Dispose();
        HOperatorSet.GrayHistoRange(ho_HeightMap_Region, ho_HeightMap_Scalada, 0, 
            255, 256, out hv_Histo, out hv_BinSize);
        hv_Sum_Histo.Dispose();
        HOperatorSet.TupleSum(hv_Histo, out hv_Sum_Histo);

        //# #########################################################
        //# ### Mientras mas grabnde menos sensible a cambios #######   
        hv_Mascara.Dispose();
        hv_Mascara = 1;
        //# ########################################################

        hv_Vector_Distribucion.Dispose();
        hv_Vector_Distribucion = new HTuple();
        hv_init_vector.Dispose();
        hv_init_vector = 255;
        hv_flag_vector.Dispose();
        hv_flag_vector = 0;
        hv_aux_suma.Dispose();
        hv_aux_suma = 0.0;

        HTuple end_val26 = 0;
        HTuple step_val26 = -1;
        for (hv_Index=hv_init_vector; hv_Index.Continue(end_val26, step_val26); hv_Index = hv_Index.TupleAdd(step_val26))
        {

          if (hv_Vector_Distribucion == null)
            hv_Vector_Distribucion = new HTuple();
          hv_Vector_Distribucion[hv_Index] = hv_aux_suma+(((hv_Histo.TupleSelect(
              hv_Index))*100.0)/hv_Sum_Histo);
          hv_aux_suma.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_aux_suma = hv_Vector_Distribucion.TupleSelect(
              hv_Index);
          }
        }

        hv_Derivada.Dispose();
        hv_Derivada = new HTuple();
        hv_Factor_Der.Dispose();
        hv_Factor_Der = 10000;
        hv_Mascara.Dispose();
        hv_Mascara = 1;
        HTuple end_val35 = 50;
        HTuple step_val35 = -hv_Mascara;
        for (hv_Index=hv_init_vector; hv_Index.Continue(end_val35, step_val35); hv_Index = hv_Index.TupleAdd(step_val35))
        {

          if (hv_Derivada == null)
            hv_Derivada = new HTuple();
          hv_Derivada[hv_Index] = ((((hv_Vector_Distribucion.TupleSelect(hv_Index))-(hv_Vector_Distribucion.TupleSelect(
              hv_Index-hv_Mascara)))).TupleAbs())*hv_Factor_Der;

        }


        //*********************************************************
        //* Busco el primer cambio brusco de posicion *************
        //* El umbral de cambio es Aux_Val_Max ********************
        //*********************************************************
        hv_Function.Dispose();
        HOperatorSet.CreateFunct1dArray(hv_Derivada, out hv_Function);

        //dev_inspect_ctrl (Function)
        //***********************************************************************************************
        hv_Aux_Val_Max.Dispose();
        hv_Aux_Val_Max = 4000;
        //****************************************************************************************************

        hv_Flag_indx_max.Dispose();
        hv_Flag_indx_max = 255;
        HTuple end_val54 = 255;
        HTuple step_val54 = hv_Mascara;
        for (hv_Index=50; hv_Index.Continue(end_val54, step_val54); hv_Index = hv_Index.TupleAdd(step_val54))
        {

          if ((int)(new HTuple(((hv_Derivada.TupleSelect(hv_Index))).TupleGreater(
              hv_Aux_Val_Max))) != 0)
          {
            hv_Aux_Val_Max.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_Aux_Val_Max = hv_Derivada.TupleSelect(
                hv_Index);
            }
            hv_Flag_indx_max.Dispose();
            hv_Flag_indx_max = new HTuple(hv_Index);
            break;
          }

        }

        //# #########################################################
        //# ######## Grado de proteccion para moverse entre el 
        //# ####### histograma
        hv_index_protection.Dispose();
        hv_index_protection = 8;
        //# #########################################################

        hv_Alt_Min.Dispose();
        hv_Alt_Min = 50;
        hv_Alt_Max.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Alt_Max = hv_Flag_indx_max+hv_index_protection;
        }
        ho_Entidad.Dispose();
        HOperatorSet.Threshold(ho_HeightMap_Scalada, out ho_Entidad, hv_Alt_Min, 
            hv_Alt_Max);

        hv_Estado_Funcion.Dispose();
        hv_Estado_Funcion = 1;
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_Estado_Funcion.Dispose();
        hv_Estado_Funcion = 0;
        //* --> descomentar EN c#  Fx_Aux.DataLogError = Fx_Aux.ErrorCatch(HDevExpDefaultException1);

      }


      ho_Region.Dispose();
      ho_HeightMap_Scalada.Dispose();
      ho_HeightMap_Region.Dispose();

      hv_UmbralMaxThr.Dispose();
      hv_escala.Dispose();
      hv_Histo.Dispose();
      hv_BinSize.Dispose();
      hv_Sum_Histo.Dispose();
      hv_Mascara.Dispose();
      hv_Vector_Distribucion.Dispose();
      hv_init_vector.Dispose();
      hv_flag_vector.Dispose();
      hv_aux_suma.Dispose();
      hv_Index.Dispose();
      hv_Derivada.Dispose();
      hv_Factor_Der.Dispose();
      hv_Function.Dispose();
      hv_Aux_Val_Max.Dispose();
      hv_Flag_indx_max.Dispose();
      hv_index_protection.Dispose();
      hv_Alt_Min.Dispose();
      hv_Alt_Max.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_Region.Dispose();
      ho_HeightMap_Scalada.Dispose();
      ho_HeightMap_Region.Dispose();

      hv_UmbralMaxThr.Dispose();
      hv_escala.Dispose();
      hv_Histo.Dispose();
      hv_BinSize.Dispose();
      hv_Sum_Histo.Dispose();
      hv_Mascara.Dispose();
      hv_Vector_Distribucion.Dispose();
      hv_init_vector.Dispose();
      hv_flag_vector.Dispose();
      hv_aux_suma.Dispose();
      hv_Index.Dispose();
      hv_Derivada.Dispose();
      hv_Factor_Der.Dispose();
      hv_Function.Dispose();
      hv_Aux_Val_Max.Dispose();
      hv_Flag_indx_max.Dispose();
      hv_index_protection.Dispose();
      hv_Alt_Min.Dispose();
      hv_Alt_Max.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Segmentar_Sleeve_pallet (HObject ho_HeightMap, HObject ho_X, HObject ho_Y, 
      HObject ho_Z, out HObject ho_Entidad, out HTuple hv_Estado_Funcion)
  {



    // Local iconic variables 

    HObject ho_Region=null, ho_HeightMap_Scalada=null;
    HObject ho_HeightMap_Region=null;

    // Local control variables 

    HTuple hv_UmbralMaxThr = new HTuple(), hv_escala = new HTuple();
    HTuple hv_Histo = new HTuple(), hv_BinSize = new HTuple();
    HTuple hv_Sum_Histo = new HTuple(), hv_Mascara = new HTuple();
    HTuple hv_Vector_Distribucion = new HTuple(), hv_init_vector = new HTuple();
    HTuple hv_flag_vector = new HTuple(), hv_aux_suma = new HTuple();
    HTuple hv_Index = new HTuple(), hv_Derivada = new HTuple();
    HTuple hv_Factor_Der = new HTuple(), hv_Function = new HTuple();
    HTuple hv_Aux_Val_Max = new HTuple(), hv_Flag_indx_max = new HTuple();
    HTuple hv_index_protection = new HTuple(), hv_Alt_Min = new HTuple();
    HTuple hv_Alt_Max = new HTuple(), hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Entidad);
    HOperatorSet.GenEmptyObj(out ho_Region);
    HOperatorSet.GenEmptyObj(out ho_HeightMap_Scalada);
    HOperatorSet.GenEmptyObj(out ho_HeightMap_Region);
    hv_Estado_Funcion = new HTuple();
    try
    {
      hv_Estado_Funcion.Dispose();
      hv_Estado_Funcion = 0;
      //
      try
      {
        //
        //********************************************************
        //1.-  !!!!!!!!! threshols dinamico!!!!!!!!!!!!!!!!!!!!!!!!!!
        //********************************************************

        hv_UmbralMaxThr.Dispose();
        hv_UmbralMaxThr = 2600.0;
        ho_Region.Dispose();
        HOperatorSet.Threshold(ho_HeightMap, out ho_Region, 900, hv_UmbralMaxThr);
        hv_escala.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_escala = 255.0/hv_UmbralMaxThr;
        }
        ho_HeightMap_Scalada.Dispose();
        HOperatorSet.ScaleImage(ho_HeightMap, out ho_HeightMap_Scalada, hv_escala, 
            0);
        ho_HeightMap_Region.Dispose();
        HOperatorSet.Threshold(ho_HeightMap_Scalada, out ho_HeightMap_Region, 0, 
            255);
        hv_Histo.Dispose();hv_BinSize.Dispose();
        HOperatorSet.GrayHistoRange(ho_HeightMap_Region, ho_HeightMap_Scalada, 0, 
            255, 256, out hv_Histo, out hv_BinSize);
        hv_Sum_Histo.Dispose();
        HOperatorSet.TupleSum(hv_Histo, out hv_Sum_Histo);
        //
        //# #########################################################
        //# ### Mientras mas grabnde menos sensible a cambios #######   
        hv_Mascara.Dispose();
        hv_Mascara = 1;
        //# ########################################################
        //
        hv_Vector_Distribucion.Dispose();
        hv_Vector_Distribucion = new HTuple();
        hv_init_vector.Dispose();
        hv_init_vector = 255;
        hv_flag_vector.Dispose();
        hv_flag_vector = 0;
        hv_aux_suma.Dispose();
        hv_aux_suma = 0.0;
        //
        HTuple end_val26 = 0;
        HTuple step_val26 = -1;
        for (hv_Index=hv_init_vector; hv_Index.Continue(end_val26, step_val26); hv_Index = hv_Index.TupleAdd(step_val26))
        {
          //
          if (hv_Vector_Distribucion == null)
            hv_Vector_Distribucion = new HTuple();
          hv_Vector_Distribucion[hv_Index] = hv_aux_suma+(((hv_Histo.TupleSelect(
              hv_Index))*100.0)/hv_Sum_Histo);
          hv_aux_suma.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_aux_suma = hv_Vector_Distribucion.TupleSelect(
              hv_Index);
          }
        }
        //
        hv_Derivada.Dispose();
        hv_Derivada = new HTuple();
        hv_Factor_Der.Dispose();
        hv_Factor_Der = 10000;
        hv_Mascara.Dispose();
        hv_Mascara = 1;
        HTuple end_val35 = 50;
        HTuple step_val35 = -hv_Mascara;
        for (hv_Index=hv_init_vector; hv_Index.Continue(end_val35, step_val35); hv_Index = hv_Index.TupleAdd(step_val35))
        {
          //
          if (hv_Derivada == null)
            hv_Derivada = new HTuple();
          hv_Derivada[hv_Index] = ((((hv_Vector_Distribucion.TupleSelect(hv_Index))-(hv_Vector_Distribucion.TupleSelect(
              hv_Index-hv_Mascara)))).TupleAbs())*hv_Factor_Der;
          //
        }
        //
        //
        //*********************************************************
        //* Busco el primer cambio brusco de posicion *************
        //* El umbral de cambio es Aux_Val_Max ********************
        //*********************************************************
        hv_Function.Dispose();
        HOperatorSet.CreateFunct1dArray(hv_Derivada, out hv_Function);

        //dev_inspect_ctrl (Function)
        //***********************************************************************************************
        hv_Aux_Val_Max.Dispose();
        hv_Aux_Val_Max = 20000;
        //****************************************************************************************************

        hv_Flag_indx_max.Dispose();
        hv_Flag_indx_max = 255;
        HTuple end_val54 = 255;
        HTuple step_val54 = hv_Mascara;
        for (hv_Index=20; hv_Index.Continue(end_val54, step_val54); hv_Index = hv_Index.TupleAdd(step_val54))
        {
          //
          if ((int)(new HTuple(((hv_Derivada.TupleSelect(hv_Index))).TupleGreater(
              hv_Aux_Val_Max))) != 0)
          {
            hv_Aux_Val_Max.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_Aux_Val_Max = hv_Derivada.TupleSelect(
                hv_Index);
            }
            hv_Flag_indx_max.Dispose();
            hv_Flag_indx_max = new HTuple(hv_Index);
            break;
          }
          //
        }

        //# #########################################################
        //# ######## Grado de proteccion para moverse entre el 
        //# ####### histograma
        hv_index_protection.Dispose();
        hv_index_protection = -0;
        //# #########################################################

        hv_Alt_Min.Dispose();
        hv_Alt_Min = 50;
        hv_Alt_Max.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Alt_Max = hv_Flag_indx_max+hv_index_protection;
        }
        ho_Entidad.Dispose();
        HOperatorSet.Threshold(ho_HeightMap_Scalada, out ho_Entidad, hv_Alt_Min, 
            hv_Alt_Max);

        hv_Estado_Funcion.Dispose();
        hv_Estado_Funcion = 1;
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_Estado_Funcion.Dispose();
        hv_Estado_Funcion = 0;
        //* --> descomentar EN c#  Fx_Aux.DataLogError = Fx_Aux.ErrorCatch(HDevExpDefaultException1);
        //
      }
      //
      //
      ho_Region.Dispose();
      ho_HeightMap_Scalada.Dispose();
      ho_HeightMap_Region.Dispose();

      hv_UmbralMaxThr.Dispose();
      hv_escala.Dispose();
      hv_Histo.Dispose();
      hv_BinSize.Dispose();
      hv_Sum_Histo.Dispose();
      hv_Mascara.Dispose();
      hv_Vector_Distribucion.Dispose();
      hv_init_vector.Dispose();
      hv_flag_vector.Dispose();
      hv_aux_suma.Dispose();
      hv_Index.Dispose();
      hv_Derivada.Dispose();
      hv_Factor_Der.Dispose();
      hv_Function.Dispose();
      hv_Aux_Val_Max.Dispose();
      hv_Flag_indx_max.Dispose();
      hv_index_protection.Dispose();
      hv_Alt_Min.Dispose();
      hv_Alt_Max.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_Region.Dispose();
      ho_HeightMap_Scalada.Dispose();
      ho_HeightMap_Region.Dispose();

      hv_UmbralMaxThr.Dispose();
      hv_escala.Dispose();
      hv_Histo.Dispose();
      hv_BinSize.Dispose();
      hv_Sum_Histo.Dispose();
      hv_Mascara.Dispose();
      hv_Vector_Distribucion.Dispose();
      hv_init_vector.Dispose();
      hv_flag_vector.Dispose();
      hv_aux_suma.Dispose();
      hv_Index.Dispose();
      hv_Derivada.Dispose();
      hv_Factor_Der.Dispose();
      hv_Function.Dispose();
      hv_Aux_Val_Max.Dispose();
      hv_Flag_indx_max.Dispose();
      hv_index_protection.Dispose();
      hv_Alt_Min.Dispose();
      hv_Alt_Max.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Send_Data_Error (HTuple hv_Exception, HTuple hv_SerialHandle, out HTuple hv_EstadoFx)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_ErrorMsg0 = new HTuple(), hv_ErrorMsg1 = new HTuple();
    HTuple hv_ErrorMsg2 = new HTuple(), hv_ErrorMsg3 = new HTuple();
    HTuple hv_MensajeError = new HTuple(), hv_Mensaje = new HTuple();
    HTuple hv_Procesando = new HTuple(), hv_Resultado = new HTuple();
    HTuple hv_Estado_Fx = new HTuple();
    // Initialize local and output iconic variables 
    hv_EstadoFx = new HTuple();
    try
    {
      HalconException.GetExceptionData(hv_Exception,"error_msg",out hv_ErrorMsg0);
      HalconException.GetExceptionData(hv_Exception,"procedure",out hv_ErrorMsg1);
      HalconException.GetExceptionData(hv_Exception,"operator",out hv_ErrorMsg2);
      HalconException.GetExceptionData(hv_Exception,"program_line",out hv_ErrorMsg3);


      hv_MensajeError.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_MensajeError = (((((("### ERROR ### "+hv_ErrorMsg0)+" IN ")+hv_ErrorMsg1)+" IN FUNTION ")+hv_ErrorMsg2)+" IN LINE ")+hv_ErrorMsg3;
      }
      hv_Mensaje.Dispose();
      hv_Mensaje = new HTuple(hv_MensajeError);
      Send_Data_Info(hv_Mensaje, hv_SerialHandle);
      hv_EstadoFx.Dispose();
      hv_EstadoFx = 0;
      HOperatorSet.WaitSeconds(0.05);
      //#### Envio data de estado ########################
      hv_Procesando.Dispose();
      hv_Procesando = 1;
      hv_Resultado.Dispose();
      hv_Resultado = 2;
      Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
      hv_Estado_Fx.Dispose();
      hv_Estado_Fx = 1;
      //# ################################################# 

      hv_ErrorMsg0.Dispose();
      hv_ErrorMsg1.Dispose();
      hv_ErrorMsg2.Dispose();
      hv_ErrorMsg3.Dispose();
      hv_MensajeError.Dispose();
      hv_Mensaje.Dispose();
      hv_Procesando.Dispose();
      hv_Resultado.Dispose();
      hv_Estado_Fx.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_ErrorMsg0.Dispose();
      hv_ErrorMsg1.Dispose();
      hv_ErrorMsg2.Dispose();
      hv_ErrorMsg3.Dispose();
      hv_MensajeError.Dispose();
      hv_Mensaje.Dispose();
      hv_Procesando.Dispose();
      hv_Resultado.Dispose();
      hv_Estado_Fx.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Send_Data_Estado (HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Vector_Estado_Fx, 
      HTuple hv_Estado, HTuple hv_SerialHandle)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Valor_Variable = new HTuple(), hv_Tag_Destino = new HTuple();
    HTuple hv_Peticion = new HTuple(), hv_Variable_OPC = new HTuple();
    HTuple hv_Variable = new HTuple(), hv_Data = new HTuple();
    HTuple hv_Conteo_Espera = new HTuple(), hv_VarSerial = new HTuple();
    HTuple hv_Nchar = new HTuple();
    // Initialize local and output iconic variables 
    try
    {
      //# #### Envio de estado  #######################
      //wait_seconds (0.1)
      hv_Valor_Variable.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Valor_Variable = new HTuple(hvec_Vector_Estado_Fx[hv_Estado][0].T);
      }
      hv_Tag_Destino.Dispose();
      hv_Tag_Destino = "_EV01_I_Estado";

      hv_Peticion.Dispose();
      hv_Peticion = "HalconEstado";
      hv_Variable_OPC.Dispose();
      hv_Variable_OPC = new HTuple(hv_Tag_Destino);
      hv_Variable.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Variable = new HTuple(hvec_Vector_Estado_Fx[hv_Estado][1].T);
      }
      hv_Data.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Data = (((hv_Peticion+";")+hv_Variable_OPC)+";")+hv_Variable;
      }

      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.WriteSerial(hv_SerialHandle, hv_Data.TupleOrds());
      }

      hv_Conteo_Espera.Dispose();
      hv_Conteo_Espera = 0;
      hv_VarSerial.Dispose();
      hv_VarSerial = 0;
      while ((int)((new HTuple(hv_VarSerial.TupleLess(1))).TupleAnd(new HTuple(hv_Conteo_Espera.TupleLess(
          10)))) != 0)
      {
        hv_Nchar.Dispose();
        HOperatorSet.ReadSerial(hv_SerialHandle, 20, out hv_Nchar);
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Nchar = hv_Nchar.TupleChrt()
            ;
        hv_Nchar.Dispose();
        hv_Nchar = ExpTmpLocalVar_Nchar;
        }
        }
        hv_Variable.Dispose();
        HOperatorSet.TupleNumber(hv_Nchar, out hv_Variable);
        hv_VarSerial.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_VarSerial = new HTuple(hv_Nchar.TupleLength()
            );
        }
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Conteo_Espera = hv_Conteo_Espera+1;
        hv_Conteo_Espera.Dispose();
        hv_Conteo_Espera = ExpTmpLocalVar_Conteo_Espera;
        }
        }
      }

      //# ### Fin envio de estado ######################  


      hv_Valor_Variable.Dispose();
      hv_Tag_Destino.Dispose();
      hv_Peticion.Dispose();
      hv_Variable_OPC.Dispose();
      hv_Variable.Dispose();
      hv_Data.Dispose();
      hv_Conteo_Espera.Dispose();
      hv_VarSerial.Dispose();
      hv_Nchar.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Valor_Variable.Dispose();
      hv_Tag_Destino.Dispose();
      hv_Peticion.Dispose();
      hv_Variable_OPC.Dispose();
      hv_Variable.Dispose();
      hv_Data.Dispose();
      hv_Conteo_Espera.Dispose();
      hv_VarSerial.Dispose();
      hv_Nchar.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Send_Data_Info (HTuple hv_Mensaje, HTuple hv_SerialHandle)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Valor_Variable = new HTuple(), hv_Tag_Destino = new HTuple();
    HTuple hv_Peticion = new HTuple(), hv_Variable_OPC = new HTuple();
    HTuple hv_Variable = new HTuple(), hv_Data = new HTuple();
    HTuple hv_Conteo_Espera = new HTuple(), hv_VarSerial = new HTuple();
    HTuple hv_Nchar = new HTuple(), hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    try
    {
      //# #### Envio de estado  #######################
      try
      {

        hv_Valor_Variable.Dispose();
        hv_Valor_Variable = new HTuple(hv_Mensaje);
        hv_Tag_Destino.Dispose();
        hv_Tag_Destino = "_EV01_I_Estado";

        hv_Peticion.Dispose();
        hv_Peticion = "HalconEstado";
        hv_Variable_OPC.Dispose();
        hv_Variable_OPC = new HTuple(hv_Tag_Destino);
        hv_Variable.Dispose();
        hv_Variable = new HTuple(hv_Mensaje);
        hv_Data.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Data = (((hv_Peticion+";")+hv_Variable_OPC)+";")+hv_Variable;
        }

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.WriteSerial(hv_SerialHandle, hv_Data.TupleOrds());
        }

        hv_Conteo_Espera.Dispose();
        hv_Conteo_Espera = 0;
        hv_VarSerial.Dispose();
        hv_VarSerial = 0;
        while ((int)((new HTuple(hv_VarSerial.TupleLess(1))).TupleAnd(new HTuple(hv_Conteo_Espera.TupleLess(
            10)))) != 0)
        {
          hv_Nchar.Dispose();
          HOperatorSet.ReadSerial(hv_SerialHandle, 20, out hv_Nchar);
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Nchar = hv_Nchar.TupleChrt()
              ;
          hv_Nchar.Dispose();
          hv_Nchar = ExpTmpLocalVar_Nchar;
          }
          }
          hv_Variable.Dispose();
          HOperatorSet.TupleNumber(hv_Nchar, out hv_Variable);
          hv_VarSerial.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_VarSerial = new HTuple(hv_Nchar.TupleLength()
              );
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Conteo_Espera = hv_Conteo_Espera+1;
          hv_Conteo_Espera.Dispose();
          hv_Conteo_Espera = ExpTmpLocalVar_Conteo_Espera;
          }
          }
        }



      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
      }


      //# ### Fin envio de estado ######################  


      hv_Valor_Variable.Dispose();
      hv_Tag_Destino.Dispose();
      hv_Peticion.Dispose();
      hv_Variable_OPC.Dispose();
      hv_Variable.Dispose();
      hv_Data.Dispose();
      hv_Conteo_Espera.Dispose();
      hv_VarSerial.Dispose();
      hv_Nchar.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Valor_Variable.Dispose();
      hv_Tag_Destino.Dispose();
      hv_Peticion.Dispose();
      hv_Variable_OPC.Dispose();
      hv_Variable.Dispose();
      hv_Data.Dispose();
      hv_Conteo_Espera.Dispose();
      hv_VarSerial.Dispose();
      hv_Nchar.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Send_Data_Ordenado_Manga (HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Matrix_Pallet, 
      HTuple hv_Path_CORE_ID, HTuple hv_Path_3D_Segmentos, HTuple hv_Path_SFM_Segmentos, 
      HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Vector_Estado_Fx, HTuple hv_SerialHandle, 
      HTuple hv_Tag_To_Write, HTuple hv_Valor_Variable, HTuple hv_N_Elementos, HTuple hv_Vector_Variables)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Tag_To_WriteOut = new HTuple(), hv_Valor_VariableOut = new HTuple();
    HTuple hv_IndexVectorManga = new HTuple(), hv_ExisteApilado_en_Segemento = new HTuple();
    HTuple hv_ObjectModel3D_Core = new HTuple(), hv_Estado_Get_SFM_STL = new HTuple();
    HTuple hv_Modelo3D_Select = new HTuple(), hv_IsA_Sleeve = new HTuple();
    HTuple hv_AltoTotal_Core = new HTuple(), hv_AnchoTotal_Core = new HTuple();
    HTuple hv_LargoTotal_Core = new HTuple(), hv_DataSelect_Ordenado = new HTuple();
    HTuple hv_Index = new HTuple();

    HTupleVector hvec_DataSelect = new HTupleVector(1);
    // Initialize local and output iconic variables 
    try
    {
      hv_Tag_To_WriteOut.Dispose();
      hv_Tag_To_WriteOut = new HTuple(hv_Tag_To_Write);
      hv_Valor_VariableOut.Dispose();
      hv_Valor_VariableOut = new HTuple(hv_Valor_Variable);
      hv_IndexVectorManga.Dispose();
      hv_IndexVectorManga = 1;
      hvec_DataSelect.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hvec_DataSelect = dh.Take(hvec_Matrix_Pallet[hv_IndexVectorManga]);
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_ExisteApilado_en_Segemento.Dispose();
      HOperatorSet.TupleNumber(hvec_DataSelect[5].T, out hv_ExisteApilado_en_Segemento);
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_ObjectModel3D_Core.Dispose();hv_Estado_Get_SFM_STL.Dispose();hv_Modelo3D_Select.Dispose();
      Get_Stl_Object_Core(hvec_DataSelect[0].T, hv_Path_CORE_ID, hv_Path_3D_Segmentos, 
          hv_Path_SFM_Segmentos, hvec_Vector_Estado_Fx, hv_SerialHandle, out hv_ObjectModel3D_Core, 
          out hv_Estado_Get_SFM_STL, out hv_Modelo3D_Select);
      }
      hv_IsA_Sleeve.Dispose();
      hv_IsA_Sleeve = 1;
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_AltoTotal_Core.Dispose();hv_AnchoTotal_Core.Dispose();hv_LargoTotal_Core.Dispose();
      Get_DimencionesCore(hv_ObjectModel3D_Core, hv_IsA_Sleeve, hvec_DataSelect[0].T, 
          hv_SerialHandle, out hv_AltoTotal_Core, out hv_AnchoTotal_Core, out hv_LargoTotal_Core);
      }

      HOperatorSet.ClearObjectModel3d(hv_ObjectModel3D_Core);


      //* Codificacion Core
      if (hv_DataSelect_Ordenado == null)
        hv_DataSelect_Ordenado = new HTuple();
      hv_DataSelect_Ordenado[0] = hvec_DataSelect[4].T;
      if (hv_DataSelect_Ordenado == null)
        hv_DataSelect_Ordenado = new HTuple();
      hv_DataSelect_Ordenado[1] = hvec_DataSelect[1].T;
      if (hv_DataSelect_Ordenado == null)
        hv_DataSelect_Ordenado = new HTuple();
      hv_DataSelect_Ordenado[2] = hvec_DataSelect[2].T;
      if (hv_DataSelect_Ordenado == null)
        hv_DataSelect_Ordenado = new HTuple();
      hv_DataSelect_Ordenado[3] = 1;
      if (hv_DataSelect_Ordenado == null)
        hv_DataSelect_Ordenado = new HTuple();
      hv_DataSelect_Ordenado[4] = hvec_DataSelect[5].T;
      if (hv_DataSelect_Ordenado == null)
        hv_DataSelect_Ordenado = new HTuple();
      hv_DataSelect_Ordenado[5] = hv_AltoTotal_Core;
      if (hv_DataSelect_Ordenado == null)
        hv_DataSelect_Ordenado = new HTuple();
      hv_DataSelect_Ordenado[6] = 0;
      if (hv_DataSelect_Ordenado == null)
        hv_DataSelect_Ordenado = new HTuple();
      hv_DataSelect_Ordenado[7] = hv_AnchoTotal_Core;


      //***************************************************************************************
      Send_EthernetIP_Data(hv_Tag_To_WriteOut, hv_Valor_VariableOut, hv_SerialHandle);
      //Envio los eleemntos
      HTuple end_val26 = hv_N_Elementos-1;
      HTuple step_val26 = 1;
      for (hv_Index=0; hv_Index.Continue(end_val26, step_val26); hv_Index = hv_Index.TupleAdd(step_val26))
      {
        hv_Tag_To_WriteOut.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Tag_To_WriteOut = hv_Vector_Variables.TupleSelect(
            hv_Index);
        }
        hv_Valor_VariableOut.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Valor_VariableOut = hv_DataSelect_Ordenado.TupleSelect(
            hv_Index);
        }
        {
        HTuple ExpTmpOutVar_0;
        HOperatorSet.TupleNumber(hv_Valor_VariableOut, out ExpTmpOutVar_0);
        hv_Valor_VariableOut.Dispose();
        hv_Valor_VariableOut = ExpTmpOutVar_0;
        }
        Send_EthernetIP_Data(hv_Tag_To_WriteOut, hv_Valor_VariableOut, hv_SerialHandle);
      }
      //***************************************************************************************




      hv_Tag_To_WriteOut.Dispose();
      hv_Valor_VariableOut.Dispose();
      hv_IndexVectorManga.Dispose();
      hv_ExisteApilado_en_Segemento.Dispose();
      hv_ObjectModel3D_Core.Dispose();
      hv_Estado_Get_SFM_STL.Dispose();
      hv_Modelo3D_Select.Dispose();
      hv_IsA_Sleeve.Dispose();
      hv_AltoTotal_Core.Dispose();
      hv_AnchoTotal_Core.Dispose();
      hv_LargoTotal_Core.Dispose();
      hv_DataSelect_Ordenado.Dispose();
      hv_Index.Dispose();
      hvec_DataSelect.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Tag_To_WriteOut.Dispose();
      hv_Valor_VariableOut.Dispose();
      hv_IndexVectorManga.Dispose();
      hv_ExisteApilado_en_Segemento.Dispose();
      hv_ObjectModel3D_Core.Dispose();
      hv_Estado_Get_SFM_STL.Dispose();
      hv_Modelo3D_Select.Dispose();
      hv_IsA_Sleeve.Dispose();
      hv_AltoTotal_Core.Dispose();
      hv_AnchoTotal_Core.Dispose();
      hv_LargoTotal_Core.Dispose();
      hv_DataSelect_Ordenado.Dispose();
      hv_Index.Dispose();
      hvec_DataSelect.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Send_Data_Proceso (HTuple hv_SerialHandle, HTuple hv_Resultado, HTuple hv_Procesando)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Estado_SubProceso = new HTuple();
    HTuple hv_Tag_Destino = new HTuple(), hv_Valor_Variable = new HTuple();
    HTuple hv_Variable_On = new HTuple();
    // Initialize local and output iconic variables 
    try
    {

      //# #### Envio de Procesando  #######################
      hv_Estado_SubProceso.Dispose();
      hv_Estado_SubProceso = new HTuple(hv_Procesando);
      hv_Tag_Destino.Dispose();
      hv_Tag_Destino = "_EV01_I_Procesando";
      hv_Valor_Variable.Dispose();
      hv_Valor_Variable = new HTuple(hv_Estado_SubProceso);
      Send_EthernetIP_Data(hv_Tag_Destino, hv_Valor_Variable, hv_SerialHandle);
      //# ### Fin envio de Resultado ######################  



      //# #### Envio de Resultado  #######################
      //# [1] = Bien [2] = falla
      hv_Tag_Destino.Dispose();
      hv_Tag_Destino = "_EV01_I_Resultado";
      hv_Variable_On.Dispose();
      hv_Variable_On = new HTuple(hv_Resultado);


      Send_EthernetIP_Data(hv_Tag_Destino, hv_Variable_On, hv_SerialHandle);





      //# ### Fin envio de Resultado ######################  



      hv_Estado_SubProceso.Dispose();
      hv_Tag_Destino.Dispose();
      hv_Valor_Variable.Dispose();
      hv_Variable_On.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Estado_SubProceso.Dispose();
      hv_Tag_Destino.Dispose();
      hv_Valor_Variable.Dispose();
      hv_Variable_On.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Send_Data_Proceso_COPY_1 (HTuple hv_SerialHandle, HTuple hv_Resultado, 
      HTuple hv_Procesando)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Estado_SubProceso = new HTuple();
    HTuple hv_Tag_Destino = new HTuple(), hv_Valor_Variable = new HTuple();
    HTuple hv_Variable_On = new HTuple();
    // Initialize local and output iconic variables 
    try
    {

      //# #### Envio de Procesando  #######################
      hv_Estado_SubProceso.Dispose();
      hv_Estado_SubProceso = new HTuple(hv_Procesando);
      hv_Tag_Destino.Dispose();
      hv_Tag_Destino = "_EV01_I_Procesando";
      hv_Valor_Variable.Dispose();
      hv_Valor_Variable = new HTuple(hv_Estado_SubProceso);
      Send_EthernetIP_Data(hv_Tag_Destino, hv_Valor_Variable, hv_SerialHandle);
      //# ### Fin envio de Resultado ######################  



      //# #### Envio de Resultado  #######################
      //# [1] = Bien [2] = falla
      hv_Tag_Destino.Dispose();
      hv_Tag_Destino = "_EV01_I_Resultado";
      hv_Variable_On.Dispose();
      hv_Variable_On = new HTuple(hv_Resultado);
      Send_Estado_Subproceso(hv_Variable_On, hv_SerialHandle, hv_Tag_Destino);
      //# ### Fin envio de Resultado ######################  



      hv_Estado_SubProceso.Dispose();
      hv_Tag_Destino.Dispose();
      hv_Valor_Variable.Dispose();
      hv_Variable_On.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Estado_SubProceso.Dispose();
      hv_Tag_Destino.Dispose();
      hv_Valor_Variable.Dispose();
      hv_Variable_On.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Send_Data_Sleeve_To_Robot (HTuple hv__EV1_O_CmdDatos, HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Matrix_Sleeve, 
      HTuple hv_SerialHandle, HTuple hv_Cod_Core_ToUse, out HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Matrix_Sleeve_New)
  {



      // Local iconic variables 

      // Local control variables 

      HTuple hv_Pallet_To_Scan = new HTuple();
      HTuple hv_Segmento_To_Scan = new HTuple(), hv_PitutoExist = new HTuple();
      HTuple hv_FXcheck = new HTuple(), hv_MangaToRead = new HTuple();
      HTuple hv_TagToWrite = new HTuple(), hv_MangaToReadNOW = new HTuple();
      HTuple hv_Procesando = new HTuple(), hv_Resultado = new HTuple();
      HTuple hv_Nelementos = new HTuple(), hv_MangasTotales = new HTuple();
      HTuple hv_ValorTag = new HTuple(), hv_Index1 = new HTuple();
      HTuple hv_Index = new HTuple(), hv_IndexLast = new HTuple();
      HTuple hv_IndexPoses = new HTuple(), hv_ValorValido = new HTuple();
      HTuple hv_IndexLastVAlue = new HTuple(), hv_Exception = new HTuple();
      HTuple hv_Max_Batch_Size = new HTuple(), hv_IndexMaximos = new HTuple();
      HTuple hv_PosXYZ1 = new HTuple(), hv_PoseSleeve = new HTuple();
      HTuple hv_PoseSleeve2 = new HTuple(), hv_PosXYZ2 = new HTuple();
      HTuple hv_PosXYZ3 = new HTuple(), hv_PosXYZ4 = new HTuple();
      HTuple hv_Mensaje = new HTuple(), hv_EstadoFx = new HTuple();

      HTupleVector hvec_Matrix_Poses = new HTupleVector(2);
      HTuple   hv_Cod_Core_ToUse_COPY_INP_TMP = new HTuple(hv_Cod_Core_ToUse);
      HTupleVector  hvec_Matrix_Sleeve_COPY_INP_TMP = new HTupleVector(hvec_Matrix_Sleeve);

      // Initialize local and output iconic variables 
      hvec_Matrix_Sleeve_New = new HTupleVector(2);
      try
      {


      try
      {
        hv_Cod_Core_ToUse_COPY_INP_TMP.Dispose();hv_Pallet_To_Scan.Dispose();hv_Segmento_To_Scan.Dispose();hv_PitutoExist.Dispose();hv_FXcheck.Dispose();
        Get_Core_ToUse_From_BDD_Fast_COPY_8(hv_SerialHandle, out hv_Cod_Core_ToUse_COPY_INP_TMP, 
            out hv_Pallet_To_Scan, out hv_Segmento_To_Scan, out hv_PitutoExist, out hv_FXcheck);


        hv_MangaToRead.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_MangaToRead = hv__EV1_O_CmdDatos-200;
        }
        hv_TagToWrite.Dispose();
        hv_TagToWrite = "_EBD_I_NumEntidad";


        //*******************************
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_MangaToRead = (4*hv_MangaToRead)-3;
        hv_MangaToRead.Dispose();
        hv_MangaToRead = ExpTmpLocalVar_MangaToRead;
        }
        }
        hv_MangaToReadNOW.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_MangaToReadNOW = (4*hv_MangaToRead)-3;
        }
        //*******************************

        //# ### Envio data de estado ########################
        hv_Procesando.Dispose();
        hv_Procesando = 1;
        hv_Resultado.Dispose();
        hv_Resultado = 0;
        Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
        //# ################################################# 

        hvec_Matrix_Poses.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hvec_Matrix_Poses = dh.Take((
            dh.Add(new HTupleVector(2)).Insert(0,(dh.Add(new HTupleVector(1)).Insert(0,dh.Add(new HTupleVector(new HTuple())))))));
        }
        hvec_Matrix_Poses[0][0] = new HTupleVector(new HTuple("Poses"));

        hv_Nelementos.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Nelementos = new HTuple(hvec_Matrix_Sleeve_COPY_INP_TMP[1].Length);
        }


        hv_MangasTotales.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_MangasTotales = hv_Nelementos-3;
        }
        if ((int)(new HTuple(hv_MangaToRead.TupleGreater(hv_MangasTotales))) != 0)
        {

          //NumEntidad de Manga - > 255 Fin de envio de datos.
          hv_ValorTag.Dispose();
          hv_ValorTag = 255;
          Send_EthernetIP_Data(hv_TagToWrite, hv_ValorTag, hv_SerialHandle);
          //# ### Envio data de estado ########################
          hv_Procesando.Dispose();
          hv_Procesando = 0;
          hv_Resultado.Dispose();
          hv_Resultado = 1;
          Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
          //# ################################################# 



          hvec_Matrix_Sleeve_COPY_INP_TMP.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hvec_Matrix_Sleeve_COPY_INP_TMP = dh.Take((
              dh.Add(new HTupleVector(2)).Insert(0,(dh.Add(new HTupleVector(1)).Insert(0,dh.Add(new HTupleVector(new HTuple())))))));
          }
          hvec_Matrix_Sleeve_COPY_INP_TMP[0][0] = new HTupleVector(new HTuple("SleeveName"));
          hvec_Matrix_Sleeve_COPY_INP_TMP[0][1] = new HTupleVector(new HTuple("TakePic"));
          hvec_Matrix_Sleeve_COPY_INP_TMP[0][2] = new HTupleVector(new HTuple("FolderPath"));
          hvec_Matrix_Sleeve_COPY_INP_TMP[0][3] = new HTupleVector(new HTuple("MangaPos"));


          for (hv_Index1=1; (int)hv_Index1<=6; hv_Index1 = (int)hv_Index1 + 1)
          {

            hvec_Matrix_Sleeve_COPY_INP_TMP[hv_Index1][1] = new HTupleVector(new HTuple(0));
            hvec_Matrix_Sleeve_COPY_INP_TMP[hv_Index1][2] = new HTupleVector(new HTuple(""));
            hvec_Matrix_Sleeve_COPY_INP_TMP[hv_Index1][3] = new HTupleVector(new HTuple(""));
          }

          hvec_Matrix_Sleeve_New.Dispose();
          hvec_Matrix_Sleeve_New = new HTupleVector(hvec_Matrix_Sleeve_COPY_INP_TMP);


          hv_Cod_Core_ToUse_COPY_INP_TMP.Dispose();
          hv_Pallet_To_Scan.Dispose();
          hv_Segmento_To_Scan.Dispose();
          hv_PitutoExist.Dispose();
          hv_FXcheck.Dispose();
          hv_MangaToRead.Dispose();
          hv_TagToWrite.Dispose();
          hv_MangaToReadNOW.Dispose();
          hv_Procesando.Dispose();
          hv_Resultado.Dispose();
          hv_Nelementos.Dispose();
          hv_MangasTotales.Dispose();
          hv_ValorTag.Dispose();
          hv_Index1.Dispose();
          hv_Index.Dispose();
          hv_IndexLast.Dispose();
          hv_IndexPoses.Dispose();
          hv_ValorValido.Dispose();
          hv_IndexLastVAlue.Dispose();
          hv_Exception.Dispose();
          hv_Max_Batch_Size.Dispose();
          hv_IndexMaximos.Dispose();
          hv_PosXYZ1.Dispose();
          hv_PoseSleeve.Dispose();
          hv_PoseSleeve2.Dispose();
          hv_PosXYZ2.Dispose();
          hv_PosXYZ3.Dispose();
          hv_PosXYZ4.Dispose();
          hv_Mensaje.Dispose();
          hv_EstadoFx.Dispose();
          hvec_Matrix_Poses.Dispose();

          return;

        }

        HTuple end_val61 = hv_Nelementos-1;
        HTuple step_val61 = 1;
        for (hv_Index=1; hv_Index.Continue(end_val61, step_val61); hv_Index = hv_Index.TupleAdd(step_val61))
        {

          if ((int)(new HTuple((hvec_Matrix_Sleeve_COPY_INP_TMP[hv_Index][0].T).TupleEqual(
              hv_Cod_Core_ToUse_COPY_INP_TMP))) != 0)
          {
            hv_IndexLast.Dispose();
            hv_IndexLast = new HTuple(hv_Index);
            break;
          }
          hv_IndexLast.Dispose();
          hv_IndexLast = new HTuple(hv_Index);
        }


        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_MangaToRead = hv_MangaToRead+2;
        hv_MangaToRead.Dispose();
        hv_MangaToRead = ExpTmpLocalVar_MangaToRead;
        }
        }
        //********************************
        //Busco si existen los elementos
        //********************************

        hv_IndexPoses.Dispose();
        hv_IndexPoses = 0;
        HTuple end_val77 = hv_MangaToRead+4;
        HTuple step_val77 = 1;
        for (hv_Index=hv_MangaToRead; hv_Index.Continue(end_val77, step_val77); hv_Index = hv_Index.TupleAdd(step_val77))
        {


          try
          {
            hv_ValorValido.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_ValorValido = new HTuple(hvec_Matrix_Sleeve_COPY_INP_TMP[hv_IndexLast][hv_Index].T);
            }
            hv_IndexLastVAlue.Dispose();
            hv_IndexLastVAlue = new HTuple(hv_Index);
            {
            HTuple ExpTmpOutVar_0;
            HOperatorSet.TupleSplit(hv_ValorValido, ";", out ExpTmpOutVar_0);
            hv_ValorValido.Dispose();
            hv_ValorValido = ExpTmpOutVar_0;
            }
            {
            HTuple ExpTmpOutVar_0;
            HOperatorSet.TupleNumber(hv_ValorValido, out ExpTmpOutVar_0);
            hv_ValorValido.Dispose();
            hv_ValorValido = ExpTmpOutVar_0;
            }


            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hvec_Matrix_Poses[1][hv_IndexPoses] = dh.Add(new HTupleVector(hv_ValorValido));
            }
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            {
            HTuple 
              ExpTmpLocalVar_IndexPoses = hv_IndexPoses+1;
            hv_IndexPoses.Dispose();
            hv_IndexPoses = ExpTmpLocalVar_IndexPoses;
            }
            }
          }
          // catch (Exception) 
          catch (HalconException HDevExpDefaultException2)
          {
            HDevExpDefaultException2.ToHTuple(out hv_Exception);
            break;
          }


        }



        hv_Max_Batch_Size.Dispose();
        hv_Max_Batch_Size = 4;
        hv_IndexMaximos.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_IndexMaximos = hv_MangaToReadNOW+3;
        }
        if ((int)(new HTuple(hv_IndexPoses.TupleGreater(hv_IndexMaximos))) != 0)
        {
          hv_IndexPoses.Dispose();
          hv_IndexPoses = new HTuple(hv_Max_Batch_Size);
        }


        switch (hv_IndexPoses.I)
        {


        case 0:

          hv_ValorTag.Dispose();
          hv_ValorTag = 255;
          Send_EthernetIP_Data(hv_TagToWrite, hv_ValorTag, hv_SerialHandle);
          break;


        case 1:
          hv_PosXYZ1.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_PosXYZ1 = new HTuple(hvec_Matrix_Poses[1][0].T);
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_PoseSleeve.Dispose();
          HOperatorSet.CreatePose(hv_PosXYZ1.TupleSelect(0), hv_PosXYZ1.TupleSelect(
              1), hv_PosXYZ1.TupleSelect(2), 0, 0, 0, "Rp+T", "gba", "point", out hv_PoseSleeve);
          }

          Send_Data_To_Robot(hv_PoseSleeve, hv_SerialHandle);

          hv_PoseSleeve2.Dispose();
          HOperatorSet.CreatePose(0, 0, 0, 0, 0, 0, "Rp+T", "gba", "point", out hv_PoseSleeve2);
          Send_Data_To_BDD_Pos(hv_PoseSleeve2, hv_SerialHandle);

          //NumEntidad de Manga - > 3
          hv_ValorTag.Dispose();
          hv_ValorTag = 3;
          Send_EthernetIP_Data(hv_TagToWrite, hv_ValorTag, hv_SerialHandle);
          break;



        case 2:
          hv_PosXYZ1.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_PosXYZ1 = new HTuple(hvec_Matrix_Poses[1][0].T);
          }
          hv_PosXYZ2.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_PosXYZ2 = new HTuple(hvec_Matrix_Poses[1][1].T);
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_PoseSleeve.Dispose();
          HOperatorSet.CreatePose(hv_PosXYZ1.TupleSelect(0), hv_PosXYZ1.TupleSelect(
              1), hv_PosXYZ1.TupleSelect(2), hv_PosXYZ2.TupleSelect(2), hv_PosXYZ2.TupleSelect(
              1), hv_PosXYZ2.TupleSelect(0), "Rp+T", "gba", "point", out hv_PoseSleeve);
          }
          Send_Data_To_Robot(hv_PoseSleeve, hv_SerialHandle);

          hv_PoseSleeve2.Dispose();
          HOperatorSet.CreatePose(0, 0, 0, 0, 0, 0, "Rp+T", "gba", "point", out hv_PoseSleeve2);
          Send_Data_To_BDD_Pos(hv_PoseSleeve2, hv_SerialHandle);

          //NumEntidad de Manga - > 3
          hv_ValorTag.Dispose();
          hv_ValorTag = 3;
          Send_EthernetIP_Data(hv_TagToWrite, hv_ValorTag, hv_SerialHandle);
          break;


        case 3:

          hv_PosXYZ1.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_PosXYZ1 = new HTuple(hvec_Matrix_Poses[1][0].T);
          }
          hv_PosXYZ2.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_PosXYZ2 = new HTuple(hvec_Matrix_Poses[1][1].T);
          }
          hv_PosXYZ3.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_PosXYZ3 = new HTuple(hvec_Matrix_Poses[1][2].T);
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_PoseSleeve.Dispose();
          HOperatorSet.CreatePose(hv_PosXYZ1.TupleSelect(0), hv_PosXYZ1.TupleSelect(
              1), hv_PosXYZ1.TupleSelect(2), hv_PosXYZ2.TupleSelect(2), hv_PosXYZ2.TupleSelect(
              1), hv_PosXYZ2.TupleSelect(0), "Rp+T", "gba", "point", out hv_PoseSleeve);
          }

          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_PoseSleeve2.Dispose();
          HOperatorSet.CreatePose(hv_PosXYZ3.TupleSelect(0), hv_PosXYZ3.TupleSelect(
              1), hv_PosXYZ3.TupleSelect(2), 0, 0, 0, "Rp+T", "gba", "point", out hv_PoseSleeve2);
          }

          Send_Data_To_Robot(hv_PoseSleeve, hv_SerialHandle);
          Send_Data_To_BDD_Pos(hv_PoseSleeve2, hv_SerialHandle);
          //NumEntidad de Manga - > 3
          hv_ValorTag.Dispose();
          hv_ValorTag = 3;
          Send_EthernetIP_Data(hv_TagToWrite, hv_ValorTag, hv_SerialHandle);

          break;




        case 4:

          hv_PosXYZ1.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_PosXYZ1 = new HTuple(hvec_Matrix_Poses[1][0].T);
          }
          hv_PosXYZ2.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_PosXYZ2 = new HTuple(hvec_Matrix_Poses[1][1].T);
          }
          hv_PosXYZ3.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_PosXYZ3 = new HTuple(hvec_Matrix_Poses[1][2].T);
          }
          hv_PosXYZ4.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_PosXYZ4 = new HTuple(hvec_Matrix_Poses[1][3].T);
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_PoseSleeve.Dispose();
          HOperatorSet.CreatePose(hv_PosXYZ1.TupleSelect(0), hv_PosXYZ1.TupleSelect(
              1), hv_PosXYZ1.TupleSelect(2), hv_PosXYZ2.TupleSelect(2), hv_PosXYZ2.TupleSelect(
              1), hv_PosXYZ2.TupleSelect(0), "Rp+T", "gba", "point", out hv_PoseSleeve);
          }

          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_PoseSleeve2.Dispose();
          HOperatorSet.CreatePose(hv_PosXYZ3.TupleSelect(0), hv_PosXYZ3.TupleSelect(
              1), hv_PosXYZ3.TupleSelect(2), hv_PosXYZ4.TupleSelect(2), hv_PosXYZ4.TupleSelect(
              1), hv_PosXYZ4.TupleSelect(0), "Rp+T", "gba", "point", out hv_PoseSleeve2);
          }

          Send_Data_To_Robot(hv_PoseSleeve, hv_SerialHandle);
          Send_Data_To_BDD_Pos(hv_PoseSleeve2, hv_SerialHandle);
          //NumEntidad de Manga - > 3
          hv_ValorTag.Dispose();
          hv_ValorTag = 3;
          Send_EthernetIP_Data(hv_TagToWrite, hv_ValorTag, hv_SerialHandle);

          hv_Mensaje.Dispose();
          hv_Mensaje = "#####  ENVIO DE DATOS MANGAS TERMINADO #####";
          Send_Data_Info(hv_Mensaje, hv_SerialHandle);


          break;

        }



        //# ### Envio data de estado ########################
        hv_Procesando.Dispose();
        hv_Procesando = 0;
        hv_Resultado.Dispose();
        hv_Resultado = 1;
        Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
        //# ################################################# 

      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);


        hv_EstadoFx.Dispose();
        Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx);
        hv_Mensaje.Dispose();
        hv_Mensaje = "#####  ERROR EN ENVIO DE DATOS MANGAS  #####";
        Send_Data_Info(hv_Mensaje, hv_SerialHandle);
      }



      hv_Cod_Core_ToUse_COPY_INP_TMP.Dispose();
      hv_Pallet_To_Scan.Dispose();
      hv_Segmento_To_Scan.Dispose();
      hv_PitutoExist.Dispose();
      hv_FXcheck.Dispose();
      hv_MangaToRead.Dispose();
      hv_TagToWrite.Dispose();
      hv_MangaToReadNOW.Dispose();
      hv_Procesando.Dispose();
      hv_Resultado.Dispose();
      hv_Nelementos.Dispose();
      hv_MangasTotales.Dispose();
      hv_ValorTag.Dispose();
      hv_Index1.Dispose();
      hv_Index.Dispose();
      hv_IndexLast.Dispose();
      hv_IndexPoses.Dispose();
      hv_ValorValido.Dispose();
      hv_IndexLastVAlue.Dispose();
      hv_Exception.Dispose();
      hv_Max_Batch_Size.Dispose();
      hv_IndexMaximos.Dispose();
      hv_PosXYZ1.Dispose();
      hv_PoseSleeve.Dispose();
      hv_PoseSleeve2.Dispose();
      hv_PosXYZ2.Dispose();
      hv_PosXYZ3.Dispose();
      hv_PosXYZ4.Dispose();
      hv_Mensaje.Dispose();
      hv_EstadoFx.Dispose();
      hvec_Matrix_Poses.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Cod_Core_ToUse_COPY_INP_TMP.Dispose();
      hv_Pallet_To_Scan.Dispose();
      hv_Segmento_To_Scan.Dispose();
      hv_PitutoExist.Dispose();
      hv_FXcheck.Dispose();
      hv_MangaToRead.Dispose();
      hv_TagToWrite.Dispose();
      hv_MangaToReadNOW.Dispose();
      hv_Procesando.Dispose();
      hv_Resultado.Dispose();
      hv_Nelementos.Dispose();
      hv_MangasTotales.Dispose();
      hv_ValorTag.Dispose();
      hv_Index1.Dispose();
      hv_Index.Dispose();
      hv_IndexLast.Dispose();
      hv_IndexPoses.Dispose();
      hv_ValorValido.Dispose();
      hv_IndexLastVAlue.Dispose();
      hv_Exception.Dispose();
      hv_Max_Batch_Size.Dispose();
      hv_IndexMaximos.Dispose();
      hv_PosXYZ1.Dispose();
      hv_PoseSleeve.Dispose();
      hv_PoseSleeve2.Dispose();
      hv_PosXYZ2.Dispose();
      hv_PosXYZ3.Dispose();
      hv_PosXYZ4.Dispose();
      hv_Mensaje.Dispose();
      hv_EstadoFx.Dispose();
      hvec_Matrix_Poses.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Send_Data_To_BDD_Pos (HTuple hv_Pose_Refinada, HTuple hv_SerialHandle)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Pose_Refinada_Tp2 = new HTuple();
    HTuple hv_Index = new HTuple(), hv_VR_PosicionEsquinaPallet = new HTuple();
    HTuple hv_Variable_Pos = new HTuple(), hv_Index_Var = new HTuple();
    HTuple hv_Tag_Destino = new HTuple(), hv_Variable = new HTuple();
    // Initialize local and output iconic variables 
    try
    {
      hv_Pose_Refinada_Tp2.Dispose();
      HOperatorSet.ConvertPoseType(hv_Pose_Refinada, "Rp+T", "abg", "point", out hv_Pose_Refinada_Tp2);
      for (hv_Index=0; (int)hv_Index<=(int)((new HTuple(hv_Pose_Refinada.TupleLength()
          ))-2); hv_Index = (int)hv_Index + 1)
      {
        if (hv_VR_PosicionEsquinaPallet == null)
          hv_VR_PosicionEsquinaPallet = new HTuple();
        hv_VR_PosicionEsquinaPallet[hv_Index] = hv_Pose_Refinada.TupleSelect(hv_Index);
      }


      //*******************************
      //Enviar por ETHERNETIP
      //*******************************
      hv_Variable_Pos.Dispose();
      hv_Variable_Pos = new HTuple();
      hv_Variable_Pos[0] = "X";
      hv_Variable_Pos[1] = "Y";
      hv_Variable_Pos[2] = "Z";
      hv_Variable_Pos[3] = "C";
      hv_Variable_Pos[4] = "B";
      hv_Variable_Pos[5] = "A";
      for (hv_Index_Var=0; (int)hv_Index_Var<=(int)((new HTuple(hv_VR_PosicionEsquinaPallet.TupleLength()
          ))-1); hv_Index_Var = (int)hv_Index_Var + 1)
      {
        hv_Tag_Destino.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Tag_Destino = "_EBD_I_Eje"+(hv_Variable_Pos.TupleSelect(
            hv_Index_Var));
        }
        hv_Variable.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Variable = hv_VR_PosicionEsquinaPallet.TupleSelect(
            hv_Index_Var);
        }
        Send_EthernetIP_Data(hv_Tag_Destino, hv_Variable, hv_SerialHandle);

      }

      hv_Pose_Refinada_Tp2.Dispose();
      hv_Index.Dispose();
      hv_VR_PosicionEsquinaPallet.Dispose();
      hv_Variable_Pos.Dispose();
      hv_Index_Var.Dispose();
      hv_Tag_Destino.Dispose();
      hv_Variable.Dispose();

      return;


    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Pose_Refinada_Tp2.Dispose();
      hv_Index.Dispose();
      hv_VR_PosicionEsquinaPallet.Dispose();
      hv_Variable_Pos.Dispose();
      hv_Index_Var.Dispose();
      hv_Tag_Destino.Dispose();
      hv_Variable.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Send_Data_To_Robot (HTuple hv_Pose_Refinada, HTuple hv_SerialHandle)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Pose_Refinada_Tp2 = new HTuple();
    HTuple hv_Index = new HTuple(), hv_VR_PosicionEsquinaPallet = new HTuple();
    HTuple hv_Variable_Pos = new HTuple(), hv_Index_Var = new HTuple();
    HTuple hv_Tag_Destino = new HTuple(), hv_Variable = new HTuple();
    // Initialize local and output iconic variables 
    try
    {
      hv_Pose_Refinada_Tp2.Dispose();
      HOperatorSet.ConvertPoseType(hv_Pose_Refinada, "Rp+T", "abg", "point", out hv_Pose_Refinada_Tp2);
      for (hv_Index=0; (int)hv_Index<=(int)((new HTuple(hv_Pose_Refinada.TupleLength()
          ))-2); hv_Index = (int)hv_Index + 1)
      {
        if (hv_VR_PosicionEsquinaPallet == null)
          hv_VR_PosicionEsquinaPallet = new HTuple();
        hv_VR_PosicionEsquinaPallet[hv_Index] = hv_Pose_Refinada.TupleSelect(hv_Index);
      }


      //*******************************
      //Enviar por ETHERNETIP
      //*******************************
      hv_Variable_Pos.Dispose();
      hv_Variable_Pos = new HTuple();
      hv_Variable_Pos[0] = "X";
      hv_Variable_Pos[1] = "Y";
      hv_Variable_Pos[2] = "Z";
      hv_Variable_Pos[3] = "C";
      hv_Variable_Pos[4] = "B";
      hv_Variable_Pos[5] = "A";
      for (hv_Index_Var=0; (int)hv_Index_Var<=(int)((new HTuple(hv_VR_PosicionEsquinaPallet.TupleLength()
          ))-1); hv_Index_Var = (int)hv_Index_Var + 1)
      {
        hv_Tag_Destino.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Tag_Destino = "_EV01_I_Eje"+(hv_Variable_Pos.TupleSelect(
            hv_Index_Var));
        }
        hv_Variable.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Variable = hv_VR_PosicionEsquinaPallet.TupleSelect(
            hv_Index_Var);
        }
        Send_EthernetIP_Data(hv_Tag_Destino, hv_Variable, hv_SerialHandle);

      }

      hv_Pose_Refinada_Tp2.Dispose();
      hv_Index.Dispose();
      hv_VR_PosicionEsquinaPallet.Dispose();
      hv_Variable_Pos.Dispose();
      hv_Index_Var.Dispose();
      hv_Tag_Destino.Dispose();
      hv_Variable.Dispose();

      return;


    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Pose_Refinada_Tp2.Dispose();
      hv_Index.Dispose();
      hv_VR_PosicionEsquinaPallet.Dispose();
      hv_Variable_Pos.Dispose();
      hv_Index_Var.Dispose();
      hv_Tag_Destino.Dispose();
      hv_Variable.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Send_Estado_Subproceso (HTuple hv_Variable_On, HTuple hv_SerialHandle, 
      HTuple hv_Tag_Destino)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Time = new HTuple(), hv_Variable_Off = new HTuple();
    // Initialize local and output iconic variables 
    try
    {

      //Tiempo en segundos
      hv_Time.Dispose();
      hv_Time = 1;
      hv_Variable_Off.Dispose();
      hv_Variable_Off = 0;
      Send_Pulse_EthernetIp_Data(hv_Tag_Destino, hv_Variable_On, hv_SerialHandle, 
          hv_Variable_Off, hv_Time);



      hv_Time.Dispose();
      hv_Variable_Off.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Time.Dispose();
      hv_Variable_Off.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Send_Estado_Subproceso_COPY_1 (HTuple hv_Variable_On, HTuple hv_SerialHandle, 
      HTuple hv_Tag_Destino)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Time = new HTuple(), hv_Variable_Off = new HTuple();
    // Initialize local and output iconic variables 
    try
    {
      //
      //Tiempo en segundos
      hv_Time.Dispose();
      hv_Time = 0.5;
      hv_Variable_Off.Dispose();
      hv_Variable_Off = 0;
      Send_Pulse_EthernetIp_Data(hv_Tag_Destino, hv_Variable_On, hv_SerialHandle, 
          hv_Variable_Off, hv_Time);

      hv_Time.Dispose();
      hv_Variable_Off.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Time.Dispose();
      hv_Variable_Off.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Send_Estado_Vision (HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Vector_Estado_Fx, 
      HTuple hv_SerialHandle, HTuple hv_Estado)
  {


    // Initialize local and output iconic variables 
    //#### Envio data de estado ############################################

    Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);
    //# ###################################################################### 


    return;
  }

  public void Send_EthernetIP_Data (HTuple hv_Tag_Destino, HTuple hv_Variable, HTuple hv_SerialHandle)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Peticion = new HTuple(), hv_Variable_OPC = new HTuple();
    HTuple hv_Data = new HTuple(), hv_Conteo_Espera = new HTuple();
    HTuple hv_VarSerial = new HTuple(), hv_Nchar = new HTuple();
    HTuple hv_Exception = new HTuple();
    HTuple   hv_Variable_COPY_INP_TMP = new HTuple(hv_Variable);

    // Initialize local and output iconic variables 
    try
    {
      HOperatorSet.WaitSeconds(0.00);


      try
      {


        hv_Peticion.Dispose();
        hv_Peticion = "Escritura";
        hv_Variable_OPC.Dispose();
        hv_Variable_OPC = new HTuple(hv_Tag_Destino);

        hv_Data.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Data = (((hv_Peticion+";")+hv_Variable_OPC)+";")+hv_Variable_COPY_INP_TMP;
        }

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.WriteSerial(hv_SerialHandle, hv_Data.TupleOrds());
        }
        hv_Conteo_Espera.Dispose();
        hv_Conteo_Espera = 0;
        hv_VarSerial.Dispose();
        hv_VarSerial = 0;
        while ((int)((new HTuple(hv_VarSerial.TupleLess(1))).TupleAnd(new HTuple(hv_Conteo_Espera.TupleLess(
            10)))) != 0)
        {
          hv_Nchar.Dispose();
          HOperatorSet.ReadSerial(hv_SerialHandle, 10, out hv_Nchar);
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Nchar = hv_Nchar.TupleChrt()
              ;
          hv_Nchar.Dispose();
          hv_Nchar = ExpTmpLocalVar_Nchar;
          }
          }
          hv_Variable_COPY_INP_TMP.Dispose();
          HOperatorSet.TupleNumber(hv_Nchar, out hv_Variable_COPY_INP_TMP);
          hv_VarSerial.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_VarSerial = new HTuple(hv_Nchar.TupleLength()
              );
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Conteo_Espera = hv_Conteo_Espera+1;
          hv_Conteo_Espera.Dispose();
          hv_Conteo_Espera = ExpTmpLocalVar_Conteo_Espera;
          }
          }
        }


      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
      }




      hv_Variable_COPY_INP_TMP.Dispose();
      hv_Peticion.Dispose();
      hv_Variable_OPC.Dispose();
      hv_Data.Dispose();
      hv_Conteo_Espera.Dispose();
      hv_VarSerial.Dispose();
      hv_Nchar.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Variable_COPY_INP_TMP.Dispose();
      hv_Peticion.Dispose();
      hv_Variable_OPC.Dispose();
      hv_Data.Dispose();
      hv_Conteo_Espera.Dispose();
      hv_VarSerial.Dispose();
      hv_Nchar.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Send_Pase_Sleeve (HObject ho_Objeto_1, HTuple hv_SerialHandle, out HTuple hv_Estado_Funcion, 
      out HTuple hv_EstadoFx)
  {




    // Local iconic variables 

    // Local control variables 

    HTuple hv_DistanciCamaraSuelo = new HTuple();
    HTuple hv_Exception = new HTuple(), hv_Pose_Base_Sleeve = new HTuple();
    HTuple hv_Mensaje = new HTuple(), hv_TagToWrite = new HTuple();
    // Initialize local and output iconic variables 
    hv_Estado_Funcion = new HTuple();
    hv_EstadoFx = new HTuple();
    try
    {

      try
      {

        //decompose3 (Objeto_1, X, Y, Z)

        //threshold (Z, SelectedRegions, 1100, 2330)

        //area_center (SelectedRegions, Area2, Row2, Column2)
        //area_center (SelectedRegions, Area2, CentroPalletX, CentroPalletY)


        //get_grayval (Objeto_1, CentroPalletX, CentroPalletY, BaseSleeve)

        //PosX := BaseSleeve[0]
        //PosY := BaseSleeve[1]
        //PosZ := BaseSleeve[2]


        //DistanciCamaraSuelo := 2430
        //PosZ := DistanciCamaraSuelo

        //Offsety := 5
        //while (PosX=0 or PosY=0)
          //Offsety := Offsety+1
          //try


            //get_grayval (Objeto_1, Row2+10, Column2+Offsety, BaseSleeve)
            //PosX := BaseSleeve[0]
            //PosY := BaseSleeve[1]
            //PosZ := BaseSleeve[2]

          //catch (Exception)
            //continue
          //endtry


        //endwhile

        //DistanciCamaraSuelo := 2430
        //PosZ := DistanciCamaraSuelo
        //CorrimientoSegmento := -250
        //create_pose (PosX+CorrimientoSegmento, PosY, PosZ, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose_Base_Sleeve)


        //reduce_domain (Z, SelectedRegions, ImageReduced)
        //dev_clear_window ()
        //dev_display (ImageReduced)
        //dev_get_window (WindowHandle)
        //disp_cross (WindowHandle, CentroPalletX, CentroPalletY, 500, 0)







        //**********************************************
        //Delimitar falsos Positivos
        //**********************************************
        hv_DistanciCamaraSuelo.Dispose();
        hv_DistanciCamaraSuelo = 2600;
        hv_Pose_Base_Sleeve.Dispose();
        HOperatorSet.CreatePose(0, 0, hv_DistanciCamaraSuelo, 0, 0, 0, "Rp+T", "gba", 
            "point", out hv_Pose_Base_Sleeve);

        Send_Data_To_Robot(hv_Pose_Base_Sleeve, hv_SerialHandle);

        hv_Mensaje.Dispose();
        hv_Mensaje = "####################################";
        Send_Data_Info(hv_Mensaje, hv_SerialHandle);
        hv_Mensaje.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Mensaje = "Base Pallet -> 0 # 0 # "+hv_DistanciCamaraSuelo;
        }
        Send_Data_Info(hv_Mensaje, hv_SerialHandle);
        hv_Mensaje.Dispose();
        hv_Mensaje = "####################################";
        Send_Data_Info(hv_Mensaje, hv_SerialHandle);
        //***********************************************

        //* Altura desde la camara deseada ***
        hv_TagToWrite.Dispose();
        hv_TagToWrite = "_EV01_I_EjeZZ";
        Send_EthernetIP_Data(hv_TagToWrite, hv_DistanciCamaraSuelo, hv_SerialHandle);



        hv_EstadoFx.Dispose();
        hv_EstadoFx = 1;

        hv_DistanciCamaraSuelo.Dispose();
        hv_Exception.Dispose();
        hv_Pose_Base_Sleeve.Dispose();
        hv_Mensaje.Dispose();
        hv_TagToWrite.Dispose();

        return;

      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_EstadoFx.Dispose();
        Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx);

      }


    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_DistanciCamaraSuelo.Dispose();
      hv_Exception.Dispose();
      hv_Pose_Base_Sleeve.Dispose();
      hv_Mensaje.Dispose();
      hv_TagToWrite.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Send_PatronToRobot (HTuple hv_PoseForCalibrationPlate, HTuple hv_SerialHandle)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Variable_Pos = new HTuple(), hv_Index_Var = new HTuple();
    HTuple hv_Tag_Destino = new HTuple(), hv_Variable = new HTuple();
    // Initialize local and output iconic variables 
    try
    {
      hv_Variable_Pos.Dispose();
      hv_Variable_Pos = new HTuple();
      hv_Variable_Pos[0] = "X";
      hv_Variable_Pos[1] = "Y";
      hv_Variable_Pos[2] = "Z";
      hv_Variable_Pos[3] = "C";
      hv_Variable_Pos[4] = "B";
      hv_Variable_Pos[5] = "A";
      for (hv_Index_Var=0; (int)hv_Index_Var<=5; hv_Index_Var = (int)hv_Index_Var + 1)
      {
        hv_Tag_Destino.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Tag_Destino = "_EV01_I_Eje"+(hv_Variable_Pos.TupleSelect(
            hv_Index_Var));
        }
        hv_Variable.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Variable = hv_PoseForCalibrationPlate.TupleSelect(
            hv_Index_Var);
        }
        Send_EthernetIP_Data(hv_Tag_Destino, hv_Variable, hv_SerialHandle);

      }

      hv_Variable_Pos.Dispose();
      hv_Index_Var.Dispose();
      hv_Tag_Destino.Dispose();
      hv_Variable.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Variable_Pos.Dispose();
      hv_Index_Var.Dispose();
      hv_Tag_Destino.Dispose();
      hv_Variable.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Send_Position_A_Ciegas (HTuple hv_Cod_Core_ToUse, HTuple hv_ConteoCirculares, 
      HTuple hv_SerialHandle, out HTuple hv_PoseMLS, out HTuple hv_Delta_X, out HTuple hv_Delta_Y, 
      out HTuple hv_Delta_Z, out HTuple hv_Estado, out HTuple hv_Procesando, out HTuple hv_Resultado, 
      out HTuple hv_ConteoCircularesOut, out HTuple hv_ConteoCirculares_New, out HTuple hv_ExitBloque3)
  {



    // Local iconic variables 
    // Initialize local and output iconic variables 
    hv_PoseMLS = new HTuple();
    hv_Delta_X = new HTuple();
    hv_Delta_Y = new HTuple();
    hv_Delta_Z = new HTuple();
    hv_Estado = new HTuple();
    hv_Procesando = new HTuple();
    hv_Resultado = new HTuple();
    hv_ConteoCircularesOut = new HTuple();
    hv_ConteoCirculares_New = new HTuple();
    hv_ExitBloque3 = new HTuple();
    hv_ConteoCircularesOut.Dispose();
    hv_ConteoCircularesOut = new HTuple(hv_ConteoCirculares);
    if ((int)(new HTuple(hv_Cod_Core_ToUse.TupleEqual("VSAA"))) != 0)
    {

      if ((int)(new HTuple(hv_ConteoCircularesOut.TupleGreater(0))) != 0)
      {
        hv_PoseMLS.Dispose();
        HOperatorSet.ReadPose("C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/5.-Ing Software/3 Consolidado R1/PoseCirculares.dat", 
            out hv_PoseMLS);

        hv_Delta_X.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Delta_X = -5*1;
        }
        hv_Delta_Y.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Delta_Y = (-3-7)*1;
        }
        hv_Delta_Z.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Delta_Z = -3.5+2;
        }


        if (hv_PoseMLS == null)
          hv_PoseMLS = new HTuple();
        hv_PoseMLS[0] = (hv_PoseMLS.TupleSelect(0))+hv_Delta_X;
        if (hv_PoseMLS == null)
          hv_PoseMLS = new HTuple();
        hv_PoseMLS[1] = (hv_PoseMLS.TupleSelect(1))+hv_Delta_Y;
        if (hv_PoseMLS == null)
          hv_PoseMLS = new HTuple();
        hv_PoseMLS[2] = ((hv_PoseMLS.TupleSelect(2))+hv_Delta_Z)+(12.7*hv_ConteoCircularesOut);


        Send_Data_To_Robot(hv_PoseMLS, hv_SerialHandle);

        hv_Estado.Dispose();
        hv_Estado = 13;
        hv_Procesando.Dispose();
        hv_Procesando = 0;
        hv_Resultado.Dispose();
        hv_Resultado = 1;
        Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
        Send_Data_Info("BLOQUE 3 FINALIZADO", hv_SerialHandle);

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_ConteoCircularesOut = hv_ConteoCircularesOut+1;
        hv_ConteoCircularesOut.Dispose();
        hv_ConteoCircularesOut = ExpTmpLocalVar_ConteoCircularesOut;
        }
        }
        hv_ConteoCirculares_New.Dispose();
        hv_ConteoCirculares_New = new HTuple(hv_ConteoCircularesOut);

        hv_ExitBloque3.Dispose();
        hv_ExitBloque3 = 1;


        return;
      }

      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      {
      HTuple 
        ExpTmpLocalVar_ConteoCircularesOut = hv_ConteoCircularesOut+1;
      hv_ConteoCircularesOut.Dispose();
      hv_ConteoCircularesOut = ExpTmpLocalVar_ConteoCircularesOut;
      }
      }
      hv_ConteoCirculares_New.Dispose();
      hv_ConteoCirculares_New = new HTuple(hv_ConteoCircularesOut);
    }


    if ((int)(new HTuple(hv_Cod_Core_ToUse.TupleEqual("EHS"))) != 0)
    {

      if ((int)(new HTuple(hv_ConteoCircularesOut.TupleGreater(0))) != 0)
      {
        hv_PoseMLS.Dispose();
        HOperatorSet.ReadPose("C:/Users/Vision MGTX/Dropbox/1.-Servidor Desarrollo Software/7.-Magotteaux/5.-Ing Software/3 Consolidado R1/PoseCirculares.dat", 
            out hv_PoseMLS);

        hv_Delta_X.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Delta_X = -5*1;
        }
        hv_Delta_Y.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Delta_Y = (-3-7)*1;
        }
        hv_Delta_Z.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Delta_Z = -3.5+2;
        }


        if (hv_PoseMLS == null)
          hv_PoseMLS = new HTuple();
        hv_PoseMLS[0] = (hv_PoseMLS.TupleSelect(0))+hv_Delta_X;
        if (hv_PoseMLS == null)
          hv_PoseMLS = new HTuple();
        hv_PoseMLS[1] = (hv_PoseMLS.TupleSelect(1))+hv_Delta_Y;
        if (hv_PoseMLS == null)
          hv_PoseMLS = new HTuple();
        hv_PoseMLS[2] = ((hv_PoseMLS.TupleSelect(2))+hv_Delta_Z)+(14.6*hv_ConteoCircularesOut);


        Send_Data_To_Robot(hv_PoseMLS, hv_SerialHandle);

        hv_Estado.Dispose();
        hv_Estado = 13;
        hv_Procesando.Dispose();
        hv_Procesando = 0;
        hv_Resultado.Dispose();
        hv_Resultado = 1;
        Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
        Send_Data_Info("BLOQUE 3 FINALIZADO", hv_SerialHandle);

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_ConteoCircularesOut = hv_ConteoCircularesOut+1;
        hv_ConteoCircularesOut.Dispose();
        hv_ConteoCircularesOut = ExpTmpLocalVar_ConteoCircularesOut;
        }
        }
        hv_ConteoCirculares_New.Dispose();
        hv_ConteoCirculares_New = new HTuple(hv_ConteoCircularesOut);


        hv_ExitBloque3.Dispose();
        hv_ExitBloque3 = 1;


        return;
      }

      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      {
      HTuple 
        ExpTmpLocalVar_ConteoCircularesOut = hv_ConteoCircularesOut+1;
      hv_ConteoCircularesOut.Dispose();
      hv_ConteoCircularesOut = ExpTmpLocalVar_ConteoCircularesOut;
      }
      }
      hv_ConteoCirculares_New.Dispose();
      hv_ConteoCirculares_New = new HTuple(hv_ConteoCircularesOut);

    }




    return;
  }

  public void Send_Pulse_EthernetIp_Data (HTuple hv_Tag_Destino, HTuple hv_Variable_On, 
      HTuple hv_SerialHandle, HTuple hv_Variable_Off, HTuple hv_Time)
  {


    // Initialize local and output iconic variables 
    Send_EthernetIP_Data(hv_Tag_Destino, hv_Variable_On, hv_SerialHandle);
    HOperatorSet.WaitSeconds(hv_Time);
    Send_EthernetIP_Data(hv_Tag_Destino, hv_Variable_Off, hv_SerialHandle);



    return;
  }

  public void Set_Config_Cam (out HTuple hv_AcqHandle, out HTuple hv_CameraParameters, 
      out HTuple hv_CameraPose, out HTuple hv_Conexion_Camara_0, out HTuple hv_CalTabFile)
  {


    // Local iconic variables 

    // Local control variables 

    HTuple hv_ToolInCam = new HTuple(), hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    hv_AcqHandle = new HTuple();
    hv_CameraParameters = new HTuple();
    hv_CameraPose = new HTuple();
    hv_Conexion_Camara_0 = new HTuple();
    hv_CalTabFile = new HTuple();
    try
    {



      //Parametros de calibracion de la camara
      hv_CameraParameters.Dispose();
      hv_CameraParameters = new HTuple();
      hv_CameraParameters[0] = "area_scan_polynomial";
      hv_CameraParameters[1] = 0.019089;
      hv_CameraParameters[2] = 226.612;
      hv_CameraParameters[3] = -547494;
      hv_CameraParameters[4] = 2.17334e+007;
      hv_CameraParameters[5] = 0.023374;
      hv_CameraParameters[6] = -0.0333038;
      hv_CameraParameters[7] = 5.50091e-006;
      hv_CameraParameters[8] = 5.5e-006;
      hv_CameraParameters[9] = 2472.03;
      hv_CameraParameters[10] = 1594.77;
      hv_CameraParameters[11] = 4896;
      hv_CameraParameters[12] = 3264;
      hv_CameraPose.Dispose();
      hv_CameraPose = new HTuple();
      hv_CameraPose[0] = -0.330897;
      hv_CameraPose[1] = -0.213789;
      hv_CameraPose[2] = 0.455639;
      hv_CameraPose[3] = 3.05118;
      hv_CameraPose[4] = 359.888;
      hv_CameraPose[5] = 268.927;
      hv_CameraPose[6] = 0;


      hv_Conexion_Camara_0.Dispose();
      hv_Conexion_Camara_0 = 0;

      try
      {

        //Apertura  y conexion de la camara
        hv_AcqHandle.Dispose();
        HOperatorSet.OpenFramegrabber("GigEVision2", 0, 0, 0, 0, 0, 0, "progressive", 
            -1, "default", -1, "false", "default", "000f310262c0_AlliedVisionTechnologies_GT4905C022635B", 
            0, -1, out hv_AcqHandle);

        //open_framegrabber ('GigEVision', 0, 0, 0, 0, 0, 0, 'default', -1, 'default', -1, 'false', 'default', '000f310262c0_AlliedVisionTechnologies_GT4905C02', 0, -1, AcqHandle)
        HOperatorSet.SetFramegrabberParam(hv_AcqHandle, "ExposureMode", "Timed");

        HOperatorSet.SetFramegrabberParam(hv_AcqHandle, "ExposureAuto", "Off");
        HOperatorSet.SetFramegrabberParam(hv_AcqHandle, "AcquisitionMode", "SingleFrame");

        HOperatorSet.GrabImageStart(hv_AcqHandle, -1);

        HOperatorSet.SetFramegrabberParam(hv_AcqHandle, "ExposureTimeAbs", 5000.0);
        HOperatorSet.SetFramegrabberParam(hv_AcqHandle, "Gain", 21.0);

        hv_Conexion_Camara_0.Dispose();
        hv_Conexion_Camara_0 = 1;

        //Cargo el Caltab que se debera buscar
        hv_CalTabFile.Dispose();
        hv_CalTabFile = "D:/AI/Vision Artificial/4.-MAGOTTEAUX/13.- Ensenso N35/Caltab/Caltab7x7_5.descr";

        //************************************************************************************************************
        //Lectura de Pose herramienta respecto a la camara
        //************************************************************************************************************


        hv_ToolInCam.Dispose();
        HOperatorSet.CreatePose(0.1, 0.1, 0.1, 90, 90, 90, "Rp+T", "gba", "point", 
            out hv_ToolInCam);
        //*************************************************************************************************************

        hv_ToolInCam.Dispose();
        hv_Exception.Dispose();

        return;

      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);


        hv_Conexion_Camara_0.Dispose();
        hv_Conexion_Camara_0 = 0;

      }

      hv_ToolInCam.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_ToolInCam.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Set_Core_Minus (HTuple hv_Cod_Core_ToUse, HTuple hv_SerialHandle, out HTuple hv_DataBdFull)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Peticion = new HTuple(), hv_Data = new HTuple();
    HTuple hv_VarSerial = new HTuple(), hv_Conteo = new HTuple();
    HTuple hv_Nchar = new HTuple(), hv_Variable = new HTuple();
    HTuple hv_FXcheck = new HTuple();
    // Initialize local and output iconic variables 
    hv_DataBdFull = new HTuple();
    try
    {
      //
      hv_Peticion.Dispose();
      hv_Peticion = "BaseDatos";
      hv_Data.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Data = (hv_Peticion+";ActBdGlobal;")+hv_Cod_Core_ToUse;
      }
      //
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.WriteSerial(hv_SerialHandle, hv_Data.TupleOrds());
      }
      //

      //Numero de caracteres a leer

      hv_VarSerial.Dispose();
      hv_VarSerial = 0;
      hv_Conteo.Dispose();
      hv_Conteo = 0;
      while ((int)((new HTuple(hv_VarSerial.TupleLess(1))).TupleAnd(new HTuple(hv_Conteo.TupleLess(
          50)))) != 0)
      {

        //Numero de caracteres a leer
        hv_Nchar.Dispose();
        HOperatorSet.ReadSerial(hv_SerialHandle, 120, out hv_Nchar);
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Nchar = hv_Nchar.TupleChrt()
            ;
        hv_Nchar.Dispose();
        hv_Nchar = ExpTmpLocalVar_Nchar;
        }
        }
        hv_Variable.Dispose();
        HOperatorSet.TupleNumber(hv_Nchar, out hv_Variable);
        hv_VarSerial.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_VarSerial = new HTuple(hv_Nchar.TupleLength()
            );
        }

        hv_DataBdFull.Dispose();
        HOperatorSet.TupleSplit(hv_Nchar, "#", out hv_DataBdFull);

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Conteo = hv_Conteo+1;
        hv_Conteo.Dispose();
        hv_Conteo = ExpTmpLocalVar_Conteo;
        }
        }
        hv_FXcheck.Dispose();
        hv_FXcheck = 1;
      }





      hv_Peticion.Dispose();
      hv_Data.Dispose();
      hv_VarSerial.Dispose();
      hv_Conteo.Dispose();
      hv_Nchar.Dispose();
      hv_Variable.Dispose();
      hv_FXcheck.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Peticion.Dispose();
      hv_Data.Dispose();
      hv_VarSerial.Dispose();
      hv_Conteo.Dispose();
      hv_Nchar.Dispose();
      hv_Variable.Dispose();
      hv_FXcheck.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Set_Core_Minus_COPY_1 (HTuple hv_Cod_Core_ToUse, HTuple hv_SerialHandle, 
      out HTuple hv_DataBdFull)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Peticion = new HTuple(), hv_Data = new HTuple();
    HTuple hv_VarSerial = new HTuple(), hv_Conteo = new HTuple();
    HTuple hv_Nchar = new HTuple(), hv_Variable = new HTuple();
    HTuple hv_FXcheck = new HTuple();
    // Initialize local and output iconic variables 
    hv_DataBdFull = new HTuple();
    try
    {

      hv_Peticion.Dispose();
      hv_Peticion = "BaseDatos";
      hv_Data.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Data = (hv_Peticion+";ActBdGlobal;")+hv_Cod_Core_ToUse;
      }

      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.WriteSerial(hv_SerialHandle, hv_Data.TupleOrds());
      }


      //Numero de caracteres a leer

      hv_VarSerial.Dispose();
      hv_VarSerial = 0;
      hv_Conteo.Dispose();
      hv_Conteo = 0;
      while ((int)((new HTuple(hv_VarSerial.TupleLess(1))).TupleAnd(new HTuple(hv_Conteo.TupleLess(
          50)))) != 0)
      {

        //Numero de caracteres a leer
        hv_Nchar.Dispose();
        HOperatorSet.ReadSerial(hv_SerialHandle, 120, out hv_Nchar);
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Nchar = hv_Nchar.TupleChrt()
            ;
        hv_Nchar.Dispose();
        hv_Nchar = ExpTmpLocalVar_Nchar;
        }
        }
        hv_Variable.Dispose();
        HOperatorSet.TupleNumber(hv_Nchar, out hv_Variable);
        hv_VarSerial.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_VarSerial = new HTuple(hv_Nchar.TupleLength()
            );
        }

        hv_DataBdFull.Dispose();
        HOperatorSet.TupleSplit(hv_Nchar, "#", out hv_DataBdFull);

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Conteo = hv_Conteo+1;
        hv_Conteo.Dispose();
        hv_Conteo = ExpTmpLocalVar_Conteo;
        }
        }
        hv_FXcheck.Dispose();
        hv_FXcheck = 1;
      }





      hv_Peticion.Dispose();
      hv_Data.Dispose();
      hv_VarSerial.Dispose();
      hv_Conteo.Dispose();
      hv_Nchar.Dispose();
      hv_Variable.Dispose();
      hv_FXcheck.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Peticion.Dispose();
      hv_Data.Dispose();
      hv_VarSerial.Dispose();
      hv_Conteo.Dispose();
      hv_Nchar.Dispose();
      hv_Variable.Dispose();
      hv_FXcheck.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Set_Exposure_Estereo (HTuple hv_NxLib, HTuple hv_Exposure, HTuple hv_Gain)
  {


    // Initialize local and output iconic variables 
    HOperatorSet.SetFramegrabberParam(hv_NxLib, "//Cameras/BySerialNo/193216/Parameters/Capture/AutoExposure", 
        "false");
    HOperatorSet.SetFramegrabberParam(hv_NxLib, "//Cameras/BySerialNo/193216/Parameters/Capture/AutoGain", 
        "false");

    HOperatorSet.SetFramegrabberParam(hv_NxLib, "//Cameras/BySerialNo/193216/Parameters/Capture/Exposure", 
        hv_Exposure);
    HOperatorSet.SetFramegrabberParam(hv_NxLib, "//Cameras/BySerialNo/193216/Parameters/Capture/Gain", 
        hv_Gain);


    return;
  }

  public void Set_exposure_Time_cam_0 (HTuple hv_AcqHandle_Cam_0, HTuple hv_Time, 
      HTuple hv_Gain)
  {



    // Local control variables 

    HTuple hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    try
    {
      try
      {

        HOperatorSet.SetFramegrabberParam(hv_AcqHandle_Cam_0, "ExposureTimeAbs", 
            hv_Time);
        HOperatorSet.SetFramegrabberParam(hv_AcqHandle_Cam_0, "Gain", hv_Gain);

      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);


      }




      hv_Exception.Dispose();

      return;

    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Set_Max_Altura_Model3D (HTuple hv_Modelo_3D_ROI, HTuple hv_Delta_Altura, 
      HTuple hv_SerialHandle, out HTuple hv_Modelo_3D_ROI_Thres)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_GenParamValue = new HTuple(), hv_x_min = new HTuple();
    HTuple hv_y_min = new HTuple(), hv_z_min = new HTuple();
    HTuple hv_x_max = new HTuple(), hv_y_max = new HTuple();
    HTuple hv_z_max = new HTuple(), hv_Exception = new HTuple();
    HTuple hv_EstadoFx = new HTuple();
    // Initialize local and output iconic variables 
    hv_Modelo_3D_ROI_Thres = new HTuple();
    try
    {

      try
      {

        //Delta altura limita  el Z que necesito
        hv_GenParamValue.Dispose();
        HOperatorSet.GetObjectModel3dParams(hv_Modelo_3D_ROI, "bounding_box1", out hv_GenParamValue);

        hv_x_min.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_x_min = hv_GenParamValue.TupleSelect(
            0);
        }
        hv_y_min.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_y_min = hv_GenParamValue.TupleSelect(
            1);
        }
        hv_z_min.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_z_min = hv_GenParamValue.TupleSelect(
            2);
        }
        hv_x_max.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_x_max = hv_GenParamValue.TupleSelect(
            3);
        }
        hv_y_max.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_y_max = hv_GenParamValue.TupleSelect(
            4);
        }
        hv_z_max.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_z_max = hv_GenParamValue.TupleSelect(
            5);
        }


        //if (z_max-Delta_Altura <= 0)

          //dev_get_exception_data (Exception, 'error_msg', ErrorMsg)
          //return ()
        //endif

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Modelo_3D_ROI_Thres.Dispose();
        HOperatorSet.SelectPointsObjectModel3d(hv_Modelo_3D_ROI, "point_coord_z", 
            hv_z_min-200, hv_Delta_Altura, out hv_Modelo_3D_ROI_Thres);
        }


      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);

        hv_EstadoFx.Dispose();
        Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx);

      }


      hv_GenParamValue.Dispose();
      hv_x_min.Dispose();
      hv_y_min.Dispose();
      hv_z_min.Dispose();
      hv_x_max.Dispose();
      hv_y_max.Dispose();
      hv_z_max.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_GenParamValue.Dispose();
      hv_x_min.Dispose();
      hv_y_min.Dispose();
      hv_z_min.Dispose();
      hv_x_max.Dispose();
      hv_y_max.Dispose();
      hv_z_max.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Set_MinusCores (HTuple hv_SerialHandle, out HTuple hv_FXcheck)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Variable_BD = new HTuple(), hv_DataBD = new HTuple();
    HTuple hv_FXcheck1 = new HTuple(), hv_Cod_Core_ToUse = new HTuple();
    HTuple hv_Cod_Core_ToUseAux = new HTuple(), hv_Pallet_To_Scan = new HTuple();
    HTuple hv_Segmento_To_Scan = new HTuple(), hv_DataBdFull = new HTuple();
    HTuple hv_CantidadCore = new HTuple(), hv_Mensaje = new HTuple();
    HTuple hv_Exception = new HTuple(), hv_EstadoFx = new HTuple();
    // Initialize local and output iconic variables 
    hv_FXcheck = new HTuple();
    try
    {
      hv_FXcheck.Dispose();
      hv_FXcheck = 0;
      try
      {
        hv_Variable_BD.Dispose();
        hv_Variable_BD = "ram_actualproduction";
        hv_DataBD.Dispose();hv_FXcheck1.Dispose();
        Get_Pallet_BD(hv_Variable_BD, hv_SerialHandle, out hv_DataBD, out hv_FXcheck1);
        //
        hv_Cod_Core_ToUse.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Cod_Core_ToUse = hv_DataBD.TupleSelect(
            3);
        }
        hv_Cod_Core_ToUseAux.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Cod_Core_ToUseAux = hv_DataBD.TupleSelect(
            3);
        }
        hv_Pallet_To_Scan.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Pallet_To_Scan = hv_DataBD.TupleSelect(
            15);
        }
        hv_Segmento_To_Scan.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Segmento_To_Scan = hv_DataBD.TupleSelect(
            16);
        }

        HOperatorSet.WaitSeconds(0.1);

        hv_DataBdFull.Dispose();
        Set_Core_Minus(hv_Cod_Core_ToUse, hv_SerialHandle, out hv_DataBdFull);
        hv_Cod_Core_ToUse.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Cod_Core_ToUse = hv_DataBdFull.TupleSelect(
            0);
        }
        hv_Pallet_To_Scan.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Pallet_To_Scan = hv_DataBdFull.TupleSelect(
            1);
        }
        hv_Segmento_To_Scan.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Segmento_To_Scan = hv_DataBdFull.TupleSelect(
            2);
        }
        hv_CantidadCore.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_CantidadCore = hv_DataBdFull.TupleSelect(
            3);
        }

        //Tag := '_EV01_I_CoreSinStock'
        //Send_EthernetIP_Data (Tag, Cod_Core_ToUse, SerialHandle)

        if ((int)((new HTuple(hv_Cod_Core_ToUse.TupleEqual("-1"))).TupleOr((new HTuple((new HTuple(hv_Cod_Core_ToUse.TupleEqual(
            "-1"))).TupleAnd(new HTuple(hv_Pallet_To_Scan.TupleEqual("-1"))))).TupleAnd(
            new HTuple(hv_Segmento_To_Scan.TupleEqual("-1"))))) != 0)
        {
          hv_FXcheck.Dispose();
          hv_FXcheck = 0;
          hv_Mensaje.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Mensaje = ("### ERROR ### -> Entidad Requerida -> "+hv_Cod_Core_ToUseAux)+"con 0 <- RAM base DATOS no CARGADA.";
          }
          Send_Data_Info(hv_Mensaje, hv_SerialHandle);
        }
        hv_FXcheck.Dispose();
        hv_FXcheck = 1;


      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);

        hv_Mensaje.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Mensaje = ("### ERROR ### -> Entidad Requerida -> "+hv_Cod_Core_ToUse)+" <- RAM base DATOS no CARGADA.";
        }
        Send_Data_Info(hv_Mensaje, hv_SerialHandle);
        hv_EstadoFx.Dispose();
        Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx);
        hv_FXcheck.Dispose();
        hv_FXcheck = 0;
      }

      hv_Variable_BD.Dispose();
      hv_DataBD.Dispose();
      hv_FXcheck1.Dispose();
      hv_Cod_Core_ToUse.Dispose();
      hv_Cod_Core_ToUseAux.Dispose();
      hv_Pallet_To_Scan.Dispose();
      hv_Segmento_To_Scan.Dispose();
      hv_DataBdFull.Dispose();
      hv_CantidadCore.Dispose();
      hv_Mensaje.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Variable_BD.Dispose();
      hv_DataBD.Dispose();
      hv_FXcheck1.Dispose();
      hv_Cod_Core_ToUse.Dispose();
      hv_Cod_Core_ToUseAux.Dispose();
      hv_Pallet_To_Scan.Dispose();
      hv_Segmento_To_Scan.Dispose();
      hv_DataBdFull.Dispose();
      hv_CantidadCore.Dispose();
      hv_Mensaje.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Set_MinusCores_COPY_1 (HTuple hv_SerialHandle, out HTuple hv_FXcheck)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Variable_BD = new HTuple(), hv_DataBD = new HTuple();
    HTuple hv_FXcheck1 = new HTuple(), hv_Cod_Core_ToUse = new HTuple();
    HTuple hv_Cod_Core_ToUseAux = new HTuple(), hv_Pallet_To_Scan = new HTuple();
    HTuple hv_Segmento_To_Scan = new HTuple(), hv_DataBdFull = new HTuple();
    HTuple hv_CantidadCore = new HTuple(), hv_Mensaje = new HTuple();
    HTuple hv_Exception = new HTuple(), hv_EstadoFx = new HTuple();
    // Initialize local and output iconic variables 
    hv_FXcheck = new HTuple();
    try
    {
      hv_FXcheck.Dispose();
      hv_FXcheck = 0;
      try
      {
        hv_Variable_BD.Dispose();
        hv_Variable_BD = "ram_actualproduction";
        hv_DataBD.Dispose();hv_FXcheck1.Dispose();
        Get_Pallet_BD_COPY_2(hv_Variable_BD, hv_SerialHandle, out hv_DataBD, out hv_FXcheck1);

        hv_Cod_Core_ToUse.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Cod_Core_ToUse = hv_DataBD.TupleSelect(
            3);
        }
        hv_Cod_Core_ToUseAux.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Cod_Core_ToUseAux = hv_DataBD.TupleSelect(
            3);
        }
        hv_Pallet_To_Scan.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Pallet_To_Scan = hv_DataBD.TupleSelect(
            15);
        }
        hv_Segmento_To_Scan.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Segmento_To_Scan = hv_DataBD.TupleSelect(
            16);
        }

        HOperatorSet.WaitSeconds(0.1);

        hv_DataBdFull.Dispose();
        Set_Core_Minus_COPY_1(hv_Cod_Core_ToUse, hv_SerialHandle, out hv_DataBdFull);
        hv_Cod_Core_ToUse.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Cod_Core_ToUse = hv_DataBdFull.TupleSelect(
            0);
        }
        hv_Pallet_To_Scan.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Pallet_To_Scan = hv_DataBdFull.TupleSelect(
            1);
        }
        hv_Segmento_To_Scan.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Segmento_To_Scan = hv_DataBdFull.TupleSelect(
            2);
        }
        hv_CantidadCore.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_CantidadCore = hv_DataBdFull.TupleSelect(
            3);
        }

        //Tag := '_EV01_I_CoreSinStock'
        //Send_EthernetIP_Data (Tag, Cod_Core_ToUse, SerialHandle)

        if ((int)((new HTuple(hv_Cod_Core_ToUse.TupleEqual("-1"))).TupleOr((new HTuple((new HTuple(hv_Cod_Core_ToUse.TupleEqual(
            "-1"))).TupleAnd(new HTuple(hv_Pallet_To_Scan.TupleEqual("-1"))))).TupleAnd(
            new HTuple(hv_Segmento_To_Scan.TupleEqual("-1"))))) != 0)
        {
          hv_FXcheck.Dispose();
          hv_FXcheck = 0;
          hv_Mensaje.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Mensaje = ("### ERROR ### -> Entidad Requerida -> "+hv_Cod_Core_ToUseAux)+"con 0 <- RAM base DATOS no CARGADA.";
          }
          Send_Data_Info(hv_Mensaje, hv_SerialHandle);
        }
        hv_FXcheck.Dispose();
        hv_FXcheck = 1;


      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);

        hv_Mensaje.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Mensaje = ("### ERROR ### -> Entidad Requerida -> "+hv_Cod_Core_ToUse)+" <- RAM base DATOS no CARGADA.";
        }
        Send_Data_Info(hv_Mensaje, hv_SerialHandle);
        hv_EstadoFx.Dispose();
        Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx);
        hv_FXcheck.Dispose();
        hv_FXcheck = 0;
      }

      hv_Variable_BD.Dispose();
      hv_DataBD.Dispose();
      hv_FXcheck1.Dispose();
      hv_Cod_Core_ToUse.Dispose();
      hv_Cod_Core_ToUseAux.Dispose();
      hv_Pallet_To_Scan.Dispose();
      hv_Segmento_To_Scan.Dispose();
      hv_DataBdFull.Dispose();
      hv_CantidadCore.Dispose();
      hv_Mensaje.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Variable_BD.Dispose();
      hv_DataBD.Dispose();
      hv_FXcheck1.Dispose();
      hv_Cod_Core_ToUse.Dispose();
      hv_Cod_Core_ToUseAux.Dispose();
      hv_Pallet_To_Scan.Dispose();
      hv_Segmento_To_Scan.Dispose();
      hv_DataBdFull.Dispose();
      hv_CantidadCore.Dispose();
      hv_Mensaje.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Set_MinusCores_COPY_2 (HTuple hv_SerialHandle, out HTuple hv_FXcheck)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Variable_BD = new HTuple(), hv_DataBD = new HTuple();
    HTuple hv_FXcheck1 = new HTuple(), hv_Cod_Core_ToUse = new HTuple();
    HTuple hv_Cod_Core_ToUseAux = new HTuple(), hv_Pallet_To_Scan = new HTuple();
    HTuple hv_Segmento_To_Scan = new HTuple(), hv_DataBdFull = new HTuple();
    HTuple hv_CantidadCore = new HTuple(), hv_Mensaje = new HTuple();
    HTuple hv_Exception = new HTuple(), hv_EstadoFx = new HTuple();
    // Initialize local and output iconic variables 
    hv_FXcheck = new HTuple();
    try
    {
      hv_FXcheck.Dispose();
      hv_FXcheck = 0;
      try
      {
        hv_Variable_BD.Dispose();
        hv_Variable_BD = "ram_actualproduction";
        hv_DataBD.Dispose();hv_FXcheck1.Dispose();
        Get_Pallet_BD_COPY_2(hv_Variable_BD, hv_SerialHandle, out hv_DataBD, out hv_FXcheck1);

        hv_Cod_Core_ToUse.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Cod_Core_ToUse = hv_DataBD.TupleSelect(
            3);
        }
        hv_Cod_Core_ToUseAux.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Cod_Core_ToUseAux = hv_DataBD.TupleSelect(
            3);
        }
        hv_Pallet_To_Scan.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Pallet_To_Scan = hv_DataBD.TupleSelect(
            15);
        }
        hv_Segmento_To_Scan.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Segmento_To_Scan = hv_DataBD.TupleSelect(
            16);
        }

        HOperatorSet.WaitSeconds(0.1);

        hv_DataBdFull.Dispose();
        Set_Core_Minus_COPY_1(hv_Cod_Core_ToUse, hv_SerialHandle, out hv_DataBdFull);
        hv_Cod_Core_ToUse.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Cod_Core_ToUse = hv_DataBdFull.TupleSelect(
            0);
        }
        hv_Pallet_To_Scan.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Pallet_To_Scan = hv_DataBdFull.TupleSelect(
            1);
        }
        hv_Segmento_To_Scan.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Segmento_To_Scan = hv_DataBdFull.TupleSelect(
            2);
        }
        hv_CantidadCore.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_CantidadCore = hv_DataBdFull.TupleSelect(
            3);
        }

        //Tag := '_EV01_I_CoreSinStock'
        //Send_EthernetIP_Data (Tag, Cod_Core_ToUse, SerialHandle)

        if ((int)((new HTuple(hv_Cod_Core_ToUse.TupleEqual("-1"))).TupleOr((new HTuple((new HTuple(hv_Cod_Core_ToUse.TupleEqual(
            "-1"))).TupleAnd(new HTuple(hv_Pallet_To_Scan.TupleEqual("-1"))))).TupleAnd(
            new HTuple(hv_Segmento_To_Scan.TupleEqual("-1"))))) != 0)
        {
          hv_FXcheck.Dispose();
          hv_FXcheck = 0;
          hv_Mensaje.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Mensaje = ("### ERROR ### -> Entidad Requerida -> "+hv_Cod_Core_ToUseAux)+"con 0 <- RAM base DATOS no CARGADA.";
          }
          Send_Data_Info(hv_Mensaje, hv_SerialHandle);
        }
        hv_FXcheck.Dispose();
        hv_FXcheck = 1;


      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);

        hv_Mensaje.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Mensaje = ("### ERROR ### -> Entidad Requerida -> "+hv_Cod_Core_ToUse)+" <- RAM base DATOS no CARGADA.";
        }
        Send_Data_Info(hv_Mensaje, hv_SerialHandle);
        hv_EstadoFx.Dispose();
        Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx);
        hv_FXcheck.Dispose();
        hv_FXcheck = 0;
      }

      hv_Variable_BD.Dispose();
      hv_DataBD.Dispose();
      hv_FXcheck1.Dispose();
      hv_Cod_Core_ToUse.Dispose();
      hv_Cod_Core_ToUseAux.Dispose();
      hv_Pallet_To_Scan.Dispose();
      hv_Segmento_To_Scan.Dispose();
      hv_DataBdFull.Dispose();
      hv_CantidadCore.Dispose();
      hv_Mensaje.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Variable_BD.Dispose();
      hv_DataBD.Dispose();
      hv_FXcheck1.Dispose();
      hv_Cod_Core_ToUse.Dispose();
      hv_Cod_Core_ToUseAux.Dispose();
      hv_Pallet_To_Scan.Dispose();
      hv_Segmento_To_Scan.Dispose();
      hv_DataBdFull.Dispose();
      hv_CantidadCore.Dispose();
      hv_Mensaje.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Set_Puntero_Carga_BDD (HTuple hv_SerialHandle)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Peticion = new HTuple(), hv_DatoOk = new HTuple();
    HTuple hv_Conteo = new HTuple(), hv_Nchar = new HTuple();
    HTuple hv_FXcheck = new HTuple(), hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    try
    {


      try
      {
        //
        hv_Peticion.Dispose();
        hv_Peticion = "BaseDatos;Set_BDD_DinVal";

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.WriteSerial(hv_SerialHandle, hv_Peticion.TupleOrds());
        }


        hv_DatoOk.Dispose();
        hv_DatoOk = 0;
        hv_Conteo.Dispose();
        hv_Conteo = 0;
        while ((int)((new HTuple(hv_DatoOk.TupleLess(1))).TupleAnd(new HTuple(hv_Conteo.TupleLess(
            50)))) != 0)
        {

          //Numero de caracteres a leer
          hv_Nchar.Dispose();
          HOperatorSet.ReadSerial(hv_SerialHandle, 10, out hv_Nchar);
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Nchar = hv_Nchar.TupleChrt()
              ;
          hv_Nchar.Dispose();
          hv_Nchar = ExpTmpLocalVar_Nchar;
          }
          }
          hv_DatoOk.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_DatoOk = new HTuple(hv_Nchar.TupleLength()
              );
          }

          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Conteo = hv_Conteo+1;
          hv_Conteo.Dispose();
          hv_Conteo = ExpTmpLocalVar_Conteo;
          }
          }
          hv_FXcheck.Dispose();
          hv_FXcheck = 1;
        }

        if ((int)(new HTuple(hv_Conteo.TupleGreaterEqual(10))) != 0)
        {

          hv_FXcheck.Dispose();
          hv_FXcheck = 0;
        }
        else
        {
          hv_FXcheck.Dispose();
          hv_FXcheck = 1;
        }

      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_FXcheck.Dispose();
        Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_FXcheck);
      }

      hv_Peticion.Dispose();
      hv_DatoOk.Dispose();
      hv_Conteo.Dispose();
      hv_Nchar.Dispose();
      hv_FXcheck.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Peticion.Dispose();
      hv_DatoOk.Dispose();
      hv_Conteo.Dispose();
      hv_Nchar.Dispose();
      hv_FXcheck.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Set_Puntero_Cerrar_SistemaV1 (HTuple hv_SerialHandle)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Peticion = new HTuple(), hv_DatoOk = new HTuple();
    HTuple hv_Conteo = new HTuple(), hv_Nchar = new HTuple();
    HTuple hv_FXcheck = new HTuple(), hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    try
    {


      try
      {
        //
        hv_Peticion.Dispose();
        hv_Peticion = "BaseDatos;Abrir_ProgramaV1";

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.WriteSerial(hv_SerialHandle, hv_Peticion.TupleOrds());
        }


        hv_DatoOk.Dispose();
        hv_DatoOk = 0;
        hv_Conteo.Dispose();
        hv_Conteo = 0;
        while ((int)((new HTuple(hv_DatoOk.TupleLess(1))).TupleAnd(new HTuple(hv_Conteo.TupleLess(
            50)))) != 0)
        {

          //Numero de caracteres a leer
          hv_Nchar.Dispose();
          HOperatorSet.ReadSerial(hv_SerialHandle, 10, out hv_Nchar);
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Nchar = hv_Nchar.TupleChrt()
              ;
          hv_Nchar.Dispose();
          hv_Nchar = ExpTmpLocalVar_Nchar;
          }
          }
          hv_DatoOk.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_DatoOk = new HTuple(hv_Nchar.TupleLength()
              );
          }

          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Conteo = hv_Conteo+1;
          hv_Conteo.Dispose();
          hv_Conteo = ExpTmpLocalVar_Conteo;
          }
          }
          hv_FXcheck.Dispose();
          hv_FXcheck = 1;
        }

        if ((int)(new HTuple(hv_Conteo.TupleGreaterEqual(10))) != 0)
        {

          hv_FXcheck.Dispose();
          hv_FXcheck = 0;
        }
        else
        {
          hv_FXcheck.Dispose();
          hv_FXcheck = 1;
        }

      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_FXcheck.Dispose();
        Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_FXcheck);
      }

      hv_Peticion.Dispose();
      hv_DatoOk.Dispose();
      hv_Conteo.Dispose();
      hv_Nchar.Dispose();
      hv_FXcheck.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Peticion.Dispose();
      hv_DatoOk.Dispose();
      hv_Conteo.Dispose();
      hv_Nchar.Dispose();
      hv_FXcheck.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Set_SFM_Esquina_Pallet (HObject ho_Z, HObject ho_X, HObject ho_Y, HTuple hv_Rango_posible_borde_pallet, 
      HTuple hv_Rango_Seg, HTuple hv_Parametros_Visualizacion, HTuple hv_Valores_Visualizacion)
  {




    // Local iconic variables 

    HObject ho_Regions, ho_ImageReduced, ho_ROI_0;
    HObject ho_ImageReduced_Z, ho_MultiChannelImage;

    // Local control variables 

    HTuple hv_Esquina_Ref = new HTuple(), hv_Pose = new HTuple();
    HTuple hv_ObjectModel3DRigidTrans = new HTuple(), hv_PoseOut1 = new HTuple();
    HTuple hv_Sampling = new HTuple(), hv_ObjectModel3DNormals = new HTuple();
    HTuple hv_Information = new HTuple(), hv_SurfaceModelID = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Regions);
    HOperatorSet.GenEmptyObj(out ho_ImageReduced);
    HOperatorSet.GenEmptyObj(out ho_ROI_0);
    HOperatorSet.GenEmptyObj(out ho_ImageReduced_Z);
    HOperatorSet.GenEmptyObj(out ho_MultiChannelImage);
    try
    {
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      ho_Regions.Dispose();
      HOperatorSet.Threshold(ho_Z, out ho_Regions, hv_Rango_posible_borde_pallet-hv_Rango_Seg, 
          hv_Rango_posible_borde_pallet+hv_Rango_Seg);
      }
      ho_ImageReduced.Dispose();
      HOperatorSet.ReduceDomain(ho_Z, ho_Regions, out ho_ImageReduced);

      ho_ROI_0.Dispose();
      HOperatorSet.GenRectangle1(out ho_ROI_0, 62.5246, 134.286, 222.187, 1067.42);

      ho_ImageReduced_Z.Dispose();
      HOperatorSet.ReduceDomain(ho_ImageReduced, ho_ROI_0, out ho_ImageReduced_Z);
      hv_Esquina_Ref.Dispose();
      HOperatorSet.XyzToObjectModel3d(ho_X, ho_Y, ho_ImageReduced_Z, out hv_Esquina_Ref);
      ho_MultiChannelImage.Dispose();
      HOperatorSet.Compose3(ho_X, ho_Y, ho_ImageReduced_Z, out ho_MultiChannelImage
          );

      hv_Pose.Dispose();
      HOperatorSet.CreatePose(-486, 573, -1590, 0, 0, 0, "Rp+T", "gba", "point", 
          out hv_Pose);
      hv_ObjectModel3DRigidTrans.Dispose();
      HOperatorSet.RigidTransObjectModel3d(hv_Esquina_Ref, hv_Pose, out hv_ObjectModel3DRigidTrans);
      hv_PoseOut1.Dispose();
      visualize_object_model_3d(hv_ExpDefaultWinHandle, hv_ObjectModel3DRigidTrans, 
          new HTuple(), new HTuple(), hv_Parametros_Visualizacion, hv_Valores_Visualizacion, 
          new HTuple(), new HTuple(), new HTuple(), out hv_PoseOut1);

      hv_Pose.Dispose();
      HOperatorSet.CreatePose(0, 0, 0, 0, 0, -90, "Rp+T", "gba", "point", out hv_Pose);
      {
      HTuple ExpTmpOutVar_0;
      HOperatorSet.RigidTransObjectModel3d(hv_ObjectModel3DRigidTrans, hv_Pose, out ExpTmpOutVar_0);
      hv_ObjectModel3DRigidTrans.Dispose();
      hv_ObjectModel3DRigidTrans = ExpTmpOutVar_0;
      }
      hv_PoseOut1.Dispose();
      visualize_object_model_3d(hv_ExpDefaultWinHandle, hv_ObjectModel3DRigidTrans, 
          new HTuple(), new HTuple(), hv_Parametros_Visualizacion, hv_Valores_Visualizacion, 
          new HTuple(), new HTuple(), new HTuple(), out hv_PoseOut1);

      hv_Pose.Dispose();
      HOperatorSet.CreatePose(0, 0, 0, 180, 0, 0, "Rp+T", "gba", "point", out hv_Pose);
      {
      HTuple ExpTmpOutVar_0;
      HOperatorSet.RigidTransObjectModel3d(hv_ObjectModel3DRigidTrans, hv_Pose, out ExpTmpOutVar_0);
      hv_ObjectModel3DRigidTrans.Dispose();
      hv_ObjectModel3DRigidTrans = ExpTmpOutVar_0;
      }
      hv_PoseOut1.Dispose();
      visualize_object_model_3d(hv_ExpDefaultWinHandle, hv_ObjectModel3DRigidTrans, 
          new HTuple(), new HTuple(), hv_Parametros_Visualizacion, hv_Valores_Visualizacion, 
          new HTuple(), new HTuple(), new HTuple(), out hv_PoseOut1);

      hv_Pose.Dispose();
      HOperatorSet.CreatePose(0, 950, 0, 0, 0, 0, "Rp+T", "gba", "point", out hv_Pose);
      {
      HTuple ExpTmpOutVar_0;
      HOperatorSet.RigidTransObjectModel3d(hv_ObjectModel3DRigidTrans, hv_Pose, out ExpTmpOutVar_0);
      hv_ObjectModel3DRigidTrans.Dispose();
      hv_ObjectModel3DRigidTrans = ExpTmpOutVar_0;
      }
      hv_PoseOut1.Dispose();
      visualize_object_model_3d(hv_ExpDefaultWinHandle, hv_ObjectModel3DRigidTrans, 
          new HTuple(), new HTuple(), hv_Parametros_Visualizacion, hv_Valores_Visualizacion, 
          new HTuple(), new HTuple(), new HTuple(), out hv_PoseOut1);

      hv_Pose.Dispose();
      HOperatorSet.CreatePose(-50, 0, 0, 0, 0, 0, "Rp+T", "gba", "point", out hv_Pose);
      {
      HTuple ExpTmpOutVar_0;
      HOperatorSet.RigidTransObjectModel3d(hv_ObjectModel3DRigidTrans, hv_Pose, out ExpTmpOutVar_0);
      hv_ObjectModel3DRigidTrans.Dispose();
      hv_ObjectModel3DRigidTrans = ExpTmpOutVar_0;
      }
      hv_PoseOut1.Dispose();
      visualize_object_model_3d(hv_ExpDefaultWinHandle, hv_ObjectModel3DRigidTrans, 
          new HTuple(), new HTuple(), hv_Parametros_Visualizacion, hv_Valores_Visualizacion, 
          new HTuple(), new HTuple(), new HTuple(), out hv_PoseOut1);

      hv_Pose.Dispose();
      HOperatorSet.CreatePose(0, 0, 0, 0, 0, -3, "Rp+T", "gba", "point", out hv_Pose);
      {
      HTuple ExpTmpOutVar_0;
      HOperatorSet.RigidTransObjectModel3d(hv_ObjectModel3DRigidTrans, hv_Pose, out ExpTmpOutVar_0);
      hv_ObjectModel3DRigidTrans.Dispose();
      hv_ObjectModel3DRigidTrans = ExpTmpOutVar_0;
      }
      hv_PoseOut1.Dispose();
      visualize_object_model_3d(hv_ExpDefaultWinHandle, hv_ObjectModel3DRigidTrans, 
          new HTuple(), new HTuple(), hv_Parametros_Visualizacion, hv_Valores_Visualizacion, 
          new HTuple(), new HTuple(), new HTuple(), out hv_PoseOut1);


      //****************************************
      hv_Sampling.Dispose();
      hv_Sampling = 0.03;
      hv_ObjectModel3DNormals.Dispose();
      HOperatorSet.SurfaceNormalsObjectModel3d(hv_ObjectModel3DRigidTrans, "mls", 
          new HTuple(), new HTuple(), out hv_ObjectModel3DNormals);
      {
      HTuple ExpTmpOutVar_0;hv_Information.Dispose();
      HOperatorSet.TriangulateObjectModel3d(hv_ObjectModel3DNormals, "greedy", new HTuple(), 
          new HTuple(), out ExpTmpOutVar_0, out hv_Information);
      hv_ObjectModel3DNormals.Dispose();
      hv_ObjectModel3DNormals = ExpTmpOutVar_0;
      }
      hv_PoseOut1.Dispose();
      visualize_object_model_3d(hv_ExpDefaultWinHandle, hv_ObjectModel3DNormals, 
          new HTuple(), new HTuple(), hv_Parametros_Visualizacion, hv_Valores_Visualizacion, 
          new HTuple(), new HTuple(), new HTuple(), out hv_PoseOut1);

      hv_SurfaceModelID.Dispose();
      HOperatorSet.CreateSurfaceModel(hv_ObjectModel3DNormals, hv_Sampling, "train_3d_edges", 
          "true", out hv_SurfaceModelID);

      hv_PoseOut1.Dispose();
      visualize_object_model_3d(hv_ExpDefaultWinHandle, hv_ObjectModel3DNormals, 
          new HTuple(), new HTuple(), hv_Parametros_Visualizacion, hv_Valores_Visualizacion, 
          new HTuple(), new HTuple(), new HTuple(), out hv_PoseOut1);

      HOperatorSet.WriteSurfaceModel(hv_SurfaceModelID, "D:/AI/Vision Artificial/4.-MAGOTTEAUX/SFM_PALLET/SFM_Pallet.sfm");
      HOperatorSet.WriteObjectModel3d(hv_ObjectModel3DNormals, "om3", "D:/AI/Vision Artificial/4.-MAGOTTEAUX/SFM_PALLET/3D_Pallet.om3", 
          new HTuple(), new HTuple());


      ho_Regions.Dispose();
      ho_ImageReduced.Dispose();
      ho_ROI_0.Dispose();
      ho_ImageReduced_Z.Dispose();
      ho_MultiChannelImage.Dispose();

      hv_Esquina_Ref.Dispose();
      hv_Pose.Dispose();
      hv_ObjectModel3DRigidTrans.Dispose();
      hv_PoseOut1.Dispose();
      hv_Sampling.Dispose();
      hv_ObjectModel3DNormals.Dispose();
      hv_Information.Dispose();
      hv_SurfaceModelID.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_Regions.Dispose();
      ho_ImageReduced.Dispose();
      ho_ROI_0.Dispose();
      ho_ImageReduced_Z.Dispose();
      ho_MultiChannelImage.Dispose();

      hv_Esquina_Ref.Dispose();
      hv_Pose.Dispose();
      hv_ObjectModel3DRigidTrans.Dispose();
      hv_PoseOut1.Dispose();
      hv_Sampling.Dispose();
      hv_ObjectModel3DNormals.Dispose();
      hv_Information.Dispose();
      hv_SurfaceModelID.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Set_SprueExistence (HTuple hv_PatternName, HTuple hv_Data, HTuple hv_SerialHandle)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_DataOut = new HTuple(), hv_Peticion = new HTuple();
    HTuple hv_Instruccion = new HTuple();
    // Initialize local and output iconic variables 
    try
    {
      hv_DataOut.Dispose();
      hv_DataOut = new HTuple(hv_Data);
      hv_Peticion.Dispose();
      hv_Peticion = "RamSprue";
      hv_Instruccion.Dispose();
      hv_Instruccion = "Set_Sprue";

      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      {
      HTuple 
        ExpTmpLocalVar_DataOut = (((((hv_Peticion+";")+hv_Instruccion)+";")+hv_PatternName)+";")+hv_DataOut;
      hv_DataOut.Dispose();
      hv_DataOut = ExpTmpLocalVar_DataOut;
      }
      }

      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.WriteSerial(hv_SerialHandle, hv_DataOut.TupleOrds());
      }

      hv_DataOut.Dispose();
      hv_Peticion.Dispose();
      hv_Instruccion.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_DataOut.Dispose();
      hv_Peticion.Dispose();
      hv_Instruccion.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Silple_Orientation (HObject ho_IMGris, HObject ho_Zobj1, HObject ho_Esquina_Left, 
      out HTuple hv_Angulo)
  {



    // Stack for temporary objects 
    HObject[] OTemp = new HObject[20];

    // Local iconic variables 

    HObject ho_ImageReduced, ho_RegionTrans, ho_Img1;
    HObject ho_Img2, ho_ImageReduced2, ho_ImageResult, ho_MixedImage;
    HObject ho_ImageCorner, ho_Regions2, ho_LocalMaxima1, ho_ConnectedRegions1;

    // Local control variables 

    HTuple hv_Area1 = new HTuple(), hv_RowToFind = new HTuple();
    HTuple hv_ColumToFind = new HTuple(), hv_Grayval = new HTuple();
    HTuple hv_Function = new HTuple(), hv_Width = new HTuple();
    HTuple hv_Height = new HTuple(), hv_FilaPattern = new HTuple();
    HTuple hv_ColumnasPattern = new HTuple(), hv_Ptr_Min = new HTuple();
    HTuple hv_Ptr_Min2 = new HTuple(), hv_Ptr_Min3 = new HTuple();
    HTuple hv_EsquinaDetectadas = new HTuple(), hv_WindowHandle = new HTuple();
    HTuple hv_Angle = new HTuple(), hv_Angle2 = new HTuple();
    HTuple hv_Deg = new HTuple(), hv_Deg2 = new HTuple(), hv_Angulos = new HTuple();
    HTuple hv_Abs = new HTuple(), hv_Min = new HTuple(), hv_Flag = new HTuple();
    HTuple hv_Index = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ImageReduced);
    HOperatorSet.GenEmptyObj(out ho_RegionTrans);
    HOperatorSet.GenEmptyObj(out ho_Img1);
    HOperatorSet.GenEmptyObj(out ho_Img2);
    HOperatorSet.GenEmptyObj(out ho_ImageReduced2);
    HOperatorSet.GenEmptyObj(out ho_ImageResult);
    HOperatorSet.GenEmptyObj(out ho_MixedImage);
    HOperatorSet.GenEmptyObj(out ho_ImageCorner);
    HOperatorSet.GenEmptyObj(out ho_Regions2);
    HOperatorSet.GenEmptyObj(out ho_LocalMaxima1);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions1);
    hv_Angulo = new HTuple();
    try
    {


      ho_ImageReduced.Dispose();
      HOperatorSet.ReduceDomain(ho_IMGris, ho_Esquina_Left, out ho_ImageReduced);




      ho_RegionTrans.Dispose();
      HOperatorSet.ShapeTrans(ho_Esquina_Left, out ho_RegionTrans, "rectangle2");
      //


      ho_Img1.Dispose();
      HOperatorSet.GenImageProto(ho_Zobj1, out ho_Img1, 10);
      ho_Img2.Dispose();
      HOperatorSet.GenImageProto(ho_Zobj1, out ho_Img2, 150);
      ho_ImageReduced2.Dispose();
      HOperatorSet.ReduceDomain(ho_Img2, ho_RegionTrans, out ho_ImageReduced2);
      //
      ho_ImageResult.Dispose();
      HOperatorSet.AddImage(ho_Img1, ho_ImageReduced2, out ho_ImageResult, 1, 100);
      ho_MixedImage.Dispose();
      HOperatorSet.PaintGray(ho_ImageReduced2, ho_Img1, out ho_MixedImage);
      ho_ImageCorner.Dispose();
      HOperatorSet.CornerResponse(ho_MixedImage, out ho_ImageCorner, 3, 0.04);
      //
      //


      //rotate_image (ImageCorner, ImageCorner, -2, 'constant')

      ho_Regions2.Dispose();
      HOperatorSet.Threshold(ho_ImageCorner, out ho_Regions2, 1000, 5000);
      //
      {
      HObject ExpTmpOutVar_0;
      HOperatorSet.ReduceDomain(ho_ImageCorner, ho_Regions2, out ExpTmpOutVar_0);
      ho_ImageCorner.Dispose();
      ho_ImageCorner = ExpTmpOutVar_0;
      }
      //
      ho_LocalMaxima1.Dispose();
      HOperatorSet.LocalMax(ho_ImageCorner, out ho_LocalMaxima1);
      ho_ConnectedRegions1.Dispose();
      HOperatorSet.Connection(ho_LocalMaxima1, out ho_ConnectedRegions1);
      hv_Area1.Dispose();hv_RowToFind.Dispose();hv_ColumToFind.Dispose();
      HOperatorSet.AreaCenter(ho_ConnectedRegions1, out hv_Area1, out hv_RowToFind, 
          out hv_ColumToFind);
      hv_Grayval.Dispose();
      HOperatorSet.GetGrayval(ho_ImageCorner, hv_RowToFind, hv_ColumToFind, out hv_Grayval);
      hv_Function.Dispose();
      HOperatorSet.CreateFunct1dArray(hv_Grayval, out hv_Function);
      //dev_inspect_ctrl (Function)
      //
      hv_Width.Dispose();hv_Height.Dispose();
      HOperatorSet.GetImageSize(ho_ImageCorner, out hv_Width, out hv_Height);
      //


      hv_FilaPattern.Dispose();hv_ColumnasPattern.Dispose();hv_Ptr_Min.Dispose();hv_Ptr_Min2.Dispose();hv_Ptr_Min3.Dispose();hv_EsquinaDetectadas.Dispose();
      Get_EsquinasPattern(hv_Grayval, hv_RowToFind, hv_ColumToFind, hv_Width, out hv_FilaPattern, 
          out hv_ColumnasPattern, out hv_Ptr_Min, out hv_Ptr_Min2, out hv_Ptr_Min3, 
          out hv_EsquinaDetectadas);
      //
      //dev_get_window(...);

      //
      //
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Angle.Dispose();
      HOperatorSet.AngleLx(hv_RowToFind.TupleSelect(1), hv_ColumToFind.TupleSelect(
          1), hv_RowToFind.TupleSelect(0), hv_ColumToFind.TupleSelect(0), out hv_Angle);
      }
      //
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Angle2.Dispose();
      HOperatorSet.AngleLx(hv_RowToFind.TupleSelect(0), hv_ColumToFind.TupleSelect(
          0), hv_RowToFind.TupleSelect(1), hv_ColumToFind.TupleSelect(1), out hv_Angle2);
      }
      //
      hv_Deg.Dispose();
      HOperatorSet.TupleDeg(hv_Angle, out hv_Deg);
      hv_Deg2.Dispose();
      HOperatorSet.TupleDeg(hv_Angle2, out hv_Deg2);

      hv_Angulos.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Angulos = new HTuple();
      hv_Angulos = hv_Angulos.TupleConcat(hv_Deg, hv_Deg2);
      }
      hv_Abs.Dispose();
      HOperatorSet.TupleAbs(hv_Angulos, out hv_Abs);
      hv_Min.Dispose();
      HOperatorSet.TupleMin(hv_Abs, out hv_Min);


      hv_Flag.Dispose();
      hv_Flag = 0;
      for (hv_Index=0; (int)hv_Index<=(int)((new HTuple(hv_Angulos.TupleLength()))-1); hv_Index = (int)hv_Index + 1)
      {

        if ((int)(new HTuple(hv_Min.TupleEqual(hv_Abs.TupleSelect(hv_Index)))) != 0)
        {
          hv_Flag.Dispose();
          hv_Flag = new HTuple(hv_Index);
        }

      }


      hv_Angulo.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Angulo = hv_Angulos.TupleSelect(
          hv_Flag);
      }

      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.DispText(hv_ExpDefaultWinHandle, hv_Angulo, "window", (hv_RowToFind.TupleSelect(
          0))+50, hv_ColumToFind.TupleSelect(0), "black", new HTuple(), new HTuple());
      }








      ho_ImageReduced.Dispose();
      ho_RegionTrans.Dispose();
      ho_Img1.Dispose();
      ho_Img2.Dispose();
      ho_ImageReduced2.Dispose();
      ho_ImageResult.Dispose();
      ho_MixedImage.Dispose();
      ho_ImageCorner.Dispose();
      ho_Regions2.Dispose();
      ho_LocalMaxima1.Dispose();
      ho_ConnectedRegions1.Dispose();

      hv_Area1.Dispose();
      hv_RowToFind.Dispose();
      hv_ColumToFind.Dispose();
      hv_Grayval.Dispose();
      hv_Function.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_FilaPattern.Dispose();
      hv_ColumnasPattern.Dispose();
      hv_Ptr_Min.Dispose();
      hv_Ptr_Min2.Dispose();
      hv_Ptr_Min3.Dispose();
      hv_EsquinaDetectadas.Dispose();
      hv_WindowHandle.Dispose();
      hv_Angle.Dispose();
      hv_Angle2.Dispose();
      hv_Deg.Dispose();
      hv_Deg2.Dispose();
      hv_Angulos.Dispose();
      hv_Abs.Dispose();
      hv_Min.Dispose();
      hv_Flag.Dispose();
      hv_Index.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_ImageReduced.Dispose();
      ho_RegionTrans.Dispose();
      ho_Img1.Dispose();
      ho_Img2.Dispose();
      ho_ImageReduced2.Dispose();
      ho_ImageResult.Dispose();
      ho_MixedImage.Dispose();
      ho_ImageCorner.Dispose();
      ho_Regions2.Dispose();
      ho_LocalMaxima1.Dispose();
      ho_ConnectedRegions1.Dispose();

      hv_Area1.Dispose();
      hv_RowToFind.Dispose();
      hv_ColumToFind.Dispose();
      hv_Grayval.Dispose();
      hv_Function.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_FilaPattern.Dispose();
      hv_ColumnasPattern.Dispose();
      hv_Ptr_Min.Dispose();
      hv_Ptr_Min2.Dispose();
      hv_Ptr_Min3.Dispose();
      hv_EsquinaDetectadas.Dispose();
      hv_WindowHandle.Dispose();
      hv_Angle.Dispose();
      hv_Angle2.Dispose();
      hv_Deg.Dispose();
      hv_Deg2.Dispose();
      hv_Angulos.Dispose();
      hv_Abs.Dispose();
      hv_Min.Dispose();
      hv_Flag.Dispose();
      hv_Index.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Silple_Orientation_COPY_1 (HObject ho_IMGris, HObject ho_Zobj1, out HTuple hv_Deg, 
      out HTuple hv_Deg2)
  {



    // Stack for temporary objects 
    HObject[] OTemp = new HObject[20];

    // Local iconic variables 

    HObject ho_ROI_0, ho_ImageReduced, ho_Regions;
    HObject ho_ConnectedRegions, ho_SelectedRegions, ho_RegionTrans;
    HObject ho_Img1, ho_Img2, ho_ImageReduced2, ho_ImageResult;
    HObject ho_MixedImage, ho_ImageCorner, ho_Regions2, ho_LocalMaxima1;
    HObject ho_ConnectedRegions1;

    // Local control variables 

    HTuple hv_Area1 = new HTuple(), hv_RowToFind = new HTuple();
    HTuple hv_ColumToFind = new HTuple(), hv_Grayval = new HTuple();
    HTuple hv_Function = new HTuple(), hv_Width = new HTuple();
    HTuple hv_Height = new HTuple(), hv_FilaPattern = new HTuple();
    HTuple hv_ColumnasPattern = new HTuple(), hv_Ptr_Min = new HTuple();
    HTuple hv_Ptr_Min2 = new HTuple(), hv_Ptr_Min3 = new HTuple();
    HTuple hv_EsquinaDetectadas = new HTuple(), hv_Angle = new HTuple();
    HTuple hv_Angle2 = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ROI_0);
    HOperatorSet.GenEmptyObj(out ho_ImageReduced);
    HOperatorSet.GenEmptyObj(out ho_Regions);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
    HOperatorSet.GenEmptyObj(out ho_SelectedRegions);
    HOperatorSet.GenEmptyObj(out ho_RegionTrans);
    HOperatorSet.GenEmptyObj(out ho_Img1);
    HOperatorSet.GenEmptyObj(out ho_Img2);
    HOperatorSet.GenEmptyObj(out ho_ImageReduced2);
    HOperatorSet.GenEmptyObj(out ho_ImageResult);
    HOperatorSet.GenEmptyObj(out ho_MixedImage);
    HOperatorSet.GenEmptyObj(out ho_ImageCorner);
    HOperatorSet.GenEmptyObj(out ho_Regions2);
    HOperatorSet.GenEmptyObj(out ho_LocalMaxima1);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions1);
    hv_Deg = new HTuple();
    hv_Deg2 = new HTuple();
    try
    {
      ho_ROI_0.Dispose();
      HOperatorSet.GenRectangle1(out ho_ROI_0, 10.5239, 4.60367, 387.787, 233.248);
      ho_ImageReduced.Dispose();
      HOperatorSet.ReduceDomain(ho_IMGris, ho_ROI_0, out ho_ImageReduced);
      ho_Regions.Dispose();
      HOperatorSet.Threshold(ho_ImageReduced, out ho_Regions, 141, 207);
      ho_ConnectedRegions.Dispose();
      HOperatorSet.Connection(ho_Regions, out ho_ConnectedRegions);
      ho_SelectedRegions.Dispose();
      HOperatorSet.SelectShapeStd(ho_ConnectedRegions, out ho_SelectedRegions, "max_area", 
          70);

      ho_RegionTrans.Dispose();
      HOperatorSet.ShapeTrans(ho_SelectedRegions, out ho_RegionTrans, "rectangle2");

      ho_Img1.Dispose();
      HOperatorSet.GenImageProto(ho_Zobj1, out ho_Img1, 10);
      ho_Img2.Dispose();
      HOperatorSet.GenImageProto(ho_Zobj1, out ho_Img2, 150);
      ho_ImageReduced2.Dispose();
      HOperatorSet.ReduceDomain(ho_Img2, ho_RegionTrans, out ho_ImageReduced2);

      ho_ImageResult.Dispose();
      HOperatorSet.AddImage(ho_Img1, ho_ImageReduced2, out ho_ImageResult, 1, 100);
      ho_MixedImage.Dispose();
      HOperatorSet.PaintGray(ho_ImageReduced2, ho_Img1, out ho_MixedImage);
      ho_ImageCorner.Dispose();
      HOperatorSet.CornerResponse(ho_MixedImage, out ho_ImageCorner, 3, 0.04);



      ho_Regions2.Dispose();
      HOperatorSet.Threshold(ho_ImageCorner, out ho_Regions2, 1000, 5000);

      {
      HObject ExpTmpOutVar_0;
      HOperatorSet.ReduceDomain(ho_ImageCorner, ho_Regions2, out ExpTmpOutVar_0);
      ho_ImageCorner.Dispose();
      ho_ImageCorner = ExpTmpOutVar_0;
      }

      ho_LocalMaxima1.Dispose();
      HOperatorSet.LocalMax(ho_ImageCorner, out ho_LocalMaxima1);
      ho_ConnectedRegions1.Dispose();
      HOperatorSet.Connection(ho_LocalMaxima1, out ho_ConnectedRegions1);
      hv_Area1.Dispose();hv_RowToFind.Dispose();hv_ColumToFind.Dispose();
      HOperatorSet.AreaCenter(ho_ConnectedRegions1, out hv_Area1, out hv_RowToFind, 
          out hv_ColumToFind);
      hv_Grayval.Dispose();
      HOperatorSet.GetGrayval(ho_ImageCorner, hv_RowToFind, hv_ColumToFind, out hv_Grayval);
      hv_Function.Dispose();
      HOperatorSet.CreateFunct1dArray(hv_Grayval, out hv_Function);
      //dev_inspect_ctrl (Function)

      hv_Width.Dispose();hv_Height.Dispose();
      HOperatorSet.GetImageSize(ho_ImageCorner, out hv_Width, out hv_Height);

      hv_FilaPattern.Dispose();hv_ColumnasPattern.Dispose();hv_Ptr_Min.Dispose();hv_Ptr_Min2.Dispose();hv_Ptr_Min3.Dispose();hv_EsquinaDetectadas.Dispose();
      Get_EsquinasPattern_COPY_2(hv_Grayval, hv_RowToFind, hv_ColumToFind, hv_Width, 
          out hv_FilaPattern, out hv_ColumnasPattern, out hv_Ptr_Min, out hv_Ptr_Min2, 
          out hv_Ptr_Min3, out hv_EsquinaDetectadas);


      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowToFind.TupleSelect(0), 
          hv_ColumToFind.TupleSelect(0), 6, 0);
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowToFind.TupleSelect(1), 
          hv_ColumToFind.TupleSelect(1), 6, 0);
      }



      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Angle.Dispose();
      HOperatorSet.AngleLx(hv_RowToFind.TupleSelect(1), hv_ColumToFind.TupleSelect(
          1), hv_RowToFind.TupleSelect(0), hv_ColumToFind.TupleSelect(0), out hv_Angle);
      }

      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Angle2.Dispose();
      HOperatorSet.AngleLx(hv_RowToFind.TupleSelect(0), hv_ColumToFind.TupleSelect(
          0), hv_RowToFind.TupleSelect(1), hv_ColumToFind.TupleSelect(1), out hv_Angle2);
      }

      hv_Deg.Dispose();
      HOperatorSet.TupleDeg(hv_Angle, out hv_Deg);
      hv_Deg2.Dispose();
      HOperatorSet.TupleDeg(hv_Angle2, out hv_Deg2);

      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.DispText(hv_ExpDefaultWinHandle, hv_Deg2, "window", hv_RowToFind.TupleSelect(
          0), hv_ColumToFind.TupleSelect(0), "black", new HTuple(), new HTuple());
      }
      ho_ROI_0.Dispose();
      ho_ImageReduced.Dispose();
      ho_Regions.Dispose();
      ho_ConnectedRegions.Dispose();
      ho_SelectedRegions.Dispose();
      ho_RegionTrans.Dispose();
      ho_Img1.Dispose();
      ho_Img2.Dispose();
      ho_ImageReduced2.Dispose();
      ho_ImageResult.Dispose();
      ho_MixedImage.Dispose();
      ho_ImageCorner.Dispose();
      ho_Regions2.Dispose();
      ho_LocalMaxima1.Dispose();
      ho_ConnectedRegions1.Dispose();

      hv_Area1.Dispose();
      hv_RowToFind.Dispose();
      hv_ColumToFind.Dispose();
      hv_Grayval.Dispose();
      hv_Function.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_FilaPattern.Dispose();
      hv_ColumnasPattern.Dispose();
      hv_Ptr_Min.Dispose();
      hv_Ptr_Min2.Dispose();
      hv_Ptr_Min3.Dispose();
      hv_EsquinaDetectadas.Dispose();
      hv_Angle.Dispose();
      hv_Angle2.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_ROI_0.Dispose();
      ho_ImageReduced.Dispose();
      ho_Regions.Dispose();
      ho_ConnectedRegions.Dispose();
      ho_SelectedRegions.Dispose();
      ho_RegionTrans.Dispose();
      ho_Img1.Dispose();
      ho_Img2.Dispose();
      ho_ImageReduced2.Dispose();
      ho_ImageResult.Dispose();
      ho_MixedImage.Dispose();
      ho_ImageCorner.Dispose();
      ho_Regions2.Dispose();
      ho_LocalMaxima1.Dispose();
      ho_ConnectedRegions1.Dispose();

      hv_Area1.Dispose();
      hv_RowToFind.Dispose();
      hv_ColumToFind.Dispose();
      hv_Grayval.Dispose();
      hv_Function.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_FilaPattern.Dispose();
      hv_ColumnasPattern.Dispose();
      hv_Ptr_Min.Dispose();
      hv_Ptr_Min2.Dispose();
      hv_Ptr_Min3.Dispose();
      hv_EsquinaDetectadas.Dispose();
      hv_Angle.Dispose();
      hv_Angle2.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Silple_Orientation_COPY_2 (HObject ho_IMGris, HObject ho_Zobj1, HObject ho_Esquina_Left, 
      out HTuple hv_Angulo)
  {



    // Stack for temporary objects 
    HObject[] OTemp = new HObject[20];

    // Local iconic variables 

    HObject ho_ImageReduced=null, ho_RegionTrans=null;
    HObject ho_Img1=null, ho_Img2=null, ho_ImageReduced2=null;
    HObject ho_ImageResult=null, ho_MixedImage=null, ho_ImageCorner=null;
    HObject ho_Regions2=null, ho_LocalMaxima1=null, ho_ConnectedRegions1=null;

    // Local control variables 

    HTuple hv_Area1 = new HTuple(), hv_RowToFind = new HTuple();
    HTuple hv_ColumToFind = new HTuple(), hv_Grayval = new HTuple();
    HTuple hv_Function = new HTuple(), hv_Width = new HTuple();
    HTuple hv_Height = new HTuple(), hv_FilaPattern = new HTuple();
    HTuple hv_ColumnasPattern = new HTuple(), hv_Ptr_Min = new HTuple();
    HTuple hv_Ptr_Min2 = new HTuple(), hv_Ptr_Min3 = new HTuple();
    HTuple hv_EsquinaDetectadas = new HTuple(), hv_WindowHandle = new HTuple();
    HTuple hv_Angle = new HTuple(), hv_Angle2 = new HTuple();
    HTuple hv_Deg = new HTuple(), hv_Deg2 = new HTuple(), hv_Angulos = new HTuple();
    HTuple hv_Abs = new HTuple(), hv_Min = new HTuple(), hv_Flag = new HTuple();
    HTuple hv_Index = new HTuple(), hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ImageReduced);
    HOperatorSet.GenEmptyObj(out ho_RegionTrans);
    HOperatorSet.GenEmptyObj(out ho_Img1);
    HOperatorSet.GenEmptyObj(out ho_Img2);
    HOperatorSet.GenEmptyObj(out ho_ImageReduced2);
    HOperatorSet.GenEmptyObj(out ho_ImageResult);
    HOperatorSet.GenEmptyObj(out ho_MixedImage);
    HOperatorSet.GenEmptyObj(out ho_ImageCorner);
    HOperatorSet.GenEmptyObj(out ho_Regions2);
    HOperatorSet.GenEmptyObj(out ho_LocalMaxima1);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions1);
    hv_Angulo = new HTuple();
    try
    {

      try
      {

        ho_ImageReduced.Dispose();
        HOperatorSet.ReduceDomain(ho_IMGris, ho_Esquina_Left, out ho_ImageReduced
            );




        ho_RegionTrans.Dispose();
        HOperatorSet.ShapeTrans(ho_Esquina_Left, out ho_RegionTrans, "rectangle2");



        ho_Img1.Dispose();
        HOperatorSet.GenImageProto(ho_Zobj1, out ho_Img1, 10);
        ho_Img2.Dispose();
        HOperatorSet.GenImageProto(ho_Zobj1, out ho_Img2, 150);
        ho_ImageReduced2.Dispose();
        HOperatorSet.ReduceDomain(ho_Img2, ho_RegionTrans, out ho_ImageReduced2);

        ho_ImageResult.Dispose();
        HOperatorSet.AddImage(ho_Img1, ho_ImageReduced2, out ho_ImageResult, 1, 100);
        ho_MixedImage.Dispose();
        HOperatorSet.PaintGray(ho_ImageReduced2, ho_Img1, out ho_MixedImage);
        ho_ImageCorner.Dispose();
        HOperatorSet.CornerResponse(ho_MixedImage, out ho_ImageCorner, 3, 0.04);




        //rotate_image (ImageCorner, ImageCorner, -2, 'constant')

        ho_Regions2.Dispose();
        HOperatorSet.Threshold(ho_ImageCorner, out ho_Regions2, 1000, 5000);

        {
        HObject ExpTmpOutVar_0;
        HOperatorSet.ReduceDomain(ho_ImageCorner, ho_Regions2, out ExpTmpOutVar_0
            );
        ho_ImageCorner.Dispose();
        ho_ImageCorner = ExpTmpOutVar_0;
        }

        ho_LocalMaxima1.Dispose();
        HOperatorSet.LocalMax(ho_ImageCorner, out ho_LocalMaxima1);
        ho_ConnectedRegions1.Dispose();
        HOperatorSet.Connection(ho_LocalMaxima1, out ho_ConnectedRegions1);
        hv_Area1.Dispose();hv_RowToFind.Dispose();hv_ColumToFind.Dispose();
        HOperatorSet.AreaCenter(ho_ConnectedRegions1, out hv_Area1, out hv_RowToFind, 
            out hv_ColumToFind);
        hv_Grayval.Dispose();
        HOperatorSet.GetGrayval(ho_ImageCorner, hv_RowToFind, hv_ColumToFind, out hv_Grayval);
        hv_Function.Dispose();
        HOperatorSet.CreateFunct1dArray(hv_Grayval, out hv_Function);
        //dev_inspect_ctrl (Function)

        hv_Width.Dispose();hv_Height.Dispose();
        HOperatorSet.GetImageSize(ho_ImageCorner, out hv_Width, out hv_Height);



        hv_FilaPattern.Dispose();hv_ColumnasPattern.Dispose();hv_Ptr_Min.Dispose();hv_Ptr_Min2.Dispose();hv_Ptr_Min3.Dispose();hv_EsquinaDetectadas.Dispose();
        Get_EsquinasPattern_COPY_3(hv_Grayval, hv_RowToFind, hv_ColumToFind, hv_Width, 
            out hv_FilaPattern, out hv_ColumnasPattern, out hv_Ptr_Min, out hv_Ptr_Min2, 
            out hv_Ptr_Min3, out hv_EsquinaDetectadas);

        //dev_get_window(...);
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowToFind.TupleSelect(0), 
            hv_ColumToFind.TupleSelect(0), 50, 0);
        }
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowToFind.TupleSelect(1), 
            hv_ColumToFind.TupleSelect(1), 50, 0);
        }
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowToFind.TupleSelect(2), 
            hv_ColumToFind.TupleSelect(2), 50, 0);
        }
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowToFind.TupleSelect(3), 
            hv_ColumToFind.TupleSelect(3), 50, 0);
        }



        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Angle.Dispose();
        HOperatorSet.AngleLx(hv_RowToFind.TupleSelect(1), hv_ColumToFind.TupleSelect(
            1), hv_RowToFind.TupleSelect(0), hv_ColumToFind.TupleSelect(0), out hv_Angle);
        }

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Angle2.Dispose();
        HOperatorSet.AngleLx(hv_RowToFind.TupleSelect(0), hv_ColumToFind.TupleSelect(
            0), hv_RowToFind.TupleSelect(1), hv_ColumToFind.TupleSelect(1), out hv_Angle2);
        }

        hv_Deg.Dispose();
        HOperatorSet.TupleDeg(hv_Angle, out hv_Deg);
        hv_Deg2.Dispose();
        HOperatorSet.TupleDeg(hv_Angle2, out hv_Deg2);

        hv_Angulos.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Angulos = new HTuple();
        hv_Angulos = hv_Angulos.TupleConcat(hv_Deg, hv_Deg2);
        }
        hv_Abs.Dispose();
        HOperatorSet.TupleAbs(hv_Angulos, out hv_Abs);
        hv_Min.Dispose();
        HOperatorSet.TupleMin(hv_Abs, out hv_Min);


        hv_Flag.Dispose();
        hv_Flag = 0;
        for (hv_Index=0; (int)hv_Index<=(int)((new HTuple(hv_Angulos.TupleLength()
            ))-1); hv_Index = (int)hv_Index + 1)
        {

          if ((int)(new HTuple(hv_Min.TupleEqual(hv_Abs.TupleSelect(hv_Index)))) != 0)
          {
            hv_Flag.Dispose();
            hv_Flag = new HTuple(hv_Index);
          }

        }


        hv_Angulo.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Angulo = hv_Angulos.TupleSelect(
            hv_Flag);
        }

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.DispText(hv_ExpDefaultWinHandle, hv_Angulo, "window", hv_RowToFind.TupleSelect(
            0), hv_ColumToFind.TupleSelect(0), "black", new HTuple(), new HTuple());
        }



      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
      }




      ho_ImageReduced.Dispose();
      ho_RegionTrans.Dispose();
      ho_Img1.Dispose();
      ho_Img2.Dispose();
      ho_ImageReduced2.Dispose();
      ho_ImageResult.Dispose();
      ho_MixedImage.Dispose();
      ho_ImageCorner.Dispose();
      ho_Regions2.Dispose();
      ho_LocalMaxima1.Dispose();
      ho_ConnectedRegions1.Dispose();

      hv_Area1.Dispose();
      hv_RowToFind.Dispose();
      hv_ColumToFind.Dispose();
      hv_Grayval.Dispose();
      hv_Function.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_FilaPattern.Dispose();
      hv_ColumnasPattern.Dispose();
      hv_Ptr_Min.Dispose();
      hv_Ptr_Min2.Dispose();
      hv_Ptr_Min3.Dispose();
      hv_EsquinaDetectadas.Dispose();
      hv_WindowHandle.Dispose();
      hv_Angle.Dispose();
      hv_Angle2.Dispose();
      hv_Deg.Dispose();
      hv_Deg2.Dispose();
      hv_Angulos.Dispose();
      hv_Abs.Dispose();
      hv_Min.Dispose();
      hv_Flag.Dispose();
      hv_Index.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_ImageReduced.Dispose();
      ho_RegionTrans.Dispose();
      ho_Img1.Dispose();
      ho_Img2.Dispose();
      ho_ImageReduced2.Dispose();
      ho_ImageResult.Dispose();
      ho_MixedImage.Dispose();
      ho_ImageCorner.Dispose();
      ho_Regions2.Dispose();
      ho_LocalMaxima1.Dispose();
      ho_ConnectedRegions1.Dispose();

      hv_Area1.Dispose();
      hv_RowToFind.Dispose();
      hv_ColumToFind.Dispose();
      hv_Grayval.Dispose();
      hv_Function.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_FilaPattern.Dispose();
      hv_ColumnasPattern.Dispose();
      hv_Ptr_Min.Dispose();
      hv_Ptr_Min2.Dispose();
      hv_Ptr_Min3.Dispose();
      hv_EsquinaDetectadas.Dispose();
      hv_WindowHandle.Dispose();
      hv_Angle.Dispose();
      hv_Angle2.Dispose();
      hv_Deg.Dispose();
      hv_Deg2.Dispose();
      hv_Angulos.Dispose();
      hv_Abs.Dispose();
      hv_Min.Dispose();
      hv_Flag.Dispose();
      hv_Index.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Silple_Orientation_COPY_3 (HObject ho_IMGris, HObject ho_Zobj1, HObject ho_Esquina_Left, 
      out HTuple hv_Angulo)
  {



    // Stack for temporary objects 
    HObject[] OTemp = new HObject[20];

    // Local iconic variables 

    HObject ho_ImageReduced, ho_RegionTrans, ho_Img1;
    HObject ho_Img2, ho_ImageReduced2, ho_ImageResult, ho_MixedImage;
    HObject ho_ImageCorner, ho_Regions2, ho_LocalMaxima1, ho_ConnectedRegions1;

    // Local control variables 

    HTuple hv_Area1 = new HTuple(), hv_RowToFind = new HTuple();
    HTuple hv_ColumToFind = new HTuple(), hv_Grayval = new HTuple();
    HTuple hv_Function = new HTuple(), hv_Width = new HTuple();
    HTuple hv_Height = new HTuple(), hv_FilaPattern = new HTuple();
    HTuple hv_ColumnasPattern = new HTuple(), hv_Ptr_Min = new HTuple();
    HTuple hv_Ptr_Min2 = new HTuple(), hv_Ptr_Min3 = new HTuple();
    HTuple hv_EsquinaDetectadas = new HTuple(), hv_WindowHandle = new HTuple();
    HTuple hv_Angle = new HTuple(), hv_Angle2 = new HTuple();
    HTuple hv_Deg = new HTuple(), hv_Deg2 = new HTuple(), hv_Angulos = new HTuple();
    HTuple hv_Abs = new HTuple(), hv_Min = new HTuple(), hv_Flag = new HTuple();
    HTuple hv_Index = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ImageReduced);
    HOperatorSet.GenEmptyObj(out ho_RegionTrans);
    HOperatorSet.GenEmptyObj(out ho_Img1);
    HOperatorSet.GenEmptyObj(out ho_Img2);
    HOperatorSet.GenEmptyObj(out ho_ImageReduced2);
    HOperatorSet.GenEmptyObj(out ho_ImageResult);
    HOperatorSet.GenEmptyObj(out ho_MixedImage);
    HOperatorSet.GenEmptyObj(out ho_ImageCorner);
    HOperatorSet.GenEmptyObj(out ho_Regions2);
    HOperatorSet.GenEmptyObj(out ho_LocalMaxima1);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions1);
    hv_Angulo = new HTuple();
    try
    {


      ho_ImageReduced.Dispose();
      HOperatorSet.ReduceDomain(ho_IMGris, ho_Esquina_Left, out ho_ImageReduced);




      ho_RegionTrans.Dispose();
      HOperatorSet.ShapeTrans(ho_Esquina_Left, out ho_RegionTrans, "rectangle2");



      ho_Img1.Dispose();
      HOperatorSet.GenImageProto(ho_Zobj1, out ho_Img1, 10);
      ho_Img2.Dispose();
      HOperatorSet.GenImageProto(ho_Zobj1, out ho_Img2, 150);
      ho_ImageReduced2.Dispose();
      HOperatorSet.ReduceDomain(ho_Img2, ho_RegionTrans, out ho_ImageReduced2);

      ho_ImageResult.Dispose();
      HOperatorSet.AddImage(ho_Img1, ho_ImageReduced2, out ho_ImageResult, 1, 100);
      ho_MixedImage.Dispose();
      HOperatorSet.PaintGray(ho_ImageReduced2, ho_Img1, out ho_MixedImage);
      ho_ImageCorner.Dispose();
      HOperatorSet.CornerResponse(ho_MixedImage, out ho_ImageCorner, 3, 0.04);




      //rotate_image (ImageCorner, ImageCorner, -2, 'constant')

      ho_Regions2.Dispose();
      HOperatorSet.Threshold(ho_ImageCorner, out ho_Regions2, 1000, 5000);

      {
      HObject ExpTmpOutVar_0;
      HOperatorSet.ReduceDomain(ho_ImageCorner, ho_Regions2, out ExpTmpOutVar_0);
      ho_ImageCorner.Dispose();
      ho_ImageCorner = ExpTmpOutVar_0;
      }

      ho_LocalMaxima1.Dispose();
      HOperatorSet.LocalMax(ho_ImageCorner, out ho_LocalMaxima1);
      ho_ConnectedRegions1.Dispose();
      HOperatorSet.Connection(ho_LocalMaxima1, out ho_ConnectedRegions1);
      hv_Area1.Dispose();hv_RowToFind.Dispose();hv_ColumToFind.Dispose();
      HOperatorSet.AreaCenter(ho_ConnectedRegions1, out hv_Area1, out hv_RowToFind, 
          out hv_ColumToFind);
      hv_Grayval.Dispose();
      HOperatorSet.GetGrayval(ho_ImageCorner, hv_RowToFind, hv_ColumToFind, out hv_Grayval);
      hv_Function.Dispose();
      HOperatorSet.CreateFunct1dArray(hv_Grayval, out hv_Function);
      //dev_inspect_ctrl (Function)

      hv_Width.Dispose();hv_Height.Dispose();
      HOperatorSet.GetImageSize(ho_ImageCorner, out hv_Width, out hv_Height);



      hv_FilaPattern.Dispose();hv_ColumnasPattern.Dispose();hv_Ptr_Min.Dispose();hv_Ptr_Min2.Dispose();hv_Ptr_Min3.Dispose();hv_EsquinaDetectadas.Dispose();
      Get_EsquinasPattern_COPY_3(hv_Grayval, hv_RowToFind, hv_ColumToFind, hv_Width, 
          out hv_FilaPattern, out hv_ColumnasPattern, out hv_Ptr_Min, out hv_Ptr_Min2, 
          out hv_Ptr_Min3, out hv_EsquinaDetectadas);

      //dev_get_window(...);



      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Angle.Dispose();
      HOperatorSet.AngleLx(hv_RowToFind.TupleSelect(1), hv_ColumToFind.TupleSelect(
          1), hv_RowToFind.TupleSelect(0), hv_ColumToFind.TupleSelect(0), out hv_Angle);
      }

      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Angle2.Dispose();
      HOperatorSet.AngleLx(hv_RowToFind.TupleSelect(0), hv_ColumToFind.TupleSelect(
          0), hv_RowToFind.TupleSelect(1), hv_ColumToFind.TupleSelect(1), out hv_Angle2);
      }

      hv_Deg.Dispose();
      HOperatorSet.TupleDeg(hv_Angle, out hv_Deg);
      hv_Deg2.Dispose();
      HOperatorSet.TupleDeg(hv_Angle2, out hv_Deg2);

      hv_Angulos.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Angulos = new HTuple();
      hv_Angulos = hv_Angulos.TupleConcat(hv_Deg, hv_Deg2);
      }
      hv_Abs.Dispose();
      HOperatorSet.TupleAbs(hv_Angulos, out hv_Abs);
      hv_Min.Dispose();
      HOperatorSet.TupleMin(hv_Abs, out hv_Min);


      hv_Flag.Dispose();
      hv_Flag = 0;
      for (hv_Index=0; (int)hv_Index<=(int)((new HTuple(hv_Angulos.TupleLength()))-1); hv_Index = (int)hv_Index + 1)
      {

        if ((int)(new HTuple(hv_Min.TupleEqual(hv_Abs.TupleSelect(hv_Index)))) != 0)
        {
          hv_Flag.Dispose();
          hv_Flag = new HTuple(hv_Index);
        }

      }


      hv_Angulo.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Angulo = hv_Angulos.TupleSelect(
          hv_Flag);
      }

      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.DispText(hv_ExpDefaultWinHandle, hv_Angulo, "window", (hv_RowToFind.TupleSelect(
          0))+50, hv_ColumToFind.TupleSelect(0), "black", new HTuple(), new HTuple());
      }








      ho_ImageReduced.Dispose();
      ho_RegionTrans.Dispose();
      ho_Img1.Dispose();
      ho_Img2.Dispose();
      ho_ImageReduced2.Dispose();
      ho_ImageResult.Dispose();
      ho_MixedImage.Dispose();
      ho_ImageCorner.Dispose();
      ho_Regions2.Dispose();
      ho_LocalMaxima1.Dispose();
      ho_ConnectedRegions1.Dispose();

      hv_Area1.Dispose();
      hv_RowToFind.Dispose();
      hv_ColumToFind.Dispose();
      hv_Grayval.Dispose();
      hv_Function.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_FilaPattern.Dispose();
      hv_ColumnasPattern.Dispose();
      hv_Ptr_Min.Dispose();
      hv_Ptr_Min2.Dispose();
      hv_Ptr_Min3.Dispose();
      hv_EsquinaDetectadas.Dispose();
      hv_WindowHandle.Dispose();
      hv_Angle.Dispose();
      hv_Angle2.Dispose();
      hv_Deg.Dispose();
      hv_Deg2.Dispose();
      hv_Angulos.Dispose();
      hv_Abs.Dispose();
      hv_Min.Dispose();
      hv_Flag.Dispose();
      hv_Index.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_ImageReduced.Dispose();
      ho_RegionTrans.Dispose();
      ho_Img1.Dispose();
      ho_Img2.Dispose();
      ho_ImageReduced2.Dispose();
      ho_ImageResult.Dispose();
      ho_MixedImage.Dispose();
      ho_ImageCorner.Dispose();
      ho_Regions2.Dispose();
      ho_LocalMaxima1.Dispose();
      ho_ConnectedRegions1.Dispose();

      hv_Area1.Dispose();
      hv_RowToFind.Dispose();
      hv_ColumToFind.Dispose();
      hv_Grayval.Dispose();
      hv_Function.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_FilaPattern.Dispose();
      hv_ColumnasPattern.Dispose();
      hv_Ptr_Min.Dispose();
      hv_Ptr_Min2.Dispose();
      hv_Ptr_Min3.Dispose();
      hv_EsquinaDetectadas.Dispose();
      hv_WindowHandle.Dispose();
      hv_Angle.Dispose();
      hv_Angle2.Dispose();
      hv_Deg.Dispose();
      hv_Deg2.Dispose();
      hv_Angulos.Dispose();
      hv_Abs.Dispose();
      hv_Min.Dispose();
      hv_Flag.Dispose();
      hv_Index.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Silple_Orientation_COPY_4 (HObject ho_IMGris, HObject ho_Zobj1, HObject ho_Esquina_Left, 
      out HTuple hv_Angulo)
  {



    // Stack for temporary objects 
    HObject[] OTemp = new HObject[20];

    // Local iconic variables 

    HObject ho_ImageReduced, ho_RegionTrans, ho_Img1;
    HObject ho_Img2, ho_ImageReduced2, ho_ImageResult, ho_MixedImage;
    HObject ho_ImageCorner, ho_Regions2, ho_LocalMaxima1, ho_ConnectedRegions1;

    // Local control variables 

    HTuple hv_Area1 = new HTuple(), hv_RowToFind = new HTuple();
    HTuple hv_ColumToFind = new HTuple(), hv_Grayval = new HTuple();
    HTuple hv_Function = new HTuple(), hv_Width = new HTuple();
    HTuple hv_Height = new HTuple(), hv_FilaPattern = new HTuple();
    HTuple hv_ColumnasPattern = new HTuple(), hv_Ptr_Min = new HTuple();
    HTuple hv_Ptr_Min2 = new HTuple(), hv_Ptr_Min3 = new HTuple();
    HTuple hv_EsquinaDetectadas = new HTuple(), hv_WindowHandle = new HTuple();
    HTuple hv_Angle = new HTuple(), hv_Angle2 = new HTuple();
    HTuple hv_Deg = new HTuple(), hv_Deg2 = new HTuple(), hv_Angulos = new HTuple();
    HTuple hv_Abs = new HTuple(), hv_Min = new HTuple(), hv_Flag = new HTuple();
    HTuple hv_Index = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ImageReduced);
    HOperatorSet.GenEmptyObj(out ho_RegionTrans);
    HOperatorSet.GenEmptyObj(out ho_Img1);
    HOperatorSet.GenEmptyObj(out ho_Img2);
    HOperatorSet.GenEmptyObj(out ho_ImageReduced2);
    HOperatorSet.GenEmptyObj(out ho_ImageResult);
    HOperatorSet.GenEmptyObj(out ho_MixedImage);
    HOperatorSet.GenEmptyObj(out ho_ImageCorner);
    HOperatorSet.GenEmptyObj(out ho_Regions2);
    HOperatorSet.GenEmptyObj(out ho_LocalMaxima1);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions1);
    hv_Angulo = new HTuple();
    try
    {


      ho_ImageReduced.Dispose();
      HOperatorSet.ReduceDomain(ho_IMGris, ho_Esquina_Left, out ho_ImageReduced);




      ho_RegionTrans.Dispose();
      HOperatorSet.ShapeTrans(ho_Esquina_Left, out ho_RegionTrans, "rectangle2");



      ho_Img1.Dispose();
      HOperatorSet.GenImageProto(ho_Zobj1, out ho_Img1, 10);
      ho_Img2.Dispose();
      HOperatorSet.GenImageProto(ho_Zobj1, out ho_Img2, 150);
      ho_ImageReduced2.Dispose();
      HOperatorSet.ReduceDomain(ho_Img2, ho_RegionTrans, out ho_ImageReduced2);

      ho_ImageResult.Dispose();
      HOperatorSet.AddImage(ho_Img1, ho_ImageReduced2, out ho_ImageResult, 1, 100);
      ho_MixedImage.Dispose();
      HOperatorSet.PaintGray(ho_ImageReduced2, ho_Img1, out ho_MixedImage);
      ho_ImageCorner.Dispose();
      HOperatorSet.CornerResponse(ho_MixedImage, out ho_ImageCorner, 3, 0.04);




      //rotate_image (ImageCorner, ImageCorner, -2, 'constant')

      ho_Regions2.Dispose();
      HOperatorSet.Threshold(ho_ImageCorner, out ho_Regions2, 1000, 5000);

      {
      HObject ExpTmpOutVar_0;
      HOperatorSet.ReduceDomain(ho_ImageCorner, ho_Regions2, out ExpTmpOutVar_0);
      ho_ImageCorner.Dispose();
      ho_ImageCorner = ExpTmpOutVar_0;
      }

      ho_LocalMaxima1.Dispose();
      HOperatorSet.LocalMax(ho_ImageCorner, out ho_LocalMaxima1);
      ho_ConnectedRegions1.Dispose();
      HOperatorSet.Connection(ho_LocalMaxima1, out ho_ConnectedRegions1);
      hv_Area1.Dispose();hv_RowToFind.Dispose();hv_ColumToFind.Dispose();
      HOperatorSet.AreaCenter(ho_ConnectedRegions1, out hv_Area1, out hv_RowToFind, 
          out hv_ColumToFind);
      hv_Grayval.Dispose();
      HOperatorSet.GetGrayval(ho_ImageCorner, hv_RowToFind, hv_ColumToFind, out hv_Grayval);
      hv_Function.Dispose();
      HOperatorSet.CreateFunct1dArray(hv_Grayval, out hv_Function);
      //dev_inspect_ctrl (Function)

      hv_Width.Dispose();hv_Height.Dispose();
      HOperatorSet.GetImageSize(ho_ImageCorner, out hv_Width, out hv_Height);



      hv_FilaPattern.Dispose();hv_ColumnasPattern.Dispose();hv_Ptr_Min.Dispose();hv_Ptr_Min2.Dispose();hv_Ptr_Min3.Dispose();hv_EsquinaDetectadas.Dispose();
      Get_EsquinasPattern_COPY_3(hv_Grayval, hv_RowToFind, hv_ColumToFind, hv_Width, 
          out hv_FilaPattern, out hv_ColumnasPattern, out hv_Ptr_Min, out hv_Ptr_Min2, 
          out hv_Ptr_Min3, out hv_EsquinaDetectadas);

      //dev_get_window(...);



      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Angle.Dispose();
      HOperatorSet.AngleLx(hv_RowToFind.TupleSelect(1), hv_ColumToFind.TupleSelect(
          1), hv_RowToFind.TupleSelect(0), hv_ColumToFind.TupleSelect(0), out hv_Angle);
      }

      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Angle2.Dispose();
      HOperatorSet.AngleLx(hv_RowToFind.TupleSelect(0), hv_ColumToFind.TupleSelect(
          0), hv_RowToFind.TupleSelect(1), hv_ColumToFind.TupleSelect(1), out hv_Angle2);
      }

      hv_Deg.Dispose();
      HOperatorSet.TupleDeg(hv_Angle, out hv_Deg);
      hv_Deg2.Dispose();
      HOperatorSet.TupleDeg(hv_Angle2, out hv_Deg2);

      hv_Angulos.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Angulos = new HTuple();
      hv_Angulos = hv_Angulos.TupleConcat(hv_Deg, hv_Deg2);
      }
      hv_Abs.Dispose();
      HOperatorSet.TupleAbs(hv_Angulos, out hv_Abs);
      hv_Min.Dispose();
      HOperatorSet.TupleMin(hv_Abs, out hv_Min);


      hv_Flag.Dispose();
      hv_Flag = 0;
      for (hv_Index=0; (int)hv_Index<=(int)((new HTuple(hv_Angulos.TupleLength()))-1); hv_Index = (int)hv_Index + 1)
      {

        if ((int)(new HTuple(hv_Min.TupleEqual(hv_Abs.TupleSelect(hv_Index)))) != 0)
        {
          hv_Flag.Dispose();
          hv_Flag = new HTuple(hv_Index);
        }

      }


      hv_Angulo.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Angulo = hv_Angulos.TupleSelect(
          hv_Flag);
      }

      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.DispText(hv_ExpDefaultWinHandle, hv_Angulo, "window", (hv_RowToFind.TupleSelect(
          0))+50, hv_ColumToFind.TupleSelect(0), "black", new HTuple(), new HTuple());
      }








      ho_ImageReduced.Dispose();
      ho_RegionTrans.Dispose();
      ho_Img1.Dispose();
      ho_Img2.Dispose();
      ho_ImageReduced2.Dispose();
      ho_ImageResult.Dispose();
      ho_MixedImage.Dispose();
      ho_ImageCorner.Dispose();
      ho_Regions2.Dispose();
      ho_LocalMaxima1.Dispose();
      ho_ConnectedRegions1.Dispose();

      hv_Area1.Dispose();
      hv_RowToFind.Dispose();
      hv_ColumToFind.Dispose();
      hv_Grayval.Dispose();
      hv_Function.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_FilaPattern.Dispose();
      hv_ColumnasPattern.Dispose();
      hv_Ptr_Min.Dispose();
      hv_Ptr_Min2.Dispose();
      hv_Ptr_Min3.Dispose();
      hv_EsquinaDetectadas.Dispose();
      hv_WindowHandle.Dispose();
      hv_Angle.Dispose();
      hv_Angle2.Dispose();
      hv_Deg.Dispose();
      hv_Deg2.Dispose();
      hv_Angulos.Dispose();
      hv_Abs.Dispose();
      hv_Min.Dispose();
      hv_Flag.Dispose();
      hv_Index.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_ImageReduced.Dispose();
      ho_RegionTrans.Dispose();
      ho_Img1.Dispose();
      ho_Img2.Dispose();
      ho_ImageReduced2.Dispose();
      ho_ImageResult.Dispose();
      ho_MixedImage.Dispose();
      ho_ImageCorner.Dispose();
      ho_Regions2.Dispose();
      ho_LocalMaxima1.Dispose();
      ho_ConnectedRegions1.Dispose();

      hv_Area1.Dispose();
      hv_RowToFind.Dispose();
      hv_ColumToFind.Dispose();
      hv_Grayval.Dispose();
      hv_Function.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_FilaPattern.Dispose();
      hv_ColumnasPattern.Dispose();
      hv_Ptr_Min.Dispose();
      hv_Ptr_Min2.Dispose();
      hv_Ptr_Min3.Dispose();
      hv_EsquinaDetectadas.Dispose();
      hv_WindowHandle.Dispose();
      hv_Angle.Dispose();
      hv_Angle2.Dispose();
      hv_Deg.Dispose();
      hv_Deg2.Dispose();
      hv_Angulos.Dispose();
      hv_Abs.Dispose();
      hv_Min.Dispose();
      hv_Flag.Dispose();
      hv_Index.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Sub_Process_ImageCore (HObject ho_Z, HObject ho_X, HObject ho_Y, HTuple hv_SerialHandle, 
      out HTuple hv_Estado_Funcion, out HTuple hv_Escena3D_RAW, out HTuple hv_Estado_FuncionSub)
  {




    // Stack for temporary objects 
    HObject[] OTemp = new HObject[20];

    // Local iconic variables 

    HObject ho_XOut=null, ho_YOut=null, ho_Regions=null;
    HObject ho_Zre=null, ho_ConnectedRegions=null, ho_SelectedRegions=null;
    HObject ho_RegionUnion=null, ho_ObjectSelected=null, ho_Zred=null;

    // Local control variables 

    HTuple hv_Nregion = new HTuple(), hv_Row = new HTuple();
    HTuple hv_Column = new HTuple(), hv_Index = new HTuple();
    HTuple hv_Exception = new HTuple(), hv_EstadoFx = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_XOut);
    HOperatorSet.GenEmptyObj(out ho_YOut);
    HOperatorSet.GenEmptyObj(out ho_Regions);
    HOperatorSet.GenEmptyObj(out ho_Zre);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
    HOperatorSet.GenEmptyObj(out ho_SelectedRegions);
    HOperatorSet.GenEmptyObj(out ho_RegionUnion);
    HOperatorSet.GenEmptyObj(out ho_ObjectSelected);
    HOperatorSet.GenEmptyObj(out ho_Zred);
    hv_Estado_Funcion = new HTuple();
    hv_Escena3D_RAW = new HTuple();
    hv_Estado_FuncionSub = new HTuple();
    try
    {
      ho_XOut.Dispose();
      ho_XOut = new HObject(ho_X);
      ho_YOut.Dispose();
      ho_YOut = new HObject(ho_Y);
      hv_Estado_FuncionSub.Dispose();
      hv_Estado_FuncionSub = 0;
      try
      {
        ho_Regions.Dispose();
        HOperatorSet.Threshold(ho_Z, out ho_Regions, 1000, 2100);

        ho_Zre.Dispose();
        HOperatorSet.ReduceDomain(ho_Z, ho_Regions, out ho_Zre);
        ho_ConnectedRegions.Dispose();
        HOperatorSet.Connection(ho_Regions, out ho_ConnectedRegions);


        ho_SelectedRegions.Dispose();
        HOperatorSet.SelectShape(ho_ConnectedRegions, out ho_SelectedRegions, "struct_factor", 
            "and", 0, 1.9);

        hv_Nregion.Dispose();hv_Row.Dispose();hv_Column.Dispose();
        HOperatorSet.AreaCenter(ho_SelectedRegions, out hv_Nregion, out hv_Row, out hv_Column);
        ho_RegionUnion.Dispose();
        HOperatorSet.SelectObj(ho_SelectedRegions, out ho_RegionUnion, 1);

        for (hv_Index=2; (int)hv_Index<=(int)(new HTuple(hv_Nregion.TupleLength()
            )); hv_Index = (int)hv_Index + 1)
        {

          ho_ObjectSelected.Dispose();
          HOperatorSet.SelectObj(ho_SelectedRegions, out ho_ObjectSelected, hv_Index);
          {
          HObject ExpTmpOutVar_0;
          HOperatorSet.Union2(ho_ObjectSelected, ho_RegionUnion, out ExpTmpOutVar_0
              );
          ho_RegionUnion.Dispose();
          ho_RegionUnion = ExpTmpOutVar_0;
          }

        }



        {
        HObject ExpTmpOutVar_0;
        HOperatorSet.DilationCircle(ho_RegionUnion, out ExpTmpOutVar_0, 15.5);
        ho_RegionUnion.Dispose();
        ho_RegionUnion = ExpTmpOutVar_0;
        }




        ho_Zred.Dispose();
        HOperatorSet.ReduceDomain(ho_Z, ho_RegionUnion, out ho_Zred);
        {
        HObject ExpTmpOutVar_0;
        HOperatorSet.ReduceDomain(ho_XOut, ho_RegionUnion, out ExpTmpOutVar_0);
        ho_XOut.Dispose();
        ho_XOut = ExpTmpOutVar_0;
        }
        {
        HObject ExpTmpOutVar_0;
        HOperatorSet.ReduceDomain(ho_YOut, ho_RegionUnion, out ExpTmpOutVar_0);
        ho_YOut.Dispose();
        ho_YOut = ExpTmpOutVar_0;
        }
        HOperatorSet.DispObj(ho_Zred, hv_ExpDefaultWinHandle);

        //Histagram_Filter (Zred, XOut, YOut, Zred, Entidad, Estado_FuncionSub)


        //connection (Entidad, ConnectedRegions)
        //select_shape_std (ConnectedRegions, SelectedRegions, 'max_area', 90)
        //dilation_circle (SelectedRegions, SelectedRegions, 10.5)
        //reduce_domain (Z, SelectedRegions, Zred)
        //reduce_domain (XOut, SelectedRegions, XOut)
        //reduce_domain (YOut, SelectedRegions, YOut)

        hv_Escena3D_RAW.Dispose();
        HOperatorSet.XyzToObjectModel3d(ho_XOut, ho_YOut, ho_Zred, out hv_Escena3D_RAW);

        hv_Estado_FuncionSub.Dispose();
        hv_Estado_FuncionSub = 1;

      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_EstadoFx.Dispose();
        Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx);
        hv_Estado_FuncionSub.Dispose();
        hv_Estado_FuncionSub = 0;
      }

      ho_XOut.Dispose();
      ho_YOut.Dispose();
      ho_Regions.Dispose();
      ho_Zre.Dispose();
      ho_ConnectedRegions.Dispose();
      ho_SelectedRegions.Dispose();
      ho_RegionUnion.Dispose();
      ho_ObjectSelected.Dispose();
      ho_Zred.Dispose();

      hv_Nregion.Dispose();
      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_Index.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_XOut.Dispose();
      ho_YOut.Dispose();
      ho_Regions.Dispose();
      ho_Zre.Dispose();
      ho_ConnectedRegions.Dispose();
      ho_SelectedRegions.Dispose();
      ho_RegionUnion.Dispose();
      ho_ObjectSelected.Dispose();
      ho_Zred.Dispose();

      hv_Nregion.Dispose();
      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_Index.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Take_Core_In_Pallet (HObject ho_Z, HObject ho_X, HObject ho_Y, HTuple hv_Escena3D_RAW, 
      HTuple hv_N_Pallet_to_Scan, HTuple hv_Path_SFM_Segmentos, HTuple hv_Path_3D_Segmentos, 
      HTuple hv_Vector_ID_Core_by_Segment_Pallet_Tofind, HTuple hv_Path_CORE_ID, HTuple hv_SerialHandle, 
      HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Vector_Estado_Fx, HTuple hv_Visualizar3D, 
      HTuple hv_SegmentoPallet, HTuple hv_Pose_Esquina, HTuple hv_PitutoExist, HTuple hv_ObjectModel3D_Core_Pallet, 
      HTuple hv_SFM_Core_Pallet, HTuple hv_Modelo3D_Select, HTuple hv_WindowHandle, 
      out HTuple hv_Estado_SubProceso, out HTuple hv_RepetirFoto)
  {




    // Local iconic variables 

    // Local control variables 

    HTuple hv_Parametros_Visualizacion = new HTuple();
    HTuple hv_Valores_Visualizacion = new HTuple(), hv_Vector_Segmento = new HTuple();
    HTuple hv_ROI3D_NullFrame = new HTuple(), hv_ROI3D_rotate = new HTuple();
    HTuple hv_Exception = new HTuple(), hv_EstadoFx = new HTuple();
    HTuple hv_Estado = new HTuple(), hv_Pose_Segmentos = new HTuple();
    HTuple hv_Vector_Entidades_Segmento = new HTuple(), hv_Estado_Funcion = new HTuple();
    HTuple hv_Estado_FuncionSub = new HTuple(), hv_Pituto = new HTuple();
    HTuple hv_Sampling = new HTuple(), hv_Estado_Fx = new HTuple();
    HTuple hv_MyPose = new HTuple(), hv_Procesando = new HTuple();
    HTuple hv_Resultado = new HTuple(), hv_FXcheck = new HTuple();

    HTupleVector hvec_Vector_Existencia_Core_New = new HTupleVector(2);
    HTuple   hv_Escena3D_RAW_COPY_INP_TMP = new HTuple(hv_Escena3D_RAW);

    // Initialize local and output iconic variables 
    hv_Estado_SubProceso = new HTuple();
    hv_RepetirFoto = new HTuple();
    try
    {
      hv_Parametros_Visualizacion.Dispose();
      hv_Parametros_Visualizacion = new HTuple();
      hv_Parametros_Visualizacion[0] = "colored";
      hv_Parametros_Visualizacion[1] = "disp_pose";
      hv_Parametros_Visualizacion[2] = "point_size";
      hv_Valores_Visualizacion.Dispose();
      hv_Valores_Visualizacion = new HTuple();
      hv_Valores_Visualizacion[0] = 12;
      hv_Valores_Visualizacion[1] = "true";
      hv_Valores_Visualizacion[2] = 1;


      //*****************************************
      //1.- Obtengo el ROI3D del PALLET
      //*****************************************
      hv_Vector_Segmento.Dispose();hv_ROI3D_NullFrame.Dispose();hv_ROI3D_rotate.Dispose();hv_Exception.Dispose();hv_EstadoFx.Dispose();hv_Estado.Dispose();hv_Pose_Segmentos.Dispose();
      Get_Segmento(hv_SerialHandle, hvec_Vector_Estado_Fx, hv_Pose_Esquina, hv_Escena3D_RAW_COPY_INP_TMP, 
          hv_Parametros_Visualizacion, hv_Valores_Visualizacion, hv_Visualizar3D, 
          hv_WindowHandle, out hv_Vector_Segmento, out hv_ROI3D_NullFrame, out hv_ROI3D_rotate, 
          out hv_Exception, out hv_EstadoFx, out hv_Estado, out hv_Pose_Segmentos);

      //# ###################################################################
      //# ###################################################################
      //# ################ BUSQUEDA DE CORES EN EL PALLET ###################
      //# ###################################################################
      //# ###################################################################
      //3.- Encuentro el orden y los segementos en que estan distribuidos los cores en el applet

      hv_Vector_Entidades_Segmento.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Vector_Entidades_Segmento = (hv_Vector_ID_Core_by_Segment_Pallet_Tofind+";")+hv_SegmentoPallet;
      }

      try
      {

        //********************************************************
        //ROI 3D sectorizado de cada elemento
        //Busco de manera sectorizada cara core en el pallet
        //********************************************************
        //Estructura de vector
        //# ###########################
        //# ## CORE ## Existencia #####
        //# ###########################

        //*****************************************************************************
        //******* Proceso el entorno 3D para eliminar ruido  **************************
        //*****************************************************************************
        hv_Estado_Funcion.Dispose();hv_Escena3D_RAW_COPY_INP_TMP.Dispose();hv_Estado_FuncionSub.Dispose();
        Sub_Process_ImageCore(ho_Z, ho_X, ho_Y, hv_SerialHandle, out hv_Estado_Funcion, 
            out hv_Escena3D_RAW_COPY_INP_TMP, out hv_Estado_FuncionSub);
        if ((int)(hv_Estado_FuncionSub) != 0)
        {



          //************************
          //REVISAR ORIENTACION
          //************************
          if ((int)(new HTuple(hv_PitutoExist.TupleEqual("Yes"))) != 0)
          {
            hv_Pituto.Dispose();
            hv_Pituto = 1;
          }

          hv_Pituto.Dispose();
          hv_Pituto = 1;


          //**********************************************

          //smooth_object_model_3d (Escena3D_RAW, 'mls', 'mls_kNN', 50, Escena3D_RAW)
          //Visualizar_3D ([Escena3D_RAW], Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, [], [], ['Modelo'], WindowHandle, PoseOut1)


          hv_Sampling.Dispose();
          hv_Sampling = 0.02;
          Send_Data_Info("### -> Iniciando Busqueda de Entidad ###", hv_SerialHandle);
          hvec_Vector_Existencia_Core_New.Dispose();hv_Estado_Fx.Dispose();hv_RepetirFoto.Dispose();hv_MyPose.Dispose();
          Find_Sector_Core_Bloque3(ho_Z, hv_Vector_ID_Core_by_Segment_Pallet_Tofind, 
              hv_Vector_Entidades_Segmento, hv_Path_CORE_ID, hv_Path_3D_Segmentos, 
              hv_Path_SFM_Segmentos, hv_ROI3D_rotate, hv_Parametros_Visualizacion, 
              hv_Valores_Visualizacion, hv_Visualizar3D, hv_Vector_Segmento, hv_Escena3D_RAW_COPY_INP_TMP, 
              hv_Sampling, hv_SerialHandle, hvec_Vector_Estado_Fx, hv_Pituto, hv_ObjectModel3D_Core_Pallet, 
              hv_SFM_Core_Pallet, hv_Modelo3D_Select, hv_WindowHandle, out hvec_Vector_Existencia_Core_New, 
              out hv_Estado_Fx, out hv_RepetirFoto, out hv_MyPose);

          //****************************
          //return ()
          //***************************



          if ((int)(hv_RepetirFoto) != 0)
          {
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            HOperatorSet.ClearObjectModel3d(((hv_ROI3D_rotate.TupleConcat(hv_ROI3D_NullFrame))).TupleConcat(
                hv_Escena3D_RAW_COPY_INP_TMP));
            }

            hv_Escena3D_RAW_COPY_INP_TMP.Dispose();
            hv_Parametros_Visualizacion.Dispose();
            hv_Valores_Visualizacion.Dispose();
            hv_Vector_Segmento.Dispose();
            hv_ROI3D_NullFrame.Dispose();
            hv_ROI3D_rotate.Dispose();
            hv_Exception.Dispose();
            hv_EstadoFx.Dispose();
            hv_Estado.Dispose();
            hv_Pose_Segmentos.Dispose();
            hv_Vector_Entidades_Segmento.Dispose();
            hv_Estado_Funcion.Dispose();
            hv_Estado_FuncionSub.Dispose();
            hv_Pituto.Dispose();
            hv_Sampling.Dispose();
            hv_Estado_Fx.Dispose();
            hv_MyPose.Dispose();
            hv_Procesando.Dispose();
            hv_Resultado.Dispose();
            hv_FXcheck.Dispose();
            hvec_Vector_Existencia_Core_New.Dispose();

            return;
          }
          //# ### Envio data de estado ########################
          if ((int)(hv_Estado_Fx) != 0)
          {
            hv_Estado.Dispose();
            hv_Estado = 13;
            hv_Procesando.Dispose();
            hv_Procesando = 0;
            hv_Resultado.Dispose();
            hv_Resultado = 1;
            Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
            Send_Data_Info("BLOQUE 3 FINALIZADO", hv_SerialHandle);

            //***************************************
            //Descuento 1 el stock ingresado en BD
            hv_FXcheck.Dispose();
            Set_MinusCores(hv_SerialHandle, out hv_FXcheck);
            //***************************************

          }
          else
          {
            hv_Procesando.Dispose();
            hv_Procesando = 0;
            hv_Resultado.Dispose();
            hv_Resultado = 2;
            Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
            Send_Data_Info("BLOQUE 3 FINALIZADO con ### ERRORES ####", hv_SerialHandle);
          }
        }
        else
        {
          hv_Procesando.Dispose();
          hv_Procesando = 0;
          hv_Resultado.Dispose();
          hv_Resultado = 2;
          //Send_Data_Proceso (SerialHandle, Resultado, Procesando)
          Send_Data_Info("BLOQUE 3 FINALIZADO con ### ERRORES ####", hv_SerialHandle);
        }
        //Borrar 3D
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.ClearObjectModel3d(((hv_ROI3D_rotate.TupleConcat(hv_ROI3D_NullFrame))).TupleConcat(
            hv_Escena3D_RAW_COPY_INP_TMP));
        }
        //
        //# ################################################# 
        //
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_EstadoFx.Dispose();
        Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx);


        hv_Escena3D_RAW_COPY_INP_TMP.Dispose();
        hv_Parametros_Visualizacion.Dispose();
        hv_Valores_Visualizacion.Dispose();
        hv_Vector_Segmento.Dispose();
        hv_ROI3D_NullFrame.Dispose();
        hv_ROI3D_rotate.Dispose();
        hv_Exception.Dispose();
        hv_EstadoFx.Dispose();
        hv_Estado.Dispose();
        hv_Pose_Segmentos.Dispose();
        hv_Vector_Entidades_Segmento.Dispose();
        hv_Estado_Funcion.Dispose();
        hv_Estado_FuncionSub.Dispose();
        hv_Pituto.Dispose();
        hv_Sampling.Dispose();
        hv_Estado_Fx.Dispose();
        hv_MyPose.Dispose();
        hv_Procesando.Dispose();
        hv_Resultado.Dispose();
        hv_FXcheck.Dispose();
        hvec_Vector_Existencia_Core_New.Dispose();

        return;
      }
      //
      //****************************************


      hv_Escena3D_RAW_COPY_INP_TMP.Dispose();
      hv_Parametros_Visualizacion.Dispose();
      hv_Valores_Visualizacion.Dispose();
      hv_Vector_Segmento.Dispose();
      hv_ROI3D_NullFrame.Dispose();
      hv_ROI3D_rotate.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();
      hv_Estado.Dispose();
      hv_Pose_Segmentos.Dispose();
      hv_Vector_Entidades_Segmento.Dispose();
      hv_Estado_Funcion.Dispose();
      hv_Estado_FuncionSub.Dispose();
      hv_Pituto.Dispose();
      hv_Sampling.Dispose();
      hv_Estado_Fx.Dispose();
      hv_MyPose.Dispose();
      hv_Procesando.Dispose();
      hv_Resultado.Dispose();
      hv_FXcheck.Dispose();
      hvec_Vector_Existencia_Core_New.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Escena3D_RAW_COPY_INP_TMP.Dispose();
      hv_Parametros_Visualizacion.Dispose();
      hv_Valores_Visualizacion.Dispose();
      hv_Vector_Segmento.Dispose();
      hv_ROI3D_NullFrame.Dispose();
      hv_ROI3D_rotate.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();
      hv_Estado.Dispose();
      hv_Pose_Segmentos.Dispose();
      hv_Vector_Entidades_Segmento.Dispose();
      hv_Estado_Funcion.Dispose();
      hv_Estado_FuncionSub.Dispose();
      hv_Pituto.Dispose();
      hv_Sampling.Dispose();
      hv_Estado_Fx.Dispose();
      hv_MyPose.Dispose();
      hv_Procesando.Dispose();
      hv_Resultado.Dispose();
      hv_FXcheck.Dispose();
      hvec_Vector_Existencia_Core_New.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Take_Core_In_Pallet_COPY_1 (HObject ho_Z, HObject ho_X, HObject ho_Y, 
      HTuple hv_Escena3D_RAW, HTuple hv_N_Pallet_to_Scan, HTuple hv_Path_SFM_Segmentos, 
      HTuple hv_Path_3D_Segmentos, HTuple hv_Vector_ID_Core_by_Segment_Pallet_Tofind, 
      HTuple hv_Path_CORE_ID, HTuple hv_SerialHandle, HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Vector_Estado_Fx, 
      HTuple hv_Visualizar3D, HTuple hv_SegmentoPallet, HTuple hv_Pose_Esquina, HTuple hv_PitutoExist, 
      HTuple hv_ObjectModel3D_Core_Pallet, HTuple hv_SFM_Core_Pallet, HTuple hv_Modelo3D_Select, 
      HTuple hv_WindowHandle, out HTuple hv_Estado_SubProceso, out HTuple hv_RepetirFoto)
  {




    // Local iconic variables 

    // Local control variables 

    HTuple hv_Parametros_Visualizacion = new HTuple();
    HTuple hv_Valores_Visualizacion = new HTuple(), hv_Vector_Segmento = new HTuple();
    HTuple hv_ROI3D_NullFrame = new HTuple(), hv_ROI3D_rotate = new HTuple();
    HTuple hv_Exception = new HTuple(), hv_EstadoFx = new HTuple();
    HTuple hv_Estado = new HTuple(), hv_Pose_Segmentos = new HTuple();
    HTuple hv_Vector_Entidades_Segmento = new HTuple(), hv_Estado_Funcion = new HTuple();
    HTuple hv_Estado_FuncionSub = new HTuple(), hv_Pituto = new HTuple();
    HTuple hv_Sampling = new HTuple(), hv_Estado_Fx = new HTuple();
    HTuple hv_MyPose = new HTuple(), hv_Procesando = new HTuple();
    HTuple hv_Resultado = new HTuple(), hv_FXcheck = new HTuple();

    HTupleVector hvec_Vector_Existencia_Core_New = new HTupleVector(2);
    HTuple   hv_Escena3D_RAW_COPY_INP_TMP = new HTuple(hv_Escena3D_RAW);

    // Initialize local and output iconic variables 
    hv_Estado_SubProceso = new HTuple();
    hv_RepetirFoto = new HTuple();
    try
    {
      hv_Parametros_Visualizacion.Dispose();
      hv_Parametros_Visualizacion = new HTuple();
      hv_Parametros_Visualizacion[0] = "colored";
      hv_Parametros_Visualizacion[1] = "disp_pose";
      hv_Parametros_Visualizacion[2] = "point_size";
      hv_Valores_Visualizacion.Dispose();
      hv_Valores_Visualizacion = new HTuple();
      hv_Valores_Visualizacion[0] = 12;
      hv_Valores_Visualizacion[1] = "true";
      hv_Valores_Visualizacion[2] = 1;


      //*****************************************
      //1.- Obtengo el ROI3D del PALLET
      //*****************************************
      hv_Vector_Segmento.Dispose();
      hv_Vector_Segmento = new HTuple();
      hv_Vector_Segmento[0] = "A";
      hv_Vector_Segmento[1] = "B";
      hv_Vector_Segmento[2] = "C";
      hv_Vector_Segmento[3] = "D";
      hv_Vector_Segmento[4] = "E";
      hv_Vector_Segmento[5] = "F";
      hv_Vector_Segmento[6] = "G";
      hv_Vector_Segmento[7] = "H";
      hv_Vector_Segmento[8] = "I";


      try
      {
        hv_ROI3D_NullFrame.Dispose();hv_ROI3D_rotate.Dispose();
        Get_ROI3D_Pallet(out hv_ROI3D_NullFrame, out hv_ROI3D_rotate);
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);

        hv_EstadoFx.Dispose();
        Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx);
        //throw (MensajeError)

        //# ### Envio data de estado ########################

        hv_Estado.Dispose();
        hv_Estado = 5;
        Send_Data_Estado(hvec_Vector_Estado_Fx, hv_Estado, hv_SerialHandle);

        //# ################################################# 


        hv_Escena3D_RAW_COPY_INP_TMP.Dispose();
        hv_Parametros_Visualizacion.Dispose();
        hv_Valores_Visualizacion.Dispose();
        hv_Vector_Segmento.Dispose();
        hv_ROI3D_NullFrame.Dispose();
        hv_ROI3D_rotate.Dispose();
        hv_Exception.Dispose();
        hv_EstadoFx.Dispose();
        hv_Estado.Dispose();
        hv_Pose_Segmentos.Dispose();
        hv_Vector_Entidades_Segmento.Dispose();
        hv_Estado_Funcion.Dispose();
        hv_Estado_FuncionSub.Dispose();
        hv_Pituto.Dispose();
        hv_Sampling.Dispose();
        hv_Estado_Fx.Dispose();
        hv_MyPose.Dispose();
        hv_Procesando.Dispose();
        hv_Resultado.Dispose();
        hv_FXcheck.Dispose();
        hvec_Vector_Existencia_Core_New.Dispose();

        return;
      }

      //# #### ROTO EL ROI 3D ######

      try
      {
        //# ####################################################################################
        //Funcion que Lee la pose guardada en el Bloque 0, y que referencia la orientacion de la camara
        //# ####################################################################################
        hv_Pose_Segmentos.Dispose();
        {
        HTuple ExpTmpOutVar_0;
        Get_Rotate_ROI3D(hv_Pose_Esquina, hv_ROI3D_rotate, out hv_Pose_Segmentos, 
            out ExpTmpOutVar_0);
        hv_ROI3D_rotate.Dispose();
        hv_ROI3D_rotate = ExpTmpOutVar_0;
        }
        //Visualizar_3D ([Escena3D_RAW], Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, [], [], ['Modelo'], WindowHandle, PoseOut1)

      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);

        hv_EstadoFx.Dispose();
        Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx);

        hv_Escena3D_RAW_COPY_INP_TMP.Dispose();
        hv_Parametros_Visualizacion.Dispose();
        hv_Valores_Visualizacion.Dispose();
        hv_Vector_Segmento.Dispose();
        hv_ROI3D_NullFrame.Dispose();
        hv_ROI3D_rotate.Dispose();
        hv_Exception.Dispose();
        hv_EstadoFx.Dispose();
        hv_Estado.Dispose();
        hv_Pose_Segmentos.Dispose();
        hv_Vector_Entidades_Segmento.Dispose();
        hv_Estado_Funcion.Dispose();
        hv_Estado_FuncionSub.Dispose();
        hv_Pituto.Dispose();
        hv_Sampling.Dispose();
        hv_Estado_Fx.Dispose();
        hv_MyPose.Dispose();
        hv_Procesando.Dispose();
        hv_Resultado.Dispose();
        hv_FXcheck.Dispose();
        hvec_Vector_Existencia_Core_New.Dispose();

        return;
      }

      //# ###################################################################
      //# ###################################################################
      //# ################ BUSQUEDA DE CORES EN EL PALLET ###################
      //# ###################################################################
      //# ###################################################################
      //3.- Encuentro el orden y los segementos en que estan distribuidos los cores en el applet

      hv_Vector_Entidades_Segmento.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Vector_Entidades_Segmento = (hv_Vector_ID_Core_by_Segment_Pallet_Tofind+";")+hv_SegmentoPallet;
      }

      try
      {

        //********************************************************
        //ROI 3D sectorizado de cada elemento
        //Busco de manera sectorizada cara core en el pallet
        //********************************************************
        //Estructura de vector
        //# ###########################
        //# ## CORE ## Existencia #####
        //# ###########################

        //*****************************************************************************
        //******* Proceso el entorno 3D para eliminar ruido  **************************
        //*****************************************************************************
        hv_Estado_Funcion.Dispose();hv_Escena3D_RAW_COPY_INP_TMP.Dispose();hv_Estado_FuncionSub.Dispose();
        Sub_Process_ImageCore(ho_Z, ho_X, ho_Y, hv_SerialHandle, out hv_Estado_Funcion, 
            out hv_Escena3D_RAW_COPY_INP_TMP, out hv_Estado_FuncionSub);
        if ((int)(hv_Estado_FuncionSub) != 0)
        {



          //*********************************
          //REVISAR ORIENTACION
          //************************
          if ((int)(new HTuple(hv_PitutoExist.TupleEqual("Yes"))) != 0)
          {
            hv_Pituto.Dispose();
            hv_Pituto = 1;
          }
          hv_Pituto.Dispose();
          hv_Pituto = 1;

          //Visualizar_3D ([Escena3D_RAW], Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, [], [], ['Modelo'], WindowHandle, PoseOut1)


          //**********************************************

          //smooth_object_model_3d (Escena3D_RAW, 'mls', 'mls_kNN', 50, Escena3D_RAW)
          //Visualizar_3D ([Escena3D_RAW], Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, [], [], ['Modelo'], WindowHandle, PoseOut1)


          hv_Sampling.Dispose();
          hv_Sampling = 0.02;
          Send_Data_Info("### -> Iniciando Busqueda de Entidad ###", hv_SerialHandle);
          hvec_Vector_Existencia_Core_New.Dispose();hv_Estado_Fx.Dispose();hv_RepetirFoto.Dispose();hv_MyPose.Dispose();
          Find_Sector_Core_Bloque3(ho_Z, hv_Vector_ID_Core_by_Segment_Pallet_Tofind, 
              hv_Vector_Entidades_Segmento, hv_Path_CORE_ID, hv_Path_3D_Segmentos, 
              hv_Path_SFM_Segmentos, hv_ROI3D_rotate, hv_Parametros_Visualizacion, 
              hv_Valores_Visualizacion, hv_Visualizar3D, hv_Vector_Segmento, hv_Escena3D_RAW_COPY_INP_TMP, 
              hv_Sampling, hv_SerialHandle, hvec_Vector_Estado_Fx, hv_Pituto, hv_ObjectModel3D_Core_Pallet, 
              hv_SFM_Core_Pallet, hv_Modelo3D_Select, hv_WindowHandle, out hvec_Vector_Existencia_Core_New, 
              out hv_Estado_Fx, out hv_RepetirFoto, out hv_MyPose);

          //****************************
          //return ()
          //***************************



          if ((int)(hv_RepetirFoto) != 0)
          {
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            HOperatorSet.ClearObjectModel3d(((hv_ROI3D_rotate.TupleConcat(hv_ROI3D_NullFrame))).TupleConcat(
                hv_Escena3D_RAW_COPY_INP_TMP));
            }

            hv_Escena3D_RAW_COPY_INP_TMP.Dispose();
            hv_Parametros_Visualizacion.Dispose();
            hv_Valores_Visualizacion.Dispose();
            hv_Vector_Segmento.Dispose();
            hv_ROI3D_NullFrame.Dispose();
            hv_ROI3D_rotate.Dispose();
            hv_Exception.Dispose();
            hv_EstadoFx.Dispose();
            hv_Estado.Dispose();
            hv_Pose_Segmentos.Dispose();
            hv_Vector_Entidades_Segmento.Dispose();
            hv_Estado_Funcion.Dispose();
            hv_Estado_FuncionSub.Dispose();
            hv_Pituto.Dispose();
            hv_Sampling.Dispose();
            hv_Estado_Fx.Dispose();
            hv_MyPose.Dispose();
            hv_Procesando.Dispose();
            hv_Resultado.Dispose();
            hv_FXcheck.Dispose();
            hvec_Vector_Existencia_Core_New.Dispose();

            return;
          }
          //# ### Envio data de estado ########################
          if ((int)(hv_Estado_Fx) != 0)
          {
            hv_Estado.Dispose();
            hv_Estado = 13;
            hv_Procesando.Dispose();
            hv_Procesando = 0;
            hv_Resultado.Dispose();
            hv_Resultado = 1;
            Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
            Send_Data_Info("BLOQUE 3 FINALIZADO", hv_SerialHandle);

            //***************************************
            //Descuento 1 el stock ingresado en BD
            hv_FXcheck.Dispose();
            Set_MinusCores_COPY_1(hv_SerialHandle, out hv_FXcheck);
            //***************************************

          }
          else
          {
            hv_Procesando.Dispose();
            hv_Procesando = 0;
            hv_Resultado.Dispose();
            hv_Resultado = 2;
            Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
            Send_Data_Info("BLOQUE 3 FINALIZADO con ### ERRORES ####", hv_SerialHandle);
          }
        }
        else
        {
          hv_Procesando.Dispose();
          hv_Procesando = 0;
          hv_Resultado.Dispose();
          hv_Resultado = 2;
          //Send_Data_Proceso (SerialHandle, Resultado, Procesando)
          Send_Data_Info("BLOQUE 3 FINALIZADO con ### ERRORES ####", hv_SerialHandle);
        }
        //Borrar 3D
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.ClearObjectModel3d(((hv_ROI3D_rotate.TupleConcat(hv_ROI3D_NullFrame))).TupleConcat(
            hv_Escena3D_RAW_COPY_INP_TMP));
        }

        //# ################################################# 

      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_EstadoFx.Dispose();
        Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx);


        hv_Escena3D_RAW_COPY_INP_TMP.Dispose();
        hv_Parametros_Visualizacion.Dispose();
        hv_Valores_Visualizacion.Dispose();
        hv_Vector_Segmento.Dispose();
        hv_ROI3D_NullFrame.Dispose();
        hv_ROI3D_rotate.Dispose();
        hv_Exception.Dispose();
        hv_EstadoFx.Dispose();
        hv_Estado.Dispose();
        hv_Pose_Segmentos.Dispose();
        hv_Vector_Entidades_Segmento.Dispose();
        hv_Estado_Funcion.Dispose();
        hv_Estado_FuncionSub.Dispose();
        hv_Pituto.Dispose();
        hv_Sampling.Dispose();
        hv_Estado_Fx.Dispose();
        hv_MyPose.Dispose();
        hv_Procesando.Dispose();
        hv_Resultado.Dispose();
        hv_FXcheck.Dispose();
        hvec_Vector_Existencia_Core_New.Dispose();

        return;
      }

      //****************************************


      hv_Escena3D_RAW_COPY_INP_TMP.Dispose();
      hv_Parametros_Visualizacion.Dispose();
      hv_Valores_Visualizacion.Dispose();
      hv_Vector_Segmento.Dispose();
      hv_ROI3D_NullFrame.Dispose();
      hv_ROI3D_rotate.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();
      hv_Estado.Dispose();
      hv_Pose_Segmentos.Dispose();
      hv_Vector_Entidades_Segmento.Dispose();
      hv_Estado_Funcion.Dispose();
      hv_Estado_FuncionSub.Dispose();
      hv_Pituto.Dispose();
      hv_Sampling.Dispose();
      hv_Estado_Fx.Dispose();
      hv_MyPose.Dispose();
      hv_Procesando.Dispose();
      hv_Resultado.Dispose();
      hv_FXcheck.Dispose();
      hvec_Vector_Existencia_Core_New.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Escena3D_RAW_COPY_INP_TMP.Dispose();
      hv_Parametros_Visualizacion.Dispose();
      hv_Valores_Visualizacion.Dispose();
      hv_Vector_Segmento.Dispose();
      hv_ROI3D_NullFrame.Dispose();
      hv_ROI3D_rotate.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();
      hv_Estado.Dispose();
      hv_Pose_Segmentos.Dispose();
      hv_Vector_Entidades_Segmento.Dispose();
      hv_Estado_Funcion.Dispose();
      hv_Estado_FuncionSub.Dispose();
      hv_Pituto.Dispose();
      hv_Sampling.Dispose();
      hv_Estado_Fx.Dispose();
      hv_MyPose.Dispose();
      hv_Procesando.Dispose();
      hv_Resultado.Dispose();
      hv_FXcheck.Dispose();
      hvec_Vector_Existencia_Core_New.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Take_Core_In_Pallet_COPY_2 (HObject ho_Z, HObject ho_X, HObject ho_Y, 
      HTuple hv_Escena3D_RAW, HTuple hv_N_Pallet_to_Scan, HTuple hv_Path_SFM_Segmentos, 
      HTuple hv_Path_3D_Segmentos, HTuple hv_Vector_ID_Core_by_Segment_Pallet_Tofind, 
      HTuple hv_Path_CORE_ID, HTuple hv_SerialHandle, HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Vector_Estado_Fx, 
      HTuple hv_Visualizar3D, HTuple hv_SegmentoPallet, HTuple hv_Pose_Esquina, HTuple hv_PitutoExist, 
      HTuple hv_ObjectModel3D_Core_Pallet, HTuple hv_SFM_Core_Pallet, HTuple hv_Modelo3D_Select, 
      HTuple hv_WindowHandle, out HTuple hv_Estado_SubProceso, out HTuple hv_RepetirFoto)
  {




    // Local iconic variables 

    // Local control variables 

    HTuple hv_Parametros_Visualizacion = new HTuple();
    HTuple hv_Valores_Visualizacion = new HTuple(), hv_Vector_Segmento = new HTuple();
    HTuple hv_ROI3D_NullFrame = new HTuple(), hv_ROI3D_rotate = new HTuple();
    HTuple hv_Exception = new HTuple(), hv_EstadoFx = new HTuple();
    HTuple hv_Estado = new HTuple(), hv_Pose_Segmentos = new HTuple();
    HTuple hv_Vector_Entidades_Segmento = new HTuple(), hv_Estado_Funcion = new HTuple();
    HTuple hv_Estado_FuncionSub = new HTuple(), hv_Pituto = new HTuple();
    HTuple hv_Sampling = new HTuple(), hv_Estado_Fx = new HTuple();
    HTuple hv_MyPose = new HTuple(), hv_Procesando = new HTuple();
    HTuple hv_Resultado = new HTuple(), hv_FXcheck = new HTuple();

    HTupleVector hvec_Vector_Existencia_Core_New = new HTupleVector(2);
    HTuple   hv_Escena3D_RAW_COPY_INP_TMP = new HTuple(hv_Escena3D_RAW);

    // Initialize local and output iconic variables 
    hv_Estado_SubProceso = new HTuple();
    hv_RepetirFoto = new HTuple();
    try
    {
      hv_Parametros_Visualizacion.Dispose();
      hv_Parametros_Visualizacion = new HTuple();
      hv_Parametros_Visualizacion[0] = "colored";
      hv_Parametros_Visualizacion[1] = "disp_pose";
      hv_Parametros_Visualizacion[2] = "point_size";
      hv_Valores_Visualizacion.Dispose();
      hv_Valores_Visualizacion = new HTuple();
      hv_Valores_Visualizacion[0] = 12;
      hv_Valores_Visualizacion[1] = "true";
      hv_Valores_Visualizacion[2] = 1;


      //*****************************************
      //1.- Obtengo el ROI3D del PALLET
      //*****************************************
      hv_Vector_Segmento.Dispose();hv_ROI3D_NullFrame.Dispose();hv_ROI3D_rotate.Dispose();hv_Exception.Dispose();hv_EstadoFx.Dispose();hv_Estado.Dispose();hv_Pose_Segmentos.Dispose();
      Get_Segmento_COPY_1(hv_SerialHandle, hvec_Vector_Estado_Fx, hv_Pose_Esquina, 
          hv_Escena3D_RAW_COPY_INP_TMP, hv_Parametros_Visualizacion, hv_Valores_Visualizacion, 
          hv_Visualizar3D, hv_WindowHandle, out hv_Vector_Segmento, out hv_ROI3D_NullFrame, 
          out hv_ROI3D_rotate, out hv_Exception, out hv_EstadoFx, out hv_Estado, 
          out hv_Pose_Segmentos);

      //# ###################################################################
      //# ###################################################################
      //# ################ BUSQUEDA DE CORES EN EL PALLET ###################
      //# ###################################################################
      //# ###################################################################
      //3.- Encuentro el orden y los segementos en que estan distribuidos los cores en el applet

      hv_Vector_Entidades_Segmento.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Vector_Entidades_Segmento = (hv_Vector_ID_Core_by_Segment_Pallet_Tofind+";")+hv_SegmentoPallet;
      }

      try
      {

        //********************************************************
        //ROI 3D sectorizado de cada elemento
        //Busco de manera sectorizada cara core en el pallet
        //********************************************************
        //Estructura de vector
        //# ###########################
        //# ## CORE ## Existencia #####
        //# ###########################

        //*****************************************************************************
        //******* Proceso el entorno 3D para eliminar ruido  **************************
        //*****************************************************************************
        hv_Estado_Funcion.Dispose();hv_Escena3D_RAW_COPY_INP_TMP.Dispose();hv_Estado_FuncionSub.Dispose();
        Sub_Process_ImageCore(ho_Z, ho_X, ho_Y, hv_SerialHandle, out hv_Estado_Funcion, 
            out hv_Escena3D_RAW_COPY_INP_TMP, out hv_Estado_FuncionSub);
        if ((int)(hv_Estado_FuncionSub) != 0)
        {



          //************************
          //REVISAR ORIENTACION
          //************************
          if ((int)(new HTuple(hv_PitutoExist.TupleEqual("Yes"))) != 0)
          {
            hv_Pituto.Dispose();
            hv_Pituto = 1;
          }

          hv_Pituto.Dispose();
          hv_Pituto = 1;


          //**********************************************

          //smooth_object_model_3d (Escena3D_RAW, 'mls', 'mls_kNN', 50, Escena3D_RAW)
          //Visualizar_3D ([Escena3D_RAW], Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, [], [], ['Modelo'], WindowHandle, PoseOut1)


          hv_Sampling.Dispose();
          hv_Sampling = 0.02;
          Send_Data_Info("### -> Iniciando Busqueda de Entidad ###", hv_SerialHandle);
          hvec_Vector_Existencia_Core_New.Dispose();hv_Estado_Fx.Dispose();hv_RepetirFoto.Dispose();hv_MyPose.Dispose();
          Find_Sector_Core_Bloque3(ho_Z, hv_Vector_ID_Core_by_Segment_Pallet_Tofind, 
              hv_Vector_Entidades_Segmento, hv_Path_CORE_ID, hv_Path_3D_Segmentos, 
              hv_Path_SFM_Segmentos, hv_ROI3D_rotate, hv_Parametros_Visualizacion, 
              hv_Valores_Visualizacion, hv_Visualizar3D, hv_Vector_Segmento, hv_Escena3D_RAW_COPY_INP_TMP, 
              hv_Sampling, hv_SerialHandle, hvec_Vector_Estado_Fx, hv_Pituto, hv_ObjectModel3D_Core_Pallet, 
              hv_SFM_Core_Pallet, hv_Modelo3D_Select, hv_WindowHandle, out hvec_Vector_Existencia_Core_New, 
              out hv_Estado_Fx, out hv_RepetirFoto, out hv_MyPose);

          //****************************
          //return ()
          //***************************



          if ((int)(hv_RepetirFoto) != 0)
          {
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            HOperatorSet.ClearObjectModel3d(((hv_ROI3D_rotate.TupleConcat(hv_ROI3D_NullFrame))).TupleConcat(
                hv_Escena3D_RAW_COPY_INP_TMP));
            }

            hv_Escena3D_RAW_COPY_INP_TMP.Dispose();
            hv_Parametros_Visualizacion.Dispose();
            hv_Valores_Visualizacion.Dispose();
            hv_Vector_Segmento.Dispose();
            hv_ROI3D_NullFrame.Dispose();
            hv_ROI3D_rotate.Dispose();
            hv_Exception.Dispose();
            hv_EstadoFx.Dispose();
            hv_Estado.Dispose();
            hv_Pose_Segmentos.Dispose();
            hv_Vector_Entidades_Segmento.Dispose();
            hv_Estado_Funcion.Dispose();
            hv_Estado_FuncionSub.Dispose();
            hv_Pituto.Dispose();
            hv_Sampling.Dispose();
            hv_Estado_Fx.Dispose();
            hv_MyPose.Dispose();
            hv_Procesando.Dispose();
            hv_Resultado.Dispose();
            hv_FXcheck.Dispose();
            hvec_Vector_Existencia_Core_New.Dispose();

            return;
          }
          //# ### Envio data de estado ########################
          if ((int)(hv_Estado_Fx) != 0)
          {
            hv_Estado.Dispose();
            hv_Estado = 13;
            hv_Procesando.Dispose();
            hv_Procesando = 0;
            hv_Resultado.Dispose();
            hv_Resultado = 1;
            Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
            Send_Data_Info("BLOQUE 3 FINALIZADO", hv_SerialHandle);

            //***************************************
            //Descuento 1 el stock ingresado en BD
            hv_FXcheck.Dispose();
            Set_MinusCores_COPY_2(hv_SerialHandle, out hv_FXcheck);
            //***************************************

          }
          else
          {
            hv_Procesando.Dispose();
            hv_Procesando = 0;
            hv_Resultado.Dispose();
            hv_Resultado = 2;
            Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
            Send_Data_Info("BLOQUE 3 FINALIZADO con ### ERRORES ####", hv_SerialHandle);
          }
        }
        else
        {
          hv_Procesando.Dispose();
          hv_Procesando = 0;
          hv_Resultado.Dispose();
          hv_Resultado = 2;
          //Send_Data_Proceso (SerialHandle, Resultado, Procesando)
          Send_Data_Info("BLOQUE 3 FINALIZADO con ### ERRORES ####", hv_SerialHandle);
        }
        //Borrar 3D
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.ClearObjectModel3d(((hv_ROI3D_rotate.TupleConcat(hv_ROI3D_NullFrame))).TupleConcat(
            hv_Escena3D_RAW_COPY_INP_TMP));
        }

        //# ################################################# 

      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_EstadoFx.Dispose();
        Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx);


        hv_Escena3D_RAW_COPY_INP_TMP.Dispose();
        hv_Parametros_Visualizacion.Dispose();
        hv_Valores_Visualizacion.Dispose();
        hv_Vector_Segmento.Dispose();
        hv_ROI3D_NullFrame.Dispose();
        hv_ROI3D_rotate.Dispose();
        hv_Exception.Dispose();
        hv_EstadoFx.Dispose();
        hv_Estado.Dispose();
        hv_Pose_Segmentos.Dispose();
        hv_Vector_Entidades_Segmento.Dispose();
        hv_Estado_Funcion.Dispose();
        hv_Estado_FuncionSub.Dispose();
        hv_Pituto.Dispose();
        hv_Sampling.Dispose();
        hv_Estado_Fx.Dispose();
        hv_MyPose.Dispose();
        hv_Procesando.Dispose();
        hv_Resultado.Dispose();
        hv_FXcheck.Dispose();
        hvec_Vector_Existencia_Core_New.Dispose();

        return;
      }

      //****************************************


      hv_Escena3D_RAW_COPY_INP_TMP.Dispose();
      hv_Parametros_Visualizacion.Dispose();
      hv_Valores_Visualizacion.Dispose();
      hv_Vector_Segmento.Dispose();
      hv_ROI3D_NullFrame.Dispose();
      hv_ROI3D_rotate.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();
      hv_Estado.Dispose();
      hv_Pose_Segmentos.Dispose();
      hv_Vector_Entidades_Segmento.Dispose();
      hv_Estado_Funcion.Dispose();
      hv_Estado_FuncionSub.Dispose();
      hv_Pituto.Dispose();
      hv_Sampling.Dispose();
      hv_Estado_Fx.Dispose();
      hv_MyPose.Dispose();
      hv_Procesando.Dispose();
      hv_Resultado.Dispose();
      hv_FXcheck.Dispose();
      hvec_Vector_Existencia_Core_New.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Escena3D_RAW_COPY_INP_TMP.Dispose();
      hv_Parametros_Visualizacion.Dispose();
      hv_Valores_Visualizacion.Dispose();
      hv_Vector_Segmento.Dispose();
      hv_ROI3D_NullFrame.Dispose();
      hv_ROI3D_rotate.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();
      hv_Estado.Dispose();
      hv_Pose_Segmentos.Dispose();
      hv_Vector_Entidades_Segmento.Dispose();
      hv_Estado_Funcion.Dispose();
      hv_Estado_FuncionSub.Dispose();
      hv_Pituto.Dispose();
      hv_Sampling.Dispose();
      hv_Estado_Fx.Dispose();
      hv_MyPose.Dispose();
      hv_Procesando.Dispose();
      hv_Resultado.Dispose();
      hv_FXcheck.Dispose();
      hvec_Vector_Existencia_Core_New.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Take_Core_In_Pallet_Segmento0 (HObject ho_Z, HObject ho_X, HObject ho_Y, 
      HTuple hv_Escena3D_RAW, HTuple hv_N_Pallet_to_Scan, HTuple hv_Path_SFM_Segmentos, 
      HTuple hv_Path_3D_Segmentos, HTuple hv_Vector_ID_Core_by_Segment_Pallet_Tofind, 
      HTuple hv_Path_CORE_ID, HTuple hv_SerialHandle, HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Vector_Estado_Fx, 
      HTuple hv_Visualizar3D, HTuple hv_SegmentoPallet, HTuple hv_Pose_Esquina, HTuple hv_PitutoExist, 
      HTuple hv_ObjectModel3D_Core_Pallet, HTuple hv_SFM_Core_Pallet, HTuple hv_Modelo3D_Select, 
      HTuple hv_WindowHandle, HTuple hv_Estado_Fx, HTuple hv_g_AltutaVirtualCamEstereo, 
      out HTuple hv_Estado_SubProceso, out HTuple hv_RepetirFoto)
  {




    // Local iconic variables 

    // Local control variables 

    HTuple hv_Parametros_Visualizacion = new HTuple();
    HTuple hv_Valores_Visualizacion = new HTuple(), hv_Vector_Segmento = new HTuple();
    HTuple hv_ROI3D_NullFrame = new HTuple(), hv_ROI3D_rotate = new HTuple();
    HTuple hv_Exception = new HTuple(), hv_EstadoFx = new HTuple();
    HTuple hv_Estado = new HTuple(), hv_Pose_Segmentos = new HTuple();
    HTuple hv_Vector_Entidades_Segmento = new HTuple(), hv_Estado_Funcion = new HTuple();
    HTuple hv_Estado_FuncionSub = new HTuple(), hv_Pituto = new HTuple();
    HTuple hv_Sampling = new HTuple(), hv_MyPose = new HTuple();
    HTuple hv_Procesando = new HTuple(), hv_Resultado = new HTuple();

    HTupleVector hvec_Vector_Existencia_Core_New = new HTupleVector(2);
    HTuple   hv_Escena3D_RAW_COPY_INP_TMP = new HTuple(hv_Escena3D_RAW);
    HTuple   hv_Estado_Fx_COPY_INP_TMP = new HTuple(hv_Estado_Fx);

    // Initialize local and output iconic variables 
    hv_Estado_SubProceso = new HTuple();
    hv_RepetirFoto = new HTuple();
    try
    {
      hv_Parametros_Visualizacion.Dispose();
      hv_Parametros_Visualizacion = new HTuple();
      hv_Parametros_Visualizacion[0] = "colored";
      hv_Parametros_Visualizacion[1] = "disp_pose";
      hv_Parametros_Visualizacion[2] = "point_size";
      hv_Valores_Visualizacion.Dispose();
      hv_Valores_Visualizacion = new HTuple();
      hv_Valores_Visualizacion[0] = 12;
      hv_Valores_Visualizacion[1] = "true";
      hv_Valores_Visualizacion[2] = 1;


      //*****************************************
      //1.- Obtengo el ROI3D del PALLET
      //*****************************************
      hv_Vector_Segmento.Dispose();hv_ROI3D_NullFrame.Dispose();hv_ROI3D_rotate.Dispose();hv_Exception.Dispose();hv_EstadoFx.Dispose();hv_Estado.Dispose();hv_Pose_Segmentos.Dispose();
      Get_Segmento(hv_SerialHandle, hvec_Vector_Estado_Fx, hv_Pose_Esquina, hv_Escena3D_RAW_COPY_INP_TMP, 
          hv_Parametros_Visualizacion, hv_Valores_Visualizacion, hv_Visualizar3D, 
          hv_WindowHandle, out hv_Vector_Segmento, out hv_ROI3D_NullFrame, out hv_ROI3D_rotate, 
          out hv_Exception, out hv_EstadoFx, out hv_Estado, out hv_Pose_Segmentos);

      //# ###################################################################
      //# ###################################################################
      //# ################ BUSQUEDA DE CORES EN EL PALLET ###################
      //# ###################################################################
      //# ###################################################################
      //3.- Encuentro el orden y los segementos en que estan distribuidos los cores en el applet

      hv_Vector_Entidades_Segmento.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Vector_Entidades_Segmento = (hv_Vector_ID_Core_by_Segment_Pallet_Tofind+";")+hv_SegmentoPallet;
      }

      try
      {

        //********************************************************
        //ROI 3D sectorizado de cada elemento
        //Busco de manera sectorizada cara core en el pallet
        //********************************************************
        //Estructura de vector
        //# ###########################
        //# ## CORE ## Existencia #####
        //# ###########################

        //*****************************************************************************
        //******* Proceso el entorno 3D para eliminar ruido  **************************
        //*****************************************************************************
        hv_Estado_Funcion.Dispose();hv_Escena3D_RAW_COPY_INP_TMP.Dispose();hv_Estado_FuncionSub.Dispose();
        Sub_Process_ImageCore(ho_Z, ho_X, ho_Y, hv_SerialHandle, out hv_Estado_Funcion, 
            out hv_Escena3D_RAW_COPY_INP_TMP, out hv_Estado_FuncionSub);
        if ((int)(hv_Estado_FuncionSub) != 0)
        {

          hv_Pituto.Dispose();
          hv_Pituto = 1;
          //**********************************************

          //smooth_object_model_3d (Escena3D_RAW, 'mls', 'mls_kNN', 50, Escena3D_RAW)
          //Visualizar_3D ([Escena3D_RAW], Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, [], [], ['Modelo'], WindowHandle, PoseOut1)


          hv_Sampling.Dispose();
          hv_Sampling = 0.02;
          Send_Data_Info("### -> Iniciando Busqueda de Entidad ###", hv_SerialHandle);
          hvec_Vector_Existencia_Core_New.Dispose();hv_Estado_Fx_COPY_INP_TMP.Dispose();hv_RepetirFoto.Dispose();hv_MyPose.Dispose();
          Find_Sector_Core_Bloque3(ho_Z, hv_Vector_ID_Core_by_Segment_Pallet_Tofind, 
              hv_Vector_Entidades_Segmento, hv_Path_CORE_ID, hv_Path_3D_Segmentos, 
              hv_Path_SFM_Segmentos, hv_ROI3D_rotate, hv_Parametros_Visualizacion, 
              hv_Valores_Visualizacion, hv_Visualizar3D, hv_Vector_Segmento, hv_Escena3D_RAW_COPY_INP_TMP, 
              hv_Sampling, hv_SerialHandle, hvec_Vector_Estado_Fx, hv_Pituto, hv_ObjectModel3D_Core_Pallet, 
              hv_SFM_Core_Pallet, hv_Modelo3D_Select, hv_WindowHandle, out hvec_Vector_Existencia_Core_New, 
              out hv_Estado_Fx_COPY_INP_TMP, out hv_RepetirFoto, out hv_MyPose);

          //****************************
          hv_Estado_SubProceso.Dispose();
          hv_Estado_SubProceso = new HTuple(hv_Estado_Fx_COPY_INP_TMP);
          //***************************



          if ((int)(hv_RepetirFoto) != 0)
          {
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            HOperatorSet.ClearObjectModel3d(((hv_ROI3D_rotate.TupleConcat(hv_ROI3D_NullFrame))).TupleConcat(
                hv_Escena3D_RAW_COPY_INP_TMP));
            }

            hv_Escena3D_RAW_COPY_INP_TMP.Dispose();
            hv_Estado_Fx_COPY_INP_TMP.Dispose();
            hv_Parametros_Visualizacion.Dispose();
            hv_Valores_Visualizacion.Dispose();
            hv_Vector_Segmento.Dispose();
            hv_ROI3D_NullFrame.Dispose();
            hv_ROI3D_rotate.Dispose();
            hv_Exception.Dispose();
            hv_EstadoFx.Dispose();
            hv_Estado.Dispose();
            hv_Pose_Segmentos.Dispose();
            hv_Vector_Entidades_Segmento.Dispose();
            hv_Estado_Funcion.Dispose();
            hv_Estado_FuncionSub.Dispose();
            hv_Pituto.Dispose();
            hv_Sampling.Dispose();
            hv_MyPose.Dispose();
            hv_Procesando.Dispose();
            hv_Resultado.Dispose();
            hvec_Vector_Existencia_Core_New.Dispose();

            return;
          }
          //# ### Envio data de estado ########################
          if ((int)(hv_Estado_Fx_COPY_INP_TMP) != 0)
          {
            hv_Estado.Dispose();
            hv_Estado = 13;
            hv_Estado_SubProceso.Dispose();
            hv_Estado_SubProceso = new HTuple(hv_Estado_Fx_COPY_INP_TMP);
            Send_Data_Info("BLOQUE 3 FINALIZADO", hv_SerialHandle);

            //***************************************
            //Descuento 1 el stock ingresado en BD
            //Set_MinusCores (SerialHandle, FXcheck)
            //***************************************

          }
          else
          {
            hv_Procesando.Dispose();
            hv_Procesando = 1;
            hv_Resultado.Dispose();
            hv_Resultado = 2;
            Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
            Send_Data_Info("BLOQUE 3 FINALIZADO con ### ERRORES ####", hv_SerialHandle);
          }
        }
        else
        {
          hv_Procesando.Dispose();
          hv_Procesando = 1;
          hv_Resultado.Dispose();
          hv_Resultado = 2;
          //Send_Data_Proceso (SerialHandle, Resultado, Procesando)
          Send_Data_Info("BLOQUE 3 FINALIZADO con ### ERRORES ####", hv_SerialHandle);
        }
        //Borrar 3D
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.ClearObjectModel3d(((hv_ROI3D_rotate.TupleConcat(hv_ROI3D_NullFrame))).TupleConcat(
            hv_Escena3D_RAW_COPY_INP_TMP));
        }
        //
        //# ################################################# 
        //
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_EstadoFx.Dispose();
        Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx);


        hv_Escena3D_RAW_COPY_INP_TMP.Dispose();
        hv_Estado_Fx_COPY_INP_TMP.Dispose();
        hv_Parametros_Visualizacion.Dispose();
        hv_Valores_Visualizacion.Dispose();
        hv_Vector_Segmento.Dispose();
        hv_ROI3D_NullFrame.Dispose();
        hv_ROI3D_rotate.Dispose();
        hv_Exception.Dispose();
        hv_EstadoFx.Dispose();
        hv_Estado.Dispose();
        hv_Pose_Segmentos.Dispose();
        hv_Vector_Entidades_Segmento.Dispose();
        hv_Estado_Funcion.Dispose();
        hv_Estado_FuncionSub.Dispose();
        hv_Pituto.Dispose();
        hv_Sampling.Dispose();
        hv_MyPose.Dispose();
        hv_Procesando.Dispose();
        hv_Resultado.Dispose();
        hvec_Vector_Existencia_Core_New.Dispose();

        return;
      }
      //
      //****************************************


      hv_Escena3D_RAW_COPY_INP_TMP.Dispose();
      hv_Estado_Fx_COPY_INP_TMP.Dispose();
      hv_Parametros_Visualizacion.Dispose();
      hv_Valores_Visualizacion.Dispose();
      hv_Vector_Segmento.Dispose();
      hv_ROI3D_NullFrame.Dispose();
      hv_ROI3D_rotate.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();
      hv_Estado.Dispose();
      hv_Pose_Segmentos.Dispose();
      hv_Vector_Entidades_Segmento.Dispose();
      hv_Estado_Funcion.Dispose();
      hv_Estado_FuncionSub.Dispose();
      hv_Pituto.Dispose();
      hv_Sampling.Dispose();
      hv_MyPose.Dispose();
      hv_Procesando.Dispose();
      hv_Resultado.Dispose();
      hvec_Vector_Existencia_Core_New.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Escena3D_RAW_COPY_INP_TMP.Dispose();
      hv_Estado_Fx_COPY_INP_TMP.Dispose();
      hv_Parametros_Visualizacion.Dispose();
      hv_Valores_Visualizacion.Dispose();
      hv_Vector_Segmento.Dispose();
      hv_ROI3D_NullFrame.Dispose();
      hv_ROI3D_rotate.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();
      hv_Estado.Dispose();
      hv_Pose_Segmentos.Dispose();
      hv_Vector_Entidades_Segmento.Dispose();
      hv_Estado_Funcion.Dispose();
      hv_Estado_FuncionSub.Dispose();
      hv_Pituto.Dispose();
      hv_Sampling.Dispose();
      hv_MyPose.Dispose();
      hv_Procesando.Dispose();
      hv_Resultado.Dispose();
      hvec_Vector_Existencia_Core_New.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Take_Core_In_Pallet_Segmento0_COPY_1 (HObject ho_Z, HObject ho_X, HObject ho_Y, 
      HTuple hv_Escena3D_RAW, HTuple hv_N_Pallet_to_Scan, HTuple hv_Path_SFM_Segmentos, 
      HTuple hv_Path_3D_Segmentos, HTuple hv_Vector_ID_Core_by_Segment_Pallet_Tofind, 
      HTuple hv_Path_CORE_ID, HTuple hv_SerialHandle, HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Vector_Estado_Fx, 
      HTuple hv_Visualizar3D, HTuple hv_SegmentoPallet, HTuple hv_Pose_Esquina, HTuple hv_PitutoExist, 
      HTuple hv_ObjectModel3D_Core_Pallet, HTuple hv_SFM_Core_Pallet, HTuple hv_Modelo3D_Select, 
      HTuple hv_WindowHandle, out HTuple hv_Estado_SubProceso, out HTuple hv_RepetirFoto)
  {




    // Local iconic variables 

    // Local control variables 

    HTuple hv_Parametros_Visualizacion = new HTuple();
    HTuple hv_Valores_Visualizacion = new HTuple(), hv_Vector_Segmento = new HTuple();
    HTuple hv_ROI3D_NullFrame = new HTuple(), hv_ROI3D_rotate = new HTuple();
    HTuple hv_Exception = new HTuple(), hv_EstadoFx = new HTuple();
    HTuple hv_Estado = new HTuple(), hv_Pose_Segmentos = new HTuple();
    HTuple hv_Vector_Entidades_Segmento = new HTuple(), hv_Estado_Funcion = new HTuple();
    HTuple hv_Estado_FuncionSub = new HTuple(), hv_Pituto = new HTuple();
    HTuple hv_Sampling = new HTuple(), hv_Estado_Fx = new HTuple();
    HTuple hv_MyPose = new HTuple(), hv_Procesando = new HTuple();
    HTuple hv_Resultado = new HTuple();

    HTupleVector hvec_Vector_Existencia_Core_New = new HTupleVector(2);
    HTuple   hv_Escena3D_RAW_COPY_INP_TMP = new HTuple(hv_Escena3D_RAW);

    // Initialize local and output iconic variables 
    hv_Estado_SubProceso = new HTuple();
    hv_RepetirFoto = new HTuple();
    try
    {
      hv_Parametros_Visualizacion.Dispose();
      hv_Parametros_Visualizacion = new HTuple();
      hv_Parametros_Visualizacion[0] = "colored";
      hv_Parametros_Visualizacion[1] = "disp_pose";
      hv_Parametros_Visualizacion[2] = "point_size";
      hv_Valores_Visualizacion.Dispose();
      hv_Valores_Visualizacion = new HTuple();
      hv_Valores_Visualizacion[0] = 12;
      hv_Valores_Visualizacion[1] = "true";
      hv_Valores_Visualizacion[2] = 1;


      //*****************************************
      //1.- Obtengo el ROI3D del PALLET
      //*****************************************
      hv_Vector_Segmento.Dispose();hv_ROI3D_NullFrame.Dispose();hv_ROI3D_rotate.Dispose();hv_Exception.Dispose();hv_EstadoFx.Dispose();hv_Estado.Dispose();hv_Pose_Segmentos.Dispose();
      Get_Segmento_COPY_1(hv_SerialHandle, hvec_Vector_Estado_Fx, hv_Pose_Esquina, 
          hv_Escena3D_RAW_COPY_INP_TMP, hv_Parametros_Visualizacion, hv_Valores_Visualizacion, 
          hv_Visualizar3D, hv_WindowHandle, out hv_Vector_Segmento, out hv_ROI3D_NullFrame, 
          out hv_ROI3D_rotate, out hv_Exception, out hv_EstadoFx, out hv_Estado, 
          out hv_Pose_Segmentos);

      //# ###################################################################
      //# ###################################################################
      //# ################ BUSQUEDA DE CORES EN EL PALLET ###################
      //# ###################################################################
      //# ###################################################################
      //3.- Encuentro el orden y los segementos en que estan distribuidos los cores en el applet

      hv_Vector_Entidades_Segmento.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Vector_Entidades_Segmento = (hv_Vector_ID_Core_by_Segment_Pallet_Tofind+";")+hv_SegmentoPallet;
      }

      try
      {

        //********************************************************
        //ROI 3D sectorizado de cada elemento
        //Busco de manera sectorizada cara core en el pallet
        //********************************************************
        //Estructura de vector
        //# ###########################
        //# ## CORE ## Existencia #####
        //# ###########################

        //*****************************************************************************
        //******* Proceso el entorno 3D para eliminar ruido  **************************
        //*****************************************************************************
        hv_Estado_Funcion.Dispose();hv_Escena3D_RAW_COPY_INP_TMP.Dispose();hv_Estado_FuncionSub.Dispose();
        Sub_Process_ImageCore(ho_Z, ho_X, ho_Y, hv_SerialHandle, out hv_Estado_Funcion, 
            out hv_Escena3D_RAW_COPY_INP_TMP, out hv_Estado_FuncionSub);
        if ((int)(hv_Estado_FuncionSub) != 0)
        {



          //************************
          //REVISAR ORIENTACION
          //************************
          if ((int)(new HTuple(hv_PitutoExist.TupleEqual("Yes"))) != 0)
          {
            hv_Pituto.Dispose();
            hv_Pituto = 1;
          }

          hv_Pituto.Dispose();
          hv_Pituto = 1;


          //**********************************************

          //smooth_object_model_3d (Escena3D_RAW, 'mls', 'mls_kNN', 50, Escena3D_RAW)
          //Visualizar_3D ([Escena3D_RAW], Parametros_Visualizacion, Valores_Visualizacion, Visualizar3D, [], [], ['Modelo'], WindowHandle, PoseOut1)


          hv_Sampling.Dispose();
          hv_Sampling = 0.02;
          Send_Data_Info("### -> Iniciando Busqueda de Entidad ###", hv_SerialHandle);
          hvec_Vector_Existencia_Core_New.Dispose();hv_Estado_Fx.Dispose();hv_RepetirFoto.Dispose();hv_MyPose.Dispose();
          Find_Sector_Core_Bloque3(ho_Z, hv_Vector_ID_Core_by_Segment_Pallet_Tofind, 
              hv_Vector_Entidades_Segmento, hv_Path_CORE_ID, hv_Path_3D_Segmentos, 
              hv_Path_SFM_Segmentos, hv_ROI3D_rotate, hv_Parametros_Visualizacion, 
              hv_Valores_Visualizacion, hv_Visualizar3D, hv_Vector_Segmento, hv_Escena3D_RAW_COPY_INP_TMP, 
              hv_Sampling, hv_SerialHandle, hvec_Vector_Estado_Fx, hv_Pituto, hv_ObjectModel3D_Core_Pallet, 
              hv_SFM_Core_Pallet, hv_Modelo3D_Select, hv_WindowHandle, out hvec_Vector_Existencia_Core_New, 
              out hv_Estado_Fx, out hv_RepetirFoto, out hv_MyPose);

          //****************************
          //return ()
          //***************************



          if ((int)(hv_RepetirFoto) != 0)
          {
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            HOperatorSet.ClearObjectModel3d(((hv_ROI3D_rotate.TupleConcat(hv_ROI3D_NullFrame))).TupleConcat(
                hv_Escena3D_RAW_COPY_INP_TMP));
            }

            hv_Escena3D_RAW_COPY_INP_TMP.Dispose();
            hv_Parametros_Visualizacion.Dispose();
            hv_Valores_Visualizacion.Dispose();
            hv_Vector_Segmento.Dispose();
            hv_ROI3D_NullFrame.Dispose();
            hv_ROI3D_rotate.Dispose();
            hv_Exception.Dispose();
            hv_EstadoFx.Dispose();
            hv_Estado.Dispose();
            hv_Pose_Segmentos.Dispose();
            hv_Vector_Entidades_Segmento.Dispose();
            hv_Estado_Funcion.Dispose();
            hv_Estado_FuncionSub.Dispose();
            hv_Pituto.Dispose();
            hv_Sampling.Dispose();
            hv_Estado_Fx.Dispose();
            hv_MyPose.Dispose();
            hv_Procesando.Dispose();
            hv_Resultado.Dispose();
            hvec_Vector_Existencia_Core_New.Dispose();

            return;
          }
          //# ### Envio data de estado ########################
          if ((int)(hv_Estado_Fx) != 0)
          {
            hv_Estado.Dispose();
            hv_Estado = 13;

            Send_Data_Info("BLOQUE 3 FINALIZADO", hv_SerialHandle);

            //***************************************
            //Descuento 1 el stock ingresado en BD
            //Set_MinusCores (SerialHandle, FXcheck)
            //***************************************

          }
          else
          {
            hv_Procesando.Dispose();
            hv_Procesando = 0;
            hv_Resultado.Dispose();
            hv_Resultado = 2;
            Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
            Send_Data_Info("BLOQUE 3 FINALIZADO con ### ERRORES ####", hv_SerialHandle);
          }
        }
        else
        {
          hv_Procesando.Dispose();
          hv_Procesando = 0;
          hv_Resultado.Dispose();
          hv_Resultado = 2;
          //Send_Data_Proceso (SerialHandle, Resultado, Procesando)
          Send_Data_Info("BLOQUE 3 FINALIZADO con ### ERRORES ####", hv_SerialHandle);
        }
        //Borrar 3D
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.ClearObjectModel3d(((hv_ROI3D_rotate.TupleConcat(hv_ROI3D_NullFrame))).TupleConcat(
            hv_Escena3D_RAW_COPY_INP_TMP));
        }

        //# ################################################# 

      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_EstadoFx.Dispose();
        Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx);


        hv_Escena3D_RAW_COPY_INP_TMP.Dispose();
        hv_Parametros_Visualizacion.Dispose();
        hv_Valores_Visualizacion.Dispose();
        hv_Vector_Segmento.Dispose();
        hv_ROI3D_NullFrame.Dispose();
        hv_ROI3D_rotate.Dispose();
        hv_Exception.Dispose();
        hv_EstadoFx.Dispose();
        hv_Estado.Dispose();
        hv_Pose_Segmentos.Dispose();
        hv_Vector_Entidades_Segmento.Dispose();
        hv_Estado_Funcion.Dispose();
        hv_Estado_FuncionSub.Dispose();
        hv_Pituto.Dispose();
        hv_Sampling.Dispose();
        hv_Estado_Fx.Dispose();
        hv_MyPose.Dispose();
        hv_Procesando.Dispose();
        hv_Resultado.Dispose();
        hvec_Vector_Existencia_Core_New.Dispose();

        return;
      }

      //****************************************


      hv_Escena3D_RAW_COPY_INP_TMP.Dispose();
      hv_Parametros_Visualizacion.Dispose();
      hv_Valores_Visualizacion.Dispose();
      hv_Vector_Segmento.Dispose();
      hv_ROI3D_NullFrame.Dispose();
      hv_ROI3D_rotate.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();
      hv_Estado.Dispose();
      hv_Pose_Segmentos.Dispose();
      hv_Vector_Entidades_Segmento.Dispose();
      hv_Estado_Funcion.Dispose();
      hv_Estado_FuncionSub.Dispose();
      hv_Pituto.Dispose();
      hv_Sampling.Dispose();
      hv_Estado_Fx.Dispose();
      hv_MyPose.Dispose();
      hv_Procesando.Dispose();
      hv_Resultado.Dispose();
      hvec_Vector_Existencia_Core_New.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Escena3D_RAW_COPY_INP_TMP.Dispose();
      hv_Parametros_Visualizacion.Dispose();
      hv_Valores_Visualizacion.Dispose();
      hv_Vector_Segmento.Dispose();
      hv_ROI3D_NullFrame.Dispose();
      hv_ROI3D_rotate.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();
      hv_Estado.Dispose();
      hv_Pose_Segmentos.Dispose();
      hv_Vector_Entidades_Segmento.Dispose();
      hv_Estado_Funcion.Dispose();
      hv_Estado_FuncionSub.Dispose();
      hv_Pituto.Dispose();
      hv_Sampling.Dispose();
      hv_Estado_Fx.Dispose();
      hv_MyPose.Dispose();
      hv_Procesando.Dispose();
      hv_Resultado.Dispose();
      hvec_Vector_Existencia_Core_New.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Take_Sleeve_in_Pallet (HObject ho_Z, HObject ho_X, HObject ho_Y, HTuple hv_ObjectModel3D_Core_Pallet, 
      HTuple hv_Escena3D_RAW, HTuple hv_Parametros_Visualizacion, HTuple hv_Valores_Visualizacion, 
      HTuple hv_SerialHandle, out HTuple hv_Estado_Funcion)
  {




    // Stack for temporary objects 
    HObject[] OTemp = new HObject[20];

    // Local iconic variables 

    HObject ho_RegionSleeve=null, ho_SelectedRegions=null;
    HObject ho_RegionFillUp=null, ho_RegionComplement=null;
    HObject ho_ConnectedRegions1=null, ho_SelectedRegions1=null;
    HObject ho_SelectedRegions2=null, ho_Zred=null, ho_Yred=null;
    HObject ho_Xred=null;

    // Local control variables 

    HTuple hv_DitsiObjMax = new HTuple(), hv_WindowHandle = new HTuple();
    HTuple hv_NumConnected = new HTuple(), hv_NumHoles = new HTuple();
    HTuple hv_NumConnectedComplement = new HTuple(), hv_NumHolesComplement = new HTuple();
    HTuple hv_Nelementos = new HTuple(), hv_Row = new HTuple();
    HTuple hv_Column = new HTuple(), hv_Procesando = new HTuple();
    HTuple hv_Resultado = new HTuple(), hv_ObjectModel3D = new HTuple();
    HTuple hv_SmoothObjectModel3D = new HTuple(), hv_BoxSlevee = new HTuple();
    HTuple hv_Centro = new HTuple(), hv_Escena3D_RAWOut = new HTuple();
    HTuple hv_CentroCortado = new HTuple(), hv_Sleeve3DBox = new HTuple();
    HTuple hv_Debug_View = new HTuple(), hv_ZMinBase = new HTuple();
    HTuple hv_AltoNominal = new HTuple(), hv_ZSleeve = new HTuple();
    HTuple hv_Delta_X = new HTuple(), hv_Delta_Y = new HTuple();
    HTuple hv_Delta_Z = new HTuple(), hv_PosX = new HTuple();
    HTuple hv_PosY = new HTuple(), hv_PosZ = new HTuple();
    HTuple hv_PosicionSleeve = new HTuple(), hv_Estado = new HTuple();
    HTuple hv_Exception = new HTuple(), hv_EstadoFx = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_RegionSleeve);
    HOperatorSet.GenEmptyObj(out ho_SelectedRegions);
    HOperatorSet.GenEmptyObj(out ho_RegionFillUp);
    HOperatorSet.GenEmptyObj(out ho_RegionComplement);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions1);
    HOperatorSet.GenEmptyObj(out ho_SelectedRegions1);
    HOperatorSet.GenEmptyObj(out ho_SelectedRegions2);
    HOperatorSet.GenEmptyObj(out ho_Zred);
    HOperatorSet.GenEmptyObj(out ho_Yred);
    HOperatorSet.GenEmptyObj(out ho_Xred);
    hv_Estado_Funcion = new HTuple();
    try
    {
      try
      {



        //Segmento por histograma
        hv_DitsiObjMax.Dispose();
        hv_DitsiObjMax = 2510.0;
        ho_RegionSleeve.Dispose();hv_Estado_Funcion.Dispose();
        Segmentar_Sleeve(ho_Z, ho_X, ho_Y, ho_Z, out ho_RegionSleeve, hv_DitsiObjMax, 
            out hv_Estado_Funcion);

        {
        HObject ExpTmpOutVar_0;
        HOperatorSet.DilationCircle(ho_RegionSleeve, out ExpTmpOutVar_0, 3.5);
        ho_RegionSleeve.Dispose();
        ho_RegionSleeve = ExpTmpOutVar_0;
        }

        //dev_get_window(...);
        //Elimino el ruido de regiones pequeñas
        ho_SelectedRegions.Dispose();
        HOperatorSet.Connection(ho_RegionSleeve, out ho_SelectedRegions);
        ho_RegionFillUp.Dispose();
        HOperatorSet.FillUp(ho_SelectedRegions, out ho_RegionFillUp);
        //busco hoyos
        hv_NumConnected.Dispose();hv_NumHoles.Dispose();
        HOperatorSet.ConnectAndHoles(ho_SelectedRegions, out hv_NumConnected, out hv_NumHoles);
        ho_RegionComplement.Dispose();
        HOperatorSet.Complement(ho_RegionSleeve, out ho_RegionComplement);
        hv_NumConnectedComplement.Dispose();hv_NumHolesComplement.Dispose();
        HOperatorSet.ConnectAndHoles(ho_RegionComplement, out hv_NumConnectedComplement, 
            out hv_NumHolesComplement);

        ho_ConnectedRegions1.Dispose();
        HOperatorSet.Connection(ho_RegionComplement, out ho_ConnectedRegions1);
        //Separo solo por circularidad y area
        ho_SelectedRegions1.Dispose();
        HOperatorSet.SelectShape(ho_ConnectedRegions1, out ho_SelectedRegions1, (
            (new HTuple("circularity")).TupleConcat("area")).TupleConcat("struct_factor"), 
            "and", ((new HTuple(0.61)).TupleConcat(5e3)).TupleConcat(0), ((new HTuple(0.99)).TupleConcat(
            200e3)).TupleConcat(0.3));

        hv_Nelementos.Dispose();hv_Row.Dispose();hv_Column.Dispose();
        HOperatorSet.AreaCenter(ho_SelectedRegions1, out hv_Nelementos, out hv_Row, 
            out hv_Column);

        HOperatorSet.DispObj(ho_SelectedRegions1, hv_ExpDefaultWinHandle);



        if ((int)(new HTuple((new HTuple(hv_Nelementos.TupleLength())).TupleLess(
            1))) != 0)
        {
          HOperatorSet.ClearWindow(hv_ExpDefaultWinHandle);

          HOperatorSet.DispText(hv_ExpDefaultWinHandle, " #### Manga No Enontrada #### ", 
              "window", 10, 10, "black", new HTuple(), new HTuple());
          hv_Procesando.Dispose();
          hv_Procesando = 0;
          hv_Resultado.Dispose();
          hv_Resultado = 2;
          Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
          Send_Data_Info("BLOQUE 3 FINALIZADO con ### ERRORES ####", hv_SerialHandle);

          hv_Estado_Funcion.Dispose();
          hv_Estado_Funcion = 0;
          ho_RegionSleeve.Dispose();
          ho_SelectedRegions.Dispose();
          ho_RegionFillUp.Dispose();
          ho_RegionComplement.Dispose();
          ho_ConnectedRegions1.Dispose();
          ho_SelectedRegions1.Dispose();
          ho_SelectedRegions2.Dispose();
          ho_Zred.Dispose();
          ho_Yred.Dispose();
          ho_Xred.Dispose();

          hv_DitsiObjMax.Dispose();
          hv_WindowHandle.Dispose();
          hv_NumConnected.Dispose();
          hv_NumHoles.Dispose();
          hv_NumConnectedComplement.Dispose();
          hv_NumHolesComplement.Dispose();
          hv_Nelementos.Dispose();
          hv_Row.Dispose();
          hv_Column.Dispose();
          hv_Procesando.Dispose();
          hv_Resultado.Dispose();
          hv_ObjectModel3D.Dispose();
          hv_SmoothObjectModel3D.Dispose();
          hv_BoxSlevee.Dispose();
          hv_Centro.Dispose();
          hv_Escena3D_RAWOut.Dispose();
          hv_CentroCortado.Dispose();
          hv_Sleeve3DBox.Dispose();
          hv_Debug_View.Dispose();
          hv_ZMinBase.Dispose();
          hv_AltoNominal.Dispose();
          hv_ZSleeve.Dispose();
          hv_Delta_X.Dispose();
          hv_Delta_Y.Dispose();
          hv_Delta_Z.Dispose();
          hv_PosX.Dispose();
          hv_PosY.Dispose();
          hv_PosZ.Dispose();
          hv_PosicionSleeve.Dispose();
          hv_Estado.Dispose();
          hv_Exception.Dispose();
          hv_EstadoFx.Dispose();

          return;
        }


        //Busco el area mas gande ( se supone que todas son iguales)
        ho_SelectedRegions2.Dispose();
        HOperatorSet.SelectShapeStd(ho_SelectedRegions1, out ho_SelectedRegions2, 
            "max_area", 90);
        {
        HObject ExpTmpOutVar_0;
        HOperatorSet.DilationCircle(ho_SelectedRegions2, out ExpTmpOutVar_0, 10.5);
        ho_SelectedRegions2.Dispose();
        ho_SelectedRegions2 = ExpTmpOutVar_0;
        }




        //erosion_circle (SelectedRegions2, SelectedRegions2, 15.5)
        ho_Zred.Dispose();
        HOperatorSet.ReduceDomain(ho_Z, ho_SelectedRegions2, out ho_Zred);
        ho_Yred.Dispose();
        HOperatorSet.ReduceDomain(ho_Y, ho_SelectedRegions2, out ho_Yred);
        ho_Xred.Dispose();
        HOperatorSet.ReduceDomain(ho_X, ho_SelectedRegions2, out ho_Xred);

        hv_ObjectModel3D.Dispose();
        HOperatorSet.XyzToObjectModel3d(ho_Xred, ho_Yred, ho_Zred, out hv_ObjectModel3D);
        //NotZeroModel_3D_Sleeve (ObjectModel3D, g_AltutaVirtualCamEstereo, ObjectModel3D)
        //Visualizar_3D ([ ObjectModel3D], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], 1, [], [], [], WindowHandle, PoseOut1)


        hv_SmoothObjectModel3D.Dispose();
        HOperatorSet.SmoothObjectModel3d(hv_ObjectModel3D, "mls", "mls_kNN", 50, 
            out hv_SmoothObjectModel3D);
        //smooth_object_model_3d (SmoothObjectModel3D, 'mls', 'mls_kNN', 200, SmoothObjectModel3D)



        hv_BoxSlevee.Dispose();
        HOperatorSet.GetObjectModel3dParams(hv_SmoothObjectModel3D, "bounding_box1", 
            out hv_BoxSlevee);
        hv_Centro.Dispose();
        HOperatorSet.GetObjectModel3dParams(hv_SmoothObjectModel3D, "center", out hv_Centro);

        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Escena3D_RAWOut.Dispose();
        HOperatorSet.SelectPointsObjectModel3d(hv_SmoothObjectModel3D, "point_coord_z", 
            500, (hv_BoxSlevee.TupleSelect(2))+80, out hv_Escena3D_RAWOut);
        }
        hv_CentroCortado.Dispose();
        HOperatorSet.GetObjectModel3dParams(hv_Escena3D_RAWOut, "center", out hv_CentroCortado);


        //Visualizar_3D ([ Escena3D_RAWOut], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], 1, [], [], [], WindowHandle, PoseOut1)
        //*




        //Obtengo el modelo 3D de la manga y extarigo su altura.
        hv_Sleeve3DBox.Dispose();
        HOperatorSet.GetObjectModel3dParams(hv_ObjectModel3D_Core_Pallet, "bounding_box1", 
            out hv_Sleeve3DBox);

        hv_Debug_View.Dispose();
        hv_Debug_View = 0;
        //*   Visualizar_3D ([ ObjectModel3D_Core_Pallet], [Parametros_Visualizacion,'alpha'], [Valores_Visualizacion,0.5], 1, [], [], [], WindowHandle, PoseOut1)

        //**************************************************************************************
        hv_ZMinBase.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_ZMinBase = hv_BoxSlevee.TupleSelect(
            5);
        }

        hv_AltoNominal.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_AltoNominal = (hv_Sleeve3DBox.TupleSelect(
            5))-(hv_Sleeve3DBox.TupleSelect(2));
        }
        {
        HTuple ExpTmpOutVar_0;
        HOperatorSet.TupleAbs(hv_AltoNominal, out ExpTmpOutVar_0);
        hv_AltoNominal.Dispose();
        hv_AltoNominal = ExpTmpOutVar_0;
        }

        //desde la Base calculo la mirad de la manga.
        hv_ZSleeve.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_ZSleeve = hv_ZMinBase-(hv_AltoNominal*0.5);
        }

        hv_Delta_X.Dispose();
        hv_Delta_X = -10;
        hv_Delta_Y.Dispose();
        hv_Delta_Y = 0;
        hv_Delta_Z.Dispose();
        hv_Delta_Z = 0;

        hv_PosX.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_PosX = (hv_Centro.TupleSelect(
            0))+hv_Delta_X;
        }
        hv_PosY.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_PosY = hv_Centro.TupleSelect(
            1);
        }
        hv_PosZ.Dispose();
        hv_PosZ = new HTuple(hv_ZSleeve);

        hv_PosicionSleeve.Dispose();
        HOperatorSet.CreatePose(hv_PosX, hv_PosY, hv_PosZ, 0, 0, 0, "Rp+T", "gba", 
            "point", out hv_PosicionSleeve);
        //**********************************************
        //Delimitar falsos Positivos
        //**********************************************

        Send_Data_To_Robot(hv_PosicionSleeve, hv_SerialHandle);

        //***********************************************

        HOperatorSet.DispObj(ho_Z, hv_ExpDefaultWinHandle);
        HOperatorSet.DispObj(ho_SelectedRegions2, hv_ExpDefaultWinHandle);
        HOperatorSet.DispObj(ho_RegionSleeve, hv_ExpDefaultWinHandle);
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.ClearObjectModel3d(hv_ObjectModel3D.TupleConcat(hv_SmoothObjectModel3D));
        }

        hv_Estado.Dispose();
        hv_Estado = 13;
        hv_Procesando.Dispose();
        hv_Procesando = 0;
        hv_Resultado.Dispose();
        hv_Resultado = 1;
        Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
        Send_Data_Info("BLOQUE 3 FINALIZADO", hv_SerialHandle);



      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);

        hv_EstadoFx.Dispose();
        Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx);
      }

      ho_RegionSleeve.Dispose();
      ho_SelectedRegions.Dispose();
      ho_RegionFillUp.Dispose();
      ho_RegionComplement.Dispose();
      ho_ConnectedRegions1.Dispose();
      ho_SelectedRegions1.Dispose();
      ho_SelectedRegions2.Dispose();
      ho_Zred.Dispose();
      ho_Yred.Dispose();
      ho_Xred.Dispose();

      hv_DitsiObjMax.Dispose();
      hv_WindowHandle.Dispose();
      hv_NumConnected.Dispose();
      hv_NumHoles.Dispose();
      hv_NumConnectedComplement.Dispose();
      hv_NumHolesComplement.Dispose();
      hv_Nelementos.Dispose();
      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_Procesando.Dispose();
      hv_Resultado.Dispose();
      hv_ObjectModel3D.Dispose();
      hv_SmoothObjectModel3D.Dispose();
      hv_BoxSlevee.Dispose();
      hv_Centro.Dispose();
      hv_Escena3D_RAWOut.Dispose();
      hv_CentroCortado.Dispose();
      hv_Sleeve3DBox.Dispose();
      hv_Debug_View.Dispose();
      hv_ZMinBase.Dispose();
      hv_AltoNominal.Dispose();
      hv_ZSleeve.Dispose();
      hv_Delta_X.Dispose();
      hv_Delta_Y.Dispose();
      hv_Delta_Z.Dispose();
      hv_PosX.Dispose();
      hv_PosY.Dispose();
      hv_PosZ.Dispose();
      hv_PosicionSleeve.Dispose();
      hv_Estado.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_RegionSleeve.Dispose();
      ho_SelectedRegions.Dispose();
      ho_RegionFillUp.Dispose();
      ho_RegionComplement.Dispose();
      ho_ConnectedRegions1.Dispose();
      ho_SelectedRegions1.Dispose();
      ho_SelectedRegions2.Dispose();
      ho_Zred.Dispose();
      ho_Yred.Dispose();
      ho_Xred.Dispose();

      hv_DitsiObjMax.Dispose();
      hv_WindowHandle.Dispose();
      hv_NumConnected.Dispose();
      hv_NumHoles.Dispose();
      hv_NumConnectedComplement.Dispose();
      hv_NumHolesComplement.Dispose();
      hv_Nelementos.Dispose();
      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_Procesando.Dispose();
      hv_Resultado.Dispose();
      hv_ObjectModel3D.Dispose();
      hv_SmoothObjectModel3D.Dispose();
      hv_BoxSlevee.Dispose();
      hv_Centro.Dispose();
      hv_Escena3D_RAWOut.Dispose();
      hv_CentroCortado.Dispose();
      hv_Sleeve3DBox.Dispose();
      hv_Debug_View.Dispose();
      hv_ZMinBase.Dispose();
      hv_AltoNominal.Dispose();
      hv_ZSleeve.Dispose();
      hv_Delta_X.Dispose();
      hv_Delta_Y.Dispose();
      hv_Delta_Z.Dispose();
      hv_PosX.Dispose();
      hv_PosY.Dispose();
      hv_PosZ.Dispose();
      hv_PosicionSleeve.Dispose();
      hv_Estado.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Take_Sleeve_in_Pallet_Inteligence (HObject ho_Z, HObject ho_X, HObject ho_Y, 
      HTuple hv_ObjectModel3D_Core_Pallet, HTuple hv_Escena3D_RAW, HTuple hv_Parametros_Visualizacion, 
      HTuple hv_Valores_Visualizacion, HTuple hv_SerialHandle, HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Matrix_Sleeve_New, 
      HTuple hv_IndexLast, HTuple hv_Diametro, HTuple hv_g_CamInBasePose2, HTuple hv_g_AltutaVirtualCamEstereo, 
      HTuple hv_Diametro_Interno, out HTuple hv_Estado_Funcion, out HTupleVector/*{eTupleVector,Dim=2}*/ hvec_Matrix_Sleeve_New_Pos)
  {




    // Stack for temporary objects 
    HObject[] OTemp = new HObject[20];

    // Local iconic variables 

    HObject ho_ModelImage=null, ho_RegionSleeve=null;
    HObject ho_SelectedRegions=null, ho_Region=null, ho_RegionTrans=null;
    HObject ho_RegionErosion=null, ho_RegionDifference=null;
    HObject ho_RegionComplement=null, ho_ConnectedRegions1=null;
    HObject ho_SelectedRegions1=null, ho_MultiChannelImage=null;
    HObject ho_ObjectSelected=null, ho_SelectedRegions2=null;
    HObject ho_Zred=null, ho_Yred=null, ho_Xred=null;

    // Local copy input parameter variables 
    HObject ho_X_COPY_INP_TMP;
    ho_X_COPY_INP_TMP = new HObject(ho_X);
    HObject ho_Y_COPY_INP_TMP;
    ho_Y_COPY_INP_TMP = new HObject(ho_Y);
    HObject ho_Z_COPY_INP_TMP;
    ho_Z_COPY_INP_TMP = new HObject(ho_Z);



    // Local control variables 

    HTuple hv_DitsiObjMax = new HTuple(), hv_WindowHandle = new HTuple();
    HTuple hv_NumConnected = new HTuple(), hv_NumHoles = new HTuple();
    HTuple hv_NumConnectedComplement = new HTuple(), hv_NumHolesComplement = new HTuple();
    HTuple hv_Nelementos = new HTuple(), hv_Row = new HTuple();
    HTuple hv_Column = new HTuple(), hv_Procesando = new HTuple();
    HTuple hv_Resultado = new HTuple(), hv_VectorMangas = new HTuple();
    HTuple hv_Vector_Z = new HTuple(), hv_Index = new HTuple();
    HTuple hv_Value = new HTuple(), hv_PosX = new HTuple();
    HTuple hv_PosY = new HTuple(), hv_PosZ = new HTuple();
    HTuple hv_PosicionSleeve = new HTuple(), hv_Mensaje = new HTuple();
    HTuple hv_Umbral_Diff = new HTuple(), hv_largoVector = new HTuple();
    HTuple hv_i = new HTuple(), hv_j = new HTuple(), hv_Diff = new HTuple();
    HTuple hv_Diff_Abs = new HTuple(), hv_Exception = new HTuple();
    HTuple hv_EstadoFx = new HTuple();
    HTupleVector  hvec_Matrix_Sleeve_New_COPY_INP_TMP = new HTupleVector(hvec_Matrix_Sleeve_New);

    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ModelImage);
    HOperatorSet.GenEmptyObj(out ho_RegionSleeve);
    HOperatorSet.GenEmptyObj(out ho_SelectedRegions);
    HOperatorSet.GenEmptyObj(out ho_Region);
    HOperatorSet.GenEmptyObj(out ho_RegionTrans);
    HOperatorSet.GenEmptyObj(out ho_RegionErosion);
    HOperatorSet.GenEmptyObj(out ho_RegionDifference);
    HOperatorSet.GenEmptyObj(out ho_RegionComplement);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions1);
    HOperatorSet.GenEmptyObj(out ho_SelectedRegions1);
    HOperatorSet.GenEmptyObj(out ho_MultiChannelImage);
    HOperatorSet.GenEmptyObj(out ho_ObjectSelected);
    HOperatorSet.GenEmptyObj(out ho_SelectedRegions2);
    HOperatorSet.GenEmptyObj(out ho_Zred);
    HOperatorSet.GenEmptyObj(out ho_Yred);
    HOperatorSet.GenEmptyObj(out ho_Xred);
    hv_Estado_Funcion = new HTuple();
    hvec_Matrix_Sleeve_New_Pos = new HTupleVector(2);
    try
    {


      try
      {

        //read_image (ModelImage, 'D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 2/Img_9x6.3x10 ND sleeve_2019_10_4_11_49_13_709.hobj')

        //Adq_XYZ_Img (ModelImage, X, Y, Z)


        //Segmento por histograma
        hv_DitsiObjMax.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_DitsiObjMax = 2680.0+hv_g_AltutaVirtualCamEstereo;
        }
        ho_RegionSleeve.Dispose();hv_Estado_Funcion.Dispose();
        Segmentar_Sleeve(ho_Z_COPY_INP_TMP, ho_X_COPY_INP_TMP, ho_Y_COPY_INP_TMP, 
            ho_Z_COPY_INP_TMP, out ho_RegionSleeve, hv_DitsiObjMax, out hv_Estado_Funcion);

        {
        HObject ExpTmpOutVar_0;
        HOperatorSet.DilationCircle(ho_RegionSleeve, out ExpTmpOutVar_0, 1.5);
        ho_RegionSleeve.Dispose();
        ho_RegionSleeve = ExpTmpOutVar_0;
        }

        //dev_get_window(...);
        //Elimino el ruido de regiones pequeñas
        ho_SelectedRegions.Dispose();
        HOperatorSet.Connection(ho_RegionSleeve, out ho_SelectedRegions);
        {
        HObject ExpTmpOutVar_0;
        HOperatorSet.SelectShape(ho_SelectedRegions, out ExpTmpOutVar_0, "area", 
            "and", 500, 1e10);
        ho_SelectedRegions.Dispose();
        ho_SelectedRegions = ExpTmpOutVar_0;
        }

        {
        HObject ExpTmpOutVar_0;
        HOperatorSet.SortRegion(ho_SelectedRegions, out ExpTmpOutVar_0, "first_point", 
            "true", "row");
        ho_SelectedRegions.Dispose();
        ho_SelectedRegions = ExpTmpOutVar_0;
        }


        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        ho_Region.Dispose();
        HOperatorSet.Threshold(ho_Z_COPY_INP_TMP, out ho_Region, hv_g_AltutaVirtualCamEstereo+50, 
            3e3+hv_g_AltutaVirtualCamEstereo);
        }
        {
        HObject ExpTmpOutVar_0;
        HOperatorSet.Connection(ho_Region, out ExpTmpOutVar_0);
        ho_Region.Dispose();
        ho_Region = ExpTmpOutVar_0;
        }
        {
        HObject ExpTmpOutVar_0;
        HOperatorSet.SelectShapeStd(ho_Region, out ExpTmpOutVar_0, "max_area", 90);
        ho_Region.Dispose();
        ho_Region = ExpTmpOutVar_0;
        }



        {
        HObject ExpTmpOutVar_0;
        HOperatorSet.FillUp(ho_Region, out ExpTmpOutVar_0);
        ho_Region.Dispose();
        ho_Region = ExpTmpOutVar_0;
        }
        ho_RegionTrans.Dispose();
        HOperatorSet.ShapeTrans(ho_Region, out ho_RegionTrans, "rectangle1");

        ho_RegionErosion.Dispose();
        HOperatorSet.ErosionRectangle1(ho_RegionTrans, out ho_RegionErosion, 41, 
            41);
        ho_RegionDifference.Dispose();
        HOperatorSet.Difference(ho_RegionTrans, ho_RegionErosion, out ho_RegionDifference
            );


        {
        HObject ExpTmpOutVar_0;
        HOperatorSet.Union2(ho_RegionSleeve, ho_RegionDifference, out ExpTmpOutVar_0
            );
        ho_RegionSleeve.Dispose();
        ho_RegionSleeve = ExpTmpOutVar_0;
        }

        //busco hoyos
        hv_NumConnected.Dispose();hv_NumHoles.Dispose();
        HOperatorSet.ConnectAndHoles(ho_RegionSleeve, out hv_NumConnected, out hv_NumHoles);
        ho_RegionComplement.Dispose();
        HOperatorSet.Complement(ho_RegionSleeve, out ho_RegionComplement);
        hv_NumConnectedComplement.Dispose();hv_NumHolesComplement.Dispose();
        HOperatorSet.ConnectAndHoles(ho_RegionComplement, out hv_NumConnectedComplement, 
            out hv_NumHolesComplement);

        ho_ConnectedRegions1.Dispose();
        HOperatorSet.Connection(ho_RegionComplement, out ho_ConnectedRegions1);
        //Separo solo por circularidad y area
        ho_SelectedRegions1.Dispose();
        HOperatorSet.SelectShape(ho_ConnectedRegions1, out ho_SelectedRegions1, (
            (new HTuple("circularity")).TupleConcat("area")).TupleConcat("struct_factor"), 
            "and", ((new HTuple(0.2)).TupleConcat(1e3)).TupleConcat(0), ((new HTuple(0.99)).TupleConcat(
            200e3)).TupleConcat(0.9));



        {
        HObject ExpTmpOutVar_0;
        HOperatorSet.SortRegion(ho_SelectedRegions1, out ExpTmpOutVar_0, "first_point", 
            "true", "row");
        ho_SelectedRegions1.Dispose();
        ho_SelectedRegions1 = ExpTmpOutVar_0;
        }
        hv_Nelementos.Dispose();hv_Row.Dispose();hv_Column.Dispose();
        HOperatorSet.AreaCenter(ho_SelectedRegions1, out hv_Nelementos, out hv_Row, 
            out hv_Column);

        HOperatorSet.DispObj(ho_SelectedRegions1, hv_ExpDefaultWinHandle);

        if ((int)(new HTuple((new HTuple(hv_Nelementos.TupleLength())).TupleLess(
            1))) != 0)
        {
          HOperatorSet.ClearWindow(hv_ExpDefaultWinHandle);

          HOperatorSet.DispText(hv_ExpDefaultWinHandle, " #### Manga No Enontrada #### ", 
              "window", 10, 10, "black", new HTuple(), new HTuple());
          hv_Procesando.Dispose();
          hv_Procesando = 0;
          hv_Resultado.Dispose();
          hv_Resultado = 2;
          Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
          Send_Data_Info("BLOQUE 3 FINALIZADO con ### ERRORES ####", hv_SerialHandle);

          hv_Estado_Funcion.Dispose();
          hv_Estado_Funcion = 0;
          ho_X_COPY_INP_TMP.Dispose();
          ho_Y_COPY_INP_TMP.Dispose();
          ho_Z_COPY_INP_TMP.Dispose();
          ho_ModelImage.Dispose();
          ho_RegionSleeve.Dispose();
          ho_SelectedRegions.Dispose();
          ho_Region.Dispose();
          ho_RegionTrans.Dispose();
          ho_RegionErosion.Dispose();
          ho_RegionDifference.Dispose();
          ho_RegionComplement.Dispose();
          ho_ConnectedRegions1.Dispose();
          ho_SelectedRegions1.Dispose();
          ho_MultiChannelImage.Dispose();
          ho_ObjectSelected.Dispose();
          ho_SelectedRegions2.Dispose();
          ho_Zred.Dispose();
          ho_Yred.Dispose();
          ho_Xred.Dispose();

          hv_DitsiObjMax.Dispose();
          hv_WindowHandle.Dispose();
          hv_NumConnected.Dispose();
          hv_NumHoles.Dispose();
          hv_NumConnectedComplement.Dispose();
          hv_NumHolesComplement.Dispose();
          hv_Nelementos.Dispose();
          hv_Row.Dispose();
          hv_Column.Dispose();
          hv_Procesando.Dispose();
          hv_Resultado.Dispose();
          hv_VectorMangas.Dispose();
          hv_Vector_Z.Dispose();
          hv_Index.Dispose();
          hv_Value.Dispose();
          hv_PosX.Dispose();
          hv_PosY.Dispose();
          hv_PosZ.Dispose();
          hv_PosicionSleeve.Dispose();
          hv_Mensaje.Dispose();
          hv_Umbral_Diff.Dispose();
          hv_largoVector.Dispose();
          hv_i.Dispose();
          hv_j.Dispose();
          hv_Diff.Dispose();
          hv_Diff_Abs.Dispose();
          hv_Exception.Dispose();
          hv_EstadoFx.Dispose();

          return;
        }

        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_Row, hv_Column, 50, 0);

        ho_MultiChannelImage.Dispose();
        HOperatorSet.Compose3(ho_X_COPY_INP_TMP, ho_Y_COPY_INP_TMP, ho_Z_COPY_INP_TMP, 
            out ho_MultiChannelImage);

        hv_VectorMangas.Dispose();
        HOperatorSet.GetGrayval(ho_MultiChannelImage, hv_Row, hv_Column, out hv_VectorMangas);


        //*********************************
        //Alturas
        hv_Vector_Z.Dispose();
        hv_Vector_Z = new HTuple();
        //*********************************

        for (hv_Index=1; (int)hv_Index<=(int)(new HTuple(hv_Nelementos.TupleLength()
            )); hv_Index = (int)hv_Index + 1)
        {


          ho_ObjectSelected.Dispose();
          HOperatorSet.SelectObj(ho_SelectedRegions1, out ho_ObjectSelected, hv_Index);


          HOperatorSet.DispObj(ho_ObjectSelected, hv_ExpDefaultWinHandle);

          hv_Value.Dispose();
          HOperatorSet.RegionFeatures(ho_ObjectSelected, "ra", out hv_Value);

          //Dilatacion := Diametro*0.12
          //dilation_circle (ObjectSelected, ObjectSelected, Dilatacion)

          ho_SelectedRegions2.Dispose();ho_Zred.Dispose();ho_Yred.Dispose();ho_Xred.Dispose();hv_PosX.Dispose();hv_PosY.Dispose();hv_PosZ.Dispose();hv_PosicionSleeve.Dispose();
          Get_sleeve_Vector(ho_ObjectSelected, ho_Z_COPY_INP_TMP, ho_Y_COPY_INP_TMP, 
              ho_X_COPY_INP_TMP, out ho_SelectedRegions2, out ho_Zred, out ho_Yred, 
              out ho_Xred, hv_Parametros_Visualizacion, hv_Valores_Visualizacion, 
              hv_WindowHandle, hv_ObjectModel3D_Core_Pallet, hv_Diametro, hv_g_CamInBasePose2, 
              hv_SerialHandle, hv_g_AltutaVirtualCamEstereo, hv_Diametro_Interno, 
              out hv_PosX, out hv_PosY, out hv_PosZ, out hv_PosicionSleeve);

          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hvec_Matrix_Sleeve_New_COPY_INP_TMP[hv_IndexLast][hv_Index+2] = dh.Add(new HTupleVector((((hv_PosX+";")+hv_PosY)+";")+hv_PosZ));
          }

          hv_Mensaje.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Mensaje = (((((("Manga "+hv_Index)+" Capturada -> ")+hv_PosX)+"<->")+hv_PosY)+"<->")+hv_PosZ;
          }
          Send_Data_Info(hv_Mensaje, hv_SerialHandle);

          if (hv_Vector_Z == null)
            hv_Vector_Z = new HTuple();
          hv_Vector_Z[hv_Index-1] = hv_PosZ;

        }



        //**********************************************************
        //Proteccion de Altura
        //LA desviacion estandar de la altura de las mangas debe ser relativamente cercana
        //**********************************************************
        //Umbral de diferencia entre mangas
        hv_Umbral_Diff.Dispose();
        hv_Umbral_Diff = 10;

        hv_largoVector.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_largoVector = (new HTuple(hv_Vector_Z.TupleLength()
            ))-1;
        }
        HTuple end_val113 = hv_largoVector;
        HTuple step_val113 = 1;
        for (hv_i=0; hv_i.Continue(end_val113, step_val113); hv_i = hv_i.TupleAdd(step_val113))
        {

          HTuple end_val115 = hv_largoVector;
          HTuple step_val115 = 1;
          for (hv_j=0; hv_j.Continue(end_val115, step_val115); hv_j = hv_j.TupleAdd(step_val115))
          {
            hv_Diff.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            hv_Diff = (hv_Vector_Z.TupleSelect(
                hv_i))-(hv_Vector_Z.TupleSelect(hv_j));
            }
            hv_Diff_Abs.Dispose();
            HOperatorSet.TupleAbs(hv_Diff, out hv_Diff_Abs);

            if ((int)(new HTuple(hv_Diff_Abs.TupleGreater(hv_Umbral_Diff))) != 0)
            {
              hv_Mensaje.Dispose();
              hv_Mensaje = "#####################################################################";
              Send_Data_Info(hv_Mensaje, hv_SerialHandle);
              hv_Mensaje.Dispose();
              hv_Mensaje = "### ERROR ### Altura en Z de las bases de las mangas no son coherentes. Se debe RE-ESCANEAR";
              Send_Data_Info(hv_Mensaje, hv_SerialHandle);
              hv_Mensaje.Dispose();
              hv_Mensaje = "#####################################################################";
              Send_Data_Info(hv_Mensaje, hv_SerialHandle);

              hv_Estado_Funcion.Dispose();
              hv_Estado_Funcion = 0;
              ho_X_COPY_INP_TMP.Dispose();
              ho_Y_COPY_INP_TMP.Dispose();
              ho_Z_COPY_INP_TMP.Dispose();
              ho_ModelImage.Dispose();
              ho_RegionSleeve.Dispose();
              ho_SelectedRegions.Dispose();
              ho_Region.Dispose();
              ho_RegionTrans.Dispose();
              ho_RegionErosion.Dispose();
              ho_RegionDifference.Dispose();
              ho_RegionComplement.Dispose();
              ho_ConnectedRegions1.Dispose();
              ho_SelectedRegions1.Dispose();
              ho_MultiChannelImage.Dispose();
              ho_ObjectSelected.Dispose();
              ho_SelectedRegions2.Dispose();
              ho_Zred.Dispose();
              ho_Yred.Dispose();
              ho_Xred.Dispose();

              hv_DitsiObjMax.Dispose();
              hv_WindowHandle.Dispose();
              hv_NumConnected.Dispose();
              hv_NumHoles.Dispose();
              hv_NumConnectedComplement.Dispose();
              hv_NumHolesComplement.Dispose();
              hv_Nelementos.Dispose();
              hv_Row.Dispose();
              hv_Column.Dispose();
              hv_Procesando.Dispose();
              hv_Resultado.Dispose();
              hv_VectorMangas.Dispose();
              hv_Vector_Z.Dispose();
              hv_Index.Dispose();
              hv_Value.Dispose();
              hv_PosX.Dispose();
              hv_PosY.Dispose();
              hv_PosZ.Dispose();
              hv_PosicionSleeve.Dispose();
              hv_Mensaje.Dispose();
              hv_Umbral_Diff.Dispose();
              hv_largoVector.Dispose();
              hv_i.Dispose();
              hv_j.Dispose();
              hv_Diff.Dispose();
              hv_Diff_Abs.Dispose();
              hv_Exception.Dispose();
              hv_EstadoFx.Dispose();

              return;

            }

          }


        }


        hv_Mensaje.Dispose();
        hv_Mensaje = "#####################################################################";
        Send_Data_Info(hv_Mensaje, hv_SerialHandle);
        hv_Mensaje.Dispose();
        hv_Mensaje = "Altura en Z de las bases de las mangas son coherentes.";
        Send_Data_Info(hv_Mensaje, hv_SerialHandle);
        hv_Mensaje.Dispose();
        hv_Mensaje = "#####################################################################";
        Send_Data_Info(hv_Mensaje, hv_SerialHandle);



        hvec_Matrix_Sleeve_New_Pos.Dispose();
        hvec_Matrix_Sleeve_New_Pos = new HTupleVector(hvec_Matrix_Sleeve_New_COPY_INP_TMP);


        hv_Estado_Funcion.Dispose();
        hv_Estado_Funcion = 1;


      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);

        hv_EstadoFx.Dispose();
        Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx);

        hv_Estado_Funcion.Dispose();
        hv_Estado_Funcion = 0;
      }

      ho_X_COPY_INP_TMP.Dispose();
      ho_Y_COPY_INP_TMP.Dispose();
      ho_Z_COPY_INP_TMP.Dispose();
      ho_ModelImage.Dispose();
      ho_RegionSleeve.Dispose();
      ho_SelectedRegions.Dispose();
      ho_Region.Dispose();
      ho_RegionTrans.Dispose();
      ho_RegionErosion.Dispose();
      ho_RegionDifference.Dispose();
      ho_RegionComplement.Dispose();
      ho_ConnectedRegions1.Dispose();
      ho_SelectedRegions1.Dispose();
      ho_MultiChannelImage.Dispose();
      ho_ObjectSelected.Dispose();
      ho_SelectedRegions2.Dispose();
      ho_Zred.Dispose();
      ho_Yred.Dispose();
      ho_Xred.Dispose();

      hv_DitsiObjMax.Dispose();
      hv_WindowHandle.Dispose();
      hv_NumConnected.Dispose();
      hv_NumHoles.Dispose();
      hv_NumConnectedComplement.Dispose();
      hv_NumHolesComplement.Dispose();
      hv_Nelementos.Dispose();
      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_Procesando.Dispose();
      hv_Resultado.Dispose();
      hv_VectorMangas.Dispose();
      hv_Vector_Z.Dispose();
      hv_Index.Dispose();
      hv_Value.Dispose();
      hv_PosX.Dispose();
      hv_PosY.Dispose();
      hv_PosZ.Dispose();
      hv_PosicionSleeve.Dispose();
      hv_Mensaje.Dispose();
      hv_Umbral_Diff.Dispose();
      hv_largoVector.Dispose();
      hv_i.Dispose();
      hv_j.Dispose();
      hv_Diff.Dispose();
      hv_Diff_Abs.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      return;








      //**********************************************************************************








      try
      {


        ho_ModelImage.Dispose();
        HOperatorSet.ReadObject(out ho_ModelImage, "D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 2/Img_9x6.3x10 ND sleeve_2019_8_10_19_16_12_144.hobj");
        ho_ModelImage.Dispose();
        HOperatorSet.ReadObject(out ho_ModelImage, "D:/AI/Vision Artificial/4.-MAGOTTEAUX/20-Imagenes Produccion/Bloque 2/Img_9x6.3x10 ND sleeve_2019_8_10_19_34_26_108.hobj");
        ho_X_COPY_INP_TMP.Dispose();ho_Y_COPY_INP_TMP.Dispose();ho_Z_COPY_INP_TMP.Dispose();
        Adq_XYZ_Img(ho_ModelImage, out ho_X_COPY_INP_TMP, out ho_Y_COPY_INP_TMP, 
            out ho_Z_COPY_INP_TMP);

        //Segmento por histograma
        hv_DitsiObjMax.Dispose();
        hv_DitsiObjMax = 2624.0;
        ho_RegionSleeve.Dispose();hv_Estado_Funcion.Dispose();
        Segmentar_Sleeve(ho_Z_COPY_INP_TMP, ho_X_COPY_INP_TMP, ho_Y_COPY_INP_TMP, 
            ho_Z_COPY_INP_TMP, out ho_RegionSleeve, hv_DitsiObjMax, out hv_Estado_Funcion);

        {
        HObject ExpTmpOutVar_0;
        HOperatorSet.DilationCircle(ho_RegionSleeve, out ExpTmpOutVar_0, 3.5);
        ho_RegionSleeve.Dispose();
        ho_RegionSleeve = ExpTmpOutVar_0;
        }

        //dev_get_window(...);
        //Elimino el ruido de regiones pequeñas
        ho_SelectedRegions.Dispose();
        HOperatorSet.Connection(ho_RegionSleeve, out ho_SelectedRegions);
        {
        HObject ExpTmpOutVar_0;
        HOperatorSet.SortRegion(ho_SelectedRegions, out ExpTmpOutVar_0, "first_point", 
            "true", "row");
        ho_SelectedRegions.Dispose();
        ho_SelectedRegions = ExpTmpOutVar_0;
        }

        {
        HObject ExpTmpOutVar_0;
        HOperatorSet.SelectShape(ho_SelectedRegions, out ExpTmpOutVar_0, "area", 
            "and", 1e3, 200e7);
        ho_SelectedRegions.Dispose();
        ho_SelectedRegions = ExpTmpOutVar_0;
        }


        //Separo solo por circularidad y area
        ho_SelectedRegions1.Dispose();
        HOperatorSet.SelectShape(ho_SelectedRegions, out ho_SelectedRegions1, (new HTuple("circularity")).TupleConcat(
            "area"), "and", (new HTuple(0.1)).TupleConcat(1e3), (new HTuple(0.99)).TupleConcat(
            200e6));



        {
        HObject ExpTmpOutVar_0;
        HOperatorSet.SortRegion(ho_SelectedRegions1, out ExpTmpOutVar_0, "first_point", 
            "true", "row");
        ho_SelectedRegions1.Dispose();
        ho_SelectedRegions1 = ExpTmpOutVar_0;
        }
        hv_Nelementos.Dispose();hv_Row.Dispose();hv_Column.Dispose();
        HOperatorSet.AreaCenter(ho_SelectedRegions1, out hv_Nelementos, out hv_Row, 
            out hv_Column);

        HOperatorSet.DispObj(ho_SelectedRegions1, hv_ExpDefaultWinHandle);

        if ((int)(new HTuple((new HTuple(hv_Nelementos.TupleLength())).TupleLess(
            1))) != 0)
        {
          HOperatorSet.ClearWindow(hv_ExpDefaultWinHandle);

          HOperatorSet.DispText(hv_ExpDefaultWinHandle, " #### Manga No Enontrada #### ", 
              "window", 10, 10, "black", new HTuple(), new HTuple());
          hv_Procesando.Dispose();
          hv_Procesando = 0;
          hv_Resultado.Dispose();
          hv_Resultado = 2;
          Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
          Send_Data_Info("BLOQUE 3 FINALIZADO con ### ERRORES ####", hv_SerialHandle);

          hv_Estado_Funcion.Dispose();
          hv_Estado_Funcion = 0;
          ho_X_COPY_INP_TMP.Dispose();
          ho_Y_COPY_INP_TMP.Dispose();
          ho_Z_COPY_INP_TMP.Dispose();
          ho_ModelImage.Dispose();
          ho_RegionSleeve.Dispose();
          ho_SelectedRegions.Dispose();
          ho_Region.Dispose();
          ho_RegionTrans.Dispose();
          ho_RegionErosion.Dispose();
          ho_RegionDifference.Dispose();
          ho_RegionComplement.Dispose();
          ho_ConnectedRegions1.Dispose();
          ho_SelectedRegions1.Dispose();
          ho_MultiChannelImage.Dispose();
          ho_ObjectSelected.Dispose();
          ho_SelectedRegions2.Dispose();
          ho_Zred.Dispose();
          ho_Yred.Dispose();
          ho_Xred.Dispose();

          hv_DitsiObjMax.Dispose();
          hv_WindowHandle.Dispose();
          hv_NumConnected.Dispose();
          hv_NumHoles.Dispose();
          hv_NumConnectedComplement.Dispose();
          hv_NumHolesComplement.Dispose();
          hv_Nelementos.Dispose();
          hv_Row.Dispose();
          hv_Column.Dispose();
          hv_Procesando.Dispose();
          hv_Resultado.Dispose();
          hv_VectorMangas.Dispose();
          hv_Vector_Z.Dispose();
          hv_Index.Dispose();
          hv_Value.Dispose();
          hv_PosX.Dispose();
          hv_PosY.Dispose();
          hv_PosZ.Dispose();
          hv_PosicionSleeve.Dispose();
          hv_Mensaje.Dispose();
          hv_Umbral_Diff.Dispose();
          hv_largoVector.Dispose();
          hv_i.Dispose();
          hv_j.Dispose();
          hv_Diff.Dispose();
          hv_Diff_Abs.Dispose();
          hv_Exception.Dispose();
          hv_EstadoFx.Dispose();

          return;
        }

        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_Row, hv_Column, 50, 0);

        ho_MultiChannelImage.Dispose();
        HOperatorSet.Compose3(ho_X_COPY_INP_TMP, ho_Y_COPY_INP_TMP, ho_Z_COPY_INP_TMP, 
            out ho_MultiChannelImage);

        hv_VectorMangas.Dispose();
        HOperatorSet.GetGrayval(ho_MultiChannelImage, hv_Row, hv_Column, out hv_VectorMangas);


        for (hv_Index=1; (int)hv_Index<=(int)(new HTuple(hv_Nelementos.TupleLength()
            )); hv_Index = (int)hv_Index + 1)
        {


          ho_ObjectSelected.Dispose();
          HOperatorSet.SelectObj(ho_SelectedRegions1, out ho_ObjectSelected, hv_Index);


          HOperatorSet.DispObj(ho_ObjectSelected, hv_ExpDefaultWinHandle);

          ho_SelectedRegions2.Dispose();ho_Zred.Dispose();ho_Yred.Dispose();ho_Xred.Dispose();hv_PosX.Dispose();hv_PosY.Dispose();hv_PosZ.Dispose();hv_PosicionSleeve.Dispose();
          Get_sleeve_Vector(ho_ObjectSelected, ho_Z_COPY_INP_TMP, ho_Y_COPY_INP_TMP, 
              ho_X_COPY_INP_TMP, out ho_SelectedRegions2, out ho_Zred, out ho_Yred, 
              out ho_Xred, hv_Parametros_Visualizacion, hv_Valores_Visualizacion, 
              hv_WindowHandle, hv_ObjectModel3D_Core_Pallet, hv_Diametro, hv_g_CamInBasePose2, 
              hv_SerialHandle, hv_g_AltutaVirtualCamEstereo, hv_Diametro_Interno, 
              out hv_PosX, out hv_PosY, out hv_PosZ, out hv_PosicionSleeve);

          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hvec_Matrix_Sleeve_New_COPY_INP_TMP[hv_IndexLast][hv_Index+2] = dh.Add(new HTupleVector((((hv_PosX+";")+hv_PosY)+";")+hv_PosZ));
          }

          hv_Mensaje.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_Mensaje = (((((("Manga "+hv_Index)+" Capturada -> ")+hv_PosX)+"<->")+hv_PosY)+"<->")+hv_PosZ;
          }
          Send_Data_Info(hv_Mensaje, hv_SerialHandle);


        }



        hvec_Matrix_Sleeve_New_Pos.Dispose();
        hvec_Matrix_Sleeve_New_Pos = new HTupleVector(hvec_Matrix_Sleeve_New_COPY_INP_TMP);


        hv_Estado_Funcion.Dispose();
        hv_Estado_Funcion = 1;


      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);

        hv_EstadoFx.Dispose();
        Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx);

        hv_Estado_Funcion.Dispose();
        hv_Estado_Funcion = 0;
      }

      ho_X_COPY_INP_TMP.Dispose();
      ho_Y_COPY_INP_TMP.Dispose();
      ho_Z_COPY_INP_TMP.Dispose();
      ho_ModelImage.Dispose();
      ho_RegionSleeve.Dispose();
      ho_SelectedRegions.Dispose();
      ho_Region.Dispose();
      ho_RegionTrans.Dispose();
      ho_RegionErosion.Dispose();
      ho_RegionDifference.Dispose();
      ho_RegionComplement.Dispose();
      ho_ConnectedRegions1.Dispose();
      ho_SelectedRegions1.Dispose();
      ho_MultiChannelImage.Dispose();
      ho_ObjectSelected.Dispose();
      ho_SelectedRegions2.Dispose();
      ho_Zred.Dispose();
      ho_Yred.Dispose();
      ho_Xred.Dispose();

      hv_DitsiObjMax.Dispose();
      hv_WindowHandle.Dispose();
      hv_NumConnected.Dispose();
      hv_NumHoles.Dispose();
      hv_NumConnectedComplement.Dispose();
      hv_NumHolesComplement.Dispose();
      hv_Nelementos.Dispose();
      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_Procesando.Dispose();
      hv_Resultado.Dispose();
      hv_VectorMangas.Dispose();
      hv_Vector_Z.Dispose();
      hv_Index.Dispose();
      hv_Value.Dispose();
      hv_PosX.Dispose();
      hv_PosY.Dispose();
      hv_PosZ.Dispose();
      hv_PosicionSleeve.Dispose();
      hv_Mensaje.Dispose();
      hv_Umbral_Diff.Dispose();
      hv_largoVector.Dispose();
      hv_i.Dispose();
      hv_j.Dispose();
      hv_Diff.Dispose();
      hv_Diff_Abs.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_X_COPY_INP_TMP.Dispose();
      ho_Y_COPY_INP_TMP.Dispose();
      ho_Z_COPY_INP_TMP.Dispose();
      ho_ModelImage.Dispose();
      ho_RegionSleeve.Dispose();
      ho_SelectedRegions.Dispose();
      ho_Region.Dispose();
      ho_RegionTrans.Dispose();
      ho_RegionErosion.Dispose();
      ho_RegionDifference.Dispose();
      ho_RegionComplement.Dispose();
      ho_ConnectedRegions1.Dispose();
      ho_SelectedRegions1.Dispose();
      ho_MultiChannelImage.Dispose();
      ho_ObjectSelected.Dispose();
      ho_SelectedRegions2.Dispose();
      ho_Zred.Dispose();
      ho_Yred.Dispose();
      ho_Xred.Dispose();

      hv_DitsiObjMax.Dispose();
      hv_WindowHandle.Dispose();
      hv_NumConnected.Dispose();
      hv_NumHoles.Dispose();
      hv_NumConnectedComplement.Dispose();
      hv_NumHolesComplement.Dispose();
      hv_Nelementos.Dispose();
      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_Procesando.Dispose();
      hv_Resultado.Dispose();
      hv_VectorMangas.Dispose();
      hv_Vector_Z.Dispose();
      hv_Index.Dispose();
      hv_Value.Dispose();
      hv_PosX.Dispose();
      hv_PosY.Dispose();
      hv_PosZ.Dispose();
      hv_PosicionSleeve.Dispose();
      hv_Mensaje.Dispose();
      hv_Umbral_Diff.Dispose();
      hv_largoVector.Dispose();
      hv_i.Dispose();
      hv_j.Dispose();
      hv_Diff.Dispose();
      hv_Diff_Abs.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Test_STR (HTuple hv_DataToSend, out HTuple hv_Index, out HTuple hv_DataToSendOut)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Exception = new HTuple(), hv_asd = new HTuple();
    // Initialize local and output iconic variables 
    hv_Index = new HTuple();
    hv_DataToSendOut = new HTuple();
    try
    {

      try
      {

        hv_DataToSendOut.Dispose();
        hv_DataToSendOut = new HTuple(hv_DataToSend);
        for (hv_Index=1; (int)hv_Index<=80; hv_Index = (int)hv_Index + 1)
        {

          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_DataToSendOut = hv_DataToSendOut+"A";
          hv_DataToSendOut.Dispose();
          hv_DataToSendOut = ExpTmpLocalVar_DataToSendOut;
          }
          }


        }

        for (hv_Index=1; (int)hv_Index<=2; hv_Index = (int)hv_Index + 1)
        {

          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_DataToSendOut = hv_DataToSendOut+"X";
          hv_DataToSendOut.Dispose();
          hv_DataToSendOut = ExpTmpLocalVar_DataToSendOut;
          }
          }


        }


      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_asd.Dispose();
        hv_asd = 0;
      }


      hv_Exception.Dispose();
      hv_asd.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Exception.Dispose();
      hv_asd.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Verificate_Pose_RobotVision (HTuple hv_SerialHandle, HTuple hv_Pose_Refinada)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_realPoss = new HTuple(), hv_ToolInBasePose = new HTuple();
    HTuple hv_ToolInCamPose = new HTuple(), hv_PoseInvert = new HTuple();
    HTuple hv_ObjInCamPose = new HTuple(), hv_CamInToolPose = new HTuple();
    HTuple hv_CamInBasePose = new HTuple(), hv_ObjInBasePose = new HTuple();
    // Initialize local and output iconic variables 
    try
    {
      hv_realPoss.Dispose();
      Get_Pose_Tool(hv_SerialHandle, out hv_realPoss);
      // dev_inspect_ctrl(...); only in hdevelop
      hv_ToolInBasePose.Dispose();
      Get_Pose_Tool(hv_SerialHandle, out hv_ToolInBasePose);
      // dev_inspect_ctrl(...); only in hdevelop

      //************************************************************************************************************
      //Oriento el robot a como este la placa
      //************************************************************************************************************
      hv_ToolInCamPose.Dispose();
      HOperatorSet.ReadPose("C:/Users/Usuario/Dropbox (MIRS)/1.-Servidor Desarrollo Software/7.-Magotteaux/7.-HandEye/1.- Ensenso R1/ToolInCamPose_R1.dat", 
          out hv_ToolInCamPose);
      hv_PoseInvert.Dispose();
      HOperatorSet.PoseInvert(hv_ToolInCamPose, out hv_PoseInvert);
      // dev_inspect_ctrl(...); only in hdevelop
      hv_ToolInCamPose.Dispose();
      HOperatorSet.PoseInvert(hv_PoseInvert, out hv_ToolInCamPose);
      // dev_inspect_ctrl(...); only in hdevelop
      hv_ObjInCamPose.Dispose();
      hv_ObjInCamPose = new HTuple(hv_Pose_Refinada);

      hv_CamInToolPose.Dispose();
      HOperatorSet.PoseInvert(hv_ToolInCamPose, out hv_CamInToolPose);
      hv_CamInBasePose.Dispose();
      HOperatorSet.PoseCompose(hv_ToolInBasePose, hv_CamInToolPose, out hv_CamInBasePose);
      hv_ObjInBasePose.Dispose();
      HOperatorSet.PoseCompose(hv_CamInBasePose, hv_ObjInCamPose, out hv_ObjInBasePose);
      {
      HTuple ExpTmpOutVar_0;
      HOperatorSet.ConvertPoseType(hv_ObjInBasePose, "Rp+T", "abg", "point", out ExpTmpOutVar_0);
      hv_ObjInBasePose.Dispose();
      hv_ObjInBasePose = ExpTmpOutVar_0;
      }
      // dev_inspect_ctrl(...); only in hdevelop


      hv_realPoss.Dispose();
      hv_ToolInBasePose.Dispose();
      hv_ToolInCamPose.Dispose();
      hv_PoseInvert.Dispose();
      hv_ObjInCamPose.Dispose();
      hv_CamInToolPose.Dispose();
      hv_CamInBasePose.Dispose();
      hv_ObjInBasePose.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_realPoss.Dispose();
      hv_ToolInBasePose.Dispose();
      hv_ToolInCamPose.Dispose();
      hv_PoseInvert.Dispose();
      hv_ObjInCamPose.Dispose();
      hv_CamInToolPose.Dispose();
      hv_CamInBasePose.Dispose();
      hv_ObjInBasePose.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void Visualizar_3D (HTuple hv_Modelo3D, HTuple hv_Parametros_Visualizacion, 
      HTuple hv_Valores_Visualizacion, HTuple hv_Visualizar, HTuple hv_PoseIn, HTuple hv_Title, 
      HTuple hv_Label, HTuple hv_WindowHandle, out HTuple hv_Pose)
  {


    // Initialize local and output iconic variables 
    hv_Pose = new HTuple();

    if ((int)(hv_Visualizar) != 0)
    {
      hv_Pose.Dispose();
      visualize_object_model_3d(hv_ExpDefaultWinHandle, hv_Modelo3D, new HTuple(), 
          new HTuple(), hv_Parametros_Visualizacion, hv_Valores_Visualizacion, hv_Title, 
          hv_Label, new HTuple(), out hv_Pose);
    }



    return;
  }

  public void Visualizar_3D_COPY_1 (HTuple hv_Modelo3D, HTuple hv_Parametros_Visualizacion, 
      HTuple hv_Valores_Visualizacion, HTuple hv_Visualizar, HTuple hv_PoseIn, HTuple hv_Title, 
      HTuple hv_Label, out HTuple hv_Pose)
  {



    // Local control variables 

    HTuple hv_WindowHandle = new HTuple();
    // Initialize local and output iconic variables 
    hv_Pose = new HTuple();
    try
    {

      if ((int)(hv_Visualizar) != 0)
      {
        //dev_get_window(...);
        hv_Pose.Dispose();
        visualize_object_model_3d(hv_ExpDefaultWinHandle, hv_Modelo3D, new HTuple(), 
            new HTuple(), hv_Parametros_Visualizacion, hv_Valores_Visualizacion, 
            hv_Title, hv_Label, new HTuple(), out hv_Pose);
      }


      hv_WindowHandle.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_WindowHandle.Dispose();

      throw HDevExpDefaultException;
    }
  }

  // Main procedure 
  private void action()
  {


    // Local iconic variables 

    HObject ho_ModelImage=null, ho_Xm=null, ho_Ym=null;
    HObject ho_Zm=null, ho_ImgLeftCamera_1=null, ho_Image=null;

    // Local control variables 

    HTuple hv_Parametros_Visualizacion = new HTuple();
    HTuple hv_Valores_Visualizacion = new HTuple(), hv_CameraActive = new HTuple();
    HTuple hv_ReintentosConecionEstereo = new HTuple(), hv_SerialHandle = new HTuple();
    HTuple ExpTmpLocalVar_g_CamInBasePose1 = new HTuple();
    HTuple ExpTmpLocalVar_g_CamInBasePose2 = new HTuple();
    HTuple hv_NxLib = new HTuple(), hv_Camera_1 = new HTuple();
    HTuple hv_Conexion_Camara = new HTuple(), hv_AcqHandle_Cam_0 = new HTuple();
    HTuple hv_Camera0_Parameters = new HTuple(), hv_Camera0_Pose = new HTuple();
    HTuple hv_Conexion_Camara_0 = new HTuple(), hv_CalTabFile = new HTuple();
    HTuple hv_ReintentosConexionOptica = new HTuple(), hv_MinimumDisparity_Cam1 = new HTuple();
    HTuple hv_NumberOfDisparities_Cam1 = new HTuple(), hv_Projector = new HTuple();
    HTuple hv_FrontLigth = new HTuple(), hv_AutoExposure = new HTuple();
    HTuple hv_AutoGain = new HTuple(), hv_Exposure = new HTuple();
    HTuple hv_Gain = new HTuple(), hv_FlexView = new HTuple();
    HTuple hv_TempCam = new HTuple(), hv_Escena3D_RAW = new HTuple();
    HTuple hv_Time = new HTuple(), hv_g_Error_CamaraOpt_Adq = new HTuple();
    HTuple hv_Path_CORE_ID = new HTuple(), hv_Path_SFM_Segmentos = new HTuple();
    HTuple hv_Path_3D_Segmentos = new HTuple(), hv_Resultado = new HTuple();
    HTuple hv_Procesando = new HTuple(), hv_Exception = new HTuple();
    HTuple hv_EstadoFx = new HTuple();

    HTupleVector hvec_Vector_Estado_Fx = new HTupleVector(2);
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ModelImage);
    HOperatorSet.GenEmptyObj(out ho_Xm);
    HOperatorSet.GenEmptyObj(out ho_Ym);
    HOperatorSet.GenEmptyObj(out ho_Zm);
    HOperatorSet.GenEmptyObj(out ho_ImgLeftCamera_1);
    HOperatorSet.GenEmptyObj(out ho_Image);
    try
    {




      hv_Parametros_Visualizacion.Dispose();
      hv_Parametros_Visualizacion = new HTuple();
      hv_Parametros_Visualizacion[0] = "colored";
      hv_Parametros_Visualizacion[1] = "disp_pose";
      hv_Parametros_Visualizacion[2] = "point_size";
      hv_Valores_Visualizacion.Dispose();
      hv_Valores_Visualizacion = new HTuple();
      hv_Valores_Visualizacion[0] = 12;
      hv_Valores_Visualizacion[1] = "true";
      hv_Valores_Visualizacion[2] = 1;
      hv_CameraActive.Dispose();
      hv_CameraActive = new HTuple();
      hv_CameraActive[0] = 1;
      hv_CameraActive[1] = 1;
      hv_ReintentosConecionEstereo.Dispose();
      hv_ReintentosConecionEstereo = 0;
      hv_SerialHandle.Dispose();
      HOperatorSet.OpenSerial("COM100", out hv_SerialHandle);
      HOperatorSet.SetSerialParam(hv_SerialHandle, 115200, 8, "none", "none", 1, 
          20, "unchanged");

      //**************************************************
      Find_SerialBridge(hv_SerialHandle);
      //**************************************************
      //global tuple g_CamInBasePose1
      //global tuple g_CamInBasePose2


      HOperatorSet.CreatePose(0, 0, 0, 0, 0, 0, "Rp+T", "gba", "point", out ExpTmpLocalVar_g_CamInBasePose1);
      ExpSetGlobalVar_g_CamInBasePose1(ExpTmpLocalVar_g_CamInBasePose1);
      HOperatorSet.CreatePose(0, 0, 0, 0, 0, 0, "Rp+T", "gba", "point", out ExpTmpLocalVar_g_CamInBasePose2);
      ExpSetGlobalVar_g_CamInBasePose2(ExpTmpLocalVar_g_CamInBasePose2);

      hvec_Vector_Estado_Fx.Dispose();
      Get_Vector_Estados(out hvec_Vector_Estado_Fx);

      //# FUNCIONES EXTERNAS A LOS BLOQUES  

      //*****************************************
      //0.CAPTURO EL MODELO 3D  DE LA CAMRA 1
      //*****************************************


      //**********************************************************
      //1.1- Conexion de Ensenso
      //**********************************************************

      hv_NxLib.Dispose();hv_Camera_1.Dispose();hv_Conexion_Camara.Dispose();
      Conectar_Ensenso_N35_SendMsj(24001, hv_SerialHandle, out hv_NxLib, out hv_Camera_1, 
          out hv_Conexion_Camara);


      if ((int)(hv_Conexion_Camara.TupleNot()) != 0)
      {
        hv_ReintentosConecionEstereo.Dispose();
        {
        HTuple ExpTmpOutVar_0;hv_Camera_1.Dispose();HTuple ExpTmpOutVar_1;
        get_CameraEstereoConection(hv_Conexion_Camara, hv_NxLib, hv_SerialHandle, 
            out hv_ReintentosConecionEstereo, out ExpTmpOutVar_0, out hv_Camera_1, 
            out ExpTmpOutVar_1);
        hv_NxLib.Dispose();
        hv_NxLib = ExpTmpOutVar_0;
        hv_Conexion_Camara.Dispose();
        hv_Conexion_Camara = ExpTmpOutVar_1;
        }
      }



      if ((int)(new HTuple(hv_ReintentosConecionEstereo.TupleGreaterEqual(3))) != 0)
      {
        if (hv_CameraActive == null)
          hv_CameraActive = new HTuple();
        hv_CameraActive[0] = 0;
      }
      else
      {
        Send_Data_Info("-> Camara Estereo R1 Conectada <-", hv_SerialHandle);
      }






      //***************************************************************************
      //1.2- Conexion de Procilica GT
      //***************************************************************************

      //Funcion que configura la camara Procilica
      hv_AcqHandle_Cam_0.Dispose();hv_Camera0_Parameters.Dispose();hv_Camera0_Pose.Dispose();hv_Conexion_Camara_0.Dispose();hv_CalTabFile.Dispose();
      Set_Config_Cam(out hv_AcqHandle_Cam_0, out hv_Camera0_Parameters, out hv_Camera0_Pose, 
          out hv_Conexion_Camara_0, out hv_CalTabFile);

      hv_ReintentosConexionOptica.Dispose();hv_AcqHandle_Cam_0.Dispose();hv_Camera0_Parameters.Dispose();hv_Camera0_Pose.Dispose();
      {
      HTuple ExpTmpOutVar_0;hv_CalTabFile.Dispose();
      Get_OpticaConection(hv_Conexion_Camara_0, hv_SerialHandle, out hv_ReintentosConexionOptica, 
          out hv_AcqHandle_Cam_0, out hv_Camera0_Parameters, out hv_Camera0_Pose, 
          out ExpTmpOutVar_0, out hv_CalTabFile);
      hv_Conexion_Camara_0.Dispose();
      hv_Conexion_Camara_0 = ExpTmpOutVar_0;
      }




      if ((int)(new HTuple(hv_ReintentosConexionOptica.TupleGreaterEqual(3))) != 0)
      {
        if (hv_CameraActive == null)
          hv_CameraActive = new HTuple();
        hv_CameraActive[1] = 0;
      }
      else
      {
        Send_Data_Info("-> Camara Optica R1 Conectada <-", hv_SerialHandle);
      }
      //***************************************************************************
      //Funciones de adquisicion
      //***************************************************************************
      if ((int)(((hv_CameraActive.TupleSelect(0))).TupleAnd(hv_CameraActive.TupleSelect(
          1))) != 0)
      {

        //# ########################################################################
        //Configuracion de Parametros
        hv_MinimumDisparity_Cam1.Dispose();
        hv_MinimumDisparity_Cam1 = -64;
        hv_NumberOfDisparities_Cam1.Dispose();
        hv_NumberOfDisparities_Cam1 = 128;
        hv_Projector.Dispose();
        hv_Projector = "false";
        hv_FrontLigth.Dispose();
        hv_FrontLigth = "true";
        hv_AutoExposure.Dispose();
        hv_AutoExposure = "true";
        hv_AutoGain.Dispose();
        hv_AutoGain = "false";
        hv_Exposure.Dispose();
        hv_Exposure = 1;
        hv_Gain.Dispose();
        hv_Gain = 1;
        hv_FlexView.Dispose();
        hv_FlexView = 1;
        hv_TempCam.Dispose();
        Config_Parametros_Cam_R1(hv_NxLib, hv_Camera_1, hv_NumberOfDisparities_Cam1, 
            hv_MinimumDisparity_Cam1, hv_Projector, hv_FrontLigth, hv_AutoExposure, 
            hv_AutoGain, hv_Gain, hv_Exposure, hv_FlexView, out hv_TempCam);

        //# ############### Capturo la Imagen ########################################



        //* set_framegrabber_param (NxLib, 'do_execute', 'EstimateDisparitySettings')

        ho_ModelImage.Dispose();ho_Xm.Dispose();ho_Ym.Dispose();ho_Zm.Dispose();ho_ImgLeftCamera_1.Dispose();hv_Escena3D_RAW.Dispose();
        Get_Img_Camera_R1(out ho_ModelImage, out ho_Xm, out ho_Ym, out ho_Zm, out ho_ImgLeftCamera_1, 
            hv_NxLib, hv_Camera_1, out hv_Escena3D_RAW);


        hv_Time.Dispose();
        hv_Time = 300000;
        hv_Gain.Dispose();
        hv_Gain = 20.0;
        Set_exposure_Time_cam_0(hv_AcqHandle_Cam_0, hv_Time, hv_Gain);
        ho_Image.Dispose();hv_g_Error_CamaraOpt_Adq.Dispose();
        Get_Image(out ho_Image, hv_AcqHandle_Cam_0, out hv_g_Error_CamaraOpt_Adq);


        //****************************************************************************



        //****************************************************************************
        //                        CONSULTA A BD
        //         FUNCION QUE LEE LOS ARCHIVOS STL DE LOS CORES.
        //*****************************************************************************
        //# ###########################################################################
        hv_Path_CORE_ID.Dispose();hv_Path_SFM_Segmentos.Dispose();hv_Path_3D_Segmentos.Dispose();
        Get_Cores_BD(out hv_Path_CORE_ID, out hv_Path_SFM_Segmentos, out hv_Path_3D_Segmentos);
        //# ###########################################################################

        //*****************************************************************************
        //                      FIN DE INICIALIZACIONES
        //*****************************************************************************

        //*****************************************************************************
        //Verifico si SreialBridge esta activo para poder continuar
        //*****************************************************************************
        //Find_SerialBridge (SerialHandle)
        //*****************************************************************************


        //# ### Envio data de estado ########################
        hv_Resultado.Dispose();
        hv_Resultado = 0;
        hv_Procesando.Dispose();
        hv_Procesando = 0;
        Send_Data_Proceso(hv_SerialHandle, hv_Resultado, hv_Procesando);
        //*****************************************************************************

        //NxLib := []
        //Camera_1 := []
        //AcqHandle_Cam_0 := []
        //Camera0_Parameters := []
        //Camera0_Pose := []
        try
        {

          //****************************************************
          A01_Consolidado_Vision_R1(hv_SerialHandle, hvec_Vector_Estado_Fx, hv_Path_SFM_Segmentos, 
              hv_Path_3D_Segmentos, hv_Path_CORE_ID, hv_NxLib, hv_Camera_1, hv_AcqHandle_Cam_0, 
              hv_Camera0_Parameters, hv_Camera0_Pose, hv_Parametros_Visualizacion, 
              hv_Valores_Visualizacion);

        }
        // catch (Exception) 
        catch (HalconException HDevExpDefaultException1)
        {
          HDevExpDefaultException1.ToHTuple(out hv_Exception);
          hv_EstadoFx.Dispose();
          Send_Data_Error(hv_Exception, hv_SerialHandle, out hv_EstadoFx);
        }

      }
      else
      {
        hv_Exception.Dispose();
        Close_All_Cameras(hv_AcqHandle_Cam_0, hv_Camera_1, hv_NxLib, out hv_Exception);

        HOperatorSet.CloseSerial(hv_SerialHandle);
      }

      hv_Exception.Dispose();
      Close_All_Cameras(hv_AcqHandle_Cam_0, hv_Camera_1, hv_NxLib, out hv_Exception);


      //*****************************************
      //Seteo la info de que esta cerrado ******
      //*****************************************


      Set_Puntero_Cerrar_SistemaV1(hv_SerialHandle);

      Send_Data_Info("-> Sistema de Vision 1 Cerrado <-", hv_SerialHandle);

      HOperatorSet.CloseSerial(hv_SerialHandle);


    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_ModelImage.Dispose();
      ho_Xm.Dispose();
      ho_Ym.Dispose();
      ho_Zm.Dispose();
      ho_ImgLeftCamera_1.Dispose();
      ho_Image.Dispose();

      hv_Parametros_Visualizacion.Dispose();
      hv_Valores_Visualizacion.Dispose();
      hv_CameraActive.Dispose();
      hv_ReintentosConecionEstereo.Dispose();
      hv_SerialHandle.Dispose();
      hv_NxLib.Dispose();
      hv_Camera_1.Dispose();
      hv_Conexion_Camara.Dispose();
      hv_AcqHandle_Cam_0.Dispose();
      hv_Camera0_Parameters.Dispose();
      hv_Camera0_Pose.Dispose();
      hv_Conexion_Camara_0.Dispose();
      hv_CalTabFile.Dispose();
      hv_ReintentosConexionOptica.Dispose();
      hv_MinimumDisparity_Cam1.Dispose();
      hv_NumberOfDisparities_Cam1.Dispose();
      hv_Projector.Dispose();
      hv_FrontLigth.Dispose();
      hv_AutoExposure.Dispose();
      hv_AutoGain.Dispose();
      hv_Exposure.Dispose();
      hv_Gain.Dispose();
      hv_FlexView.Dispose();
      hv_TempCam.Dispose();
      hv_Escena3D_RAW.Dispose();
      hv_Time.Dispose();
      hv_g_Error_CamaraOpt_Adq.Dispose();
      hv_Path_CORE_ID.Dispose();
      hv_Path_SFM_Segmentos.Dispose();
      hv_Path_3D_Segmentos.Dispose();
      hv_Resultado.Dispose();
      hv_Procesando.Dispose();
      hv_Exception.Dispose();
      hv_EstadoFx.Dispose();
      hvec_Vector_Estado_Fx.Dispose();

      throw HDevExpDefaultException;
    }
    ho_ModelImage.Dispose();
    ho_Xm.Dispose();
    ho_Ym.Dispose();
    ho_Zm.Dispose();
    ho_ImgLeftCamera_1.Dispose();
    ho_Image.Dispose();

    hv_Parametros_Visualizacion.Dispose();
    hv_Valores_Visualizacion.Dispose();
    hv_CameraActive.Dispose();
    hv_ReintentosConecionEstereo.Dispose();
    hv_SerialHandle.Dispose();
    hv_NxLib.Dispose();
    hv_Camera_1.Dispose();
    hv_Conexion_Camara.Dispose();
    hv_AcqHandle_Cam_0.Dispose();
    hv_Camera0_Parameters.Dispose();
    hv_Camera0_Pose.Dispose();
    hv_Conexion_Camara_0.Dispose();
    hv_CalTabFile.Dispose();
    hv_ReintentosConexionOptica.Dispose();
    hv_MinimumDisparity_Cam1.Dispose();
    hv_NumberOfDisparities_Cam1.Dispose();
    hv_Projector.Dispose();
    hv_FrontLigth.Dispose();
    hv_AutoExposure.Dispose();
    hv_AutoGain.Dispose();
    hv_Exposure.Dispose();
    hv_Gain.Dispose();
    hv_FlexView.Dispose();
    hv_TempCam.Dispose();
    hv_Escena3D_RAW.Dispose();
    hv_Time.Dispose();
    hv_g_Error_CamaraOpt_Adq.Dispose();
    hv_Path_CORE_ID.Dispose();
    hv_Path_SFM_Segmentos.Dispose();
    hv_Path_3D_Segmentos.Dispose();
    hv_Resultado.Dispose();
    hv_Procesando.Dispose();
    hv_Exception.Dispose();
    hv_EstadoFx.Dispose();
    hvec_Vector_Estado_Fx.Dispose();

  }

  public void InitHalcon()
  {
    // Default settings used in HDevelop
    HOperatorSet.SetSystem("width", 512);
    HOperatorSet.SetSystem("height", 512);
  }

  public void RunHalcon(HTuple Window)
  {
    hv_ExpDefaultWinHandle = Window;
    action();
  }

}

